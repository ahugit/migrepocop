nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    69.7648      0.500000    
Tfreq:   51
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    69.7648      0.500000    
Tfreq:   51
 Estimating   51 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        232.55          3.88          1.01         23.25          1.00          0.04         29.18
iter,obj,time:      3        231.27          1.27          1.02         23.72          0.32          0.06         26.38
iter,obj,time:      4        233.90          1.27          1.04         23.52          0.32          0.06         26.19
iter,obj,time:      5        252.42          1.02          1.00         23.54          0.51          0.06         26.14
iter,obj,time:      6        231.54          1.12          1.00         23.53          0.37          0.05         26.08
iter,obj,time:      7        235.18          1.04          0.99         23.38          0.64          0.05         26.10
iter,obj,time:      8        550.84          1.07          1.00         23.62          0.39          0.05         26.13
iter,obj,time:      9        233.02          1.02          0.99         23.57          0.44          0.05         26.07
iter,obj,time:     10        231.05          1.19          1.00         23.65          0.34          0.06         26.25
iter,obj,time:     11        234.51          1.27          1.01         23.67          0.37          0.05         26.37
iter,obj,time:     12        226.78          1.03          0.99         23.60          0.55          0.06         26.23
iter,obj,time:     13        231.95          1.27          1.02         23.78          0.36          0.06         26.48
iter,obj,time:     14        232.93          1.20          1.00         23.71          0.43          0.05         26.40
iter,obj,time:     15        913.56          1.07          0.99         23.63          0.34          0.05         26.09
iter,obj,time:     16        232.81          1.05          0.98         23.71          0.50          0.05         26.30
iter,obj,time:     17        230.69          1.05          0.99         23.70          0.52          0.05         26.32
iter,obj,time:     18        232.55          1.20          1.01         23.70          0.38          0.05         26.34
iter,obj,time:     19        231.98          1.09          0.98         23.79          0.38          0.05         26.29
iter,obj,time:     20        251.16          1.03          0.99         23.88          0.25          0.06         26.20
iter,obj,time:     21        247.61          1.06          0.99         23.66          0.48          0.05         26.24
iter,obj,time:     22        225.40          1.00          0.99         23.71          0.50          0.06         26.27
iter,obj,time:     23        235.20          1.28          1.03         23.86          0.26          0.05         26.48
iter,obj,time:     24        232.11          1.16          1.01         23.83          0.32          0.05         26.38
iter,obj,time:     25        238.71          1.00          0.98         23.76          0.45          0.05         26.24
iter,obj,time:     26        238.25          0.99          0.99         23.95          0.43          0.05         26.41
iter,obj,time:     27        241.08          1.11          1.00         23.85          0.42          0.06         26.43
iter,obj,time:     28        233.14          1.09          0.99         23.77          0.46          0.05         26.37
iter,obj,time:     29        235.29          1.16          1.00         23.72          0.51          0.06         26.45
iter,obj,time:     30        245.65          1.09          0.99         23.61          0.62          0.05         26.36
iter,obj,time:     31        244.91          1.05          0.99         23.62          0.57          0.05         26.27
iter,obj,time:     32        245.54          1.03          0.99         23.89          0.34          0.05         26.31
iter,obj,time:     33        242.26          1.01          0.99         23.85          0.42          0.05         26.32
iter,obj,time:     34        237.59          0.99          0.98         23.73          0.45          0.05         26.22
iter,obj,time:     35        234.67          1.20          0.99         23.75          0.45          0.05         26.44
iter,obj,time:     36        265.65          1.01          0.99         23.87          0.37          0.05         26.29
iter,obj,time:     37        252.36          0.98          0.99         23.61          0.47          0.05         26.11
iter,obj,time:     38        235.62          1.14          1.00         23.89          0.27          0.05         26.36
iter,obj,time:     39        238.84          1.06          0.99         23.71          0.52          0.05         26.33
iter,obj,time:     40        230.67          1.00          0.99         23.70          0.46          0.05         26.20
iter,obj,time:     41        241.56          1.06          0.99         23.66          0.57          0.05         26.33
iter,obj,time:     42        232.42          1.11          1.00         23.74          0.45          0.05         26.34
iter,obj,time:     43        230.30          1.22          1.03         23.86          0.21          0.05         26.37
iter,obj,time:     44        230.43          1.02          1.00         23.74          0.31          0.05         26.12
iter,obj,time:     45        236.45          0.99          1.00         23.57          0.58          0.06         26.20
iter,obj,time:     46        240.92          1.23          1.03         23.73          0.32          0.05         26.36
iter,obj,time:     47        233.99          0.98          0.98         23.43          0.81          0.06         26.26
iter,obj,time:     48        230.02          1.20          1.02         23.73          0.32          0.05         26.31
iter,obj,time:     49        239.42          1.01          1.00         23.43          0.72          0.05         26.21
iter,obj,time:     50        228.09          1.21          1.00         23.88          0.29          0.05         26.43
iter,obj,time:     51        232.04          1.02          0.98         23.79          0.42          0.05         26.25
iter,obj,time:     52        230.19          0.96          0.98         23.71          0.58          0.05         26.28
iter,obj,time:     53        236.95          1.00          0.99         23.66          0.50          0.05         26.20

    1    232.55        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    2    231.27        1.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    3    233.90        2.989     -2.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    4    252.42        2.989     -1.297      4.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    5    231.54        2.989     -1.297      5.132     -100.0     0.2964    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    6    235.18        2.989     -1.297      5.132     -100.0      1.296    
                      -1.602      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    7    550.84        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      1.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    8    233.02        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      1.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    9    231.05        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578     0.2605    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   10    234.51        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                      0.4448    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   11    226.78        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445     -1.825      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   12    231.95        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                     -0.4674      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   13    232.93        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -1.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   14    913.56        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     0.6208     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   15    232.81        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -2.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   16    230.69        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472    -0.8138E-01
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   17    232.55        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -10.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   18    231.98        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -1.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   19    251.16        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5556     0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   20    247.61        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.5105      0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   21    225.40        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.3670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   22    235.20        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                      0.2912    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   23    232.11        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088     0.2012    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   24    238.71        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988     0.3415    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   25    238.25        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585     0.3386    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   26    241.08        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614     0.4238    

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   27    233.14        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                     -0.1704    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   28    235.29        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170     0.3045      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   29    245.65        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000     0.4620    -0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   30    244.91        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01 0.4650    
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   31    245.54        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01 0.4584    -0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   32    242.26        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01 0.4300    -0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   33    237.59        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01 0.3009    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   34    234.67        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991     0.3131    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   35    265.65        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.6441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   36    252.36        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.5634    -0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   37    235.62        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01 0.8615    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   38    238.84        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385     0.7823E-01  0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   39    230.67        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.569      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   40    241.56        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.619     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   41    232.42        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                       1.115     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   42    230.30        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853      1.512      9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   43    230.43        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.505      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   44    236.45        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      9.023     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   45    240.92        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000      1.393    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   46    233.99        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071     0.9625      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   47    230.02        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      9.274      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   48    239.42        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.515    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   49    228.09        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000      1.333    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   50    232.04        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667     0.9157      9.534    
                       8.778     -3546.     -2.000    

   51    230.19        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      10.03    
                       8.778     -3546.     -2.000    

   52    236.95        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       9.278     -3546.     -2.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          52          52

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        1
neval is:       52


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       52     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -102.967       102.967       232.549       335.516    
   2  0.709707     -0.342904      -23.9226       23.9226       231.270       255.193    
   3  0.151889      -1.88460      -131.479       131.479       233.901       365.380    
   4  0.456170E-01  -3.08747      -215.397       215.397       252.415       467.812    
   5  0.882557     -0.124932      -8.71583       8.71583       231.545       240.261    
   6  0.711292     -0.340672      -23.7669       23.7669       235.185       258.952    
   7  0.241669      -1.42019      -99.0790       99.0790       550.836       649.916    
   8  0.682871     -0.381450      -26.6117       26.6117       233.019       259.631    
   9  0.500657     -0.691834      -48.2656       48.2656       231.049       279.315    
  10  0.494633     -0.703939      -49.1101       49.1101       234.506       283.616    
  11  0.437126     -0.827535      -57.7328       57.7328       226.781       284.514    
  12  0.462981     -0.770069      -53.7237       53.7237       231.948       285.672    
  13  0.988878     -0.111840E-01 -0.780249      0.780249       232.927       233.707    
  14  0.878158     -0.129929      -9.06447       9.06447       913.560       922.624    
  15  0.825605     -0.191638      -13.3696       13.3696       232.808       246.178    
  16  0.966665     -0.339033E-01  -2.36526       2.36526       230.690       233.055    
  17  0.340930      -1.07608      -75.0722       75.0722       232.549       307.621    
  18  0.288920      -1.24161      -86.6204       86.6204       231.976       318.596    
  19  0.442843     -0.814539      -56.8261       56.8261       251.165       307.991    
  20  0.878635     -0.129386      -9.02656       9.02656       247.610       256.636    
  21  0.198777E-01  -3.91816      -273.349       273.349       225.404       498.753    
  22  0.315829      -1.15255      -80.4076       80.4076       235.204       315.612    
  23  0.208690      -1.56690      -109.315       109.315       232.113       341.427    
  24  0.849393     -0.163234      -11.3880       11.3880       238.711       250.099    
  25  0.945818     -0.557056E-01  -3.88629       3.88629       238.245       242.131    
  26  0.567839     -0.565917      -39.4811       39.4811       241.078       280.559    
  27  0.718388     -0.330745      -23.0744       23.0744       233.144       256.219    
  28  0.115406      -2.15930      -150.643       150.643       235.291       385.934    
  29  0.659869E-01  -2.71830      -189.641       189.641       245.648       435.289    
  30  0.171393      -1.76380      -123.051       123.051       244.911       367.962    
  31  0.161953      -1.82045      -127.003       127.003       245.535       372.539    
  32  0.455406     -0.786566      -54.8745       54.8745       242.259       297.133    
  33  0.788693     -0.237378      -16.5606       16.5606       237.593       254.153    
  34  0.157754      -1.84672      -128.836       128.836       234.675       363.510    
  35  0.126279      -2.06926      -144.361       144.361       265.652       410.014    
  36  0.646962     -0.435467      -30.3803       30.3803       252.357       282.737    
  37  0.730769     -0.313658      -21.8823       21.8823       235.617       257.500    
  38  0.443446E-01  -3.11577      -217.371       217.371       238.845       456.215    
  39  0.219048      -1.51847      -105.935       105.935       230.667       336.602    
  40  0.311223E-01  -3.46983      -242.072       242.072       241.555       483.627    
  41  0.864417     -0.145700      -10.1647       10.1647       232.422       242.586    
  42  0.372606     -0.987233      -68.8741       68.8741       230.302       299.176    
  43  0.599250E-01  -2.81466      -196.364       196.364       230.428       426.792    
  44  0.250528      -1.38418      -96.5672       96.5672       236.447       333.014    
  45  0.404968E-01  -3.20653      -223.703       223.703       240.923       464.626    
  46  0.792822     -0.232156      -16.1963       16.1963       233.994       250.190    
  47  0.826691     -0.190324      -13.2779       13.2779       230.021       243.299    
  48  0.258424      -1.35316      -94.4025       94.4025       239.415       333.818    
  49  0.713620     -0.337405      -23.5390       23.5390       228.088       251.627    
  50  0.936186     -0.659413E-01  -4.60038       4.60038       232.044       236.644    
  51  0.655367E-01  -2.72514      -190.119       190.119       230.194       420.313    
  52  0.178790      -1.72154      -120.103       120.103       236.949       357.052    
loop,thermsimp(1:2)        1   102.967       23.9226    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     54        233.05          1.12          1.00         23.71          0.40          0.05         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     55        233.63          0.97          0.99         23.62          0.56          0.05         26.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        1
neval is:       54
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        2
neval is:       54


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       54     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -72.6979       72.6979       230.690       303.388    
   2  0.440787     -0.819193      -57.1508       57.1508       232.927       290.077    
   3  0.685789     -0.377185      -26.3142       26.3142       232.044       258.358    
   4  0.673104     -0.395856      -27.6168       27.6168       231.545       259.162    
   5  0.655536     -0.422301      -29.4618       29.4618       238.245       267.707    
   6  0.422838     -0.860766      -60.0511       60.0511       232.422       292.473    
   7  0.300870      -1.20108      -83.7929       83.7929       230.021       313.814    
   8  0.776987     -0.252331      -17.6038       17.6038       232.808       250.412    
   9  0.170551      -1.76872      -123.394       123.394       238.711       362.106    
  10  0.587497     -0.531884      -37.1068       37.1068       233.994       271.101    
  11  0.250425      -1.38459      -96.5959       96.5959       228.088       324.684    
  12  0.776362E-01  -2.55572      -178.299       178.299       237.593       415.892    
  13  0.766647     -0.265729      -18.5385       18.5385       231.270       249.809    
  14  0.480193     -0.733568      -51.1772       51.1772       233.144       284.322    
  15  0.434643     -0.833231      -58.1301       58.1301       247.610       305.740    
  16  0.815924E-01  -2.50602      -174.832       174.832       235.617       410.449    
  17  0.724257E-01  -2.62519      -183.146       183.146       235.185       418.331    
  18  0.573795     -0.555483      -38.7531       38.7531       233.019       271.772    
  19  0.196096      -1.62915      -113.657       113.657       231.049       344.706    
  20  0.240673      -1.42432      -99.3670       99.3670       241.078       340.445    
  21  0.194228      -1.63872      -114.325       114.325       252.357       366.682    
  22  0.236387      -1.44229      -100.621       100.621       234.506       335.127    
  23  0.261662      -1.34070      -93.5336       93.5336       226.781       320.315    
  24  0.146321      -1.92195      -134.085       134.085       231.948       366.033    
  25  0.169637      -1.77410      -123.769       123.769       242.259       366.028    
  26  0.886717     -0.120229      -8.38775       8.38775       230.302       238.690    
  27  0.253412      -1.37274      -95.7688       95.7688       232.549       328.318    
  28  0.470820     -0.753279      -52.5523       52.5523       251.165       303.717    
  29  0.329871      -1.10905      -77.3729       77.3729       235.204       312.577    
  30  0.726784     -0.319126      -22.2637       22.2637       231.976       254.240    
  31  0.612351     -0.490450      -34.2162       34.2162       236.447       270.663    
  32  0.146573      -1.92023      -133.964       133.964       239.415       373.380    
  33  0.812633     -0.207476      -14.4745       14.4745       232.549       247.024    
  34  0.486789     -0.719925      -50.2254       50.2254       230.667       280.892    
  35  0.653508     -0.425400      -29.6780       29.6780       232.113       261.791    
  36  0.180127      -1.71409      -119.583       119.583       236.949       356.533    
  37  0.155218      -1.86292      -129.966       129.966       234.675       364.641    
  38  0.830615     -0.185589      -12.9476       12.9476       233.901       246.849    
  39  0.728345     -0.316980      -22.1140       22.1140       244.911       267.025    
  40  0.262318      -1.33820      -93.3591       93.3591       245.535       338.894    
  41  0.234222      -1.45148      -101.262       101.262       235.291       336.554    
  42  0.250201      -1.38549      -96.6586       96.6586       265.652       362.311    
  43  0.898433     -0.107103      -7.47204       7.47204       230.194       237.666    
  44  0.580277     -0.544250      -37.9695       37.9695       230.428       268.398    
  45  0.823617     -0.194050      -13.5378       13.5378       245.648       259.186    
  46  0.820676     -0.197627      -13.7874       13.7874       238.845       252.632    
  47  0.502494     -0.688171      -48.0101       48.0101       240.923       288.933    
  48  0.751016     -0.286329      -19.9757       19.9757       252.415       272.391    
  49  0.360461      -1.02037      -71.1859       71.1859       241.555       312.741    
  50  0.948712     -0.526497E-01  -3.67310       3.67310       225.404       229.077    
  51  0.452918     -0.792045      -55.2568       55.2568       550.836       606.093    
  52  0.182886      -1.69889      -118.523       118.523       233.051       351.574    
loop,thermsimp(1:2)        2   72.6979       57.1508    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     56        233.19          0.98          0.98         23.59          0.60          0.05         26.20
Just calling func    0   0         26.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     57        235.91          1.02          0.99         23.65          0.53          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        2
neval is:       56
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        3
neval is:       56


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       56     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -124.488       124.488       225.404       349.892    
   2  0.274399      -1.29317      -90.2178       90.2178       230.194       320.412    
   3  0.597410E-01  -2.81774      -196.579       196.579       230.302       426.881    
   4  0.283115E-01  -3.56449      -248.676       248.676       233.901       482.577    
   5  0.901069     -0.104174      -7.26767       7.26767       232.549       239.817    
   6  0.717939     -0.331371      -23.1180       23.1180       231.270       254.388    
   7  0.294866      -1.22123      -85.1991       85.1991       232.808       318.007    
   8  0.935651     -0.665127E-01  -4.64024       4.64024       238.845       243.485    
   9  0.314362      -1.15721      -80.7325       80.7325       231.976       312.708    
  10  0.807729     -0.213529      -14.8968       14.8968       232.044       246.941    
  11  0.757191     -0.278140      -19.4044       19.4044       231.545       250.949    
  12  0.508654     -0.675987      -47.1601       47.1601       245.648       292.808    
  13  0.722060     -0.325647      -22.7187       22.7187       232.113       254.831    
  14  0.424032     -0.857947      -59.8545       59.8545       244.911       304.766    
  15  0.786154     -0.240602      -16.7856       16.7856       238.245       255.031    
  16  0.399894     -0.916557      -63.9433       63.9433       230.428       294.372    
  17  0.757416     -0.277843      -19.3837       19.3837       236.447       255.831    
  18  0.637270     -0.450563      -31.4334       31.4334       233.994       265.427    
  19  0.586055     -0.534342      -37.2782       37.2782       233.019       270.297    
  20  0.821724     -0.196351      -13.6984       13.6984       252.415       266.113    
  21  0.921558     -0.816897E-01  -5.69906       5.69906       230.667       236.366    
  22  0.985596     -0.145083E-01  -1.01217       1.01217       233.144       234.157    
  23  0.257194      -1.35793      -94.7353       94.7353       240.923       335.659    
  24  0.921438E-01  -2.38440      -166.347       166.347       232.927       399.274    
  25  0.114653      -2.16584      -151.100       151.100       232.422       383.521    
  26  0.379827     -0.968040      -67.5351       67.5351       230.690       298.225    
  27  0.541451     -0.613503      -42.8009       42.8009       251.165       293.966    
  28  0.544274     -0.608302      -42.4381       42.4381       247.610       290.048    
  29  0.934365     -0.678883E-01  -4.73621       4.73621       235.204       239.941    
  30  0.266419E-01  -3.62527      -252.916       252.916       241.555       494.471    
  31  0.919572     -0.838466E-01  -5.84954       5.84954       230.021       235.870    
  32  0.864639     -0.145444      -10.1468       10.1468       226.781       236.928    
  33  0.341156      -1.07542      -75.0262       75.0262       228.088       303.114    
  34  0.803175     -0.219182      -15.2912       15.2912       232.549       247.840    
  35  0.699424     -0.357498      -24.9408       24.9408       234.506       259.447    
  36  0.223868E-01  -3.79928      -265.056       265.056       235.291       500.347    
  37  0.605689     -0.501389      -34.9793       34.9793       245.535       280.515    
  38  0.312349      -1.16363      -81.1806       81.1806       241.078       322.259    
  39  0.437501     -0.826675      -57.6728       57.6728       231.049       288.722    
  40  0.303330      -1.19293      -83.2247       83.2247       233.051       316.275    
  41  0.129735      -2.04226      -142.478       142.478       236.949       379.427    
  42  0.954352     -0.467224E-01  -3.25958       3.25958       238.711       241.971    
  43  0.519807     -0.654297      -45.6469       45.6469       265.652       311.299    
  44  0.950560     -0.507036E-01  -3.53732       3.53732       234.675       238.212    
  45  0.443941     -0.812064      -56.6534       56.6534       242.259       298.912    
  46  0.911446     -0.927229E-01  -6.46879       6.46879       231.948       238.417    
  47  0.782475     -0.245293      -17.1128       17.1128       252.357       269.470    
  48  0.412534     -0.885438      -61.7723       61.7723       239.415       301.188    
  49  0.843850     -0.169780      -11.8447       11.8447       235.617       247.462    
  50  0.149432      -1.90091      -132.617       132.617       237.593       370.210    
  51  0.292747      -1.22845      -85.7023       85.7023       235.185       320.887    
  52  0.579908E-02  -5.15006      -359.292       359.292       233.189       592.482    
loop,thermsimp(1:2)        3   124.488       90.2178    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     58        550.84          1.00          0.99         23.68          0.55          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    550.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        3
neval is:       57
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        4
neval is:       57


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       57     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -8.66213       8.66213       233.144       241.807    
   2  0.114178      -2.16999      -151.389       151.389       230.021       381.410    
   3  0.217017      -1.52778      -106.585       106.585       230.667       337.252    
   4  0.138317      -1.97821      -138.009       138.009       226.781       364.790    
   5  0.832728     -0.183048      -12.7703       12.7703       234.675       247.445    
   6  0.390825     -0.939496      -65.5437       65.5437       231.948       297.492    
   7  0.283633      -1.26007      -87.9088       87.9088       232.549       320.458    
   8  0.725809     -0.320468      -22.3574       22.3574       235.204       257.562    
   9  0.506121     -0.680979      -47.5084       47.5084       238.711       286.220    
  10  0.216234      -1.53139      -106.837       106.837       238.845       345.682    
  11  0.637942     -0.449509      -31.3599       31.3599       232.044       263.404    
  12  0.536707     -0.622302      -43.4148       43.4148       235.617       279.032    
  13  0.231844      -1.46169      -101.975       101.975       232.549       334.524    
  14  0.491379     -0.710540      -49.5707       49.5707       231.545       281.115    
  15  0.825774     -0.191434      -13.3554       13.3554       231.270       244.626    
  16  0.671593     -0.398102      -27.7735       27.7735       232.113       259.886    
  17  0.549103     -0.599470      -41.8218       41.8218       238.245       280.067    
  18  0.659287     -0.416597      -29.0638       29.0638       236.447       265.511    
  19  0.205012      -1.58469      -110.555       110.555       234.506       345.061    
  20  0.400541E-02  -5.52011      -385.109       385.109       233.994       619.103    
  21  0.750831     -0.286575      -19.9928       19.9928       252.415       272.408    
  22  0.619921     -0.478162      -33.3589       33.3589       252.357       285.716    
  23  0.435226     -0.831889      -58.0365       58.0365       233.019       291.056    
  24  0.460974     -0.774414      -54.0268       54.0268       245.535       299.562    
  25  0.891582E-01  -2.41734      -168.645       168.645       231.049       399.694    
  26  0.589618E-01  -2.83087      -197.495       197.495       247.610       445.104    
  27  0.541391     -0.613613      -42.8086       42.8086       245.648       288.457    
  28  0.545108E-01  -2.90936      -202.970       202.970       251.165       454.135    
  29  0.744722     -0.294744      -20.5627       20.5627       230.428       250.991    
  30  0.712477     -0.339008      -23.6508       23.6508       230.690       254.341    
  31  0.563836     -0.572992      -39.9746       39.9746       242.259       282.233    
  32  0.161455      -1.82353      -127.218       127.218       239.415       366.633    
  33  0.640738     -0.445135      -31.0548       31.0548       228.088       259.143    
  34  0.157494      -1.84837      -128.951       128.951       244.911       373.862    
  35  0.695323     -0.363378      -25.3510       25.3510       265.652       291.003    
  36  0.792798     -0.232186      -16.1984       16.1984       231.976       248.174    
  37  0.940634     -0.612017E-01  -4.26972       4.26972       233.051       237.320    
  38  0.750008     -0.287672      -20.0693       20.0693       232.808       252.877    
  39  0.298939E-01  -3.51010      -244.881       244.881       230.194       475.075    
  40  0.633510     -0.456480      -31.8462       31.8462       235.185       267.031    
  41  0.465723     -0.764164      -53.3117       53.3117       241.078       294.390    
  42  0.916259     -0.874560E-01  -6.10135       6.10135       240.923       247.025    
  43  0.451376     -0.795456      -55.4948       55.4948       225.404       280.899    
  44  0.414090     -0.881672      -61.5096       61.5096       237.593       299.102    
  45  0.273092      -1.29795      -90.5510       90.5510       236.949       327.500    
  46  0.361379      -1.01783      -71.0085       71.0085       232.422       303.430    
  47  0.548848     -0.599934      -41.8542       41.8542       232.927       274.781    
  48  0.832309     -0.183552      -12.8055       12.8055       230.302       243.108    
  49  0.673017     -0.395985      -27.6258       27.6258       233.901       261.527    
  50  0.692516     -0.367425      -25.6333       25.6333       241.555       267.188    
  51  0.354468E-01  -3.33972      -232.995       232.995       235.291       468.286    
  52  0.987850     -0.122240E-01 -0.852801      0.852801       550.836       551.689    
loop,thermsimp(1:2)        4   8.66213       151.389    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     59        232.42          1.03          0.99         23.64          0.52          0.05         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     60        233.08          0.99          0.99         23.74          0.46          0.06         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        4
neval is:       59
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        5
neval is:       59


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       59     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -2.25534       2.25534       233.051       235.306    
   2  0.384676     -0.955353      -66.6500       66.6500       233.144       299.794    
   3  0.472770     -0.749146      -52.2640       52.2640       230.302       282.566    
   4  0.131186      -2.03114      -141.702       141.702       231.270       372.972    
   5  0.387497     -0.948046      -66.1402       66.1402       240.923       307.063    
   6  0.474858     -0.744739      -51.9565       51.9565       234.675       286.631    
   7  0.654056     -0.424563      -29.6195       29.6195       231.976       261.595    
   8  0.375266     -0.980119      -68.3778       68.3778       230.428       298.806    
   9  0.605577     -0.501574      -34.9922       34.9922       232.808       267.800    
  10  0.485605     -0.722360      -50.3953       50.3953       230.690       281.085    
  11  0.503843     -0.685490      -47.8231       47.8231       235.204       283.027    
  12  0.374521     -0.982108      -68.5165       68.5165       228.088       296.605    
  13  0.955542E-01  -2.34806      -163.812       163.812       232.113       395.925    
  14  0.902567     -0.102512      -7.15173       7.15173       233.901       241.053    
  15  0.347215      -1.05781      -73.7979       73.7979       232.044       305.842    
  16  0.893138     -0.113014      -7.88441       7.88441       236.447       244.331    
  17  0.561145     -0.577776      -40.3084       40.3084       235.185       275.493    
  18  0.667287     -0.404536      -28.2223       28.2223       241.555       269.777    
  19  0.601102     -0.508991      -35.5096       35.5096       252.415       287.925    
  20  0.569928     -0.562245      -39.2249       39.2249       232.927       272.151    
  21  0.655926     -0.421708      -29.4203       29.4203       235.617       265.038    
  22  0.355892      -1.03313      -72.0759       72.0759       238.245       310.321    
  23  0.208013      -1.57015      -109.541       109.541       225.404       334.945    
  24  0.879772     -0.128093      -8.93636       8.93636       231.545       240.481    
  25  0.114206E-01  -4.47233      -312.011       312.011       242.259       554.270    
  26  0.950245     -0.510357E-01  -3.56049       3.56049       252.357       255.918    
  27  0.321268      -1.13548      -79.2165       79.2165       238.711       317.928    
  28  0.379005     -0.970207      -67.6862       67.6862       245.648       313.334    
  29  0.117960      -2.13741      -149.116       149.116       265.652       414.768    
  30  0.822558     -0.195337      -13.6276       13.6276       233.019       246.647    
  31  0.671085     -0.398860      -27.8264       27.8264       241.078       268.905    
  32  0.220279      -1.51286      -105.544       105.544       231.948       337.493    
  33  0.836335     -0.178727      -12.4688       12.4688       237.593       250.062    
  34  0.982442E-01  -2.32030      -161.875       161.875       245.535       407.410    
  35  0.912526     -0.915389E-01  -6.38619       6.38619       232.422       238.808    
  36  0.758802     -0.276015      -19.2561       19.2561       232.549       251.805    
  37  0.562651     -0.575096      -40.1214       40.1214       236.949       277.071    
  38  0.248142      -1.39375      -97.2349       97.2349       232.549       329.784    
  39  0.864881     -0.145163      -10.1273       10.1273       230.667       240.794    
  40  0.495151     -0.702893      -49.0372       49.0372       234.506       283.543    
  41  0.112352E-01  -4.48870      -313.153       313.153       238.845       551.998    
  42  0.745500     -0.293700      -20.4899       20.4899       226.781       247.271    
  43  0.405071     -0.903693      -63.0459       63.0459       239.415       302.461    
  44  0.617259     -0.482466      -33.6592       33.6592       244.911       278.571    
  45  0.992755     -0.727089E-02 -0.507252      0.507252       230.021       230.528    
  46  0.888739     -0.117952      -8.22890       8.22890       231.049       239.278    
  47  0.976701     -0.235748E-01  -1.64469       1.64469       247.610       249.254    
  48  0.461976     -0.772242      -53.8753       53.8753       251.165       305.040    
  49  0.150581      -1.89325      -132.082       132.082       235.291       367.373    
  50  0.726286E-01  -2.62240      -182.951       182.951       230.194       413.145    
  51  0.280837      -1.26998      -88.5999       88.5999       550.836       639.436    
  52  0.727959     -0.317510      -22.1510       22.1510       232.424       254.575    
loop,thermsimp(1:2)        5   2.25534       66.6500    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     61        233.26          1.19          1.02         23.98          0.17          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     62        234.69          1.02          0.99         23.76          0.41          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   60    233.26        2.947     -1.340      5.089     -100.0      1.254    
                     -0.6442      3.586     -100.0      2.535      1.218    
                       1.402    -0.8672      1.841      0.000      0.000    
                      -1.425      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.196     -2.501     -5.345     -2.954    
                      -13.92     -2.523      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.7676E-01 0.3166E-01  0.000    -0.8458    
                     -0.1876    -0.2777    -0.1373    -0.1402    -0.5504E-01

                      -1.128    -0.6532      0.000    -0.1683E-01-0.1387E-01
                      0.8541E-01-0.2040E-01-0.4879E-01-0.1779    -0.1657    
                      0.1653     0.8461E-01-0.9611E-01-0.8794      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.090      9.141     -7039.     -4.000    
                     -0.3218     0.7563E-01  9.026      8.544     -4904.    

                      -4.000    -0.4356E-01-0.5940      8.795      9.036    
                      -6912.     -4.000    -0.1032    -0.5208      9.556    
                       8.799     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        5
neval is:       61
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        6
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       61     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -15.0261       15.0261       230.021       245.047    
   2  0.337878      -1.08507      -75.6997       75.6997       233.051       308.750    
   3  0.930612     -0.719127E-01  -5.01697       5.01697       232.422       237.439    
   4  0.843645     -0.170024      -11.8617       11.8617       231.049       242.911    
   5  0.757799     -0.277337      -19.3483       19.3483       231.545       250.893    
   6  0.627925     -0.465335      -32.4640       32.4640       230.667       263.131    
   7  0.412314     -0.885971      -61.8095       61.8095       233.901       295.711    
   8  0.282274      -1.26488      -88.2438       88.2438       236.447       324.691    
   9  0.426609E-01  -3.15447      -220.071       220.071       233.019       453.090    
  10  0.484876     -0.723862      -50.5000       50.5000       226.781       277.281    
  11  0.372210     -0.988296      -68.9482       68.9482       247.610       316.558    
  12  0.740507     -0.300421      -20.9588       20.9588       237.593       258.552    
  13  0.361519      -1.01744      -70.9816       70.9816       232.549       303.531    
  14  0.421034     -0.865042      -60.3494       60.3494       232.424       292.773    
  15  0.780595     -0.247699      -17.2807       17.2807       252.357       269.638    
  16  0.758410     -0.276531      -19.2921       19.2921       231.976       251.268    
  17  0.522921E-01  -2.95091      -205.870       205.870       235.617       441.487    
  18  0.609673     -0.494833      -34.5219       34.5219       232.808       267.330    
  19  0.204029      -1.58949      -110.890       110.890       241.078       351.969    
  20  0.516385     -0.660902      -46.1076       46.1076       241.555       287.663    
  21  0.323918      -1.12726      -78.6433       78.6433       232.927       311.570    
  22  0.671820     -0.397765      -27.7500       27.7500       235.185       262.935    
  23  0.850344     -0.162114      -11.3098       11.3098       236.949       248.259    
  24  0.515631     -0.662364      -46.2096       46.2096       244.911       291.121    
  25  0.919408     -0.840249E-01  -5.86198       5.86198       230.690       236.552    
  26  0.516519     -0.660643      -46.0896       46.0896       230.302       276.392    
  27  0.986900     -0.131869E-01 -0.919978      0.919978       235.204       236.124    
  28  0.127351      -2.06081      -143.772       143.772       234.506       378.278    
  29  0.775028E-01  -2.55744      -178.419       178.419       234.675       413.094    
  30  0.778307     -0.250634      -17.4854       17.4854       252.415       269.900    
  31  0.548570     -0.600441      -41.8896       41.8896       228.088       269.978    
  32  0.191672      -1.65197      -115.249       115.249       230.428       345.677    
  33  0.593733     -0.521326      -36.3702       36.3702       233.144       269.515    
  34  0.612853     -0.489631      -34.1590       34.1590       239.415       273.574    
  35  0.872749     -0.136107      -9.49546       9.49546       251.165       260.660    
  36  0.291105E-01  -3.53666      -246.734       246.734       232.044       478.778    
  37  0.310804      -1.16859      -81.5265       81.5265       240.923       322.450    
  38  0.238051      -1.43527      -100.131       100.131       238.245       338.376    
  39  0.600295     -0.510334      -35.6033       35.6033       245.648       281.251    
  40  0.856575     -0.154813      -10.8005       10.8005       238.711       249.512    
  41  0.127990      -2.05580      -143.423       143.423       232.549       375.972    
  42  0.390396E-01  -3.24318      -226.259       226.259       225.404       451.664    
  43  0.469298E-01  -3.05910      -213.418       213.418       231.948       445.366    
  44  0.170208      -1.77073      -123.535       123.535       235.291       358.826    
  45  0.457801     -0.781320      -54.5086       54.5086       231.270       285.779    
  46  0.451589     -0.794982      -55.4617       55.4617       232.113       287.574    
  47  0.601844     -0.507757      -35.4235       35.4235       245.535       280.959    
  48  0.923684     -0.793857E-01  -5.53832       5.53832       230.194       235.732    
  49  0.113154      -2.17901      -152.018       152.018       265.652       417.670    
  50  0.652894     -0.426340      -29.7435       29.7435       238.845       268.588    
  51  0.600010     -0.510809      -35.6364       35.6364       242.259       277.895    
  52  0.768679     -0.263082      -18.3538       18.3538       233.263       251.616    
loop,thermsimp(1:2)        6   15.0261       75.6997    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     63        232.92          1.00          1.00         23.85          0.38          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     64        233.95          1.00          1.00         23.83          0.39          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        6
neval is:       63
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        7
neval is:       63


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       63     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -149.261       149.261       230.194       379.455    
   2  0.421875     -0.863045      -60.2102       60.2102       235.204       295.415    
   3  0.700103     -0.356528      -24.8731       24.8731       230.690       255.563    
   4  0.209367      -1.56367      -109.089       109.089       232.422       341.511    
   5  0.117251      -2.14344      -149.536       149.536       231.049       380.585    
   6  0.898330     -0.107218      -7.48001       7.48001       230.021       237.501    
   7  0.209806      -1.56157      -108.943       108.943       236.949       345.892    
   8  0.917155     -0.864790E-01  -6.03319       6.03319       238.711       244.745    
   9  0.120514E-01  -4.41857      -308.261       308.261       231.545       539.805    
  10  0.189983      -1.66082      -115.867       115.867       231.976       347.843    
  11  0.257131      -1.35817      -94.7523       94.7523       233.263       328.015    
  12  0.913158E-01  -2.39343      -166.977       166.977       237.593       404.570    
  13  0.336531      -1.08906      -75.9783       75.9783       251.165       327.143    
  14  0.318351      -1.14460      -79.8528       79.8528       235.185       315.037    
  15  0.919606     -0.838101E-01  -5.84699       5.84699       230.667       236.513    
  16  0.719771E-01  -2.63141      -183.580       183.580       232.808       416.387    
  17  0.788730E-01  -2.53992      -177.197       177.197       238.845       416.041    
  18  0.905929     -0.987941E-01  -6.89234       6.89234       233.144       240.037    
  19  0.665501     -0.407215      -28.4093       28.4093       252.357       280.766    
  20  0.812159     -0.208059      -14.5152       14.5152       252.415       266.930    
  21  0.412726E-01  -3.18756      -222.379       222.379       228.088       450.467    
  22  0.256064      -1.36233      -95.0425       95.0425       239.415       334.458    
  23  0.277519      -1.28187      -89.4291       89.4291       230.302       319.731    
  24  0.279550      -1.27457      -88.9203       88.9203       226.781       315.701    
  25  0.857884     -0.153286      -10.6940       10.6940       242.259       252.952    
  26  0.205158      -1.58398      -110.506       110.506       245.535       356.041    
  27  0.482085     -0.729635      -50.9028       50.9028       245.648       296.551    
  28  0.494966E-01  -3.00585      -209.703       209.703       231.270       440.973    
  29  0.338791      -1.08237      -75.5114       75.5114       232.113       307.624    
  30  0.249491E-01  -3.69092      -257.496       257.496       241.555       499.051    
  31  0.480710     -0.732491      -51.1021       51.1021       244.911       296.014    
  32  0.908951E-01  -2.39805      -167.299       167.299       232.424       399.723    
  33  0.283223      -1.26152      -88.0098       88.0098       233.901       321.911    
  34  0.277734      -1.28109      -89.3750       89.3750       232.549       321.924    
  35  0.504407     -0.684372      -47.7451       47.7451       233.051       280.796    
  36  0.251881      -1.37880      -96.1915       96.1915       232.927       329.118    
  37  0.568193     -0.565294      -39.4376       39.4376       247.610       287.047    
  38  0.186135      -1.68128      -117.294       117.294       240.923       358.217    
  39  0.964582     -0.360604E-01  -2.51575       2.51575       236.447       238.963    
  40  0.493045     -0.707155      -49.3345       49.3345       238.245       287.580    
  41  0.477950     -0.738248      -51.5037       51.5037       230.428       281.932    
  42  0.114879      -2.16388      -150.962       150.962       241.078       392.041    
  43  0.324003      -1.12700      -78.6249       78.6249       235.291       313.916    
  44  0.720573     -0.327708      -22.8625       22.8625       232.549       255.412    
  45  0.934913     -0.673019E-01  -4.69530       4.69530       234.506       239.201    
  46  0.516467     -0.660745      -46.0967       46.0967       234.675       280.771    
  47  0.351513      -1.04551      -72.9396       72.9396       265.652       338.592    
  48  0.310221      -1.17047      -81.6577       81.6577       235.617       317.275    
  49  0.467571     -0.760204      -53.0354       53.0354       231.948       284.984    
  50  0.700644     -0.355756      -24.8192       24.8192       225.404       250.223    
  51  0.608579E-01  -2.79921      -195.286       195.286       233.019       428.305    
  52  0.360106      -1.02136      -71.2547       71.2547       232.919       304.174    
loop,thermsimp(1:2)        7   149.261       60.2102    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     65        235.30          0.96          0.98         23.82          0.50          0.06         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     66        238.92          1.01          0.99         23.86          0.40          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    235.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        7
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        8
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       65     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -50.1377       50.1377       230.667       280.804    
   2  0.568497     -0.564760      -39.4003       39.4003       230.021       269.421    
   3  0.632037E-01  -2.76139      -192.648       192.648       236.447       429.095    
   4  0.184325      -1.69105      -117.976       117.976       234.506       352.482    
   5  0.949772     -0.515332E-01  -3.59520       3.59520       233.144       236.740    
   6  0.512179     -0.669081      -46.6783       46.6783       238.711       285.390    
   7  0.573767     -0.555532      -38.7565       38.7565       225.404       264.161    
   8  0.590189     -0.527312      -36.7878       36.7878       242.259       279.046    
   9  0.323917      -1.12727      -78.6436       78.6436       232.549       311.193    
  10  0.246420E-01  -3.70330      -258.360       258.360       230.690       489.050    
  11  0.923153E-01  -2.38255      -166.218       166.218       252.415       418.633    
  12  0.236043      -1.44374      -100.722       100.722       252.357       353.079    
  13  0.885388     -0.121730      -8.49243       8.49243       234.675       243.167    
  14  0.617726     -0.481710      -33.6064       33.6064       233.051       266.657    
  15  0.349992      -1.04985      -73.2422       73.2422       230.428       303.670    
  16  0.892028     -0.114257      -7.97114       7.97114       231.948       239.920    
  17  0.382423     -0.961227      -67.0598       67.0598       247.610       314.669    
  18  0.850527     -0.161899      -11.2949       11.2949       238.245       249.540    
  19  0.653461     -0.425472      -29.6829       29.6829       235.204       264.887    
  20  0.413959     -0.881988      -61.5317       61.5317       244.911       306.443    
  21  0.807813     -0.213424      -14.8895       14.8895       245.648       260.538    
  22  0.348045      -1.05542      -73.6314       73.6314       232.919       306.551    
  23  0.435267     -0.831795      -58.0300       58.0300       232.113       290.143    
  24  0.434284     -0.834056      -58.1877       58.1877       235.291       293.479    
  25  0.983564     -0.165728E-01  -1.15620       1.15620       235.185       236.341    
  26  0.545923     -0.605277      -42.2270       42.2270       226.781       269.008    
  27  0.227140      -1.48219      -103.404       103.404       235.617       339.022    
  28  0.965085     -0.355395E-01  -2.47941       2.47941       230.302       232.782    
  29  0.183882      -1.69346      -118.144       118.144       233.901       352.045    
  30  0.187300E-02  -6.28022      -438.138       438.138       232.549       670.687    
  31  0.428736     -0.846914      -59.0847       59.0847       251.165       310.250    
  32  0.459764     -0.777041      -54.2101       54.2101       233.263       287.473    
  33  0.914786     -0.890649E-01  -6.21359       6.21359       232.927       239.140    
  34  0.872236     -0.136696      -9.53653       9.53653       239.415       248.952    
  35  0.789367     -0.236524      -16.5010       16.5010       265.652       282.153    
  36  0.619233E-01  -2.78186      -194.076       194.076       232.422       426.497    
  37  0.138004E-01  -4.28306      -298.806       298.806       236.949       535.756    
  38  0.287035      -1.24815      -87.0769       87.0769       231.976       319.053    
  39  0.138758E-01  -4.27761      -298.426       298.426       245.535       543.962    
  40  0.593330     -0.522005      -36.4175       36.4175       240.923       277.341    
  41  0.399445     -0.917679      -64.0216       64.0216       230.194       294.216    
  42  0.982947     -0.172001E-01  -1.19996       1.19996       231.049       232.249    
  43  0.259534      -1.34887      -94.1033       94.1033       241.078       335.182    
  44  0.816592E-01  -2.50520      -174.775       174.775       232.424       407.198    
  45  0.166083      -1.79527      -125.246       125.246       237.593       362.839    
  46  0.967370     -0.331741E-01  -2.31438       2.31438       238.845       241.159    
  47  0.371024     -0.991488      -69.1709       69.1709       232.808       301.979    
  48  0.941964     -0.597885E-01  -4.17113       4.17113       233.019       237.190    
  49  0.130219      -2.03854      -142.218       142.218       231.270       373.488    
  50  0.599455     -0.511734      -35.7010       35.7010       228.088       263.789    
  51  0.519323     -0.655230      -45.7120       45.7120       241.555       287.267    
  52  0.829175     -0.187324      -13.0686       13.0686       235.302       248.371    
loop,thermsimp(1:2)        8   50.1377       39.4003    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67        232.75          0.97          0.98         23.44          0.70          0.06         26.15
Just calling func    0   0         26.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     68        233.98          1.05          1.00         23.94          0.21          0.05         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        8
neval is:       67
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:        9
neval is:       67


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       67     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -169.693       169.693       231.049       400.742    
   2  0.192227      -1.64908      -115.048       115.048       230.302       345.350    
   3  0.872733     -0.136126      -9.49680       9.49680       235.185       244.681    
   4  0.444113     -0.811675      -56.6263       56.6263       233.144       289.771    
   5  0.194382      -1.63793      -114.270       114.270       233.019       347.289    
   6  0.358074      -1.02702      -71.6496       71.6496       232.927       304.576    
   7  0.461693     -0.772855      -53.9180       53.9180       231.948       285.866    
   8  0.180202      -1.71368      -119.554       119.554       238.845       358.399    
   9  0.944954     -0.566187E-01  -3.94999       3.94999       234.675       238.625    
  10  0.738770     -0.302769      -21.1226       21.1226       235.302       256.425    
  11  0.822491E-01  -2.49800      -174.273       174.273       239.415       413.688    
  12  0.313602      -1.15963      -80.9013       80.9013       238.245       319.146    
  13  0.978185     -0.220567E-01  -1.53878       1.53878       245.648       247.187    
  14  0.540591E-01  -2.91768      -203.551       203.551       228.088       431.639    
  15  0.872885     -0.135951      -9.48459       9.48459       225.404       234.889    
  16  0.209079      -1.56504      -109.185       109.185       235.204       344.389    
  17  0.789205E-01  -2.53931      -177.155       177.155       233.051       410.205    
  18  0.746404     -0.292489      -20.4054       20.4054       226.781       247.187    
  19  0.110219      -2.20529      -153.852       153.852       230.021       383.872    
  20  0.656016     -0.421570      -29.4107       29.4107       240.923       270.334    
  21  0.665675     -0.406953      -28.3910       28.3910       242.259       270.649    
  22  0.563292     -0.573957      -40.0419       40.0419       230.667       270.708    
  23  0.615044     -0.486062      -33.9100       33.9100       265.652       299.562    
  24  0.128081      -2.05509      -143.373       143.373       238.711       382.084    
  25  0.459916     -0.776711      -54.1870       54.1870       241.555       295.742    
  26  0.433297     -0.836332      -58.3465       58.3465       233.263       291.609    
  27  0.225675      -1.48866      -103.856       103.856       232.113       335.969    
  28  0.808805     -0.212197      -14.8039       14.8039       235.291       250.095    
  29  0.578238     -0.547770      -38.2150       38.2150       230.194       268.409    
  30  0.569572     -0.562871      -39.2685       39.2685       232.808       272.076    
  31  0.291272      -1.23350      -86.0546       86.0546       230.428       316.483    
  32  0.144426      -1.93499      -134.994       134.994       244.911       379.905    
  33  0.908321     -0.961572E-01  -6.70838       6.70838       232.919       239.628    
  34  0.593166     -0.522281      -36.4368       36.4368       251.165       287.602    
  35  0.327630      -1.11587      -77.8485       77.8485       232.549       310.398    
  36  0.823214E-01  -2.49712      -174.211       174.211       247.610       421.821    
  37  0.742531     -0.297691      -20.7683       20.7683       231.976       252.744    
  38  0.476201E-01  -3.04450      -212.399       212.399       241.078       453.477    
  39  0.183829      -1.69375      -118.164       118.164       235.617       353.781    
  40  0.417257     -0.874053      -60.9781       60.9781       233.901       294.879    
  41  0.647723E-01  -2.73688      -190.938       190.938       234.506       425.444    
  42  0.123950E-01  -4.39046      -306.299       306.299       252.357       558.657    
  43  0.281372E-01  -3.57066      -249.106       249.106       237.593       486.699    
  44  0.883044     -0.124380      -8.67734       8.67734       231.270       239.948    
  45  0.445413     -0.808754      -56.4225       56.4225       232.424       288.846    
  46  0.418101     -0.872031      -60.8370       60.8370       252.415       313.252    
  47  0.301534      -1.19887      -83.6391       83.6391       232.422       316.061    
  48  0.674500     -0.393783      -27.4722       27.4722       236.447       263.919    
  49  0.732783     -0.310905      -21.6902       21.6902       230.690       252.380    
  50  0.970355     -0.300929E-01  -2.09943       2.09943       236.949       239.049    
  51  0.981589     -0.185824E-01  -1.29640       1.29640       245.535       246.832    
  52  0.677253     -0.389711      -27.1881       27.1881       232.753       259.941    
loop,thermsimp(1:2)        9   169.693       115.048    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     69        235.04          0.98          0.99         24.12          0.08          0.06         26.23
Just calling func    0   0         26.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     70        315.83          1.05          1.00         24.13          0.04          0.06         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    235.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:        9
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       10
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       69     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -34.2781       34.2781       225.404       259.682    
   2  0.877337     -0.130865      -9.12974       9.12974       234.675       243.804    
   3  0.821280     -0.196891      -13.7361       13.7361       236.949       250.685    
   4  0.989636     -0.104181E-01 -0.726816      0.726816       232.919       233.646    
   5  0.492813     -0.707625      -49.3673       49.3673       231.270       280.637    
   6  0.904083     -0.100835      -7.03470       7.03470       235.185       242.219    
   7  0.490620     -0.712086      -49.6785       49.6785       245.535       295.214    
   8  0.572439     -0.557850      -38.9182       38.9182       226.781       265.699    
   9  0.588753     -0.529749      -36.9578       36.9578       245.648       282.606    
  10  0.341799      -1.07353      -74.8947       74.8947       235.291       310.186    
  11  0.449605     -0.799385      -55.7689       55.7689       230.690       286.459    
  12  0.740720     -0.300132      -20.9387       20.9387       231.976       252.914    
  13  0.173164E-01  -4.05610      -282.973       282.973       235.302       518.275    
  14  0.828389     -0.188272      -13.1348       13.1348       232.753       245.888    
  15  0.110451      -2.20318      -153.705       153.705       236.447       390.152    
  16  0.646816     -0.435693      -30.3960       30.3960       230.194       260.590    
  17  0.857676     -0.153529      -10.7109       10.7109       240.923       251.634    
  18  0.691202E-02  -4.97449      -347.044       347.044       242.259       589.303    
  19  0.530885     -0.633210      -44.1757       44.1757       230.667       274.842    
  20  0.742957     -0.297117      -20.7283       20.7283       232.808       253.536    
  21  0.883526E-01  -2.42642      -169.279       169.279       231.948       401.227    
  22  0.599138     -0.512263      -35.7379       35.7379       251.165       286.903    
  23  0.476407     -0.741482      -51.7293       51.7293       232.424       284.153    
  24  0.509994E-01  -2.97594      -207.616       207.616       233.144       440.760    
  25  0.669768     -0.400824      -27.9634       27.9634       233.263       261.226    
  26  0.874430     -0.134183      -9.36123       9.36123       233.901       243.262    
  27  0.830739     -0.185440      -12.9371       12.9371       241.555       254.492    
  28  0.166673      -1.79172      -124.999       124.999       265.652       390.652    
  29  0.578742     -0.546898      -38.1542       38.1542       232.927       271.081    
  30  0.433531     -0.835791      -58.3088       58.3088       232.549       290.858    
  31  0.979127     -0.210935E-01  -1.47158       1.47158       252.415       253.887    
  32  0.310252      -1.17037      -81.6506       81.6506       232.422       314.072    
  33  0.686879     -0.375597      -26.2035       26.2035       230.428       256.632    
  34  0.243104      -1.41427      -98.6660       98.6660       238.245       336.911    
  35  0.459407     -0.777818      -54.2643       54.2643       232.113       286.377    
  36  0.332163      -1.10213      -76.8898       76.8898       235.204       312.094    
  37  0.512243     -0.668956      -46.6696       46.6696       230.302       276.972    
  38  0.323240      -1.12936      -78.7896       78.7896       233.019       311.809    
  39  0.667455     -0.404284      -28.2047       28.2047       235.617       263.822    
  40  0.460037     -0.776449      -54.1688       54.1688       238.845       293.013    
  41  0.227415      -1.48098      -103.320       103.320       244.911       348.231    
  42  0.636494     -0.451780      -31.5183       31.5183       238.711       270.230    
  43  0.432078     -0.839149      -58.5430       58.5430       230.021       288.564    
  44  0.609015     -0.495913      -34.5972       34.5972       231.049       265.646    
  45  0.427755     -0.849205      -59.2445       59.2445       233.051       292.295    
  46  0.496712     -0.699745      -48.8176       48.8176       239.415       288.233    
  47  0.295308      -1.21974      -85.0946       85.0946       247.610       332.704    
  48  0.928979     -0.736692E-01  -5.13951       5.13951       234.506       239.645    
  49  0.245696E-01  -3.70625      -258.565       258.565       228.088       486.653    
  50  0.833617E-01  -2.48457      -173.335       173.335       241.078       414.413    
  51  0.499690     -0.693767      -48.4005       48.4005       237.593       285.993    
  52  0.320552      -1.13771      -79.3721       79.3721       235.037       314.409    
loop,thermsimp(1:2)       10   34.2781       9.12974    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71        236.29          1.27          1.04         24.02          0.11          0.07         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     72        823.16          1.01          1.03         24.11          0.06          0.05         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    236.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       10
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       11
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       71     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -71.9021       71.9021       232.919       304.822    
   2  0.318207      -1.14505      -79.8845       79.8845       234.506       314.390    
   3  0.410972E-01  -3.19181      -222.676       222.676       235.185       457.861    
   4  0.217948      -1.52350      -106.286       106.286       233.901       340.187    
   5  0.460755     -0.774888      -54.0599       54.0599       234.675       288.734    
   6  0.694214     -0.364975      -25.4624       25.4624       232.753       258.215    
   7  0.237764      -1.43648      -100.215       100.215       236.949       337.165    
   8  0.635477     -0.453379      -31.6299       31.6299       240.923       272.553    
   9  0.882831E-01  -2.42721      -169.333       169.333       231.976       401.309    
  10  0.889613     -0.116969      -8.16030       8.16030       232.808       240.968    
  11  0.236395      -1.44225      -100.618       100.618       252.415       353.033    
  12  0.785560     -0.241359      -16.8383       16.8383       241.555       258.393    
  13  0.253594      -1.37202      -95.7188       95.7188       230.428       326.147    
  14  0.767743     -0.264300      -18.4389       18.4389       225.404       243.843    
  15  0.425111     -0.855405      -59.6771       59.6771       230.194       289.871    
  16  0.334680E-01  -3.39717      -237.002       237.002       233.263       470.265    
  17  0.737903     -0.303943      -21.2045       21.2045       235.617       256.822    
  18  0.530906     -0.633170      -44.1730       44.1730       231.049       275.222    
  19  0.811772     -0.208536      -14.5485       14.5485       226.781       241.330    
  20  0.781494     -0.246548      -17.2004       17.2004       238.711       255.912    
  21  0.668871     -0.402164      -28.0569       28.0569       232.927       260.983    
  22  0.609633     -0.494898      -34.5264       34.5264       230.667       265.193    
  23  0.732795E-01  -2.61347      -182.328       182.328       230.302       412.631    
  24  0.999755     -0.244962E-03 -0.170897E-01  0.170897E-01   231.270       231.287    
  25  0.556911     -0.585350      -40.8368       40.8368       245.648       286.485    
  26  0.381942     -0.962485      -67.1475       67.1475       232.424       299.571    
  27  0.230973      -1.46546      -102.237       102.237       237.593       339.830    
  28  0.791084     -0.234351      -16.3495       16.3495       232.113       248.462    
  29  0.122039      -2.10341      -146.744       146.744       230.690       377.434    
  30  0.411383     -0.888231      -61.9672       61.9672       251.165       313.132    
  31  0.753656     -0.282819      -19.7308       19.7308       239.415       259.146    
  32  0.846821     -0.166266      -11.5995       11.5995       230.021       241.620    
  33  0.577745     -0.548622      -38.2745       38.2745       232.549       270.824    
  34  0.859903     -0.150936      -10.5300       10.5300       233.051       243.581    
  35  0.915816     -0.879395E-01  -6.13508       6.13508       238.845       244.980    
  36  0.220499      -1.51186      -105.475       105.475       245.535       351.010    
  37  0.539962     -0.616256      -42.9930       42.9930       235.291       278.284    
  38  0.810725     -0.209827      -14.6385       14.6385       233.019       247.658    
  39  0.901567     -0.103621      -7.22907       7.22907       235.204       242.433    
  40  0.196148      -1.62888      -113.639       113.639       232.422       346.060    
  41  0.413437     -0.883250      -61.6197       61.6197       235.037       296.657    
  42  0.192892      -1.64562      -114.806       114.806       247.610       362.416    
  43  0.194290      -1.63840      -114.303       114.303       238.245       352.548    
  44  0.988313     -0.117563E-01 -0.820176      0.820176       244.911       245.732    
  45  0.917980     -0.855792E-01  -5.97041       5.97041       236.447       242.417    
  46  0.136083      -1.99449      -139.145       139.145       265.652       404.797    
  47  0.847126     -0.165905      -11.5744       11.5744       231.948       243.523    
  48  0.513003     -0.667474      -46.5661       46.5661       241.078       287.644    
  49  0.562161     -0.575967      -40.1822       40.1822       233.144       273.327    
  50  0.926079     -0.767957E-01  -5.35763       5.35763       228.088       233.446    
  51  0.890313     -0.116182      -8.10541       8.10541       235.302       243.408    
  52  0.857665     -0.153542      -10.7118       10.7118       236.286       246.998    
loop,thermsimp(1:2)       11   71.9021       79.8845    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73        549.33          1.23          1.02         24.20          0.04          0.07         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     74        242.15          1.04          1.02         24.25          0.00          0.06         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    242.15
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       11
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       12
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       73     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -179.805       179.805       231.270       411.075    
   2  0.804470     -0.217571      -15.1788       15.1788       228.088       243.267    
   3  0.984017     -0.161120E-01  -1.12405       1.12405       232.808       233.932    
   4  0.587639     -0.531643      -37.0899       37.0899       226.781       263.871    
   5  0.523810     -0.646626      -45.1117       45.1117       230.021       275.132    
   6  0.930607     -0.719181E-01  -5.01735       5.01735       236.447       241.464    
   7  0.360114E-01  -3.32392      -231.892       231.892       235.204       467.097    
   8  0.963815     -0.368556E-01  -2.57122       2.57122       235.302       237.873    
   9  0.201264E-01  -3.90572      -272.482       272.482       231.948       504.430    
  10  0.954897     -0.461522E-01  -3.21980       3.21980       233.051       236.270    
  11  0.374160     -0.983071      -68.5837       68.5837       225.404       293.988    
  12  0.174967      -1.74316      -121.611       121.611       238.845       360.455    
  13  0.381618     -0.963335      -67.2068       67.2068       244.911       312.118    
  14  0.191097      -1.65498      -115.459       115.459       236.286       351.745    
  15  0.425287     -0.854991      -59.6483       59.6483       233.019       292.667    
  16  0.426180     -0.852893      -59.5019       59.5019       232.113       291.614    
  17  0.615671     -0.485042      -33.8388       33.8388       238.711       272.550    
  18  0.787264     -0.239192      -16.6872       16.6872       235.617       252.305    
  19  0.812636     -0.207472      -14.4742       14.4742       232.753       247.227    
  20  0.917241E-01  -2.38897      -166.666       166.666       241.555       408.221    
  21  0.671310     -0.398525      -27.8030       27.8030       239.415       267.218    
  22  0.548174     -0.601162      -41.9399       41.9399       232.927       274.866    
  23  0.134851      -2.00359      -139.780       139.780       230.667       370.446    
  24  0.373236     -0.985545      -68.7563       68.7563       232.549       301.305    
  25  0.578774     -0.546843      -38.1504       38.1504       240.923       279.074    
  26  0.910021     -0.942872E-01  -6.57792       6.57792       233.144       239.722    
  27  0.192323      -1.64858      -115.013       115.013       231.049       346.062    
  28  0.366342      -1.00419      -70.0569       70.0569       235.291       305.348    
  29  0.686994     -0.375430      -26.1918       26.1918       245.648       271.840    
  30  0.486551     -0.720414      -50.2595       50.2595       241.078       291.338    
  31  0.256801      -1.35945      -94.8419       94.8419       234.675       329.516    
  32  0.284977      -1.25535      -87.5790       87.5790       230.194       317.773    
  33  0.903072     -0.101953      -7.11269       7.11269       235.037       242.150    
  34  0.226450      -1.48523      -103.617       103.617       232.424       336.040    
  35  0.446078     -0.807261      -56.3183       56.3183       232.919       289.238    
  36  0.152634      -1.87971      -131.138       131.138       251.165       382.303    
  37  0.511955     -0.669518      -46.7088       46.7088       234.506       281.215    
  38  0.513138     -0.667210      -46.5477       46.5477       230.428       276.976    
  39  0.637309     -0.450501      -31.4291       31.4291       236.949       268.378    
  40  0.861477     -0.149107      -10.4024       10.4024       237.593       247.995    
  41  0.817364     -0.201671      -14.0695       14.0695       233.901       247.971    
  42  0.793820     -0.230898      -16.1085       16.1085       232.422       248.530    
  43  0.253309      -1.37315      -95.7972       95.7972       245.535       341.332    
  44  0.702532     -0.353065      -24.6315       24.6315       238.245       262.877    
  45  0.822324     -0.195620      -13.6474       13.6474       252.415       266.062    
  46  0.720485     -0.327831      -22.8710       22.8710       247.610       270.481    
  47  0.881589     -0.126029      -8.79241       8.79241       230.690       239.482    
  48  0.584479     -0.537035      -37.4661       37.4661       231.976       269.442    
  49  0.697197     -0.360688      -25.1633       25.1633       265.652       290.816    
  50  0.320931      -1.13653      -79.2897       79.2897       230.302       309.592    
  51  0.780071     -0.248371      -17.3275       17.3275       235.185       252.512    
  52  0.318322E-01  -3.44728      -240.498       240.498       242.147       482.646    
loop,thermsimp(1:2)       12   179.805       15.1788    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75        231.45          1.25          1.03         24.04          0.00          0.07         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     76        230.78          1.04          1.01         24.17          0.01          0.06         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    230.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       12
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       13
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       75     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -9.52056       9.52056       232.808       242.329    
   2  0.311340      -1.16687      -81.4064       81.4064       233.051       314.457    
   3  0.293828      -1.22476      -85.4451       85.4451       235.302       320.747    
   4  0.586668     -0.533296      -37.2053       37.2053       230.690       267.895    
   5  0.360311      -1.02079      -71.2150       71.2150       233.144       304.359    
   6  0.315643      -1.15314      -80.4487       80.4487       236.447       316.896    
   7  0.481464     -0.730923      -50.9927       50.9927       235.037       286.030    
   8  0.720279     -0.328116      -22.8910       22.8910       228.088       250.979    
   9  0.551471     -0.595166      -41.5216       41.5216       232.753       274.275    
  10  0.524434     -0.645435      -45.0286       45.0286       233.901       278.930    
  11  0.781600     -0.246412      -17.1909       17.1909       237.593       254.784    
  12  0.353648      -1.03945      -72.5172       72.5172       232.422       304.939    
  13  0.451044     -0.796190      -55.5460       55.5460       235.617       291.163    
  14  0.325353      -1.12284      -78.3349       78.3349       235.185       313.520    
  15  0.312157      -1.16425      -81.2234       81.2234       238.245       319.469    
  16  0.432418     -0.838362      -58.4881       58.4881       226.781       285.269    
  17  0.296543      -1.21556      -84.8034       84.8034       252.415       337.218    
  18  0.705416     -0.348967      -24.3456       24.3456       239.415       263.761    
  19  0.146505      -1.92069      -133.997       133.997       236.949       370.946    
  20  0.471608     -0.751607      -52.4357       52.4357       231.976       284.412    
  21  0.633095     -0.457134      -31.8919       31.8919       247.610       279.502    
  22  0.754855     -0.281230      -19.6200       19.6200       245.648       265.268    
  23  0.444501E-01  -3.11339      -217.205       217.205       238.711       455.916    
  24  0.160973      -1.82652      -127.427       127.427       232.927       360.353    
  25  0.943694     -0.579536E-01  -4.04312       4.04312       230.021       234.064    
  26  0.187304      -1.67502      -116.858       116.858       230.428       347.286    
  27  0.840922     -0.173257      -12.0872       12.0872       240.923       253.010    
  28  0.888648     -0.118054      -8.23599       8.23599       234.506       242.742    
  29  0.920614E-01  -2.38530      -166.410       166.410       232.919       399.329    
  30  0.906493     -0.981722E-01  -6.84896       6.84896       265.652       272.501    
  31  0.221761      -1.50616      -105.077       105.077       241.078       346.155    
  32  0.248725      -1.39141      -97.0712       97.0712       232.113       329.184    
  33  0.315928      -1.15224      -80.3859       80.3859       233.019       313.405    
  34  0.949967     -0.513283E-01  -3.58091       3.58091       225.404       228.985    
  35  0.802748     -0.219715      -15.3283       15.3283       232.549       247.878    
  36  0.558987     -0.581628      -40.5772       40.5772       235.291       275.868    
  37  0.638133     -0.449209      -31.3389       31.3389       230.302       261.641    
  38  0.637852     -0.449648      -31.3696       31.3696       244.911       276.281    
  39  0.382908     -0.959961      -66.9714       66.9714       230.194       297.166    
  40  0.982834     -0.173149E-01  -1.20797       1.20797       234.675       235.883    
  41  0.497022     -0.699120      -48.7739       48.7739       232.424       281.198    
  42  0.263620      -1.33325      -93.0136       93.0136       245.535       338.549    
  43  0.296939      -1.21423      -84.7104       84.7104       231.049       315.759    
  44  0.784161     -0.243141      -16.9627       16.9627       236.286       253.249    
  45  0.545321     -0.606380      -42.3040       42.3040       238.845       281.149    
  46  0.770080     -0.261260      -18.2268       18.2268       230.667       248.893    
  47  0.358755      -1.02511      -71.5169       71.5169       251.165       322.682    
  48  0.325126      -1.12354      -78.3837       78.3837       241.555       319.939    
  49  0.599396     -0.511832      -35.7079       35.7079       231.270       266.978    
  50  0.323708      -1.12791      -78.6887       78.6887       235.204       313.893    
  51  0.329142      -1.11127      -77.5271       77.5271       242.147       319.674    
  52  0.685661     -0.377371      -26.3272       26.3272       230.776       257.104    
loop,thermsimp(1:2)       13   9.52056       81.4064    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77        240.82          1.25          1.04         24.05          0.09          0.06         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     78        285.02          1.05          1.01         24.08          0.04          0.06         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    240.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       13
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       14
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       77     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -74.3260       74.3260       225.404       299.730    
   2  0.267720      -1.31781      -91.9370       91.9370       230.021       321.958    
   3  0.279825      -1.27359      -88.8518       88.8518       234.675       323.526    
   4  0.281095      -1.26906      -88.5359       88.5359       232.808       321.344    
   5  0.245867      -1.40297      -97.8776       97.8776       234.506       332.383    
   6  0.914239     -0.896636E-01  -6.25536       6.25536       232.549       238.805    
   7  0.180116      -1.71415      -119.588       119.588       230.667       350.254    
   8  0.567917     -0.565780      -39.4715       39.4715       228.088       267.560    
   9  0.431941     -0.839465      -58.5651       58.5651       240.923       299.488    
  10  0.877920     -0.130199      -9.08333       9.08333       236.286       245.369    
  11  0.280355      -1.27170      -88.7196       88.7196       237.593       326.312    
  12  0.486947     -0.719601      -50.2028       50.2028       230.776       280.979    
  13  0.216546      -1.52995      -106.737       106.737       230.302       337.039    
  14  0.483718E-02  -5.33142      -371.945       371.945       239.415       611.361    
  15  0.785152E-03  -7.14963      -498.792       498.792       245.648       744.440    
  16  0.300781      -1.20137      -83.8134       83.8134       231.270       315.084    
  17  0.869691     -0.139618      -9.74040       9.74040       230.690       240.430    
  18  0.694261E-01  -2.66749      -186.097       186.097       265.652       451.749    
  19  0.635475     -0.453382      -31.6301       31.6301       232.753       264.383    
  20  0.894977     -0.110958      -7.74092       7.74092       235.291       243.032    
  21  0.442267     -0.815841      -56.9169       56.9169       244.911       301.828    
  22  0.283362      -1.26103      -87.9754       87.9754       233.901       321.876    
  23  0.518611     -0.656601      -45.8076       45.8076       247.610       293.417    
  24  0.858122E-01  -2.45559      -171.314       171.314       238.845       410.159    
  25  0.461153     -0.774026      -53.9998       53.9998       232.424       286.424    
  26  0.180026      -1.71465      -119.622       119.622       231.976       351.598    
  27  0.446938E-01  -3.10792      -216.823       216.823       226.781       443.604    
  28  0.152352      -1.88156      -131.267       131.267       235.037       366.304    
  29  0.163937E-01  -4.11086      -286.793       286.793       235.617       522.410    
  30  0.721347     -0.326635      -22.7876       22.7876       230.194       252.982    
  31  0.813323     -0.206626      -14.4152       14.4152       233.144       247.560    
  32  0.569343     -0.563273      -39.2966       39.2966       232.422       271.718    
  33  0.275899      -1.28772      -89.8374       89.8374       233.019       322.856    
  34  0.933187     -0.691492E-01  -4.82418       4.82418       235.185       240.009    
  35  0.716570     -0.333279      -23.2511       23.2511       235.204       258.456    
  36  0.405413     -0.902848      -62.9870       62.9870       233.051       296.038    
  37  0.907528     -0.970314E-01  -6.76937       6.76937       231.049       237.818    
  38  0.554651     -0.589416      -41.1204       41.1204       236.447       277.567    
  39  0.419962     -0.867592      -60.5273       60.5273       238.245       298.772    
  40  0.824173     -0.193375      -13.4908       13.4908       242.147       255.638    
  41  0.865647     -0.144278      -10.0655       10.0655       241.555       251.621    
  42  0.300944      -1.20083      -83.7758       83.7758       235.302       319.078    
  43  0.339688      -1.07973      -75.3270       75.3270       251.165       326.492    
  44  0.217032      -1.52771      -106.580       106.580       232.113       338.693    
  45  0.792618E-01  -2.53500      -176.854       176.854       252.415       429.269    
  46  0.997677     -0.232582E-02 -0.162260      0.162260       245.535       245.698    
  47  0.174239      -1.74733      -121.902       121.902       241.078       362.980    
  48  0.834084     -0.181422      -12.6568       12.6568       230.428       243.085    
  49  0.324404      -1.12577      -78.5388       78.5388       232.927       311.465    
  50  0.927598     -0.751564E-01  -5.24327       5.24327       236.949       242.192    
  51  0.981384     -0.187911E-01  -1.31096       1.31096       232.919       234.230    
  52  0.849105     -0.163572      -11.4116       11.4116       240.819       252.231    
loop,thermsimp(1:2)       14   74.3260       91.9370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79        238.24          1.26          1.03         24.08          0.03          0.07         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80        684.76          1.07          1.01         24.18          0.04          0.06         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    238.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       14
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       15
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       79     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -102.547       102.547       232.919       335.467    
   2  0.322822      -1.13066      -78.8799       78.8799       231.049       309.929    
   3  0.327586      -1.11601      -77.8578       77.8578       232.549       310.407    
   4  0.799078     -0.224296      -15.6480       15.6480       235.185       250.833    
   5  0.698072     -0.359433      -25.0757       25.0757       230.690       255.766    
   6  0.733871     -0.309421      -21.5867       21.5867       236.949       258.536    
   7  0.823872     -0.193740      -13.5162       13.5162       235.291       248.808    
   8  0.800045     -0.223087      -15.5636       15.5636       230.428       245.992    
   9  0.162010      -1.82010      -126.979       126.979       236.286       363.264    
  10  0.113138      -2.17915      -152.028       152.028       245.535       397.563    
  11  0.973966     -0.263784E-01  -1.84028       1.84028       233.144       234.985    
  12  0.998107     -0.189521E-02 -0.132219      0.132219       241.555       241.687    
  13  0.631351     -0.459893      -32.0843       32.0843       240.819       272.904    
  14  0.698229     -0.359208      -25.0601       25.0601       230.194       255.254    
  15  0.359252      -1.02373      -71.4203       71.4203       242.147       313.568    
  16  0.936266     -0.658562E-01  -4.59444       4.59444       235.204       239.799    
  17  0.843107     -0.170662      -11.9062       11.9062       232.753       244.659    
  18  0.181284      -1.70769      -119.137       119.137       228.088       347.225    
  19  0.354246      -1.03777      -72.3994       72.3994       232.422       304.821    
  20  0.981540     -0.186324E-01  -1.29989       1.29989       236.447       237.747    
  21  0.582284E-01  -2.84338      -198.368       198.368       230.776       429.144    
  22  0.935088     -0.671143E-01  -4.68221       4.68221       232.424       237.106    
  23  0.682144     -0.382515      -26.6860       26.6860       247.610       274.296    
  24  0.441439     -0.817715      -57.0477       57.0477       233.051       290.098    
  25  0.325829      -1.12138      -78.2329       78.2329       238.245       316.478    
  26  0.956968E-01  -2.34657      -163.708       163.708       240.923       404.631    
  27  0.465124E-01  -3.06804      -214.041       214.041       225.404       439.445    
  28  0.645503     -0.437726      -30.5379       30.5379       244.911       275.449    
  29  0.184751      -1.68875      -117.815       117.815       232.927       350.741    
  30  0.676303     -0.391115      -27.2860       27.2860       231.270       258.556    
  31  0.408248     -0.895880      -62.5009       62.5009       235.302       297.803    
  32  0.215511      -1.53474      -107.071       107.071       232.808       339.879    
  33  0.762109     -0.271666      -18.9527       18.9527       233.901       252.854    
  34  0.445022     -0.809632      -56.4838       56.4838       230.021       286.504    
  35  0.667113     -0.404797      -28.2405       28.2405       233.019       261.260    
  36  0.995785     -0.422376E-02 -0.294670      0.294670       234.675       234.969    
  37  0.278840      -1.27712      -89.0979       89.0979       237.593       326.691    
  38  0.624255     -0.471196      -32.8729       32.8729       251.165       284.038    
  39  0.368212     -0.999097      -69.7018       69.7018       234.506       304.208    
  40  0.330266      -1.10786      -77.2894       77.2894       230.302       307.592    
  41  0.969155     -0.313304E-01  -2.18576       2.18576       232.113       234.298    
  42  0.686816     -0.375688      -26.2098       26.2098       230.667       256.876    
  43  0.201053      -1.60419      -111.916       111.916       231.976       343.891    
  44  0.481166     -0.731544      -51.0360       51.0360       241.078       292.114    
  45  0.992829     -0.719725E-02 -0.502114      0.502114       235.037       235.539    
  46  0.665697     -0.406921      -28.3887       28.3887       238.845       267.233    
  47  0.991934E-02  -4.61327      -321.844       321.844       252.415       574.259    
  48  0.211644      -1.55285      -108.334       108.334       226.781       335.115    
  49  0.908243E-01  -2.39883      -167.354       167.354       265.652       433.006    
  50  0.643762     -0.440426      -30.7262       30.7262       235.617       266.344    
  51  0.568794E-01  -2.86682      -200.003       200.003       239.415       439.418    
  52  0.159466      -1.83592      -128.083       128.083       238.236       366.319    
loop,thermsimp(1:2)       15   102.547       78.8799    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81        229.16          1.29          1.03         23.98          0.12          0.07         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82        231.43          1.05          1.02         24.08          0.02          0.06         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    229.16        2.928     -1.358      6.110     -100.0      1.343    
                     -0.6628      2.572     -100.0      2.517      1.199    
                       1.384    -0.8859      1.841      0.000      0.000    
                      -1.579      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.140     -2.555     -5.289     -2.898    
                      -13.84     -2.504      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.8609E-01 0.4098E-01  0.000    -0.8365    
                     -0.1783    -0.2683    -0.1695    -0.1309    -0.4571E-01

                      -1.109    -0.6345      0.000    -0.4749E-01-0.4542E-02
                      0.8541E-01-0.1107E-01-0.8741E-01-0.1686    -0.1564    
                      0.1746     0.4411E-01-0.7746E-01-0.8608      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.100      9.150     -7039.     -4.000    
                     -0.2938     0.1036      9.035      8.554     -4904.    

                      -4.000    -0.1559E-01-0.6188      8.805      9.045    
                      -6912.     -4.000    -0.7524E-01-0.6606      9.565    
                       8.808     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       15
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       16
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       81     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -40.7249       40.7249       232.113       272.837    
   2  0.850944     -0.161409      -11.2607       11.2607       234.675       245.935    
   3  0.343999      -1.06712      -74.4471       74.4471       233.144       307.592    
   4  0.481777E-02  -5.33544      -372.226       372.226       235.037       607.263    
   5  0.146991      -1.91738      -133.766       133.766       232.424       366.189    
   6  0.545677     -0.605728      -42.2584       42.2584       236.447       278.705    
   7  0.761940     -0.271888      -18.9682       18.9682       235.204       254.173    
   8  0.944477     -0.571238E-01  -3.98523       3.98523       241.555       245.540    
   9  0.965249     -0.353688E-01  -2.46750       2.46750       232.753       235.221    
  10  0.634176     -0.455429      -31.7729       31.7729       230.428       262.201    
  11  0.793205     -0.231673      -16.1626       16.1626       235.291       251.454    
  12  0.743605     -0.296246      -20.6675       20.6675       235.185       255.852    
  13  0.983069E-01  -2.31966      -161.831       161.831       233.901       395.732    
  14  0.618437     -0.480560      -33.5261       33.5261       230.194       263.720    
  15  0.429182     -0.845875      -59.0122       59.0122       230.690       289.702    
  16  0.771528     -0.259382      -18.0957       18.0957       230.667       248.762    
  17  0.218286      -1.52195      -106.178       106.178       236.949       343.127    
  18  0.556408     -0.586254      -40.8999       40.8999       231.270       272.170    
  19  0.526292     -0.641899      -44.7820       44.7820       233.019       277.801    
  20  0.665532     -0.407169      -28.4060       28.4060       235.617       264.023    
  21  0.261756      -1.34034      -93.5088       93.5088       238.845       332.353    
  22  0.975508     -0.247971E-01  -1.72996       1.72996       240.819       242.549    
  23  0.257613      -1.35630      -94.6217       94.6217       247.610       342.231    
  24  0.981555E-01  -2.32120      -161.938       161.938       244.911       406.850    
  25  0.955054     -0.459870E-01  -3.20827       3.20827       251.165       254.373    
  26  0.887906     -0.118890      -8.29432       8.29432       230.021       238.315    
  27  0.407043     -0.898837      -62.7071       62.7071       233.051       295.758    
  28  0.876870     -0.131396      -9.16683       9.16683       241.078       250.245    
  29  0.957152     -0.437935E-01  -3.05525       3.05525       235.302       238.358    
  30  0.827730     -0.189068      -13.1903       13.1903       234.506       247.696    
  31  0.289027      -1.24124      -86.5945       86.5945       232.422       319.016    
  32  0.125230      -2.07760      -144.943       144.943       230.302       375.246    
  33  0.242443      -1.41699      -98.8558       98.8558       231.049       329.905    
  34  0.654103     -0.424490      -29.6144       29.6144       232.549       262.164    
  35  0.811871     -0.208414      -14.5399       14.5399       242.147       256.687    
  36  0.145201E-01  -4.23222      -295.260       295.260       238.245       533.505    
  37  0.344449      -1.06581      -74.3558       74.3558       237.593       311.949    
  38  0.265532      -1.32602      -92.5094       92.5094       226.781       319.291    
  39  0.811851     -0.208438      -14.5416       14.5416       232.919       247.461    
  40  0.983290E-01  -2.31944      -161.815       161.815       232.808       394.623    
  41  0.347314      -1.05753      -73.7781       73.7781       231.976       305.754    
  42  0.923773     -0.792888E-01  -5.53156       5.53156       228.088       233.620    
  43  0.690375     -0.370520      -25.8492       25.8492       232.927       258.776    
  44  0.227523      -1.48051      -103.287       103.287       236.286       339.573    
  45  0.652275     -0.427289      -29.8097       29.8097       238.236       268.046    
  46  0.669640     -0.401014      -27.9767       27.9767       245.535       273.512    
  47  0.288804      -1.24201      -86.6483       86.6483       240.923       327.572    
  48  0.404648     -0.904738      -63.1188       63.1188       230.776       293.895    
  49  0.371042     -0.991440      -69.1676       69.1676       265.652       334.820    
  50  0.308424      -1.17628      -82.0629       82.0629       239.415       321.478    
  51  0.911221     -0.929703E-01  -6.48605       6.48605       225.404       231.890    
  52  0.615436     -0.485425      -33.8655       33.8655       229.160       263.026    
loop,thermsimp(1:2)       16   40.7249       11.2607    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83        252.69          1.25          1.02         24.09          0.05          0.06         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       16
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       17
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       82     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -21.0262       21.0262       225.404       246.430    
   2  0.527958     -0.638738      -44.5614       44.5614       228.088       272.649    
   3  0.326119      -1.12049      -78.1708       78.1708       232.753       310.924    
   4  0.647061     -0.435314      -30.3696       30.3696       230.021       260.390    
   5  0.419805     -0.867966      -60.5534       60.5534       235.302       295.856    
   6  0.218417      -1.52135      -106.136       106.136       240.819       346.956    
   7  0.168864      -1.77866      -124.088       124.088       241.555       365.643    
   8  0.761417     -0.272575      -19.0161       19.0161       234.675       253.691    
   9  0.383989     -0.957143      -66.7748       66.7748       232.919       299.694    
  10  0.104774      -2.25595      -157.386       157.386       234.506       391.892    
  11  0.167912      -1.78432      -124.482       124.482       230.667       355.149    
  12  0.997930     -0.207190E-02 -0.144546      0.144546       241.078       241.223    
  13  0.493294     -0.706650      -49.2993       49.2993       235.291       284.591    
  14  0.483048     -0.727639      -50.7636       50.7636       235.204       285.968    
  15  0.715967     -0.334121      -23.3099       23.3099       251.165       274.475    
  16  0.595423E-01  -2.82107      -196.811       196.811       235.185       431.996    
  17  0.636569     -0.451662      -31.5101       31.5101       242.147       273.657    
  18  0.482980     -0.727779      -50.7733       50.7733       232.927       283.700    
  19  0.500121     -0.692905      -48.3404       48.3404       232.549       280.890    
  20  0.426980     -0.851018      -59.3710       59.3710       230.428       289.799    
  21  0.546576     -0.604082      -42.1437       42.1437       229.160       271.304    
  22  0.142720      -1.94687      -135.823       135.823       230.194       366.017    
  23  0.473622     -0.747346      -52.1384       52.1384       235.617       287.756    
  24  0.892718E-01  -2.41607      -168.556       168.556       238.236       406.792    
  25  0.660659     -0.414518      -28.9187       28.9187       231.270       260.189    
  26  0.328755      -1.11244      -77.6093       77.6093       232.113       309.722    
  27  0.544150     -0.608530      -42.4540       42.4540       245.535       287.989    
  28  0.199068      -1.61411      -112.608       112.608       233.019       345.627    
  29  0.685070     -0.378234      -26.3874       26.3874       236.447       262.834    
  30  0.500258     -0.692632      -48.3213       48.3213       230.690       279.011    
  31  0.130607      -2.03556      -142.011       142.011       230.776       372.787    
  32  0.982013E-01  -2.32074      -161.906       161.906       233.051       394.956    
  33  0.581494E-01  -2.84474      -198.463       198.463       231.976       430.438    
  34  0.841391     -0.172699      -12.0483       12.0483       233.144       245.193    
  35  0.838937E-01  -2.47820      -172.891       172.891       237.593       410.484    
  36  0.729848     -0.314919      -21.9703       21.9703       232.422       254.392    
  37  0.748292     -0.289962      -20.2291       20.2291       226.781       247.010    
  38  0.229216      -1.47309      -102.770       102.770       239.415       342.185    
  39  0.710713     -0.341487      -23.8238       23.8238       240.923       264.747    
  40  0.511506     -0.670395      -46.7700       46.7700       231.049       277.819    
  41  0.106756      -2.23721      -156.078       156.078       238.845       394.923    
  42  0.583466     -0.538770      -37.5871       37.5871       265.652       303.240    
  43  0.993140E-01  -2.30947      -161.120       161.120       236.286       397.405    
  44  0.461224     -0.773871      -53.9889       53.9889       247.610       301.599    
  45  0.574465     -0.554316      -38.6717       38.6717       236.949       275.621    
  46  0.715977     -0.334107      -23.3089       23.3089       232.424       255.733    
  47  0.877584     -0.130583      -9.11008       9.11008       230.302       239.412    
  48  0.492354     -0.708558      -49.4324       49.4324       232.808       282.240    
  49  0.874926     -0.133616      -9.32172       9.32172       233.901       243.223    
  50  0.800367     -0.222685      -15.5355       15.5355       244.911       260.447    
  51  0.507308     -0.678636      -47.3449       47.3449       238.245       285.590    
  52  0.727831     -0.317686      -22.1633       22.1633       252.687       274.850    
loop,thermsimp(1:2)       17   21.0262       44.5614    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84        228.93          1.28          1.04         24.01          0.06          0.07         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85        237.65          1.02          1.02         24.07          0.02          0.06         26.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       17
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       18
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       84     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -66.9801       66.9801       230.302       297.282    
   2  0.293468      -1.22599      -85.5308       85.5308       241.078       326.609    
   3  0.954036     -0.470539E-01  -3.28270       3.28270       233.901       237.184    
   4  0.452934     -0.792010      -55.2544       55.2544       233.144       288.399    
   5  0.251692      -1.37955      -96.2439       96.2439       225.404       321.648    
   6  0.881081     -0.126605      -8.83260       8.83260       226.781       235.614    
   7  0.855311     -0.156290      -10.9035       10.9035       234.675       245.578    
   8  0.576474     -0.550824      -38.4281       38.4281       232.422       270.850    
   9  0.433835     -0.835090      -58.2599       58.2599       232.424       290.684    
  10  0.298626      -1.20856      -84.3152       84.3152       231.270       315.585    
  11  0.269991      -1.30937      -91.3477       91.3477       230.021       321.368    
  12  0.884826     -0.122364      -8.53670       8.53670       244.911       253.448    
  13  0.664124     -0.409287      -28.5538       28.5538       236.447       265.001    
  14  0.580836     -0.543287      -37.9023       37.9023       240.923       278.826    
  15  0.285501      -1.25351      -87.4507       87.4507       229.160       316.611    
  16  0.690757     -0.369967      -25.8107       25.8107       228.088       253.899    
  17  0.578320     -0.547628      -38.2051       38.2051       242.147       280.352    
  18  0.563230     -0.574067      -40.0497       40.0497       251.165       291.215    
  19  0.681565     -0.383363      -26.7452       26.7452       252.687       279.432    
  20  0.453362     -0.791065      -55.1884       55.1884       236.949       292.138    
  21  0.645457     -0.437797      -30.5428       30.5428       231.049       261.592    
  22  0.982222E-01  -2.32052      -161.891       161.891       230.690       392.581    
  23  0.843064     -0.170712      -11.9097       11.9097       232.549       244.459    
  24  0.505683     -0.681845      -47.5688       47.5688       232.808       280.377    
  25  0.350376      -1.04875      -73.1658       73.1658       232.927       306.092    
  26  0.367167      -1.00194      -69.9001       69.9001       235.291       305.191    
  27  0.268175      -1.31611      -91.8184       91.8184       238.245       330.064    
  28  0.989085E-01  -2.31356      -161.405       161.405       235.204       396.609    
  29  0.349392      -1.05156      -73.3619       73.3619       235.617       308.979    
  30  0.945468     -0.560755E-01  -3.91209       3.91209       245.535       249.447    
  31  0.305400      -1.18613      -82.7502       82.7502       230.428       313.178    
  32  0.942706     -0.590006E-01  -4.11617       4.11617       235.302       239.418    
  33  0.778346     -0.250584      -17.4819       17.4819       232.919       250.401    
  34  0.256449      -1.36083      -94.9377       94.9377       247.610       342.547    
  35  0.338120      -1.08436      -75.6498       75.6498       265.652       341.302    
  36  0.644609     -0.439112      -30.6345       30.6345       232.113       262.747    
  37  0.420837     -0.865509      -60.3820       60.3820       232.753       293.135    
  38  0.793406     -0.231421      -16.1450       16.1450       239.415       255.560    
  39  0.685561     -0.377517      -26.3374       26.3374       233.019       259.356    
  40  0.278740      -1.27748      -89.1229       89.1229       240.819       329.942    
  41  0.414078     -0.881700      -61.5116       61.5116       230.667       292.178    
  42  0.999720     -0.280334E-03 -0.195574E-01  0.195574E-01   241.555       241.575    
  43  0.714259     -0.336509      -23.4765       23.4765       230.194       253.671    
  44  0.713371     -0.337753      -23.5633       23.5633       230.776       254.340    
  45  0.451360     -0.795490      -55.4972       55.4972       234.506       290.003    
  46  0.887280     -0.119595      -8.34352       8.34352       238.845       247.188    
  47  0.234319      -1.45107      -101.234       101.234       233.051       334.284    
  48  0.277567E-01  -3.58428      -250.056       250.056       236.286       486.342    
  49  0.582411     -0.540579      -37.7133       37.7133       238.236       275.949    
  50  0.969019     -0.314707E-01  -2.19554       2.19554       237.593       239.788    
  51  0.441889     -0.816696      -56.9766       56.9766       231.976       288.952    
  52  0.150247      -1.89548      -132.237       132.237       228.932       361.170    
loop,thermsimp(1:2)       18   66.9801       85.5308    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86        243.37          1.28          1.04         24.11          0.02          0.07         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87        530.39          1.04          1.01         24.13          0.01          0.06         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    243.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       18
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       19
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       86     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -72.6467       72.6467       226.781       299.428    
   2  0.270835E-01  -3.60883      -251.769       251.769       233.901       485.670    
   3  0.923755     -0.793087E-01  -5.53295       5.53295       235.302       240.835    
   4  0.535520     -0.624517      -43.5693       43.5693       237.593       281.162    
   5  0.629344     -0.463078      -32.3065       32.3065       241.555       273.862    
   6  0.572648E-01  -2.86007      -199.532       199.532       232.549       432.081    
   7  0.353113E-01  -3.34355      -233.262       233.262       234.675       467.937    
   8  0.580838     -0.543283      -37.9020       37.9020       238.845       276.747    
   9  0.370403     -0.993164      -69.2878       69.2878       245.535       314.823    
  10  0.443010     -0.814162      -56.7998       56.7998       232.919       289.719    
  11  0.188704      -1.66757      -116.338       116.338       244.911       361.249    
  12  0.177608      -1.72818      -120.566       120.566       230.194       350.760    
  13  0.694998     -0.363847      -25.3837       25.3837       228.088       253.472    
  14  0.160742      -1.82796      -127.527       127.527       230.776       358.303    
  15  0.290050      -1.23770      -86.3480       86.3480       239.415       325.763    
  16  0.441138E-01  -3.12098      -217.735       217.735       233.019       450.754    
  17  0.372461     -0.987622      -68.9012       68.9012       231.049       299.950    
  18  0.652779     -0.426517      -29.7559       29.7559       232.113       261.868    
  19  0.998108     -0.189387E-02 -0.132126      0.132126       236.447       236.579    
  20  0.741140     -0.299566      -20.8992       20.8992       232.422       253.321    
  21  0.623042     -0.473141      -33.0086       33.0086       238.236       271.245    
  22  0.504617     -0.683955      -47.7160       47.7160       240.923       288.639    
  23  0.872499     -0.136394      -9.51550       9.51550       252.687       262.203    
  24  0.142620      -1.94757      -135.872       135.872       242.147       378.019    
  25  0.580285     -0.544236      -37.9685       37.9685       232.808       270.776    
  26  0.860063E-01  -2.45334      -171.156       171.156       233.144       404.301    
  27  0.401846     -0.911687      -63.6036       63.6036       231.976       295.579    
  28  0.161242      -1.82485      -127.310       127.310       234.506       361.816    
  29  0.550753     -0.596469      -41.6125       41.6125       232.424       274.036    
  30  0.815012     -0.204553      -14.2706       14.2706       251.165       265.435    
  31  0.438663     -0.824024      -57.4878       57.4878       236.949       294.437    
  32  0.542283     -0.611968      -42.6938       42.6938       230.667       273.360    
  33  0.943132E-01  -2.36113      -164.724       164.724       232.753       397.477    
  34  0.236587      -1.44144      -100.562       100.562       230.302       330.864    
  35  0.283068      -1.26207      -88.0478       88.0478       235.291       323.339    
  36  0.973178     -0.271886E-01  -1.89681       1.89681       232.927       234.823    
  37  0.596723     -0.516302      -36.0197       36.0197       235.617       271.637    
  38  0.595114     -0.519003      -36.2081       36.2081       230.428       266.636    
  39  0.948736     -0.526250E-01  -3.67137       3.67137       231.270       234.942    
  40  0.216072E-01  -3.83473      -267.529       267.529       229.160       496.689    
  41  0.440213     -0.820496      -57.2417       57.2417       230.021       287.262    
  42  0.905197     -0.996023E-01  -6.94873       6.94873       225.404       232.353    
  43  0.158396      -1.84266      -128.553       128.553       241.078       369.631    
  44  0.287789      -1.24553      -86.8939       86.8939       240.819       327.713    
  45  0.238244      -1.43446      -100.075       100.075       238.245       338.320    
  46  0.363881      -1.01093      -70.5271       70.5271       233.051       303.578    
  47  0.828805     -0.187771      -13.0998       13.0998       265.652       278.752    
  48  0.587140     -0.532492      -37.1492       37.1492       247.610       284.759    
  49  0.141687      -1.95414      -136.330       136.330       228.932       365.262    
  50  0.879115     -0.128839      -8.98842       8.98842       230.690       239.678    
  51  0.742190     -0.298150      -20.8004       20.8004       235.204       256.005    
  52  0.218958      -1.51887      -105.964       105.964       243.367       349.331    
loop,thermsimp(1:2)       19   72.6467       251.769    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88        252.61          1.27          1.02         24.09          0.09          0.07         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89        351.97          1.04          1.02         24.16          0.00          0.06         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    252.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       19
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       20
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       88     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -43.6701       43.6701       225.404       269.074    
   2  0.288348      -1.24359      -86.7587       86.7587       232.927       319.685    
   3  0.910112E-01  -2.39677      -167.210       167.210       231.270       398.480    
   4  0.213812      -1.54266      -107.623       107.623       236.447       344.070    
   5  0.575222     -0.552999      -38.5798       38.5798       230.690       269.270    
   6  0.855707     -0.155827      -10.8712       10.8712       235.302       246.174    
   7  0.818692     -0.200047      -13.9563       13.9563       232.422       246.378    
   8  0.309911      -1.17147      -81.7274       81.7274       228.088       309.815    
   9  0.773438     -0.256910      -17.9232       17.9232       235.204       253.128    
  10  0.440502E-01  -3.12243      -217.835       217.835       232.113       449.948    
  11  0.211655      -1.55280      -108.331       108.331       252.687       361.018    
  12  0.713577     -0.337465      -23.5432       23.5432       251.165       274.708    
  13  0.927405     -0.753650E-01  -5.25782       5.25782       230.428       235.686    
  14  0.360229      -1.02101      -71.2308       71.2308       232.808       304.039    
  15  0.911872     -0.922553E-01  -6.43617       6.43617       238.236       244.672    
  16  0.800691     -0.222280      -15.5073       15.5073       235.617       251.125    
  17  0.169830      -1.77296      -123.690       123.690       230.667       354.357    
  18  0.581014     -0.542980      -37.8809       37.8809       241.555       279.436    
  19  0.869395     -0.139958      -9.76411       9.76411       232.424       242.188    
  20  0.773880     -0.256338      -17.8834       17.8834       238.845       256.728    
  21  0.496085     -0.701008      -48.9057       48.9057       265.652       314.558    
  22  0.530037     -0.634809      -44.2873       44.2873       237.593       281.880    
  23  0.239414      -1.42956      -99.7331       99.7331       247.610       347.343    
  24  0.595728     -0.517972      -36.1362       36.1362       230.021       266.157    
  25  0.170793      -1.76730      -123.296       123.296       240.923       364.219    
  26  0.983027     -0.171183E-01  -1.19425       1.19425       232.919       234.114    
  27  0.608714     -0.496407      -34.6317       34.6317       236.949       271.581    
  28  0.518727     -0.656378      -45.7921       45.7921       231.976       277.768    
  29  0.887918     -0.118876      -8.29334       8.29334       226.781       235.074    
  30  0.140498      -1.96256      -136.918       136.918       231.049       367.967    
  31  0.256308      -1.36138      -94.9760       94.9760       233.051       328.027    
  32  0.887238     -0.119642      -8.34677       8.34677       245.535       253.882    
  33  0.306042      -1.18403      -82.6038       82.6038       235.291       317.895    
  34  0.993873     -0.614632E-02 -0.428796      0.428796       239.415       239.844    
  35  0.275412E-01  -3.59207      -250.600       250.600       240.819       491.419    
  36  0.698960     -0.358161      -24.9870       24.9870       230.302       255.289    
  37  0.268424      -1.31519      -91.7536       91.7536       238.245       329.999    
  38  0.580935E-01  -2.84570      -198.530       198.530       243.367       441.897    
  39  0.242705      -1.41591      -98.7805       98.7805       230.194       328.975    
  40  0.443517     -0.813019      -56.7201       56.7201       230.776       287.496    
  41  0.904179     -0.100728      -7.02725       7.02725       244.911       251.939    
  42  0.454025     -0.789603      -55.0864       55.0864       234.506       289.592    
  43  0.592994     -0.522572      -36.4571       36.4571       228.932       265.389    
  44  0.401796     -0.911812      -63.6123       63.6123       241.078       304.691    
  45  0.130776      -2.03427      -141.920       141.920       242.147       384.068    
  46  0.709753     -0.342839      -23.9181       23.9181       232.753       256.671    
  47  0.388071     -0.946568      -66.0371       66.0371       233.144       299.182    
  48  0.362521      -1.01467      -70.7883       70.7883       232.549       303.337    
  49  0.285379      -1.25394      -87.4806       87.4806       233.019       320.500    
  50  0.286508      -1.24999      -87.2051       87.2051       234.675       321.880    
  51  0.951542     -0.496714E-01  -3.46531       3.46531       233.901       237.366    
  52  0.122933      -2.09612      -146.235       146.235       252.609       398.844    
loop,thermsimp(1:2)       20   43.6701       86.7587    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90        239.64          1.27          1.04         24.15          0.01          0.07         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91        361.91          1.04          1.03         24.11          0.00          0.06         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    239.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       20
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       21
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       90     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -84.5970       84.5970       232.919       317.517    
   2  0.663536     -0.410173      -28.6156       28.6156       226.781       255.397    
   3  0.263982      -1.33188      -92.9180       92.9180       230.428       323.346    
   4  0.792402     -0.232686      -16.2333       16.2333       233.901       250.134    
   5  0.624731     -0.470434      -32.8197       32.8197       239.415       272.235    
   6  0.170977      -1.76622      -123.220       123.220       232.424       355.644    
   7  0.362487      -1.01477      -70.7950       70.7950       238.236       309.031    
   8  0.659245     -0.416659      -29.0681       29.0681       235.302       264.370    
   9  0.746481E-03  -7.20014      -502.316       502.316       232.422       734.738    
  10  0.690046     -0.370998      -25.8826       25.8826       235.617       261.500    
  11  0.905636     -0.991173E-01  -6.91489       6.91489       244.911       251.826    
  12  0.317643      -1.14683      -80.0082       80.0082       235.204       315.213    
  13  0.321948      -1.13336      -79.0689       79.0689       245.535       324.604    
  14  0.293974      -1.22426      -85.4105       85.4105       230.302       315.713    
  15  0.679275     -0.386729      -26.9800       26.9800       232.753       259.733    
  16  0.180340      -1.71291      -119.501       119.501       238.845       358.346    
  17  0.539600     -0.616927      -43.0398       43.0398       228.932       271.972    
  18  0.260315      -1.34586      -93.8937       93.8937       230.021       323.914    
  19  0.256777      -1.35955      -94.8485       94.8485       225.404       320.253    
  20  0.518851     -0.656138      -45.7753       45.7753       230.690       276.465    
  21  0.485887     -0.721780      -50.3548       50.3548       236.949       287.304    
  22  0.562814     -0.574805      -40.1011       40.1011       251.165       291.266    
  23  0.906369     -0.983082E-01  -6.85845       6.85845       231.976       238.834    
  24  0.332143      -1.10219      -76.8940       76.8940       241.555       318.449    
  25  0.912001E-01  -2.39470      -167.066       167.066       237.593       404.658    
  26  0.302569      -1.19545      -83.4000       83.4000       230.776       314.176    
  27  0.362040      -1.01600      -70.8810       70.8810       234.506       305.387    
  28  0.630870     -0.460656      -32.1375       32.1375       233.144       265.282    
  29  0.685312     -0.377881      -26.3628       26.3628       232.549       258.912    
  30  0.329910      -1.10894      -77.3647       77.3647       232.808       310.173    
  31  0.906630E-01  -2.40061      -167.478       167.478       241.078       408.556    
  32  0.339749      -1.07955      -75.3145       75.3145       228.088       303.403    
  33  0.783039     -0.244573      -17.0626       17.0626       265.652       282.715    
  34  0.322673      -1.13112      -78.9121       78.9121       235.291       314.203    
  35  0.255311      -1.36527      -95.2478       95.2478       232.927       328.174    
  36  0.645921     -0.437078      -30.4926       30.4926       233.019       263.512    
  37  0.240122      -1.42661      -99.5269       99.5269       234.675       334.201    
  38  0.224638      -1.49326      -104.177       104.177       233.051       337.228    
  39  0.682659     -0.381760      -26.6334       26.6334       230.194       256.828    
  40  0.533856     -0.627629      -43.7864       43.7864       238.245       282.032    
  41  0.439620E-02  -5.42701      -378.614       378.614       236.447       615.061    
  42  0.409891     -0.891863      -62.2206       62.2206       247.610       309.830    
  43  0.379406     -0.969149      -67.6124       67.6124       230.667       298.279    
  44  0.982111     -0.180514E-01  -1.25935       1.25935       252.687       253.946    
  45  0.243530      -1.41251      -98.5437       98.5437       240.923       339.467    
  46  0.709323     -0.343445      -23.9603       23.9603       231.049       255.009    
  47  0.212014      -1.55110      -108.212       108.212       242.147       350.360    
  48  0.530919     -0.633146      -44.1713       44.1713       231.270       275.441    
  49  0.439600     -0.821890      -57.3390       57.3390       252.609       309.948    
  50  0.304385      -1.18946      -82.9825       82.9825       243.367       326.350    
  51  0.850253     -0.162221      -11.3173       11.3173       232.113       243.430    
  52  0.686564     -0.376055      -26.2354       26.2354       239.643       265.879    
loop,thermsimp(1:2)       21   84.5970       28.6156    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92        233.94          1.27          1.04         24.11          0.00          0.06         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93        236.15          1.02          1.02         24.08          0.00          0.06         26.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       21
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       22
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       92     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -66.8325       66.8325       231.976       298.808    
   2  0.741480     -0.299107      -20.8671       20.8671       232.113       252.980    
   3  0.138898      -1.97401      -137.717       137.717       233.901       371.618    
   4  0.751974E-01  -2.58764      -180.526       180.526       244.911       425.437    
   5  0.824485     -0.192996      -13.4643       13.4643       252.687       266.151    
   6  0.982900     -0.172482E-01  -1.20332       1.20332       231.049       232.252    
   7  0.693409     -0.366136      -25.5434       25.5434       226.781       252.324    
   8  0.941572     -0.602045E-01  -4.20015       4.20015       230.194       234.394    
   9  0.812713     -0.207378      -14.4677       14.4677       232.549       247.017    
  10  0.879507     -0.128393      -8.95732       8.95732       232.753       241.710    
  11  0.418958     -0.869984      -60.6942       60.6942       235.617       296.312    
  12  0.314952      -1.15533      -80.6016       80.6016       233.019       313.621    
  13  0.812426     -0.207731      -14.4923       14.4923       235.302       249.795    
  14  0.213788      -1.54277      -107.631       107.631       233.144       340.775    
  15  0.521629     -0.650798      -45.4028       45.4028       239.643       285.046    
  16  0.287143      -1.24777      -87.0507       87.0507       228.932       315.983    
  17  0.518340     -0.657125      -45.8441       45.8441       239.415       285.259    
  18  0.712802E-02  -4.94372      -344.897       344.897       231.270       576.168    
  19  0.579935     -0.544838      -38.0105       38.0105       230.690       268.700    
  20  0.508101E-02  -5.28224      -368.514       368.514       238.245       606.760    
  21  0.984466     -0.156557E-01  -1.09222       1.09222       265.652       266.745    
  22  0.394325     -0.930579      -64.9216       64.9216       236.949       301.871    
  23  0.837309     -0.177562      -12.3876       12.3876       251.165       263.552    
  24  0.683519     -0.380501      -26.5456       26.5456       230.667       257.212    
  25  0.892337     -0.113912      -7.94703       7.94703       228.088       236.035    
  26  0.297675      -1.21175      -84.5377       84.5377       234.506       319.044    
  27  0.566054     -0.569065      -39.7007       39.7007       238.236       277.937    
  28  0.325499E-01  -3.42498      -238.943       238.943       247.610       486.553    
  29  0.721169     -0.326882      -22.8048       22.8048       252.609       275.414    
  30  0.370449     -0.993040      -69.2792       69.2792       232.808       302.087    
  31  0.398952     -0.918913      -64.1078       64.1078       230.776       294.884    
  32  0.942469     -0.592518E-01  -4.13369       4.13369       235.291       239.425    
  33  0.379045     -0.970101      -67.6789       67.6789       235.204       302.883    
  34  0.218373      -1.52155      -106.151       106.151       230.302       336.453    
  35  0.413944     -0.882024      -61.5342       61.5342       232.919       294.454    
  36  0.452532     -0.792896      -55.3162       55.3162       241.555       296.871    
  37  0.938896     -0.630505E-01  -4.39870       4.39870       225.404       229.803    
  38  0.389299     -0.943409      -65.8167       65.8167       230.428       296.245    
  39  0.943794     -0.578471E-01  -4.03569       4.03569       230.021       234.056    
  40  0.706887     -0.346884      -24.2003       24.2003       245.535       269.736    
  41  0.274873      -1.29145      -90.0974       90.0974       243.367       333.465    
  42  0.343864      -1.06751      -74.4745       74.4745       232.927       307.401    
  43  0.869527E-01  -2.44239      -170.393       170.393       234.675       405.067    
  44  0.859615     -0.151271      -10.5534       10.5534       233.051       243.604    
  45  0.264079      -1.33151      -92.8922       92.8922       240.923       333.816    
  46  0.494871     -0.703457      -49.0765       49.0765       242.147       291.224    
  47  0.112943      -2.18087      -152.148       152.148       232.424       384.572    
  48  0.358273      -1.02646      -71.6108       71.6108       238.845       310.455    
  49  0.215257      -1.53592      -107.153       107.153       237.593       344.746    
  50  0.441681     -0.817166      -57.0094       57.0094       241.078       298.088    
  51  0.888276     -0.118473      -8.26525       8.26525       236.447       244.712    
  52  0.780286     -0.248095      -17.3083       17.3083       233.939       251.248    
loop,thermsimp(1:2)       22   66.8325       20.8671    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94        238.22          1.27          1.03         24.08          0.05          0.06         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95        280.82          1.04          1.02         24.10          0.00          0.06         26.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    238.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       22
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       23
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       94     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -77.8429       77.8429       225.404       303.247    
   2  0.736029     -0.306486      -21.3819       21.3819       231.049       252.431    
   3  0.608436     -0.496864      -34.6636       34.6636       230.021       264.684    
   4  0.584882     -0.536346      -37.4180       37.4180       230.194       267.612    
   5  0.617514     -0.482053      -33.6303       33.6303       228.088       261.718    
   6  0.376473     -0.976909      -68.1538       68.1538       235.291       303.445    
   7  0.535145     -0.625218      -43.6182       43.6182       232.753       276.371    
   8  0.341783      -1.07358      -74.8980       74.8980       233.051       307.948    
   9  0.804208E-01  -2.52048      -175.841       175.841       236.447       412.288    
  10  0.660499     -0.414760      -28.9356       28.9356       232.549       261.485    
  11  0.739860E-01  -2.60388      -181.659       181.659       235.302       416.961    
  12  0.203251      -1.59331      -111.157       111.157       233.939       345.096    
  13  0.637025     -0.450946      -31.4601       31.4601       226.781       258.241    
  14  0.687460     -0.374752      -26.1444       26.1444       232.113       258.257    
  15  0.663581     -0.410105      -28.6109       28.6109       230.667       259.277    
  16  0.579690     -0.545263      -38.0401       38.0401       251.165       289.205    
  17  0.775653     -0.254050      -17.7238       17.7238       252.687       270.411    
  18  0.284124      -1.25834      -87.7880       87.7880       265.652       353.440    
  19  0.317710      -1.14662      -79.9933       79.9933       230.690       310.683    
  20  0.958871     -0.419990E-01  -2.93005       2.93005       245.535       248.465    
  21  0.582932     -0.539685      -37.6510       37.6510       252.609       290.260    
  22  0.905476     -0.992942E-01  -6.92724       6.92724       238.236       245.163    
  23  0.225214      -1.49070      -103.999       103.999       239.643       343.642    
  24  0.618260     -0.480846      -33.5461       33.5461       239.415       272.961    
  25  0.608706     -0.496420      -34.6326       34.6326       242.147       276.780    
  26  0.651052     -0.429165      -29.9406       29.9406       232.919       262.860    
  27  0.138439E-02  -6.58249      -459.226       459.226       230.776       690.002    
  28  0.157375      -1.84913      -129.004       129.004       230.428       359.432    
  29  0.168063      -1.78342      -124.420       124.420       235.617       360.037    
  30  0.924354     -0.786598E-01  -5.48768       5.48768       241.555       247.043    
  31  0.985585     -0.145204E-01  -1.01301       1.01301       241.078       242.091    
  32  0.540844E-01  -2.91721      -203.518       203.518       231.976       435.494    
  33  0.535345     -0.624843      -43.5920       43.5920       236.949       280.541    
  34  0.736351     -0.306048      -21.3514       21.3514       232.808       254.159    
  35  0.283062E-01  -3.56467      -248.689       248.689       235.204       483.893    
  36  0.690743     -0.369987      -25.8120       25.8120       232.927       258.739    
  37  0.260994      -1.34326      -93.7119       93.7119       238.845       332.557    
  38  0.243637      -1.41208      -98.5133       98.5133       233.019       331.532    
  39  0.850226     -0.162253      -11.3196       11.3196       228.932       240.252    
  40  0.589307     -0.528809      -36.8922       36.8922       234.506       271.398    
  41  0.515087     -0.663420      -46.2833       46.2833       243.367       289.650    
  42  0.348855      -1.05310      -73.4693       73.4693       240.923       314.393    
  43  0.791407     -0.233943      -16.3210       16.3210       230.302       246.623    
  44  0.370775     -0.992160      -69.2178       69.2178       233.144       302.362    
  45  0.676021     -0.391531      -27.3151       27.3151       237.593       264.908    
  46  0.125601      -2.07465      -144.737       144.737       233.901       378.638    
  47  0.582904     -0.539733      -37.6543       37.6543       232.424       270.078    
  48  0.818994     -0.199679      -13.9305       13.9305       234.675       248.605    
  49  0.291406      -1.23304      -86.0226       86.0226       244.911       330.934    
  50  0.887104     -0.119794      -8.35737       8.35737       247.610       255.967    
  51  0.666242     -0.406102      -28.3316       28.3316       231.270       259.602    
  52  0.931047     -0.714460E-01  -4.98442       4.98442       238.219       243.203    
loop,thermsimp(1:2)       23   77.8429       21.3819    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96        233.21          1.26          1.02         23.96          0.14          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97        240.58          1.05          1.02         23.98          0.17          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       23
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       24
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       96     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -85.9996       85.9996       228.932       314.932    
   2  0.991852     -0.818183E-02 -0.570803      0.570803       241.078       241.649    
   3  0.317368      -1.14769      -80.0686       80.0686       238.219       318.287    
   4  0.737330     -0.304720      -21.2587       21.2587       238.236       259.495    
   5  0.834641     -0.180753      -12.6102       12.6102       230.302       242.912    
   6  0.464401     -0.767007      -53.5101       53.5101       241.555       295.065    
   7  0.592116     -0.524053      -36.5604       36.5604       245.535       282.096    
   8  0.464372     -0.767069      -53.5143       53.5143       234.675       288.189    
   9  0.636055E-01  -2.75505      -192.206       192.206       231.049       423.255    
  10  0.712927     -0.338376      -23.6067       23.6067       232.808       256.415    
  11  0.265597      -1.32578      -92.4924       92.4924       247.610       340.102    
  12  0.152318      -1.88178      -131.282       131.282       226.781       358.063    
  13  0.629580     -0.462703      -32.2803       32.2803       232.113       264.393    
  14  0.849464     -0.163150      -11.3821       11.3821       232.927       244.309    
  15  0.487816     -0.717817      -50.0783       50.0783       230.667       280.745    
  16  0.374667     -0.981718      -68.4893       68.4893       231.270       299.760    
  17  0.657383     -0.419488      -29.2655       29.2655       232.549       261.815    
  18  0.846901     -0.166172      -11.5929       11.5929       228.088       239.681    
  19  0.201185      -1.60353      -111.870       111.870       232.919       344.789    
  20  0.771980     -0.258797      -18.0549       18.0549       230.021       248.076    
  21  0.507739     -0.677788      -47.2857       47.2857       237.593       284.878    
  22  0.280262      -1.27203      -88.7430       88.7430       230.194       318.937    
  23  0.285359      -1.25401      -87.4855       87.4855       232.424       319.909    
  24  0.246191      -1.40165      -97.7855       97.7855       252.687       350.473    
  25  0.559989E-01  -2.88242      -201.091       201.091       234.506       435.597    
  26  0.330462      -1.10726      -77.2480       77.2480       239.415       316.663    
  27  0.899405     -0.106022      -7.39661       7.39661       232.753       240.150    
  28  0.637003     -0.450981      -31.4626       31.4626       242.147       273.610    
  29  0.699726E-01  -2.65965      -185.550       185.550       236.949       422.499    
  30  0.677191     -0.389802      -27.1944       27.1944       251.165       278.359    
  31  0.649507     -0.431542      -30.1064       30.1064       243.367       273.474    
  32  0.527986     -0.638685      -44.5577       44.5577       252.609       297.167    
  33  0.374870E-01  -3.28376      -229.091       229.091       233.144       462.235    
  34  0.448697     -0.801407      -55.9100       55.9100       225.404       281.314    
  35  0.809612     -0.211200      -14.7343       14.7343       235.291       250.026    
  36  0.836235     -0.178846      -12.4771       12.4771       233.051       245.528    
  37  0.198161      -1.61867      -112.926       112.926       230.690       343.616    
  38  0.222702      -1.50192      -104.781       104.781       240.923       345.704    
  39  0.888863     -0.117812      -8.21912       8.21912       244.911       253.131    
  40  0.868267     -0.141256      -9.85468       9.85468       233.019       242.874    
  41  0.164066      -1.80749      -126.099       126.099       238.845       364.943    
  42  0.163797      -1.80912      -126.213       126.213       239.643       365.856    
  43  0.883498     -0.123867      -8.64152       8.64152       233.939       242.581    
  44  0.749983     -0.287705      -20.0717       20.0717       265.652       285.724    
  45  0.666691     -0.405428      -28.2846       28.2846       230.428       258.713    
  46  0.978530     -0.217038E-01  -1.51416       1.51416       235.617       237.132    
  47  0.442024     -0.816391      -56.9553       56.9553       233.901       290.856    
  48  0.228080      -1.47806      -103.116       103.116       236.447       339.563    
  49  0.226174      -1.48645      -103.702       103.702       235.302       339.004    
  50  0.388394     -0.945736      -65.9790       65.9790       231.976       297.955    
  51  0.257425      -1.35703      -94.6726       94.6726       235.204       329.877    
  52  0.707288     -0.346317      -24.1607       24.1607       233.205       257.366    
loop,thermsimp(1:2)       24   85.9996      0.570803    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98        233.27          1.16          1.12         23.98          0.05          0.05         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99        235.03          1.08          1.12         24.05          0.04          0.05         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       24
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       25
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       98     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -134.285       134.285       235.617       369.902    
   2  0.438196     -0.825090      -57.5622       57.5622       228.088       285.650    
   3  0.637359     -0.450422      -31.4236       31.4236       232.753       264.177    
   4  0.122813      -2.09709      -146.303       146.303       241.078       387.381    
   5  0.926899     -0.759107E-01  -5.29589       5.29589       233.939       239.235    
   6  0.456580     -0.783992      -54.6950       54.6950       233.019       287.714    
   7  0.988763     -0.113008E-01 -0.788401      0.788401       230.302       231.091    
   8  0.499609     -0.693930      -48.4119       48.4119       232.927       281.338    
   9  0.432617     -0.837902      -58.4560       58.4560       233.051       291.507    
  10  0.403570     -0.907406      -63.3050       63.3050       230.021       293.326    
  11  0.435824     -0.830517      -57.9408       57.9408       235.291       293.232    
  12  0.504807     -0.683579      -47.6897       47.6897       244.911       292.601    
  13  0.778763     -0.250048      -17.4446       17.4446       232.808       250.252    
  14  0.429140     -0.845972      -59.0190       59.0190       233.205       292.224    
  15  0.597763     -0.514562      -35.8983       35.8983       230.428       266.326    
  16  0.425932     -0.853476      -59.5425       59.5425       238.236       297.779    
  17  0.825778     -0.191430      -13.3551       13.3551       232.549       245.904    
  18  0.448772     -0.801241      -55.8984       55.8984       232.113       288.011    
  19  0.701335     -0.354770      -24.7504       24.7504       243.367       268.118    
  20  0.425857     -0.853651      -59.5548       59.5548       242.147       301.702    
  21  0.800815     -0.222126      -15.4965       15.4965       251.165       266.661    
  22  0.724239     -0.322634      -22.5085       22.5085       230.667       253.175    
  23  0.312194      -1.16413      -81.2153       81.2153       225.404       306.619    
  24  0.796592     -0.227412      -15.8654       15.8654       245.535       261.401    
  25  0.164146      -1.80700      -126.065       126.065       237.593       363.658    
  26  0.503041     -0.687083      -47.9342       47.9342       265.652       313.587    
  27  0.640838     -0.444978      -31.0438       31.0438       234.675       265.718    
  28  0.327752      -1.11550      -77.8224       77.8224       233.901       311.724    
  29  0.720325     -0.328053      -22.8866       22.8866       241.555       264.442    
  30  0.447570     -0.803922      -56.0854       56.0854       252.609       308.695    
  31  0.377461     -0.974289      -67.9710       67.9710       231.976       299.947    
  32  0.951264     -0.499633E-01  -3.48568       3.48568       231.270       234.756    
  33  0.610405     -0.493632      -34.4381       34.4381       228.932       263.370    
  34  0.564697     -0.571466      -39.8682       39.8682       239.415       279.283    
  35  0.993998     -0.601974E-02 -0.419966      0.419966       238.219       238.639    
  36  0.908032     -0.964757E-01  -6.73060       6.73060       230.194       236.925    
  37  0.731210     -0.313055      -21.8402       21.8402       232.424       254.264    
  38  0.818812     -0.199901      -13.9461       13.9461       235.204       249.150    
  39  0.423172     -0.859976      -59.9960       59.9960       235.302       295.298    
  40  0.554414     -0.589843      -41.1503       41.1503       236.447       277.597    
  41  0.244903E-01  -3.70948      -258.791       258.791       247.610       506.400    
  42  0.337898      -1.08501      -75.6955       75.6955       230.690       306.385    
  43  0.634521E-01  -2.75747      -192.374       192.374       232.919       425.294    
  44  0.824978     -0.192398      -13.4226       13.4226       240.923       254.346    
  45  0.954123     -0.469622E-01  -3.27631       3.27631       252.687       255.963    
  46  0.807852     -0.213376      -14.8861       14.8861       226.781       241.667    
  47  0.335430      -1.09234      -76.2069       76.2069       238.845       315.052    
  48  0.266194      -1.32353      -92.3359       92.3359       239.643       331.979    
  49  0.797818     -0.225874      -15.7581       15.7581       236.949       252.707    
  50  0.710601     -0.341644      -23.8347       23.8347       231.049       254.884    
  51  0.469059     -0.757026      -52.8137       52.8137       234.506       287.320    
  52  0.256457E-01  -3.66338      -255.575       255.575       233.270       488.844    
loop,thermsimp(1:2)       25   134.285       57.5622    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100        237.23          1.08          1.12         24.07          0.02          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101        278.24          1.04          1.11         24.07          0.06          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    278.24        2.871     -1.416      5.038     -100.0      1.389    
                     -0.5108      2.533     -100.0      2.459      1.142    
                       1.326    -0.9432      1.841      0.000      0.000    
                      -1.282      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.968     -2.721     -5.117     -2.726    
                      -13.61     -2.447      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.1148     -1.470      0.000    -0.8078    
                     -0.1496    -0.2397    -0.1164    -0.1886    -0.1703E-01

                      -1.212    -0.5772      0.000    -0.8855E-01 0.2414E-01
                      0.8541E-01 0.1761E-01-0.1570E-01-0.1399    -0.1277    
                      0.2033     0.1298    -0.2009E-01-0.8034      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.128      9.179     -7039.     -4.000    
                     -0.4770     0.1897      9.064      8.582     -4904.    

                      -4.000     0.7047E-01-0.6952      8.833      9.074    
                      -6912.     -4.000     0.1082E-01-0.7349      9.594    
                       8.837     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    237.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       25
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       26
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:      100     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -17.2407       17.2407       230.302       247.543    
   2  0.928800     -0.738619E-01  -5.15296       5.15296       231.270       236.423    
   3  0.727994     -0.317462      -22.1477       22.1477       230.194       252.342    
   4  0.109723E-01  -4.51238      -314.805       314.805       238.219       553.024    
   5  0.160096      -1.83198      -127.808       127.808       233.939       361.747    
   6  0.497079     -0.699006      -48.7660       48.7660       226.781       275.547    
   7  0.789473     -0.236389      -16.4916       16.4916       232.549       249.041    
   8  0.763780     -0.269476      -18.7999       18.7999       235.204       254.004    
   9  0.217288      -1.52653      -106.498       106.498       232.808       339.306    
  10  0.867642     -0.141976      -9.90495       9.90495       236.949       246.854    
  11  0.740966     -0.299800      -20.9155       20.9155       230.667       251.582    
  12  0.999757     -0.242662E-03 -0.169293E-01  0.169293E-01   232.424       232.441    
  13  0.587476     -0.531920      -37.1092       37.1092       240.923       278.033    
  14  0.703619     -0.351518      -24.5236       24.5236       231.049       255.573    
  15  0.740946     -0.299828      -20.9174       20.9174       252.687       273.604    
  16  0.335927      -1.09086      -76.1036       76.1036       245.535       321.639    
  17  0.736553     -0.305774      -21.3322       21.3322       228.932       250.264    
  18  0.597397     -0.515174      -35.9410       35.9410       232.753       268.694    
  19  0.126601      -2.06672      -144.184       144.184       241.555       385.739    
  20  0.990194     -0.985477E-02 -0.687515      0.687515       234.675       235.362    
  21  0.716453     -0.333443      -23.2626       23.2626       230.428       253.691    
  22  0.279233E-01  -3.57829      -249.639       249.639       251.165       500.804    
  23  0.413932     -0.882054      -61.5363       61.5363       243.367       304.903    
  24  0.109516      -2.21168      -154.297       154.297       236.447       390.744    
  25  0.440749     -0.819279      -57.1568       57.1568       239.415       296.572    
  26  0.412115     -0.886453      -61.8432       61.8432       232.927       294.770    
  27  0.146963      -1.91758      -133.779       133.779       228.088       361.867    
  28  0.345919      -1.06155      -74.0587       74.0587       234.506       308.565    
  29  0.343614      -1.06824      -74.5252       74.5252       233.019       307.544    
  30  0.600334E-01  -2.81285      -196.238       196.238       232.113       428.351    
  31  0.751538     -0.285634      -19.9272       19.9272       233.051       252.978    
  32  0.878119     -0.129973      -9.06756       9.06756       233.205       242.273    
  33  0.544046     -0.608721      -42.4673       42.4673       244.911       287.379    
  34  0.931023     -0.714714E-01  -4.98619       4.98619       235.291       240.277    
  35  0.131968      -2.02520      -141.287       141.287       230.021       371.308    
  36  0.826694E-01  -2.49291      -173.917       173.917       235.302       409.219    
  37  0.174702E-02  -6.34984      -442.995       442.995       238.236       681.231    
  38  0.233470      -1.45470      -101.487       101.487       231.976       333.463    
  39  0.232927      -1.45703      -101.649       101.649       242.147       343.796    
  40  0.958279     -0.426163E-01  -2.97312       2.97312       230.690       233.663    
  41  0.820100     -0.198330      -13.8364       13.8364       225.404       239.241    
  42  0.305797      -1.18483      -82.6597       82.6597       252.609       335.269    
  43  0.260853      -1.34380      -93.7498       93.7498       233.901       327.651    
  44  0.960408     -0.403967E-01  -2.81827       2.81827       265.652       268.471    
  45  0.318957      -1.14270      -79.7201       79.7201       238.845       318.565    
  46  0.146887      -1.91809      -133.815       133.815       239.643       373.458    
  47  0.787623     -0.238735      -16.6553       16.6553       237.593       254.248    
  48  0.452412     -0.793163      -55.3348       55.3348       235.617       290.952    
  49  0.218339      -1.52170      -106.161       106.161       241.078       347.240    
  50  0.177672      -1.72782      -120.541       120.541       232.919       353.460    
  51  0.928922     -0.737304E-01  -5.14378       5.14378       233.270       238.413    
  52  0.341447      -1.07456      -74.9665       74.9665       237.230       312.197    
loop,thermsimp(1:2)       26   17.2407       5.15296    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102        243.75          1.05          1.11         24.02          0.09          0.05         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    243.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       26
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       27
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:      101     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -13.9719       13.9719       232.424       246.396    
   2  0.309452      -1.17295      -81.8308       81.8308       230.690       312.521    
   3  0.303638      -1.19192      -83.1540       83.1540       234.675       317.829    
   4  0.754457     -0.281757      -19.6567       19.6567       231.270       250.927    
   5  0.623133     -0.472996      -32.9984       32.9984       233.270       266.268    
   6  0.989422E-01  -2.31322      -161.381       161.381       225.404       386.785    
   7  0.695126     -0.363662      -25.3708       25.3708       235.291       260.662    
   8  0.832210E-01  -2.48626      -173.453       173.453       233.205       406.658    
   9  0.869521     -0.139813      -9.75403       9.75403       236.949       246.703    
  10  0.488136     -0.717160      -50.0325       50.0325       230.302       280.335    
  11  0.579877     -0.544940      -38.0176       38.0176       232.549       270.567    
  12  0.480435     -0.733064      -51.1420       51.1420       228.932       280.074    
  13  0.792626     -0.232404      -16.2136       16.2136       230.667       246.880    
  14  0.870230     -0.138998      -9.69714       9.69714       230.194       239.891    
  15  0.886361     -0.120631      -8.41577       8.41577       233.051       241.466    
  16  0.358181      -1.02672      -71.6287       71.6287       230.428       302.057    
  17  0.560125     -0.579594      -40.4353       40.4353       235.204       275.640    
  18  0.546151     -0.604859      -42.1978       42.1978       237.593       279.791    
  19  0.732086     -0.311858      -21.7567       21.7567       231.049       252.806    
  20  0.590102     -0.527460      -36.7981       36.7981       265.652       302.451    
  21  0.867355     -0.142307      -9.92804       9.92804       232.753       242.681    
  22  0.749758     -0.288005      -20.0926       20.0926       252.687       272.780    
  23  0.721970     -0.325772      -22.7274       22.7274       226.781       249.509    
  24  0.596865     -0.516065      -36.0032       36.0032       240.923       276.926    
  25  0.878161     -0.129925      -9.06417       9.06417       244.911       253.976    
  26  0.558752E-01  -2.88463      -201.246       201.246       235.617       436.863    
  27  0.555543     -0.587810      -41.0084       41.0084       232.927       273.935    
  28  0.597562     -0.514897      -35.9216       35.9216       239.415       275.337    
  29  0.995329     -0.468202E-02 -0.326640      0.326640       243.367       243.694    
  30  0.206787      -1.57606      -109.954       109.954       233.019       342.973    
  31  0.645457     -0.437797      -30.5428       30.5428       234.506       265.049    
  32  0.871352     -0.137710      -9.60727       9.60727       237.230       246.838    
  33  0.701360     -0.354733      -24.7479       24.7479       238.845       263.593    
  34  0.936151     -0.659784E-01  -4.60297       4.60297       245.535       250.138    
  35  0.590091     -0.527478      -36.7994       36.7994       233.901       270.700    
  36  0.750433     -0.287105      -20.0298       20.0298       231.976       252.006    
  37  0.326255      -1.12007      -78.1417       78.1417       252.609       330.751    
  38  0.873133     -0.135668      -9.46484       9.46484       232.808       242.273    
  39  0.621627     -0.475415      -33.1672       33.1672       242.147       275.314    
  40  0.153041      -1.87705      -130.952       130.952       241.078       372.030    
  41  0.196696      -1.62610      -113.444       113.444       232.919       346.364    
  42  0.365028      -1.00778      -70.3076       70.3076       233.939       304.247    
  43  0.398429     -0.920226      -64.1993       64.1993       228.088       292.287    
  44  0.549691     -0.598399      -41.7472       41.7472       230.021       271.768    
  45  0.994179     -0.583795E-02 -0.407283      0.407283       239.643       240.050    
  46  0.147335E-01  -4.21763      -294.242       294.242       241.555       535.797    
  47  0.224737      -1.49282      -104.146       104.146       236.447       340.593    
  48  0.182172      -1.70281      -118.796       118.796       235.302       354.098    
  49  0.230919      -1.46569      -102.253       102.253       232.113       334.366    
  50  0.491818     -0.709647      -49.5083       49.5083       251.165       300.673    
  51  0.370754     -0.992217      -69.2218       69.2218       238.219       307.441    
  52  0.785622     -0.241279      -16.8328       16.8328       243.747       260.579    
loop,thermsimp(1:2)       27   13.9719       81.8308    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103        228.43          1.08          1.12         23.92          0.08          0.05         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104        229.62          1.01          1.11         23.89          0.06          0.05         26.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       27
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       28
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:      103     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -14.8167       14.8167       230.194       245.011    
   2  0.162004E-01  -4.12272      -287.621       287.621       239.643       527.264    
   3  0.446841E-01  -3.10814      -216.838       216.838       233.051       449.889    
   4  0.757954     -0.277132      -19.3341       19.3341       232.808       252.142    
   5  0.525315     -0.643757      -44.9116       44.9116       232.753       277.665    
   6  0.229940      -1.46994      -102.550       102.550       243.367       345.917    
   7  0.273310E-01  -3.59973      -251.135       251.135       232.424       483.558    
   8  0.228047      -1.47820      -103.126       103.126       236.949       340.076    
   9  0.963384E-01  -2.33989      -163.242       163.242       237.230       400.472    
  10  0.495504     -0.702179      -48.9873       48.9873       230.667       279.654    
  11  0.930436     -0.721018E-01  -5.03016       5.03016       226.781       231.811    
  12  0.138744      -1.97513      -137.794       137.794       245.535       383.330    
  13  0.676381     -0.390999      -27.2779       27.2779       231.270       258.548    
  14  0.763696     -0.269586      -18.8076       18.8076       231.976       250.783    
  15  0.282468      -1.26419      -88.1959       88.1959       231.049       319.245    
  16  0.359172      -1.02395      -71.4358       71.4358       244.911       316.347    
  17  0.392258     -0.935834      -65.2883       65.2883       243.747       309.035    
  18  0.524686     -0.644955      -44.9951       44.9951       235.291       280.286    
  19  0.850465     -0.161972      -11.2999       11.2999       238.845       250.145    
  20  0.227056      -1.48256      -103.430       103.430       234.506       337.936    
  21  0.942039     -0.597082E-01  -4.16553       4.16553       233.270       237.435    
  22  0.807336     -0.214016      -14.9308       14.9308       232.549       247.480    
  23  0.345853      -1.06174      -74.0722       74.0722       233.901       307.973    
  24  0.762940     -0.270575      -18.8766       18.8766       230.021       248.897    
  25  0.589959     -0.527702      -36.8150       36.8150       252.687       289.502    
  26  0.563539     -0.573518      -40.0113       40.0113       232.927       272.938    
  27  0.812044     -0.208201      -14.5251       14.5251       242.147       256.672    
  28  0.735850     -0.306729      -21.3989       21.3989       239.415       260.814    
  29  0.396292     -0.925605      -64.5746       64.5746       235.204       299.779    
  30  0.623568     -0.472298      -32.9498       32.9498       240.923       273.873    
  31  0.925937     -0.769486E-01  -5.36830       5.36830       237.593       242.961    
  32  0.880074     -0.127749      -8.91241       8.91241       228.932       237.845    
  33  0.379958     -0.967693      -67.5109       67.5109       230.302       297.813    
  34  0.842940E-01  -2.47344      -172.559       172.559       228.088       400.647    
  35  0.199092      -1.61399      -112.600       112.600       251.165       363.764    
  36  0.625899     -0.468566      -32.6894       32.6894       230.428       263.118    
  37  0.888337     -0.118405      -8.26046       8.26046       265.652       273.913    
  38  0.959633     -0.412048E-01  -2.87464       2.87464       233.939       236.814    
  39  0.289813      -1.23852      -86.4049       86.4049       238.219       324.624    
  40  0.889440     -0.117163      -8.17386       8.17386       230.690       238.864    
  41  0.797260     -0.226575      -15.8069       15.8069       234.675       250.481    
  42  0.451097     -0.796073      -55.5378       55.5378       252.609       308.147    
  43  0.609578     -0.494989      -34.5328       34.5328       232.113       266.645    
  44  0.910850     -0.933770E-01  -6.51442       6.51442       236.447       242.961    
  45  0.448191     -0.802536      -55.9887       55.9887       233.019       289.008    
  46  0.831229     -0.184850      -12.8960       12.8960       232.919       245.815    
  47  0.246260      -1.40137      -97.7661       97.7661       235.302       333.068    
  48  0.280480      -1.27125      -88.6886       88.6886       241.078       329.767    
  49  0.161513      -1.82317      -127.193       127.193       225.404       352.597    
  50  0.337020      -1.08761      -75.8771       75.8771       233.205       309.082    
  51  0.160136      -1.83173      -127.790       127.790       235.617       363.407    
  52  0.268039      -1.31662      -91.8539       91.8539       228.433       320.287    
loop,thermsimp(1:2)       28   14.8167       287.621    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105        239.64          1.05          1.11         23.91          0.11          0.05         26.23
Just calling func    0   0         26.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106        281.43          1.04          1.12         23.92          0.06          0.05         26.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    239.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    69.7648               103
loop is:       28
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    69.7648               103
loop is:       29
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    34.8824               154

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      105     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -75.1768       75.1768       226.781       301.958    
   2  0.685048     -0.378267      -13.1948       13.1948       233.939       247.134    
   3  0.739526     -0.301746      -10.5256       10.5256       233.270       243.795    
   4  0.161448      -1.82357      -63.6105       63.6105       228.932       292.543    
   5  0.819608     -0.198929      -6.93912       6.93912       230.690       237.629    
   6  0.750679     -0.286777      -10.0035       10.0035       237.593       247.596    
   7  0.797409     -0.226388      -7.89694       7.89694       236.447       244.344    
   8  0.193123      -1.64443      -57.3616       57.3616       230.194       287.556    
   9  0.189346E-01  -3.96676      -138.370       138.370       232.919       371.290    
  10  0.715264     -0.335103      -11.6892       11.6892       232.549       244.238    
  11  0.384856     -0.954886      -33.3087       33.3087       230.021       263.329    
  12  0.268023      -1.31668      -45.9290       45.9290       238.845       284.774    
  13  0.777164     -0.252104      -8.79398       8.79398       234.675       243.469    
  14  0.707495E-01  -2.64861      -92.3898       92.3898       231.976       324.366    
  15  0.233610      -1.45410      -50.7225       50.7225       232.808       283.530    
  16  0.193057      -1.64477      -57.3736       57.3736       242.147       299.521    
  17  0.486879     -0.719739      -25.1062       25.1062       231.270       256.376    
  18  0.735370     -0.307381      -10.7222       10.7222       239.415       250.137    
  19  0.147509      -1.91387      -66.7602       66.7602       230.428       297.188    
  20  0.739111     -0.302308      -10.5452       10.5452       232.113       242.658    
  21  0.886241     -0.120766      -4.21260       4.21260       232.927       237.139    
  22  0.158672      -1.84092      -64.2155       64.2155       240.923       305.139    
  23  0.143658      -1.94032      -67.6830       67.6830       265.652       333.335    
  24  0.637431E-02  -5.05548      -176.347       176.347       232.753       409.100    
  25  0.753372     -0.283196      -9.87856       9.87856       230.667       240.545    
  26  0.555831     -0.587292      -20.4861       20.4861       235.291       255.777    
  27  0.280013      -1.27292      -44.4024       44.4024       233.019       277.421    
  28  0.811304     -0.209112      -7.29434       7.29434       252.687       259.981    
  29  0.972296E-02  -4.63327      -161.619       161.619       230.302       391.922    
  30  0.713459     -0.337631      -11.7774       11.7774       235.204       246.982    
  31  0.194621      -1.63670      -57.0919       57.0919       233.901       290.993    
  32  0.492587     -0.708083      -24.6996       24.6996       252.609       277.309    
  33  0.759094E-01  -2.57821      -89.9342       89.9342       243.747       333.681    
  34  0.494544     -0.704119      -24.5613       24.5613       233.205       257.767    
  35  0.297023      -1.21395      -42.3453       42.3453       244.911       287.257    
  36  0.429878E-01  -3.14684      -109.769       109.769       231.049       340.818    
  37  0.490931     -0.711452      -24.8171       24.8171       228.433       253.250    
  38  0.534417     -0.626578      -21.8565       21.8565       238.219       260.075    
  39  0.254967      -1.36662      -47.6709       47.6709       241.078       288.749    
  40  0.995945     -0.406335E-02 -0.141739      0.141739       235.302       235.444    
  41  0.428814E-01  -3.14932      -109.856       109.856       234.506       344.362    
  42  0.332915      -1.09987      -38.3660       38.3660       236.949       275.315    
  43  0.657266     -0.419666      -14.6389       14.6389       243.367       258.006    
  44  0.301071      -1.20041      -41.8731       41.8731       225.404       267.277    
  45  0.998178     -0.182349E-02 -0.636078E-01  0.636078E-01   235.617       235.681    
  46  0.533372     -0.628536      -21.9248       21.9248       251.165       273.090    
  47  0.244746      -1.40753      -49.0981       49.0981       245.535       294.633    
  48  0.345321      -1.06328      -37.0898       37.0898       237.230       274.320    
  49  0.339541      -1.08016      -37.6786       37.6786       228.088       265.767    
  50  0.456434     -0.784311      -27.3586       27.3586       233.051       260.409    
  51  0.510210     -0.672933      -23.4735       23.4735       232.424       255.897    
  52  0.678441     -0.387958      -13.5329       13.5329       239.645       253.178    
loop,thermsimp(1:2)       29   75.1768       13.1948    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107        233.03          1.04          1.00         24.12          0.05          0.05         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108        234.37          0.98          0.99         23.92          0.34          0.05         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       29
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       30
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      107     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -112.598       112.598       235.302       347.901    
   2  0.712690     -0.338709      -11.8150       11.8150       235.617       247.432    
   3  0.284498      -1.25703      -43.8482       43.8482       232.927       276.775    
   4  0.132414      -2.02182      -70.5260       70.5260       230.690       301.216    
   5  0.868558     -0.140920      -4.91564       4.91564       230.667       235.582    
   6  0.695240     -0.363498      -12.6797       12.6797       232.113       244.792    
   7  0.777362     -0.251849      -8.78510       8.78510       234.675       243.460    
   8  0.302494      -1.19569      -41.7086       41.7086       233.270       274.978    
   9  0.710188     -0.342225      -11.9376       11.9376       232.549       244.487    
  10  0.884530     -0.122698      -4.28001       4.28001       236.447       240.727    
  11  0.146421E-01  -4.22386      -147.338       147.338       235.204       382.543    
  12  0.834801     -0.180562      -6.29842       6.29842       233.939       240.238    
  13  0.414011     -0.881863      -30.7615       30.7615       237.593       268.354    
  14  0.655777     -0.421935      -14.7181       14.7181       239.415       254.133    
  15  0.530106     -0.634679      -22.1391       22.1391       239.645       261.784    
  16  0.325231      -1.12322      -39.1806       39.1806       228.433       267.613    
  17  0.293550      -1.22571      -42.7556       42.7556       235.291       278.047    
  18  0.194161      -1.63907      -57.1746       57.1746       232.424       289.598    
  19  0.589029E-01  -2.83186      -98.7822       98.7822       231.270       330.052    
  20  0.385142     -0.954143      -33.2828       33.2828       233.205       266.488    
  21  0.287461      -1.24667      -43.4867       43.4867       243.367       286.854    
  22  0.528518     -0.637678      -22.2437       22.2437       252.687       274.931    
  23  0.517042     -0.659630      -23.0095       23.0095       238.219       261.228    
  24  0.453375     -0.791035      -27.5932       27.5932       233.051       260.644    
  25  0.695596     -0.362986      -12.6618       12.6618       230.021       242.682    
  26  0.645178     -0.438228      -15.2864       15.2864       228.088       243.375    
  27  0.696076     -0.362297      -12.6378       12.6378       225.404       238.042    
  28  0.483522     -0.726659      -25.3476       25.3476       251.165       276.512    
  29  0.155396E-01  -4.16436      -145.263       145.263       237.230       382.493    
  30  0.883154     -0.124256      -4.33434       4.33434       236.949       241.284    
  31  0.525944     -0.642561      -22.4141       22.4141       252.609       275.023    
  32  0.746799     -0.291959      -10.1842       10.1842       233.019       243.203    
  33  0.458658     -0.779449      -27.1890       27.1890       232.808       259.997    
  34  0.614284     -0.487298      -16.9981       16.9981       238.845       255.843    
  35  0.581412     -0.542295      -18.9166       18.9166       244.911       263.828    
  36  0.820935     -0.197312      -6.88270       6.88270       230.194       237.077    
  37  0.852366     -0.159739      -5.57208       5.57208       241.078       246.650    
  38  0.527059     -0.640443      -22.3402       22.3402       233.901       256.241    
  39  0.376404     -0.977092      -34.0833       34.0833       228.932       263.015    
  40  0.729525E-01  -2.61795      -91.3202       91.3202       245.535       336.856    
  41  0.342258      -1.07219      -37.4006       37.4006       230.428       267.829    
  42  0.955065     -0.459761E-01  -1.60375       1.60375       242.147       243.751    
  43  0.508654E-01  -2.97857      -103.900       103.900       226.781       330.681    
  44  0.471716     -0.751379      -26.2099       26.2099       240.923       267.133    
  45  0.137118      -1.98691      -69.3083       69.3083       231.976       301.284    
  46  0.844826     -0.168625      -5.88203       5.88203       265.652       271.534    
  47  0.841708     -0.172322      -6.01099       6.01099       243.747       249.758    
  48  0.360396E-01  -3.32314      -115.919       115.919       231.049       346.968    
  49  0.953282     -0.478444E-01  -1.66893       1.66893       234.506       236.175    
  50  0.503408     -0.686355      -23.9417       23.9417       232.919       256.861    
  51  0.593854     -0.521122      -18.1780       18.1780       230.302       248.480    
  52  0.524910     -0.644528      -22.4827       22.4827       233.027       255.509    
loop,thermsimp(1:2)       30   112.598       11.8150    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109        239.32          1.02          0.99         23.91          0.38          0.05         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110        296.56          0.98          0.99         24.00          0.22          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    239.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       30
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       31
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      109     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -48.5558       48.5558       230.667       279.222    
   2  0.247647      -1.39575      -48.6871       48.6871       234.506       283.193    
   3  0.396263     -0.925678      -32.2899       32.2899       230.194       262.484    
   4  0.386461     -0.950723      -33.1635       33.1635       225.404       258.568    
   5  0.729285     -0.315691      -11.0120       11.0120       233.939       244.951    
   6  0.665866     -0.406667      -14.1855       14.1855       236.447       250.632    
   7  0.385122     -0.954194      -33.2846       33.2846       236.949       270.234    
   8  0.625701     -0.468883      -16.3557       16.3557       230.021       246.376    
   9  0.392668     -0.934792      -32.6078       32.6078       233.019       265.627    
  10  0.698356     -0.359026      -12.5237       12.5237       228.088       240.612    
  11  0.537534E-01  -2.92335      -101.973       101.973       234.675       336.648    
  12  0.289307      -1.24027      -43.2635       43.2635       242.147       285.411    
  13  0.138460E-01  -4.27976      -149.288       149.288       232.549       381.837    
  14  0.824110     -0.193451      -6.74802       6.74802       232.113       238.861    
  15  0.560983     -0.578065      -20.1643       20.1643       241.078       261.243    
  16  0.116087E-01  -4.45600      -155.436       155.436       235.617       391.053    
  17  0.218033      -1.52311      -53.1296       53.1296       230.302       283.432    
  18  0.893705E-01  -2.41497      -84.2397       84.2397       243.747       327.986    
  19  0.304886      -1.18782      -41.4338       41.4338       239.415       280.849    
  20  0.179833      -1.71573      -59.8487       59.8487       233.027       292.875    
  21  0.867378     -0.142281      -4.96309       4.96309       238.845       243.808    
  22  0.243287      -1.41351      -49.3067       49.3067       233.901       283.208    
  23  0.772489     -0.258138      -9.00445       9.00445       232.919       241.924    
  24  0.321011      -1.13628      -39.6362       39.6362       232.808       272.444    
  25  0.499417     -0.694314      -24.2193       24.2193       233.051       257.270    
  26  0.396806     -0.924307      -32.2420       32.2420       238.219       270.461    
  27  0.580203E-01  -2.84696      -99.3088       99.3088       239.645       338.954    
  28  0.854206     -0.157583      -5.49686       5.49686       228.932       234.429    
  29  0.914649     -0.892145E-01  -3.11201       3.11201       244.911       248.023    
  30  0.167601      -1.78617      -62.3058       62.3058       233.205       295.511    
  31  0.350137      -1.04943      -36.6066       36.6066       240.923       277.530    
  32  0.522932     -0.648304      -22.6144       22.6144       228.433       251.047    
  33  0.538779     -0.618450      -21.5730       21.5730       230.428       252.001    
  34  0.693066     -0.366629      -12.7889       12.7889       237.593       250.382    
  35  0.361961      -1.01622      -35.4481       35.4481       265.652       301.101    
  36  0.310665      -1.16904      -40.7789       40.7789       252.687       293.466    
  37  0.818669     -0.200076      -6.97912       6.97912       233.270       240.249    
  38  0.582861     -0.539807      -18.8297       18.8297       252.609       271.439    
  39  0.401728     -0.911979      -31.8120       31.8120       251.165       282.977    
  40  0.171089      -1.76557      -61.5874       61.5874       232.927       294.514    
  41  0.980174     -0.200248E-01 -0.698512      0.698512       235.291       235.990    
  42  0.495496     -0.702196      -24.4943       24.4943       243.367       267.861    
  43  0.436683     -0.828549      -28.9017       28.9017       232.424       261.325    
  44  0.910411     -0.938588E-01  -3.27402       3.27402       230.690       233.964    
  45  0.649932     -0.430887      -15.0304       15.0304       231.976       247.006    
  46  0.755226     -0.280738      -9.79280       9.79280       231.270       241.063    
  47  0.927352     -0.754221E-01  -2.63090       2.63090       226.781       229.412    
  48  0.848028     -0.164842      -5.75007       5.75007       245.535       251.285    
  49  0.146193      -1.92283      -67.0729       67.0729       231.049       298.122    
  50  0.571278     -0.559879      -19.5299       19.5299       235.302       254.832    
  51  0.244418      -1.40888      -49.1450       49.1450       237.230       286.375    
  52  0.979014     -0.212091E-01 -0.739822      0.739822       239.319       240.059    
loop,thermsimp(1:2)       31   48.5558       48.6871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111        229.68          1.23          1.04         24.04          0.06          0.06         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112        230.05          1.04          1.00         23.96          0.20          0.05         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       31
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       32
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      111     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.137353      0.137353       226.781       226.918    
   2  0.758684E-02  -4.88134      -170.273       170.273       230.690       400.963    
   3  0.404439     -0.905254      -31.5774       31.5774       228.932       260.510    
   4  0.947917E-01  -2.35607      -82.1854       82.1854       235.291       317.477    
   5  0.834417     -0.181022      -6.31449       6.31449       232.113       238.427    
   6  0.891274     -0.115104      -4.01509       4.01509       239.319       243.334    
   7  0.744451     -0.295108      -10.2941       10.2941       233.270       243.564    
   8  0.559638     -0.580466      -20.2480       20.2480       228.088       248.336    
   9  0.821724     -0.196351      -6.84918       6.84918       231.270       238.119    
  10  0.847292     -0.165710      -5.78034       5.78034       232.919       238.700    
  11  0.661676     -0.412979      -14.4057       14.4057       238.845       253.250    
  12  0.993427     -0.659478E-02 -0.230042      0.230042       233.939       234.169    
  13  0.425996     -0.853326      -29.7661       29.7661       230.021       259.787    
  14  0.673132     -0.395813      -13.8069       13.8069       231.976       245.783    
  15  0.234810      -1.44898      -50.5438       50.5438       244.911       295.455    
  16  0.122926      -2.09617      -73.1195       73.1195       237.593       310.712    
  17  0.523553     -0.647118      -22.5730       22.5730       236.447       259.020    
  18  0.959317     -0.415333E-01  -1.44878       1.44878       228.433       229.881    
  19  0.321726      -1.13406      -39.5586       39.5586       245.535       285.094    
  20  0.493112     -0.707018      -24.6625       24.6625       230.428       255.091    
  21  0.416134     -0.876748      -30.5831       30.5831       235.302       265.885    
  22  0.409432     -0.892985      -31.1494       31.1494       233.051       264.200    
  23  0.657956     -0.418617      -14.6024       14.6024       225.404       240.006    
  24  0.904324     -0.100567      -3.50803       3.50803       241.078       244.586    
  25  0.714426     -0.336276      -11.7301       11.7301       232.424       244.154    
  26  0.150521      -1.89365      -66.0550       66.0550       230.194       296.249    
  27  0.758740     -0.276096      -9.63089       9.63089       233.019       242.650    
  28  0.359105      -1.02414      -35.7245       35.7245       243.367       279.092    
  29  0.666937     -0.405060      -14.1294       14.1294       236.949       251.079    
  30  0.343213      -1.06940      -37.3033       37.3033       238.219       275.522    
  31  0.484849     -0.723918      -25.2520       25.2520       252.609       277.861    
  32  0.874661     -0.133919      -4.67141       4.67141       232.808       237.479    
  33  0.994710     -0.530415E-02 -0.185021      0.185021       240.923       241.108    
  34  0.821923     -0.196109      -6.84075       6.84075       230.667       237.507    
  35  0.954096E-02  -4.65216      -162.278       162.278       239.415       401.694    
  36  0.240030      -1.42699      -49.7768       49.7768       251.165       300.942    
  37  0.279003      -1.27653      -44.5285       44.5285       234.506       279.034    
  38  0.553830     -0.590898      -20.6119       20.6119       233.901       254.513    
  39  0.400809     -0.914271      -31.8920       31.8920       230.302       262.194    
  40  0.146125      -1.92330      -67.0891       67.0891       242.147       309.236    
  41  0.811879     -0.208403      -7.26961       7.26961       237.230       244.500    
  42  0.349149      -1.05226      -36.7052       36.7052       233.027       269.732    
  43  0.897422     -0.108229      -3.77528       3.77528       252.687       256.462    
  44  0.114492      -2.16725      -75.5989       75.5989       232.927       308.525    
  45  0.831901E-01  -2.48663      -86.7395       86.7395       233.205       319.945    
  46  0.721169     -0.326882      -11.4024       11.4024       231.049       242.451    
  47  0.801724     -0.220991      -7.70869       7.70869       265.652       273.361    
  48  0.466569     -0.762349      -26.5926       26.5926       243.747       270.339    
  49  0.103404      -2.26911      -79.1520       79.1520       234.675       313.827    
  50  0.417206     -0.874175      -30.4933       30.4933       239.645       270.138    
  51  0.267666      -1.31802      -45.9755       45.9755       232.549       278.525    
  52  0.670232     -0.400131      -13.9575       13.9575       229.684       243.642    
loop,thermsimp(1:2)       32  0.137353       170.273    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113        230.42          1.09          1.12         24.00          0.07          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114        231.32          1.05          1.11         23.95          0.02          0.05         26.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    230.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       32
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       33
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      113     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -27.4231       27.4231       226.781       254.204    
   2  0.588265E-01  -2.83316      -98.8275       98.8275       228.433       327.260    
   3  0.787103E-01  -2.54198      -88.6704       88.6704       233.939       322.610    
   4  0.597713     -0.514644      -17.9520       17.9520       232.808       250.760    
   5  0.110741      -2.20056      -76.7608       76.7608       230.667       307.427    
   6  0.677861     -0.388813      -13.5627       13.5627       231.270       244.833    
   7  0.307724      -1.17855      -41.1107       41.1107       232.113       273.223    
   8  0.550587     -0.596770      -20.8168       20.8168       232.919       253.736    
   9  0.601295     -0.508669      -17.7436       17.7436       225.404       243.148    
  10  0.487121     -0.719243      -25.0889       25.0889       240.923       266.012    
  11  0.146295      -1.92213      -67.0484       67.0484       231.049       298.097    
  12  0.714050     -0.336802      -11.7484       11.7484       233.019       244.767    
  13  0.723089     -0.324223      -11.3097       11.3097       239.319       250.629    
  14  0.805432     -0.216376      -7.54772       7.54772       233.270       240.817    
  15  0.123280      -2.09329      -73.0191       73.0191       229.684       302.704    
  16  0.853039     -0.158950      -5.54457       5.54457       232.424       237.968    
  17  0.288289      -1.24379      -43.3864       43.3864       237.230       280.617    
  18  0.705126     -0.349379      -12.1872       12.1872       241.078       253.265    
  19  0.772420     -0.258227      -9.00756       9.00756       231.976       240.983    
  20  0.962845     -0.378631E-01  -1.32076       1.32076       228.088       229.409    
  21  0.245802      -1.40323      -48.9479       48.9479       236.949       285.897    
  22  0.752702     -0.284087      -9.90961       9.90961       238.845       248.754    
  23  0.729896     -0.314853      -10.9828       10.9828       233.901       244.884    
  24  0.869278     -0.140092      -4.88675       4.88675       230.428       235.315    
  25  0.597817E-01  -2.81706      -98.2656       98.2656       252.687       350.953    
  26  0.984108     -0.160195E-01 -0.558799      0.558799       236.447       237.006    
  27  0.278288      -1.27910      -44.6180       44.6180       230.021       274.639    
  28  0.588278     -0.530555      -18.5070       18.5070       228.932       247.439    
  29  0.807614     -0.213671      -7.45336       7.45336       230.302       237.756    
  30  0.428679     -0.847047      -29.5470       29.5470       233.051       262.598    
  31  0.452991     -0.791883      -27.6228       27.6228       235.302       262.925    
  32  0.678742     -0.387514      -13.5174       13.5174       233.027       246.544    
  33  0.504500     -0.684188      -23.8661       23.8661       239.645       263.511    
  34  0.894800     -0.111155      -3.87735       3.87735       243.747       247.624    
  35  0.854311     -0.157461      -5.49260       5.49260       265.652       271.145    
  36  0.756230     -0.279410      -9.74648       9.74648       238.219       247.965    
  37  0.744369     -0.295219      -10.2979       10.2979       252.609       262.907    
  38  0.435758     -0.830668      -28.9757       28.9757       232.549       261.525    
  39  0.677387     -0.389513      -13.5871       13.5871       234.506       248.093    
  40  0.504989     -0.683219      -23.8323       23.8323       243.367       267.199    
  41  0.325676      -1.12185      -39.1329       39.1329       245.535       284.668    
  42  0.147207      -1.91591      -66.8316       66.8316       244.911       311.743    
  43  0.432041     -0.839234      -29.2745       29.2745       230.194       259.469    
  44  0.615972     -0.484555      -16.9024       16.9024       251.165       268.067    
  45  0.150867      -1.89136      -65.9750       65.9750       232.927       298.902    
  46  0.464307     -0.767210      -26.7621       26.7621       242.147       268.909    
  47  0.379753     -0.968234      -33.7743       33.7743       237.593       271.367    
  48  0.886192     -0.120822      -4.21455       4.21455       234.675       238.889    
  49  0.231751E-01  -3.76468      -131.321       131.321       235.291       366.612    
  50  0.257662      -1.35611      -47.3042       47.3042       233.205       280.510    
  51  0.470381E-01  -3.05680      -106.628       106.628       230.690       337.318    
  52  0.972366     -0.280233E-01 -0.977521      0.977521       230.421       231.399    
loop,thermsimp(1:2)       33   27.4231       98.8275    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115        233.01          1.04          1.12         23.98          0.04          0.06         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116        234.41          1.05          1.11         24.02          0.05          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       33
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       34
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      115     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -81.6857       81.6857       228.088       309.774    
   2  0.298819      -1.20792      -42.1351       42.1351       230.421       272.556    
   3  0.706385     -0.347595      -12.1250       12.1250       230.428       242.553    
   4  0.958764     -0.421100E-01  -1.46890       1.46890       236.447       237.916    
   5  0.306496      -1.18255      -41.2502       41.2502       230.302       271.552    
   6  0.905447     -0.993270E-01  -3.46476       3.46476       232.424       235.889    
   7  0.234113      -1.45195      -50.6475       50.6475       234.675       285.322    
   8  0.704141     -0.350777      -12.2359       12.2359       233.270       245.506    
   9  0.908200     -0.962902E-01  -3.35883       3.35883       231.976       235.335    
  10  0.656383     -0.421011      -14.6859       14.6859       225.404       240.090    
  11  0.967894     -0.326327E-01  -1.13831       1.13831       233.019       234.157    
  12  0.754670     -0.281475      -9.81851       9.81851       231.270       241.089    
  13  0.488960     -0.715475      -24.9575       24.9575       233.901       258.859    
  14  0.451577     -0.795009      -27.7318       27.7318       233.027       260.759    
  15  0.387599E-01  -3.25037      -113.381       113.381       228.932       342.313    
  16  0.210942E-02  -6.16134      -214.922       214.922       243.747       458.669    
  17  0.656530     -0.420787      -14.6780       14.6780       238.219       252.897    
  18  0.181246      -1.70790      -59.5756       59.5756       234.506       294.082    
  19  0.758879     -0.275913      -9.62450       9.62450       238.845       248.469    
  20  0.392052     -0.936362      -32.6625       32.6625       239.319       271.982    
  21  0.406710     -0.899654      -31.3821       31.3821       232.808       264.190    
  22  0.830107     -0.186201      -6.49512       6.49512       241.078       247.573    
  23  0.311833      -1.16529      -40.6480       40.6480       232.919       273.568    
  24  0.945407     -0.561396E-01  -1.95828       1.95828       226.781       228.739    
  25  0.303319      -1.19297      -41.6136       41.6136       230.194       271.808    
  26  0.284230      -1.25797      -43.8810       43.8810       232.549       276.430    
  27  0.292492      -1.22932      -42.8815       42.8815       233.051       275.932    
  28  0.401496     -0.912557      -31.8322       31.8322       252.609       284.441    
  29  0.379648     -0.968510      -33.7839       33.7839       235.302       269.086    
  30  0.723496E-01  -2.62625      -91.6097       91.6097       239.645       331.255    
  31  0.940338     -0.615157E-01  -2.14582       2.14582       240.923       243.069    
  32  0.766237     -0.266264      -9.28791       9.28791       243.367       252.655    
  33  0.984920     -0.151946E-01 -0.530023      0.530023       251.165       251.695    
  34  0.552546     -0.593218      -20.6929       20.6929       242.147       262.840    
  35  0.735557     -0.307128      -10.7133       10.7133       265.652       276.366    
  36  0.142195      -1.95056      -68.0400       68.0400       237.593       305.633    
  37  0.304783      -1.18816      -41.4457       41.4457       232.113       273.558    
  38  0.868582     -0.140894      -4.91471       4.91471       230.021       234.935    
  39  0.382741     -0.960397      -33.5009       33.5009       233.205       266.706    
  40  0.273812      -1.29531      -45.1836       45.1836       237.230       282.414    
  41  0.601920     -0.507631      -17.7074       17.7074       245.535       263.243    
  42  0.827744     -0.189051      -6.59457       6.59457       236.949       243.544    
  43  0.881186E-01  -2.42907      -84.7318       84.7318       231.049       315.781    
  44  0.386744     -0.949994      -33.1380       33.1380       232.927       266.065    
  45  0.852312     -0.159803      -5.57431       5.57431       229.684       235.259    
  46  0.830189     -0.186102      -6.49170       6.49170       230.667       237.158    
  47  0.216531      -1.53002      -53.3708       53.3708       244.911       298.282    
  48  0.835540     -0.179677      -6.26757       6.26757       233.939       240.207    
  49  0.962152     -0.385824E-01  -1.34585       1.34585       228.433       229.779    
  50  0.866477     -0.143320      -4.99933       4.99933       230.690       235.689    
  51  0.640111     -0.446114      -15.5615       15.5615       252.687       268.249    
  52  0.103467      -2.26850      -79.1308       79.1308       233.011       312.142    
loop,thermsimp(1:2)       34   81.6857       42.1351    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117        237.85          1.08          1.12         23.97          0.02          0.06         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118        677.06          1.04          1.11         23.98          0.06          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    237.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       34
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       35
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      117     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -36.8106       36.8106       226.781       263.592    
   2  0.175000      -1.74297      -60.7990       60.7990       228.433       289.232    
   3  0.131587      -2.02809      -70.7446       70.7446       233.019       303.764    
   4  0.301717      -1.19826      -41.7983       41.7983       230.021       271.819    
   5  0.166877      -1.79050      -62.4569       62.4569       229.684       292.141    
   6  0.481073     -0.731736      -25.5247       25.5247       231.976       257.501    
   7  0.706381     -0.347600      -12.1251       12.1251       230.690       242.815    
   8  0.702617     -0.352943      -12.3115       12.3115       232.424       244.735    
   9  0.552795     -0.592767      -20.6771       20.6771       230.667       251.344    
  10  0.495420     -0.702349      -24.4996       24.4996       236.447       260.947    
  11  0.479343     -0.735339      -25.6504       25.6504       225.404       251.055    
  12  0.462659     -0.770765      -26.8861       26.8861       233.939       260.825    
  13  0.631315E-01  -2.76253      -96.3638       96.3638       231.270       327.634    
  14  0.785681     -0.241205      -8.41380       8.41380       230.428       238.842    
  15  0.767932     -0.264055      -9.21086       9.21086       240.923       250.134    
  16  0.262689E-01  -3.63937      -126.950       126.950       236.949       363.899    
  17  0.871353     -0.137708      -4.80358       4.80358       233.270       238.073    
  18  0.618350     -0.480701      -16.7680       16.7680       241.078       257.846    
  19  0.196090      -1.62918      -56.8298       56.8298       238.845       295.674    
  20  0.925050     -0.779078E-01  -2.71761       2.71761       251.165       253.882    
  21  0.903269     -0.101735      -3.54876       3.54876       243.367       246.916    
  22  0.958828     -0.420436E-01  -1.46658       1.46658       238.219       239.685    
  23  0.969274     -0.312081E-01  -1.08861       1.08861       233.901       234.990    
  24  0.313932      -1.15858      -40.4140       40.4140       233.027       273.441    
  25  0.106324      -2.24126      -78.1806       78.1806       242.147       320.328    
  26  0.718705     -0.330304      -11.5218       11.5218       245.535       257.057    
  27  0.751116     -0.286195      -9.98315       9.98315       232.808       242.791    
  28  0.996391     -0.361592E-02 -0.126132      0.126132       232.927       233.053    
  29  0.313387      -1.16032      -40.4746       40.4746       233.205       273.680    
  30  0.305057      -1.18726      -41.4143       41.4143       252.687       294.101    
  31  0.408833     -0.894447      -31.2004       31.2004       235.302       266.503    
  32  0.589856     -0.527877      -18.4136       18.4136       230.302       248.716    
  33  0.808683     -0.212349      -7.40723       7.40723       230.194       237.601    
  34  0.481635     -0.730569      -25.4840       25.4840       239.319       264.803    
  35  0.677481     -0.389374      -13.5823       13.5823       230.421       244.004    
  36  0.673605     -0.395111      -13.7824       13.7824       232.113       245.895    
  37  0.409374E-01  -3.19571      -111.474       111.474       232.919       344.393    
  38  0.362144      -1.01571      -35.4305       35.4305       233.051       268.481    
  39  0.364718E-01  -3.31122      -115.503       115.503       265.652       381.155    
  40  0.280272      -1.27199      -44.3702       44.3702       232.549       276.919    
  41  0.532528     -0.630120      -21.9801       21.9801       237.230       259.210    
  42  0.901591     -0.103595      -3.61363       3.61363       252.609       256.223    
  43  0.262858      -1.33614      -46.6077       46.6077       234.675       281.282    
  44  0.168755      -1.77931      -62.0666       62.0666       234.506       296.572    
  45  0.504619     -0.683952      -23.8579       23.8579       244.911       268.769    
  46  0.900650     -0.104639      -3.65005       3.65005       237.593       241.243    
  47  0.438495     -0.824406      -28.7572       28.7572       228.088       256.845    
  48  0.984597     -0.155233E-01 -0.541491      0.541491       233.011       233.553    
  49  0.469739     -0.755579      -26.3564       26.3564       231.049       257.405    
  50  0.252111      -1.37789      -48.0639       48.0639       239.645       287.709    
  51  0.764692     -0.268282      -9.35833       9.35833       228.932       238.291    
  52  0.848445     -0.164351      -5.73294       5.73294       237.852       243.585    
loop,thermsimp(1:2)       35   36.8106       60.7990    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119        231.97          1.19          1.13         23.91          0.06          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120        658.41          1.02          1.11         24.05          0.01          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       35
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       36
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      119     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -89.9889       89.9889       232.927       322.916    
   2  0.962370     -0.383559E-01  -1.33794       1.33794       233.011       234.349    
   3  0.356737      -1.03076      -35.9552       35.9552       233.901       269.856    
   4  0.884319     -0.122937      -4.28834       4.28834       230.194       234.483    
   5  0.919725E-01  -2.38627      -83.2386       83.2386       233.270       316.508    
   6  0.900184     -0.105156      -3.66809       3.66809       228.932       232.600    
   7  0.390055     -0.941468      -32.8406       32.8406       230.428       263.269    
   8  0.263976      -1.33190      -46.4597       46.4597       238.219       284.679    
   9  0.898455     -0.107078      -3.73515       3.73515       237.593       241.328    
  10  0.697674E-01  -2.66259      -92.8774       92.8774       232.808       325.685    
  11  0.888938     -0.117727      -4.10661       4.10661       230.690       234.796    
  12  0.824147     -0.193406      -6.74646       6.74646       237.852       244.599    
  13  0.941109     -0.606968E-01  -2.11725       2.11725       230.421       232.539    
  14  0.885654     -0.121429      -4.23572       4.23572       232.424       236.659    
  15  0.798208     -0.225386      -7.86199       7.86199       232.113       239.975    
  16  0.365331      -1.00695      -35.1249       35.1249       243.367       278.492    
  17  0.519490     -0.654907      -22.8447       22.8447       230.302       253.147    
  18  0.922741     -0.804065E-01  -2.80477       2.80477       240.923       243.728    
  19  0.877443     -0.130744      -4.56065       4.56065       225.404       229.965    
  20  0.584844     -0.536410      -18.7113       18.7113       230.667       249.378    
  21  0.671390     -0.398406      -13.8973       13.8973       251.165       265.062    
  22  0.203335      -1.59290      -55.5641       55.5641       252.609       308.173    
  23  0.330236E-01  -3.41053      -118.968       118.968       228.088       347.056    
  24  0.879725     -0.128146      -4.47005       4.47005       245.535       250.005    
  25  0.833976     -0.181550      -6.33291       6.33291       231.049       237.382    
  26  0.901698     -0.103475      -3.60946       3.60946       231.976       235.585    
  27  0.692847     -0.366946      -12.8000       12.8000       241.078       253.878    
  28  0.550572     -0.596797      -20.8177       20.8177       237.230       258.048    
  29  0.158383E-01  -4.14532      -144.599       144.599       233.939       378.538    
  30  0.503246     -0.686677      -23.9529       23.9529       236.447       260.400    
  31  0.648812     -0.432612      -15.0905       15.0905       226.781       241.872    
  32  0.306980      -1.18097      -41.1951       41.1951       239.319       280.514    
  33  0.205188      -1.58383      -55.2478       55.2478       235.302       290.550    
  34  0.265146      -1.32748      -46.3055       46.3055       233.051       279.356    
  35  0.272730E-01  -3.60186      -125.641       125.641       244.911       370.553    
  36  0.262990E-01  -3.63823      -126.910       126.910       230.021       356.931    
  37  0.492753     -0.707748      -24.6879       24.6879       233.027       257.715    
  38  0.255065      -1.36624      -47.6575       47.6575       233.205       280.863    
  39  0.623259     -0.472794      -16.4922       16.4922       232.549       249.041    
  40  0.949296     -0.520343E-01  -1.81508       1.81508       234.675       236.490    
  41  0.982394     -0.177630E-01 -0.619615      0.619615       239.645       240.265    
  42  0.566450     -0.568366      -19.8259       19.8259       228.433       248.259    
  43  0.557613     -0.584090      -20.3745       20.3745       229.684       250.059    
  44  0.900731     -0.104549      -3.64691       3.64691       252.687       256.334    
  45  0.671339     -0.398481      -13.8999       13.8999       238.845       252.745    
  46  0.650454     -0.430084      -15.0024       15.0024       234.506       249.508    
  47  0.749315     -0.288595      -10.0669       10.0669       233.019       243.086    
  48  0.667497     -0.404220      -14.1002       14.1002       242.147       256.247    
  49  0.132870      -2.01838      -70.4061       70.4061       231.270       301.676    
  50  0.964787     -0.358480E-01  -1.25046       1.25046       232.919       234.170    
  51  0.835780     -0.179390      -6.25754       6.25754       236.949       243.207    
  52  0.601609     -0.508148      -17.7254       17.7254       231.969       249.694    
loop,thermsimp(1:2)       36   89.9889       1.33794    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121        231.09          1.06          1.11         23.92          0.11          0.05         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122        242.01          1.02          1.10         23.96          0.05          0.05         26.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    231.09        2.971     -1.316      5.119     -100.0      1.311    
                     -0.5716      2.574     -100.0      2.559      1.242    
                       1.427    -0.8431      1.841      0.000      0.000    
                      -1.195      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.268     -2.432     -5.417     -3.027    
                      -14.01     -2.547      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.6470E-01-0.3582E-01  0.000    -0.8579    
                     -0.2481    -0.2897    -0.2046    -0.2145    -0.6710E-01

                      -1.267    -0.7637      0.000    -0.4042E-01-0.2593E-01
                      0.8541E-01-0.3246E-01-0.5855E-01-0.1900    -0.1778    
                      0.1133     0.7779E-01-0.2135    -0.9035      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.078      9.074     -7039.     -4.000    
                       1.068     0.3945E-01  9.014      8.532     -4904.    

                      -4.000    -0.7974E-01-0.5618      8.783      8.979    
                      -6912.     -4.000    -0.1394    -0.6083      9.543    
                       8.787     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       36
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       37
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      121     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -2.18938       2.18938       225.404       227.594    
   2  0.112532E-01  -4.48710      -156.521       156.521       230.421       386.942    
   3  0.907929     -0.965891E-01  -3.36926       3.36926       228.932       232.301    
   4  0.478640     -0.736807      -25.7016       25.7016       232.919       258.621    
   5  0.737686     -0.304237      -10.6125       10.6125       233.011       243.624    
   6  0.114880      -2.16387      -75.4809       75.4809       230.194       305.675    
   7  0.309837      -1.17171      -40.8720       40.8720       230.690       271.562    
   8  0.469091     -0.756958      -26.4045       26.4045       231.976       258.380    
   9  0.721151     -0.326907      -11.4033       11.4033       234.675       246.078    
  10  0.557251     -0.584740      -20.3971       20.3971       232.424       252.821    
  11  0.581534     -0.542085      -18.9092       18.9092       231.049       249.958    
  12  0.501412     -0.690326      -24.0802       24.0802       232.113       256.193    
  13  0.783062     -0.244543      -8.53025       8.53025       239.645       248.175    
  14  0.571322     -0.559803      -19.5272       19.5272       237.593       257.120    
  15  0.902729E-01  -2.40492      -83.8893       83.8893       226.781       310.670    
  16  0.695403E-01  -2.66585      -92.9912       92.9912       233.019       326.010    
  17  0.128872      -2.04894      -71.4719       71.4719       236.949       308.421    
  18  0.940828E-01  -2.36358      -82.4473       82.4473       240.923       323.371    
  19  0.326350      -1.11979      -39.0608       39.0608       237.852       276.913    
  20  0.102915      -2.27385      -79.3175       79.3175       228.433       307.750    
  21  0.324524      -1.12540      -39.2565       39.2565       232.549       271.806    
  22  0.259454      -1.34918      -47.0625       47.0625       230.667       277.729    
  23  0.782812     -0.244863      -8.54140       8.54140       234.506       243.047    
  24  0.383591     -0.958178      -33.4235       33.4235       231.969       265.392    
  25  0.626880     -0.466999      -16.2900       16.2900       245.535       261.825    
  26  0.292269      -1.23008      -42.9081       42.9081       229.684       272.593    
  27  0.448852     -0.801062      -27.9430       27.9430       238.845       266.788    
  28  0.685432     -0.377706      -13.1753       13.1753       230.302       243.478    
  29  0.995399     -0.461118E-02 -0.160849      0.160849       241.078       241.239    
  30  0.163323      -1.81203      -63.2079       63.2079       242.147       305.355    
  31  0.952940     -0.482038E-01  -1.68146       1.68146       252.687       254.369    
  32  0.861306     -0.149306      -5.20814       5.20814       233.027       238.235    
  33  0.587276     -0.532261      -18.5665       18.5665       237.230       255.797    
  34  0.908704     -0.957357E-01  -3.33949       3.33949       236.447       239.786    
  35  0.585935     -0.534546      -18.6462       18.6462       230.428       249.074    
  36  0.429836     -0.844352      -29.4530       29.4530       251.165       280.618    
  37  0.726203     -0.319926      -11.1598       11.1598       233.901       245.061    
  38  0.151145E-01  -4.19210      -146.230       146.230       243.367       389.597    
  39  0.927869     -0.748646E-01  -2.61145       2.61145       233.051       235.662    
  40  0.961645     -0.391099E-01  -1.36425       1.36425       239.319       240.683    
  41  0.253977      -1.37051      -47.8066       47.8066       233.205       281.012    
  42  0.768038     -0.263917      -9.20604       9.20604       238.219       247.425    
  43  0.569441E-01  -2.86569      -99.9619       99.9619       235.302       335.264    
  44  0.103919      -2.26415      -78.9788       78.9788       231.270       310.249    
  45  0.312226      -1.16403      -40.6041       40.6041       252.609       293.213    
  46  0.473636E-02  -5.35249      -186.707       186.707       233.270       419.977    
  47  0.192099      -1.64975      -57.5470       57.5470       232.927       290.474    
  48  0.799429     -0.223858      -7.80870       7.80870       232.808       240.617    
  49  0.164379      -1.80558      -62.9830       62.9830       228.088       291.071    
  50  0.421896     -0.862996      -30.1034       30.1034       230.021       260.124    
  51  0.361660      -1.01705      -35.4771       35.4771       244.911       280.389    
  52  0.346541      -1.05975      -36.9667       36.9667       231.092       268.059    
loop,thermsimp(1:2)       37   2.18938       156.521    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123        231.17          1.23          1.14         23.89          0.02          0.05         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124        234.40          1.07          1.13         23.98          0.00          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       37
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       38
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      123     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -34.5170       34.5170       225.404       259.921    
   2  0.687927     -0.374072      -13.0485       13.0485       228.932       241.981    
   3  0.288957      -1.24148      -43.3057       43.3057       233.051       276.356    
   4  0.192838      -1.64590      -57.4130       57.4130       233.027       290.440    
   5  0.369869     -0.994607      -34.6943       34.6943       236.447       271.141    
   6  0.735973     -0.306562      -10.6936       10.6936       232.808       243.502    
   7  0.637144     -0.450760      -15.7236       15.7236       239.319       255.043    
   8  0.703934     -0.351071      -12.2462       12.2462       241.078       253.324    
   9  0.864279     -0.145859      -5.08791       5.08791       234.506       239.594    
  10  0.473452     -0.747705      -26.0817       26.0817       230.302       256.384    
  11  0.242010      -1.41877      -49.4902       49.4902       233.011       282.502    
  12  0.510769     -0.671838      -23.4353       23.4353       233.901       257.336    
  13  0.829624     -0.186782      -6.51542       6.51542       234.675       241.190    
  14  0.228911      -1.47442      -51.4314       51.4314       238.219       289.650    
  15  0.310006      -1.17116      -40.8530       40.8530       239.645       280.498    
  16  0.248341      -1.39295      -48.5895       48.5895       230.428       279.018    
  17  0.723214     -0.324050      -11.3036       11.3036       231.049       242.353    
  18  0.420900     -0.865360      -30.1858       30.1858       232.424       262.610    
  19  0.133903      -2.01064      -70.1358       70.1358       252.687       322.823    
  20  0.571916     -0.558763      -19.4910       19.4910       237.230       256.721    
  21  0.609104     -0.495766      -17.2935       17.2935       232.113       249.406    
  22  0.582057     -0.541186      -18.8779       18.8779       237.593       256.471    
  23  0.440731     -0.819321      -28.5799       28.5799       231.976       260.556    
  24  0.211006      -1.55587      -54.2724       54.2724       232.919       287.192    
  25  0.665769     -0.406813      -14.1906       14.1906       230.021       244.211    
  26  0.766062     -0.266493      -9.29589       9.29589       245.535       254.831    
  27  0.321416E-01  -3.43760      -119.912       119.912       231.969       351.881    
  28  0.165897E-01  -4.09897      -142.982       142.982       238.845       381.827    
  29  0.634553     -0.454835      -15.8657       15.8657       231.092       246.958    
  30  0.981834     -0.183335E-01 -0.639517      0.639517       230.690       231.329    
  31  0.511720     -0.669978      -23.3704       23.3704       232.549       255.920    
  32  0.426358     -0.852477      -29.7364       29.7364       229.684       259.421    
  33  0.500527     -0.692094      -24.1419       24.1419       237.852       261.994    
  34  0.100483      -2.29777      -80.1517       80.1517       230.667       310.818    
  35  0.837324     -0.177545      -6.19318       6.19318       244.911       251.105    
  36  0.257741      -1.35580      -47.2935       47.2935       251.165       298.458    
  37  0.437184     -0.827401      -28.8617       28.8617       233.205       262.067    
  38  0.707529     -0.345976      -12.0685       12.0685       232.927       244.995    
  39  0.538379     -0.619193      -21.5989       21.5989       228.088       249.687    
  40  0.611820     -0.491317      -17.1383       17.1383       252.609       269.748    
  41  0.404533     -0.905022      -31.5693       31.5693       242.147       273.716    
  42  0.902499     -0.102588      -3.57852       3.57852       230.194       233.773    
  43  0.704299     -0.350552      -12.2281       12.2281       228.433       240.661    
  44  0.511818     -0.669786      -23.3637       23.3637       236.949       260.313    
  45  0.748131     -0.290178      -10.1221       10.1221       231.270       241.392    
  46  0.296598      -1.21538      -42.3953       42.3953       226.781       269.176    
  47  0.805122     -0.216762      -7.56117       7.56117       240.923       248.484    
  48  0.525063     -0.644236      -22.4725       22.4725       233.019       255.492    
  49  0.192567      -1.64731      -57.4622       57.4622       235.302       292.764    
  50  0.991898     -0.813527E-02 -0.283778      0.283778       230.421       230.705    
  51  0.238175      -1.43475      -50.0475       50.0475       243.367       293.415    
  52  0.627675     -0.465733      -16.2459       16.2459       231.168       247.414    
loop,thermsimp(1:2)       38   34.5170       13.0485    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125        228.23          1.02          1.11         23.81          0.23          0.06         26.23
Just calling func    0   0         26.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126        227.87          0.98          1.00         23.90          0.24          0.05         26.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       38
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       39
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      125     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -11.2530       11.2530       230.421       241.674    
   2  0.309663      -1.17227      -40.8916       40.8916       230.690       271.581    
   3  0.688114     -0.373801      -13.0391       13.0391       230.194       243.233    
   4  0.677876     -0.388791      -13.5620       13.5620       234.506       248.068    
   5  0.283701      -1.25984      -43.9461       43.9461       228.433       272.379    
   6  0.183733      -1.69427      -59.1002       59.1002       234.675       293.775    
   7  0.243414      -1.41299      -49.2885       49.2885       231.270       280.559    
   8  0.785389     -0.241576      -8.42673       8.42673       228.932       237.359    
   9  0.258033      -1.35467      -47.2541       47.2541       231.049       278.303    
  10  0.137887      -1.98132      -69.1133       69.1133       232.808       301.921    
  11  0.386520     -0.950573      -33.1582       33.1582       230.021       263.179    
  12  0.882934     -0.124505      -4.34304       4.34304       232.927       237.270    
  13  0.395106     -0.928602      -32.3918       32.3918       231.092       263.484    
  14  0.107633      -2.22903      -77.7539       77.7539       231.168       308.922    
  15  0.434094     -0.834495      -29.1092       29.1092       240.923       270.032    
  16  0.558484     -0.582529      -20.3200       20.3200       232.113       252.433    
  17  0.102706      -2.27589      -79.3883       79.3883       228.088       307.476    
  18  0.325804      -1.12146      -39.1191       39.1191       244.911       284.031    
  19  0.693871     -0.365469      -12.7484       12.7484       241.078       253.827    
  20  0.832622     -0.183176      -6.38961       6.38961       245.535       251.925    
  21  0.691207     -0.369316      -12.8826       12.8826       239.319       252.202    
  22  0.903946     -0.100985      -3.52260       3.52260       233.019       236.542    
  23  0.258785E-01  -3.65434      -127.472       127.472       232.549       360.021    
  24  0.247338      -1.39700      -48.7307       48.7307       230.302       279.033    
  25  0.861464     -0.149122      -5.20174       5.20174       237.593       242.795    
  26  0.954919     -0.461290E-01  -1.60909       1.60909       237.230       238.839    
  27  0.579638     -0.545352      -19.0232       19.0232       233.901       252.924    
  28  0.537182     -0.621418      -21.6765       21.6765       229.684       251.361    
  29  0.407710     -0.897199      -31.2964       31.2964       225.404       256.701    
  30  0.958466     -0.424211E-01  -1.47975       1.47975       236.949       238.429    
  31  0.884674     -0.122536      -4.27435       4.27435       231.976       236.250    
  32  0.395055     -0.928731      -32.3964       32.3964       237.852       270.248    
  33  0.325425      -1.12262      -39.1597       39.1597       233.205       272.365    
  34  0.679842     -0.385895      -13.4609       13.4609       232.424       245.885    
  35  0.765292     -0.267498      -9.33096       9.33096       226.781       236.112    
  36  0.217460      -1.52574      -53.2215       53.2215       252.609       305.831    
  37  0.181189      -1.70822      -59.5866       59.5866       236.447       296.034    
  38  0.518456     -0.656899      -22.9142       22.9142       242.147       265.061    
  39  0.249864E-01  -3.68942      -128.696       128.696       233.051       361.746    
  40  0.336654      -1.08870      -37.9765       37.9765       230.428       268.405    
  41  0.873801     -0.134903      -4.70573       4.70573       239.645       244.351    
  42  0.478904     -0.736255      -25.6823       25.6823       233.011       258.694    
  43  0.819950     -0.198512      -6.92458       6.92458       232.919       239.844    
  44  0.966813     -0.337500E-01  -1.17728       1.17728       238.219       239.396    
  45  0.514109     -0.665319      -23.2079       23.2079       233.027       256.235    
  46  0.483734     -0.726221      -25.3323       25.3323       235.302       260.635    
  47  0.227743E-01  -3.78212      -131.929       131.929       243.367       375.297    
  48  0.409495     -0.892830      -31.1440       31.1440       251.165       282.309    
  49  0.198361      -1.61767      -56.4281       56.4281       230.667       287.095    
  50  0.925767     -0.771331E-01  -2.69059       2.69059       252.687       255.378    
  51  0.842113     -0.171842      -5.99424       5.99424       231.969       237.963    
  52  0.347114E-01  -3.36069      -117.229       117.229       227.866       345.095    
loop,thermsimp(1:2)       39   11.2530       40.8916    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127        233.47          0.97          0.99         23.88          0.41          0.05         26.30
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128        803.86          1.04          1.00         23.84          0.30          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       39
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       40
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      127     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -1.61958       1.61958       226.781       228.401    
   2  0.450411     -0.797594      -27.8220       27.8220       231.976       259.798    
   3  0.691912E-01  -2.67088      -93.1667       93.1667       233.019       326.186    
   4  0.740935     -0.299842      -10.4592       10.4592       232.927       243.386    
   5  0.452531     -0.792898      -27.6582       27.6582       228.932       256.590    
   6  0.461330     -0.773642      -26.9865       26.9865       231.969       258.955    
   7  0.102999      -2.27303      -79.2888       79.2888       236.949       316.238    
   8  0.475106     -0.744217      -25.9601       25.9601       237.230       263.190    
   9  0.240275      -1.42597      -49.7412       49.7412       238.219       287.960    
  10  0.276707E-01  -3.58738      -125.136       125.136       232.919       358.056    
  11  0.132701E-01  -4.32224      -150.770       150.770       230.421       381.191    
  12  0.997219     -0.278509E-02 -0.971504E-01  0.971504E-01   237.593       237.690    
  13  0.563305     -0.573934      -20.0202       20.0202       230.194       250.214    
  14  0.347949      -1.05570      -36.8253       36.8253       239.645       276.470    
  15  0.546018     -0.605103      -21.1074       21.1074       232.424       253.531    
  16  0.343968      -1.06721      -37.2267       37.2267       234.506       271.733    
  17  0.945234     -0.563230E-01  -1.96468       1.96468       229.684       231.649    
  18  0.346208      -1.06072      -37.0003       37.0003       245.535       282.536    
  19  0.406433     -0.900337      -31.4059       31.4059       239.319       270.725    
  20  0.632259     -0.458455      -15.9920       15.9920       232.113       248.105    
  21  0.983930     -0.162002E-01 -0.565101      0.565101       233.901       234.466    
  22  0.200798      -1.60546      -56.0022       56.0022       241.078       297.080    
  23  0.223962      -1.49628      -52.1937       52.1937       252.687       304.881    
  24  0.594322     -0.520335      -18.1505       18.1505       233.027       251.177    
  25  0.875298     -0.133191      -4.64602       4.64602       225.404       230.050    
  26  0.327822      -1.11529      -38.9038       38.9038       233.011       271.915    
  27  0.215105      -1.53663      -53.6012       53.6012       235.302       288.904    
  28  0.905181     -0.996198E-01  -3.47498       3.47498       230.021       233.496    
  29  0.699086     -0.357981      -12.4872       12.4872       231.092       243.580    
  30  0.747401     -0.291154      -10.1561       10.1561       242.147       252.303    
  31  0.699189     -0.357834      -12.4821       12.4821       230.428       242.910    
  32  0.563488     -0.573610      -20.0089       20.0089       240.923       260.932    
  33  0.155576      -1.86062      -64.9030       64.9030       237.852       302.755    
  34  0.380593     -0.966025      -33.6972       33.6972       230.690       264.387    
  35  0.626112     -0.468226      -16.3328       16.3328       233.205       249.538    
  36  0.372369     -0.987870      -34.4592       34.4592       228.433       262.892    
  37  0.517531     -0.658686      -22.9765       22.9765       231.049       254.026    
  38  0.673247     -0.395643      -13.8010       13.8010       230.302       244.103    
  39  0.741527     -0.299044      -10.4314       10.4314       231.270       241.702    
  40  0.280982      -1.26947      -44.2820       44.2820       251.165       295.447    
  41  0.331745      -1.10339      -38.4888       38.4888       244.911       283.400    
  42  0.712030     -0.339635      -11.8473       11.8473       230.667       242.514    
  43  0.200581      -1.60654      -56.0398       56.0398       234.675       290.714    
  44  0.989915     -0.101357E-01 -0.353557      0.353557       236.447       236.801    
  45  0.808031     -0.213155      -7.43536       7.43536       232.808       240.243    
  46  0.893446     -0.112670      -3.93019       3.93019       252.609       256.539    
  47  0.364885      -1.00817      -35.1674       35.1674       228.088       263.256    
  48  0.923731     -0.793347E-01  -2.76738       2.76738       231.168       233.935    
  49  0.504880     -0.683434      -23.8398       23.8398       227.866       251.706    
  50  0.724988     -0.321600      -11.2182       11.2182       232.549       243.767    
  51  0.927322     -0.754540E-01  -2.63201       2.63201       233.051       235.683    
  52  0.857721     -0.153476      -5.35362       5.35362       233.474       238.828    
loop,thermsimp(1:2)       40   1.61958       27.8220    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129        237.48          1.03          1.00         23.94          0.27          0.05         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130        281.24          1.04          1.00         24.00          0.22          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    237.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       40
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       41
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      129     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -35.8354       35.8354       226.781       262.616    
   2  0.414955     -0.879585      -30.6820       30.6820       225.404       256.086    
   3  0.407443     -0.897854      -31.3193       31.3193       229.684       261.004    
   4  0.883897     -0.123414      -4.30499       4.30499       230.021       234.326    
   5  0.520045     -0.653840      -22.8075       22.8075       231.168       253.975    
   6  0.634521     -0.454885      -15.8675       15.8675       233.901       249.769    
   7  0.344406      -1.06594      -37.1824       37.1824       233.051       270.233    
   8  0.545595     -0.605879      -21.1345       21.1345       236.447       257.581    
   9  0.766876     -0.265430      -9.25881       9.25881       237.593       246.852    
  10  0.639043     -0.447783      -15.6197       15.6197       233.474       249.094    
  11  0.850701     -0.161694      -5.64029       5.64029       232.808       238.448    
  12  0.832060     -0.183851      -6.41316       6.41316       231.270       237.683    
  13  0.728209     -0.317167      -11.0635       11.0635       230.667       241.730    
  14  0.531327     -0.632378      -22.0588       22.0588       230.428       252.487    
  15  0.188974E-01  -3.96873      -138.439       138.439       232.927       371.365    
  16  0.246817      -1.39911      -48.8042       48.8042       231.092       279.896    
  17  0.935336     -0.668496E-01  -2.33187       2.33187       232.549       234.881    
  18  0.730823     -0.313585      -10.9386       10.9386       230.302       241.241    
  19  0.482288     -0.729213      -25.4367       25.4367       232.113       257.549    
  20  0.782974E-04  -9.45500      -329.813       329.813       233.205       563.018    
  21  0.258744      -1.35192      -47.1581       47.1581       230.194       277.352    
  22  0.389044     -0.944063      -32.9311       32.9311       233.027       265.958    
  23  0.611459E-01  -2.79449      -97.4786       97.4786       227.866       325.344    
  24  0.124922      -2.08006      -72.5576       72.5576       242.147       314.705    
  25  0.253683      -1.37167      -47.8471       47.8471       232.424       280.271    
  26  0.781437     -0.246621      -8.60272       8.60272       231.049       239.652    
  27  0.835634     -0.179565      -6.26365       6.26365       252.609       258.873    
  28  0.542030     -0.612434      -21.3632       21.3632       228.932       250.295    
  29  0.463443     -0.769071      -26.8270       26.8270       231.969       258.796    
  30  0.120587      -2.11538      -73.7896       73.7896       231.976       305.765    
  31  0.733316     -0.310178      -10.8198       10.8198       240.923       251.743    
  32  0.955530     -0.454889E-01  -1.58676       1.58676       228.433       230.019    
  33  0.419735     -0.868132      -30.2825       30.2825       237.230       267.513    
  34  0.284829      -1.25587      -43.8076       43.8076       228.088       271.896    
  35  0.924079     -0.789582E-01  -2.75425       2.75425       230.690       233.444    
  36  0.432674     -0.837770      -29.2234       29.2234       239.319       268.542    
  37  0.155293      -1.86244      -64.9663       64.9663       234.506       299.472    
  38  0.634342     -0.455168      -15.8773       15.8773       233.011       248.889    
  39  0.935635     -0.665293E-01  -2.32070       2.32070       239.645       241.966    
  40  0.931832     -0.706024E-01  -2.46278       2.46278       245.535       247.998    
  41  0.875970     -0.132424      -4.61926       4.61926       244.911       249.531    
  42  0.273544      -1.29629      -45.2177       45.2177       238.219       283.437    
  43  0.799596     -0.223649      -7.80142       7.80142       235.302       243.104    
  44  0.772883     -0.257628      -8.98667       8.98667       234.675       243.661    
  45  0.274276      -1.29362      -45.1246       45.1246       251.165       296.289    
  46  0.116034      -2.15387      -75.1322       75.1322       241.078       316.211    
  47  0.700214     -0.356369      -12.4310       12.4310       237.852       250.283    
  48  0.704184E-01  -2.65330      -92.5535       92.5535       252.687       345.241    
  49  0.699980E-01  -2.65929      -92.7623       92.7623       236.949       329.712    
  50  0.186964      -1.67684      -58.4921       58.4921       233.019       291.511    
  51  0.342641      -1.07107      -37.3615       37.3615       232.919       270.281    
  52  0.989806     -0.102462E-01 -0.357411      0.357411       237.477       237.835    
loop,thermsimp(1:2)       41   35.8354       30.6820    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131        229.40          0.96          0.99         23.80          0.47          0.05         26.27
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    132        232.13          0.98          0.98         23.97          0.25          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       41
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       42
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      131     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -100.582       100.582       228.433       329.014    
   2  0.688513     -0.373221      -13.0188       13.0188       230.690       243.709    
   3  0.530653     -0.633647      -22.1031       22.1031       230.021       252.124    
   4  0.542886     -0.610856      -21.3081       21.3081       232.549       253.857    
   5  0.603382     -0.505205      -17.6227       17.6227       231.270       248.893    
   6  0.478412     -0.737283      -25.7182       25.7182       237.477       263.195    
   7  0.809657     -0.211144      -7.36522       7.36522       232.808       240.173    
   8  0.764585     -0.268422      -9.36319       9.36319       231.049       240.412    
   9  0.228600      -1.47578      -51.4787       51.4787       230.302       281.781    
  10  0.495526     -0.702136      -24.4922       24.4922       230.667       255.159    
  11  0.368264     -0.998954      -34.8459       34.8459       239.645       274.491    
  12  0.407647     -0.897355      -31.3019       31.3019       235.302       266.604    
  13  0.316165      -1.15149      -40.1667       40.1667       234.675       274.841    
  14  0.458518     -0.779756      -27.1998       27.1998       237.593       264.793    
  15  0.643610     -0.440663      -15.3714       15.3714       245.535       260.907    
  16  0.316553E-01  -3.45285      -120.444       120.444       233.011       353.455    
  17  0.570171     -0.561819      -19.5976       19.5976       233.474       253.072    
  18  0.448642E-01  -3.10412      -108.279       108.279       244.911       353.190    
  19  0.128957      -2.04828      -71.4488       71.4488       233.901       305.350    
  20  0.159422      -1.83620      -64.0511       64.0511       237.852       301.903    
  21  0.154083      -1.87026      -65.2392       65.2392       228.932       294.171    
  22  0.696997     -0.360974      -12.5916       12.5916       240.923       253.515    
  23  0.579421     -0.545727      -19.0362       19.0362       230.428       249.464    
  24  0.528206     -0.638269      -22.2644       22.2644       231.168       253.432    
  25  0.322914      -1.13037      -39.4299       39.4299       225.404       264.834    
  26  0.369562     -0.995437      -34.7232       34.7232       232.113       266.836    
  27  0.134248      -2.00806      -70.0461       70.0461       236.447       306.493    
  28  0.950150     -0.511358E-01  -1.78374       1.78374       231.969       233.753    
  29  0.138040      -1.98021      -69.0745       69.0745       252.609       321.684    
  30  0.316838      -1.14936      -40.0925       40.0925       229.684       269.777    
  31  0.151783      -1.88530      -65.7639       65.7639       226.781       292.545    
  32  0.338674      -1.08272      -37.7678       37.7678       233.027       270.795    
  33  0.814165     -0.205592      -7.17155       7.17155       237.230       244.402    
  34  0.578183     -0.547865      -19.1108       19.1108       239.319       258.430    
  35  0.208707      -1.56682      -54.6545       54.6545       233.051       287.705    
  36  0.540561     -0.615147      -21.4578       21.4578       232.919       254.377    
  37  0.910129     -0.941686E-01  -3.28483       3.28483       228.088       231.373    
  38  0.907740     -0.967972E-01  -3.37652       3.37652       230.194       233.571    
  39  0.549661     -0.598453      -20.8755       20.8755       231.092       251.968    
  40  0.193889      -1.64047      -57.2235       57.2235       232.424       289.647    
  41  0.807651     -0.213625      -7.45176       7.45176       238.219       245.671    
  42  0.613777     -0.488124      -17.0269       17.0269       233.019       250.046    
  43  0.664452     -0.408793      -14.2597       14.2597       251.165       265.425    
  44  0.584630     -0.536776      -18.7240       18.7240       234.506       253.230    
  45  0.618915     -0.479787      -16.7361       16.7361       231.976       248.712    
  46  0.542097     -0.612311      -21.3589       21.3589       242.147       263.506    
  47  0.133641      -2.01260      -70.2043       70.2043       241.078       311.283    
  48  0.479627     -0.734747      -25.6297       25.6297       227.866       253.496    
  49  0.225939      -1.48749      -51.8872       51.8872       236.949       288.836    
  50  0.324869      -1.12433      -39.2194       39.2194       252.687       291.906    
  51  0.669051     -0.401895      -14.0191       14.0191       232.927       246.946    
  52  0.602039     -0.507434      -17.7005       17.7005       229.399       247.100    
loop,thermsimp(1:2)       42   100.582       13.0188    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133        233.63          1.00          0.99         23.86          0.37          0.06         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    134        239.43          0.99          0.99         23.80          0.39          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       42
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       43
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      133     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -8.28438       8.28438       228.088       236.372    
   2  0.796559     -0.227454      -7.93414       7.93414       230.194       238.128    
   3  0.784232     -0.243051      -8.47819       8.47819       231.969       240.447    
   4  0.503549     -0.686074      -23.9319       23.9319       232.808       256.740    
   5  0.468337     -0.758566      -26.4606       26.4606       231.049       257.510    
   6  0.198518      -1.61688      -56.4005       56.4005       230.690       287.090    
   7  0.857529     -0.153700      -5.36142       5.36142       237.230       242.592    
   8  0.845427     -0.167913      -5.85720       5.85720       238.219       244.076    
   9  0.710919     -0.341197      -11.9018       11.9018       232.927       244.828    
  10  0.934107     -0.681640E-01  -2.37772       2.37772       229.399       231.777    
  11  0.565087     -0.570775      -19.9100       19.9100       231.976       251.886    
  12  0.147377      -1.91476      -66.7914       66.7914       231.270       298.062    
  13  0.471965     -0.750851      -26.1915       26.1915       230.428       256.620    
  14  0.287319      -1.24716      -43.5039       43.5039       233.019       276.523    
  15  0.526906     -0.640733      -22.3503       22.3503       231.092       253.443    
  16  0.176999      -1.73161      -60.4027       60.4027       230.021       290.423    
  17  0.868579     -0.140897      -4.91481       4.91481       233.474       238.389    
  18  0.621282     -0.475971      -16.6030       16.6030       234.506       251.109    
  19  0.181881      -1.70440      -59.4537       59.4537       231.168       290.621    
  20  0.565209     -0.570560      -19.9025       19.9025       227.866       247.768    
  21  0.927617     -0.751364E-01  -2.62094       2.62094       240.923       243.544    
  22  0.296120      -1.21699      -42.4515       42.4515       232.549       275.001    
  23  0.152389      -1.88132      -65.6248       65.6248       232.919       298.544    
  24  0.508731     -0.675835      -23.5747       23.5747       230.667       254.241    
  25  0.389654     -0.942496      -32.8765       32.8765       239.319       272.196    
  26  0.770754     -0.260386      -9.08289       9.08289       245.535       254.618    
  27  0.144347      -1.93554      -67.5161       67.5161       237.477       304.993    
  28  0.690124     -0.370884      -12.9373       12.9373       242.147       255.085    
  29  0.882429     -0.125077      -4.36299       4.36299       237.593       241.956    
  30  0.781105     -0.247045      -8.61753       8.61753       225.404       234.022    
  31  0.331946      -1.10278      -38.4676       38.4676       251.165       289.633    
  32  0.157011      -1.85144      -64.5825       64.5825       235.302       299.885    
  33  0.734200     -0.308973      -10.7777       10.7777       232.113       242.890    
  34  0.563390     -0.573784      -20.0149       20.0149       229.684       249.699    
  35  0.349498      -1.05126      -36.6703       36.6703       233.027       269.697    
  36  0.256822      -1.35937      -47.4181       47.4181       239.645       287.063    
  37  0.563556     -0.573488      -20.0046       20.0046       234.675       254.679    
  38  0.945419E-01  -2.35871      -82.2775       82.2775       230.302       312.580    
  39  0.571450     -0.559577      -19.5194       19.5194       233.051       252.570    
  40  0.583029E-01  -2.84210      -99.1393       99.1393       236.949       336.089    
  41  0.428808     -0.846746      -29.5365       29.5365       232.424       261.960    
  42  0.628450     -0.464499      -16.2028       16.2028       252.687       268.890    
  43  0.152789      -1.87869      -65.5333       65.5333       226.781       292.314    
  44  0.787004E-01  -2.54211      -88.6747       88.6747       228.932       317.607    
  45  0.170927E-01  -4.06911      -141.940       141.940       237.852       379.792    
  46  0.531078     -0.632847      -22.0752       22.0752       233.901       255.976    
  47  0.206082E-01  -3.88206      -135.416       135.416       236.447       371.863    
  48  0.909565     -0.947891E-01  -3.30647       3.30647       241.078       244.385    
  49  0.456291     -0.784625      -27.3696       27.3696       252.609       279.979    
  50  0.997425E-02  -4.60775      -160.729       160.729       228.433       389.162    
  51  0.251070      -1.38202      -48.2082       48.2082       244.911       293.120    
  52  0.548517     -0.600536      -20.9481       20.9481       233.629       254.577    
loop,thermsimp(1:2)       43   8.28438       7.93414    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    135        238.99          1.21          1.01         24.02          0.21          0.05         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    136        324.98          0.98          1.00         23.96          0.27          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    238.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       43
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       44
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      135     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -78.6221       78.6221       229.399       308.021    
   2  0.780131E-01  -2.55088      -88.9807       88.9807       225.404       314.385    
   3  0.723689     -0.323394      -11.2808       11.2808       228.088       239.369    
   4  0.439896     -0.821218      -28.6460       28.6460       230.194       258.840    
   5  0.967364     -0.331803E-01  -1.15741       1.15741       233.474       234.631    
   6  0.235884      -1.44441      -50.3846       50.3846       231.969       282.354    
   7  0.311956      -1.16489      -40.6343       40.6343       237.593       278.227    
   8  0.600573     -0.509870      -17.7855       17.7855       237.230       255.016    
   9  0.781739     -0.246234      -8.58923       8.58923       232.113       240.702    
  10  0.505036     -0.683126      -23.8290       23.8290       240.923       264.752    
  11  0.896130     -0.109670      -3.82556       3.82556       238.219       242.044    
  12  0.545040     -0.606897      -21.1700       21.1700       241.078       262.248    
  13  0.338019      -1.08465      -37.8353       37.8353       232.927       270.762    
  14  0.200467      -1.60711      -56.0597       56.0597       227.866       283.926    
  15  0.548763     -0.600089      -20.9325       20.9325       229.684       250.617    
  16  0.897241     -0.108431      -3.78233       3.78233       234.506       238.288    
  17  0.229905      -1.47009      -51.2802       51.2802       231.976       283.256    
  18  0.387828     -0.947193      -33.0403       33.0403       233.051       266.091    
  19  0.789400     -0.236482      -8.24906       8.24906       231.092       239.341    
  20  0.495667     -0.701851      -24.4822       24.4822       230.667       255.149    
  21  0.818926     -0.199761      -6.96815       6.96815       233.629       240.597    
  22  0.181319      -1.70750      -59.5615       59.5615       245.535       305.097    
  23  0.901986     -0.103156      -3.59834       3.59834       234.675       238.273    
  24  0.933790E-01  -2.37109      -82.7092       82.7092       242.147       324.856    
  25  0.171523      -1.76304      -61.4989       61.4989       233.901       295.400    
  26  0.648450     -0.433170      -15.1100       15.1100       230.428       245.538    
  27  0.777448     -0.251739      -8.78124       8.78124       232.808       241.589    
  28  0.777670     -0.251453      -8.77127       8.77127       231.049       239.820    
  29  0.972420     -0.279672E-01 -0.975564      0.975564       232.424       233.399    
  30  0.825305     -0.192002      -6.69747       6.69747       252.687       259.385    
  31  0.470649     -0.753642      -26.2888       26.2888       233.027       259.316    
  32  0.263953      -1.33198      -46.4627       46.4627       239.319       285.782    
  33  0.857551     -0.153675      -5.36056       5.36056       232.549       237.910    
  34  0.950157     -0.511279E-01  -1.78346       1.78346       233.019       234.803    
  35  0.866482     -0.143314      -4.99913       4.99913       252.609       257.608    
  36  0.904889     -0.999433E-01  -3.48626       3.48626       239.645       243.131    
  37  0.297565      -1.21212      -42.2817       42.2817       230.690       272.971    
  38  0.902696     -0.102369      -3.57088       3.57088       251.165       254.736    
  39  0.800054     -0.223076      -7.78143       7.78143       230.021       237.802    
  40  0.534162     -0.627057      -21.8732       21.8732       231.168       253.041    
  41  0.593018     -0.522530      -18.2271       18.2271       226.781       245.008    
  42  0.682417E-01  -2.68470      -93.6487       93.6487       244.911       338.560    
  43  0.336048      -1.09050      -38.0393       38.0393       231.270       269.309    
  44  0.576540     -0.550710      -19.2101       19.2101       232.919       252.130    
  45  0.217955      -1.52347      -53.1421       53.1421       235.302       288.444    
  46  0.281607      -1.26724      -44.2044       44.2044       237.477       281.682    
  47  0.306631      -1.18211      -41.2348       41.2348       230.302       271.537    
  48  0.676335E-01  -2.69365      -93.9610       93.9610       228.932       322.893    
  49  0.145631      -1.92668      -67.2071       67.2071       236.949       304.156    
  50  0.820952     -0.197291      -6.88197       6.88197       236.447       243.329    
  51  0.224137      -1.49550      -52.1665       52.1665       237.852       290.019    
  52  0.738282     -0.303430      -10.5844       10.5844       238.991       249.576    
loop,thermsimp(1:2)       44   78.6221       88.9807    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137        236.18          0.98          0.99         23.76          0.58          0.06         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138        312.92          1.01          0.99         23.94          0.28          0.05         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    236.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       44
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       45
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      137     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -4.75312       4.75312       232.424       237.177    
   2  0.990306     -0.974175E-02 -0.339816      0.339816       233.474       233.814    
   3  0.488656     -0.716096      -24.9791       24.9791       233.019       257.998    
   4  0.865115E-01  -2.44748      -85.3739       85.3739       230.021       315.395    
   5  0.234262      -1.45132      -50.6254       50.6254       232.549       283.175    
   6  0.906541     -0.981186E-01  -3.42261       3.42261       234.675       238.097    
   7  0.680454     -0.384995      -13.4295       13.4295       234.506       247.935    
   8  0.575574     -0.552388      -19.2686       19.2686       231.092       250.361    
   9  0.537443E-02  -5.22610      -182.299       182.299       228.088       410.387    
  10  0.421676     -0.863518      -30.1216       30.1216       231.049       261.171    
  11  0.297588      -1.21204      -42.2790       42.2790       233.629       275.908    
  12  0.119337      -2.12581      -74.1532       74.1532       232.113       306.266    
  13  0.958276     -0.426192E-01  -1.48666       1.48666       232.808       234.295    
  14  0.115549      -2.15806      -75.2782       75.2782       238.219       313.497    
  15  0.104220      -2.26125      -78.8779       78.8779       239.645       318.523    
  16  0.719503     -0.329194      -11.4831       11.4831       236.447       247.930    
  17  0.875656     -0.132782      -4.63174       4.63174       226.781       231.413    
  18  0.578760     -0.546868      -19.0760       19.0760       230.428       249.504    
  19  0.923704     -0.793639E-01  -2.76840       2.76840       238.991       241.760    
  20  0.457980     -0.780930      -27.2407       27.2407       229.684       256.925    
  21  0.783173     -0.244401      -8.52530       8.52530       232.919       241.445    
  22  0.764479     -0.268561      -9.36804       9.36804       231.168       240.536    
  23  0.496891     -0.699384      -24.3962       24.3962       251.165       275.561    
  24  0.554859     -0.589041      -20.5472       20.5472       237.230       257.778    
  25  0.734503E-02  -4.91373      -171.403       171.403       230.667       402.069    
  26  0.117643      -2.14010      -74.6519       74.6519       252.609       327.261    
  27  0.145440      -1.92799      -67.2529       67.2529       230.194       297.447    
  28  0.375449     -0.979633      -34.1719       34.1719       233.027       267.199    
  29  0.954324E-01  -2.34934      -81.9504       81.9504       252.687       334.638    
  30  0.449085     -0.800543      -27.9248       27.9248       241.078       269.003    
  31  0.354483      -1.03709      -36.1763       36.1763       240.923       277.100    
  32  0.153971      -1.87099      -65.2646       65.2646       233.051       298.315    
  33  0.871598     -0.137427      -4.79377       4.79377       231.270       236.064    
  34  0.633061     -0.457188      -15.9478       15.9478       232.927       248.874    
  35  0.947022E-01  -2.35702      -82.2184       82.2184       230.302       312.521    
  36  0.793812     -0.230909      -8.05466       8.05466       230.690       238.744    
  37  0.760585     -0.273667      -9.54616       9.54616       237.593       247.139    
  38  0.124312      -2.08496      -72.7285       72.7285       237.477       310.206    
  39  0.961605E-03  -6.94691      -242.325       242.325       231.969       474.294    
  40  0.672529     -0.396710      -13.8382       13.8382       231.976       245.814    
  41  0.749847E-01  -2.59047      -90.3618       90.3618       227.866       318.228    
  42  0.982441     -0.177147E-01 -0.617932      0.617932       239.319       239.937    
  43  0.340727      -1.07667      -37.5569       37.5569       235.302       272.859    
  44  0.915043     -0.887846E-01  -3.09702       3.09702       237.852       240.949    
  45  0.150614      -1.89303      -66.0335       66.0335       233.901       299.935    
  46  0.892785     -0.113409      -3.95598       3.95598       236.949       240.905    
  47  0.844073     -0.169516      -5.91311       5.91311       245.535       251.448    
  48  0.469949     -0.755131      -26.3408       26.3408       229.399       255.740    
  49  0.389072     -0.943991      -32.9287       32.9287       225.404       258.333    
  50  0.738049     -0.303745      -10.5953       10.5953       228.932       239.528    
  51  0.250173      -1.38560      -48.3332       48.3332       242.147       290.480    
  52  0.383245     -0.959081      -33.4550       33.4550       236.183       269.638    
loop,thermsimp(1:2)       45   4.75312      0.339816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139        264.62          1.04          1.00         24.00          0.29          0.05         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    140        607.37          1.00          0.99         23.94          0.27          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    264.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       45
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       46
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      139     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -84.7566       84.7566       226.781       311.538    
   2  0.312747      -1.16236      -40.5459       40.5459       233.474       274.020    
   3  0.317683      -1.14670      -39.9996       39.9996       232.808       272.808    
   4  0.693053     -0.366649      -12.7896       12.7896       231.270       244.060    
   5  0.361881      -1.01644      -35.4558       35.4558       232.424       267.880    
   6  0.127478      -2.05981      -71.8511       71.8511       234.675       306.526    
   7  0.718706     -0.330302      -11.5217       11.5217       230.690       242.212    
   8  0.609419E-01  -2.79783      -97.5951       97.5951       228.932       326.527    
   9  0.320798      -1.13695      -39.6593       39.6593       239.319       278.978    
  10  0.343503      -1.06856      -37.2739       37.2739       231.168       268.442    
  11  0.671828     -0.397753      -13.8746       13.8746       236.949       250.824    
  12  0.616702     -0.483369      -16.8611       16.8611       237.852       254.713    
  13  0.806358E-01  -2.51781      -87.8273       87.8273       232.919       320.747    
  14  0.997284     -0.271972E-02 -0.948705E-01  0.948705E-01   238.991       239.086    
  15  0.554344     -0.589969      -20.5795       20.5795       231.976       252.555    
  16  0.411057     -0.889023      -31.0112       31.0112       237.593       268.604    
  17  0.846258E-01  -2.46952      -86.1426       86.1426       236.447       322.590    
  18  0.737439     -0.304571      -10.6242       10.6242       234.506       245.130    
  19  0.393790     -0.931939      -32.5082       32.5082       232.927       265.435    
  20  0.965947     -0.346467E-01  -1.20856       1.20856       230.428       231.637    
  21  0.150166      -1.89601      -66.1374       66.1374       231.092       297.230    
  22  0.212005      -1.55114      -54.1076       54.1076       245.535       299.643    
  23  0.615060     -0.486036      -16.9541       16.9541       229.399       246.353    
  24  0.382142     -0.961962      -33.5555       33.5555       229.684       263.240    
  25  0.249044      -1.39013      -48.4909       48.4909       237.230       285.721    
  26  0.245943      -1.40266      -48.9280       48.9280       233.019       281.947    
  27  0.108882      -2.21749      -77.3515       77.3515       225.404       302.756    
  28  0.199835      -1.61026      -56.1698       56.1698       231.049       287.219    
  29  0.863954     -0.146235      -5.10104       5.10104       233.027       238.128    
  30  0.392842     -0.934347      -32.5922       32.5922       241.078       273.671    
  31  0.770596     -0.260592      -9.09005       9.09005       236.183       245.273    
  32  0.149868      -1.89800      -66.2068       66.2068       235.302       301.509    
  33  0.234154      -1.45178      -50.6414       50.6414       251.165       301.806    
  34  0.611512     -0.491821      -17.1559       17.1559       233.629       250.785    
  35  0.518093E-01  -2.96019      -103.258       103.258       240.923       344.182    
  36  0.567953     -0.565716      -19.7335       19.7335       232.549       252.283    
  37  0.190847      -1.65628      -57.7751       57.7751       242.147       299.922    
  38  0.104561      -2.25798      -78.7638       78.7638       230.194       308.958    
  39  0.135276      -2.00044      -69.7800       69.7800       233.051       302.831    
  40  0.262364      -1.33802      -46.6734       46.6734       233.901       280.575    
  41  0.463951     -0.767976      -26.7888       26.7888       232.113       258.901    
  42  0.419672     -0.868282      -30.2877       30.2877       237.477       267.765    
  43  0.897011     -0.108687      -3.79125       3.79125       230.302       234.093    
  44  0.818933     -0.199754      -6.96788       6.96788       238.219       245.187    
  45  0.136906      -1.98846      -69.3624       69.3624       230.021       299.383    
  46  0.561722     -0.576748      -20.1183       20.1183       227.866       247.984    
  47  0.991681     -0.835368E-02 -0.291396      0.291396       239.645       239.936    
  48  0.653388     -0.425585      -14.8454       14.8454       252.609       267.455    
  49  0.578557     -0.547219      -19.0883       19.0883       252.687       271.775    
  50  0.784121     -0.243191      -8.48310       8.48310       230.667       239.150    
  51  0.827307     -0.189579      -6.61297       6.61297       228.088       234.701    
  52  0.994261     -0.575522E-02 -0.200756      0.200756       264.623       264.823    
loop,thermsimp(1:2)       46   84.7566       40.5459    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141        228.83          0.97          0.99         24.03          0.38          0.06         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    142        230.10          1.05          1.02         24.04          0.25          0.06         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    228.83        2.903     -1.383      5.054     -100.0      1.363    
                     -0.5559      2.549     -100.0      2.492      1.175    
                       1.359    -0.9108      1.841      0.000      0.000    
                      -1.558      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.065     -2.627     -5.214     -2.824    
                      -13.74     -2.479      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.9855E-01-0.1361E-01  0.000    -0.8241    
                     -0.2281    -0.2559    -0.1890    -0.1853    -0.3325E-01

                      -1.107    -0.6414      0.000    -0.5693E-01-0.3363E-01
                      0.8541E-01 0.1386E-02-0.9034E-01-0.1562    -0.1439    
                      0.1677     0.9680E-01-0.1723     -1.045      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.112      9.137     -7039.     -4.000    
                     -0.2820     0.1410      9.048      8.566     -4904.    

                      -4.000     -1.537    -0.6520      8.817      9.047    
                      -6912.     -4.000    -0.3786E-01-0.6935      9.577    
                       8.821     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       46
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       47
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      141     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -110.656       110.656       230.428       341.085    
   2  0.581082     -0.542864      -18.9364       18.9364       230.302       249.239    
   3  0.690143     -0.370857      -12.9364       12.9364       228.088       241.024    
   4  0.958690     -0.421877E-01  -1.47161       1.47161       233.027       234.498    
   5  0.947492     -0.539367E-01  -1.88144       1.88144       238.991       240.873    
   6  0.253816E-01  -3.67373      -128.148       128.148       230.667       358.815    
   7  0.811950     -0.208316      -7.26656       7.26656       239.645       246.911    
   8  0.448512     -0.801821      -27.9694       27.9694       230.690       258.659    
   9  0.625244     -0.469613      -16.3812       16.3812       231.270       247.651    
  10  0.557627     -0.584065      -20.3736       20.3736       234.506       254.880    
  11  0.762657     -0.270947      -9.45129       9.45129       238.219       247.670    
  12  0.579328     -0.545887      -19.0418       19.0418       236.183       255.225    
  13  0.168395      -1.78144      -62.1410       62.1410       229.399       291.540    
  14  0.993282     -0.674111E-02 -0.235146      0.235146       227.866       228.101    
  15  0.573458     -0.556070      -19.3971       19.3971       233.629       253.026    
  16  0.900456     -0.104854      -3.65754       3.65754       236.949       240.607    
  17  0.961937     -0.388068E-01  -1.35367       1.35367       232.549       233.903    
  18  0.685702     -0.377312      -13.1616       13.1616       231.976       245.137    
  19  0.335644      -1.09171      -38.0813       38.0813       237.852       275.933    
  20  0.726392     -0.319666      -11.1507       11.1507       232.113       243.263    
  21  0.523515     -0.647189      -22.5755       22.5755       229.684       252.260    
  22  0.877914     -0.130206      -4.54191       4.54191       264.623       269.165    
  23  0.893563     -0.112539      -3.92563       3.92563       232.927       236.852    
  24  0.829449     -0.186994      -6.52280       6.52280       252.609       259.132    
  25  0.454457     -0.788653      -27.5101       27.5101       237.477       264.987    
  26  0.261407      -1.34168      -46.8009       46.8009       232.424       279.225    
  27  0.144225      -1.93638      -67.5456       67.5456       231.168       298.713    
  28  0.963744     -0.369299E-01  -1.28820       1.28820       237.593       238.881    
  29  0.267843      -1.31735      -45.9525       45.9525       252.687       298.640    
  30  0.251943E-01  -3.68114      -128.407       128.407       232.808       361.215    
  31  0.321532      -1.13466      -39.5796       39.5796       241.078       280.658    
  32  0.440903     -0.818930      -28.5662       28.5662       233.474       262.040    
  33  0.214416      -1.53984      -53.7132       53.7132       239.319       293.032    
  34  0.212185      -1.55030      -54.0781       54.0781       233.901       287.979    
  35  0.948253E-01  -2.35572      -82.1731       82.1731       233.019       315.192    
  36  0.507627     -0.678008      -23.6505       23.6505       237.230       260.881    
  37  0.415074     -0.879299      -30.6721       30.6721       231.049       261.721    
  38  0.768069     -0.263876      -9.20463       9.20463       231.092       240.297    
  39  0.462999E-01  -3.07261      -107.180       107.180       230.021       337.201    
  40  0.835390     -0.179856      -6.27382       6.27382       245.535       251.809    
  41  0.678734     -0.387526      -13.5178       13.5178       242.147       255.665    
  42  0.363569      -1.01179      -35.2935       35.2935       235.302       270.596    
  43  0.677161     -0.389846      -13.5987       13.5987       251.165       264.764    
  44  0.506668     -0.679899      -23.7165       23.7165       225.404       249.121    
  45  0.875658     -0.132779      -4.63165       4.63165       233.051       237.682    
  46  0.924863     -0.781102E-01  -2.72467       2.72467       234.675       237.399    
  47  0.794570E-01  -2.53254      -88.3410       88.3410       230.194       318.535    
  48  0.449212     -0.800261      -27.9150       27.9150       226.781       254.696    
  49  0.658987     -0.417051      -14.5477       14.5477       232.919       247.467    
  50  0.674357     -0.393995      -13.7435       13.7435       236.447       250.190    
  51  0.436334     -0.829348      -28.9296       28.9296       228.932       257.862    
  52  0.331871      -1.10301      -38.4755       38.4755       228.831       267.307    
loop,thermsimp(1:2)       47   110.656       18.9364    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143        230.88          1.11          0.99         23.78          0.43          0.07         26.38
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144        231.05          1.04          1.01         23.94          0.20          0.06         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    230.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       47
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       48
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      143     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -19.8034       19.8034       227.866       247.669    
   2  0.216137      -1.53184      -53.4342       53.4342       232.549       285.983    
   3  0.476425     -0.741444      -25.8633       25.8633       233.027       258.890    
   4  0.184047      -1.69256      -59.0407       59.0407       232.927       291.967    
   5  0.722630     -0.324858      -11.3318       11.3318       234.675       246.006    
   6  0.887750     -0.119065      -4.15327       4.15327       233.051       237.204    
   7  0.236344      -1.44247      -50.3167       50.3167       237.593       287.909    
   8  0.798055     -0.225578      -7.86868       7.86868       231.092       238.961    
   9  0.425454     -0.854597      -29.8104       29.8104       236.949       266.760    
  10  0.605701     -0.501368      -17.4889       17.4889       238.991       256.480    
  11  0.742456     -0.297792      -10.3877       10.3877       228.088       238.476    
  12  0.378462E-01  -3.27423      -114.213       114.213       232.113       346.325    
  13  0.341910      -1.07321      -37.4360       37.4360       231.976       269.412    
  14  0.794971E-01  -2.53203      -88.3234       88.3234       239.645       327.968    
  15  0.586423     -0.533715      -18.6172       18.6172       232.919       251.537    
  16  0.990523     -0.952170E-02 -0.332140      0.332140       231.270       231.602    
  17  0.348475      -1.05419      -36.7726       36.7726       238.219       274.991    
  18  0.998034     -0.196755E-02 -0.686327E-01  0.686327E-01   225.404       225.473    
  19  0.616072     -0.484391      -16.8967       16.8967       230.302       247.199    
  20  0.427239     -0.850411      -29.6643       29.6643       236.447       266.111    
  21  0.598160     -0.513898      -17.9260       17.9260       245.535       263.461    
  22  0.642831     -0.441873      -15.4136       15.4136       229.684       245.098    
  23  0.392766     -0.934541      -32.5990       32.5990       233.629       266.228    
  24  0.738407     -0.303260      -10.5784       10.5784       226.781       237.360    
  25  0.334341      -1.09559      -38.2169       38.2169       234.506       272.723    
  26  0.997912     -0.208996E-02 -0.729027E-01  0.729027E-01   236.183       236.256    
  27  0.492305E-01  -3.01124      -105.039       105.039       242.147       347.186    
  28  0.304734      -1.18832      -41.4513       41.4513       228.932       270.383    
  29  0.159886      -1.83330      -63.9497       63.9497       230.690       294.640    
  30  0.991331     -0.870666E-02 -0.303709      0.303709       252.609       252.913    
  31  0.735164     -0.307662      -10.7320       10.7320       237.230       247.962    
  32  0.279948      -1.27315      -44.4105       44.4105       231.049       275.460    
  33  0.457260     -0.782502      -27.2955       27.2955       233.474       260.769    
  34  0.678170     -0.388358      -13.5468       13.5468       251.165       264.712    
  35  0.689603     -0.371639      -12.9637       12.9637       237.477       250.441    
  36  0.468470     -0.758283      -26.4507       26.4507       228.831       255.282    
  37  0.937429     -0.646141E-01  -2.25389       2.25389       264.623       266.877    
  38  0.115915      -2.15490      -75.1680       75.1680       235.302       310.470    
  39  0.125789      -2.07315      -72.3163       72.3163       237.852       310.168    
  40  0.137562      -1.98368      -69.1955       69.1955       232.424       301.619    
  41  0.273901      -1.29499      -45.1722       45.1722       241.078       286.251    
  42  0.934963     -0.672484E-01  -2.34579       2.34579       233.901       236.247    
  43  0.450296     -0.797850      -27.8309       27.8309       229.399       257.230    
  44  0.681645     -0.383246      -13.3685       13.3685       239.319       252.688    
  45  0.282914E-01  -3.56520      -124.363       124.363       252.687       377.050    
  46  0.962226     -0.385062E-01  -1.34319       1.34319       231.168       232.511    
  47  0.771412     -0.259533      -9.05312       9.05312       233.019       242.072    
  48  0.778208     -0.250761      -8.74716       8.74716       230.194       238.941    
  49  0.945686     -0.558450E-01  -1.94801       1.94801       230.021       231.969    
  50  0.648669     -0.432833      -15.0982       15.0982       230.428       245.526    
  51  0.214283      -1.54046      -53.7348       53.7348       230.667       284.401    
  52  0.692999     -0.366726      -12.7923       12.7923       230.875       243.668    
loop,thermsimp(1:2)       48   19.8034       53.4342    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145        232.17          1.26          1.14         24.05          0.04          0.06         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    232.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       48
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       49
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      144     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -59.6287       59.6287       225.404       285.033    
   2  0.335083      -1.09338      -38.1396       38.1396       231.270       269.410    
   3  0.585160     -0.535871      -18.6924       18.6924       230.021       248.713    
   4  0.445729     -0.808044      -28.1865       28.1865       231.168       259.354    
   5  0.963605     -0.370741E-01  -1.29323       1.29323       233.901       235.194    
   6  0.538074     -0.619758      -21.6186       21.6186       236.183       257.802    
   7  0.971443     -0.289729E-01  -1.01064       1.01064       233.051       234.061    
   8  0.817136     -0.201950      -7.04449       7.04449       226.781       233.826    
   9  0.216943      -1.52812      -53.3045       53.3045       228.088       281.393    
  10  0.572311     -0.558074      -19.4669       19.4669       230.194       249.661    
  11  0.511761     -0.669897      -23.3676       23.3676       231.092       254.460    
  12  0.331920E-01  -3.40545      -118.790       118.790       233.019       351.809    
  13  0.662680     -0.411462      -14.3528       14.3528       230.875       245.228    
  14  0.578679     -0.547007      -19.0809       19.0809       229.684       248.765    
  15  0.473979     -0.746592      -26.0429       26.0429       230.428       256.471    
  16  0.243750      -1.41161      -49.2404       49.2404       234.675       283.915    
  17  0.784227     -0.243057      -8.47842       8.47842       230.302       238.781    
  18  0.215065      -1.53682      -53.6078       53.6078       227.866       281.474    
  19  0.813272     -0.206689      -7.20982       7.20982       237.230       244.440    
  20  0.877336     -0.130865      -4.56489       4.56489       237.477       242.042    
  21  0.911070     -0.931357E-01  -3.24879       3.24879       232.919       236.168    
  22  0.424500     -0.856844      -29.8888       29.8888       239.319       269.208    
  23  0.122508      -2.09958      -73.2384       73.2384       252.609       325.848    
  24  0.173199      -1.75331      -61.1598       61.1598       228.831       289.991    
  25  0.243010      -1.41465      -49.3465       49.3465       238.991       288.338    
  26  0.618804     -0.479966      -16.7424       16.7424       229.399       246.142    
  27  0.365303      -1.00703      -35.1275       35.1275       233.027       268.154    
  28  0.178054      -1.72567      -60.1954       60.1954       233.474       293.669    
  29  0.416122     -0.876776      -30.5840       30.5840       245.535       276.119    
  30  0.789287     -0.236625      -8.25406       8.25406       251.165       259.419    
  31  0.786736     -0.239863      -8.36700       8.36700       236.447       244.814    
  32  0.295880      -1.21780      -42.4798       42.4798       233.629       276.109    
  33  0.418649     -0.870722      -30.3728       30.3728       236.949       267.322    
  34  0.706992     -0.346736      -12.0950       12.0950       264.623       276.718    
  35  0.281863      -1.26633      -44.1727       44.1727       231.976       276.149    
  36  0.357290      -1.02921      -35.9012       35.9012       228.932       264.833    
  37  0.174180      -1.74767      -60.9627       60.9627       234.506       295.469    
  38  0.190924      -1.65588      -57.7611       57.7611       238.219       295.980    
  39  0.630369     -0.461449      -16.0964       16.0964       231.049       247.145    
  40  0.252261      -1.37729      -48.0432       48.0432       230.667       278.710    
  41  0.359213      -1.02384      -35.7140       35.7140       232.549       268.263    
  42  0.740344     -0.300640      -10.4871       10.4871       241.078       251.565    
  43  0.283211      -1.26156      -44.0063       44.0063       237.593       281.599    
  44  0.965119     -0.355039E-01  -1.23846       1.23846       232.927       234.165    
  45  0.389600     -0.942634      -32.8813       32.8813       230.690       263.571    
  46  0.598383     -0.513525      -17.9130       17.9130       232.424       250.337    
  47  0.631795     -0.459190      -16.0177       16.0177       237.852       253.870    
  48  0.997460     -0.254363E-02 -0.887279E-01  0.887279E-01   235.302       235.391    
  49  0.192532      -1.64749      -57.4685       57.4685       239.645       297.113    
  50  0.769348     -0.262212      -9.14656       9.14656       232.113       241.259    
  51  0.740745     -0.300099      -10.4682       10.4682       242.147       252.615    
  52  0.590587     -0.526639      -18.3704       18.3704       232.165       250.536    
loop,thermsimp(1:2)       49   59.6287       38.1396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146        230.47          1.24          1.12         24.11          0.02          0.07         26.55
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    147        229.95          1.02          1.12         24.06          0.03          0.06         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       49
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       50
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      146     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -120.369       120.369       226.781       347.150    
   2  0.601445     -0.508421      -17.7349       17.7349       233.051       250.785    
   3  0.651191     -0.428952      -14.9629       14.9629       232.927       247.889    
   4  0.187303      -1.67503      -58.4289       58.4289       233.901       292.330    
   5  0.664603     -0.408566      -14.2517       14.2517       235.302       249.554    
   6  0.945236     -0.563208E-01  -1.96460       1.96460       232.919       234.884    
   7  0.865870     -0.144020      -5.02376       5.02376       230.302       235.326    
   8  0.674117     -0.394351      -13.7559       13.7559       232.113       245.868    
   9  0.959689E-01  -2.34373      -81.7549       81.7549       237.477       319.232    
  10  0.663337     -0.410472      -14.3182       14.3182       237.230       251.549    
  11  0.384854     -0.954891      -33.3089       33.3089       236.447       269.756    
  12  0.892338     -0.113910      -3.97347       3.97347       230.875       234.849    
  13  0.470837     -0.753243      -26.2749       26.2749       229.399       255.674    
  14  0.262618      -1.33706      -46.6397       46.6397       231.049       277.689    
  15  0.877143     -0.131085      -4.57255       4.57255       230.021       234.593    
  16  0.262102      -1.33902      -46.7083       46.7083       229.684       276.393    
  17  0.306130      -1.18375      -41.2919       41.2919       230.194       271.486    
  18  0.251844      -1.37895      -48.1010       48.1010       232.424       280.525    
  19  0.371147     -0.991157      -34.5739       34.5739       232.165       266.739    
  20  0.244393E-01  -3.71156      -129.468       129.468       241.078       370.546    
  21  0.550903     -0.596197      -20.7968       20.7968       242.147       262.944    
  22  0.509078     -0.675154      -23.5510       23.5510       237.852       261.403    
  23  0.741178     -0.299515      -10.4478       10.4478       231.092       241.540    
  24  0.585965     -0.534496      -18.6445       18.6445       230.428       249.073    
  25  0.602491     -0.506683      -17.6743       17.6743       236.183       253.857    
  26  0.532366     -0.630423      -21.9907       21.9907       231.168       253.158    
  27  0.264247      -1.33087      -46.4239       46.4239       251.165       297.589    
  28  0.468512     -0.758194      -26.4476       26.4476       230.690       257.137    
  29  0.338122      -1.08435      -37.8247       37.8247       228.932       266.757    
  30  0.815455     -0.204008      -7.11630       7.11630       236.949       244.066    
  31  0.126007      -2.07142      -72.2560       72.2560       233.027       305.283    
  32  0.391435     -0.937937      -32.7175       32.7175       232.549       265.267    
  33  0.477179     -0.739864      -25.8082       25.8082       239.319       265.127    
  34  0.926058     -0.768180E-01  -2.67959       2.67959       231.270       233.950    
  35  0.305992E-01  -3.48678      -121.627       121.627       233.629       355.256    
  36  0.142122      -1.95107      -68.0580       68.0580       245.535       313.593    
  37  0.934627E-01  -2.37019      -82.6780       82.6780       231.976       314.654    
  38  0.933240     -0.690924E-01  -2.41011       2.41011       264.623       267.033    
  39  0.551354     -0.595378      -20.7682       20.7682       230.667       251.435    
  40  0.167646      -1.78590      -62.2965       62.2965       228.088       290.385    
  41  0.657770     -0.418900      -14.6122       14.6122       227.866       242.478    
  42  0.937012     -0.650587E-01  -2.26940       2.26940       237.593       239.862    
  43  0.435130     -0.832109      -29.0259       29.0259       234.675       263.701    
  44  0.346278E-01  -3.36310      -117.313       117.313       225.404       342.717    
  45  0.529273     -0.636251      -22.1940       22.1940       238.991       261.185    
  46  0.543808     -0.609159      -21.2489       21.2489       228.831       250.080    
  47  0.476993     -0.740254      -25.8218       25.8218       233.474       259.296    
  48  0.602365     -0.506891      -17.6816       17.6816       234.506       252.187    
  49  0.429141     -0.845970      -29.5095       29.5095       238.219       267.728    
  50  0.161300E-01  -4.12707      -143.962       143.962       239.645       383.607    
  51  0.806405     -0.215169      -7.50562       7.50562       252.609       260.115    
  52  0.577848E-01  -2.85103      -99.4507       99.4507       229.951       329.402    
loop,thermsimp(1:2)       50   120.369       17.7349    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148        235.64          1.26          1.13         24.07          0.07          0.06         26.60
Just calling func    0   0         26.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    149        350.18          1.05          1.10         24.02          0.14          0.05         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    235.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       50
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       51
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      148     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -2.55788       2.55788       231.270       233.828    
   2  0.669511     -0.401208      -13.9951       13.9951       230.021       244.016    
   3  0.863337E-01  -2.44954      -85.4456       85.4456       230.875       316.321    
   4  0.279945      -1.27316      -44.4109       44.4109       232.919       277.330    
   5  0.832640     -0.183154      -6.38885       6.38885       230.302       236.691    
   6  0.848933     -0.163775      -5.71287       5.71287       237.593       243.306    
   7  0.141794      -1.95338      -68.1386       68.1386       231.092       299.231    
   8  0.208764      -1.56655      -54.6451       54.6451       227.866       282.511    
   9  0.755787     -0.279996      -9.76693       9.76693       236.949       246.716    
  10  0.177416      -1.72926      -60.3207       60.3207       232.113       292.433    
  11  0.405148     -0.903503      -31.5163       31.5163       232.927       264.443    
  12  0.640380     -0.445693      -15.5468       15.5468       230.428       245.975    
  13  0.548060     -0.601370      -20.9772       20.9772       235.302       256.280    
  14  0.773287     -0.257105      -8.96843       8.96843       228.831       237.800    
  15  0.180768      -1.71054      -59.6677       59.6677       233.051       292.718    
  16  0.135846      -1.99624      -69.6334       69.6334       230.667       300.300    
  17  0.601016     -0.509133      -17.7598       17.7598       237.230       254.990    
  18  0.302263      -1.19646      -41.7353       41.7353       234.506       276.241    
  19  0.189428      -1.66374      -58.0354       58.0354       231.168       289.203    
  20  0.737158     -0.304953      -10.6375       10.6375       236.183       246.821    
  21  0.790680     -0.234862      -8.19254       8.19254       229.399       237.592    
  22  0.177192E-01  -4.03310      -140.684       140.684       230.690       371.374    
  23  0.236042      -1.44375      -50.3613       50.3613       233.474       283.835    
  24  0.459229     -0.778206      -27.1457       27.1457       252.609       279.755    
  25  0.586479E-01  -2.83620      -98.9335       98.9335       238.991       337.925    
  26  0.263766      -1.33269      -46.4875       46.4875       237.852       284.340    
  27  0.942550     -0.591663E-01  -2.06386       2.06386       242.147       244.211    
  28  0.106855      -2.23628      -78.0067       78.0067       234.675       312.681    
  29  0.710700     -0.341505      -11.9125       11.9125       239.319       251.232    
  30  0.207109E-01  -3.87709      -135.242       135.242       232.549       367.791    
  31  0.901203     -0.104025      -3.62864       3.62864       232.165       235.794    
  32  0.949751     -0.515555E-01  -1.79838       1.79838       228.932       230.731    
  33  0.343487      -1.06861      -37.2756       37.2756       264.623       301.898    
  34  0.875043     -0.133483      -4.65619       4.65619       238.219       242.875    
  35  0.122447E-01  -4.40266      -153.575       153.575       236.447       390.022    
  36  0.820650     -0.197659      -6.89481       6.89481       230.194       237.089    
  37  0.748866     -0.289195      -10.0878       10.0878       229.684       239.772    
  38  0.594525     -0.519992      -18.1386       18.1386       231.049       249.188    
  39  0.927863E-01  -2.37746      -82.9313       82.9313       232.424       315.355    
  40  0.631335     -0.459918      -16.0430       16.0430       228.088       244.131    
  41  0.282620      -1.26365      -44.0792       44.0792       233.901       277.980    
  42  0.707811     -0.345578      -12.0546       12.0546       251.165       263.219    
  43  0.930463     -0.720730E-01  -2.51408       2.51408       233.027       235.541    
  44  0.988563     -0.115032E-01 -0.401260      0.401260       245.535       245.937    
  45  0.869439     -0.139907      -4.88030       4.88030       231.976       236.856    
  46  0.693921     -0.365397      -12.7459       12.7459       237.477       250.223    
  47  0.731753     -0.312312      -10.8942       10.8942       229.951       240.846    
  48  0.848712     -0.164035      -5.72194       5.72194       225.404       231.126    
  49  0.174447      -1.74613      -60.9093       60.9093       226.781       287.690    
  50  0.313212      -1.16087      -40.4941       40.4941       233.629       274.123    
  51  0.880789     -0.126937      -4.42786       4.42786       241.078       245.506    
  52  0.441967     -0.816520      -28.4822       28.4822       235.642       264.124    
loop,thermsimp(1:2)       51   2.55788       13.9951    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150        229.92          1.23          1.12         23.85          0.07          0.07         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    151        231.35          1.02          1.12         23.99          0.07          0.06         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       51
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       52
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      150     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -14.5984       14.5984       228.932       243.531    
   2  0.385391     -0.953496      -33.2602       33.2602       225.404       258.664    
   3  0.323679      -1.12800      -39.3474       39.3474       231.270       270.618    
   4  0.402516E-01  -3.21260      -112.063       112.063       233.027       345.090    
   5  0.866022     -0.143846      -5.01767       5.01767       232.165       237.183    
   6  0.560147     -0.579555      -20.2163       20.2163       230.302       250.518    
   7  0.389098     -0.943925      -32.9263       32.9263       231.976       264.902    
   8  0.470755     -0.753417      -26.2810       26.2810       230.194       256.475    
   9  0.794299     -0.230295      -8.03324       8.03324       229.399       237.433    
  10  0.897132     -0.108553      -3.78658       3.78658       228.831       232.618    
  11  0.359474      -1.02311      -35.6887       35.6887       229.684       265.373    
  12  0.604694     -0.503032      -17.5470       17.5470       229.951       247.498    
  13  0.101554      -2.28717      -79.7818       79.7818       238.219       318.001    
  14  0.274480      -1.29288      -45.0986       45.0986       237.593       282.691    
  15  0.916086     -0.876445E-01  -3.05725       3.05725       230.021       233.078    
  16  0.820070E-01  -2.50095      -87.2391       87.2391       228.088       315.327    
  17  0.975902     -0.243929E-01 -0.850883      0.850883       242.147       242.998    
  18  0.131665      -2.02750      -70.7239       70.7239       241.078       311.802    
  19  0.751313     -0.285933      -9.97403       9.97403       245.535       255.509    
  20  0.775324     -0.254475      -8.87668       8.87668       230.428       239.305    
  21  0.237000      -1.43969      -50.2199       50.2199       236.949       287.169    
  22  0.113641      -2.17471      -75.8590       75.8590       236.183       312.042    
  23  0.762281     -0.271440      -9.46846       9.46846       231.049       240.517    
  24  0.783730     -0.243690      -8.50049       8.50049       237.477       245.978    
  25  0.492891     -0.707468      -24.6782       24.6782       239.319       263.997    
  26  0.471904     -0.750980      -26.1960       26.1960       237.230       263.426    
  27  0.855781     -0.155740      -5.43259       5.43259       235.302       240.735    
  28  0.636473     -0.451814      -15.7603       15.7603       251.165       266.925    
  29  0.433340     -0.836232      -29.1697       29.1697       235.642       264.812    
  30  0.482236     -0.729321      -25.4404       25.4404       232.927       258.367    
  31  0.855143E-01  -2.45907      -85.7783       85.7783       233.629       319.407    
  32  0.916579     -0.871071E-01  -3.03850       3.03850       234.506       237.544    
  33  0.232519      -1.45878      -50.8858       50.8858       232.919       283.805    
  34  0.283977      -1.25886      -43.9121       43.9121       233.901       277.813    
  35  0.401228E-01  -3.21581      -112.175       112.175       252.609       364.784    
  36  0.235231      -1.44719      -50.4814       50.4814       227.866       278.347    
  37  0.233426      -1.45489      -50.7500       50.7500       233.474       284.224    
  38  0.903594     -0.101376      -3.53622       3.53622       237.852       241.388    
  39  0.857571     -0.153651      -5.35971       5.35971       226.781       232.141    
  40  0.444085     -0.811739      -28.3154       28.3154       231.168       259.483    
  41  0.151055      -1.89011      -65.9316       65.9316       232.113       298.044    
  42  0.745694     -0.293440      -10.2359       10.2359       233.051       243.286    
  43  0.470647E-01  -3.05623      -106.609       106.609       231.092       337.701    
  44  0.344459      -1.06578      -37.1770       37.1770       230.667       267.843    
  45  0.592738     -0.523004      -18.2436       18.2436       264.623       282.866    
  46  0.754292     -0.281975      -9.83596       9.83596       234.675       244.511    
  47  0.162950      -1.81431      -63.2876       63.2876       232.424       295.711    
  48  0.939100     -0.628333E-01  -2.19178       2.19178       230.875       233.067    
  49  0.966845     -0.337175E-01  -1.17615       1.17615       238.991       240.168    
  50  0.287323      -1.24715      -43.5035       43.5035       232.549       276.053    
  51  0.835081     -0.180227      -6.28673       6.28673       230.690       236.977    
  52  0.836052     -0.179064      -6.24618       6.24618       229.925       236.171    
loop,thermsimp(1:2)       52   14.5984       33.2602    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152        225.26          1.23          1.13         23.98          0.05          0.07         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    153        228.24          1.04          1.13         23.94          0.07          0.06         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    225.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       52
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       53
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      152     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -18.8964       18.8964       226.781       245.677    
   2  0.307993      -1.17768      -41.0802       41.0802       228.831       269.911    
   3  0.551684     -0.594779      -20.7473       20.7473       230.875       251.623    
   4  0.969976     -0.304835E-01  -1.06334       1.06334       230.021       231.084    
   5  0.401714     -0.912015      -31.8133       31.8133       229.925       261.738    
   6  0.336211      -1.09002      -38.0223       38.0223       230.690       268.712    
   7  0.649191     -0.432028      -15.0702       15.0702       232.165       247.236    
   8  0.426986     -0.851005      -29.6851       29.6851       229.399       259.084    
   9  0.479997     -0.733976      -25.6028       25.6028       234.506       260.109    
  10  0.441527     -0.817516      -28.5169       28.5169       230.428       258.945    
  11  0.218988      -1.51874      -52.9772       52.9772       238.991       291.969    
  12  0.935549     -0.666221E-01  -2.32394       2.32394       231.049       233.373    
  13  0.159996      -1.83261      -63.9258       63.9258       235.302       299.228    
  14  0.486870     -0.719759      -25.1069       25.1069       237.852       262.959    
  15  0.835520     -0.179701      -6.26838       6.26838       242.147       248.416    
  16  0.643759     -0.440431      -15.3633       15.3633       233.051       248.414    
  17  0.177188      -1.73054      -60.3655       60.3655       228.932       289.298    
  18  0.408356     -0.895617      -31.2412       31.2412       234.675       265.916    
  19  0.463768     -0.768371      -26.8026       26.8026       237.477       264.280    
  20  0.616820     -0.483178      -16.8544       16.8544       229.951       246.806    
  21  0.377083     -0.975289      -34.0204       34.0204       230.302       264.323    
  22  0.278016      -1.28008      -44.6521       44.6521       245.535       290.187    
  23  0.746435     -0.292446      -10.2012       10.2012       230.194       240.395    
  24  0.872234     -0.136697      -4.76832       4.76832       232.927       237.695    
  25  0.887073E-01  -2.42241      -84.4995       84.4995       225.404       309.904    
  26  0.124913      -2.08014      -72.5602       72.5602       231.168       303.728    
  27  0.918160     -0.853835E-01  -2.97838       2.97838       237.230       240.209    
  28  0.924603     -0.783912E-01  -2.73447       2.73447       239.319       242.054    
  29  0.863214     -0.147092      -5.13093       5.13093       235.642       240.773    
  30  0.823499E-02  -4.79936      -167.413       167.413       231.976       399.389    
  31  0.548113     -0.601275      -20.9739       20.9739       229.684       250.658    
  32  0.800553     -0.222452      -7.75965       7.75965       251.165       258.925    
  33  0.180829      -1.71020      -59.6559       59.6559       230.667       290.322    
  34  0.968975E-01  -2.33410      -81.4190       81.4190       231.270       312.689    
  35  0.749847     -0.287886      -10.0422       10.0422       232.549       242.591    
  36  0.902028     -0.103110      -3.59672       3.59672       233.901       237.498    
  37  0.312083      -1.16449      -40.6200       40.6200       227.866       268.486    
  38  0.472691     -0.749313      -26.1378       26.1378       237.593       263.731    
  39  0.970346     -0.301026E-01  -1.05005       1.05005       264.623       265.673    
  40  0.485853     -0.721850      -25.1798       25.1798       232.919       258.099    
  41  0.604658     -0.503092      -17.5490       17.5490       233.474       251.023    
  42  0.172238      -1.75888      -61.3539       61.3539       236.949       298.303    
  43  0.359079E-01  -3.32680      -116.047       116.047       232.424       348.470    
  44  0.464923     -0.765884      -26.7159       26.7159       232.113       258.828    
  45  0.293512      -1.22584      -42.7601       42.7601       241.078       283.838    
  46  0.572788     -0.557239      -19.4378       19.4378       236.183       255.621    
  47  0.931713     -0.707300E-01  -2.46723       2.46723       228.088       230.555    
  48  0.983012     -0.171340E-01 -0.597676      0.597676       238.219       238.817    
  49  0.572194     -0.558278      -19.4740       19.4740       233.629       253.103    
  50  0.272189      -1.30126      -45.3910       45.3910       231.092       276.483    
  51  0.521081     -0.651849      -22.7380       22.7380       233.027       255.765    
  52  0.560075     -0.579685      -20.2208       20.2208       225.257       245.478    
loop,thermsimp(1:2)       53   18.8964       41.0802    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154        229.32          1.24          1.04         23.95          0.12          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    155        228.96          1.04          1.00         23.93          0.14          0.06         26.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       53
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       54
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      154     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -19.8557       19.8557       228.088       247.944    
   2  0.698829     -0.358349      -12.5001       12.5001       230.021       242.521    
   3  0.550231     -0.597418      -20.8393       20.8393       231.049       251.888    
   4  0.844966     -0.168459      -5.87624       5.87624       233.901       239.777    
   5  0.139804      -1.96751      -68.6315       68.6315       232.927       301.558    
   6  0.119451      -2.12485      -74.1198       74.1198       238.219       312.339    
   7  0.474112     -0.746312      -26.0332       26.0332       237.230       263.264    
   8  0.293024      -1.22750      -42.8181       42.8181       230.194       273.012    
   9  0.760137     -0.274256      -9.56670       9.56670       235.642       245.209    
  10  0.216376      -1.53074      -53.3958       53.3958       239.319       292.715    
  11  0.837069     -0.177849      -6.20379       6.20379       232.549       238.753    
  12  0.969258     -0.312245E-01  -1.08919       1.08919       225.257       226.347    
  13  0.335918      -1.09089      -38.0528       38.0528       226.781       264.834    
  14  0.966643     -0.339265E-01  -1.18344       1.18344       229.951       231.135    
  15  0.723887     -0.323119      -11.2712       11.2712       232.165       243.437    
  16  0.459929E-01  -3.07927      -107.412       107.412       233.051       340.463    
  17  0.536724     -0.622271      -21.7063       21.7063       242.147       263.853    
  18  0.432574     -0.838001      -29.2315       29.2315       229.684       258.916    
  19  0.160308      -1.83066      -63.8577       63.8577       233.474       297.332    
  20  0.885158     -0.121989      -4.25526       4.25526       230.875       235.131    
  21  0.753783     -0.282650      -9.85952       9.85952       233.629       243.489    
  22  0.135562      -1.99832      -69.7063       69.7063       236.183       305.889    
  23  0.817964     -0.200937      -7.00915       7.00915       233.027       240.036    
  24  0.286617      -1.24961      -43.5894       43.5894       232.919       276.509    
  25  0.319126      -1.14217      -39.8416       39.8416       232.113       271.954    
  26  0.104479E-01  -4.56135      -159.111       159.111       251.165       410.276    
  27  0.671407     -0.398379      -13.8964       13.8964       230.428       244.325    
  28  0.782955     -0.244680      -8.53503       8.53503       229.399       237.934    
  29  0.186689      -1.67831      -58.5436       58.5436       234.506       293.049    
  30  0.462519     -0.771067      -26.8966       26.8966       229.925       256.822    
  31  0.203171      -1.59371      -55.5923       55.5923       237.852       293.444    
  32  0.851762E-01  -2.46303      -85.9165       85.9165       237.593       323.509    
  33  0.702824     -0.352649      -12.3012       12.3012       237.477       249.778    
  34  0.747923     -0.290456      -10.1318       10.1318       230.302       240.434    
  35  0.224450      -1.49410      -52.1179       52.1179       264.623       316.741    
  36  0.243563E-02  -6.01755      -209.906       209.906       234.675       444.581    
  37  0.160790      -1.82766      -63.7531       63.7531       227.866       291.619    
  38  0.880431     -0.127343      -4.44204       4.44204       230.690       235.132    
  39  0.507306     -0.678640      -23.6726       23.6726       228.831       252.504    
  40  0.266019      -1.32419      -46.1908       46.1908       231.092       277.283    
  41  0.310751      -1.16876      -40.7692       40.7692       241.078       281.848    
  42  0.945006     -0.565640E-01  -1.97309       1.97309       228.932       230.905    
  43  0.265699E-01  -3.62797      -126.552       126.552       245.535       372.088    
  44  0.652842     -0.426420      -14.8745       14.8745       230.667       245.541    
  45  0.799409     -0.223882      -7.80955       7.80955       238.991       246.801    
  46  0.543529     -0.609672      -21.2668       21.2668       236.949       258.216    
  47  0.361947      -1.01626      -35.4495       35.4495       235.302       270.752    
  48  0.398721     -0.919492      -32.0741       32.0741       231.168       263.242    
  49  0.349489      -1.05128      -36.6712       36.6712       225.404       262.075    
  50  0.948739     -0.526212E-01  -1.83555       1.83555       231.270       233.106    
  51  0.346176      -1.06081      -37.0035       37.0035       232.424       269.427    
  52  0.678244     -0.388248      -13.5430       13.5430       228.957       242.500    
loop,thermsimp(1:2)       54   19.8557       12.5001    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156        235.12          1.25          1.03         23.97          0.15          0.06         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    235.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    34.8824               154
loop is:       54
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    34.8824               154
loop is:       55
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    17.4412               205

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      155     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -28.5695       28.5695       225.257       253.827    
   2  0.875287     -0.133204      -2.32323       2.32323       228.932       231.255    
   3  0.103612      -2.26710      -39.5409       39.5409       229.951       269.492    
   4  0.159072      -1.83840      -32.0639       32.0639       231.270       263.334    
   5  0.118738      -2.13084      -37.1643       37.1643       230.875       268.040    
   6  0.294105      -1.22382      -21.3448       21.3448       230.690       252.035    
   7  0.967643     -0.328919E-01 -0.573674      0.573674       229.399       229.973    
   8  0.675183     -0.392772      -6.85041       6.85041       232.549       239.400    
   9  0.170112      -1.77130      -30.8935       30.8935       233.901       264.795    
  10  0.990992     -0.904902E-02 -0.157826      0.157826       233.027       233.185    
  11  0.198513      -1.61690      -28.2007       28.2007       230.302       258.503    
  12  0.404817E-01  -3.20690      -55.9322       55.9322       228.957       284.889    
  13  0.834933E-01  -2.48299      -43.3063       43.3063       230.021       273.327    
  14  0.458935     -0.778848      -13.5840       13.5840       232.165       245.749    
  15  0.929311     -0.733118E-01  -1.27865       1.27865       233.629       234.908    
  16  0.593071     -0.522440      -9.11198       9.11198       230.428       239.540    
  17  0.963359E-01  -2.33991      -40.8109       40.8109       235.642       276.453    
  18  0.383119E-01  -3.26200      -56.8931       56.8931       230.667       287.560    
  19  0.841843     -0.172161      -3.00270       3.00270       238.991       241.994    
  20  0.874261     -0.134376      -2.34368       2.34368       228.088       230.432    
  21  0.706443     -0.347513      -6.06104       6.06104       237.477       243.538    
  22  0.423649E-01  -3.16143      -55.1392       55.1392       231.049       286.188    
  23  0.904835     -0.100003      -1.74417       1.74417       228.831       230.575    
  24  0.728800     -0.316356      -5.51763       5.51763       229.925       235.443    
  25  0.764304     -0.268790      -4.68802       4.68802       236.949       241.637    
  26  0.578519     -0.547284      -9.54528       9.54528       229.684       239.230    
  27  0.321737      -1.13402      -19.7787       19.7787       225.404       245.183    
  28  0.592944     -0.522656      -9.11573       9.11573       231.168       240.283    
  29  0.159596      -1.83511      -32.0065       32.0065       237.230       269.237    
  30  0.797332     -0.226484      -3.95015       3.95015       242.147       246.097    
  31  0.263979      -1.33189      -23.2297       23.2297       226.781       250.011    
  32  0.449355     -0.799942      -13.9519       13.9519       232.424       246.376    
  33  0.859901     -0.150938      -2.63253       2.63253       235.302       237.935    
  34  0.730093     -0.314584      -5.48671       5.48671       232.113       237.599    
  35  0.484666     -0.724295      -12.6326       12.6326       230.194       242.827    
  36  0.180217      -1.71359      -29.8871       29.8871       232.919       262.807    
  37  0.857397     -0.153854      -2.68340       2.68340       231.092       233.776    
  38  0.502370     -0.688418      -12.0068       12.0068       241.078       253.085    
  39  0.245408      -1.40484      -24.5020       24.5020       227.866       252.368    
  40  0.134540      -2.00590      -34.9852       34.9852       239.319       274.304    
  41  0.468137     -0.758995      -13.2378       13.2378       234.506       247.744    
  42  0.864548E-01  -2.44813      -42.6984       42.6984       237.852       280.550    
  43  0.178791      -1.72154      -30.0257       30.0257       233.474       263.500    
  44  0.690351     -0.370555      -6.46291       6.46291       232.927       239.390    
  45  0.731648     -0.312455      -5.44959       5.44959       236.183       241.633    
  46  0.857623     -0.153591      -2.67880       2.67880       238.219       240.898    
  47  0.754956     -0.281095      -4.90264       4.90264       264.623       269.525    
  48  0.355557      -1.03407      -18.0354       18.0354       237.593       255.628    
  49  0.200964      -1.60463      -27.9867       27.9867       233.051       261.037    
  50  0.243499      -1.41264      -24.6382       24.6382       245.535       270.173    
  51  0.796288     -0.227794      -3.97300       3.97300       251.165       255.138    
  52  0.256937      -1.35892      -23.7012       23.7012       235.121       258.822    
loop,thermsimp(1:2)       55   28.5695       2.32323    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157        232.50          1.24          1.04         23.95          0.16          0.07         26.45
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    158        239.32          1.05          1.02         24.01          0.08          0.05         26.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       55
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       56
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      157     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -34.1303       34.1303       229.399       263.530    
   2  0.197548      -1.62177      -28.2857       28.2857       228.088       256.374    
   3  0.774000     -0.256183      -4.46813       4.46813       228.831       233.299    
   4  0.170284      -1.77029      -30.8759       30.8759       228.932       259.808    
   5  0.250636      -1.38376      -24.1343       24.1343       233.027       257.161    
   6  0.907951     -0.965652E-01  -1.68421       1.68421       231.092       232.777    
   7  0.611678     -0.491549      -8.57320       8.57320       233.629       242.202    
   8  0.735945E-02  -4.91177      -85.6671       85.6671       229.925       315.592    
   9  0.309131      -1.17399      -20.4758       20.4758       232.113       252.588    
  10  0.577854     -0.548434      -9.56533       9.56533       235.302       244.868    
  11  0.931529     -0.709274E-01  -1.23706       1.23706       229.684       230.922    
  12  0.665703     -0.406912      -7.09703       7.09703       232.927       240.024    
  13  0.585695     -0.534955      -9.33026       9.33026       232.549       241.879    
  14  0.295001      -1.22078      -21.2918       21.2918       230.428       251.720    
  15  0.317712E-01  -3.44920      -60.1581       60.1581       231.168       291.326    
  16  0.222963      -1.50075      -26.1749       26.1749       238.219       264.394    
  17  0.325931      -1.12107      -19.5528       19.5528       236.183       255.736    
  18  0.785098     -0.241947      -4.21984       4.21984       236.949       241.169    
  19  0.550467     -0.596988      -10.4122       10.4122       238.991       249.404    
  20  0.780222     -0.248176      -4.32849       4.32849       230.194       234.523    
  21  0.130712      -2.03476      -35.4886       35.4886       237.477       272.966    
  22  0.873397     -0.135365      -2.36092       2.36092       225.404       227.765    
  23  0.366975      -1.00246      -17.4841       17.4841       232.165       249.649    
  24  0.813244     -0.206724      -3.60551       3.60551       242.147       245.753    
  25  0.782660E-01  -2.54764      -44.4339       44.4339       232.424       276.858    
  26  0.700327     -0.356208      -6.21269       6.21269       234.506       240.719    
  27  0.437766     -0.826071      -14.4077       14.4077       226.781       241.189    
  28  0.508966E-01  -2.97796      -51.9391       51.9391       230.690       282.629    
  29  0.276850      -1.28428      -22.3993       22.3993       227.866       250.265    
  30  0.792031     -0.233154      -4.06649       4.06649       241.078       245.145    
  31  0.174747      -1.74441      -30.4247       30.4247       225.257       255.682    
  32  0.469718     -0.755623      -13.1790       13.1790       251.165       264.344    
  33  0.252316      -1.37707      -24.0178       24.0178       237.593       261.611    
  34  0.980061     -0.201409E-01 -0.351280      0.351280       230.302       230.653    
  35  0.838300     -0.176379      -3.07627       3.07627       235.121       238.197    
  36  0.369385     -0.995915      -17.3699       17.3699       233.051       250.420    
  37  0.923139     -0.799751E-01  -1.39486       1.39486       232.919       234.314    
  38  0.592446     -0.523496      -9.13040       9.13040       231.270       240.401    
  39  0.348787      -1.05329      -18.3707       18.3707       233.474       251.845    
  40  0.569584     -0.562850      -9.81677       9.81677       233.901       243.718    
  41  0.543034E-01  -2.91317      -50.8091       50.8091       230.875       281.685    
  42  0.582662     -0.540148      -9.42082       9.42082       237.230       246.651    
  43  0.702825     -0.352648      -6.15060       6.15060       229.951       236.102    
  44  0.941375     -0.604140E-01  -1.05369       1.05369       264.623       265.676    
  45  0.258857      -1.35148      -23.5714       23.5714       245.535       269.107    
  46  0.116535      -2.14956      -37.4909       37.4909       230.021       267.512    
  47  0.102671      -2.27622      -39.7000       39.7000       239.319       279.019    
  48  0.172023      -1.76013      -30.6987       30.6987       235.642       266.341    
  49  0.434982E-01  -3.13504      -54.6788       54.6788       237.852       292.531    
  50  0.852122     -0.160026      -2.79104       2.79104       228.957       231.748    
  51  0.583521     -0.538675      -9.39513       9.39513       231.049       240.444    
  52  0.843374     -0.170345      -2.97102       2.97102       232.495       235.466    
loop,thermsimp(1:2)       56   34.1303       28.2857    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159        235.04          1.00          0.98         24.02          0.30          0.05         26.36
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    160        257.41          1.03          1.00         24.00          0.17          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    235.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       56
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       57
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      159     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -7.18721       7.18721       225.404       232.591    
   2  0.724212     -0.322671      -5.62777       5.62777       230.302       235.930    
   3  0.633711     -0.456163      -7.95602       7.95602       229.684       237.640    
   4  0.448566     -0.801700      -13.9826       13.9826       228.957       242.939    
   5  0.964228     -0.364273E-01 -0.635336      0.635336       231.092       231.728    
   6  0.714306     -0.336444      -5.86799       5.86799       228.831       234.699    
   7  0.528330     -0.638035      -11.1281       11.1281       232.919       244.048    
   8  0.654127     -0.424453      -7.40296       7.40296       230.194       237.597    
   9  0.368899     -0.997232      -17.3929       17.3929       232.495       249.888    
  10  0.227697      -1.47974      -25.8084       25.8084       229.951       255.760    
  11  0.612266     -0.490588      -8.55643       8.55643       235.121       243.677    
  12  0.313777      -1.15907      -20.2156       20.2156       232.927       253.142    
  13  0.258526      -1.35276      -23.5938       23.5938       231.270       254.864    
  14  0.119298      -2.12613      -37.0823       37.0823       231.049       268.131    
  15  0.213331      -1.54491      -26.9450       26.9450       234.506       261.451    
  16  0.294218      -1.22343      -21.3382       21.3382       236.949       258.287    
  17  0.352988      -1.04132      -18.1619       18.1619       226.781       244.943    
  18  0.348706      -1.05353      -18.3747       18.3747       232.549       250.924    
  19  0.449249     -0.800179      -13.9561       13.9561       233.629       247.585    
  20  0.879121     -0.128833      -2.24700       2.24700       233.901       236.148    
  21  0.464081     -0.767695      -13.3895       13.3895       235.302       248.692    
  22  0.497582     -0.697995      -12.1739       12.1739       241.078       253.252    
  23  0.920207     -0.831566E-01  -1.45035       1.45035       242.147       243.598    
  24  0.811773     -0.208535      -3.63710       3.63710       237.230       240.867    
  25  0.190651      -1.65731      -28.9054       28.9054       238.991       267.897    
  26  0.645174     -0.438235      -7.64334       7.64334       232.165       239.809    
  27  0.668343     -0.402954      -7.02800       7.02800       227.866       234.894    
  28  0.765111     -0.267735      -4.66961       4.66961       233.051       237.720    
  29  0.991779     -0.825499E-02 -0.143977      0.143977       230.428       230.572    
  30  0.136888      -1.98859      -34.6834       34.6834       233.474       268.157    
  31  0.645145E-01  -2.74086      -47.8039       47.8039       232.113       279.916    
  32  0.408515E-01  -3.19781      -55.7736       55.7736       225.257       281.031    
  33  0.264109      -1.33140      -23.2211       23.2211       236.183       259.404    
  34  0.382737     -0.960407      -16.7506       16.7506       228.088       244.839    
  35  0.402738E-02  -5.51464      -96.1818       96.1818       233.027       329.209    
  36  0.318074      -1.14547      -19.9784       19.9784       228.932       248.911    
  37  0.245237      -1.40553      -24.5142       24.5142       237.593       262.107    
  38  0.519766     -0.654377      -11.4131       11.4131       229.399       240.812    
  39  0.255147      -1.36592      -23.8232       23.8232       251.165       274.988    
  40  0.833841     -0.181712      -3.16927       3.16927       238.219       241.388    
  41  0.696242E-01  -2.66464      -46.4745       46.4745       264.623       311.097    
  42  0.487295     -0.718886      -12.5382       12.5382       235.642       248.180    
  43  0.276229E-01  -3.58911      -62.5984       62.5984       230.021       292.619    
  44  0.638327     -0.448905      -7.82943       7.82943       245.535       253.365    
  45  0.206684      -1.57657      -27.4972       27.4972       237.477       264.974    
  46  0.736003     -0.306521      -5.34610       5.34610       232.424       237.770    
  47  0.217444E-01  -3.82840      -66.7718       66.7718       239.319       306.091    
  48  0.956929     -0.440260E-01 -0.767866      0.767866       230.875       231.643    
  49  0.883561     -0.123795      -2.15913       2.15913       230.690       232.849    
  50  0.700901     -0.355388      -6.19839       6.19839       231.168       237.366    
  51  0.201997      -1.59950      -27.8972       27.8972       237.852       265.749    
  52  0.412152     -0.886362      -15.4592       15.4592       235.037       250.496    
loop,thermsimp(1:2)       57   7.18721       5.62777    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161        228.29          1.00          0.98         23.59          0.66          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    162        228.68          0.93          0.98         23.75          0.61          0.06         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    228.29        2.879     -1.408      5.106     -100.0      1.377    
                     -0.6393      2.611     -100.0      2.671      1.150    
                       1.334    -0.9354      1.841      0.000      0.000    
                      -1.673      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.991     -2.698     -5.483     -2.750    
                      -13.65     -2.634      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.1108     0.1309E-01  0.000    -0.8118    
                     -0.2496    -0.2436    -0.1127    -0.1522    -0.2097E-01

                     -0.9882    -0.6341      0.000    -0.5994E-01-0.4394E-01
                      0.8541E-01 0.1367E-01-0.1052    -0.1439    -0.1748    
                      0.1694     0.4435E-01-0.2129     -1.134      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.083      9.183     -7039.     -4.000    
                     -0.8096E-01 0.1778      9.060      8.570     -4904.    

                      -4.000    -0.1195    -0.6847      8.829      9.053    
                      -6912.     -4.000    -0.1010E-02-0.7163      9.590    
                       8.833     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       57
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       58
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      161     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -49.5148       49.5148       230.428       279.943    
   2  0.104884      -2.25490      -39.3282       39.3282       230.875       270.204    
   3  0.784254     -0.243023      -4.23860       4.23860       231.092       235.331    
   4  0.813133     -0.206861      -3.60790       3.60790       225.404       229.012    
   5  0.490778     -0.711764      -12.4140       12.4140       230.690       243.104    
   6  0.168573      -1.78039      -31.0520       31.0520       228.831       259.883    
   7  0.450161     -0.798149      -13.9207       13.9207       227.866       241.787    
   8  0.828233     -0.188461      -3.28698       3.28698       230.302       233.589    
   9  0.994731     -0.528342E-02 -0.921492E-01  0.921492E-01   233.901       233.993    
  10  0.813340     -0.206606      -3.60346       3.60346       231.168       234.771    
  11  0.776133     -0.253432      -4.42015       4.42015       230.194       234.614    
  12  0.729556     -0.315319      -5.49953       5.49953       229.684       235.184    
  13  0.530451     -0.634028      -11.0582       11.0582       233.051       244.109    
  14  0.752564E-01  -2.58685      -45.1178       45.1178       232.424       277.542    
  15  0.918457     -0.850597E-01  -1.48354       1.48354       232.165       233.649    
  16  0.162642      -1.81621      -31.6768       31.6768       229.399       261.076    
  17  0.725851     -0.320411      -5.58834       5.58834       237.230       242.819    
  18  0.322292      -1.13230      -19.7486       19.7486       238.219       257.967    
  19  0.838064     -0.176661      -3.08118       3.08118       228.957       232.038    
  20  0.346062E-01  -3.36372      -58.6673       58.6673       242.147       300.814    
  21  0.442915     -0.814377      -14.2037       14.2037       235.121       249.324    
  22  0.143708      -1.93997      -33.8354       33.8354       232.919       266.755    
  23  0.940845     -0.609769E-01  -1.06351       1.06351       228.088       229.152    
  24  0.972503     -0.278816E-01 -0.486289      0.486289       226.781       227.267    
  25  0.291831      -1.23158      -21.4802       21.4802       233.629       255.109    
  26  0.211976      -1.55128      -27.0562       27.0562       235.642       262.698    
  27  0.695427     -0.363229      -6.33515       6.33515       235.302       241.637    
  28  0.982540E-01  -2.32020      -40.4670       40.4670       228.932       269.399    
  29  0.730742     -0.313695      -5.47121       5.47121       232.495       237.966    
  30  0.417794     -0.872766      -15.2221       15.2221       235.037       250.259    
  31  0.868385     -0.141121      -2.46131       2.46131       232.549       235.010    
  32  0.300897      -1.20099      -20.9466       20.9466       232.927       253.873    
  33  0.917219     -0.864093E-01  -1.50708       1.50708       241.078       242.585    
  34  0.304394      -1.18943      -20.7451       20.7451       245.535       266.280    
  35  0.856500     -0.154901      -2.70167       2.70167       231.270       233.972    
  36  0.310652      -1.16908      -20.3902       20.3902       229.951       250.342    
  37  0.846275     -0.166911      -2.91113       2.91113       236.949       239.860    
  38  0.206825      -1.57588      -27.4853       27.4853       236.183       263.668    
  39  0.606376     -0.500256      -8.72506       8.72506       234.506       243.231    
  40  0.840015     -0.174336      -3.04062       3.04062       237.593       240.633    
  41  0.348835      -1.05315      -18.3683       18.3683       237.477       255.846    
  42  0.857325     -0.153939      -2.68487       2.68487       237.852       240.537    
  43  0.308035E-01  -3.48013      -60.6976       60.6976       238.991       299.689    
  44  0.400632     -0.914711      -15.9536       15.9536       231.049       247.003    
  45  0.242237      -1.41784      -24.7288       24.7288       233.474       258.203    
  46  0.407771     -0.897050      -15.6456       15.6456       251.165       266.811    
  47  0.430691     -0.842364      -14.6918       14.6918       232.113       246.804    
  48  0.415503     -0.878266      -15.3180       15.3180       225.257       240.575    
  49  0.593575     -0.521591      -9.09717       9.09717       230.021       239.118    
  50  0.973620     -0.267342E-01 -0.466276      0.466276       239.319       239.785    
  51  0.510257     -0.672840      -11.7351       11.7351       264.623       276.358    
  52  0.796475     -0.227560      -3.96891       3.96891       228.288       232.257    
loop,thermsimp(1:2)       58   49.5148       39.3282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163        228.68          1.23          1.03         23.83          0.27          0.04         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164        227.81          0.96          0.99         23.78          0.50          0.04         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       58
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       59
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      163     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -19.3347       19.3347       226.781       246.116    
   2  0.939148     -0.627826E-01  -1.09500       1.09500       225.404       226.499    
   3  0.130906      -2.03328      -35.4628       35.4628       228.088       263.551    
   4  0.664370     -0.408916      -7.13198       7.13198       228.957       236.089    
   5  0.490908     -0.711498      -12.4094       12.4094       228.288       240.697    
   6  0.711731     -0.340055      -5.93096       5.93096       230.302       236.233    
   7  0.676080     -0.391444      -6.82725       6.82725       232.165       238.993    
   8  0.611139     -0.492432      -8.58859       8.58859       231.270       239.859    
   9  0.614246     -0.487359      -8.50012       8.50012       233.901       242.401    
  10  0.988045     -0.120275E-01 -0.209775      0.209775       230.194       230.404    
  11  0.232883      -1.45722      -25.4156       25.4156       231.168       256.583    
  12  0.450825     -0.796675      -13.8950       13.8950       232.549       246.444    
  13  0.493319     -0.706599      -12.3239       12.3239       229.684       242.008    
  14  0.191184      -1.65452      -28.8568       28.8568       231.092       259.949    
  15  0.894136     -0.111897      -1.95162       1.95162       232.495       234.447    
  16  0.391751     -0.937128      -16.3446       16.3446       230.021       246.365    
  17  0.236278      -1.44275      -25.1632       25.1632       239.319       264.482    
  18  0.496874E-01  -3.00200      -52.3585       52.3585       236.949       289.308    
  19  0.784524     -0.242678      -4.23260       4.23260       237.852       242.085    
  20  0.292328      -1.22988      -21.4506       21.4506       225.257       246.708    
  21  0.832247E-01  -2.48621      -43.3625       43.3625       237.593       280.955    
  22  0.423133     -0.860069      -15.0006       15.0006       235.302       250.303    
  23  0.234472      -1.45042      -25.2970       25.2970       227.866       253.163    
  24  0.868463     -0.141031      -2.45974       2.45974       241.078       243.538    
  25  0.122969      -2.09582      -36.5536       36.5536       237.230       273.784    
  26  0.811771     -0.208537      -3.63713       3.63713       230.690       234.327    
  27  0.786834     -0.239738      -4.18132       4.18132       234.506       238.687    
  28  0.163144      -1.81312      -31.6230       31.6230       233.051       264.673    
  29  0.571103     -0.560186      -9.77031       9.77031       232.113       241.883    
  30  0.769982     -0.261388      -4.55891       4.55891       231.049       235.608    
  31  0.471769     -0.751265      -13.1030       13.1030       235.121       248.224    
  32  0.584935     -0.536254      -9.35291       9.35291       235.037       244.390    
  33  0.416140     -0.876734      -15.2913       15.2913       229.951       245.243    
  34  0.106525E-01  -4.54196      -79.2172       79.2172       232.927       312.144    
  35  0.595424     -0.518482      -9.04294       9.04294       233.629       242.672    
  36  0.302400      -1.19600      -20.8597       20.8597       237.477       258.337    
  37  0.629701     -0.462510      -8.06672       8.06672       238.219       246.286    
  38  0.939026E-01  -2.36550      -41.2571       41.2571       233.474       274.731    
  39  0.911727     -0.924151E-01  -1.61183       1.61183       228.831       230.443    
  40  0.289502      -1.23959      -21.6200       21.6200       229.399       251.019    
  41  0.326571      -1.11911      -19.5186       19.5186       235.642       255.161    
  42  0.972366     -0.280231E-01 -0.488755      0.488755       236.183       236.672    
  43  0.823413     -0.194297      -3.38877       3.38877       245.535       248.924    
  44  0.790717     -0.234815      -4.09545       4.09545       232.919       237.015    
  45  0.167922      -1.78426      -31.1196       31.1196       251.165       282.284    
  46  0.804665     -0.217329      -3.79048       3.79048       228.932       232.723    
  47  0.154714      -1.86617      -32.5483       32.5483       230.875       263.424    
  48  0.240456      -1.42522      -24.8575       24.8575       264.623       289.480    
  49  0.351787      -1.04473      -18.2213       18.2213       232.424       250.645    
  50  0.666429E-01  -2.70841      -47.2378       47.2378       230.428       277.666    
  51  0.484113     -0.725437      -12.6525       12.6525       238.991       251.644    
  52  0.298509      -1.20896      -21.0856       21.0856       227.808       248.894    
loop,thermsimp(1:2)       59   19.3347       1.09500    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165        228.54          1.07          0.98         23.45          0.91          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166        229.31          1.03          0.99         23.89          0.31          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       59
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       60
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      165     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -20.7599       20.7599       225.404       246.164    
   2  0.843344     -0.170380      -2.97163       2.97163       230.194       233.166    
   3  0.457815     -0.781289      -13.6266       13.6266       228.831       242.458    
   4  0.933709     -0.685899E-01  -1.19629       1.19629       228.932       230.129    
   5  0.887159     -0.119731      -2.08824       2.08824       230.690       232.778    
   6  0.786211     -0.240530      -4.19513       4.19513       232.495       236.690    
   7  0.794803     -0.229661      -4.00556       4.00556       231.049       235.055    
   8  0.573435E-01  -2.85870      -49.8591       49.8591       228.957       278.816    
   9  0.647106     -0.435245      -7.59118       7.59118       230.302       237.893    
  10  0.110118      -2.20620      -38.4788       38.4788       236.183       274.662    
  11  0.339548      -1.08014      -18.8389       18.8389       232.919       251.758    
  12  0.635246     -0.453742      -7.91381       7.91381       234.506       242.420    
  13  0.488392     -0.716638      -12.4990       12.4990       232.165       244.664    
  14  0.602571     -0.506549      -8.83482       8.83482       231.270       240.105    
  15  0.710041     -0.342433      -5.97244       5.97244       228.288       234.260    
  16  0.585763     -0.534840      -9.32825       9.32825       232.113       241.441    
  17  0.288010      -1.24476      -21.7101       21.7101       229.684       251.395    
  18  0.455238     -0.786934      -13.7251       13.7251       237.852       251.577    
  19  0.723984     -0.322986      -5.63326       5.63326       233.901       239.534    
  20  0.554067     -0.590470      -10.2985       10.2985       233.629       243.927    
  21  0.646516     -0.436157      -7.60709       7.60709       241.078       248.685    
  22  0.271985      -1.30201      -22.7086       22.7086       235.037       257.746    
  23  0.901636E-02  -4.70871      -82.1256       82.1256       229.951       312.077    
  24  0.383616     -0.958114      -16.7107       16.7107       226.781       243.492    
  25  0.443516     -0.813022      -14.1801       14.1801       238.219       252.399    
  26  0.223023      -1.50048      -26.1702       26.1702       230.021       256.191    
  27  0.123255      -2.09350      -36.5131       36.5131       232.549       269.062    
  28  0.817485     -0.201523      -3.51480       3.51480       225.257       228.772    
  29  0.333893      -1.09693      -19.1318       19.1318       235.121       254.252    
  30  0.867877     -0.141706      -2.47152       2.47152       227.808       230.279    
  31  0.365747      -1.00581      -17.5426       17.5426       245.535       263.078    
  32  0.429445     -0.845262      -14.7424       14.7424       235.302       250.045    
  33  0.856620     -0.154761      -2.69922       2.69922       232.424       235.123    
  34  0.729532     -0.315352      -5.50012       5.50012       229.399       234.899    
  35  0.315845      -1.15251      -20.1011       20.1011       238.991       259.092    
  36  0.547596     -0.602217      -10.5034       10.5034       227.866       238.369    
  37  0.752130     -0.284846      -4.96806       4.96806       235.642       240.610    
  38  0.806451     -0.215112      -3.75181       3.75181       231.168       234.919    
  39  0.618613     -0.480275      -8.37657       8.37657       237.477       245.854    
  40  0.630350     -0.461480      -8.04875       8.04875       231.092       239.141    
  41  0.251741      -1.37935      -24.0576       24.0576       230.875       254.933    
  42  0.846504     -0.166640      -2.90640       2.90640       228.088       230.994    
  43  0.830791     -0.185377      -3.23319       3.23319       239.319       242.552    
  44  0.566838     -0.567681      -9.90103       9.90103       233.051       242.952    
  45  0.499450E-01  -2.99683      -52.2683       52.2683       237.230       289.499    
  46  0.976301     -0.239838E-01 -0.418307      0.418307       233.474       233.892    
  47  0.401049     -0.913672      -15.9355       15.9355       230.428       246.364    
  48  0.709931E-01  -2.64517      -46.1350       46.1350       237.593       283.728    
  49  0.920370E-02  -4.68815      -81.7669       81.7669       251.165       332.932    
  50  0.379723     -0.968314      -16.8886       16.8886       236.949       253.838    
  51  0.207569      -1.57229      -27.4227       27.4227       264.623       292.045    
  52  0.745673     -0.293468      -5.11843       5.11843       228.537       233.655    
loop,thermsimp(1:2)       60   20.7599       2.97163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167        228.96          1.02          0.98         23.66          0.67          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168        247.24          1.04          0.99         24.04          0.24          0.05         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       60
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       61
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      167     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -3.25649       3.25649       225.257       228.514    
   2  0.735850     -0.306729      -5.34972       5.34972       228.932       234.282    
   3  0.828786     -0.187793      -3.27534       3.27534       227.808       231.083    
   4  0.592078     -0.524118      -9.14123       9.14123       228.088       237.229    
   5  0.691797E-01  -2.67105      -46.5863       46.5863       230.690       277.276    
   6  0.772335     -0.258337      -4.50570       4.50570       230.194       234.700    
   7  0.504563     -0.684063      -11.9309       11.9309       228.537       240.468    
   8  0.700615     -0.355797      -6.20552       6.20552       233.474       239.679    
   9  0.764596     -0.268408      -4.68135       4.68135       228.288       232.969    
  10  0.459614     -0.777368      -13.5582       13.5582       229.399       242.958    
  11  0.931193     -0.712882E-01  -1.24335       1.24335       231.168       232.411    
  12  0.502482E-01  -2.99078      -52.1628       52.1628       231.049       283.212    
  13  0.498197     -0.696760      -12.1523       12.1523       232.424       244.576    
  14  0.551534E-01  -2.89764      -50.5382       50.5382       232.495       283.033    
  15  0.172209      -1.75905      -30.6799       30.6799       230.302       260.982    
  16  0.238868E-01  -3.73443      -65.1329       65.1329       227.866       292.999    
  17  0.699366     -0.357581      -6.23663       6.23663       231.092       237.329    
  18  0.764093     -0.269066      -4.69284       4.69284       233.901       238.594    
  19  0.465633     -0.764357      -13.3313       13.3313       231.270       244.601    
  20  0.209906      -1.56110      -27.2274       27.2274       235.642       262.869    
  21  0.216891      -1.52836      -26.6564       26.6564       232.113       258.769    
  22  0.795854E-01  -2.53092      -44.1423       44.1423       234.506       278.648    
  23  0.701683     -0.354273      -6.17895       6.17895       228.831       235.010    
  24  0.574425     -0.554385      -9.66913       9.66913       239.319       248.988    
  25  0.674968     -0.393090      -6.85595       6.85595       233.051       239.906    
  26  0.684189     -0.379521      -6.61930       6.61930       226.781       233.400    
  27  0.541862     -0.612745      -10.6870       10.6870       233.629       244.316    
  28  0.668027     -0.403426      -7.03623       7.03623       232.165       239.202    
  29  0.353251      -1.04058      -18.1489       18.1489       237.477       255.626    
  30  0.778708     -0.250119      -4.36238       4.36238       225.404       229.767    
  31  0.829283     -0.187194      -3.26489       3.26489       230.428       233.693    
  32  0.679297     -0.386697      -6.74445       6.74445       241.078       247.823    
  33  0.536301     -0.623060      -10.8669       10.8669       235.302       246.169    
  34  0.247738      -1.39538      -24.3371       24.3371       229.684       254.022    
  35  0.271399      -1.30416      -22.7462       22.7462       237.852       260.598    
  36  0.284124      -1.25835      -21.9471       21.9471       232.919       254.867    
  37  0.664442     -0.408808      -7.13010       7.13010       238.219       245.349    
  38  0.874508     -0.134094      -2.33875       2.33875       236.949       239.288    
  39  0.916444     -0.872538E-01  -1.52181       1.52181       235.121       236.642    
  40  0.295165      -1.22022      -21.2821       21.2821       230.875       252.158    
  41  0.242592      -1.41637      -24.7032       24.7032       230.021       254.724    
  42  0.396124     -0.926028      -16.1510       16.1510       235.037       251.188    
  43  0.509193E-01  -2.97751      -51.9314       51.9314       238.991       290.923    
  44  0.778911     -0.249858      -4.35782       4.35782       245.535       249.893    
  45  0.351009      -1.04694      -18.2599       18.2599       232.549       250.809    
  46  0.480934     -0.732025      -12.7674       12.7674       236.183       248.951    
  47  0.908579     -0.958731E-01  -1.67214       1.67214       228.957       230.629    
  48  0.898885     -0.106600      -1.85923       1.85923       237.593       239.452    
  49  0.561121     -0.577819      -10.0778       10.0778       237.230       247.308    
  50  0.851109     -0.161215      -2.81179       2.81179       264.623       267.434    
  51  0.975854     -0.244425E-01 -0.426306      0.426306       229.951       230.378    
  52  0.187829      -1.67223      -29.1656       29.1656       228.959       258.124    
loop,thermsimp(1:2)       61   3.25649       5.34972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169        255.46          1.05          0.98         23.75          0.50          0.05         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    255.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       61
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       62
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      168     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -1.50372       1.50372       225.257       226.761    
   2  0.899579E-01  -2.40841      -42.0056       42.0056       225.404       267.410    
   3  0.997625     -0.237830E-02 -0.414804E-01  0.414804E-01   229.951       229.993    
   4  0.224083      -1.49574      -26.0875       26.0875       228.957       255.044    
   5  0.120769      -2.11388      -36.8686       36.8686       227.808       264.676    
   6  0.302676E-01  -3.49768      -61.0036       61.0036       231.168       292.171    
   7  0.315161      -1.15467      -20.1388       20.1388       228.288       248.427    
   8  0.155895      -1.85857      -32.4157       32.4157       226.781       259.197    
   9  0.467639     -0.760060      -13.2563       13.2563       230.428       243.685    
  10  0.277823      -1.28077      -22.3381       22.3381       228.932       251.270    
  11  0.712282     -0.339281      -5.91746       5.91746       230.194       236.112    
  12  0.929560     -0.730437E-01  -1.27397       1.27397       228.831       230.105    
  13  0.499024     -0.695101      -12.1234       12.1234       235.121       247.244    
  14  0.940347     -0.615066E-01  -1.07275       1.07275       228.088       229.161    
  15  0.714006     -0.336864      -5.87531       5.87531       231.092       236.968    
  16  0.162603      -1.81644      -31.6809       31.6809       233.901       265.582    
  17  0.663729     -0.409881      -7.14881       7.14881       232.165       239.314    
  18  0.314148      -1.15789      -20.1950       20.1950       236.949       257.144    
  19  0.497386     -0.698388      -12.1807       12.1807       237.593       249.773    
  20  0.368387     -0.998622      -17.4172       17.4172       233.474       250.891    
  21  0.326342      -1.11981      -19.5308       19.5308       233.051       252.581    
  22  0.442952     -0.814294      -14.2023       14.2023       228.537       242.739    
  23  0.929694     -0.729000E-01  -1.27146       1.27146       229.399       230.671    
  24  0.945450E-01  -2.35868      -41.1382       41.1382       233.629       274.767    
  25  0.407158     -0.898555      -15.6719       15.6719       232.424       248.096    
  26  0.706679     -0.347179      -6.05522       6.05522       231.270       237.325    
  27  0.657848     -0.418781      -7.30405       7.30405       238.219       245.523    
  28  0.968040     -0.324817E-01 -0.566520      0.566520       235.302       235.869    
  29  0.330387      -1.10749      -19.3159       19.3159       237.230       256.546    
  30  0.756161     -0.279501      -4.87483       4.87483       241.078       245.953    
  31  0.307772      -1.17840      -20.5526       20.5526       236.183       256.736    
  32  0.759008E-01  -2.57833      -44.9691       44.9691       239.319       284.288    
  33  0.615618E-01  -2.78771      -48.6210       48.6210       245.535       294.156    
  34  0.545984     -0.605166      -10.5548       10.5548       232.549       243.104    
  35  0.339865      -1.07921      -18.8226       18.8226       235.037       253.860    
  36  0.816477     -0.202757      -3.53632       3.53632       230.875       234.412    
  37  0.932889     -0.694691E-01  -1.21162       1.21162       229.684       230.896    
  38  0.667042     -0.404902      -7.06197       7.06197       230.021       237.083    
  39  0.583049     -0.539484      -9.40924       9.40924       232.919       242.329    
  40  0.210192      -1.55973      -27.2036       27.2036       237.477       264.681    
  41  0.158846      -1.83982      -32.0887       32.0887       228.959       261.047    
  42  0.360401      -1.02054      -17.7994       17.7994       232.113       249.912    
  43  0.508154     -0.676971      -11.8072       11.8072       237.852       249.659    
  44  0.873303     -0.135473      -2.36281       2.36281       230.302       232.665    
  45  0.650524     -0.429977      -7.49932       7.49932       235.642       243.141    
  46  0.805601     -0.216166      -3.77019       3.77019       264.623       268.393    
  47  0.312590E-03  -8.07062      -140.761       140.761       230.690       371.451    
  48  0.892261     -0.113997      -1.98824       1.98824       234.506       236.494    
  49  0.504672     -0.683846      -11.9271       11.9271       232.495       244.422    
  50  0.269834      -1.30995      -22.8470       22.8470       231.049       253.896    
  51  0.752889     -0.283838      -4.95047       4.95047       238.991       243.942    
  52  0.952800     -0.483498E-01 -0.843278      0.843278       255.461       256.305    
loop,thermsimp(1:2)       62   1.50372       42.0056    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170        229.14          1.02          0.98         23.75          0.47          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    171        230.45          1.02          0.99         24.04          0.20          0.06         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       62
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       63
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      170     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -8.41659       8.41659       225.257       233.674    
   2  0.828850     -0.187716      -3.27398       3.27398       228.088       231.362    
   3  0.138898      -1.97402      -34.4292       34.4292       229.951       264.381    
   4  0.174947      -1.74327      -30.4048       30.4048       228.831       259.236    
   5  0.452367E-01  -3.09585      -53.9953       53.9953       229.399       283.395    
   6  0.982229     -0.179305E-01 -0.312729      0.312729       229.684       229.997    
   7  0.855728     -0.155803      -2.71739       2.71739       230.302       233.020    
   8  0.350750      -1.04768      -18.2728       18.2728       230.875       249.148    
   9  0.880054     -0.127772      -2.22850       2.22850       235.302       237.531    
  10  0.106511      -2.23950      -39.0596       39.0596       230.194       269.254    
  11  0.336060      -1.09047      -19.0190       19.0190       234.506       253.525    
  12  0.904819     -0.100020      -1.74447       1.74447       231.092       232.837    
  13  0.765597     -0.267099      -4.65852       4.65852       230.021       234.679    
  14  0.551789     -0.594589      -10.3703       10.3703       231.270       241.641    
  15  0.832435     -0.183400      -3.19871       3.19871       232.165       235.364    
  16  0.353494      -1.03989      -18.1369       18.1369       232.919       251.056    
  17  0.510104     -0.673140      -11.7404       11.7404       228.537       240.277    
  18  0.523162     -0.647863      -11.2995       11.2995       232.549       243.849    
  19  0.953043     -0.480957E-01 -0.838846      0.838846       235.642       236.481    
  20  0.267001E-01  -3.62309      -63.1909       63.1909       230.428       293.619    
  21  0.280924      -1.26967      -22.1446       22.1446       238.991       261.136    
  22  0.956868     -0.440901E-01 -0.768984      0.768984       232.495       233.264    
  23  0.779725     -0.248814      -4.33961       4.33961       238.219       242.558    
  24  0.901061     -0.104183      -1.81707       1.81707       241.078       242.895    
  25  0.533391     -0.628501      -10.9618       10.9618       235.121       246.082    
  26  0.642536     -0.442333      -7.71481       7.71481       232.424       240.139    
  27  0.520565E-01  -2.95543      -51.5461       51.5461       228.288       279.834    
  28  0.330080      -1.10842      -19.3322       19.3322       237.852       257.184    
  29  0.280801      -1.27011      -22.1522       22.1522       237.593       259.745    
  30  0.144013      -1.93785      -33.7984       33.7984       232.113       265.911    
  31  0.201537      -1.60178      -27.9369       27.9369       233.474       261.411    
  32  0.920188     -0.831777E-01  -1.45072       1.45072       228.932       230.383    
  33  0.747222     -0.291393      -5.08224       5.08224       233.051       238.133    
  34  0.697959     -0.359595      -6.27177       6.27177       235.037       241.309    
  35  0.492949     -0.707349      -12.3370       12.3370       231.049       243.386    
  36  0.378001     -0.972857      -16.9678       16.9678       228.957       245.925    
  37  0.936484     -0.656225E-01  -1.14453       1.14453       255.461       256.606    
  38  0.458232     -0.780381      -13.6108       13.6108       237.230       250.841    
  39  0.286796      -1.24898      -21.7838       21.7838       236.183       257.967    
  40  0.524458     -0.645389      -11.2564       11.2564       236.949       248.206    
  41  0.126679      -2.06610      -36.0352       36.0352       226.781       262.816    
  42  0.645270     -0.438086      -7.64074       7.64074       228.959       236.599    
  43  0.996049     -0.395919E-02 -0.690531E-01  0.690531E-01   227.808       227.877    
  44  0.470695     -0.753545      -13.1427       13.1427       237.477       250.620    
  45  0.783048     -0.244561      -4.26543       4.26543       233.901       238.167    
  46  0.682425     -0.382103      -6.66433       6.66433       225.404       232.068    
  47  0.623779     -0.471960      -8.23154       8.23154       264.623       272.854    
  48  0.138146      -1.97945      -34.5239       34.5239       233.629       268.153    
  49  0.317697      -1.14666      -19.9990       19.9990       239.319       259.318    
  50  0.215616      -1.53426      -26.7592       26.7592       231.168       257.927    
  51  0.392653     -0.934829      -16.3045       16.3045       245.535       261.840    
  52  0.311957      -1.16489      -20.3171       20.3171       229.140       249.457    
loop,thermsimp(1:2)       63   8.41659       3.27398    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172        231.39          1.25          1.02         23.97          0.16          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       63
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       64
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      171     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -3.53480       3.53480       227.808       231.343    
   2  0.209930      -1.56098      -27.2254       27.2254       229.684       256.910    
   3  0.710991     -0.341096      -5.94912       5.94912       228.932       234.881    
   4  0.967365     -0.331789E-01 -0.578679      0.578679       228.088       228.667    
   5  0.650635E-01  -2.73239      -47.6562       47.6562       225.404       273.060    
   6  0.578340     -0.547593      -9.55067       9.55067       231.092       240.643    
   7  0.928890E-01  -2.37635      -41.4464       41.4464       230.302       271.749    
   8  0.486974     -0.719546      -12.5497       12.5497       232.495       245.045    
   9  0.560625     -0.578703      -10.0933       10.0933       225.257       235.351    
  10  0.552834     -0.592698      -10.3374       10.3374       230.021       240.358    
  11  0.744529E-01  -2.59759      -45.3050       45.3050       232.165       277.470    
  12  0.937600     -0.644318E-01  -1.12377       1.12377       235.642       236.766    
  13  0.154459      -1.86783      -32.5771       32.5771       228.959       261.536    
  14  0.186893E-02  -6.28239      -109.572       109.572       235.302       344.875    
  15  0.250797      -1.38311      -24.1231       24.1231       233.051       257.174    
  16  0.924847E-01  -2.38071      -41.5225       41.5225       233.901       275.424    
  17  0.476680     -0.740911      -12.9224       12.9224       232.424       245.346    
  18  0.266527      -1.32228      -23.0621       23.0621       228.537       251.599    
  19  0.369755     -0.994916      -17.3525       17.3525       235.037       252.389    
  20  0.595561     -0.518252      -9.03893       9.03893       231.270       240.309    
  21  0.636070     -0.452447      -7.89122       7.89122       238.219       246.110    
  22  0.447294     -0.804540      -14.0321       14.0321       241.078       255.110    
  23  0.964945     -0.356839E-01 -0.622369      0.622369       231.049       231.671    
  24  0.752421     -0.284460      -4.96131       4.96131       232.549       237.510    
  25  0.705556     -0.348769      -6.08295       6.08295       228.957       235.040    
  26  0.943467     -0.581939E-01  -1.01497       1.01497       235.121       236.136    
  27  0.272564      -1.29988      -22.6715       22.6715       236.949       259.621    
  28  0.215815      -1.53333      -26.7431       26.7431       230.875       257.619    
  29  0.756955     -0.278452      -4.85653       4.85653       229.140       233.996    
  30  0.538381     -0.619189      -10.7994       10.7994       237.477       248.277    
  31  0.182967      -1.69845      -29.6230       29.6230       237.230       266.853    
  32  0.644758     -0.438881      -7.65460       7.65460       232.919       240.574    
  33  0.939477     -0.624320E-01  -1.08889       1.08889       234.506       235.595    
  34  0.663186     -0.410699      -7.16308       7.16308       255.461       262.624    
  35  0.795014     -0.229396      -4.00094       4.00094       237.852       241.853    
  36  0.630792     -0.460779      -8.03654       8.03654       231.168       239.204    
  37  0.151039      -1.89022      -32.9676       32.9676       236.183       269.151    
  38  0.668306     -0.403009      -7.02896       7.02896       228.831       235.860    
  39  0.683820     -0.380061      -6.62872       6.62872       239.319       245.948    
  40  0.122229      -2.10186      -36.6589       36.6589       237.593       274.252    
  41  0.664453     -0.408791      -7.12979       7.12979       238.991       246.121    
  42  0.548687     -0.600228      -10.4687       10.4687       233.474       243.943    
  43  0.931535     -0.709210E-01  -1.23695       1.23695       245.535       246.772    
  44  0.139742      -1.96796      -34.3235       34.3235       226.781       261.105    
  45  0.429142     -0.845967      -14.7547       14.7547       229.951       244.706    
  46  0.531147     -0.632717      -11.0353       11.0353       232.113       243.148    
  47  0.575558     -0.552416      -9.63479       9.63479       233.629       243.264    
  48  0.336537      -1.08905      -18.9943       18.9943       230.194       249.188    
  49  0.324486      -1.12551      -19.6303       19.6303       264.623       284.253    
  50  0.652768     -0.426534      -7.43925       7.43925       228.288       235.727    
  51  0.537860     -0.620158      -10.8163       10.8163       229.399       240.216    
  52  0.415288     -0.878782      -15.3270       15.3270       231.389       246.716    
loop,thermsimp(1:2)       64   3.53480       27.2254    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173        227.11          1.01          0.98         23.67          0.61          0.06         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    174        234.18          1.03          1.01         24.03          0.19          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       64
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       65
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      173     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -17.4581       17.4581       228.088       245.546    
   2  0.298218      -1.20993      -21.1026       21.1026       227.808       248.911    
   3  0.374092     -0.983254      -17.1491       17.1491       231.049       248.198    
   4  0.417366     -0.873791      -15.2400       15.2400       229.140       244.380    
   5  0.299382      -1.20604      -21.0347       21.0347       228.932       249.967    
   6  0.373029     -0.986099      -17.1987       17.1987       228.957       246.156    
   7  0.628224     -0.464858      -8.10768       8.10768       225.257       233.365    
   8  0.111397      -2.19465      -38.2774       38.2774       234.506       272.783    
   9  0.983555     -0.165818E-01 -0.289206      0.289206       228.288       228.577    
  10  0.394578     -0.929938      -16.2192       16.2192       228.831       245.050    
  11  0.410639     -0.890042      -15.5234       15.5234       235.121       250.644    
  12  0.700680     -0.355705      -6.20391       6.20391       235.642       241.846    
  13  0.223946      -1.49635      -26.0982       26.0982       232.549       258.647    
  14  0.651113E-01  -2.73166      -47.6434       47.6434       231.168       278.811    
  15  0.704010     -0.350963      -6.12121       6.12121       229.399       235.520    
  16  0.172411      -1.75787      -30.6594       30.6594       231.270       261.930    
  17  0.567412     -0.566670      -9.88340       9.88340       230.021       239.904    
  18  0.186334      -1.68021      -29.3049       29.3049       232.919       262.224    
  19  0.677524     -0.389310      -6.79004       6.79004       231.092       237.882    
  20  0.362270      -1.01537      -17.7092       17.7092       237.852       255.561    
  21  0.603880     -0.504381      -8.79700       8.79700       232.113       240.910    
  22  0.782208     -0.245635      -4.28416       4.28416       233.629       237.913    
  23  0.129808      -2.04170      -35.6097       35.6097       233.474       269.084    
  24  0.284816      -1.25591      -21.9046       21.9046       229.951       251.856    
  25  0.246930      -1.39865      -24.3941       24.3941       232.495       256.889    
  26  0.256917      -1.35900      -23.7026       23.7026       232.424       256.126    
  27  0.240545      -1.42485      -24.8511       24.8511       239.319       264.170    
  28  0.218018      -1.52318      -26.5660       26.5660       238.219       264.785    
  29  0.235583E-01  -3.74828      -65.3744       65.3744       238.991       304.366    
  30  0.114660      -2.16578      -37.7738       37.7738       231.389       269.163    
  31  0.119129      -2.12755      -37.1070       37.1070       245.535       282.642    
  32  0.471707     -0.751398      -13.1053       13.1053       237.477       250.583    
  33  0.607413     -0.498546      -8.69523       8.69523       230.194       238.889    
  34  0.568731     -0.564347      -9.84288       9.84288       228.537       238.380    
  35  0.587492     -0.531893      -9.27685       9.27685       235.037       244.314    
  36  0.411259     -0.888533      -15.4971       15.4971       241.078       256.575    
  37  0.836192     -0.178897      -3.12017       3.12017       229.684       232.805    
  38  0.152977      -1.87747      -32.7452       32.7452       233.051       265.796    
  39  0.941831     -0.599291E-01  -1.04523       1.04523       230.875       231.921    
  40  0.936595     -0.655045E-01  -1.14248       1.14248       236.949       238.092    
  41  0.856621     -0.154759      -2.69919       2.69919       226.781       229.480    
  42  0.484786     -0.724047      -12.6282       12.6282       228.959       241.587    
  43  0.188261      -1.66993      -29.1255       29.1255       255.461       284.587    
  44  0.957606     -0.433189E-01 -0.755534      0.755534       237.230       237.986    
  45  0.234891      -1.44863      -25.2659       25.2659       236.183       261.449    
  46  0.758920     -0.275858      -4.81130       4.81130       230.302       235.114    
  47  0.135340      -1.99997      -34.8818       34.8818       225.404       260.286    
  48  0.779121E-01  -2.55217      -44.5129       44.5129       237.593       282.106    
  49  0.573767     -0.555531      -9.68912       9.68912       233.901       243.590    
  50  0.982512     -0.176424E-01 -0.307704      0.307704       232.165       232.473    
  51  0.109579      -2.21111      -38.5644       38.5644       264.623       303.187    
  52  0.714543     -0.336113      -5.86220       5.86220       227.112       232.974    
loop,thermsimp(1:2)       65   17.4581       21.1026    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175        227.51          1.04          0.99         23.97          0.27          0.05         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    176        230.03          1.05          1.00         23.91          0.20          0.05         26.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       65
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       66
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      175     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -23.8017       23.8017       228.288       252.090    
   2  0.513427E-01  -2.96923      -51.7869       51.7869       226.781       278.568    
   3  0.288453      -1.24322      -21.6833       21.6833       230.875       252.559    
   4  0.107044      -2.23452      -38.9726       38.9726       232.165       271.138    
   5  0.756779     -0.278684      -4.86058       4.86058       229.684       234.545    
   6  0.333762      -1.09733      -19.1387       19.1387       227.112       246.250    
   7  0.270335      -1.30809      -22.8147       22.8147       225.257       248.072    
   8  0.666278E-01  -2.70863      -47.2418       47.2418       230.302       277.544    
   9  0.517510     -0.658727      -11.4890       11.4890       229.399       240.888    
  10  0.719680     -0.328949      -5.73726       5.73726       231.092       236.830    
  11  0.401542     -0.912442      -15.9141       15.9141       233.629       249.543    
  12  0.408125     -0.896181      -15.6305       15.6305       237.230       252.861    
  13  0.481086     -0.731710      -12.7619       12.7619       236.949       249.711    
  14  0.166952E-01  -4.09263      -71.3804       71.3804       228.537       299.917    
  15  0.913266     -0.907286E-01  -1.58241       1.58241       230.194       231.777    
  16  0.972084     -0.283134E-01 -0.493820      0.493820       230.021       230.514    
  17  0.889421     -0.117184      -2.04383       2.04383       232.113       234.156    
  18  0.171754      -1.76169      -30.7260       30.7260       228.959       259.685    
  19  0.925876     -0.770155E-01  -1.34324       1.34324       235.642       236.985    
  20  0.992897     -0.712866E-02 -0.124332      0.124332       233.901       234.025    
  21  0.118575E-01  -4.43479      -77.3481       77.3481       235.037       312.385    
  22  0.492413     -0.708438      -12.3560       12.3560       229.140       241.496    
  23  0.952433     -0.487360E-01 -0.850014      0.850014       228.831       229.681    
  24  0.591826     -0.524543      -9.14865       9.14865       228.088       237.237    
  25  0.762199     -0.271548      -4.73611       4.73611       228.957       233.693    
  26  0.613492     -0.488588      -8.52156       8.52156       231.049       239.571    
  27  0.134863      -2.00350      -34.9434       34.9434       227.808       262.751    
  28  0.633670     -0.456227      -7.95713       7.95713       228.932       236.889    
  29  0.829625     -0.186782      -3.25770       3.25770       237.477       240.735    
  30  0.148219      -1.90906      -33.2963       33.2963       235.121       268.417    
  31  0.198093      -1.61902      -28.2376       28.2376       229.951       258.189    
  32  0.321318      -1.13532      -19.8014       19.8014       237.852       257.654    
  33  0.475408     -0.743582      -12.9689       12.9689       232.424       245.393    
  34  0.196520      -1.62699      -28.3767       28.3767       241.078       269.455    
  35  0.637413     -0.450337      -7.85442       7.85442       232.495       240.350    
  36  0.596751     -0.516255      -9.00410       9.00410       232.549       241.553    
  37  0.351361      -1.04594      -18.2425       18.2425       225.404       243.647    
  38  0.111764      -2.19136      -38.2200       38.2200       236.183       274.403    
  39  0.213579      -1.54375      -26.9248       26.9248       231.270       258.195    
  40  0.799647     -0.223585      -3.89960       3.89960       232.919       236.819    
  41  0.670682     -0.399460      -6.96706       6.96706       239.319       246.286    
  42  0.104235      -2.26111      -39.4364       39.4364       238.219       277.655    
  43  0.607160E-01  -2.80155      -48.8623       48.8623       233.051       281.913    
  44  0.462312     -0.771516      -13.4562       13.4562       233.474       246.930    
  45  0.269658      -1.31060      -22.8584       22.8584       231.389       254.248    
  46  0.678606     -0.387714      -6.76219       6.76219       234.506       241.268    
  47  0.669051     -0.401895      -7.00953       7.00953       231.168       238.177    
  48  0.551912     -0.594367      -10.3665       10.3665       237.593       247.959    
  49  0.116070E-01  -4.45614      -77.7205       77.7205       245.535       323.256    
  50  0.911337     -0.928428E-01  -1.61929       1.61929       255.461       257.081    
  51  0.302404      -1.19599      -20.8595       20.8595       264.623       285.482    
  52  0.527926     -0.638800      -11.1414       11.1414       227.512       238.653    
loop,thermsimp(1:2)       66   23.8017       51.7869    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177        231.77          1.05          0.98         23.85          0.48          0.06         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178        624.78          1.01          1.00         24.13          0.12          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       66
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       67
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      177     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -21.1205       21.1205       228.831       249.952    
   2  0.840396     -0.173882      -3.03270       3.03270       230.021       233.053    
   3  0.165782      -1.79708      -31.3432       31.3432       230.194       261.537    
   4  0.516202E-01  -2.96384      -51.6929       51.6929       228.957       280.650    
   5  0.163201      -1.81278      -31.6170       31.6170       233.901       265.518    
   6  0.201529      -1.60182      -27.9376       27.9376       232.113       260.050    
   7  0.791805     -0.233441      -4.07148       4.07148       229.684       233.756    
   8  0.306466      -1.18265      -20.6268       20.6268       232.919       253.546    
   9  0.625963     -0.468465      -8.17058       8.17058       231.092       239.263    
  10  0.255827      -1.36325      -23.7768       23.7768       228.932       252.709    
  11  0.275269      -1.29001      -22.4993       22.4993       235.642       258.141    
  12  0.546374     -0.604451      -10.5423       10.5423       228.088       238.630    
  13  0.738275E-01  -2.60602      -45.4521       45.4521       231.168       276.620    
  14  0.459460     -0.777704      -13.5641       13.5641       227.512       241.076    
  15  0.245891      -1.40287      -24.4677       24.4677       231.049       255.517    
  16  0.818144E-01  -2.50330      -43.6606       43.6606       232.495       276.156    
  17  0.791963     -0.233241      -4.06800       4.06800       237.477       241.545    
  18  0.652560     -0.426852      -7.44481       7.44481       229.399       236.844    
  19  0.743237     -0.296740      -5.17549       5.17549       234.506       239.681    
  20  0.146095      -1.92350      -33.5481       33.5481       229.140       262.688    
  21  0.747148     -0.291492      -5.08397       5.08397       232.549       237.633    
  22  0.935024E-01  -2.36977      -41.3316       41.3316       225.404       266.736    
  23  0.924202     -0.788243E-01  -1.37479       1.37479       232.424       233.799    
  24  0.193934      -1.64024      -28.6077       28.6077       227.112       255.719    
  25  0.112499      -2.18481      -38.1056       38.1056       239.319       277.425    
  26  0.609079     -0.495807      -8.64747       8.64747       233.474       242.121    
  27  0.387822     -0.947210      -16.5205       16.5205       237.593       254.113    
  28  0.151976      -1.88403      -32.8598       32.8598       225.257       258.117    
  29  0.820125     -0.198299      -3.45856       3.45856       233.629       237.088    
  30  0.100865      -2.29397      -40.0096       40.0096       236.949       276.959    
  31  0.246930      -1.39865      -24.3941       24.3941       228.288       252.682    
  32  0.101973      -2.28305      -39.8190       39.8190       230.875       270.694    
  33  0.389401     -0.943145      -16.4496       16.4496       237.230       253.680    
  34  0.573635     -0.555762      -9.69315       9.69315       231.389       241.082    
  35  0.730896E-01  -2.61607      -45.6274       45.6274       255.461       301.089    
  36  0.260104      -1.34667      -23.4876       23.4876       237.852       261.340    
  37  0.562102     -0.576073      -10.0474       10.0474       229.951       239.999    
  38  0.159056      -1.83850      -32.0656       32.0656       231.270       263.336    
  39  0.779134E-02  -4.85474      -84.6725       84.6725       228.959       313.631    
  40  0.693208     -0.366425      -6.39089       6.39089       227.808       234.199    
  41  0.600279     -0.510361      -8.90131       8.90131       235.121       244.022    
  42  0.419387     -0.868962      -15.1557       15.1557       241.078       256.234    
  43  0.952036     -0.491524E-01 -0.857276      0.857276       232.165       233.023    
  44  0.613955     -0.487834      -8.50840       8.50840       236.183       244.692    
  45  0.842752     -0.171082      -2.98388       2.98388       230.302       233.286    
  46  0.733219     -0.310311      -5.41219       5.41219       238.219       243.631    
  47  0.776088     -0.253489      -4.42116       4.42116       226.781       231.202    
  48  0.965215     -0.354047E-01 -0.617499      0.617499       233.051       233.668    
  49  0.487812     -0.717826      -12.5197       12.5197       264.623       277.142    
  50  0.864492     -0.145613      -2.53966       2.53966       228.537       231.076    
  51  0.334607      -1.09480      -19.0946       19.0946       235.037       254.132    
  52  0.267438      -1.31887      -23.0026       23.0026       231.767       254.770    
loop,thermsimp(1:2)       67   21.1205       3.03270    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179        251.05          1.04          0.99         23.81          0.50          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    251.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       67
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       68
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      178     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -81.3193       81.3193       228.537       309.856    
   2  0.714357     -0.336373      -5.86674       5.86674       226.781       232.648    
   3  0.997096     -0.290808E-02 -0.507205E-01  0.507205E-01   232.165       232.216    
   4  0.905437     -0.993373E-01  -1.73256       1.73256       230.021       231.753    
   5  0.307060      -1.18071      -20.5930       20.5930       230.302       250.895    
   6  0.179061      -1.72003      -29.9993       29.9993       233.051       263.050    
   7  0.384312     -0.956301      -16.6790       16.6790       229.684       246.363    
   8  0.901101     -0.104138      -1.81630       1.81630       232.424       234.240    
   9  0.606170     -0.500594      -8.73095       8.73095       227.808       236.539    
  10  0.515234     -0.663133      -11.5658       11.5658       229.399       240.965    
  11  0.639447     -0.447152      -7.79886       7.79886       233.629       241.428    
  12  0.820429     -0.197928      -3.45209       3.45209       232.549       236.001    
  13  0.521739     -0.650587      -11.3470       11.3470       228.088       239.435    
  14  0.767979     -0.263993      -4.60435       4.60435       231.092       235.697    
  15  0.530366     -0.634187      -11.0610       11.0610       234.506       245.567    
  16  0.732471     -0.311332      -5.43000       5.43000       229.951       235.382    
  17  0.440461     -0.819933      -14.3006       14.3006       227.512       241.812    
  18  0.595715     -0.517993      -9.03441       9.03441       231.389       240.424    
  19  0.407958     -0.896592      -15.6376       15.6376       237.477       253.115    
  20  0.544683     -0.607550      -10.5964       10.5964       233.474       244.070    
  21  0.611386E-01  -2.79461      -48.7414       48.7414       238.219       286.960    
  22  0.135041      -2.00218      -34.9203       34.9203       235.121       270.041    
  23  0.547242     -0.602864      -10.5147       10.5147       236.183       246.698    
  24  0.214436      -1.53975      -26.8550       26.8550       228.831       255.686    
  25  0.340220      -1.07816      -18.8044       18.8044       228.288       247.092    
  26  0.270394      -1.30787      -22.8109       22.8109       228.932       251.743    
  27  0.605229     -0.502149      -8.75807       8.75807       232.919       241.678    
  28  0.630206     -0.461709      -8.05275       8.05275       237.230       245.283    
  29  0.942476     -0.592449E-01  -1.03330       1.03330       237.593       238.626    
  30  0.293125      -1.22716      -21.4031       21.4031       235.037       256.440    
  31  0.526210     -0.642056      -11.1982       11.1982       231.767       242.965    
  32  0.972201     -0.281927E-01 -0.491713      0.491713       231.049       231.541    
  33  0.570000     -0.562119      -9.80402       9.80402       227.112       236.916    
  34  0.752945     -0.283763      -4.94917       4.94917       241.078       246.027    
  35  0.333005      -1.09960      -19.1783       19.1783       225.257       244.436    
  36  0.430444     -0.842939      -14.7019       14.7019       235.642       250.344    
  37  0.106505      -2.23957      -39.0607       39.0607       232.113       271.173    
  38  0.327953      -1.11488      -19.4449       19.4449       237.852       257.297    
  39  0.586631     -0.533359      -9.30242       9.30242       230.194       239.497    
  40  0.563274     -0.573989      -10.0111       10.0111       229.140       239.151    
  41  0.802100     -0.220522      -3.84616       3.84616       231.270       235.116    
  42  0.594871     -0.519411      -9.05914       9.05914       233.901       242.960    
  43  0.816066     -0.203261      -3.54511       3.54511       225.404       228.949    
  44  0.170795E-01  -4.06987      -70.9835       70.9835       230.875       301.859    
  45  0.554958     -0.588864      -10.2705       10.2705       232.495       242.766    
  46  0.674023     -0.394492      -6.88040       6.88040       231.168       238.048    
  47  0.371758     -0.989512      -17.2583       17.2583       236.949       254.207    
  48  0.309440      -1.17299      -20.4584       20.4584       264.623       285.081    
  49  0.182337      -1.70190      -29.6831       29.6831       239.319       269.002    
  50  0.443504     -0.813049      -14.1805       14.1805       228.957       243.137    
  51  0.407824     -0.896918      -15.6433       15.6433       255.461       271.105    
  52  0.140254      -1.96430      -34.2597       34.2597       251.051       285.311    
loop,thermsimp(1:2)       68   81.3193       5.86674    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180        233.12          1.16          1.02         24.00          0.18          0.06         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181        267.97          1.01          0.99         23.98          0.32          0.05         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    267.97        3.089     -1.197      5.180     -100.0      1.049    
                     -0.6464      2.591     -100.0      2.582      1.360    
                       1.545    -0.7249      1.841      0.000      0.000    
                      -1.440      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000      4.361     -2.091     -5.612     -3.963    
                      -14.49     -2.581      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.    -0.1598E-01 0.3348E-01  0.000    -0.9170    
                     -0.1826    -0.3488    -0.1455    -0.1382    -0.1262    

                      -1.255    -0.7291      0.000    -0.1461E-01-0.5504E-01
                      0.8541E-01-0.1747    -0.6664E-01-0.2491    -0.2167    
                      0.1349     0.4567E-01-0.9183E-01-0.2182      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.039      9.026     -7039.     -4.000    
                     -0.5194    -0.1379      8.862      8.477     -4904.    

                      -4.000    -0.1737    -0.4043      8.724      8.995    
                      -6912.     -4.000    -0.3167    -0.4625      9.484    
                       8.728     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       68
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       69
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      180     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -11.3702       11.3702       225.404       236.774    
   2  0.554375     -0.589913      -10.2888       10.2888       231.049       241.338    
   3  0.404373     -0.905418      -15.7916       15.7916       230.021       245.812    
   4  0.632877     -0.457478      -7.97897       7.97897       232.165       240.144    
   5  0.395261     -0.928209      -16.1891       16.1891       226.781       242.970    
   6  0.715068     -0.335378      -5.84940       5.84940       232.424       238.273    
   7  0.918313     -0.852174E-01  -1.48629       1.48629       231.270       232.756    
   8  0.529514E-01  -2.93838      -51.2489       51.2489       229.951       281.200    
   9  0.284219      -1.25801      -21.9412       21.9412       231.092       253.033    
  10  0.809402     -0.211460      -3.68812       3.68812       232.549       236.237    
  11  0.604758     -0.502928      -8.77166       8.77166       227.808       236.580    
  12  0.624772     -0.470369      -8.20379       8.20379       227.112       235.315    
  13  0.622683     -0.473718      -8.26221       8.26221       231.168       239.430    
  14  0.491656     -0.709976      -12.3828       12.3828       237.593       249.976    
  15  0.823484     -0.194211      -3.38727       3.38727       229.140       232.527    
  16  0.185629E-01  -3.98659      -69.5308       69.5308       228.088       297.619    
  17  0.911253     -0.929346E-01  -1.62089       1.62089       230.194       231.815    
  18  0.825116     -0.192231      -3.35274       3.35274       231.389       234.742    
  19  0.902913     -0.102129      -1.78126       1.78126       229.399       231.181    
  20  0.869925     -0.139348      -2.43040       2.43040       233.629       236.059    
  21  0.135445      -1.99919      -34.8682       34.8682       232.919       267.788    
  22  0.516840     -0.660022      -11.5116       11.5116       227.512       239.023    
  23  0.127583      -2.05899      -35.9112       35.9112       232.495       268.406    
  24  0.237062E-01  -3.74202      -65.2653       65.2653       233.901       299.166    
  25  0.456233     -0.784753      -13.6870       13.6870       231.767       245.454    
  26  0.547397     -0.602581      -10.5097       10.5097       228.957       239.467    
  27  0.231746E-02  -6.06728      -105.821       105.821       233.474       339.295    
  28  0.467213     -0.760969      -13.2722       13.2722       225.257       238.530    
  29  0.397333     -0.922981      -16.0979       16.0979       237.230       253.328    
  30  0.291343      -1.23325      -21.5094       21.5094       234.506       256.015    
  31  0.964262     -0.363922E-01 -0.634723      0.634723       241.078       241.713    
  32  0.260485      -1.34521      -23.4620       23.4620       229.684       253.147    
  33  0.868574     -0.140902      -2.45751       2.45751       236.183       238.641    
  34  0.832573     -0.183235      -3.19583       3.19583       228.288       231.484    
  35  0.240383      -1.42552      -24.8628       24.8628       235.642       260.505    
  36  0.878342     -0.129719      -2.26245       2.26245       230.302       232.565    
  37  0.168707      -1.77959      -31.0382       31.0382       228.932       259.970    
  38  0.348015      -1.05551      -18.4094       18.4094       237.477       255.887    
  39  0.846224     -0.166971      -2.91218       2.91218       236.949       239.861    
  40  0.842580     -0.171286      -2.98743       2.98743       228.831       231.819    
  41  0.230401      -1.46794      -25.6025       25.6025       235.037       260.639    
  42  0.441962     -0.816531      -14.2413       14.2413       237.852       252.093    
  43  0.772036     -0.258724      -4.51246       4.51246       233.051       237.563    
  44  0.970063     -0.303946E-01 -0.530117      0.530117       239.319       239.849    
  45  0.610535     -0.493419      -8.60582       8.60582       235.121       243.726    
  46  0.548201     -0.601114      -10.4841       10.4841       255.461       265.945    
  47  0.322533      -1.13155      -19.7356       19.7356       232.113       251.848    
  48  0.194318E-01  -3.94084      -68.7330       68.7330       264.623       333.356    
  49  0.219930      -1.51445      -26.4137       26.4137       251.051       277.465    
  50  0.538995E-01  -2.92063      -50.9393       50.9393       238.219       289.158    
  51  0.189941      -1.66104      -28.9705       28.9705       230.875       259.846    
  52  0.339787      -1.07944      -18.8267       18.8267       233.124       251.951    
loop,thermsimp(1:2)       69   11.3702       10.2888    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182        237.37          1.02          0.99         24.02          0.16          0.05         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    183        466.90          0.98          0.99         23.88          0.39          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    237.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       69
neval is:      182
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       70
neval is:      182


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      182     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -24.7331       24.7331       229.399       254.132    
   2  0.384023     -0.957054      -16.6922       16.6922       228.288       244.980    
   3  0.672379     -0.396933      -6.92298       6.92298       230.194       237.117    
   4  0.204591      -1.58674      -27.6747       27.6747       228.831       256.506    
   5  0.145151      -1.92998      -33.6611       33.6611       229.140       262.801    
   6  0.235757      -1.44495      -25.2017       25.2017       230.302       255.504    
   7  0.882595     -0.124889      -2.17821       2.17821       231.270       233.448    
   8  0.215562      -1.53451      -26.7636       26.7636       231.389       258.153    
   9  0.248905      -1.39068      -24.2552       24.2552       227.112       251.367    
  10  0.695481     -0.363152      -6.33380       6.33380       233.629       239.963    
  11  0.515786     -0.662063      -11.5472       11.5472       232.549       244.096    
  12  0.956817     -0.441428E-01 -0.769903      0.769903       227.808       228.578    
  13  0.256477      -1.36072      -23.7325       23.7325       225.404       249.137    
  14  0.870409     -0.138792      -2.42070       2.42070       233.051       235.471    
  15  0.296335      -1.21627      -21.2131       21.2131       232.424       253.637    
  16  0.563087     -0.574322      -10.0169       10.0169       225.257       235.274    
  17  0.860973     -0.149692      -2.61080       2.61080       236.183       238.794    
  18  0.336353      -1.08959      -19.0038       19.0038       227.512       246.515    
  19  0.432238     -0.838780      -14.6293       14.6293       231.168       245.797    
  20  0.411587     -0.887734      -15.4831       15.4831       228.957       244.440    
  21  0.685679     -0.377346      -6.58135       6.58135       239.319       245.900    
  22  0.178038E-01  -4.02835      -70.2591       70.2591       236.949       307.208    
  23  0.330516      -1.10710      -19.3092       19.3092       232.165       251.475    
  24  0.987115     -0.129685E-01 -0.226185      0.226185       231.049       231.275    
  25  0.702947     -0.352474      -6.14756       6.14756       241.078       247.226    
  26  0.159040      -1.83860      -32.0673       32.0673       226.781       258.848    
  27  0.329714      -1.10953      -19.3515       19.3515       235.121       254.472    
  28  0.542452     -0.611656      -10.6680       10.6680       231.767       242.435    
  29  0.484074     -0.725518      -12.6539       12.6539       230.021       242.675    
  30  0.574330     -0.554551      -9.67203       9.67203       237.593       247.265    
  31  0.987944     -0.121288E-01 -0.211541      0.211541       232.113       232.324    
  32  0.565195E-01  -2.87317      -50.1115       50.1115       233.124       283.235    
  33  0.662626     -0.411545      -7.17783       7.17783       237.852       245.030    
  34  0.462195     -0.771769      -13.4606       13.4606       231.092       244.553    
  35  0.413957     -0.881994      -15.3830       15.3830       229.684       245.067    
  36  0.627825     -0.465493      -8.11876       8.11876       237.230       245.349    
  37  0.373783E-01  -3.28667      -57.3234       57.3234       237.477       294.801    
  38  0.318481      -1.14419      -19.9561       19.9561       234.506       254.462    
  39  0.193037      -1.64487      -28.6886       28.6886       230.875       259.564    
  40  0.246573      -1.40010      -24.4194       24.4194       228.932       253.352    
  41  0.913643     -0.903152E-01  -1.57520       1.57520       235.642       237.217    
  42  0.593287     -0.522077      -9.10564       9.10564       235.037       244.143    
  43  0.323913      -1.12728      -19.6611       19.6611       255.461       275.122    
  44  0.270579E-01  -3.60978      -62.9588       62.9588       232.919       295.878    
  45  0.684823     -0.378595      -6.60315       6.60315       232.495       239.098    
  46  0.279340      -1.27532      -22.2432       22.2432       251.051       273.294    
  47  0.285511      -1.25348      -21.8621       21.8621       229.951       251.814    
  48  0.361874      -1.01646      -17.7282       17.7282       238.219       255.947    
  49  0.779291     -0.249370      -4.34932       4.34932       228.088       232.437    
  50  0.590933     -0.526053      -9.17500       9.17500       233.901       243.076    
  51  0.493821E-01  -3.00817      -52.4660       52.4660       264.623       317.089    
  52  0.736348     -0.306053      -5.33793       5.33793       237.369       242.707    
loop,thermsimp(1:2)       70   24.7331       16.6922    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184        227.63          1.02          0.98         23.77          0.47          0.05         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    185        268.03          0.96          0.99         24.02          0.20          0.05         26.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       70
neval is:      184
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       71
neval is:      184


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      184     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -3.66865       3.66865       227.808       231.477    
   2  0.601567     -0.508218      -8.86392       8.86392       231.049       239.913    
   3  0.190401      -1.65862      -28.9284       28.9284       232.113       261.041    
   4  0.827263     -0.189632      -3.30741       3.30741       228.088       231.395    
   5  0.581677     -0.541840      -9.45034       9.45034       231.270       240.721    
   6  0.680336     -0.385169      -6.71780       6.71780       225.257       231.975    
   7  0.641383     -0.444128      -7.74613       7.74613       233.051       240.797    
   8  0.593931     -0.520992      -9.08672       9.08672       230.194       239.281    
   9  0.326400      -1.11963      -19.5277       19.5277       235.642       255.170    
  10  0.964323     -0.363286E-01 -0.633614      0.633614       236.183       236.817    
  11  0.481751     -0.730328      -12.7378       12.7378       232.495       245.233    
  12  0.230624E-01  -3.76955      -65.7455       65.7455       233.629       299.374    
  13  0.214859      -1.53777      -26.8206       26.8206       231.767       258.588    
  14  0.325804      -1.12146      -19.5596       19.5596       230.021       249.580    
  15  0.668745     -0.402353      -7.01751       7.01751       237.369       244.387    
  16  0.803263     -0.219073      -3.82089       3.82089       233.901       237.722    
  17  0.465531     -0.764577      -13.3351       13.3351       232.549       245.884    
  18  0.589796     -0.527978      -9.20857       9.20857       235.037       244.246    
  19  0.783335     -0.244195      -4.25906       4.25906       228.957       233.216    
  20  0.937099     -0.649659E-01  -1.13308       1.13308       231.092       232.225    
  21  0.504081     -0.685019      -11.9475       11.9475       228.288       240.236    
  22  0.368431E-01  -3.30109      -57.5749       57.5749       237.852       295.427    
  23  0.462712     -0.770651      -13.4411       13.4411       229.684       243.126    
  24  0.172447      -1.75767      -30.6558       30.6558       237.230       267.886    
  25  0.361979      -1.01617      -17.7232       17.7232       231.168       248.891    
  26  0.616189     -0.484202      -8.44506       8.44506       239.319       247.764    
  27  0.495582     -0.702023      -12.2441       12.2441       227.512       239.756    
  28  0.492859     -0.707532      -12.3402       12.3402       241.078       253.418    
  29  0.189027      -1.66586      -29.0547       29.0547       237.593       266.647    
  30  0.336237      -1.08994      -19.0098       19.0098       225.404       244.414    
  31  0.997382     -0.262184E-02 -0.457279E-01  0.457279E-01   227.112       227.157    
  32  0.629287     -0.463168      -8.07819       8.07819       232.165       240.244    
  33  0.226178      -1.48644      -25.9252       25.9252       229.951       255.877    
  34  0.522315     -0.649483      -11.3278       11.3278       228.932       240.260    
  35  0.238835E-02  -6.03715      -105.295       105.295       232.424       337.719    
  36  0.123092E-01  -4.39741      -76.6961       76.6961       229.399       306.095    
  37  0.488141     -0.717152      -12.5080       12.5080       234.506       247.014    
  38  0.925188     -0.777584E-01  -1.35620       1.35620       235.121       236.477    
  39  0.676413     -0.390952      -6.81866       6.81866       230.302       237.121    
  40  0.638827     -0.448121      -7.81577       7.81577       238.219       246.035    
  41  0.789998     -0.235725      -4.11132       4.11132       228.831       232.943    
  42  0.453703E-01  -3.09290      -53.9438       53.9438       231.389       285.333    
  43  0.866893     -0.142840      -2.49130       2.49130       226.781       229.272    
  44  0.122493E-01  -4.40228      -76.7811       76.7811       230.875       307.657    
  45  0.172311      -1.75846      -30.6696       30.6696       229.140       259.810    
  46  0.899580     -0.105827      -1.84574       1.84574       251.051       252.897    
  47  0.857845     -0.153332      -2.67429       2.67429       255.461       258.136    
  48  0.176813      -1.73266      -30.2197       30.2197       233.124       263.344    
  49  0.795271E-01  -2.53166      -44.1551       44.1551       237.477       281.632    
  50  0.461368     -0.773559      -13.4918       13.4918       232.919       246.411    
  51  0.727625     -0.317970      -5.54577       5.54577       236.949       242.495    
  52  0.106879      -2.23606      -38.9996       38.9996       227.625       266.625    
loop,thermsimp(1:2)       71   3.66865       8.86392    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186        228.51          1.02          0.98         23.85          0.42          0.05         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    187        228.66          1.02          0.98         24.03          0.22          0.05         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       71
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       72
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      186     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -2.42228       2.42228       227.112       229.534    
   2  0.470451     -0.754063      -13.1518       13.1518       226.781       239.933    
   3  0.615627     -0.485114      -8.46097       8.46097       228.088       236.549    
   4  0.291899      -1.23135      -21.4762       21.4762       227.808       249.284    
   5  0.584822     -0.536448      -9.35629       9.35629       225.257       234.614    
   6  0.681731     -0.383120      -6.68208       6.68208       231.092       237.774    
   7  0.680149     -0.385444      -6.72260       6.72260       228.831       235.554    
   8  0.560478     -0.578966      -10.0979       10.0979       228.957       239.055    
   9  0.392299     -0.935730      -16.3202       16.3202       235.121       251.441    
  10  0.586793     -0.533083      -9.29760       9.29760       236.183       245.481    
  11  0.461418     -0.773452      -13.4899       13.4899       230.302       243.792    
  12  0.142886      -1.94571      -33.9355       33.9355       233.901       267.837    
  13  0.960325     -0.404831E-01 -0.706073      0.706073       230.194       230.900    
  14  0.547176     -0.602984      -10.5168       10.5168       227.512       238.028    
  15  0.817596     -0.201386      -3.51242       3.51242       231.049       234.561    
  16  0.184065      -1.69247      -29.5186       29.5186       228.288       257.807    
  17  0.763954     -0.269247      -4.69599       4.69599       232.165       236.861    
  18  0.740640     -0.300240      -5.23654       5.23654       228.932       234.169    
  19  0.257299      -1.35751      -23.6767       23.6767       231.270       254.947    
  20  0.274950      -1.29117      -22.5195       22.5195       233.051       255.570    
  21  0.850599     -0.161814      -2.82223       2.82223       236.949       239.771    
  22  0.265651      -1.32557      -23.1196       23.1196       229.684       252.804    
  23  0.388810     -0.944665      -16.4761       16.4761       235.037       251.513    
  24  0.921262     -0.820106E-01  -1.43036       1.43036       237.369       238.799    
  25  0.622168     -0.474545      -8.27663       8.27663       225.404       233.681    
  26  0.831499     -0.184526      -3.21834       3.21834       232.495       235.713    
  27  0.777776     -0.251317      -4.38326       4.38326       232.549       236.932    
  28  0.519638     -0.654624      -11.4174       11.4174       238.219       249.636    
  29  0.343480      -1.06863      -18.6381       18.6381       232.919       251.558    
  30  0.379182     -0.969738      -16.9134       16.9134       234.506       251.419    
  31  0.509964     -0.673415      -11.7452       11.7452       239.319       251.064    
  32  0.457294E-01  -3.08501      -53.8063       53.8063       231.168       284.974    
  33  0.952238     -0.489400E-01 -0.853572      0.853572       230.021       230.874    
  34  0.198116      -1.61890      -28.2356       28.2356       251.051       279.287    
  35  0.863922     -0.146273      -2.55118       2.55118       241.078       243.629    
  36  0.765944     -0.266646      -4.65063       4.65063       235.642       240.293    
  37  0.849389     -0.163238      -2.84707       2.84707       229.951       232.799    
  38  0.488339     -0.716745      -12.5009       12.5009       255.461       267.962    
  39  0.969632     -0.308388E-01 -0.537865      0.537865       231.767       232.305    
  40  0.971690     -0.287184E-01 -0.500882      0.500882       229.140       229.641    
  41  0.690522     -0.370307      -6.45860       6.45860       232.113       238.571    
  42  0.266028      -1.32415      -23.0948       23.0948       233.124       256.219    
  43  0.581296     -0.542495      -9.46176       9.46176       227.625       237.087    
  44  0.636654     -0.451529      -7.87520       7.87520       237.593       245.468    
  45  0.947680     -0.537383E-01 -0.937260      0.937260       237.230       238.168    
  46  0.792806     -0.232176      -4.04943       4.04943       237.477       241.527    
  47  0.420588     -0.866101      -15.1058       15.1058       231.389       246.495    
  48  0.780043     -0.248407      -4.33251       4.33251       237.852       242.185    
  49  0.834700E-01  -2.48327      -43.3112       43.3112       233.629       276.940    
  50  0.707823     -0.345562      -6.02701       6.02701       229.399       235.426    
  51  0.836500     -0.178529      -3.11376       3.11376       230.875       233.989    
  52  0.111614      -2.19271      -38.2434       38.2434       228.512       266.756    
loop,thermsimp(1:2)       72   2.42228       13.1518    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188        229.46          1.04          0.99         23.97          0.27          0.05         26.32
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    189        229.21          0.98          0.99         24.02          0.18          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       72
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       73
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      188     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -5.20669       5.20669       227.112       232.318    
   2  0.823468     -0.194230      -3.38761       3.38761       229.140       232.528    
   3  0.352913      -1.04153      -18.1656       18.1656       230.021       248.186    
   4  0.268511      -1.31486      -22.9328       22.9328       230.194       253.127    
   5  0.137541      -1.98383      -34.6004       34.6004       231.767       266.368    
   6  0.953738     -0.473661E-01 -0.826122      0.826122       229.951       230.778    
   7  0.366602      -1.00348      -17.5018       17.5018       225.404       242.906    
   8  0.861530     -0.149046      -2.59954       2.59954       230.875       233.475    
   9  0.190086      -1.66028      -28.9572       28.9572       228.932       257.889    
  10  0.931621     -0.708293E-01  -1.23535       1.23535       231.049       232.284    
  11  0.135562      -1.99833      -34.8532       34.8532       225.257       260.111    
  12  0.577052     -0.549824      -9.58958       9.58958       229.399       238.989    
  13  0.937511     -0.645266E-01  -1.12542       1.12542       228.831       229.957    
  14  0.836727     -0.178258      -3.10902       3.10902       232.495       235.604    
  15  0.124731      -2.08159      -36.3054       36.3054       228.088       264.394    
  16  0.830758     -0.185417      -3.23390       3.23390       232.165       235.399    
  17  0.925849     -0.770442E-01  -1.34374       1.34374       232.549       233.893    
  18  0.945668     -0.558633E-01 -0.974323      0.974323       227.625       228.600    
  19  0.700762     -0.355587      -6.20186       6.20186       231.092       237.294    
  20  0.585168E-01  -2.83844      -49.5058       49.5058       227.512       277.017    
  21  0.241985      -1.41888      -24.7470       24.7470       237.230       261.977    
  22  0.426115     -0.853047      -14.8781       14.8781       232.113       246.991    
  23  0.730656     -0.313813      -5.47327       5.47327       237.369       242.842    
  24  0.227460      -1.48078      -25.8266       25.8266       228.957       254.783    
  25  0.824070     -0.193500      -3.37486       3.37486       236.949       240.324    
  26  0.912829     -0.912064E-01  -1.59075       1.59075       226.781       228.372    
  27  0.130860      -2.03363      -35.4689       35.4689       235.642       271.111    
  28  0.126999      -2.06358      -35.9912       35.9912       237.477       273.468    
  29  0.394828E-01  -3.23189      -56.3680       56.3680       237.852       294.220    
  30  0.927793     -0.749466E-01  -1.30716       1.30716       241.078       242.385    
  31  0.161762      -1.82163      -31.7714       31.7714       230.302       262.074    
  32  0.510374     -0.672611      -11.7311       11.7311       237.593       249.324    
  33  0.930607     -0.719186E-01  -1.25435       1.25435       236.183       237.438    
  34  0.825283E-01  -2.49461      -43.5090       43.5090       231.389       274.898    
  35  0.569143     -0.563624      -9.83027       9.83027       227.808       237.638    
  36  0.732951     -0.310676      -5.41856       5.41856       238.219       243.637    
  37  0.554950     -0.588877      -10.2707       10.2707       239.319       249.590    
  38  0.614368     -0.487160      -8.49666       8.49666       234.506       243.003    
  39  0.127889      -2.05659      -35.8694       35.8694       235.121       270.990    
  40  0.510007     -0.673330      -11.7437       11.7437       235.037       246.781    
  41  0.206107      -1.57936      -27.5459       27.5459       232.919       260.465    
  42  0.812962E-01  -2.50966      -43.7714       43.7714       229.684       273.456    
  43  0.711913     -0.339799      -5.92651       5.92651       231.270       237.197    
  44  0.649899     -0.430939      -7.51609       7.51609       233.051       240.567    
  45  0.102708      -2.27587      -39.6938       39.6938       233.124       272.818    
  46  0.152702      -1.87927      -32.7767       32.7767       228.288       261.065    
  47  0.827734     -0.189064      -3.29750       3.29750       228.512       231.810    
  48  0.558329     -0.582808      -10.1649       10.1649       233.901       244.066    
  49  0.174746      -1.74442      -30.4248       30.4248       255.461       285.886    
  50  0.107247      -2.23262      -38.9396       38.9396       233.629       272.569    
  51  0.988891     -0.111711E-01 -0.194837      0.194837       251.051       251.246    
  52  0.388651     -0.945075      -16.4832       16.4832       229.206       245.689    
loop,thermsimp(1:2)       73   5.20669       3.38761    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190        238.27          1.05          0.98         23.96          0.43          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191        498.23          0.96          0.99         23.88          0.38          0.05         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    238.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       73
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       74
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      190     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -3.12502       3.12502       226.781       229.906    
   2  0.439366     -0.822423      -14.3440       14.3440       227.625       241.969    
   3  0.603094     -0.505682      -8.81969       8.81969       228.831       237.651    
   4  0.695854E-01  -2.66520      -46.4843       46.4843       229.951       276.436    
   5  0.273021      -1.29821      -22.6423       22.6423       228.512       251.154    
   6  0.418319     -0.871511      -15.2002       15.2002       231.049       246.249    
   7  0.688437     -0.373331      -6.51134       6.51134       227.112       233.623    
   8  0.400930     -0.913969      -15.9407       15.9407       229.140       245.081    
   9  0.569492     -0.563010      -9.81956       9.81956       230.875       240.695    
  10  0.812441     -0.207712      -3.62274       3.62274       232.549       236.172    
  11  0.222094      -1.50465      -26.2429       26.2429       232.165       258.408    
  12  0.695761     -0.362749      -6.32678       6.32678       232.495       238.822    
  13  0.909536E-01  -2.39741      -41.8136       41.8136       231.270       273.084    
  14  0.297191      -1.21338      -21.1628       21.1628       231.092       252.255    
  15  0.806729     -0.214767      -3.74580       3.74580       236.183       239.929    
  16  0.407021     -0.898891      -15.6777       15.6777       227.808       243.486    
  17  0.520426     -0.653107      -11.3910       11.3910       229.399       240.790    
  18  0.826852     -0.190129      -3.31608       3.31608       236.949       240.265    
  19  0.729268     -0.315714      -5.50643       5.50643       233.051       238.557    
  20  0.344086      -1.06687      -18.6074       18.6074       241.078       259.686    
  21  0.280849      -1.26994      -22.1492       22.1492       237.369       259.518    
  22  0.301244E-01  -3.50242      -61.0864       61.0864       225.404       286.491    
  23  0.503253     -0.686663      -11.9762       11.9762       234.506       246.482    
  24  0.549007     -0.599644      -10.4585       10.4585       238.219       248.677    
  25  0.814230     -0.205513      -3.58438       3.58438       233.901       237.485    
  26  0.641489     -0.443963      -7.74325       7.74325       229.206       236.949    
  27  0.248696      -1.39152      -24.2698       24.2698       235.037       259.307    
  28  0.684472     -0.379107      -6.61208       6.61208       232.113       238.725    
  29  0.815126     -0.204413      -3.56520       3.56520       230.021       233.586    
  30  0.388210     -0.946208      -16.5030       16.5030       237.593       254.096    
  31  0.670538     -0.399675      -6.97081       6.97081       239.319       246.290    
  32  0.851104     -0.161221      -2.81188       2.81188       251.051       253.863    
  33  0.381078     -0.964752      -16.8264       16.8264       230.194       247.021    
  34  0.776256     -0.253273      -4.41738       4.41738       228.957       233.374    
  35  0.168040      -1.78355      -31.1073       31.1073       228.932       260.039    
  36  0.229069      -1.47373      -25.7036       25.7036       225.257       250.961    
  37  0.917563     -0.860337E-01  -1.50053       1.50053       232.919       234.420    
  38  0.161815      -1.82130      -31.7657       31.7657       228.288       260.054    
  39  0.355170      -1.03516      -18.0544       18.0544       237.230       255.285    
  40  0.221709      -1.50639      -26.2732       26.2732       230.302       256.575    
  41  0.424436     -0.856993      -14.9470       14.9470       228.088       243.035    
  42  0.337698      -1.08560      -18.9342       18.9342       231.767       250.701    
  43  0.574481     -0.554289      -9.66746       9.66746       235.121       244.788    
  44  0.614536     -0.486888      -8.49190       8.49190       235.642       244.134    
  45  0.345602      -1.06247      -18.5307       18.5307       233.629       252.160    
  46  0.330006      -1.10864      -19.3361       19.3361       233.124       252.460    
  47  0.934389     -0.678626E-01  -1.18360       1.18360       229.684       230.868    
  48  0.884466     -0.122771      -2.14127       2.14127       237.477       239.619    
  49  0.928979     -0.736686E-01  -1.28487       1.28487       231.389       232.674    
  50  0.788461     -0.237672      -4.14528       4.14528       227.512       231.657    
  51  0.963462     -0.372219E-01 -0.649194      0.649194       255.461       256.110    
  52  0.630201     -0.461716      -8.05287       8.05287       238.268       246.321    
loop,thermsimp(1:2)       74   3.12502       14.3440    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192        238.58          1.02          0.98         23.90          0.46          0.06         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193        271.72          1.03          0.99         23.90          0.23          0.05         26.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    238.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       74
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       75
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      192     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -17.1172       17.1172       226.781       243.898    
   2  0.269095      -1.31269      -22.8949       22.8949       229.684       252.579    
   3  0.301960      -1.19746      -20.8851       20.8851       227.512       248.397    
   4  0.927593     -0.751619E-01  -1.31091       1.31091       231.389       232.700    
   5  0.783450     -0.244048      -4.25648       4.25648       228.957       233.213    
   6  0.716705     -0.333091      -5.80951       5.80951       230.021       235.830    
   7  0.728578     -0.316661      -5.52295       5.52295       227.112       232.634    
   8  0.752541     -0.284300      -4.95852       4.95852       232.919       237.878    
   9  0.111710      -2.19185      -38.2284       38.2284       232.549       270.778    
  10  0.202752E-01  -3.89836      -67.9920       67.9920       229.206       297.198    
  11  0.967738     -0.327937E-01 -0.571961      0.571961       233.901       234.473    
  12  0.530869     -0.633240      -11.0445       11.0445       228.831       239.876    
  13  0.752699E-01  -2.58668      -45.1147       45.1147       233.051       278.165    
  14  0.658334     -0.418043      -7.29117       7.29117       232.113       239.404    
  15  0.383542     -0.958305      -16.7140       16.7140       232.495       249.209    
  16  0.280803      -1.27010      -22.1521       22.1521       237.477       259.629    
  17  0.976909     -0.233616E-01 -0.407454      0.407454       236.183       236.591    
  18  0.611898     -0.491189      -8.56692       8.56692       236.949       245.516    
  19  0.860469     -0.150278      -2.62103       2.62103       230.875       233.496    
  20  0.375446     -0.979641      -17.0861       17.0861       229.399       246.485    
  21  0.964573     -0.360702E-01 -0.629107      0.629107       227.625       228.254    
  22  0.865663     -0.144259      -2.51605       2.51605       228.088       230.604    
  23  0.498009     -0.697137      -12.1589       12.1589       227.808       239.967    
  24  0.732547     -0.311228      -5.42819       5.42819       235.642       241.070    
  25  0.293766      -1.22497      -21.3649       21.3649       235.121       256.486    
  26  0.805097     -0.216793      -3.78113       3.78113       229.140       232.921    
  27  0.236791      -1.44058      -25.1254       25.1254       231.049       256.174    
  28  0.759809     -0.274688      -4.79089       4.79089       239.319       244.110    
  29  0.279804      -1.27367      -22.2142       22.2142       238.268       260.482    
  30  0.862550     -0.147862      -2.57890       2.57890       234.506       237.085    
  31  0.784800     -0.242327      -4.22646       4.22646       230.194       234.421    
  32  0.231425      -1.46350      -25.5252       25.5252       238.219       263.744    
  33  0.839725     -0.174681      -3.04665       3.04665       231.767       234.814    
  34  0.204862      -1.58542      -27.6516       27.6516       225.257       252.909    
  35  0.741170     -0.299525      -5.22408       5.22408       228.512       233.736    
  36  0.838703     -0.175898      -3.06787       3.06787       233.629       236.697    
  37  0.287711      -1.24580      -21.7282       21.7282       231.092       252.820    
  38  0.937479     -0.645611E-01  -1.12602       1.12602       233.124       234.250    
  39  0.188655      -1.66783      -29.0890       29.0890       251.051       280.140    
  40  0.818317     -0.200505      -3.49705       3.49705       237.593       241.090    
  41  0.903487     -0.101493      -1.77016       1.77016       237.230       239.001    
  42  0.148828      -1.90496      -33.2249       33.2249       255.461       288.686    
  43  0.573616E-01  -2.85838      -49.8535       49.8535       230.302       280.156    
  44  0.792726E-01  -2.53486      -44.2110       44.2110       232.165       276.376    
  45  0.150401      -1.89445      -33.0415       33.0415       235.037       268.078    
  46  0.511444     -0.670518      -11.6946       11.6946       237.369       249.064    
  47  0.179810      -1.71585      -29.9265       29.9265       241.078       271.005    
  48  0.167282      -1.78808      -31.1862       31.1862       228.932       260.118    
  49  0.589016     -0.529302      -9.23165       9.23165       228.288       237.520    
  50  0.974997     -0.253206E-01 -0.441622      0.441622       231.270       231.712    
  51  0.750240     -0.287363      -5.01194       5.01194       229.951       234.963    
  52  0.695153     -0.363624      -6.34203       6.34203       238.581       244.923    
loop,thermsimp(1:2)       75   17.1172       22.8949    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194        241.18          0.98          0.99         23.89          0.25          0.05         26.16
Just calling func    0   0         26.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    241.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       75
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       76
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      193     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -52.3440       52.3440       227.625       279.969    
   2  0.604222     -0.503814      -8.78711       8.78711       228.088       236.875    
   3  0.106168      -2.24273      -39.1159       39.1159       231.270       270.386    
   4  0.342113      -1.07261      -18.7076       18.7076       227.112       245.819    
   5  0.473442     -0.747725      -13.0412       13.0412       231.389       244.430    
   6  0.100866E-01  -4.59655      -80.1693       80.1693       229.140       309.309    
   7  0.911848     -0.922817E-01  -1.60950       1.60950       228.957       230.566    
   8  0.633547     -0.456421      -7.96052       7.96052       230.875       238.836    
   9  0.729024     -0.316048      -5.51226       5.51226       228.512       234.024    
  10  0.620163     -0.477772      -8.33292       8.33292       233.124       241.457    
  11  0.867018     -0.142695      -2.48877       2.48877       230.194       232.683    
  12  0.969344E-01  -2.33372      -40.7029       40.7029       233.901       274.604    
  13  0.358466      -1.02592      -17.8933       17.8933       231.767       249.660    
  14  0.953168     -0.479638E-01 -0.836545      0.836545       229.951       230.788    
  15  0.684510     -0.379052      -6.61111       6.61111       230.021       236.632    
  16  0.482047     -0.729713      -12.7271       12.7271       236.183       248.910    
  17  0.974791     -0.255318E-01 -0.445306      0.445306       233.629       234.074    
  18  0.978669     -0.215619E-01 -0.376066      0.376066       234.506       234.882    
  19  0.929785     -0.728022E-01  -1.26976       1.26976       228.288       229.558    
  20  0.715020     -0.335444      -5.85054       5.85054       232.919       238.770    
  21  0.598247     -0.513752      -8.96045       8.96045       237.230       246.191    
  22  0.107080      -2.23418      -38.9668       38.9668       232.113       271.079    
  23  0.559093     -0.581439      -10.1410       10.1410       228.831       238.972    
  24  0.933094     -0.692491E-01  -1.20779       1.20779       227.808       229.016    
  25  0.470169E-01  -3.05725      -53.3220       53.3220       235.642       288.964    
  26  0.166768      -1.79115      -31.2398       31.2398       237.593       268.833    
  27  0.331277      -1.10480      -19.2690       19.2690       226.781       246.050    
  28  0.961755     -0.389952E-01 -0.680123      0.680123       239.319       239.999    
  29  0.464366E-01  -3.06967      -53.5387       53.5387       238.581       292.119    
  30  0.966136E-03  -6.94221      -121.080       121.080       236.949       358.030    
  31  0.941012     -0.607999E-01  -1.06042       1.06042       229.399       230.460    
  32  0.201947E-01  -3.90233      -68.0613       68.0613       227.512       295.573    
  33  0.679249     -0.386768      -6.74569       6.74569       237.369       244.115    
  34  0.318772      -1.14328      -19.9401       19.9401       232.495       252.435    
  35  0.388100     -0.946493      -16.5080       16.5080       229.684       246.192    
  36  0.658606     -0.417629      -7.28395       7.28395       231.092       238.376    
  37  0.774362     -0.255715      -4.45998       4.45998       225.257       229.717    
  38  0.704871     -0.349740      -6.09988       6.09988       231.049       237.149    
  39  0.274189      -1.29394      -22.5678       22.5678       235.121       257.688    
  40  0.881806     -0.125783      -2.19380       2.19380       237.477       239.671    
  41  0.198448      -1.61723      -28.2063       28.2063       228.932       257.139    
  42  0.342590      -1.07122      -18.6834       18.6834       238.268       256.951    
  43  0.603787     -0.504534      -8.79968       8.79968       238.219       247.019    
  44  0.667409     -0.404353      -7.05240       7.05240       235.037       242.089    
  45  0.317014      -1.14881      -20.0366       20.0366       232.549       252.586    
  46  0.368458     -0.998429      -17.4138       17.4138       241.078       258.492    
  47  0.139912      -1.96674      -34.3023       34.3023       232.165       266.468    
  48  0.537645     -0.620557      -10.8233       10.8233       233.051       243.874    
  49  0.159021      -1.83872      -32.0695       32.0695       251.051       283.121    
  50  0.729011     -0.316067      -5.51258       5.51258       230.302       235.815    
  51  0.802486     -0.220041      -3.83779       3.83779       255.461       259.299    
  52  0.249203      -1.38949      -24.2343       24.2343       241.182       265.417    
loop,thermsimp(1:2)       76   52.3440       8.78711    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195        226.97          1.03          0.99         23.76          0.45          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    196        227.61          0.97          0.98         23.81          0.43          0.05         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    226.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       76
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       77
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      195     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -9.00381       9.00381       227.808       236.812    
   2  0.476930     -0.740385      -12.9132       12.9132       228.288       241.201    
   3  0.845382     -0.167966      -2.92953       2.92953       225.257       228.187    
   4  0.397814     -0.921770      -16.0768       16.0768       229.399       245.476    
   5  0.249923      -1.38660      -24.1840       24.1840       228.957       253.141    
   6  0.591552     -0.525005      -9.15672       9.15672       229.951       239.108    
   7  0.143111      -1.94414      -33.9081       33.9081       230.194       264.102    
   8  0.306099      -1.18385      -20.6477       20.6477       228.512       249.160    
   9  0.441827     -0.816836      -14.2466       14.2466       233.629       247.876    
  10  0.504521     -0.684146      -11.9323       11.9323       234.506       246.438    
  11  0.127660      -2.05839      -35.9007       35.9007       230.302       266.203    
  12  0.333524      -1.09804      -19.1511       19.1511       230.021       249.172    
  13  0.130890      -2.03340      -35.4648       35.4648       228.088       263.553    
  14  0.307732      -1.17853      -20.5549       20.5549       231.049       251.604    
  15  0.154434E-01  -4.17057      -72.7397       72.7397       231.092       303.832    
  16  0.357863      -1.02761      -17.9227       17.9227       232.919       250.842    
  17  0.271898      -1.30233      -22.7141       22.7141       230.875       253.590    
  18  0.906228E-01  -2.40105      -41.8772       41.8772       228.831       270.708    
  19  0.344142      -1.06670      -18.6045       18.6045       237.477       256.082    
  20  0.392886     -0.934237      -16.2942       16.2942       239.319       255.613    
  21  0.454318     -0.788958      -13.7604       13.7604       233.124       246.884    
  22  0.384129     -0.956778      -16.6873       16.6873       235.037       251.724    
  23  0.354037      -1.03835      -18.1101       18.1101       233.051       251.161    
  24  0.154212      -1.86943      -32.6051       32.6051       237.369       269.974    
  25  0.816320     -0.202949      -3.53968       3.53968       231.389       234.929    
  26  0.994970     -0.504291E-02 -0.879543E-01  0.879543E-01   227.112       227.200    
  27  0.374719E-01  -3.28416      -57.2797       57.2797       226.781       284.061    
  28  0.227113      -1.48231      -25.8532       25.8532       237.230       263.084    
  29  0.410587     -0.890167      -15.5256       15.5256       229.684       245.210    
  30  0.104540E-01  -4.56077      -79.5453       79.5453       238.219       317.764    
  31  0.994826     -0.518730E-02 -0.904726E-01  0.904726E-01   236.183       236.274    
  32  0.738930     -0.302553      -5.27688       5.27688       231.767       237.044    
  33  0.715904     -0.334209      -5.82900       5.82900       232.495       238.324    
  34  0.128324      -2.05320      -35.8102       35.8102       232.549       268.359    
  35  0.856095     -0.155374      -2.70990       2.70990       238.268       240.978    
  36  0.423967     -0.858099      -14.9663       14.9663       228.932       243.898    
  37  0.504650     -0.683890      -11.9279       11.9279       235.121       247.048    
  38  0.347036      -1.05833      -18.4585       18.4585       241.078       259.537    
  39  0.906779     -0.978566E-01  -1.70673       1.70673       255.461       257.168    
  40  0.616911     -0.483030      -8.42462       8.42462       241.182       249.607    
  41  0.540209     -0.615800      -10.7403       10.7403       232.165       242.906    
  42  0.772932     -0.257564      -4.49222       4.49222       237.593       242.085    
  43  0.544989     -0.606989      -10.5866       10.5866       231.270       241.857    
  44  0.951523     -0.496917E-01 -0.866683      0.866683       232.113       232.979    
  45  0.172505      -1.75733      -30.6500       30.6500       233.901       264.551    
  46  0.871391     -0.137665      -2.40103       2.40103       227.625       230.026    
  47  0.127604      -2.05882      -35.9083       35.9083       251.051       286.959    
  48  0.785934     -0.240882      -4.20128       4.20128       235.642       239.843    
  49  0.815977     -0.203369      -3.54700       3.54700       238.581       242.128    
  50  0.350587      -1.04815      -18.2809       18.2809       227.512       245.792    
  51  0.739645     -0.301584      -5.25999       5.25999       229.140       234.400    
  52  0.996274     -0.373345E-02 -0.651158E-01  0.651158E-01   226.974       227.039    
loop,thermsimp(1:2)       77   9.00381       12.9132    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197        232.16          1.05          0.99         23.99          0.18          0.05         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    232.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       77
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       78
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      196     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -1.04427       1.04427       226.974       228.018    
   2  0.368209     -0.999105      -17.4256       17.4256       227.112       244.537    
   3  0.508630     -0.676034      -11.7908       11.7908       225.257       237.048    
   4  0.744324     -0.295279      -5.15002       5.15002       227.625       232.775    
   5  0.401586     -0.912333      -15.9122       15.9122       232.113       248.025    
   6  0.712794     -0.338563      -5.90495       5.90495       229.140       235.045    
   7  0.186976      -1.67678      -29.2450       29.2450       231.389       260.634    
   8  0.688451     -0.373311      -6.51099       6.51099       236.183       242.694    
   9  0.668652     -0.402492      -7.01994       7.01994       227.808       234.828    
  10  0.656767     -0.420426      -7.33274       7.33274       231.767       239.100    
  11  0.853336     -0.158602      -2.76621       2.76621       232.495       235.261    
  12  0.556440     -0.586195      -10.2239       10.2239       229.951       240.175    
  13  0.258558E-01  -3.65522      -63.7514       63.7514       235.642       299.393    
  14  0.121003E-01  -4.41452      -76.9945       76.9945       238.268       315.263    
  15  0.150890      -1.89120      -32.9848       32.9848       228.288       261.273    
  16  0.820074     -0.198360      -3.45964       3.45964       231.270       234.730    
  17  0.151452      -1.88748      -32.9200       32.9200       237.593       270.513    
  18  0.305465      -1.18592      -20.6839       20.6839       238.581       259.265    
  19  0.533202     -0.628854      -10.9680       10.9680       232.165       243.133    
  20  0.143416      -1.94201      -33.8709       33.8709       228.932       262.803    
  21  0.687081     -0.375303      -6.54572       6.54572       229.684       236.230    
  22  0.546247     -0.604685      -10.5464       10.5464       229.399       239.946    
  23  0.356987      -1.03006      -17.9654       17.9654       227.512       245.477    
  24  0.545718     -0.605653      -10.5633       10.5633       234.506       245.069    
  25  0.789688     -0.236117      -4.11816       4.11816       233.124       237.242    
  26  0.752086     -0.284904      -4.96907       4.96907       235.121       240.090    
  27  0.388816     -0.944650      -16.4758       16.4758       233.629       250.105    
  28  0.988428     -0.116395E-01 -0.203007      0.203007       228.512       228.715    
  29  0.124991      -2.07952      -36.2692       36.2692       230.021       266.290    
  30  0.568214     -0.565257      -9.85876       9.85876       241.182       251.041    
  31  0.551032     -0.595962      -10.3943       10.3943       232.919       243.314    
  32  0.423622     -0.858913      -14.9805       14.9805       233.051       248.031    
  33  0.647554     -0.434553      -7.57912       7.57912       231.049       238.628    
  34  0.686255     -0.376506      -6.56672       6.56672       235.037       241.604    
  35  0.548072     -0.601349      -10.4882       10.4882       228.957       239.445    
  36  0.880777     -0.126951      -2.21418       2.21418       230.875       233.090    
  37  0.894918     -0.111023      -1.93637       1.93637       239.319       241.255    
  38  0.241077      -1.42264      -24.8125       24.8125       237.477       262.290    
  39  0.546141     -0.604877      -10.5498       10.5498       255.461       266.011    
  40  0.266590      -1.32204      -23.0580       23.0580       241.078       264.136    
  41  0.575085     -0.553238      -9.64913       9.64913       237.230       246.880    
  42  0.907139     -0.974596E-01  -1.69981       1.69981       228.088       229.788    
  43  0.469109     -0.756920      -13.2016       13.2016       230.194       243.396    
  44  0.738008     -0.303801      -5.29865       5.29865       233.901       239.200    
  45  0.557598     -0.584116      -10.1877       10.1877       230.302       240.490    
  46  0.305677      -1.18523      -20.6717       20.6717       232.549       253.221    
  47  0.392927     -0.934131      -16.2924       16.2924       237.369       253.661    
  48  0.121997      -2.10376      -36.6920       36.6920       228.831       265.523    
  49  0.712082     -0.339563      -5.92238       5.92238       226.781       232.703    
  50  0.342132      -1.07256      -18.7067       18.7067       251.051       269.758    
  51  0.288307      -1.24373      -21.6921       21.6921       231.092       252.784    
  52  0.554777     -0.589188      -10.2761       10.2761       232.157       242.433    
loop,thermsimp(1:2)       78   1.04427       17.4256    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198        238.51          1.02          0.99         23.59          0.55          0.05         26.20
Just calling func    0   0         26.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    199        675.73          1.03          1.01         23.68          0.41          0.05         26.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    238.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       78
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       79
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      198     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -46.1621       46.1621       226.974       273.136    
   2  0.952063     -0.491245E-01 -0.856789      0.856789       228.512       229.369    
   3  0.207928      -1.57057      -27.3925       27.3925       228.088       255.481    
   4  0.564009     -0.572686      -9.98832       9.98832       226.781       236.769    
   5  0.461636     -0.772979      -13.4817       13.4817       227.625       241.107    
   6  0.683812     -0.380072      -6.62890       6.62890       230.875       237.504    
   7  0.153569      -1.87360      -32.6778       32.6778       231.270       263.948    
   8  0.605650     -0.501453      -8.74594       8.74594       227.808       236.554    
   9  0.257296      -1.35753      -23.6769       23.6769       229.140       252.817    
  10  0.517987     -0.657805      -11.4729       11.4729       232.495       243.968    
  11  0.571129     -0.560140      -9.76952       9.76952       229.684       239.454    
  12  0.735134     -0.307703      -5.36670       5.36670       225.257       230.624    
  13  0.766340E-02  -4.87130      -84.9613       84.9613       233.124       318.085    
  14  0.435932     -0.830269      -14.4809       14.4809       231.049       245.530    
  15  0.513945     -0.665639      -11.6095       11.6095       231.767       243.377    
  16  0.447046     -0.805095      -14.0418       14.0418       233.901       247.943    
  17  0.244813      -1.40726      -24.5443       24.5443       228.957       253.501    
  18  0.183933      -1.69318      -29.5311       29.5311       229.399       258.930    
  19  0.413164     -0.883910      -15.4164       15.4164       235.121       250.537    
  20  0.869613     -0.139707      -2.43666       2.43666       229.951       232.388    
  21  0.853260     -0.158691      -2.76775       2.76775       230.302       233.070    
  22  0.138067      -1.98001      -34.5338       34.5338       239.319       273.853    
  23  0.940528     -0.613134E-01  -1.06938       1.06938       235.037       236.106    
  24  0.694939     -0.363931      -6.34739       6.34739       232.157       238.504    
  25  0.962776     -0.379346E-01 -0.661625      0.661625       236.183       236.845    
  26  0.378266     -0.972158      -16.9556       16.9556       232.165       249.121    
  27  0.855922     -0.155576      -2.71343       2.71343       232.919       235.633    
  28  0.393452     -0.932797      -16.2691       16.2691       230.194       246.463    
  29  0.253590      -1.37204      -23.9300       23.9300       227.112       251.042    
  30  0.777948     -0.251096      -4.37941       4.37941       234.506       238.885    
  31  0.654890     -0.423288      -7.38265       7.38265       227.512       234.894    
  32  0.690016E-01  -2.67363      -46.6312       46.6312       237.230       283.862    
  33  0.101034      -2.29229      -39.9803       39.9803       232.113       272.093    
  34  0.684533     -0.379019      -6.61054       6.61054       233.051       239.661    
  35  0.592603     -0.523230      -9.12576       9.12576       233.629       242.755    
  36  0.904830     -0.100009      -1.74427       1.74427       241.182       242.927    
  37  0.400244     -0.915681      -15.9706       15.9706       231.092       247.063    
  38  0.698191     -0.359263      -6.26598       6.26598       232.549       238.815    
  39  0.551449E-01  -2.89779      -50.5409       50.5409       237.369       287.910    
  40  0.500493     -0.692161      -12.0721       12.0721       238.581       250.653    
  41  0.289592      -1.23928      -21.6146       21.6146       231.389       253.004    
  42  0.447163     -0.804833      -14.0372       14.0372       228.288       242.325    
  43  0.690940     -0.369702      -6.44803       6.44803       237.477       243.925    
  44  0.631068     -0.460341      -8.02890       8.02890       228.932       236.961    
  45  0.926041     -0.768363E-01  -1.34012       1.34012       241.078       242.418    
  46  0.436187     -0.829684      -14.4707       14.4707       228.831       243.302    
  47  0.314139      -1.15792      -20.1955       20.1955       255.461       275.657    
  48  0.363110      -1.01305      -17.6688       17.6688       230.021       247.689    
  49  0.446982     -0.805238      -14.0443       14.0443       251.051       265.095    
  50  0.541529     -0.613360      -10.6977       10.6977       237.593       248.290    
  51  0.415529     -0.878202      -15.3169       15.3169       235.642       250.959    
  52  0.559792     -0.580190      -10.1192       10.1192       238.510       248.629    
loop,thermsimp(1:2)       79   46.1621      0.856789    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200        227.58          1.04          0.99         23.86          0.43          0.05         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    201        228.86          0.98          0.99         23.78          0.43          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    228.86        2.695     -1.592      5.105     -100.0      1.569    
                     -0.4285      2.651     -100.0      2.809     0.9662    
                       1.151     -1.119      1.841      0.000      0.000    
                      -1.819      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -12.64     -3.229     -5.473     -2.045    
                      -12.91     -2.733      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.2084    -0.9181E-01  0.000    -0.8132    
                     -0.3117    -0.1517    -0.1590    -0.1683     0.7091E-01

                     -0.7626    -0.5426      0.000    -0.1108    -0.4587E-01
                      0.8541E-01 0.1276    -0.4357E-01-0.5200E-01-0.1510    
                      0.1211     0.5146E-01-0.3253     -1.566      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.109      9.200     -7039.     -4.000    
                      0.3858E-01 0.4535      9.177      8.648     -4904.    

                      -4.000    -0.1246    -0.6773      8.921      9.110    
                      -6912.     -4.000     0.2746    -0.9554      9.681    
                       8.839     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       79
neval is:      200
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       80
neval is:      200


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      200     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -7.02586       7.02586       228.512       235.538    
   2  0.238500      -1.43339      -25.0000       25.0000       225.257       250.257    
   3  0.689211     -0.372208      -6.49176       6.49176       229.951       236.443    
   4  0.540774     -0.614753      -10.7220       10.7220       230.302       241.024    
   5  0.178857      -1.72117      -30.0193       30.0193       227.512       257.531    
   6  0.884253     -0.123012      -2.14548       2.14548       232.919       235.065    
   7  0.755546     -0.280314      -4.88902       4.88902       235.037       239.926    
   8  0.654086E-01  -2.72710      -47.5639       47.5639       227.808       275.372    
   9  0.802958     -0.219452      -3.82751       3.82751       226.781       230.609    
  10  0.840665     -0.173562      -3.02712       3.02712       236.183       239.210    
  11  0.864930     -0.145107      -2.53083       2.53083       228.932       231.463    
  12  0.728243     -0.317120      -5.53095       5.53095       230.875       236.406    
  13  0.453086     -0.791672      -13.8077       13.8077       232.157       245.964    
  14  0.702549E-01  -2.65563      -46.3173       46.3173       232.549       278.866    
  15  0.610595     -0.493321      -8.60411       8.60411       234.506       243.110    
  16  0.728410E-02  -4.92206      -85.8466       85.8466       229.684       315.531    
  17  0.913763     -0.901841E-01  -1.57292       1.57292       233.051       234.623    
  18  0.165001      -1.80180      -31.4256       31.4256       227.625       259.051    
  19  0.917747E-01  -2.38842      -41.6569       41.6569       228.288       269.945    
  20  0.338507      -1.08321      -18.8925       18.8925       241.078       259.971    
  21  0.357666      -1.02815      -17.9322       17.9322       233.629       251.561    
  22  0.389441     -0.943044      -16.4478       16.4478       241.182       257.630    
  23  0.879897     -0.127950      -2.23160       2.23160       228.831       231.063    
  24  0.418897     -0.870129      -15.1761       15.1761       231.767       246.943    
  25  0.838426     -0.176230      -3.07365       3.07365       237.477       240.551    
  26  0.185169      -1.68649      -29.4143       29.4143       232.495       261.909    
  27  0.200952      -1.60469      -27.9876       27.9876       231.049       259.037    
  28  0.877256     -0.130957      -2.28404       2.28404       230.194       232.478    
  29  0.386592     -0.950385      -16.5759       16.5759       231.092       247.668    
  30  0.888706     -0.117988      -2.05786       2.05786       230.021       232.079    
  31  0.105408      -2.24991      -39.2412       39.2412       233.901       273.142    
  32  0.994268     -0.574873E-02 -0.100265      0.100265       237.593       237.693    
  33  0.764077     -0.269087      -4.69319       4.69319       238.510       243.203    
  34  0.812108     -0.208121      -3.62989       3.62989       232.165       235.795    
  35  0.121669      -2.10645      -36.7390       36.7390       235.121       271.860    
  36  0.637909     -0.449559      -7.84084       7.84084       238.581       246.422    
  37  0.316007E-02  -5.75716      -100.412       100.412       235.642       336.054    
  38  0.229677      -1.47108      -25.6574       25.6574       227.112       252.769    
  39  0.521374     -0.651288      -11.3592       11.3592       229.140       240.499    
  40  0.391402     -0.938019      -16.3602       16.3602       231.389       247.749    
  41  0.327357      -1.11670      -19.4766       19.4766       228.957       248.433    
  42  0.963139     -0.375576E-01 -0.655050      0.655050       228.088       228.743    
  43  0.174261      -1.74720      -30.4732       30.4732       229.399       259.873    
  44  0.331602      -1.10382      -19.2519       19.2519       231.270       250.522    
  45  0.526338     -0.641812      -11.1940       11.1940       251.051       262.245    
  46  0.413265     -0.883667      -15.4122       15.4122       232.113       247.525    
  47  0.541510E-02  -5.21856      -91.0180       91.0180       226.974       317.992    
  48  0.781613     -0.246396      -4.29743       4.29743       239.319       243.616    
  49  0.656825     -0.420337      -7.33118       7.33118       255.461       262.792    
  50  0.584791     -0.536501      -9.35722       9.35722       237.230       246.588    
  51  0.811204     -0.209236      -3.64932       3.64932       237.369       241.018    
  52  0.421027     -0.865059      -15.0877       15.0877       227.582       242.669    
loop,thermsimp(1:2)       80   7.02586       25.0000    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    202        238.23          1.03          0.99         23.73          0.48          0.05         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    203        279.66          0.98          0.99         23.93          0.31          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    238.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       80
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       81
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      202     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -22.8348       22.8348       228.088       250.923    
   2  0.879265     -0.128669      -2.24413       2.24413       226.781       229.025    
   3  0.684902     -0.378479      -6.60113       6.60113       228.831       235.432    
   4  0.893896     -0.112166      -1.95630       1.95630       228.932       230.889    
   5  0.476761     -0.740739      -12.9194       12.9194       230.021       242.940    
   6  0.755167     -0.280817      -4.89778       4.89778       230.194       235.092    
   7  0.452407     -0.793173      -13.8339       13.8339       233.051       246.884    
   8  0.723906     -0.323093      -5.63513       5.63513       232.919       238.555    
   9  0.451260     -0.795711      -13.8782       13.8782       228.512       242.390    
  10  0.668265     -0.403071      -7.03004       7.03004       232.165       239.195    
  11  0.777249     -0.251995      -4.39509       4.39509       230.875       235.271    
  12  0.342240      -1.07224      -18.7012       18.7012       229.951       248.653    
  13  0.639156     -0.447606      -7.80679       7.80679       237.593       245.400    
  14  0.166924      -1.79022      -31.2235       31.2235       236.183       267.407    
  15  0.375260     -0.980137      -17.0948       17.0948       235.037       252.132    
  16  0.299730      -1.20487      -21.0144       21.0144       229.140       250.154    
  17  0.407119     -0.898650      -15.6735       15.6735       237.477       253.151    
  18  0.762992E-01  -2.57309      -44.8778       44.8778       237.369       282.247    
  19  0.281066      -1.26917      -22.1358       22.1358       230.302       252.438    
  20  0.220512      -1.51180      -26.3676       26.3676       227.582       253.949    
  21  0.389846     -0.942004      -16.4297       16.4297       234.506       250.936    
  22  0.660048     -0.415443      -7.24582       7.24582       238.510       245.756    
  23  0.150026      -1.89695      -33.0850       33.0850       239.319       272.404    
  24  0.113767      -2.17360      -37.9102       37.9102       232.157       270.067    
  25  0.810589     -0.209994      -3.66255       3.66255       238.581       242.243    
  26  0.247911      -1.39468      -24.3250       24.3250       237.230       261.555    
  27  0.408875     -0.894345      -15.5984       15.5984       231.767       247.366    
  28  0.310528      -1.16948      -20.3972       20.3972       232.113       252.510    
  29  0.663027     -0.410939      -7.16727       7.16727       231.092       238.260    
  30  0.798362     -0.225193      -3.92763       3.92763       231.389       235.317    
  31  0.564885     -0.571133      -9.96125       9.96125       228.957       238.918    
  32  0.473510E-02  -5.35275      -93.3584       93.3584       225.257       318.616    
  33  0.933475E-01  -2.37143      -41.3605       41.3605       231.270       272.631    
  34  0.931702     -0.707423E-01  -1.23383       1.23383       233.629       234.863    
  35  0.341741      -1.07370      -18.7267       18.7267       227.112       245.838    
  36  0.171330      -1.76417      -30.7691       30.7691       227.512       258.281    
  37  0.355860      -1.03322      -18.0205       18.0205       241.182       259.203    
  38  0.469639     -0.755790      -13.1819       13.1819       231.049       244.231    
  39  0.805376     -0.216446      -3.77507       3.77507       227.625       231.400    
  40  0.651615     -0.428301      -7.47009       7.47009       229.399       236.869    
  41  0.126831      -2.06490      -36.0143       36.0143       241.078       277.093    
  42  0.715737     -0.334442      -5.83307       5.83307       232.495       238.328    
  43  0.444007     -0.811915      -14.1608       14.1608       251.051       265.212    
  44  0.887105     -0.119791      -2.08930       2.08930       255.461       257.551    
  45  0.492139     -0.708993      -12.3657       12.3657       228.288       240.654    
  46  0.590315     -0.527098      -9.19322       9.19322       235.121       244.314    
  47  0.313130      -1.16114      -20.2516       20.2516       233.901       254.153    
  48  0.824070     -0.193500      -3.37487       3.37487       227.808       231.183    
  49  0.785026     -0.242039      -4.22145       4.22145       232.549       236.771    
  50  0.105781      -2.24638      -39.1795       39.1795       229.684       268.864    
  51  0.644933     -0.438608      -7.64985       7.64985       226.974       234.624    
  52  0.656932     -0.420175      -7.32836       7.32836       238.231       245.559    
loop,thermsimp(1:2)       81   22.8348       2.24413    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204        250.71          1.11          1.02         24.03          0.10          0.05         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    205        347.00          1.03          1.00         23.99          0.16          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    250.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       81
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       82
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      204     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -75.7418       75.7418       226.781       302.523    
   2  0.906957E-01  -2.40025      -41.8631       41.8631       228.932       270.795    
   3  0.973677     -0.266758E-01 -0.465258      0.465258       227.808       228.273    
   4  0.764409     -0.268653      -4.68562       4.68562       227.625       232.311    
   5  0.647718     -0.434300      -7.57471       7.57471       226.974       234.549    
   6  0.450945     -0.796410      -13.8903       13.8903       233.629       247.519    
   7  0.342138      -1.07254      -18.7064       18.7064       230.194       248.901    
   8  0.491560     -0.710170      -12.3862       12.3862       230.875       243.262    
   9  0.728901     -0.316218      -5.51522       5.51522       231.389       236.904    
  10  0.361124      -1.01853      -17.7645       17.7645       228.831       246.596    
  11  0.187026      -1.67651      -29.2403       29.2403       232.549       261.789    
  12  0.560514     -0.578901      -10.0967       10.0967       229.399       239.496    
  13  0.218776      -1.51971      -26.5055       26.5055       231.092       257.598    
  14  0.109271      -2.21392      -38.6134       38.6134       232.495       271.109    
  15  0.263420E-01  -3.63659      -63.4265       63.4265       232.919       296.346    
  16  0.654642     -0.423667      -7.38926       7.38926       228.957       236.346    
  17  0.975959     -0.243343E-01 -0.424419      0.424419       232.165       232.590    
  18  0.107212      -2.23295      -38.9453       38.9453       228.288       267.233    
  19  0.972340     -0.280494E-01 -0.489215      0.489215       238.581       239.070    
  20  0.259158      -1.35032      -23.5511       23.5511       228.512       252.063    
  21  0.889970     -0.116568      -2.03308       2.03308       230.021       232.054    
  22  0.956672     -0.442943E-01 -0.772545      0.772545       231.049       231.822    
  23  0.299261      -1.20644      -21.0417       21.0417       235.121       256.162    
  24  0.114836      -2.16425      -37.7471       37.7471       237.593       275.340    
  25  0.728848     -0.316291      -5.51649       5.51649       238.231       243.747    
  26  0.650336     -0.430267      -7.50436       7.50436       238.510       246.014    
  27  0.816983     -0.202137      -3.52552       3.52552       227.112       230.637    
  28  0.507860     -0.677550      -11.8173       11.8173       233.051       244.868    
  29  0.920661     -0.826634E-01  -1.44175       1.44175       231.767       233.209    
  30  0.253772      -1.37132      -23.9175       23.9175       229.951       253.869    
  31  0.667512     -0.404198      -7.04969       7.04969       229.140       236.190    
  32  0.772715     -0.257844      -4.49711       4.49711       228.088       232.585    
  33  0.757620     -0.277573      -4.84120       4.84120       234.506       239.347    
  34  0.776421     -0.253060      -4.41367       4.41367       235.037       239.451    
  35  0.886642     -0.120314      -2.09842       2.09842       230.302       232.401    
  36  0.238693E-01  -3.73516      -65.1457       65.1457       232.113       297.258    
  37  0.303957      -1.19087      -20.7702       20.7702       237.477       258.247    
  38  0.875267     -0.133226      -2.32362       2.32362       227.582       229.905    
  39  0.144246      -1.93624      -33.7703       33.7703       233.901       267.671    
  40  0.993963     -0.605564E-02 -0.105618      0.105618       255.461       255.567    
  41  0.172168      -1.75928      -30.6840       30.6840       227.512       258.196    
  42  0.979713     -0.204952E-01 -0.357461      0.357461       241.182       241.540    
  43  0.938694     -0.632658E-01  -1.10343       1.10343       237.230       238.334    
  44  0.716061     -0.333990      -5.82519       5.82519       251.051       256.876    
  45  0.764601     -0.268402      -4.68125       4.68125       236.183       240.864    
  46  0.546951     -0.603396      -10.5239       10.5239       229.684       240.208    
  47  0.104442      -2.25912      -39.4017       39.4017       232.157       271.558    
  48  0.669980     -0.400508      -6.98533       6.98533       239.319       246.304    
  49  0.255048      -1.36630      -23.8299       23.8299       231.270       255.100    
  50  0.761153     -0.272921      -4.76006       4.76006       241.078       245.838    
  51  0.273269      -1.29730      -22.6265       22.6265       237.369       259.995    
  52  0.789047E-01  -2.53951      -44.2921       44.2921       250.711       295.003    
loop,thermsimp(1:2)       82   75.7418       41.8631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206        245.42          1.09          1.01         24.07          0.11          0.05         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    245.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       82
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       83
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      205     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -8.64588       8.64588       227.808       236.454    
   2  0.266275      -1.32323      -23.0786       23.0786       227.582       250.660    
   3  0.545538     -0.605984      -10.5691       10.5691       227.112       237.681    
   4  0.196234      -1.62845      -28.4020       28.4020       231.049       259.451    
   5  0.786411     -0.240275      -4.19069       4.19069       230.021       234.211    
   6  0.453912     -0.789853      -13.7760       13.7760       227.625       241.401    
   7  0.900549     -0.104751      -1.82698       1.82698       230.302       232.129    
   8  0.339919      -1.07905      -18.8199       18.8199       228.088       246.908    
   9  0.511643     -0.670128      -11.6878       11.6878       232.165       243.853    
  10  0.628202     -0.464894      -8.10830       8.10830       231.767       239.875    
  11  0.672886E-01  -2.69876      -47.0697       47.0697       226.974       274.044    
  12  0.518493     -0.656829      -11.4559       11.4559       229.140       240.596    
  13  0.994926     -0.508642E-02 -0.887131E-01  0.887131E-01   228.957       229.046    
  14  0.733191     -0.310349      -5.41285       5.41285       231.389       236.802    
  15  0.952818     -0.483318E-01 -0.842965      0.842965       237.230       238.073    
  16  0.735955     -0.306586      -5.34723       5.34723       238.581       243.928    
  17  0.743149     -0.296859      -5.17757       5.17757       234.506       239.683    
  18  0.549375     -0.598975      -10.4468       10.4468       235.037       245.484    
  19  0.355140      -1.03524      -18.0559       18.0559       229.399       247.455    
  20  0.482165     -0.729469      -12.7228       12.7228       229.684       242.407    
  21  0.577197     -0.549571      -9.58518       9.58518       236.183       245.768    
  22  0.107316E-01  -4.53456      -79.0882       79.0882       241.182       320.270    
  23  0.923969     -0.790764E-01  -1.37919       1.37919       230.875       232.255    
  24  0.810451     -0.210164      -3.66551       3.66551       238.231       241.896    
  25  0.143346      -1.94249      -33.8794       33.8794       233.051       266.930    
  26  0.994184     -0.583318E-02 -0.101738      0.101738       241.078       241.180    
  27  0.870737     -0.138415      -2.41412       2.41412       238.510       240.924    
  28  0.970691     -0.297469E-01 -0.518822      0.518822       239.319       239.838    
  29  0.351269      -1.04620      -18.2470       18.2470       228.831       247.078    
  30  0.464982     -0.765756      -13.3557       13.3557       233.629       246.985    
  31  0.921785     -0.814432E-01  -1.42047       1.42047       230.194       231.615    
  32  0.110512      -2.20263      -38.4165       38.4165       228.512       266.929    
  33  0.261408      -1.34167      -23.4003       23.4003       229.951       253.352    
  34  0.908908     -0.955118E-01  -1.66584       1.66584       231.270       232.936    
  35  0.819412     -0.199168      -3.47372       3.47372       255.461       258.935    
  36  0.466482     -0.762536      -13.2995       13.2995       235.121       248.420    
  37  0.717237     -0.332349      -5.79656       5.79656       251.051       256.848    
  38  0.802331     -0.220234      -3.84114       3.84114       231.092       234.933    
  39  0.949390     -0.519355E-01 -0.905816      0.905816       227.512       228.417    
  40  0.258511      -1.35282      -23.5947       23.5947       237.477       261.072    
  41  0.270423      -1.30777      -22.8090       22.8090       237.369       260.178    
  42  0.366439      -1.00392      -17.5096       17.5096       232.549       250.059    
  43  0.934403     -0.678476E-01  -1.18334       1.18334       228.288       229.471    
  44  0.956654     -0.443133E-01 -0.772876      0.772876       233.901       234.674    
  45  0.377790     -0.973417      -16.9776       16.9776       228.932       245.910    
  46  0.203667      -1.59127      -27.7537       27.7537       232.495       260.249    
  47  0.673892     -0.394685      -6.88377       6.88377       232.157       239.040    
  48  0.347380      -1.05734      -18.4412       18.4412       237.593       256.034    
  49  0.144339      -1.93559      -33.7590       33.7590       250.711       284.470    
  50  0.728571     -0.316670      -5.52309       5.52309       232.919       238.443    
  51  0.243065      -1.41443      -24.6693       24.6693       232.113       256.782    
  52  0.686711     -0.375841      -6.55512       6.55512       245.422       251.978    
loop,thermsimp(1:2)       83   8.64588       23.0786    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207        228.77          1.01          0.98         23.86          0.45          0.05         26.36
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    208        279.00          1.00          0.98         24.11          0.12          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.4412               205
loop is:       83
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.4412               205
loop is:       84
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    8.72059               256

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      207     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -4.86191       4.86191       227.512       232.373    
   2  0.468879     -0.757411      -6.60508       6.60508       228.957       235.562    
   3  0.886741E-01  -2.42279      -21.1281       21.1281       228.288       249.416    
   4  0.211783      -1.55219      -13.5360       13.5360       230.194       243.730    
   5  0.573306     -0.556336      -4.85158       4.85158       230.302       235.154    
   6  0.401711     -0.912021      -7.95337       7.95337       230.875       238.829    
   7  0.505706     -0.681800      -5.94570       5.94570       231.270       237.216    
   8  0.603045     -0.505763      -4.41056       4.41056       230.021       234.431    
   9  0.696575     -0.361580      -3.15320       3.15320       233.901       237.054    
  10  0.294614      -1.22209      -10.6573       10.6573       231.092       241.750    
  11  0.527550     -0.639511      -5.57692       5.57692       227.808       233.385    
  12  0.657157     -0.419832      -3.66119       3.66119       231.389       235.050    
  13  0.627866     -0.465428      -4.05881       4.05881       227.112       231.170    
  14  0.993353E-02  -4.61184      -40.2180       40.2180       237.230       277.448    
  15  0.885166E-01  -2.42456      -21.1436       21.1436       232.919       254.063    
  16  0.265764      -1.32515      -11.5561       11.5561       232.157       243.713    
  17  0.446403     -0.806534      -7.03345       7.03345       234.506       241.539    
  18  0.287864      -1.24527      -10.8595       10.8595       239.319       250.179    
  19  0.926928E-01  -2.37846      -20.7416       20.7416       231.767       252.509    
  20  0.394849     -0.929252      -8.10363       8.10363       229.140       237.244    
  21  0.540746     -0.614805      -5.36146       5.36146       238.510       243.871    
  22  0.846435     -0.166721      -1.45391       1.45391       241.078       242.532    
  23  0.417037     -0.874580      -7.62685       7.62685       227.625       235.252    
  24  0.210713      -1.55726      -13.5802       13.5802       238.231       251.811    
  25  0.764669     -0.268312      -2.33984       2.33984       229.684       232.024    
  26  0.219471E-01  -3.81912      -33.3050       33.3050       232.165       265.470    
  27  0.200728      -1.60581      -14.0036       14.0036       238.581       252.584    
  28  0.572660     -0.557463      -4.86141       4.86141       235.037       239.898    
  29  0.599083E-01  -2.81494      -24.5479       24.5479       236.183       260.731    
  30  0.214614      -1.53891      -13.4202       13.4202       228.932       242.352    
  31  0.489389     -0.714598      -6.23172       6.23172       228.088       234.320    
  32  0.162616      -1.81636      -15.8398       15.8398       233.629       249.469    
  33  0.710022     -0.342459      -2.98645       2.98645       228.831       231.818    
  34  0.753583     -0.282916      -2.46720       2.46720       229.399       231.866    
  35  0.743317     -0.296633      -2.58681       2.58681       235.121       237.707    
  36  0.155416      -1.86165      -16.2347       16.2347       232.549       248.784    
  37  0.643355     -0.441059      -3.84630       3.84630       227.582       231.428    
  38  0.656098     -0.421444      -3.67525       3.67525       245.422       249.098    
  39  0.327550      -1.11611      -9.73317       9.73317       229.951       239.685    
  40  0.192244      -1.64899      -14.3802       14.3802       237.593       251.973    
  41  0.433590     -0.835657      -7.28742       7.28742       232.113       239.400    
  42  0.788561     -0.237545      -2.07154       2.07154       251.051       253.123    
  43  0.978028     -0.222173E-01 -0.193748      0.193748       255.461       255.655    
  44  0.110322      -2.20435      -19.2233       19.2233       231.049       250.272    
  45  0.795332     -0.228995      -1.99698       1.99698       237.369       239.366    
  46  0.497518E-01  -3.00071      -26.1680       26.1680       232.495       258.663    
  47  0.852459     -0.159631      -1.39207       1.39207       237.477       238.869    
  48  0.133240      -2.01560      -17.5772       17.5772       228.512       246.089    
  49  0.671163     -0.398743      -3.47728       3.47728       233.051       236.528    
  50  0.245122      -1.40600      -12.2611       12.2611       226.974       239.235    
  51  0.820498     -0.197843      -1.72531       1.72531       250.711       252.437    
  52  0.422422     -0.861751      -7.51498       7.51498       228.765       236.280    
loop,thermsimp(1:2)       84   4.86191       6.60508    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209        240.52          1.03          0.99         23.86          0.36          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    210        375.70          0.99          0.99         24.05          0.25          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    240.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       84
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       85
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      209     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -14.1450       14.1450       227.112       241.257    
   2  0.793097     -0.231809      -2.02152       2.02152       227.582       229.603    
   3  0.261081      -1.34293      -11.7111       11.7111       228.831       240.542    
   4  0.912198     -0.918984E-01 -0.801409      0.801409       229.399       230.201    
   5  0.493539     -0.706153      -6.15807       6.15807       229.684       235.843    
   6  0.721001     -0.327115      -2.85263       2.85263       227.512       230.364    
   7  0.578790     -0.546816      -4.76856       4.76856       227.808       232.576    
   8  0.684127     -0.379612      -3.31044       3.31044       228.088       231.399    
   9  0.627712     -0.465674      -4.06095       4.06095       230.021       234.082    
  10  0.858540     -0.152522      -1.33008       1.33008       231.389       232.719    
  11  0.712254E-01  -2.64191      -23.0390       23.0390       230.302       253.341    
  12  0.927250     -0.755316E-01 -0.658681      0.658681       227.625       228.284    
  13  0.458073     -0.780727      -6.80840       6.80840       228.957       235.765    
  14  0.940004     -0.618714E-01 -0.539555      0.539555       228.765       229.305    
  15  0.322549      -1.13150      -9.86736       9.86736       233.051       242.918    
  16  0.939473     -0.624358E-01 -0.544477      0.544477       233.901       234.446    
  17  0.726080     -0.320095      -2.79142       2.79142       231.270       234.062    
  18  0.602088E-02  -5.11252      -44.5842       44.5842       229.140       273.724    
  19  0.735289     -0.307492      -2.68151       2.68151       235.121       237.802    
  20  0.847617     -0.165326      -1.44174       1.44174       230.875       232.317    
  21  0.747190E-01  -2.59402      -22.6214       22.6214       237.477       260.099    
  22  0.248374      -1.39282      -12.1462       12.1462       226.974       239.120    
  23  0.350184      -1.04930      -9.15048       9.15048       237.369       246.519    
  24  0.327739E-03  -8.02329      -69.9679       69.9679       232.113       302.080    
  25  0.130012      -2.04013      -17.7911       17.7911       229.951       247.743    
  26  0.609791     -0.494639      -4.31355       4.31355       235.037       239.350    
  27  0.793414     -0.231410      -2.01803       2.01803       234.506       236.524    
  28  0.962567     -0.381519E-01 -0.332707      0.332707       231.092       231.425    
  29  0.499469     -0.694211      -6.05393       6.05393       228.932       234.986    
  30  0.887491     -0.119357      -1.04087       1.04087       241.078       242.119    
  31  0.136374      -1.99236      -17.3745       17.3745       232.157       249.531    
  32  0.292356      -1.22978      -10.7244       10.7244       230.194       240.919    
  33  0.301564      -1.19877      -10.4540       10.4540       238.510       248.964    
  34  0.352543      -1.04258      -9.09193       9.09193       228.512       237.604    
  35  0.483726     -0.726236      -6.33321       6.33321       232.549       238.882    
  36  0.410499     -0.890381      -7.76465       7.76465       245.422       253.187    
  37  0.458111     -0.780644      -6.80768       6.80768       228.288       235.096    
  38  0.670071     -0.400372      -3.49148       3.49148       233.629       237.120    
  39  0.175486      -1.74020      -15.1755       15.1755       239.319       254.495    
  40  0.798907     -0.224511      -1.95787       1.95787       231.049       233.007    
  41  0.270487      -1.30753      -11.4025       11.4025       238.231       249.633    
  42  0.480368     -0.733202      -6.39396       6.39396       237.593       243.987    
  43  0.658406     -0.417933      -3.64463       3.64463       250.711       254.356    
  44  0.937976     -0.640304E-01 -0.558383      0.558383       231.767       232.326    
  45  0.710083     -0.342373      -2.98569       2.98569       238.581       241.567    
  46  0.567340     -0.566797      -4.94281       4.94281       251.051       255.994    
  47  0.201426      -1.60233      -13.9733       13.9733       232.919       246.893    
  48  0.660313     -0.415042      -3.61941       3.61941       255.461       259.081    
  49  0.524008     -0.646249      -5.63568       5.63568       232.495       238.131    
  50  0.513616     -0.666280      -5.81036       5.81036       236.183       241.994    
  51  0.951218     -0.500122E-01 -0.436137      0.436137       232.165       232.601    
  52  0.703465     -0.351737      -3.06736       3.06736       240.524       243.591    
loop,thermsimp(1:2)       85   14.1450       2.02152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211        235.05          1.05          0.98         23.51          0.77          0.05         26.37
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212        264.23          0.99          0.98         23.98          0.21          0.05         26.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    235.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       85
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       86
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      211     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -6.67975       6.67975       227.625       234.305    
   2  0.948887     -0.524654E-01 -0.457530      0.457530       228.765       229.223    
   3  0.532332     -0.630488      -5.49823       5.49823       227.582       233.080    
   4  0.374267     -0.982785      -8.57047       8.57047       229.399       237.970    
   5  0.694531     -0.364519      -3.17882       3.17882       227.512       230.690    
   6  0.414371     -0.880994      -7.68279       7.68279       228.088       235.771    
   7  0.208827E-01  -3.86883      -33.7385       33.7385       231.092       264.831    
   8  0.627187     -0.466511      -4.06825       4.06825       230.875       234.944    
   9  0.148799E-01  -4.20774      -36.6940       36.6940       231.767       268.461    
  10  0.809008     -0.211946      -1.84830       1.84830       227.808       229.656    
  11  0.647680     -0.434359      -3.78787       3.78787       232.165       235.953    
  12  0.289351      -1.24012      -10.8146       10.8146       231.389       242.204    
  13  0.222457      -1.50302      -13.1072       13.1072       231.049       244.156    
  14  0.374268     -0.982782      -8.57045       8.57045       231.270       239.841    
  15  0.785765     -0.241097      -2.10251       2.10251       230.021       232.123    
  16  0.298051      -1.21049      -10.5562       10.5562       233.901       244.457    
  17  0.725075     -0.321480      -2.80350       2.80350       228.932       231.736    
  18  0.386364     -0.950976      -8.29308       8.29308       228.288       236.581    
  19  0.631686     -0.459363      -4.00591       4.00591       228.957       232.963    
  20  0.688282     -0.373557      -3.25764       3.25764       229.684       232.942    
  21  0.373817     -0.983990      -8.58097       8.58097       234.506       243.087    
  22  0.219845      -1.51483      -13.2103       13.2103       233.629       246.839    
  23  0.926271     -0.765889E-01 -0.667900      0.667900       228.512       229.180    
  24  0.618127     -0.481061      -4.19514       4.19514       235.121       239.316    
  25  0.176216      -1.73604      -15.1393       15.1393       232.495       247.634    
  26  0.742943     -0.297136      -2.59120       2.59120       232.549       235.140    
  27  0.357690      -1.02809      -8.96554       8.96554       226.974       235.939    
  28  0.478359     -0.737394      -6.43051       6.43051       235.037       241.467    
  29  0.395976     -0.926401      -8.07876       8.07876       228.831       236.910    
  30  0.803186     -0.219169      -1.91128       1.91128       230.194       232.105    
  31  0.231845      -1.46168      -12.7468       12.7468       227.112       239.858    
  32  0.808968     -0.211996      -1.84873       1.84873       238.581       240.430    
  33  0.579217     -0.546078      -4.76212       4.76212       236.183       240.945    
  34  0.384357     -0.956183      -8.33849       8.33849       241.078       249.417    
  35  0.856367     -0.155057      -1.35219       1.35219       233.051       234.403    
  36  0.265661      -1.32553      -11.5594       11.5594       240.524       252.083    
  37  0.288915      -1.24162      -10.8277       10.8277       237.593       248.420    
  38  0.224915      -1.49203      -13.0114       13.0114       237.369       250.380    
  39  0.685944     -0.376959      -3.28731       3.28731       232.919       236.207    
  40  0.265936      -1.32450      -11.5504       11.5504       229.951       241.502    
  41  0.412966     -0.884389      -7.71240       7.71240       238.510       246.222    
  42  0.440796     -0.819173      -7.14368       7.14368       232.157       239.300    
  43  0.572522     -0.557705      -4.86351       4.86351       238.231       243.094    
  44  0.798412     -0.225131      -1.96328       1.96328       245.422       247.386    
  45  0.127097      -2.06281      -17.9889       17.9889       230.302       248.291    
  46  0.243397      -1.41306      -12.3227       12.3227       250.711       263.034    
  47  0.322195      -1.13260      -9.87692       9.87692       239.319       249.196    
  48  0.512728     -0.668011      -5.82545       5.82545       251.051       256.877    
  49  0.786191     -0.240556      -2.09779       2.09779       255.461       257.559    
  50  0.733079     -0.310501      -2.70775       2.70775       237.477       240.185    
  51  0.601364     -0.508554      -4.43489       4.43489       229.140       233.575    
  52  0.348529      -1.05403      -9.19179       9.19179       235.052       244.244    
loop,thermsimp(1:2)       86   6.67975      0.457530    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213        246.16          1.01          0.99         23.77          0.46          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    246.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       86
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       87
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      212     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -14.8113       14.8113       228.512       243.324    
   2  0.721345     -0.326637      -2.84847       2.84847       228.765       231.614    
   3  0.842493     -0.171390      -1.49462       1.49462       227.808       229.303    
   4  0.260540      -1.34500      -11.7292       11.7292       227.512       239.241    
   5  0.782605     -0.245127      -2.13765       2.13765       228.932       231.070    
   6  0.208492      -1.56785      -13.6726       13.6726       230.194       243.867    
   7  0.290568E-01  -3.53850      -30.8578       30.8578       230.021       260.879    
   8  0.673682     -0.394997      -3.44461       3.44461       229.684       233.129    
   9  0.399393     -0.917808      -8.00383       8.00383       228.957       236.961    
  10  0.966971     -0.335863E-01 -0.292893      0.292893       227.582       227.875    
  11  0.390645     -0.939956      -8.19697       8.19697       229.140       237.337    
  12  0.259548      -1.34881      -11.7625       11.7625       227.625       239.388    
  13  0.260765      -1.34413      -11.7217       11.7217       233.051       244.772    
  14  0.110601E-01  -4.50441      -39.2812       39.2812       230.875       270.157    
  15  0.727710     -0.317852      -2.77186       2.77186       232.549       235.321    
  16  0.717076     -0.332574      -2.90024       2.90024       228.088       230.988    
  17  0.612129     -0.490811      -4.28017       4.28017       226.974       231.254    
  18  0.589376     -0.528691      -4.61050       4.61050       232.165       236.776    
  19  0.541615     -0.613199      -5.34746       5.34746       232.919       238.267    
  20  0.330403      -1.10744      -9.65755       9.65755       228.288       237.946    
  21  0.229530      -1.47172      -12.8343       12.8343       228.831       241.665    
  22  0.564010     -0.572684      -4.99414       4.99414       229.399       234.393    
  23  0.454226     -0.789161      -6.88195       6.88195       232.157       239.039    
  24  0.579528     -0.545541      -4.75744       4.75744       235.121       239.878    
  25  0.245500      -1.40446      -12.2477       12.2477       231.270       243.518    
  26  0.708019     -0.345284      -3.01108       3.01108       227.112       230.123    
  27  0.300215      -1.20326      -10.4931       10.4931       237.477       247.970    
  28  0.721461     -0.326478      -2.84708       2.84708       238.581       241.428    
  29  0.326772      -1.11849      -9.75393       9.75393       236.183       245.937    
  30  0.580879     -0.543212      -4.73713       4.73713       235.037       239.774    
  31  0.963075     -0.376241E-01 -0.328105      0.328105       229.951       230.280    
  32  0.656935     -0.420170      -3.66413       3.66413       231.389       235.053    
  33  0.908335     -0.961416E-01 -0.838412      0.838412       234.506       235.344    
  34  0.765938     -0.266654      -2.32539       2.32539       238.231       240.556    
  35  0.497301     -0.698561      -6.09186       6.09186       231.049       237.141    
  36  0.833603     -0.181997      -1.58713       1.58713       235.052       236.639    
  37  0.433057     -0.836886      -7.29814       7.29814       233.901       241.199    
  38  0.349547      -1.05112      -9.16636       9.16636       238.510       247.676    
  39  0.142838      -1.94604      -16.9707       16.9707       233.629       250.600    
  40  0.326780      -1.11847      -9.75371       9.75371       245.422       255.176    
  41  0.707709     -0.345723      -3.01491       3.01491       232.495       235.510    
  42  0.914339     -0.895538E-01 -0.780962      0.780962       230.302       231.083    
  43  0.392800     -0.934454      -8.14899       8.14899       237.593       245.742    
  44  0.434772     -0.832933      -7.26367       7.26367       239.319       246.583    
  45  0.229545      -1.47165      -12.8337       12.8337       241.078       253.912    
  46  0.661281     -0.413577      -3.60664       3.60664       237.369       240.976    
  47  0.459966     -0.776602      -6.77243       6.77243       240.524       247.296    
  48  0.352439      -1.04288      -9.09450       9.09450       251.051       260.146    
  49  0.490345     -0.712647      -6.21470       6.21470       255.461       261.676    
  50  0.837788     -0.176990      -1.54346       1.54346       250.711       252.255    
  51  0.247493      -1.39637      -12.1772       12.1772       231.092       243.270    
  52  0.221382      -1.50787      -13.1495       13.1495       246.156       259.305    
loop,thermsimp(1:2)       87   14.8113       2.84847    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214        231.27          1.00          0.98         23.63          0.52          0.05         26.20
Just calling func    0   0         26.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    215        247.91          1.03          1.00         23.95          0.21          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       87
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       88
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      214     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -13.1970       13.1970       227.582       240.779    
   2  0.246752E-01  -3.70196      -32.2833       32.2833       227.808       260.091    
   3  0.679039     -0.387076      -3.37554       3.37554       227.112       230.487    
   4  0.709027     -0.343862      -2.99868       2.99868       229.951       232.950    
   5  0.577754     -0.548608      -4.78419       4.78419       228.088       232.872    
   6  0.738694     -0.302871      -2.64122       2.64122       228.932       231.573    
   7  0.181723      -1.70527      -14.8710       14.8710       230.302       245.173    
   8  0.103748      -2.26579      -19.7590       19.7590       226.974       246.733    
   9  0.456811E-02  -5.38866      -46.9923       46.9923       228.765       275.757    
  10  0.303247      -1.19321      -10.4055       10.4055       229.684       240.090    
  11  0.284736      -1.25619      -10.9547       10.9547       229.399       240.354    
  12  0.900494     -0.104812     -0.914023      0.914023       231.389       232.303    
  13  0.691792     -0.368470      -3.21327       3.21327       232.549       235.762    
  14  0.502714     -0.687735      -5.99745       5.99745       234.506       240.503    
  15  0.305219      -1.18673      -10.3490       10.3490       232.495       242.844    
  16  0.412005     -0.886720      -7.73273       7.73273       235.052       242.785    
  17  0.412225     -0.886186      -7.72806       7.72806       232.165       239.893    
  18  0.121697      -2.10622      -18.3675       18.3675       228.957       247.324    
  19  0.465374     -0.764915      -6.67051       6.67051       231.049       237.720    
  20  0.273016      -1.29823      -11.3213       11.3213       229.140       240.461    
  21  0.502763     -0.687636      -5.99659       5.99659       228.288       234.285    
  22  0.516442     -0.660793      -5.76251       5.76251       232.919       238.682    
  23  0.554333     -0.589990      -5.14506       5.14506       232.157       237.302    
  24  0.192397E-01  -3.95078      -34.4531       34.4531       227.512       261.965    
  25  0.451279E-01  -3.09825      -27.0186       27.0186       227.625       254.644    
  26  0.457340     -0.782327      -6.82236       6.82236       235.037       241.859    
  27  0.325184      -1.12336      -9.79639       9.79639       235.121       244.917    
  28  0.700952     -0.355315      -3.09856       3.09856       238.231       241.329    
  29  0.961087     -0.396906E-01 -0.346126      0.346126       237.369       237.715    
  30  0.195966E-02  -6.23498      -54.3728       54.3728       233.901       288.274    
  31  0.766376     -0.266082      -2.32040       2.32040       238.581       240.901    
  32  0.398846     -0.919180      -8.01579       8.01579       228.831       236.847    
  33  0.675249     -0.392674      -3.42435       3.42435       231.092       234.517    
  34  0.189468      -1.66354      -14.5070       14.5070       228.512       243.019    
  35  0.444608     -0.810562      -7.06858       7.06858       231.270       238.339    
  36  0.514006     -0.665520      -5.80373       5.80373       230.194       235.998    
  37  0.575199     -0.553039      -4.82283       4.82283       233.051       237.873    
  38  0.121449      -2.10826      -18.3853       18.3853       237.593       255.978    
  39  0.209130      -1.56480      -13.6460       13.6460       236.183       249.829    
  40  0.466284E-01  -3.06555      -26.7334       26.7334       239.319       266.052    
  41  0.386630E-01  -3.25287      -28.3670       28.3670       240.524       268.891    
  42  0.335751E-01  -3.39397      -29.5974       29.5974       238.510       268.107    
  43  0.878126     -0.129965      -1.13337       1.13337       237.477       238.611    
  44  0.652938     -0.426273      -3.71735       3.71735       233.629       237.346    
  45  0.932456E-01  -2.37252      -20.6898       20.6898       250.711       271.401    
  46  0.662683     -0.411458      -3.58816       3.58816       241.078       244.666    
  47  0.204704      -1.58619      -13.8325       13.8325       245.422       259.255    
  48  0.985446     -0.146609E-01 -0.127852      0.127852       246.156       246.284    
  49  0.105847      -2.24576      -19.5844       19.5844       251.051       270.635    
  50  0.843201     -0.170550      -1.48730       1.48730       230.021       231.508    
  51  0.364087      -1.01036      -8.81096       8.81096       255.461       264.272    
  52  0.650651E-01  -2.73237      -23.8279       23.8279       231.273       255.101    
loop,thermsimp(1:2)       88   13.1970       32.2833    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216        228.69          1.01          0.98         23.45          0.78          0.06         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    217        232.38          0.96          0.99         23.96          0.23          0.05         26.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       88
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       89
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      216     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -1.14694       1.14694       227.112       228.258    
   2  0.765270     -0.267527      -2.33299       2.33299       230.021       232.354    
   3  0.215687      -1.53393      -13.3768       13.3768       228.932       242.309    
   4  0.999601E-01  -2.30298      -20.0834       20.0834       231.389       251.473    
   5  0.706519     -0.347405      -3.02958       3.02958       228.088       231.118    
   6  0.201358      -1.60267      -13.9763       13.9763       229.951       243.928    
   7  0.450677     -0.797005      -6.95036       6.95036       228.288       235.238    
   8  0.897557     -0.108078     -0.942508      0.942508       231.092       232.035    
   9  0.161166      -1.82532      -15.9179       15.9179       232.549       248.467    
  10  0.972556E-01  -2.33041      -20.3226       20.3226       230.194       250.517    
  11  0.742112     -0.298255      -2.60096       2.60096       228.831       231.432    
  12  0.172377      -1.75807      -15.3314       15.3314       232.157       247.488    
  13  0.658751     -0.417410      -3.64006       3.64006       233.629       237.269    
  14  0.725340     -0.321114      -2.80031       2.80031       237.369       240.169    
  15  0.501488     -0.690175      -6.01873       6.01873       231.049       237.068    
  16  0.845372     -0.167978      -1.46487       1.46487       233.051       234.515    
  17  0.132369      -2.02216      -17.6344       17.6344       231.270       248.905    
  18  0.734515E-01  -2.61113      -22.7706       22.7706       237.477       260.248    
  19  0.391205     -0.938523      -8.18448       8.18448       232.919       241.104    
  20  0.376983     -0.975555      -8.50742       8.50742       232.165       240.673    
  21  0.315463      -1.15371      -10.0611       10.0611       229.684       239.746    
  22  0.267113      -1.32008      -11.5119       11.5119       229.399       240.911    
  23  0.965292     -0.353243E-01 -0.308049      0.308049       229.140       229.448    
  24  0.954592     -0.464714E-01 -0.405259      0.405259       234.506       234.911    
  25  0.992414     -0.761515E-02 -0.664086E-01  0.664086E-01   227.582       227.648    
  26  0.867953E-02  -4.74679      -41.3948       41.3948       238.581       279.976    
  27  0.829585     -0.186829      -1.62926       1.62926       238.231       239.860    
  28  0.349695      -1.05069      -9.16268       9.16268       235.037       244.200    
  29  0.673511     -0.395251      -3.44682       3.44682       235.052       238.499    
  30  0.340696      -1.07676      -9.39003       9.39003       232.495       241.885    
  31  0.558731     -0.582087      -5.07614       5.07614       228.512       233.588    
  32  0.747295     -0.291295      -2.54026       2.54026       241.078       243.619    
  33  0.123287      -2.09324      -18.2543       18.2543       235.121       253.375    
  34  0.355051      -1.03549      -9.03011       9.03011       230.302       239.332    
  35  0.511895     -0.669636      -5.83962       5.83962       246.156       251.995    
  36  0.571856E-01  -2.86145      -24.9536       24.9536       226.974       251.927    
  37  0.507517     -0.678226      -5.91453       5.91453       228.957       234.871    
  38  0.326770      -1.11850      -9.75396       9.75396       236.183       245.937    
  39  0.736001     -0.306523      -2.67306       2.67306       227.625       230.298    
  40  0.970046     -0.304120E-01 -0.265210      0.265210       231.273       231.538    
  41  0.673510     -0.395253      -3.44684       3.44684       237.593       241.040    
  42  0.335032      -1.09353      -9.53623       9.53623       245.422       254.959    
  43  0.872321E-01  -2.43918      -21.2711       21.2711       227.808       249.079    
  44  0.749956     -0.287741      -2.50927       2.50927       227.512       230.021    
  45  0.159001      -1.83884      -16.0358       16.0358       255.461       271.497    
  46  0.529687     -0.635468      -5.54166       5.54166       239.319       244.861    
  47  0.142415      -1.94901      -16.9965       16.9965       238.510       255.506    
  48  0.803387     -0.218919      -1.90910       1.90910       240.524       242.433    
  49  0.709133     -0.343713      -2.99738       2.99738       251.051       254.048    
  50  0.261172      -1.34258      -11.7081       11.7081       250.711       262.419    
  51  0.106599      -2.23868      -19.5227       19.5227       228.765       248.288    
  52  0.955666     -0.453468E-01 -0.395451      0.395451       228.685       229.081    
loop,thermsimp(1:2)       89   1.14694       2.33299    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218        227.53          1.08          1.00         23.62          0.41          0.05         26.16
Just calling func    0   0         26.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    219        249.89          1.01          1.00         23.95          0.16          0.05         26.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       89
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       90
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      218     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -16.1257       16.1257       227.582       243.707    
   2  0.894146     -0.111886     -0.975710      0.975710       227.112       228.087    
   3  0.721270     -0.326741      -2.84938       2.84938       228.685       231.535    
   4  0.536866     -0.622006      -5.42426       5.42426       229.140       234.564    
   5  0.418107     -0.872017      -7.60450       7.60450       227.512       235.116    
   6  0.391189     -0.938564      -8.18484       8.18484       227.625       235.810    
   7  0.799669     -0.223558      -1.94955       1.94955       228.088       230.038    
   8  0.595070     -0.519076      -4.52666       4.52666       228.831       233.358    
   9  0.384356E-03  -7.86394      -68.5782       68.5782       231.273       299.851    
  10  0.654302     -0.424187      -3.69916       3.69916       231.092       234.791    
  11  0.873355     -0.135413      -1.18088       1.18088       230.021       231.202    
  12  0.303212      -1.19332      -10.4065       10.4065       228.512       238.919    
  13  0.434159     -0.834344      -7.27598       7.27598       233.051       240.327    
  14  0.970825     -0.296089E-01 -0.258208      0.258208       228.957       229.215    
  15  0.405896     -0.901659      -7.86300       7.86300       234.506       242.369    
  16  0.250423      -1.38461      -12.0746       12.0746       228.288       240.363    
  17  0.517030     -0.659654      -5.75257       5.75257       231.049       236.802    
  18  0.165468      -1.79897      -15.6881       15.6881       233.629       249.317    
  19  0.679403     -0.386541      -3.37086       3.37086       235.052       238.423    
  20  0.554013     -0.590567      -5.15009       5.15009       230.302       235.452    
  21  0.211764E-01  -3.85487      -33.6168       33.6168       229.684       263.301    
  22  0.453828     -0.790038      -6.88960       6.88960       238.231       245.120    
  23  0.377409     -0.974426      -8.49757       8.49757       237.369       245.867    
  24  0.496879     -0.699408      -6.09925       6.09925       232.165       238.265    
  25  0.214619      -1.53889      -13.4200       13.4200       229.399       242.819    
  26  0.724154     -0.322751      -2.81458       2.81458       237.593       240.407    
  27  0.385609     -0.952932      -8.31013       8.31013       232.919       241.230    
  28  0.777864     -0.251204      -2.19064       2.19064       232.495       234.686    
  29  0.709283     -0.343500      -2.99552       2.99552       228.932       231.928    
  30  0.191760      -1.65151      -14.4022       14.4022       240.524       254.926    
  31  0.347616      -1.05666      -9.21467       9.21467       241.078       250.293    
  32  0.191581      -1.65244      -14.4103       14.4103       229.951       244.362    
  33  0.770989     -0.260081      -2.26807       2.26807       235.037       237.305    
  34  0.788566E-01  -2.54012      -22.1514       22.1514       239.319       261.470    
  35  0.229474      -1.47197      -12.8364       12.8364       236.183       249.020    
  36  0.339326      -1.08079      -9.42516       9.42516       232.157       241.582    
  37  0.220886      -1.51011      -13.1690       13.1690       228.765       241.934    
  38  0.223644      -1.49770      -13.0608       13.0608       232.549       245.610    
  39  0.138287      -1.97842      -17.2530       17.2530       231.270       248.523    
  40  0.796402     -0.227651      -1.98525       1.98525       227.808       229.793    
  41  0.104384      -2.25968      -19.7057       19.7057       230.194       249.900    
  42  0.919642     -0.837713E-01 -0.730535      0.730535       231.389       232.120    
  43  0.360767      -1.01952      -8.89085       8.89085       226.974       235.865    
  44  0.924300     -0.787181E-01 -0.686468      0.686468       246.156       246.842    
  45  0.561139     -0.577786      -5.03864       5.03864       235.121       240.159    
  46  0.509073E-01  -2.97775      -25.9677       25.9677       251.051       277.019    
  47  0.715469     -0.334817      -2.91981       2.91981       245.422       248.342    
  48  0.294040E-01  -3.52662      -30.7543       30.7543       238.510       269.264    
  49  0.264026E-02  -5.93688      -51.7731       51.7731       237.477       289.250    
  50  0.634029     -0.455661      -3.97363       3.97363       250.711       254.685    
  51  0.319148      -1.14210      -9.95980       9.95980       255.461       265.421    
  52  0.495674     -0.701836      -6.12043       6.12043       227.526       233.647    
loop,thermsimp(1:2)       90   16.1257      0.975710    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220        230.41          1.03          0.98         23.49          0.80          0.05         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221        233.51          0.98          0.99         23.77          0.43          0.05         26.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    233.51        2.925     -1.195      4.947     -100.0      1.487    
                     -0.5818      2.385     -100.0      2.070      1.196    
                       1.381    -0.9669      1.841      0.000      0.000    
                      -1.399      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.778     -2.565     -13.97     -2.428    
                      -13.83     -2.086      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.1022    -0.3561E-01  0.000    -0.7019    
                     -0.2060    -0.2321    -0.2453    -0.2188    -0.4410E-01

                     -0.9895    -0.6814      0.000    -0.4946E-01 0.1005E-02
                      0.8541E-01 0.2433E-01-0.1309    -0.1670    -0.5503E-01
                      0.2063     0.1985    -0.1306     -1.375      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.197      9.176     -7039.     -4.000    
                     -0.3431     0.1084      9.111      8.572     -4904.    

                      -4.000     0.1391E-01-0.7947      8.806      9.021    
                      -6912.     -4.000    -0.7041E-01-0.6724      9.566    
                       8.859     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    230.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       90
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       91
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      220     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -19.8319       19.8319       227.112       246.943    
   2  0.846291     -0.166892      -1.45540       1.45540       228.957       230.412    
   3  0.167054      -1.78944      -15.6049       15.6049       227.808       243.413    
   4  0.786038     -0.240750      -2.09949       2.09949       228.088       230.188    
   5  0.680218     -0.385341      -3.36041       3.36041       230.021       233.381    
   6  0.843894     -0.169729      -1.48014       1.48014       228.685       230.165    
   7  0.295559      -1.21889      -10.6294       10.6294       228.932       239.562    
   8  0.383493     -0.958433      -8.35810       8.35810       231.389       239.747    
   9  0.867247     -0.142431      -1.24208       1.24208       228.831       230.073    
  10  0.241960      -1.41898      -12.3744       12.3744       227.526       239.900    
  11  0.486925     -0.719645      -6.27573       6.27573       229.140       235.416    
  12  0.750166     -0.287460      -2.50683       2.50683       232.495       235.002    
  13  0.507045     -0.679156      -5.92264       5.92264       231.092       237.015    
  14  0.237743      -1.43656      -12.5277       12.5277       227.512       240.039    
  15  0.256837E-01  -3.66190      -31.9339       31.9339       230.302       262.236    
  16  0.776460     -0.253010      -2.20639       2.20639       227.625       229.832    
  17  0.316300      -1.15106      -10.0380       10.0380       226.974       237.012    
  18  0.493161     -0.706919      -6.16475       6.16475       231.049       237.214    
  19  0.807271     -0.214096      -1.86704       1.86704       235.037       236.904    
  20  0.338915      -1.08201      -9.43573       9.43573       232.165       241.601    
  21  0.132986      -2.01751      -17.5939       17.5939       235.052       252.646    
  22  0.409975     -0.891659      -7.77580       7.77580       228.512       236.288    
  23  0.525021     -0.644317      -5.61883       5.61883       235.121       240.739    
  24  0.393064     -0.933783      -8.14314       8.14314       233.051       241.194    
  25  0.176068      -1.73689      -15.1467       15.1467       228.288       243.435    
  26  0.965490     -0.351191E-01 -0.306260      0.306260       237.593       237.899    
  27  0.387767     -0.947350      -8.26145       8.26145       232.919       241.181    
  28  0.936248     -0.658753E-01 -0.574472      0.574472       232.157       232.731    
  29  0.914720     -0.891370E-01 -0.777328      0.777328       228.765       229.542    
  30  0.332171      -1.10211      -9.61102       9.61102       234.506       244.117    
  31  0.845314E-01  -2.47063      -21.5454       21.5454       229.399       250.945    
  32  0.687741     -0.374343      -3.26449       3.26449       227.582       230.846    
  33  0.899776     -0.105610     -0.920978      0.920978       229.951       230.872    
  34  0.558791     -0.581980      -5.07521       5.07521       238.231       243.306    
  35  0.882799     -0.124658      -1.08709       1.08709       232.549       233.636    
  36  0.235569      -1.44575      -12.6078       12.6078       237.369       249.977    
  37  0.533400     -0.628484      -5.48075       5.48075       246.156       251.637    
  38  0.147169      -1.91617      -16.7101       16.7101       245.422       262.133    
  39  0.966208E-01  -2.33696      -20.3797       20.3797       231.270       251.650    
  40  0.952887     -0.482588E-01 -0.420845      0.420845       236.183       236.604    
  41  0.155551      -1.86078      -16.2271       16.2271       233.629       249.856    
  42  0.645067     -0.438401      -3.82312       3.82312       230.194       234.017    
  43  0.394254     -0.930759      -8.11677       8.11677       241.078       249.195    
  44  0.546893     -0.603501      -5.26289       5.26289       250.711       255.974    
  45  0.390314     -0.940803      -8.20436       8.20436       240.524       248.728    
  46  0.311561      -1.16616      -10.1696       10.1696       239.319       249.489    
  47  0.752427E-01  -2.58704      -22.5605       22.5605       229.684       252.245    
  48  0.144673      -1.93328      -16.8594       16.8594       255.461       272.321    
  49  0.297567      -1.21212      -10.5704       10.5704       238.510       249.080    
  50  0.544131     -0.608565      -5.30705       5.30705       251.051       256.358    
  51  0.750603E-01  -2.58946      -22.5817       22.5817       237.477       260.059    
  52  0.127547      -2.05927      -17.9581       17.9581       230.407       248.365    
loop,thermsimp(1:2)       91   19.8319       1.45540    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222        228.01          1.04          0.98         23.39          0.81          0.06         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223        246.96          1.02          0.98         23.95          0.25          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       91
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       92
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      222     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -13.2588       13.2588       228.765       242.024    
   2  0.389473     -0.942961      -8.22318       8.22318       227.625       235.848    
   3  0.919121     -0.843378E-01 -0.735476      0.735476       228.831       229.567    
   4  0.970518     -0.299250E-01 -0.260964      0.260964       228.685       228.946    
   5  0.713317     -0.337830      -2.94608       2.94608       228.088       231.034    
   6  0.639607     -0.446902      -3.89725       3.89725       228.957       232.854    
   7  0.712661     -0.338749      -2.95409       2.95409       227.582       230.536    
   8  0.212311      -1.54970      -13.5143       13.5143       229.951       243.466    
   9  0.831769     -0.184200      -1.60634       1.60634       232.157       233.763    
  10  0.794875     -0.229571      -2.00199       2.00199       230.021       232.023    
  11  0.909815     -0.945137E-01 -0.824216      0.824216       232.549       233.373    
  12  0.753651E-01  -2.58541      -22.5463       22.5463       230.194       252.740    
  13  0.676081     -0.391442      -3.41361       3.41361       232.495       235.909    
  14  0.597437     -0.515107      -4.49204       4.49204       229.140       233.632    
  15  0.146947      -1.91768      -16.7233       16.7233       228.512       245.236    
  16  0.854910     -0.156760      -1.36704       1.36704       236.183       237.550    
  17  0.984999     -0.151146E-01 -0.131808      0.131808       235.037       235.169    
  18  0.533419     -0.628448      -5.48044       5.48044       226.974       232.454    
  19  0.383774     -0.957703      -8.35174       8.35174       231.092       239.444    
  20  0.691729     -0.368561      -3.21407       3.21407       231.049       234.263    
  21  0.313732E-01  -3.46180      -30.1890       30.1890       237.593       267.782    
  22  0.415635     -0.877947      -7.65622       7.65622       228.932       236.588    
  23  0.288746      -1.24221      -10.8328       10.8328       231.389       242.222    
  24  0.176464      -1.73464      -15.1271       15.1271       227.526       242.653    
  25  0.881312     -0.126344      -1.10179       1.10179       227.512       228.613    
  26  0.962783     -0.379267E-01 -0.330744      0.330744       235.121       235.451    
  27  0.415450     -0.878393      -7.66011       7.66011       232.919       240.580    
  28  0.271836      -1.30256      -11.3591       11.3591       233.051       244.410    
  29  0.926655     -0.761736E-01 -0.664279      0.664279       232.165       232.830    
  30  0.277790      -1.28089      -11.1701       11.1701       238.231       249.401    
  31  0.189974      -1.66087      -14.4838       14.4838       227.808       242.292    
  32  0.410540     -0.890281      -7.76378       7.76378       228.288       236.052    
  33  0.952387     -0.487839E-01 -0.425425      0.425425       234.506       234.931    
  34  0.896015     -0.109798     -0.957503      0.957503       227.112       228.069    
  35  0.121549E-01  -4.41002      -38.4580       38.4580       230.407       268.865    
  36  0.723911     -0.323087      -2.81751       2.81751       240.524       243.341    
  37  0.759053     -0.275683      -2.40412       2.40412       238.510       240.914    
  38  0.969929     -0.305320E-01 -0.266257      0.266257       241.078       241.345    
  39  0.852636     -0.159422      -1.39026       1.39026       239.319       240.709    
  40  0.730471     -0.314065      -2.73884       2.73884       233.629       236.368    
  41  0.528358     -0.637981      -5.56357       5.56357       237.369       242.933    
  42  0.404403     -0.905344      -7.89514       7.89514       229.399       237.294    
  43  0.232822      -1.45748      -12.7101       12.7101       246.156       258.866    
  44  0.847643     -0.165296      -1.44148       1.44148       231.270       232.712    
  45  0.429393E-01  -3.14797      -27.4521       27.4521       229.684       257.137    
  46  0.673157     -0.395777      -3.45141       3.45141       235.052       238.503    
  47  0.806068E-01  -2.51817      -21.9600       21.9600       250.711       272.671    
  48  0.926018     -0.768619E-01 -0.670281      0.670281       251.051       251.721    
  49  0.167973      -1.78395      -15.5571       15.5571       237.477       253.034    
  50  0.780773     -0.247471      -2.15809       2.15809       245.422       247.580    
  51  0.565702E-01  -2.87227      -25.0479       25.0479       230.302       255.350    
  52  0.646011     -0.436939      -3.81037       3.81037       228.015       231.825    
loop,thermsimp(1:2)       92   13.2588       8.22318    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224        225.90          1.18          1.00         23.86          0.30          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    225        232.87          0.99          0.99         23.80          0.40          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    225.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       92
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       93
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      224     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -16.6261       16.6261       227.112       243.738    
   2  0.695074     -0.363738      -3.17201       3.17201       227.512       230.684    
   3  0.541180     -0.614003      -5.35447       5.35447       228.685       234.040    
   4  0.189791      -1.66183      -14.4922       14.4922       228.831       243.323    
   5  0.245553      -1.40424      -12.2458       12.2458       227.582       239.827    
   6  0.641474     -0.443986      -3.87183       3.87183       228.088       231.960    
   7  0.308462      -1.17616      -10.2568       10.2568       228.015       238.272    
   8  0.478005     -0.738133      -6.43696       6.43696       230.021       236.458    
   9  0.395759     -0.926951      -8.08356       8.08356       226.974       235.057    
  10  0.438776E-01  -3.12635      -27.2636       27.2636       231.270       258.534    
  11  0.294628E-01  -3.52463      -30.7368       30.7368       232.165       262.902    
  12  0.331052E-01  -3.40806      -29.7203       29.7203       228.957       258.677    
  13  0.916325E-01  -2.38997      -20.8420       20.8420       232.549       253.391    
  14  0.985908     -0.141919E-01 -0.123761      0.123761       229.140       229.264    
  15  0.511724     -0.669970      -5.84253       5.84253       232.157       237.999    
  16  0.185695      -1.68365      -14.6824       14.6824       231.049       245.731    
  17  0.830711     -0.185474      -1.61744       1.61744       234.506       236.123    
  18  0.765179E-04  -9.47799      -82.6537       82.6537       235.037       317.691    
  19  0.129365      -2.04512      -17.8347       17.8347       235.121       252.955    
  20  0.796363     -0.227700      -1.98568       1.98568       227.625       229.611    
  21  0.589256     -0.528895      -4.61228       4.61228       232.495       237.107    
  22  0.770995     -0.260073      -2.26799       2.26799       228.288       230.556    
  23  0.685430     -0.377709      -3.29385       3.29385       233.629       236.923    
  24  0.487688     -0.718080      -6.26209       6.26209       228.932       235.194    
  25  0.114898      -2.16371      -18.8689       18.8689       229.399       248.268    
  26  0.165093      -1.80124      -15.7079       15.7079       236.183       251.891    
  27  0.302275      -1.19642      -10.4335       10.4335       235.052       245.486    
  28  0.123669      -2.09014      -18.2273       18.2273       231.092       249.320    
  29  0.960526     -0.402739E-01 -0.351212      0.351212       232.919       233.271    
  30  0.744557     -0.294966      -2.57228       2.57228       239.319       241.891    
  31  0.418436     -0.871232      -7.59766       7.59766       238.510       246.107    
  32  0.624411     -0.470947      -4.10694       4.10694       241.078       245.185    
  33  0.920055     -0.833222E-01 -0.726619      0.726619       228.765       229.492    
  34  0.330507      -1.10713      -9.65481       9.65481       231.389       241.044    
  35  0.889566     -0.117022      -1.02050       1.02050       227.808       228.828    
  36  0.269410      -1.31152      -11.4372       11.4372       227.526       238.963    
  37  0.458780     -0.779184      -6.79495       6.79495       237.369       244.164    
  38  0.952588     -0.485730E-01 -0.423585      0.423585       240.524       240.947    
  39  0.213836      -1.54254      -13.4519       13.4519       229.951       243.403    
  40  0.460697     -0.775015      -6.75859       6.75859       233.051       239.809    
  41  0.571693     -0.559153      -4.87615       4.87615       228.512       233.388    
  42  0.201363      -1.60265      -13.9760       13.9760       245.422       259.398    
  43  0.707817     -0.345570      -3.01358       3.01358       238.231       241.244    
  44  0.927118     -0.756745E-01 -0.659927      0.659927       251.051       251.711    
  45  0.288916      -1.24162      -10.8277       10.8277       230.194       241.022    
  46  0.702737     -0.352773      -3.07639       3.07639       237.477       240.554    
  47  0.253190      -1.37362      -11.9788       11.9788       230.302       242.281    
  48  0.709086     -0.343779      -2.99795       2.99795       229.684       232.682    
  49  0.399421     -0.917738      -8.00322       8.00322       246.156       254.159    
  50  0.837301     -0.177572      -1.54854       1.54854       237.593       239.141    
  51  0.906694     -0.979507E-01 -0.854188      0.854188       230.407       231.261    
  52  0.479547     -0.734913      -6.40888       6.40888       225.904       232.313    
loop,thermsimp(1:2)       93   16.6261       3.17201    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226        226.54          0.97          0.98         23.88          0.39          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    227        231.38          1.05          0.99         24.02          0.11          0.05         26.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    226.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       93
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       94
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      226     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -1.49678       1.49678       227.808       229.305    
   2  0.478368     -0.737375      -6.43035       6.43035       229.140       235.570    
   3  0.283498      -1.26055      -10.9927       10.9927       228.765       239.758    
   4  0.520516     -0.652935      -5.69398       5.69398       227.625       233.319    
   5  0.703282E-01  -2.65458      -23.1495       23.1495       228.288       251.438    
   6  0.914137     -0.897748E-01 -0.782890      0.782890       227.512       228.294    
   7  0.479535     -0.734938      -6.40910       6.40910       230.407       236.816    
   8  0.921875     -0.813456E-01 -0.709382      0.709382       228.088       228.797    
   9  0.739547     -0.301718      -2.63116       2.63116       225.904       228.535    
  10  0.790753     -0.234770      -2.04733       2.04733       229.684       231.732    
  11  0.212247E-01  -3.85259      -33.5969       33.5969       232.919       266.516    
  12  0.286971      -1.24837      -10.8866       10.8866       228.512       239.399    
  13  0.695666     -0.362886      -3.16458       3.16458       228.685       231.850    
  14  0.534590     -0.626255      -5.46131       5.46131       226.974       232.435    
  15  0.945577     -0.559603E-01 -0.488007      0.488007       228.932       229.420    
  16  0.619446     -0.478930      -4.17655       4.17655       234.506       238.682    
  17  0.291083E-01  -3.53673      -30.8424       30.8424       230.021       260.863    
  18  0.372584E-01  -3.28988      -28.6897       28.6897       233.629       262.319    
  19  0.713241     -0.337936      -2.94700       2.94700       232.495       235.442    
  20  0.280281      -1.27196      -11.0923       11.0923       232.157       243.249    
  21  0.254796      -1.36729      -11.9236       11.9236       228.015       239.938    
  22  0.498598     -0.695955      -6.06914       6.06914       227.526       233.595    
  23  0.515261E-01  -2.96567      -25.8624       25.8624       237.593       263.455    
  24  0.347627      -1.05662      -9.21439       9.21439       233.051       242.265    
  25  0.696212     -0.362102      -3.15774       3.15774       227.582       230.739    
  26  0.707749E-01  -2.64825      -23.0943       23.0943       237.477       260.572    
  27  0.364523E-01  -3.31175      -28.8804       28.8804       240.524       269.404    
  28  0.895087E-02  -4.71600      -41.1264       41.1264       230.194       271.321    
  29  0.333194      -1.09903      -9.58421       9.58421       231.389       240.973    
  30  0.451375     -0.795457      -6.93685       6.93685       238.231       245.167    
  31  0.849961E-01  -2.46515      -21.4976       21.4976       239.319       260.817    
  32  0.524791     -0.644756      -5.62265       5.62265       230.302       235.925    
  33  0.641068     -0.444619      -3.87735       3.87735       228.831       232.709    
  34  0.757376     -0.277895      -2.42341       2.42341       229.951       232.375    
  35  0.760597     -0.273651      -2.38640       2.38640       227.112       229.498    
  36  0.709070     -0.343801      -2.99815       2.99815       237.369       240.367    
  37  0.794718     -0.229768      -2.00371       2.00371       241.078       243.082    
  38  0.869679     -0.139632      -1.21767       1.21767       235.052       236.270    
  39  0.229100E-01  -3.77618      -32.9306       32.9306       231.049       263.980    
  40  0.935590     -0.665776E-01 -0.580596      0.580596       238.510       239.090    
  41  0.889453     -0.117149      -1.02161       1.02161       229.399       230.421    
  42  0.529054     -0.636665      -5.55210       5.55210       231.092       236.644    
  43  0.907902     -0.966186E-01 -0.842571      0.842571       251.051       251.894    
  44  0.693802     -0.365568      -3.18797       3.18797       236.183       239.371    
  45  0.883803     -0.123521      -1.07718       1.07718       235.121       236.198    
  46  0.275134E-01  -3.59308      -31.3338       31.3338       232.549       263.883    
  47  0.324767      -1.12465      -9.80759       9.80759       246.156       255.963    
  48  0.853326     -0.158614      -1.38321       1.38321       231.270       232.653    
  49  0.325639      -1.12197      -9.78422       9.78422       228.957       238.741    
  50  0.773280     -0.257115      -2.24219       2.24219       245.422       247.665    
  51  0.108890      -2.21741      -19.3372       19.3372       232.165       251.503    
  52  0.188532E-01  -3.97107      -34.6301       34.6301       226.541       261.171    
loop,thermsimp(1:2)       94   1.49678       6.43035    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228        230.55          1.07          1.00         24.00          0.20          0.05         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       94
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       95
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      227     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -2.57119       2.57119       227.512       230.083    
   2  0.739179     -0.302215      -2.63550       2.63550       225.904       228.539    
   3  0.131167      -2.03128      -17.7140       17.7140       228.088       245.802    
   4  0.523356     -0.647493      -5.64653       5.64653       227.808       233.454    
   5  0.660412     -0.414891      -3.61810       3.61810       228.932       232.550    
   6  0.433074E-01  -3.13943      -27.3777       27.3777       227.112       254.489    
   7  0.480352     -0.733236      -6.39426       6.39426       229.399       235.794    
   8  0.808114     -0.213053      -1.85795       1.85795       227.582       229.440    
   9  0.723804     -0.323235      -2.81880       2.81880       229.684       232.503    
  10  0.322682      -1.13109      -9.86375       9.86375       228.685       238.549    
  11  0.898907     -0.106576     -0.929408      0.929408       229.951       230.881    
  12  0.359972      -1.02173      -8.91008       8.91008       226.974       235.884    
  13  0.879118     -0.128836      -1.12353       1.12353       231.270       232.394    
  14  0.963559     -0.371220E-01 -0.323726      0.323726       228.831       229.155    
  15  0.662848     -0.411210      -3.58599       3.58599       227.625       231.211    
  16  0.648402     -0.433244      -3.77815       3.77815       227.526       231.304    
  17  0.375343     -0.979916      -8.54545       8.54545       232.495       241.041    
  18  0.812441     -0.207712      -1.81138       1.81138       229.140       230.951    
  19  0.248177E-01  -3.69620      -32.2330       32.2330       230.302       262.535    
  20  0.653530     -0.425366      -3.70945       3.70945       235.121       238.830    
  21  0.712244     -0.339334      -2.95920       2.95920       235.052       238.011    
  22  0.358229      -1.02658      -8.95241       8.95241       231.092       240.045    
  23  0.325518      -1.12234      -9.78744       9.78744       230.407       240.195    
  24  0.770349     -0.260912      -2.27530       2.27530       234.506       236.781    
  25  0.633518E-01  -2.75905      -24.0606       24.0606       228.957       253.017    
  26  0.168796      -1.77907      -15.5145       15.5145       238.510       254.024    
  27  0.562007     -0.576241      -5.02516       5.02516       236.183       241.208    
  28  0.156316      -1.85588      -16.1844       16.1844       228.512       244.697    
  29  0.967732     -0.328002E-01 -0.286037      0.286037       228.765       229.051    
  30  0.538071     -0.619766      -5.40472       5.40472       228.015       233.420    
  31  0.967495     -0.330453E-01 -0.288175      0.288175       237.369       237.657    
  32  0.771619     -0.259265      -2.26094       2.26094       231.389       233.650    
  33  0.246044      -1.40225      -12.2284       12.2284       233.051       245.279    
  34  0.700731     -0.355631      -3.10132       3.10132       241.078       244.180    
  35  0.382714     -0.960468      -8.37585       8.37585       232.157       240.533    
  36  0.580395     -0.544047      -4.74441       4.74441       238.231       242.975    
  37  0.305131      -1.18701      -10.3515       10.3515       245.422       255.774    
  38  0.624250     -0.471204      -4.10918       4.10918       228.288       232.397    
  39  0.575432     -0.552634      -4.81929       4.81929       232.165       236.985    
  40  0.701335     -0.354770      -3.09380       3.09380       251.051       254.145    
  41  0.290211      -1.23715      -10.7886       10.7886       246.156       256.944    
  42  0.140976      -1.95916      -17.0851       17.0851       237.477       254.562    
  43  0.275714      -1.28839      -11.2355       11.2355       239.319       250.555    
  44  0.856479     -0.154925      -1.35104       1.35104       230.021       231.372    
  45  0.994286     -0.573084E-02 -0.499763E-01  0.499763E-01   226.541       226.591    
  46  0.913008     -0.910102E-01 -0.793663      0.793663       233.629       234.423    
  47  0.204063      -1.58933      -13.8599       13.8599       237.593       251.453    
  48  0.388833     -0.944605      -8.23752       8.23752       232.549       240.787    
  49  0.781619     -0.246387      -2.14864       2.14864       231.049       233.198    
  50  0.373421     -0.985049      -8.59022       8.59022       232.919       241.510    
  51  0.834918     -0.180422      -1.57339       1.57339       240.524       242.097    
  52  0.174969      -1.74315      -15.2013       15.2013       230.546       245.748    
loop,thermsimp(1:2)       95   2.57119       2.63550    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229        229.35          1.07          1.03         24.00          0.08          0.05         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230        234.64          0.98          1.00         23.98          0.13          0.05         26.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       95
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   5.41250    

hmean,hstd :    232.452       5.41250    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    232.452       5.41250    
h(1),h(best1),h(np1) :    226.541       225.904       229.354    
htherm(1),htherm(best1),htherm(np1) :    226.591       228.539       262.535    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    231        228.52          1.04          1.00         24.06          0.18          0.05         26.32

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    2.8644      -1.3712       5.1188      -100.00       1.3101     -0.52823    
    2.6307      -100.00       2.7099       1.1354       1.3197     -0.88968    
    1.8407       0.0000       0.0000      -1.6558       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       10113.       13790.      -1559.7    

   -34511.      -2.0000      -4.1791      -2.7401      -5.5173      -2.9809    
   -13.588      -2.6718       1521.8       0.0000       2659.4       3281.5    
    4343.7       3225.9       5995.8       2193.2       2108.2      0.11173    
  -0.18218E-02   0.0000     -0.81527     -0.24706     -0.26316     -0.17303    

  -0.16664     -0.13700E-01  -1.1625     -0.60772       0.0000     -0.71149E-01
  -0.50270E-01  0.85411E-01  0.65457E-02 -0.68733E-01 -0.13660     -0.18014    
   0.14881      0.47076E-01 -0.20739      -1.0142       0.0000     -0.50000    
   -1.0000       1.7644      -1.2928       0.0000       0.0000       9.0781    

    9.1155      -7039.2      -4.0000     -0.21870      0.14082       9.0233    
    8.5540      -4903.9      -4.0000     -0.14386     -0.59960       8.8366    
    9.0680      -6912.4      -4.0000      0.20799E-01 -0.74007       9.5765    
    8.8046      -3546.1      -2.0000    
 Function value at centroid =   228.516    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        1
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      230     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -33.9199       33.9199       226.541       260.461    
   2  0.977100     -0.231667E-01 -0.202027      0.202027       225.904       226.106    
   3  0.491467     -0.710361      -6.19477       6.19477       228.765       234.960    
   4  0.802113E-01  -2.52309      -22.0029       22.0029       228.831       250.834    
   5  0.891044     -0.115361      -1.00602       1.00602       227.582       228.588    
   6  0.397551     -0.922433      -8.04417       8.04417       227.512       235.556    
   7  0.121203      -2.11029      -18.4030       18.4030       229.951       248.354    
   8  0.789985E-01  -2.53833      -22.1357       22.1357       229.140       251.276    
   9  0.921855     -0.813679E-01 -0.709576      0.709576       227.625       228.335    
  10  0.252671      -1.37567      -11.9966       11.9966       227.526       239.523    
  11  0.787271     -0.239182      -2.08581       2.08581       230.021       232.106    
  12  0.634653     -0.454676      -3.96505       3.96505       231.270       235.235    
  13  0.706648     -0.347222      -3.02798       3.02798       228.288       231.316    
  14  0.349740E-01  -3.35315      -29.2415       29.2415       229.684       258.926    
  15  0.686787     -0.375731      -3.27659       3.27659       228.932       232.209    
  16  0.309348      -1.17329      -10.2318       10.2318       231.049       241.281    
  17  0.703748     -0.351336      -3.06386       3.06386       228.015       231.079    
  18  0.985092     -0.150207E-01 -0.130990      0.130990       227.808       227.939    
  19  0.440741     -0.819298      -7.14477       7.14477       231.389       238.534    
  20  0.796112     -0.228015      -1.98843       1.98843       233.629       235.617    
  21  0.451938     -0.794210      -6.92598       6.92598       229.399       236.325    
  22  0.230902      -1.46576      -12.7823       12.7823       226.974       239.756    
  23  0.760212     -0.274159      -2.39083       2.39083       234.506       236.897    
  24  0.250434E-02  -5.98973      -52.2340       52.2340       232.165       284.399    
  25  0.627913E-01  -2.76794      -24.1381       24.1381       237.369       261.507    
  26  0.263128      -1.33511      -11.6430       11.6430       235.052       246.695    
  27  0.177986      -1.72605      -15.0522       15.0522       228.685       243.738    
  28  0.919776     -0.836247E-01 -0.729257      0.729257       235.121       235.850    
  29  0.854272     -0.157506      -1.37355       1.37355       231.092       232.466    
  30  0.648187     -0.433576      -3.78104       3.78104       230.407       234.188    
  31  0.853797     -0.158061      -1.37839       1.37839       232.157       233.535    
  32  0.484551     -0.724533      -6.31836       6.31836       232.549       238.868    
  33  0.423817     -0.858454      -7.48622       7.48622       232.495       239.981    
  34  0.932015     -0.704065E-01 -0.613986      0.613986       236.183       236.797    
  35  0.161906      -1.82074      -15.8779       15.8779       232.919       248.797    
  36  0.812519     -0.207617      -1.81054       1.81054       240.524       242.334    
  37  0.346838      -1.05890      -9.23422       9.23422       238.231       247.465    
  38  0.477141     -0.739943      -6.45274       6.45274       241.078       247.531    
  39  0.931946     -0.704808E-01 -0.614635      0.614635       228.512       229.127    
  40  0.189794      -1.66182      -14.4920       14.4920       233.051       247.543    
  41  0.361902      -1.01638      -8.86346       8.86346       230.546       239.410    
  42  0.775630E-02  -4.85925      -42.3755       42.3755       228.088       270.464    
  43  0.292497      -1.22930      -10.7202       10.7202       239.319       250.039    
  44  0.264300      -1.33067      -11.6042       11.6042       237.593       249.197    
  45  0.529597     -0.635638      -5.54314       5.54314       228.957       234.500    
  46  0.163272      -1.81234      -15.8046       15.8046       238.510       254.314    
  47  0.212593      -1.54838      -13.5028       13.5028       251.051       264.554    
  48  0.359173      -1.02395      -8.92947       8.92947       227.112       236.041    
  49  0.993707     -0.631295E-02 -0.550527E-01  0.550527E-01   237.477       237.532    
  50  0.261479      -1.34140      -11.6978       11.6978       245.422       257.120    
  51  0.441392     -0.817822      -7.13189       7.13189       246.156       253.288    
  52  0.624656     -0.470554      -4.10351       4.10351       229.354       233.457    
loop,thermsimp(1:2)        1   33.9199      0.202027    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232        244.64          1.05          0.99         23.96          0.22          0.05         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    244.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        1
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        2
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      231     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -12.9821       12.9821       225.904       238.886    
   2  0.726663     -0.319292      -2.78442       2.78442       227.808       230.592    
   3  0.929061     -0.735808E-01 -0.641668      0.641668       227.625       228.267    
   4  0.764703     -0.268268      -2.33946       2.33946       227.582       229.921    
   5  0.119617      -2.12346      -18.5179       18.5179       228.512       247.030    
   6  0.369672     -0.995138      -8.67819       8.67819       228.015       236.693    
   7  0.875806     -0.132611      -1.15645       1.15645       228.288       229.444    
   8  0.657886     -0.418723      -3.65151       3.65151       230.021       233.672    
   9  0.387095E-01  -3.25167      -28.3565       28.3565       228.932       257.289    
  10  0.454078     -0.789485      -6.88478       6.88478       231.092       237.977    
  11  0.890470     -0.116006      -1.01164       1.01164       229.354       230.365    
  12  0.118445      -2.13331      -18.6037       18.6037       232.157       250.760    
  13  0.190238      -1.65948      -14.4717       14.4717       230.407       244.879    
  14  0.435624     -0.830976      -7.24660       7.24660       228.957       236.203    
  15  0.768655     -0.263114      -2.29451       2.29451       228.765       231.060    
  16  0.870896E-01  -2.44082      -21.2854       21.2854       231.270       252.556    
  17  0.936453     -0.656556E-01 -0.572555      0.572555       227.512       228.084    
  18  0.159312      -1.83689      -16.0188       16.0188       233.629       249.648    
  19  0.988165     -0.119051E-01 -0.103820      0.103820       235.121       235.224    
  20  0.713347     -0.337787      -2.94570       2.94570       227.112       230.057    
  21  0.417075     -0.874489      -7.62607       7.62607       229.399       237.025    
  22  0.719048     -0.329827      -2.87628       2.87628       236.183       239.059    
  23  0.785519     -0.241411      -2.10525       2.10525       234.506       236.611    
  24  0.356994      -1.03004      -8.98252       8.98252       237.477       246.460    
  25  0.357951      -1.02736      -8.95919       8.95919       231.389       240.348    
  26  0.154816      -1.86552      -16.2684       16.2684       232.549       248.818    
  27  0.246912      -1.39872      -12.1977       12.1977       230.546       242.744    
  28  0.553458     -0.591570      -5.15884       5.15884       227.526       232.685    
  29  0.729602     -0.315256      -2.74922       2.74922       226.974       229.723    
  30  0.605470     -0.501750      -4.37556       4.37556       232.495       236.871    
  31  0.278987E-01  -3.57918      -31.2125       31.2125       231.049       262.262    
  32  0.187991      -1.67136      -14.5753       14.5753       240.524       255.099    
  33  0.543158     -0.610355      -5.32266       5.32266       228.685       234.008    
  34  0.996749     -0.325625E-02 -0.283964E-01  0.283964E-01   235.052       235.080    
  35  0.540727     -0.614841      -5.36178       5.36178       238.231       243.592    
  36  0.833271E-01  -2.48498      -21.6705       21.6705       241.078       262.749    
  37  0.404538     -0.905011      -7.89223       7.89223       233.051       240.943    
  38  0.147302      -1.91527      -16.7023       16.7023       229.951       246.654    
  39  0.364226E-01  -3.31257      -28.8876       28.8876       232.919       261.807    
  40  0.381304     -0.964158      -8.40803       8.40803       237.593       246.001    
  41  0.737758     -0.304140      -2.65228       2.65228       239.319       241.971    
  42  0.179374      -1.71828      -14.9844       14.9844       228.831       243.816    
  43  0.281757      -1.26671      -11.0465       11.0465       229.140       240.186    
  44  0.192633      -1.64697      -14.3625       14.3625       246.156       260.518    
  45  0.954983     -0.460617E-01 -0.401685      0.401685       238.510       238.911    
  46  0.710258     -0.342127      -2.98355       2.98355       245.422       248.406    
  47  0.831769     -0.184201      -1.60634       1.60634       229.684       231.291    
  48  0.912541     -0.915218E-01 -0.798125      0.798125       226.541       227.339    
  49  0.221543      -1.50714      -13.1432       13.1432       237.369       250.512    
  50  0.690803E-02  -4.97507      -43.3856       43.3856       251.051       294.437    
  51  0.162616      -1.81637      -15.8398       15.8398       228.088       243.928    
  52  0.869433     -0.139913      -1.22013       1.22013       244.637       245.857    
loop,thermsimp(1:2)        2   12.9821       2.78442    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233        228.43          1.03          0.98         23.43          0.84          0.06         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234        247.16          1.02          0.99         23.95          0.30          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        2
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        3
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      233     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -7.65837       7.65837       226.541       234.199    
   2  0.117190E-02  -6.74913      -58.8564       58.8564       227.512       286.368    
   3  0.432199     -0.838870      -7.31544       7.31544       227.625       234.941    
   4  0.466381     -0.762753      -6.65166       6.65166       228.288       234.940    
   5  0.696685     -0.361422      -3.15181       3.15181       226.974       230.126    
   6  0.193714      -1.64137      -14.3137       14.3137       227.582       241.895    
   7  0.535145     -0.625217      -5.45226       5.45226       227.112       232.564    
   8  0.812984     -0.207044      -1.80555       1.80555       229.354       231.159    
   9  0.956789     -0.441723E-01 -0.385209      0.385209       227.808       228.193    
  10  0.496711E-01  -3.00233      -26.1821       26.1821       228.765       254.947    
  11  0.206308E-01  -3.88097      -33.8444       33.8444       229.684       263.529    
  12  0.423434     -0.859358      -7.49412       7.49412       227.526       235.020    
  13  0.216826      -1.52866      -13.3308       13.3308       230.021       243.351    
  14  0.792422     -0.232661      -2.02895       2.02895       228.685       230.714    
  15  0.265940      -1.32449      -11.5503       11.5503       235.052       246.602    
  16  0.993400     -0.662201E-02 -0.577479E-01  0.577479E-01   235.121       235.178    
  17  0.645200E-01  -2.74078      -23.9012       23.9012       228.957       252.858    
  18  0.651527     -0.428436      -3.73622       3.73622       234.506       238.242    
  19  0.858875     -0.152131      -1.32668       1.32668       228.015       229.342    
  20  0.126056      -2.07103      -18.0606       18.0606       232.495       250.556    
  21  0.772661E-01  -2.56050      -22.3291       22.3291       229.399       251.728    
  22  0.441429     -0.817737      -7.13115       7.13115       231.092       238.223    
  23  0.166586      -1.79224      -15.6294       15.6294       225.904       241.533    
  24  0.217490      -1.52560      -13.3042       13.3042       238.510       251.814    
  25  0.632871     -0.457488      -3.98957       3.98957       236.183       240.173    
  26  0.201694      -1.60100      -13.9617       13.9617       229.140       243.102    
  27  0.282690      -1.26341      -11.0177       11.0177       231.389       242.407    
  28  0.255086E-01  -3.66874      -31.9936       31.9936       233.051       265.044    
  29  0.562308     -0.575706      -5.02049       5.02049       239.319       244.340    
  30  0.283366E-01  -3.56360      -31.0767       31.0767       230.546       261.623    
  31  0.404254E-01  -3.20830      -27.9782       27.9782       238.231       266.209    
  32  0.170475      -1.76917      -15.4282       15.4282       228.831       244.259    
  33  0.141712      -1.95396      -17.0397       17.0397       228.088       245.128    
  34  0.773173     -0.257253      -2.24340       2.24340       230.407       232.651    
  35  0.255978      -1.36266      -11.8832       11.8832       244.637       256.520    
  36  0.823739     -0.193902      -1.69094       1.69094       237.593       239.284    
  37  0.166307      -1.79392      -15.6440       15.6440       237.477       253.121    
  38  0.676319     -0.391090      -3.41053       3.41053       229.951       233.362    
  39  0.144546      -1.93416      -16.8670       16.8670       228.512       245.379    
  40  0.593436     -0.521826      -4.55064       4.55064       245.422       249.973    
  41  0.762921     -0.270600      -2.35979       2.35979       232.549       234.909    
  42  0.855796     -0.155724      -1.35800       1.35800       233.629       234.987    
  43  0.433555     -0.835737      -7.28812       7.28812       237.369       244.657    
  44  0.252891      -1.37480      -11.9890       11.9890       232.157       244.146    
  45  0.942909     -0.587850E-01 -0.512640      0.512640       231.270       231.783    
  46  0.432313     -0.838605      -7.31313       7.31313       240.524       247.837    
  47  0.975713     -0.245869E-01 -0.214412      0.214412       228.932       229.147    
  48  0.541226     -0.613919      -5.35374       5.35374       246.156       251.510    
  49  0.255057      -1.36627      -11.9147       11.9147       232.919       244.834    
  50  0.202141      -1.59879      -13.9424       13.9424       231.049       244.991    
  51  0.949562     -0.517549E-01 -0.451333      0.451333       241.078       241.530    
  52  0.255660E-01  -3.66649      -31.9740       31.9740       228.431       260.405    
loop,thermsimp(1:2)        3   7.65837       58.8564    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235        236.29          1.12          0.99         23.80          0.45          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    236.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        3
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        4
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      234     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -3.66823       3.66823       227.808       231.476    
   2  0.880966     -0.126736      -1.10521       1.10521       228.932       230.037    
   3  0.854972     -0.156687      -1.36640       1.36640       228.015       229.381    
   4  0.797101     -0.226774      -1.97760       1.97760       226.974       228.951    
   5  0.158477      -1.84214      -16.0646       16.0646       228.685       244.750    
   6  0.593839     -0.521148      -4.54472       4.54472       229.354       233.898    
   7  0.817101     -0.201993      -1.76150       1.76150       231.270       233.032    
   8  0.997190     -0.281377E-02 -0.245377E-01  0.245377E-01   227.112       227.136    
   9  0.402857     -0.909174      -7.92854       7.92854       230.407       238.336    
  10  0.690455     -0.370405      -3.23015       3.23015       229.951       233.182    
  11  0.609635     -0.494895      -4.31578       4.31578       226.541       230.857    
  12  0.491117     -0.711073      -6.20098       6.20098       232.549       238.750    
  13  0.990676     -0.936814E-02 -0.816957E-01  0.816957E-01   228.288       228.370    
  14  0.976919     -0.233519E-01 -0.203642      0.203642       227.625       227.829    
  15  0.692556     -0.367366      -3.20365       3.20365       233.629       236.833    
  16  0.549694     -0.598394      -5.21835       5.21835       227.526       232.744    
  17  0.538267E-01  -2.92199      -25.4814       25.4814       235.121       260.602    
  18  0.602193     -0.507178      -4.42289       4.42289       231.092       235.515    
  19  0.537276     -0.621243      -5.41761       5.41761       234.506       239.924    
  20  0.338220      -1.08406      -9.45363       9.45363       237.593       247.046    
  21  0.306772      -1.18165      -10.3047       10.3047       236.183       246.488    
  22  0.895389     -0.110497     -0.963603      0.963603       241.078       242.042    
  23  0.120096      -2.11946      -18.4830       18.4830       225.904       244.387    
  24  0.680166     -0.385418      -3.36107       3.36107       227.582       230.943    
  25  0.369434     -0.995782      -8.68381       8.68381       231.389       240.073    
  26  0.235484      -1.44611      -12.6110       12.6110       229.140       241.751    
  27  0.260836      -1.34386      -11.7193       11.7193       230.021       241.740    
  28  0.720259     -0.328144      -2.86161       2.86161       232.157       235.018    
  29  0.695069     -0.363744      -3.17206       3.17206       228.831       232.003    
  30  0.105076      -2.25307      -19.6481       19.6481       239.319       258.967    
  31  0.968349     -0.321628E-01 -0.280479      0.280479       237.369       237.649    
  32  0.974131     -0.262091E-01 -0.228559      0.228559       232.919       233.148    
  33  0.647785E-01  -2.73678      -23.8664       23.8664       231.049       254.915    
  34  0.910402     -0.938690E-01 -0.818593      0.818593       228.088       228.907    
  35  0.488733     -0.715939      -6.24341       6.24341       228.512       234.756    
  36  0.377436E-01  -3.27694      -28.5769       28.5769       235.052       263.629    
  37  0.154608      -1.86686      -16.2802       16.2802       240.524       256.804    
  38  0.277804      -1.28084      -11.1697       11.1697       245.422       256.592    
  39  0.969547     -0.309263E-01 -0.269696      0.269696       232.495       232.765    
  40  0.380083     -0.967367      -8.43601       8.43601       246.156       254.592    
  41  0.751822     -0.285256      -2.48760       2.48760       229.399       231.887    
  42  0.137692      -1.98274      -17.2907       17.2907       238.510       255.800    
  43  0.293470      -1.22598      -10.6913       10.6913       228.957       239.648    
  44  0.433705     -0.835390      -7.28509       7.28509       237.477       244.762    
  45  0.418034     -0.872194      -7.60605       7.60605       228.765       236.371    
  46  0.166728      -1.79139      -15.6220       15.6220       244.637       260.259    
  47  0.921960     -0.812537E-01 -0.708581      0.708581       228.431       229.140    
  48  0.412601     -0.885275      -7.72012       7.72012       230.546       238.266    
  49  0.925181     -0.777655E-01 -0.678162      0.678162       229.684       230.363    
  50  0.687711     -0.374386      -3.26487       3.26487       233.051       236.315    
  51  0.729890     -0.314862      -2.74578       2.74578       238.231       240.976    
  52  0.355028      -1.03556      -9.03069       9.03069       236.291       245.321    
loop,thermsimp(1:2)        4   3.66823       1.10521    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236        230.09          1.00          0.99         23.80          0.48          0.05         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    237        320.63          0.98          1.00         24.11          0.17          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    230.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        4
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        5
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      236     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -4.02606       4.02606       227.112       231.138    
   2  0.876370     -0.131967      -1.15083       1.15083       227.625       228.776    
   3  0.840080     -0.174259      -1.51964       1.51964       228.288       229.808    
   4  0.608986E-01  -2.79854      -24.4050       24.4050       228.088       252.493    
   5  0.311901      -1.16507      -10.1601       10.1601       226.974       237.134    
   6  0.937552E-01  -2.36707      -20.6422       20.6422       228.431       249.074    
   7  0.608418     -0.496893      -4.33320       4.33320       228.015       232.348    
   8  0.297707      -1.21164      -10.5663       10.5663       228.932       239.498    
   9  0.365777      -1.00573      -8.77057       8.77057       229.684       238.455    
  10  0.194673      -1.63643      -14.2707       14.2707       226.541       240.812    
  11  0.941388     -0.604003E-01 -0.526727      0.526727       227.582       228.108    
  12  0.984881     -0.152343E-01 -0.132852      0.132852       227.808       227.941    
  13  0.750245     -0.287355      -2.50590       2.50590       229.399       231.905    
  14  0.437446     -0.826803      -7.21021       7.21021       228.831       236.041    
  15  0.174754      -1.74437      -15.2120       15.2120       227.526       242.738    
  16  0.300465E-01  -3.50501      -30.5657       30.5657       232.495       263.061    
  17  0.372924     -0.986380      -8.60182       8.60182       231.270       239.872    
  18  0.803506     -0.218771      -1.90781       1.90781       232.919       234.827    
  19  0.232583      -1.45851      -12.7191       12.7191       229.951       242.671    
  20  0.383368     -0.958759      -8.36095       8.36095       229.354       237.715    
  21  0.622786     -0.473552      -4.12966       4.12966       228.512       232.642    
  22  0.356422      -1.03164      -8.99651       8.99651       232.157       241.153    
  23  0.919964     -0.834212E-01 -0.727483      0.727483       231.092       231.820    
  24  0.550740     -0.596492      -5.20177       5.20177       233.051       238.252    
  25  0.402627     -0.909745      -7.93351       7.93351       228.765       236.699    
  26  0.256265      -1.36154      -11.8735       11.8735       233.629       245.502    
  27  0.763510     -0.269828      -2.35306       2.35306       237.369       239.722    
  28  0.388963     -0.944271      -8.23461       8.23461       230.546       238.781    
  29  0.981923     -0.182423E-01 -0.159084      0.159084       230.407       230.566    
  30  0.656629     -0.420635      -3.66819       3.66819       232.549       236.217    
  31  0.932472     -0.699161E-01 -0.609710      0.609710       228.957       229.567    
  32  0.336775      -1.08834      -9.49098       9.49098       234.506       243.997    
  33  0.810758     -0.209786      -1.82946       1.82946       231.389       233.219    
  34  0.557014     -0.585166      -5.10299       5.10299       238.231       243.334    
  35  0.652747     -0.426565      -3.71990       3.71990       230.021       233.741    
  36  0.890774     -0.115665      -1.00867       1.00867       229.140       230.149    
  37  0.703035     -0.352349      -3.07269       3.07269       241.078       244.151    
  38  0.534296     -0.626805      -5.46611       5.46611       225.904       231.370    
  39  0.604162     -0.503914      -4.39443       4.39443       228.685       233.080    
  40  0.545557     -0.605948      -5.28422       5.28422       237.477       242.761    
  41  0.371346     -0.990620      -8.63879       8.63879       236.291       244.930    
  42  0.491801     -0.709680      -6.18883       6.18883       236.183       242.372    
  43  0.879731     -0.128139      -1.11745       1.11745       237.593       238.710    
  44  0.995113     -0.489866E-02 -0.427192E-01  0.427192E-01   246.156       246.199    
  45  0.467927     -0.759444      -6.62280       6.62280       231.049       237.672    
  46  0.355083      -1.03540      -9.02933       9.02933       238.510       247.539    
  47  0.216960      -1.52804      -13.3254       13.3254       245.422       258.748    
  48  0.276988      -1.28378      -11.1953       11.1953       240.524       251.719    
  49  0.905458     -0.993144E-01 -0.866080      0.866080       239.319       240.185    
  50  0.704241     -0.350635      -3.05774       3.05774       244.637       247.695    
  51  0.784564     -0.242627      -2.11585       2.11585       235.121       237.236    
  52  0.329376      -1.11055      -9.68469       9.68469       230.091       239.776    
loop,thermsimp(1:2)        5   4.02606       1.15083    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238        229.03          1.09          0.99         23.58          0.78          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    239        242.00          1.02          1.00         23.88          0.25          0.05         26.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        5
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        6
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      238     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -13.3651       13.3651       227.808       241.173    
   2  0.942431     -0.592928E-01 -0.517069      0.517069       227.582       228.099    
   3  0.193824      -1.64081      -14.3088       14.3088       227.625       241.934    
   4  0.162512      -1.81700      -15.8454       15.8454       228.957       244.802    
   5  0.625243     -0.469616      -4.09533       4.09533       228.288       232.383    
   6  0.499178     -0.694793      -6.05901       6.05901       229.140       235.199    
   7  0.706095     -0.348006      -3.03482       3.03482       230.407       233.442    
   8  0.527414     -0.639770      -5.57917       5.57917       227.112       232.691    
   9  0.575748     -0.552085      -4.81451       4.81451       225.904       230.718    
  10  0.490522     -0.712286      -6.21156       6.21156       231.092       237.304    
  11  0.306517      -1.18248      -10.3120       10.3120       229.399       239.711    
  12  0.798470     -0.225057      -1.96263       1.96263       228.015       229.977    
  13  0.333550      -1.09796      -9.57489       9.57489       228.512       238.087    
  14  0.166731      -1.79138      -15.6219       15.6219       228.685       244.307    
  15  0.443580     -0.812878      -7.08878       7.08878       231.389       238.478    
  16  0.669985     -0.400500      -3.49260       3.49260       230.021       233.513    
  17  0.339921      -1.07904      -9.40989       9.40989       232.919       242.329    
  18  0.201260      -1.60316      -13.9805       13.9805       228.831       242.812    
  19  0.772250     -0.258447      -2.25381       2.25381       232.549       234.803    
  20  0.401372E-01  -3.21545      -28.0407       28.0407       228.765       256.806    
  21  0.940962     -0.608526E-01 -0.530671      0.530671       226.974       227.505    
  22  0.115324      -2.16001      -18.8366       18.8366       235.121       253.957    
  23  0.939991E-01  -2.36447      -20.6196       20.6196       231.049       251.669    
  24  0.412221     -0.886196      -7.72815       7.72815       229.354       237.082    
  25  0.136462      -1.99171      -17.3689       17.3689       233.051       250.419    
  26  0.310095      -1.17088      -10.2107       10.2107       229.684       239.895    
  27  0.985727     -0.143755E-01 -0.125363      0.125363       237.593       237.718    
  28  0.900161     -0.105182     -0.917246      0.917246       230.546       231.464    
  29  0.250220      -1.38542      -12.0817       12.0817       228.932       241.014    
  30  0.780405     -0.247942      -2.16220       2.16220       237.369       239.531    
  31  0.228719      -1.47526      -12.8651       12.8651       230.091       242.956    
  32  0.407088     -0.898727      -7.83743       7.83743       231.270       239.108    
  33  0.975627     -0.246749E-01 -0.215180      0.215180       239.319       239.534    
  34  0.885140     -0.122009      -1.06399       1.06399       226.541       227.605    
  35  0.896135     -0.109664     -0.956337      0.956337       232.157       233.113    
  36  0.856661     -0.154713      -1.34919       1.34919       236.183       237.532    
  37  0.258643      -1.35231      -11.7929       11.7929       229.951       241.744    
  38  0.336283      -1.08980      -9.50371       9.50371       227.526       237.030    
  39  0.868205     -0.141327      -1.23246       1.23246       237.477       238.710    
  40  0.937935     -0.640747E-01 -0.558769      0.558769       238.231       238.789    
  41  0.418906     -0.870109      -7.58787       7.58787       234.506       242.094    
  42  0.351040      -1.04685      -9.12919       9.12919       241.078       250.207    
  43  0.611628E-01  -2.79422      -24.3672       24.3672       236.291       260.658    
  44  0.153518      -1.87394      -16.3419       16.3419       233.629       249.971    
  45  0.938341     -0.636423E-01 -0.554999      0.554999       246.156       246.711    
  46  0.598133     -0.513942      -4.48188       4.48188       238.510       242.992    
  47  0.795771     -0.228444      -1.99217       1.99217       244.637       246.629    
  48  0.295375      -1.21951      -10.6349       10.6349       228.431       239.066    
  49  0.804738     -0.217239      -1.89445       1.89445       240.524       242.418    
  50  0.260094      -1.34671      -11.7441       11.7441       228.088       239.832    
  51  0.640517     -0.445479      -3.88484       3.88484       245.422       249.307    
  52  0.221872      -1.50566      -13.1302       13.1302       229.027       242.157    
loop,thermsimp(1:2)        6   13.3651      0.517069    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240        227.19          1.02          0.98         23.74          0.54          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    241        233.11          1.02          1.00         23.84          0.33          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    233.11        2.877     -1.504      5.196     -100.0      1.298    
                     -0.5003      2.658     -100.0      2.762      1.148    
                       1.332     -1.062      1.841      0.000      0.000    
                      -1.179      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.378     -2.704     -5.672     -2.965    
                      -13.64     -2.701      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.1793E-01-0.6711E-01  0.000    -0.7818    
                     -0.1269    -0.1069     0.7386E-01-0.2613    -0.1994E-01

                      -1.041    -0.5513      0.000     0.2812E-02-0.8174E-01
                      0.8541E-01 0.4949E-01-0.6124E-01-0.1428    -0.1904    
                      0.3915     0.3141E-01 0.2333E-01-0.2940      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.145      7.723     -7039.     -4.000    
                     -0.5142     0.2889      9.026      8.611     -4904.    

                      -4.000    -0.2067    -0.9072      8.830      9.087    
                      -6912.     -4.000     0.2068E-02-0.6958      9.628    
                       8.909     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        6
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        7
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      240     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -11.6071       11.6071       226.974       238.581    
   2  0.401807     -0.911784      -7.95130       7.95130       226.541       234.492    
   3  0.418885     -0.870159      -7.58830       7.58830       227.582       235.170    
   4  0.753378     -0.283189      -2.46957       2.46957       228.015       230.484    
   5  0.792066     -0.233111      -2.03287       2.03287       225.904       227.937    
   6  0.868474     -0.141017      -1.22975       1.22975       230.546       231.776    
   7  0.318670      -1.14360      -9.97285       9.97285       228.288       238.261    
   8  0.863267     -0.147031      -1.28220       1.28220       227.112       228.394    
   9  0.589255     -0.528896      -4.61229       4.61229       232.157       236.769    
  10  0.632079E-01  -2.76133      -24.0804       24.0804       230.407       254.488    
  11  0.992270     -0.775975E-02 -0.676696E-01  0.676696E-01   230.021       230.088    
  12  0.466140     -0.763269      -6.65616       6.65616       232.549       239.205    
  13  0.177509      -1.72873      -15.0756       15.0756       229.140       244.216    
  14  0.933326     -0.690005E-01 -0.601726      0.601726       227.526       228.128    
  15  0.876357     -0.131982      -1.15096       1.15096       229.354       230.505    
  16  0.673496     -0.395274      -3.44702       3.44702       231.092       234.539    
  17  0.648708     -0.432773      -3.77404       3.77404       236.183       239.957    
  18  0.400813     -0.914259      -7.97288       7.97288       237.593       245.566    
  19  0.763164     -0.270282      -2.35702       2.35702       228.512       230.869    
  20  0.196240      -1.62842      -14.2008       14.2008       231.389       245.590    
  21  0.923666     -0.794046E-01 -0.692455      0.692455       237.477       238.170    
  22  0.999600     -0.400298E-03 -0.349083E-02  0.349083E-02   238.231       238.234    
  23  0.379715     -0.968335      -8.44446       8.44446       228.431       236.876    
  24  0.197375      -1.62265      -14.1505       14.1505       231.270       245.421    
  25  0.760736     -0.273468      -2.38481       2.38481       237.369       239.754    
  26  0.392182     -0.936030      -8.16274       8.16274       239.319       247.482    
  27  0.256208      -1.36177      -11.8754       11.8754       229.399       241.275    
  28  0.251796      -1.37914      -12.0269       12.0269       228.088       240.115    
  29  0.332089E-01  -3.40494      -29.6931       29.6931       229.684       259.378    
  30  0.970457     -0.299883E-01 -0.261516      0.261516       228.932       229.194    
  31  0.467370E-01  -3.06322      -26.7131       26.7131       227.808       254.521    
  32  0.716125     -0.333901      -2.91181       2.91181       229.951       232.863    
  33  0.757897     -0.277208      -2.41742       2.41742       227.625       230.043    
  34  0.765628     -0.267059      -2.32891       2.32891       234.506       236.835    
  35  0.323816      -1.12758      -9.83317       9.83317       229.027       238.860    
  36  0.909845     -0.944807E-01 -0.823928      0.823928       232.919       233.743    
  37  0.515782     -0.662071      -5.77365       5.77365       240.524       246.297    
  38  0.464370     -0.767074      -6.68934       6.68934       228.831       235.521    
  39  0.445707     -0.808094      -7.04706       7.04706       230.091       237.138    
  40  0.786320     -0.240391      -2.09636       2.09636       238.510       240.606    
  41  0.631860     -0.459087      -4.00351       4.00351       228.685       232.689    
  42  0.672488     -0.396772      -3.46008       3.46008       228.957       232.417    
  43  0.251717E-02  -5.98462      -52.1894       52.1894       244.637       296.826    
  44  0.245023      -1.40640      -12.2647       12.2647       246.156       258.421    
  45  0.252688      -1.37560      -11.9960       11.9960       245.422       257.418    
  46  0.268946      -1.31324      -11.4523       11.4523       233.629       245.081    
  47  0.550357     -0.597189      -5.20784       5.20784       241.078       246.286    
  48  0.826205     -0.190912      -1.66487       1.66487       233.051       234.715    
  49  0.964276     -0.363780E-01 -0.317238      0.317238       231.049       231.366    
  50  0.415479     -0.878324      -7.65950       7.65950       235.121       242.780    
  51  0.599143E-01  -2.81484      -24.5471       24.5471       228.765       253.312    
  52  0.348555      -1.05396      -9.19115       9.19115       227.193       236.384    
loop,thermsimp(1:2)        7   11.6071       7.95130    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242        231.63          0.96          0.99         23.66          0.63          0.05         26.29
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    243        676.76          1.02          0.99         23.80          0.33          0.05         26.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        7
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        8
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      242     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -19.5872       19.5872       225.904       245.491    
   2  0.476819     -0.740619      -6.45864       6.45864       227.526       233.985    
   3  0.564430     -0.571938      -4.98764       4.98764       227.112       232.099    
   4  0.211741      -1.55239      -13.5378       13.5378       228.932       242.470    
   5  0.154226E-01  -4.17192      -36.3816       36.3816       227.625       264.007    
   6  0.489577     -0.714213      -6.22836       6.22836       230.021       236.249    
   7  0.583965     -0.537914      -4.69093       4.69093       228.015       232.706    
   8  0.430258     -0.843370      -7.35469       7.35469       229.354       236.708    
   9  0.280982      -1.26946      -11.0705       11.0705       228.512       239.583    
  10  0.535183     -0.625146      -5.45165       5.45165       231.049       236.501    
  11  0.306750      -1.18172      -10.3053       10.3053       230.546       240.852    
  12  0.924930     -0.780370E-01 -0.680529      0.680529       228.957       229.637    
  13  0.829670E-01  -2.48931      -21.7083       21.7083       228.685       250.394    
  14  0.330275      -1.10783      -9.66093       9.66093       229.951       239.612    
  15  0.229751      -1.47076      -12.8259       12.8259       232.919       245.745    
  16  0.455737     -0.785839      -6.85298       6.85298       226.541       233.394    
  17  0.830949     -0.185187      -1.61494       1.61494       231.092       232.707    
  18  0.148624      -1.90634      -16.6244       16.6244       233.051       249.675    
  19  0.883001     -0.124429      -1.08510       1.08510       227.582       228.667    
  20  0.668001     -0.403466      -3.51846       3.51846       228.831       232.350    
  21  0.610583     -0.493341      -4.30223       4.30223       227.193       231.495    
  22  0.689050     -0.372441      -3.24791       3.24791       232.157       235.405    
  23  0.124417      -2.08412      -18.1747       18.1747       234.506       252.681    
  24  0.785584E-01  -2.54391      -22.1844       22.1844       228.431       250.616    
  25  0.936565     -0.655366E-01 -0.571518      0.571518       230.091       230.663    
  26  0.483719     -0.726252      -6.33335       6.33335       237.477       243.811    
  27  0.715685     -0.334515      -2.91717       2.91717       238.231       241.148    
  28  0.786437     -0.240243      -2.09506       2.09506       228.288       230.383    
  29  0.361023      -1.01881      -8.88466       8.88466       226.974       235.859    
  30  0.325559      -1.12221      -9.78634       9.78634       229.027       238.813    
  31  0.850460     -0.161978      -1.41254       1.41254       232.549       233.962    
  32  0.301358      -1.19946      -10.4600       10.4600       237.369       247.829    
  33  0.304725      -1.18834      -10.3631       10.3631       236.183       246.546    
  34  0.887065     -0.119838      -1.04505       1.04505       228.088       229.133    
  35  0.762822     -0.270730      -2.36093       2.36093       238.510       240.871    
  36  0.364130      -1.01024      -8.80994       8.80994       229.399       238.209    
  37  0.762041     -0.271754      -2.36986       2.36986       235.121       237.490    
  38  0.941180     -0.606207E-01 -0.528648      0.528648       229.140       229.669    
  39  0.449403     -0.799835      -6.97504       6.97504       233.629       240.604    
  40  0.743855     -0.295910      -2.58051       2.58051       231.270       233.851    
  41  0.743104     -0.296920      -2.58932       2.58932       237.593       240.182    
  42  0.350527      -1.04832      -9.14195       9.14195       231.389       240.531    
  43  0.607240     -0.498831      -4.35010       4.35010       241.078       245.428    
  44  0.557347     -0.584567      -5.09777       5.09777       240.524       245.622    
  45  0.217970      -1.52340      -13.2849       13.2849       239.319       252.604    
  46  0.364570      -1.00904      -8.79939       8.79939       228.765       237.564    
  47  0.330900      -1.10594      -9.64444       9.64444       230.407       240.052    
  48  0.861127     -0.149514      -1.30385       1.30385       227.808       229.112    
  49  0.710764E-01  -2.64400      -23.0572       23.0572       245.422       268.480    
  50  0.264543      -1.32975      -11.5962       11.5962       246.156       257.752    
  51  0.985836     -0.142654E-01 -0.124403      0.124403       229.684       229.809    
  52  0.296563      -1.21550      -10.5998       10.5998       231.626       242.226    
loop,thermsimp(1:2)        8   19.5872       6.45864    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244        223.82          0.96          0.99         23.66          0.61          0.07         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    245        232.34          1.01          0.99         23.93          0.18          0.06         26.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    223.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        8
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:        9
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      244     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -3.87253       3.87253       227.582       231.454    
   2  0.805197     -0.216668      -1.88947       1.88947       227.808       229.697    
   3  0.976428     -0.238543E-01 -0.208024      0.208024       228.088       228.296    
   4  0.599028     -0.512447      -4.46884       4.46884       228.957       233.426    
   5  0.591081     -0.525802      -4.58531       4.58531       229.140       233.725    
   6  0.151500      -1.88717      -16.4572       16.4572       229.684       246.142    
   7  0.565682     -0.569723      -4.96832       4.96832       228.288       233.256    
   8  0.345258      -1.06346      -9.27403       9.27403       230.091       239.365    
   9  0.658101     -0.418397      -3.64867       3.64867       227.193       230.842    
  10  0.691977E-01  -2.67079      -23.2909       23.2909       227.112       250.402    
  11  0.289062      -1.24111      -10.8232       10.8232       228.831       239.654    
  12  0.949819     -0.514835E-01 -0.448967      0.448967       228.015       228.464    
  13  0.791632     -0.233658      -2.03764       2.03764       231.092       233.130    
  14  0.400532     -0.914962      -7.97901       7.97901       226.541       234.520    
  15  0.241886      -1.41929      -12.3771       12.3771       231.270       243.647    
  16  0.383016     -0.959678      -8.36896       8.36896       232.549       240.918    
  17  0.993978     -0.604041E-02 -0.526759E-01  0.526759E-01   227.526       227.579    
  18  0.807089     -0.214322      -1.86901       1.86901       232.157       234.026    
  19  0.732161     -0.311755      -2.71869       2.71869       226.974       229.693    
  20  0.176507      -1.73440      -15.1250       15.1250       230.021       245.146    
  21  0.628098     -0.465059      -4.05559       4.05559       231.049       235.105    
  22  0.383392     -0.958697      -8.36041       8.36041       229.354       237.714    
  23  0.906421     -0.982517E-01 -0.856814      0.856814       235.121       235.977    
  24  0.329288      -1.11082      -9.68705       9.68705       228.765       238.452    
  25  0.869436     -0.139911      -1.22011       1.22011       229.399       230.619    
  26  0.354994      -1.03565      -9.03151       9.03151       229.027       238.058    
  27  0.127935      -2.05623      -17.9316       17.9316       228.512       246.444    
  28  0.840123     -0.174207      -1.51919       1.51919       229.951       231.471    
  29  0.625861     -0.468627      -4.08671       4.08671       230.407       234.494    
  30  0.488384     -0.716653      -6.24964       6.24964       237.593       243.842    
  31  0.888226E-01  -2.42111      -21.1136       21.1136       231.389       252.503    
  32  0.262955      -1.33577      -11.6487       11.6487       233.629       245.278    
  33  0.153205E-01  -4.17856      -36.4396       36.4396       230.546       266.986    
  34  0.432355     -0.838509      -7.31230       7.31230       238.510       245.822    
  35  0.225273      -1.49044      -12.9975       12.9975       238.231       251.228    
  36  0.812147     -0.208074      -1.81453       1.81453       231.626       233.441    
  37  0.832805E-01  -2.48554      -21.6754       21.6754       228.932       250.608    
  38  0.442280     -0.815813      -7.11437       7.11437       237.477       244.592    
  39  0.106639      -2.23831      -19.5194       19.5194       241.078       260.598    
  40  0.143053      -1.94454      -16.9575       16.9575       225.904       242.861    
  41  0.871774     -0.137225      -1.19668       1.19668       240.524       241.721    
  42  0.137692      -1.98273      -17.2906       17.2906       232.919       250.210    
  43  0.366512      -1.00372      -8.75307       8.75307       236.183       244.936    
  44  0.617157     -0.482633      -4.20884       4.20884       237.369       241.578    
  45  0.420337     -0.866700      -7.55813       7.55813       233.051       240.609    
  46  0.935846     -0.663044E-01 -0.578214      0.578214       228.685       229.264    
  47  0.979912     -0.202925E-01 -0.176962      0.176962       228.431       228.608    
  48  0.692793     -0.367024      -3.20067       3.20067       239.319       242.520    
  49  0.155424      -1.86160      -16.2343       16.2343       234.506       250.740    
  50  0.703218     -0.352088      -3.07042       3.07042       246.156       249.226    
  51  0.396734     -0.924489      -8.06210       8.06210       227.625       235.687    
  52  0.247863      -1.39488      -12.1642       12.1642       223.818       235.983    
loop,thermsimp(1:2)        9   3.87253       1.88947    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246        228.30          1.11          1.00         23.95          0.22          0.06         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    247        236.65          1.02          1.00         24.00          0.09          0.05         26.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    228.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:        9
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       10
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      246     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -1.59173       1.59173       227.526       229.118    
   2  0.367543      -1.00091      -8.72856       8.72856       228.088       236.817    
   3  0.528755     -0.637231      -5.55703       5.55703       228.015       233.572    
   4  0.776829     -0.252535      -2.20226       2.20226       228.431       230.634    
   5  0.149594E-01  -4.20242      -36.6476       36.6476       228.685       265.333    
   6  0.892228     -0.114033     -0.994436      0.994436       226.974       227.968    
   7  0.191037      -1.65529      -14.4351       14.4351       227.808       242.243    
   8  0.516533     -0.660616      -5.76096       5.76096       229.399       235.160    
   9  0.273230      -1.29744      -11.3145       11.3145       227.193       238.508    
  10  0.822225     -0.195741      -1.70698       1.70698       227.582       229.289    
  11  0.359850      -1.02207      -8.91304       8.91304       229.951       238.865    
  12  0.611658     -0.491581      -4.28688       4.28688       231.092       235.379    
  13  0.249481      -1.38837      -12.1074       12.1074       228.288       240.395    
  14  0.441252     -0.818139      -7.13466       7.13466       228.957       236.091    
  15  0.910514E-01  -2.39633      -20.8974       20.8974       231.626       252.524    
  16  0.745146     -0.294175      -2.56538       2.56538       229.140       231.705    
  17  0.758301     -0.276675      -2.41277       2.41277       232.157       234.569    
  18  0.638521     -0.448601      -3.91206       3.91206       230.407       234.319    
  19  0.150180      -1.89592      -16.5335       16.5335       226.541       243.075    
  20  0.144147      -1.93692      -16.8911       16.8911       231.049       247.940    
  21  0.104928      -2.25448      -19.6604       19.6604       227.625       247.286    
  22  0.398120     -0.921002      -8.03169       8.03169       235.121       243.152    
  23  0.802258     -0.220325      -1.92137       1.92137       223.818       225.740    
  24  0.399299     -0.918044      -8.00589       8.00589       229.354       237.360    
  25  0.493060     -0.707124      -6.16654       6.16654       229.027       235.193    
  26  0.504407     -0.684372      -5.96813       5.96813       228.765       234.733    
  27  0.762058     -0.271733      -2.36967       2.36967       230.091       232.461    
  28  0.430267     -0.843350      -7.35452       7.35452       228.831       236.186    
  29  0.993832     -0.618725E-02 -0.539565E-01  0.539565E-01   233.051       233.104    
  30  0.705390     -0.349005      -3.04353       3.04353       232.549       235.593    
  31  0.969760     -0.307069E-01 -0.267782      0.267782       237.369       237.637    
  32  0.245618      -1.40398      -12.2435       12.2435       240.524       252.767    
  33  0.685790     -0.377184      -3.28927       3.28927       239.319       242.608    
  34  0.905089     -0.997222E-01 -0.869636      0.869636       225.904       226.773    
  35  0.414065     -0.881732      -7.68923       7.68923       231.270       238.959    
  36  0.714747E-01  -2.63841      -23.0085       23.0085       237.593       260.601    
  37  0.694510     -0.364548      -3.17908       3.17908       237.477       240.656    
  38  0.770213E-01  -2.56367      -22.3568       22.3568       236.183       258.540    
  39  0.846173     -0.167031      -1.45661       1.45661       230.021       231.477    
  40  0.485012     -0.723582      -6.31007       6.31007       233.629       239.939    
  41  0.345787      -1.06193      -9.26069       9.26069       238.510       247.770    
  42  0.851861     -0.160332      -1.39819       1.39819       229.684       231.083    
  43  0.774151     -0.255989      -2.23237       2.23237       228.512       230.745    
  44  0.512382     -0.668685      -5.83133       5.83133       246.156       251.987    
  45  0.839798     -0.174594      -1.52257       1.52257       232.919       234.442    
  46  0.430550     -0.842692      -7.34877       7.34877       227.112       234.460    
  47  0.988263     -0.118067E-01 -0.102961      0.102961       228.932       229.035    
  48  0.349495      -1.05127      -9.16766       9.16766       234.506       243.674    
  49  0.290701      -1.23546      -10.7739       10.7739       238.231       249.005    
  50  0.210466      -1.55843      -13.5904       13.5904       231.389       244.980    
  51  0.361038      -1.01877      -8.88429       8.88429       241.078       249.963    
  52  0.168890      -1.77851      -15.5097       15.5097       228.304       243.814    
loop,thermsimp(1:2)       10   1.59173       8.72856    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248        229.15          1.18          1.01         24.05          0.10          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    249        234.94          0.98          0.99         23.90          0.31          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       10
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       11
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      248     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01 -0.732857      0.732857       223.818       224.551    
   2  0.309089      -1.17413      -10.2391       10.2391       225.904       236.143    
   3  0.237901      -1.43590      -12.5219       12.5219       226.974       239.496    
   4  0.542467     -0.611627      -5.33375       5.33375       228.932       234.266    
   5  0.523672     -0.646889      -5.64126       5.64126       227.526       233.167    
   6  0.850058     -0.162450      -1.41666       1.41666       227.582       228.998    
   7  0.589343     -0.528746      -4.61098       4.61098       228.431       233.042    
   8  0.979269     -0.209490E-01 -0.182687      0.182687       228.512       228.695    
   9  0.110419      -2.20347      -19.2156       19.2156       229.684       248.900    
  10  0.557914     -0.583550      -5.08890       5.08890       230.021       235.110    
  11  0.474464     -0.745569      -6.50180       6.50180       229.140       235.642    
  12  0.312482      -1.16321      -10.1439       10.1439       230.091       240.235    
  13  0.297011      -1.21399      -10.5867       10.5867       233.051       243.637    
  14  0.857571     -0.153651      -1.33993       1.33993       228.015       229.355    
  15  0.792567     -0.232479      -2.02735       2.02735       230.407       232.435    
  16  0.963006     -0.376958E-01 -0.328730      0.328730       232.919       233.248    
  17  0.294103      -1.22382      -10.6725       10.6725       227.112       237.784    
  18  0.403484     -0.907618      -7.91496       7.91496       232.157       240.072    
  19  0.449313     -0.800035      -6.97678       6.97678       228.765       235.742    
  20  0.721912     -0.325852      -2.84162       2.84162       229.399       232.241    
  21  0.512488     -0.668479      -5.82953       5.82953       229.027       234.856    
  22  0.885190     -0.121953      -1.06350       1.06350       231.092       232.156    
  23  0.694751E-01  -2.66679      -23.2560       23.2560       232.549       255.805    
  24  0.820879     -0.197380      -1.72127       1.72127       228.957       230.678    
  25  0.211527      -1.55340      -13.5466       13.5466       228.831       242.378    
  26  0.937420     -0.646236E-01 -0.563556      0.563556       228.088       228.652    
  27  0.515756E-01  -2.96471      -25.8540       25.8540       229.354       255.208    
  28  0.695222     -0.363525      -3.17015       3.17015       237.369       240.539    
  29  0.718776     -0.330205      -2.87959       2.87959       227.193       230.073    
  30  0.536080     -0.623471      -5.43704       5.43704       229.951       235.389    
  31  0.585855     -0.534682      -4.66275       4.66275       231.270       235.933    
  32  0.693572     -0.365900      -3.19087       3.19087       233.629       236.820    
  33  0.700823     -0.355500      -3.10017       3.10017       228.288       231.388    
  34  0.250985      -1.38236      -12.0550       12.0550       237.477       249.532    
  35  0.290600      -1.23581      -10.7770       10.7770       227.808       238.585    
  36  0.828609     -0.188007      -1.63954       1.63954       239.319       240.959    
  37  0.225820      -1.48802      -12.9764       12.9764       226.541       239.517    
  38  0.999674     -0.326354E-03 -0.284600E-02  0.284600E-02   235.121       235.123    
  39  0.878216     -0.129862      -1.13248       1.13248       234.506       235.638    
  40  0.685898E-01  -2.67961      -23.3678       23.3678       228.304       251.672    
  41  0.273860      -1.29514      -11.2944       11.2944       231.389       242.684    
  42  0.697655     -0.360030      -3.13968       3.13968       227.625       230.765    
  43  0.293168      -1.22701      -10.7002       10.7002       238.510       249.210    
  44  0.319476      -1.14107      -9.95083       9.95083       231.049       241.000    
  45  0.874681     -0.133896      -1.16766       1.16766       238.231       239.398    
  46  0.408697     -0.894781      -7.80302       7.80302       241.078       248.881    
  47  0.142130E-01  -4.25360      -37.0939       37.0939       246.156       283.250    
  48  0.164528      -1.80468      -15.7378       15.7378       231.626       247.364    
  49  0.652669     -0.426685      -3.72094       3.72094       240.524       244.245    
  50  0.492107     -0.709060      -6.18342       6.18342       236.183       242.367    
  51  0.542705     -0.611189      -5.32993       5.32993       237.593       242.923    
  52  0.798603     -0.224891      -1.96119       1.96119       229.149       231.110    
loop,thermsimp(1:2)       11  0.732857       10.2391    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250        227.10          0.95          0.98         23.76          0.51          0.05         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    251        616.19          1.00          0.99         23.94          0.25          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       11
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       12
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      250     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -2.36041       2.36041       223.818       226.179    
   2  0.482922E-01  -3.03048      -26.4276       26.4276       228.088       254.516    
   3  0.612960     -0.489456      -4.26835       4.26835       228.512       232.781    
   4  0.910127     -0.941714E-01 -0.821231      0.821231       227.582       228.403    
   5  0.362433      -1.01492      -8.85068       8.85068       228.015       236.866    
   6  0.476779     -0.740702      -6.45937       6.45937       227.193       233.652    
   7  0.179006E-01  -4.02292      -35.0822       35.0822       228.957       264.039    
   8  0.589646     -0.528233      -4.60650       4.60650       227.625       232.232    
   9  0.926206     -0.766581E-01 -0.668504      0.668504       229.149       229.818    
  10  0.492629     -0.707999      -6.17417       6.17417       228.288       234.462    
  11  0.661123     -0.413815      -3.60871       3.60871       231.092       234.701    
  12  0.542248     -0.612032      -5.33728       5.33728       229.399       234.737    
  13  0.216527      -1.53004      -13.3428       13.3428       230.407       243.750    
  14  0.549832     -0.598143      -5.21616       5.21616       228.431       233.647    
  15  0.429556     -0.845003      -7.36893       7.36893       227.526       234.895    
  16  0.264838      -1.32864      -11.5865       11.5865       232.919       244.506    
  17  0.251706      -1.37949      -12.0300       12.0300       228.932       240.962    
  18  0.701724     -0.354215      -3.08896       3.08896       229.027       232.116    
  19  0.324289      -1.12612      -9.82043       9.82043       230.021       239.841    
  20  0.160749E-02  -6.43308      -56.1003       56.1003       235.121       291.221    
  21  0.533627     -0.628058      -5.47704       5.47704       229.951       235.429    
  22  0.883065     -0.124357      -1.08446       1.08446       234.506       235.590    
  23  0.484824     -0.723969      -6.31344       6.31344       229.140       235.453    
  24  0.724157     -0.322747      -2.81455       2.81455       228.765       231.580    
  25  0.847375     -0.165612      -1.44424       1.44424       231.270       232.714    
  26  0.167586      -1.78626      -15.5772       15.5772       225.904       241.481    
  27  0.890079     -0.116445      -1.01547       1.01547       233.629       234.644    
  28  0.235223      -1.44722      -12.6206       12.6206       227.112       239.732    
  29  0.206112      -1.57934      -13.7727       13.7727       227.808       241.581    
  30  0.463385     -0.769198      -6.70786       6.70786       238.231       244.938    
  31  0.487880E-01  -3.02027      -26.3386       26.3386       226.974       253.312    
  32  0.244157      -1.40994      -12.2955       12.2955       226.541       238.836    
  33  0.770602     -0.260583      -2.27244       2.27244       232.157       234.429    
  34  0.264159      -1.33120      -11.6089       11.6089       230.091       241.700    
  35  0.189030E-01  -3.96843      -34.6071       34.6071       237.369       271.976    
  36  0.635342     -0.453592      -3.95559       3.95559       239.319       243.275    
  37  0.139550      -1.96933      -17.1737       17.1737       231.049       248.223    
  38  0.561566     -0.577026      -5.03201       5.03201       236.183       241.215    
  39  0.951789     -0.494118E-01 -0.430900      0.430900       228.831       229.262    
  40  0.527693     -0.639242      -5.57457       5.57457       231.389       236.964    
  41  0.925337     -0.775972E-01 -0.676694      0.676694       237.593       238.269    
  42  0.795352     -0.228971      -1.99676       1.99676       233.051       235.047    
  43  0.530799     -0.633371      -5.52337       5.52337       240.524       246.047    
  44  0.642763     -0.441979      -3.85432       3.85432       231.626       235.480    
  45  0.485146     -0.723305      -6.30765       6.30765       241.078       247.386    
  46  0.795896     -0.228287      -1.99080       1.99080       229.684       231.675    
  47  0.519140     -0.655581      -5.71706       5.71706       238.510       244.227    
  48  0.694073E-01  -2.66776      -23.2645       23.2645       237.477       260.742    
  49  0.401486     -0.912583      -7.95827       7.95827       228.304       236.262    
  50  0.587982E-01  -2.83364      -24.7111       24.7111       229.354       254.065    
  51  0.752652     -0.284152      -2.47797       2.47797       232.549       235.027    
  52  0.139929      -1.96662      -17.1501       17.1501       227.100       244.250    
loop,thermsimp(1:2)       12   2.36041       26.4276    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252        230.91          1.05          1.01         24.06          0.17          0.05         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    253        441.89          0.98          0.99         23.83          0.32          0.05         26.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    230.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       12
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       13
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      252     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -4.55986       4.55986       223.818       228.378    
   2  0.691791     -0.368472      -3.21329       3.21329       227.582       230.795    
   3  0.688173     -0.373715      -3.25902       3.25902       228.831       232.090    
   4  0.439966     -0.821058      -7.16011       7.16011       229.149       236.309    
   5  0.945690     -0.558403E-01 -0.486961      0.486961       228.765       229.252    
   6  0.238956      -1.43147      -12.4833       12.4833       229.684       242.168    
   7  0.280830E-01  -3.57259      -31.1551       31.1551       229.027       260.182    
   8  0.902031E-01  -2.40569      -20.9791       20.9791       227.625       248.604    
   9  0.198361      -1.61767      -14.1070       14.1070       231.270       245.377    
  10  0.201288      -1.60302      -13.9793       13.9793       228.512       242.491    
  11  0.710033     -0.342444      -2.98631       2.98631       228.431       231.418    
  12  0.182913      -1.69874      -14.8141       14.8141       227.193       242.007    
  13  0.817316     -0.201730      -1.75920       1.75920       232.157       233.916    
  14  0.894732     -0.111231     -0.969999      0.969999       228.288       229.258    
  15  0.854000     -0.157824      -1.37632       1.37632       233.629       235.005    
  16  0.248066      -1.39406      -12.1570       12.1570       231.092       243.249    
  17  0.670877     -0.399170      -3.48100       3.48100       229.399       232.880    
  18  0.701473     -0.354573      -3.09209       3.09209       227.526       230.618    
  19  0.199467      -1.61210      -14.0585       14.0585       232.549       246.608    
  20  0.391533     -0.937685      -8.17717       8.17717       233.051       241.228    
  21  0.586761     -0.533138      -4.64928       4.64928       229.951       234.601    
  22  0.163799      -1.80912      -15.7766       15.7766       229.140       244.917    
  23  0.955964     -0.450353E-01 -0.392734      0.392734       231.626       232.019    
  24  0.365727      -1.00587      -8.77176       8.77176       234.506       243.278    
  25  0.733577     -0.309822      -2.70183       2.70183       228.304       231.006    
  26  0.111597      -2.19286      -19.1231       19.1231       228.015       247.138    
  27  0.714895     -0.335619      -2.92680       2.92680       231.389       234.316    
  28  0.816688     -0.202498      -1.76590       1.76590       237.593       239.359    
  29  0.480603     -0.732714      -6.38970       6.38970       226.541       232.931    
  30  0.573891     -0.555316      -4.84268       4.84268       227.112       231.954    
  31  0.204452      -1.58742      -13.8433       13.8433       230.021       243.864    
  32  0.845356E-01  -2.47058      -21.5449       21.5449       228.932       250.477    
  33  0.524789E-01  -2.94734      -25.7026       25.7026       236.183       261.886    
  34  0.631781     -0.459213      -4.00461       4.00461       225.904       229.908    
  35  0.620363     -0.477450      -4.16365       4.16365       227.808       231.972    
  36  0.553551     -0.591402      -5.15738       5.15738       230.091       235.249    
  37  0.546271     -0.604640      -5.27282       5.27282       239.319       244.592    
  38  0.402204     -0.910797      -7.94269       7.94269       230.407       238.350    
  39  0.735174     -0.307648      -2.68287       2.68287       238.510       241.193    
  40  0.359565      -1.02286      -8.91994       8.91994       227.100       236.020    
  41  0.564111     -0.572504      -4.99258       4.99258       232.919       237.912    
  42  0.412661     -0.885128      -7.71884       7.71884       238.231       245.949    
  43  0.795853     -0.228341      -1.99127       1.99127       240.524       242.515    
  44  0.909991E-01  -2.39691      -20.9024       20.9024       241.078       261.981    
  45  0.830687     -0.185502      -1.61769       1.61769       231.049       232.667    
  46  0.592588     -0.523256      -4.56310       4.56310       226.974       231.537    
  47  0.489472     -0.714427      -6.23023       6.23023       229.354       235.584    
  48  0.992056     -0.797586E-02 -0.695542E-01  0.695542E-01   228.088       228.158    
  49  0.808208     -0.212936      -1.85693       1.85693       237.477       239.334    
  50  0.212569      -1.54849      -13.5038       13.5038       228.957       242.461    
  51  0.214041      -1.54159      -13.4436       13.4436       237.369       250.813    
  52  0.586527     -0.533536      -4.65275       4.65275       230.912       235.564    
loop,thermsimp(1:2)       13   4.55986       3.21329    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254        227.27          1.03          0.99         23.81          0.35          0.07         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    255        256.68          1.05          1.11         24.16          0.01          0.05         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       13
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       14
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      254     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -9.43403       9.43403       228.088       237.522    
   2  0.649641     -0.431335      -3.76150       3.76150       223.818       227.580    
   3  0.930116     -0.724456E-01 -0.631769      0.631769       228.765       229.397    
   4  0.297326      -1.21293      -10.5774       10.5774       228.288       238.865    
   5  0.751734     -0.285373      -2.48862       2.48862       225.904       228.392    
   6  0.409056     -0.893902      -7.79536       7.79536       227.526       235.321    
   7  0.115094      -2.16201      -18.8540       18.8540       227.582       246.436    
   8  0.606681     -0.499753      -4.35814       4.35814       228.304       232.662    
   9  0.140571      -1.96204      -17.1102       17.1102       228.431       245.541    
  10  0.447669E-01  -3.10629      -27.0887       27.0887       226.974       254.063    
  11  0.517394     -0.658951      -5.74644       5.74644       227.112       232.858    
  12  0.587057     -0.532633      -4.64488       4.64488       227.808       232.453    
  13  0.384993E-01  -3.25712      -28.4040       28.4040       231.626       260.030    
  14  0.829105E-01  -2.48999      -21.7142       21.7142       228.831       250.545    
  15  0.382179     -0.961866      -8.38805       8.38805       231.049       239.437    
  16  0.269516      -1.31113      -11.4338       11.4338       229.399       240.833    
  17  0.879580     -0.128311      -1.11895       1.11895       226.541       227.660    
  18  0.760503E-01  -2.57636      -22.4674       22.4674       232.157       254.624    
  19  0.482544     -0.728684      -6.35455       6.35455       231.389       237.744    
  20  0.561499     -0.577145      -5.03305       5.03305       229.951       234.985    
  21  0.254621      -1.36798      -11.9296       11.9296       233.629       245.559    
  22  0.479261     -0.735511      -6.41409       6.41409       230.091       236.505    
  23  0.638455     -0.448704      -3.91297       3.91297       230.912       234.825    
  24  0.289082      -1.24105      -10.8227       10.8227       229.354       240.176    
  25  0.656024     -0.421558      -3.67624       3.67624       227.100       230.777    
  26  0.597431     -0.515117      -4.49213       4.49213       229.149       233.641    
  27  0.859562     -0.151333      -1.31971       1.31971       232.919       234.239    
  28  0.554826     -0.589100      -5.13730       5.13730       230.407       235.544    
  29  0.128413      -2.05250      -17.8991       17.8991       237.477       255.376    
  30  0.311170      -1.16742      -10.1806       10.1806       237.593       247.773    
  31  0.606679     -0.499755      -4.35816       4.35816       238.510       242.868    
  32  0.923238     -0.798686E-01 -0.696501      0.696501       233.051       233.747    
  33  0.734154     -0.309037      -2.69499       2.69499       227.193       229.888    
  34  0.988670     -0.113947E-01 -0.993687E-01  0.993687E-01   229.684       229.784    
  35  0.136308      -1.99284      -17.3787       17.3787       228.957       246.336    
  36  0.345839      -1.06178      -9.25938       9.25938       228.512       237.772    
  37  0.349440      -1.05142      -9.16904       9.16904       240.524       249.693    
  38  0.625658E-01  -2.77154      -24.1695       24.1695       231.092       255.262    
  39  0.394804     -0.929365      -8.10461       8.10461       234.506       242.611    
  40  0.899667E-02  -4.71090      -41.0819       41.0819       230.021       271.103    
  41  0.823946     -0.193651      -1.68875       1.68875       239.319       241.008    
  42  0.834235     -0.181240      -1.58052       1.58052       229.140       230.720    
  43  0.777534     -0.251627      -2.19434       2.19434       231.270       233.465    
  44  0.384993     -0.954531      -8.32408       8.32408       238.231       246.555    
  45  0.247443E-01  -3.69916      -32.2589       32.2589       232.549       264.808    
  46  0.810695     -0.209863      -1.83013       1.83013       228.015       229.845    
  47  0.893618     -0.112477     -0.980864      0.980864       227.625       228.606    
  48  0.545617     -0.605837      -5.28326       5.28326       228.932       234.215    
  49  0.587193     -0.532402      -4.64286       4.64286       237.369       242.012    
  50  0.991207     -0.883185E-02 -0.770190E-01  0.770190E-01   229.027       229.104    
  51  0.477440     -0.739316      -6.44728       6.44728       236.183       242.630    
  52  0.444858     -0.810000      -7.06368       7.06368       227.269       234.332    
loop,thermsimp(1:2)       14   9.43403       3.76150    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256        225.28          1.09          1.12         23.99          0.09          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    257        224.31          1.05          0.99         24.07          0.08          0.05         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    224.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       14
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       15
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      256     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -13.2150       13.2150       223.818       237.033    
   2  0.894567E-01  -2.41400      -21.0515       21.0515       226.541       247.592    
   3  0.863615     -0.146628      -1.27868       1.27868       225.904       227.183    
   4  0.807990     -0.213206      -1.85928       1.85928       227.625       229.484    
   5  0.318173      -1.14516      -9.98648       9.98648       229.027       239.013    
   6  0.464606     -0.766566      -6.68491       6.68491       228.765       235.450    
   7  0.574933     -0.553501      -4.82686       4.82686       229.684       234.511    
   8  0.974939     -0.253802E-01 -0.221331      0.221331       228.015       228.236    
   9  0.415757     -0.877653      -7.65366       7.65366       227.193       234.847    
  10  0.187109      -1.67606      -14.6163       14.6163       229.140       243.756    
  11  0.730515E-01  -2.61659      -22.8182       22.8182       227.100       249.918    
  12  0.209185      -1.56454      -13.6437       13.6437       227.808       241.452    
  13  0.496690     -0.699790      -6.10258       6.10258       228.304       234.407    
  14  0.862986     -0.147356      -1.28504       1.28504       227.112       228.397    
  15  0.888200     -0.118558      -1.03390       1.03390       231.270       232.304    
  16  0.380888     -0.965250      -8.41756       8.41756       229.149       237.567    
  17  0.135305      -2.00022      -17.4431       17.4431       233.051       250.494    
  18  0.927079     -0.757167E-01 -0.660294      0.660294       228.932       229.593    
  19  0.603067     -0.505727      -4.41024       4.41024       232.919       237.330    
  20  0.136202      -1.99362      -17.3855       17.3855       227.269       244.654    
  21  0.954653     -0.464076E-01 -0.404702      0.404702       230.912       231.316    
  22  0.151192      -1.88920      -16.4750       16.4750       229.951       246.426    
  23  0.449259     -0.800155      -6.97783       6.97783       227.526       234.504    
  24  0.780874     -0.247341      -2.15696       2.15696       230.407       232.564    
  25  0.456238     -0.784740      -6.84340       6.84340       230.091       236.935    
  26  0.163284      -1.81227      -15.8040       15.8040       228.088       243.892    
  27  0.821444     -0.196692      -1.71527       1.71527       231.389       233.105    
  28  0.861448     -0.149141      -1.30060       1.30060       228.512       229.813    
  29  0.924167     -0.788621E-01 -0.687724      0.687724       228.288       228.976    
  30  0.195059      -1.63445      -14.2534       14.2534       231.049       245.302    
  31  0.375134     -0.980472      -8.55030       8.55030       229.354       237.904    
  32  0.909862     -0.944628E-01 -0.823772      0.823772       229.399       230.223    
  33  0.831459     -0.184574      -1.60959       1.60959       239.319       240.929    
  34  0.627278     -0.466365      -4.06698       4.06698       237.369       241.436    
  35  0.918890     -0.845891E-01 -0.737667      0.737667       234.506       235.244    
  36  0.475784     -0.742791      -6.47758       6.47758       236.183       242.661    
  37  0.344524      -1.06559      -9.29260       9.29260       238.510       247.802    
  38  0.286778      -1.24905      -10.8924       10.8924       228.431       239.324    
  39  0.336148      -1.09020      -9.50721       9.50721       233.629       243.136    
  40  0.709840     -0.342716      -2.98869       2.98869       228.957       231.945    
  41  0.219827      -1.51491      -13.2109       13.2109       227.582       240.793    
  42  0.347594      -1.05672      -9.21523       9.21523       238.231       247.446    
  43  0.905734     -0.990099E-01 -0.863425      0.863425       237.593       238.456    
  44  0.826231     -0.190881      -1.66459       1.66459       240.524       242.188    
  45  0.400277     -0.915599      -7.98457       7.98457       228.831       236.816    
  46  0.555153     -0.588512      -5.13217       5.13217       226.974       232.106    
  47  0.864397     -0.145723      -1.27079       1.27079       232.157       233.427    
  48  0.277380E-01  -3.58495      -31.2629       31.2629       231.092       262.355    
  49  0.993968     -0.605015E-02 -0.527609E-01  0.527609E-01   237.477       237.530    
  50  0.717076     -0.332573      -2.90024       2.90024       231.626       234.526    
  51  0.736253     -0.306182      -2.67009       2.67009       232.549       235.219    
  52  0.278813      -1.27722      -11.1381       11.1381       224.312       235.450    
loop,thermsimp(1:2)       15   13.2150       21.0515    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258        226.35          1.04          1.00         23.67          0.43          0.06         26.20
Just calling func    0   0         26.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    259        229.57          1.05          1.01         23.98          0.09          0.05         26.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    226.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.72059               256
loop is:       15
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.72059               256
loop is:       16
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    4.36030               307

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      258     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -6.37565       6.37565       225.904       232.279    
   2  0.641193     -0.444425      -1.93782       1.93782       228.015       229.953    
   3  0.353033      -1.04119      -4.53992       4.53992       227.112       231.651    
   4  0.928955     -0.736953E-01 -0.321333      0.321333       228.288       228.609    
   5  0.350257      -1.04909      -4.57434       4.57434       227.625       232.200    
   6  0.682617     -0.381821      -1.66485       1.66485       228.932       230.597    
   7  0.162763      -1.81546      -7.91594       7.91594       228.512       236.428    
   8  0.874032     -0.134639     -0.587064      0.587064       229.399       229.986    
   9  0.518909     -0.656027      -2.86047       2.86047       230.912       233.772    
  10  0.461984     -0.772226      -3.36713       3.36713       228.957       232.324    
  11  0.449468     -0.799691      -3.48689       3.48689       226.974       230.461    
  12  0.523281     -0.647637      -2.82389       2.82389       231.270       234.094    
  13  0.637377     -0.450394      -1.96385       1.96385       230.407       232.371    
  14  0.596329     -0.516963      -2.25411       2.25411       231.389       233.643    
  15  0.286246      -1.25090      -5.45431       5.45431       232.157       237.611    
  16  0.590425     -0.526913      -2.29750       2.29750       228.304       230.602    
  17  0.853637     -0.158249     -0.690012      0.690012       227.526       228.216    
  18  0.245572      -1.40416      -6.12257       6.12257       229.684       235.807    
  19  0.375654     -0.979088      -4.26911       4.26911       231.626       235.895    
  20  0.281654      -1.26708      -5.52483       5.52483       227.193       232.718    
  21  0.443392     -0.813302      -3.54624       3.54624       232.549       236.095    
  22  0.442934     -0.814335      -3.55074       3.55074       234.506       238.057    
  23  0.171790      -1.76149      -7.68060       7.68060       228.765       236.446    
  24  0.802582     -0.219921     -0.958923      0.958923       224.312       225.271    
  25  0.162733      -1.81564      -7.91675       7.91675       228.831       236.748    
  26  0.838320     -0.176355     -0.768960      0.768960       230.091       230.860    
  27  0.210754      -1.55706      -6.78926       6.78926       223.818       230.608    
  28  0.240377      -1.42554      -6.21580       6.21580       232.919       239.135    
  29  0.173042E-01  -4.05680      -17.6889       17.6889       237.477       255.166    
  30  0.640146     -0.446059      -1.94495       1.94495       229.149       231.094    
  31  0.749210     -0.288736      -1.25897       1.25897       229.354       230.613    
  32  0.666162     -0.406222      -1.77125       1.77125       237.593       239.364    
  33  0.601746     -0.507920      -2.21468       2.21468       229.027       231.241    
  34  0.677044     -0.390020      -1.70060       1.70060       228.431       230.132    
  35  0.290379      -1.23657      -5.39181       5.39181       227.582       232.973    
  36  0.439723     -0.821610      -3.58246       3.58246       239.319       242.902    
  37  0.680091     -0.385528      -1.68102       1.68102       237.369       239.050    
  38  0.803784     -0.218425     -0.952397      0.952397       227.808       228.760    
  39  0.507823     -0.677622      -2.95463       2.95463       240.524       243.478    
  40  0.894573     -0.111408     -0.485774      0.485774       236.183       236.669    
  41  0.826908     -0.190062     -0.828728      0.828728       233.629       234.458    
  42  0.815562     -0.203878     -0.888970      0.888970       229.140       230.029    
  43  0.352457      -1.04283      -4.54704       4.54704       228.088       232.635    
  44  0.104059      -2.26279      -9.86645       9.86645       227.269       237.135    
  45  0.601892     -0.507677      -2.21362       2.21362       231.049       233.263    
  46  0.988184     -0.118862E-01 -0.518273E-01  0.518273E-01   229.951       230.003    
  47  0.733912     -0.309366      -1.34893       1.34893       238.231       239.580    
  48  0.107394      -2.23125      -9.72890       9.72890       226.541       236.270    
  49  0.592150     -0.523995      -2.28477       2.28477       238.510       240.794    
  50  0.821901     -0.196136     -0.855210      0.855210       227.100       227.955    
  51  0.400070E-01  -3.21870      -14.0345       14.0345       233.051       247.085    
  52  0.271211      -1.30486      -5.68957       5.68957       226.348       232.038    
loop,thermsimp(1:2)       16   6.37565       1.93782    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260        224.17          1.02          0.98         23.82          0.47          0.06         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    261        224.95          1.03          0.99         24.03          0.14          0.05         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    224.95        2.472     -1.708      5.182     -100.0      1.312    
                     -0.2774      2.812     -100.0      3.217     0.7428    
                      0.9271     -1.256      1.841      0.000      0.000    
                      -2.496      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.894     -3.874     -5.832     -2.802    
                      -12.02     -3.080      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.1556     0.7472E-02  0.000    -0.6255    
                     -0.3483    -0.5731E-01-0.1964    -0.1470     0.9300E-01

                      -1.434    -0.1324E-01  0.000    -0.8268E-01-0.1241    
                      0.8541E-01 0.8279E-01 0.5667E-01 0.5973E-01-0.8675E-01
                      0.2869    -0.6815E-03-0.3874     -1.062      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.200      9.144     -7039.     -4.000    
                     -0.2595     0.4028      9.059      8.619     -4904.    

                      -4.000    -0.3368    -0.7278      8.867      7.741    
                      -6912.     -4.000     0.6098     -1.228      9.768    
                       8.863     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    224.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       16
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       17
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      260     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -1.10066       1.10066       224.312       225.413    
   2  0.350417      -1.04863      -4.57234       4.57234       227.100       231.673    
   3  0.533846     -0.627648      -2.73673       2.73673       227.526       230.263    
   4  0.622955     -0.473280      -2.06364       2.06364       228.288       230.352    
   5  0.661091E-01  -2.71645      -11.8445       11.8445       227.808       239.652    
   6  0.759206     -0.275482      -1.20118       1.20118       228.015       229.216    
   7  0.430535     -0.842727      -3.67454       3.67454       229.399       233.074    
   8  0.257678      -1.35604      -5.91275       5.91275       229.951       235.864    
   9  0.296561      -1.21550      -5.29994       5.29994       229.140       234.440    
  10  0.805929     -0.215760     -0.940776      0.940776       228.431       229.372    
  11  0.421616     -0.863661      -3.76582       3.76582       226.974       230.740    
  12  0.767803     -0.264223      -1.15209       1.15209       228.932       230.084    
  13  0.605260     -0.502097      -2.18929       2.18929       228.304       230.493    
  14  0.566784     -0.567776      -2.47567       2.47567       223.818       226.294    
  15  0.292740      -1.22847      -5.35650       5.35650       229.354       234.710    
  16  0.898463     -0.107069     -0.466855      0.466855       230.091       230.558    
  17  0.218067      -1.52295      -6.64053       6.64053       229.149       235.790    
  18  0.856756     -0.154603     -0.674113      0.674113       229.027       229.701    
  19  0.338883      -1.08210      -4.71828       4.71828       227.112       231.830    
  20  0.796034     -0.228113     -0.994642      0.994642       226.348       227.343    
  21  0.778636     -0.250212      -1.09100       1.09100       227.625       228.716    
  22  0.575989     -0.551667      -2.40543       2.40543       225.904       228.309    
  23  0.355531      -1.03414      -4.50917       4.50917       228.957       233.466    
  24  0.164949      -1.80212      -7.85778       7.85778       230.407       238.265    
  25  0.315998      -1.15202      -5.02315       5.02315       228.088       233.111    
  26  0.330933      -1.10584      -4.82179       4.82179       227.193       232.015    
  27  0.429436     -0.845283      -3.68569       3.68569       227.582       231.267    
  28  0.464808     -0.766130      -3.34056       3.34056       231.049       234.390    
  29  0.192211      -1.64916      -7.19083       7.19083       231.389       238.580    
  30  0.866849     -0.142891     -0.623045      0.623045       230.912       231.535    
  31  0.474973     -0.744498      -3.24623       3.24623       231.270       234.516    
  32  0.667713     -0.403897      -1.76111       1.76111       233.629       235.390    
  33  0.994155     -0.586200E-02 -0.255601E-01  0.255601E-01   229.684       229.710    
  34  0.577739     -0.548634      -2.39221       2.39221       231.626       234.018    
  35  0.381919     -0.962546      -4.19698       4.19698       232.549       236.746    
  36  0.733204     -0.310331      -1.35313       1.35313       226.541       227.894    
  37  0.492382     -0.708500      -3.08927       3.08927       228.512       231.601    
  38  0.188899E-01  -3.96913      -17.3066       17.3066       228.765       246.072    
  39  0.741920E-01  -2.60110      -11.3416       11.3416       236.183       247.525    
  40  0.210592      -1.55783      -6.79261       6.79261       228.831       235.624    
  41  0.682838     -0.381498      -1.66345       1.66345       227.269       228.932    
  42  0.656831     -0.420328      -1.83276       1.83276       232.157       233.989    
  43  0.444670     -0.810424      -3.53369       3.53369       234.506       238.040    
  44  0.872301     -0.136621     -0.595708      0.595708       237.369       237.965    
  45  0.932741     -0.696282E-01 -0.303600      0.303600       232.919       233.223    
  46  0.601727     -0.507951      -2.21482       2.21482       237.593       239.808    
  47  0.940344     -0.615097E-01 -0.268201      0.268201       238.231       238.499    
  48  0.208477E-01  -3.87051      -16.8766       16.8766       238.510       255.386    
  49  0.257831      -1.35545      -5.91017       5.91017       239.319       245.229    
  50  0.522803     -0.648550      -2.82787       2.82787       240.524       243.352    
  51  0.676437     -0.390915      -1.70451       1.70451       233.051       234.755    
  52  0.612346     -0.490458      -2.13854       2.13854       224.174       226.313    
loop,thermsimp(1:2)       17   1.10066       4.57234    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262        230.08          1.06          0.98         23.60          0.55          0.05         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       17
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       18
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      261     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -6.21548       6.21548       224.312       230.527    
   2  0.711556E-02  -4.94547      -21.5637       21.5637       223.818       245.382    
   3  0.909796     -0.945347E-01 -0.412200      0.412200       224.174       224.586    
   4  0.659218     -0.416702      -1.81694       1.81694       226.348       228.165    
   5  0.833482     -0.182144     -0.794201      0.794201       226.541       227.335    
   6  0.726295E-01  -2.62238      -11.4344       11.4344       225.904       237.338    
   7  0.687091     -0.375288      -1.63637       1.63637       227.625       229.262    
   8  0.860775     -0.149922     -0.653704      0.653704       227.269       227.922    
   9  0.846215     -0.166982     -0.728091      0.728091       228.015       228.743    
  10  0.398551     -0.919919      -4.01112       4.01112       228.431       232.442    
  11  0.416092     -0.876849      -3.82332       3.82332       229.027       232.850    
  12  0.463389     -0.769189      -3.35389       3.35389       229.684       233.038    
  13  0.207356      -1.57332      -6.86014       6.86014       228.932       235.792    
  14  0.133003      -2.01738      -8.79639       8.79639       227.526       236.323    
  15  0.464971     -0.765779      -3.33902       3.33902       228.288       231.627    
  16  0.568281     -0.565140      -2.46418       2.46418       228.304       230.768    
  17  0.638811     -0.448147      -1.95405       1.95405       230.091       232.045    
  18  0.865664     -0.144259     -0.629011      0.629011       226.974       227.603    
  19  0.475002     -0.744436      -3.24596       3.24596       227.582       230.828    
  20  0.537086     -0.621597      -2.71035       2.71035       230.912       233.622    
  21  0.782345     -0.245459      -1.07027       1.07027       228.512       229.582    
  22  0.725469     -0.320937      -1.39938       1.39938       227.100       228.500    
  23  0.701426E-01  -2.65723      -11.5863       11.5863       227.112       238.698    
  24  0.297043      -1.21388      -5.29288       5.29288       227.193       232.486    
  25  0.444870     -0.809973      -3.53172       3.53172       229.399       232.931    
  26  0.685684     -0.377338      -1.64531       1.64531       228.088       229.733    
  27  0.651244     -0.428871      -1.87001       1.87001       232.919       234.789    
  28  0.269082      -1.31274      -5.72393       5.72393       228.957       234.681    
  29  0.177107      -1.73100      -7.54769       7.54769       232.157       239.704    
  30  0.766464     -0.265968      -1.15970       1.15970       231.626       232.786    
  31  0.801833     -0.220855     -0.962992      0.962992       231.049       232.012    
  32  0.759414     -0.275209      -1.19999       1.19999       229.140       230.340    
  33  0.566307     -0.568618      -2.47934       2.47934       231.270       233.750    
  34  0.297948      -1.21084      -5.27960       5.27960       229.354       234.633    
  35  0.430097E-01  -3.14633      -13.7189       13.7189       233.051       246.769    
  36  0.529414     -0.635984      -2.77308       2.77308       233.629       236.402    
  37  0.717133     -0.332494      -1.44977       1.44977       228.831       230.281    
  38  0.209457      -1.56323      -6.81617       6.81617       229.149       235.965    
  39  0.732428     -0.311390      -1.35775       1.35775       229.951       231.309    
  40  0.697782     -0.359849      -1.56905       1.56905       232.549       234.118    
  41  0.977227     -0.230362E-01 -0.100445      0.100445       237.369       237.469    
  42  0.744700     -0.294773      -1.28530       1.28530       234.506       235.791    
  43  0.713341     -0.337796      -1.47289       1.47289       230.407       231.880    
  44  0.497823     -0.697510      -3.04135       3.04135       238.231       241.272    
  45  0.968758     -0.317404E-01 -0.138397      0.138397       231.389       231.528    
  46  0.287665      -1.24596      -5.43274       5.43274       227.808       233.241    
  47  0.964672     -0.359674E-01 -0.156828      0.156828       237.593       237.750    
  48  0.733769     -0.309561      -1.34978       1.34978       240.524       241.874    
  49  0.692680     -0.367187      -1.60105       1.60105       239.319       240.920    
  50  0.328873      -1.11208      -4.84901       4.84901       228.765       233.614    
  51  0.744920     -0.294478      -1.28401       1.28401       236.183       237.467    
  52  0.655188     -0.422834      -1.84368       1.84368       230.079       231.923    
loop,thermsimp(1:2)       18   6.21548       21.5637    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263        245.73          1.01          0.98         23.71          0.42          0.05         26.18
Just calling func    0   0         26.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    245.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       18
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       19
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      262     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -1.41907       1.41907       224.174       225.593    
   2  0.240049      -1.42691      -6.22176       6.22176       226.541       232.763    
   3  0.365543      -1.00637      -4.38808       4.38808       226.974       231.362    
   4  0.399010     -0.918769      -4.00611       4.00611       227.269       231.275    
   5  0.685268     -0.377945      -1.64795       1.64795       226.348       227.996    
   6  0.335805E-01  -3.39381      -14.7980       14.7980       227.100       241.898    
   7  0.820520     -0.197817     -0.862540      0.862540       228.015       228.877    
   8  0.756560     -0.278973      -1.21641       1.21641       227.625       228.842    
   9  0.869461     -0.139882     -0.609928      0.609928       228.512       229.122    
  10  0.787378     -0.239047      -1.04231       1.04231       228.088       229.130    
  11  0.330926      -1.10586      -4.82188       4.82188       228.831       233.653    
  12  0.339084E-01  -3.38409      -14.7557       14.7557       229.140       243.896    
  13  0.672805     -0.396300      -1.72799       1.72799       224.312       226.040    
  14  0.822413     -0.195513     -0.852494      0.852494       228.304       229.157    
  15  0.928870     -0.737865E-01 -0.321731      0.321731       227.582       227.903    
  16  0.778944     -0.249816      -1.08927       1.08927       229.951       231.041    
  17  0.301602E-01  -3.50123      -15.2664       15.2664       231.389       246.656    
  18  0.292626      -1.22886      -5.35820       5.35820       228.288       233.646    
  19  0.149515      -1.90036      -8.28613       8.28613       230.407       238.693    
  20  0.500330E-01  -2.99507      -13.0594       13.0594       230.079       243.139    
  21  0.759114E-01  -2.57819      -11.2417       11.2417       231.049       242.291    
  22  0.613440     -0.488673      -2.13076       2.13076       230.091       232.222    
  23  0.132502      -2.02116      -8.81285       8.81285       228.431       237.244    
  24  0.189750E-02  -6.26722      -27.3269       27.3269       227.193       254.520    
  25  0.507622     -0.678018      -2.95636       2.95636       231.626       234.583    
  26  0.378733     -0.970924      -4.23352       4.23352       229.027       233.260    
  27  0.139411      -1.97033      -8.59120       8.59120       229.399       237.990    
  28  0.298599      -1.20865      -5.27009       5.27009       229.684       234.955    
  29  0.767617     -0.264464      -1.15314       1.15314       227.808       228.961    
  30  0.656077     -0.421478      -1.83777       1.83777       228.765       230.603    
  31  0.701883     -0.353988      -1.54349       1.54349       230.912       232.455    
  32  0.940950     -0.608655E-01 -0.265392      0.265392       231.270       231.536    
  33  0.621043     -0.476355      -2.07705       2.07705       232.549       234.626    
  34  0.622910     -0.473353      -2.06396       2.06396       229.354       231.418    
  35  0.525019     -0.644320      -2.80943       2.80943       228.957       231.766    
  36  0.871126     -0.137969     -0.601585      0.601585       232.919       233.521    
  37  0.475532     -0.743322      -3.24110       3.24110       234.506       237.747    
  38  0.320094      -1.13914      -4.96699       4.96699       228.932       233.899    
  39  0.688986     -0.372534      -1.62436       1.62436       229.149       230.774    
  40  0.831218     -0.184863     -0.806058      0.806058       227.526       228.332    
  41  0.639633     -0.446861      -1.94844       1.94844       233.629       235.577    
  42  0.628257     -0.464807      -2.02670       2.02670       225.904       227.931    
  43  0.925835     -0.770596E-01 -0.336003      0.336003       236.183       236.519    
  44  0.611089     -0.492512      -2.14750       2.14750       237.369       239.517    
  45  0.423003E-01  -3.16296      -13.7914       13.7914       237.593       251.384    
  46  0.430763     -0.842198      -3.67223       3.67223       227.112       230.784    
  47  0.374764     -0.981459      -4.27945       4.27945       232.157       236.436    
  48  0.109336      -2.21333      -9.65076       9.65076       239.319       248.970    
  49  0.642636E-02  -5.04735      -22.0079       22.0079       238.231       260.239    
  50  0.232984      -1.45679      -6.35202       6.35202       240.524       246.876    
  51  0.169005E-01  -4.08041      -17.7918       17.7918       223.818       241.610    
  52  0.183441      -1.69586      -7.39446       7.39446       245.726       253.120    
loop,thermsimp(1:2)       19   1.41907       6.22176    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264        230.06          1.04          0.99         23.83          0.30          0.05         26.22
Just calling func    0   0         26.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       19
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       20
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      263     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -5.08067       5.08067       224.174       229.255    
   2  0.362384      -1.01505      -4.42592       4.42592       224.312       228.738    
   3  0.900627     -0.104664     -0.456367      0.456367       227.582       228.038    
   4  0.233893      -1.45289      -6.33503       6.33503       225.904       232.239    
   5  0.183338      -1.69642      -7.39691       7.39691       226.348       233.745    
   6  0.351708      -1.04495      -4.55630       4.55630       227.526       232.082    
   7  0.979617     -0.205938E-01 -0.897949E-01  0.897949E-01   227.625       227.715    
   8  0.801294     -0.221527     -0.965925      0.965925       228.015       228.981    
   9  0.423893     -0.858275      -3.74234       3.74234       227.808       231.550    
  10  0.486446     -0.720630      -3.14216       3.14216       228.512       231.654    
  11  0.430531     -0.842736      -3.67458       3.67458       228.088       231.763    
  12  0.214629      -1.53884      -6.70981       6.70981       228.304       235.014    
  13  0.860310     -0.150463     -0.656063      0.656063       228.765       229.421    
  14  0.450659     -0.797045      -3.47535       3.47535       229.149       232.625    
  15  0.867432     -0.142218     -0.620113      0.620113       227.112       227.732    
  16  0.850327     -0.162134     -0.706952      0.706952       229.951       230.658    
  17  0.914193     -0.897130E-01 -0.391175      0.391175       227.269       227.660    
  18  0.908448     -0.960172E-01 -0.418664      0.418664       226.974       227.393    
  19  0.349788E-01  -3.35301      -14.6201       14.6201       229.354       243.974    
  20  0.825048     -0.192314     -0.838547      0.838547       231.270       232.109    
  21  0.628933     -0.463730      -2.02200       2.02200       228.957       230.979    
  22  0.756366     -0.279229      -1.21752       1.21752       230.091       231.309    
  23  0.545707     -0.605674      -2.64092       2.64092       230.912       233.553    
  24  0.653619     -0.425231      -1.85413       1.85413       226.541       228.395    
  25  0.781643     -0.246357      -1.07419       1.07419       229.027       230.101    
  26  0.444411     -0.811005      -3.53622       3.53622       232.919       236.456    
  27  0.223111      -1.50008      -6.54081       6.54081       228.288       234.829    
  28  0.143901      -1.93863      -8.45301       8.45301       228.831       237.284    
  29  0.419282E-01  -3.17180      -13.8300       13.8300       228.932       242.762    
  30  0.407367     -0.898040      -3.91572       3.91572       231.626       235.542    
  31  0.722138     -0.325538      -1.41944       1.41944       232.549       233.969    
  32  0.290143      -1.23738      -5.39534       5.39534       229.684       235.080    
  33  0.236931E-01  -3.74257      -16.3187       16.3187       233.629       249.948    
  34  0.198981      -1.61454      -7.03990       7.03990       232.157       239.197    
  35  0.765966     -0.266617      -1.16253       1.16253       236.183       237.346    
  36  0.522733     -0.648684      -2.82846       2.82846       228.431       231.260    
  37  0.297579E-01  -3.51466      -15.3250       15.3250       234.506       249.831    
  38  0.175475      -1.74026      -7.58803       7.58803       229.399       236.987    
  39  0.311931      -1.16497      -5.07962       5.07962       230.407       235.487    
  40  0.310920      -1.16822      -5.09379       5.09379       237.369       242.463    
  41  0.122272      -2.10150      -9.16318       9.16318       223.818       232.982    
  42  0.949359     -0.519686E-01 -0.226598      0.226598       227.100       227.327    
  43  0.500750     -0.691648      -3.01579       3.01579       231.049       234.065    
  44  0.729401E-01  -2.61812      -11.4158       11.4158       230.079       241.495    
  45  0.952528     -0.486360E-01 -0.212067      0.212067       229.140       229.352    
  46  0.718842     -0.330114      -1.43940       1.43940       231.389       232.829    
  47  0.529396     -0.636019      -2.77323       2.77323       240.524       243.297    
  48  0.314661      -1.15626      -5.04163       5.04163       239.319       244.361    
  49  0.947465     -0.539649E-01 -0.235303      0.235303       237.593       237.828    
  50  0.613869     -0.487974      -2.12771       2.12771       245.726       247.853    
  51  0.303056      -1.19384      -5.20549       5.20549       227.193       232.399    
  52  0.749186     -0.288769      -1.25912       1.25912       230.057       231.316    
loop,thermsimp(1:2)       20   5.08067       4.42592    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265        222.24          1.01          1.00         23.81          0.29          0.07         26.18
Just calling func    0   0         26.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    266        222.53          1.00          0.98         23.89          0.31          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    222.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       20
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       21
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      265     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -5.14636       5.14636       227.100       232.247    
   2  0.575213     -0.553015      -2.41131       2.41131       226.974       229.385    
   3  0.632244     -0.458480      -1.99911       1.99911       227.269       229.268    
   4  0.819203     -0.199424     -0.869546      0.869546       227.625       228.495    
   5  0.137693E-02  -6.58790      -28.7252       28.7252       227.112       255.837    
   6  0.367814      -1.00018      -4.36108       4.36108       227.582       231.943    
   7  0.452636     -0.792666      -3.45626       3.45626       226.541       229.997    
   8  0.278102      -1.27977      -5.58017       5.58017       224.312       229.892    
   9  0.417803     -0.872745      -3.80543       3.80543       228.015       231.820    
  10  0.682140     -0.382521      -1.66791       1.66791       224.174       225.842    
  11  0.204733      -1.58605      -6.91563       6.91563       229.140       236.056    
  12  0.637442     -0.450292      -1.96341       1.96341       228.765       230.728    
  13  0.114518      -2.16702      -9.44886       9.44886       229.027       238.475    
  14  0.724207     -0.322678      -1.40697       1.40697       229.951       231.358    
  15  0.461399     -0.773492      -3.37266       3.37266       228.957       232.329    
  16  0.731739     -0.312332      -1.36186       1.36186       228.431       229.793    
  17  0.773272     -0.257124      -1.12114       1.12114       230.091       231.213    
  18  0.789195     -0.236742      -1.03227       1.03227       230.057       231.089    
  19  0.762001     -0.271807      -1.18516       1.18516       227.808       228.993    
  20  0.933384     -0.689386E-01 -0.300593      0.300593       228.512       228.813    
  21  0.694037     -0.365230      -1.59251       1.59251       228.088       229.681    
  22  0.423570     -0.859038      -3.74566       3.74566       227.526       231.272    
  23  0.272919      -1.29858      -5.66220       5.66220       231.270       236.932    
  24  0.535843     -0.623914      -2.72045       2.72045       225.904       228.624    
  25  0.902288     -0.102822     -0.448333      0.448333       227.193       227.641    
  26  0.479374     -0.735275      -3.20602       3.20602       229.149       232.355    
  27  0.494900E-01  -3.00599      -13.1070       13.1070       231.389       244.496    
  28  0.921867     -0.813539E-01 -0.354727      0.354727       223.818       224.173    
  29  0.132425      -2.02174      -8.81537       8.81537       230.912       239.727    
  30  0.640539     -0.445446      -1.94227       1.94227       226.348       228.290    
  31  0.215363      -1.53543      -6.69493       6.69493       232.549       239.244    
  32  0.437204E-01  -3.12994      -13.6475       13.6475       231.049       244.696    
  33  0.166028      -1.79560      -7.82935       7.82935       228.288       236.117    
  34  0.425825     -0.853727      -3.72250       3.72250       228.304       232.027    
  35  0.810393     -0.210235     -0.916689      0.916689       229.684       230.601    
  36  0.855958     -0.155534     -0.678176      0.678176       230.407       231.085    
  37  0.830452     -0.185786     -0.810080      0.810080       231.626       232.436    
  38  0.658784     -0.417359      -1.81981       1.81981       232.919       234.739    
  39  0.910965     -0.932509E-01 -0.406601      0.406601       229.399       229.806    
  40  0.603480     -0.505043      -2.20214       2.20214       228.831       231.033    
  41  0.702610     -0.352953      -1.53898       1.53898       236.183       237.722    
  42  0.329065      -1.11150      -4.84647       4.84647       237.593       242.439    
  43  0.790497     -0.235094      -1.02508       1.02508       232.157       233.182    
  44  0.641572     -0.443834      -1.93525       1.93525       230.079       232.014    
  45  0.650683     -0.429733      -1.87377       1.87377       237.369       239.243    
  46  0.194049E-02  -6.24481      -27.2292       27.2292       228.932       256.161    
  47  0.662053     -0.412409      -1.79823       1.79823       240.524       242.322    
  48  0.294846      -1.22130      -5.32523       5.32523       229.354       234.679    
  49  0.709874     -0.342668      -1.49414       1.49414       239.319       240.813    
  50  0.700314     -0.356226      -1.55325       1.55325       245.726       247.279    
  51  0.639811E-01  -2.74917      -11.9872       11.9872       234.506       246.493    
  52  0.251451      -1.38051      -6.01943       6.01943       222.242       228.261    
loop,thermsimp(1:2)       21   5.14636       2.41131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267        225.24          0.98          0.99         23.92          0.30          0.05         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    225.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       21
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       22
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      266     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666     -0.765955      0.765955       223.818       224.584    
   2  0.801853     -0.220830     -0.962885      0.962885       224.174       225.137    
   3  0.768645     -0.263126      -1.14731       1.14731       227.193       228.340    
   4  0.855557     -0.156003     -0.680219      0.680219       222.242       222.922    
   5  0.845591     -0.167720     -0.731308      0.731308       226.348       227.080    
   6  0.350050      -1.04968      -4.57691       4.57691       227.625       232.202    
   7  0.927608     -0.751463E-01 -0.327660      0.327660       225.904       226.231    
   8  0.655345E-01  -2.72518      -11.8826       11.8826       228.512       240.395    
   9  0.355481      -1.03428      -4.50978       4.50978       227.808       232.318    
  10  0.728523     -0.316737      -1.38107       1.38107       227.269       228.650    
  11  0.573220     -0.556486      -2.42644       2.42644       226.974       229.400    
  12  0.112478      -2.18499      -9.52722       9.52722       228.088       237.615    
  13  0.338739      -1.08253      -4.72013       4.72013       228.431       233.151    
  14  0.239648      -1.42858      -6.22904       6.22904       229.399       235.628    
  15  0.918959     -0.845134E-01 -0.368503      0.368503       224.312       224.681    
  16  0.283771      -1.25959      -5.49217       5.49217       226.541       232.033    
  17  0.414404     -0.880913      -3.84104       3.84104       229.684       233.526    
  18  0.716403     -0.333512      -1.45421       1.45421       228.765       230.219    
  19  0.317726      -1.14657      -4.99937       4.99937       228.831       233.831    
  20  0.339005      -1.08174      -4.71671       4.71671       230.407       235.124    
  21  0.163059      -1.81364      -7.90803       7.90803       230.057       237.965    
  22  0.477081     -0.740069      -3.22692       3.22692       230.091       233.318    
  23  0.105851      -2.24573      -9.79204       9.79204       227.526       237.318    
  24  0.840431     -0.173840     -0.757994      0.757994       229.951       230.709    
  25  0.235315      -1.44683      -6.30862       6.30862       228.015       234.323    
  26  0.865464     -0.144489     -0.630016      0.630016       227.582       228.212    
  27  0.909462     -0.949026E-01 -0.413804      0.413804       230.079       230.493    
  28  0.152105E-01  -4.18577      -18.2512       18.2512       228.304       246.555    
  29  0.962485     -0.382371E-01 -0.166725      0.166725       227.100       227.267    
  30  0.259410      -1.34934      -5.88354       5.88354       228.957       234.840    
  31  0.364880      -1.00819      -4.39599       4.39599       229.149       233.545    
  32  0.467235     -0.760923      -3.31785       3.31785       231.626       234.944    
  33  0.844908     -0.168527     -0.734830      0.734830       232.157       232.892    
  34  0.188232      -1.67008      -7.28205       7.28205       229.354       236.636    
  35  0.496585     -0.700000      -3.05221       3.05221       232.919       235.972    
  36  0.410505     -0.890367      -3.88226       3.88226       229.140       233.022    
  37  0.533875     -0.627594      -2.73650       2.73650       228.288       231.025    
  38  0.610668     -0.493202      -2.15051       2.15051       231.270       233.421    
  39  0.241933      -1.41910      -6.18768       6.18768       236.183       242.371    
  40  0.642629     -0.442188      -1.92807       1.92807       229.027       230.955    
  41  0.775072     -0.254799      -1.11100       1.11100       237.369       238.480    
  42  0.345343      -1.06322      -4.63594       4.63594       232.549       237.185    
  43  0.844097     -0.169488     -0.739018      0.739018       230.912       231.651    
  44  0.426886     -0.851239      -3.71166       3.71166       239.319       243.031    
  45  0.594109     -0.520693      -2.27038       2.27038       240.524       242.794    
  46  0.489527     -0.714316      -3.11463       3.11463       237.593       240.707    
  47  0.313882      -1.15874      -5.05245       5.05245       231.389       236.442    
  48  0.687066     -0.375325      -1.63653       1.63653       231.049       232.686    
  49  0.394505     -0.930124      -4.05562       4.05562       234.506       238.562    
  50  0.971200     -0.292233E-01 -0.127422      0.127422       245.726       245.853    
  51  0.916939     -0.867145E-01 -0.378101      0.378101       227.112       227.490    
  52  0.968457     -0.320511E-01 -0.139753      0.139753       225.238       225.378    
loop,thermsimp(1:2)       22  0.765955      0.962885    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268        226.45          1.03          0.99         23.85          0.30          0.05         26.22
Just calling func    0   0         26.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    226.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       22
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       23
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      267     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456     -0.717077      0.717077       222.242       222.959    
   2  0.848474     -0.164316     -0.716467      0.716467       223.818       224.535    
   3  0.146795      -1.91872      -8.36618       8.36618       224.312       232.678    
   4  0.398624     -0.919738      -4.01033       4.01033       224.174       228.184    
   5  0.888093     -0.118679     -0.517474      0.517474       225.238       225.756    
   6  0.475009     -0.744421      -3.24590       3.24590       225.904       229.150    
   7  0.120824      -2.11342      -9.21514       9.21514       226.348       235.563    
   8  0.270052      -1.30914      -5.70824       5.70824       227.100       232.809    
   9  0.201748E-01  -3.90332      -17.0196       17.0196       227.112       244.131    
  10  0.999386     -0.614559E-03 -0.267966E-02  0.267966E-02   227.582       227.584    
  11  0.212655      -1.54808      -6.75011       6.75011       227.193       233.943    
  12  0.197911      -1.61994      -7.06342       7.06342       227.269       234.332    
  13  0.786394     -0.240297      -1.04777       1.04777       226.974       228.022    
  14  0.781263     -0.246844      -1.07631       1.07631       228.765       229.841    
  15  0.788011     -0.238244      -1.03881       1.03881       230.079       231.118    
  16  0.956387     -0.445927E-01 -0.194437      0.194437       229.951       230.146    
  17  0.717415     -0.332100      -1.44806       1.44806       229.027       230.475    
  18  0.808756     -0.212258     -0.925508      0.925508       228.288       229.214    
  19  0.756838     -0.278606      -1.21481       1.21481       230.912       232.126    
  20  0.570684     -0.560919      -2.44577       2.44577       226.541       228.987    
  21  0.946031     -0.554796E-01 -0.241908      0.241908       227.625       227.867    
  22  0.678634E-01  -2.69026      -11.7303       11.7303       227.808       239.538    
  23  0.631502     -0.459654      -2.00423       2.00423       231.049       233.053    
  24  0.114784E-01  -4.46729      -19.4787       19.4787       232.157       251.635    
  25  0.549681     -0.598417      -2.60928       2.60928       229.140       231.749    
  26  0.846433     -0.166725     -0.726970      0.726970       228.431       229.158    
  27  0.441841     -0.816805      -3.56151       3.56151       230.091       233.653    
  28  0.299100      -1.20698      -5.26278       5.26278       231.270       236.533    
  29  0.378130     -0.972517      -4.24046       4.24046       229.684       233.925    
  30  0.830469     -0.185764     -0.809987      0.809987       229.149       229.959    
  31  0.675108     -0.392883      -1.71309       1.71309       228.831       230.544    
  32  0.997619     -0.238377E-02 -0.103939E-01  0.103939E-01   228.015       228.025    
  33  0.897623     -0.108005     -0.470933      0.470933       228.957       229.428    
  34  0.591811E-01  -2.82715      -12.3272       12.3272       231.626       243.953    
  35  0.229825      -1.47044      -6.41154       6.41154       230.407       236.819    
  36  0.654017     -0.424622      -1.85148       1.85148       229.399       231.251    
  37  0.305777      -1.18490      -5.16652       5.16652       232.919       238.086    
  38  0.936135     -0.659954E-01 -0.287760      0.287760       231.389       231.677    
  39  0.698153     -0.359317      -1.56673       1.56673       229.354       230.920    
  40  0.829975     -0.186360     -0.812586      0.812586       232.549       233.362    
  41  0.951351     -0.498721E-01 -0.217457      0.217457       227.526       227.744    
  42  0.883299     -0.124092     -0.541078      0.541078       228.088       228.629    
  43  0.910087     -0.942154E-01 -0.410807      0.410807       230.057       230.468    
  44  0.590840     -0.526210      -2.29443       2.29443       237.369       239.663    
  45  0.146785      -1.91879      -8.36648       8.36648       234.506       242.872    
  46  0.830381E-01  -2.48846      -10.8504       10.8504       228.512       239.363    
  47  0.289482      -1.23966      -5.40529       5.40529       237.593       242.998    
  48  0.594462     -0.520098      -2.26778       2.26778       236.183       238.451    
  49  0.241311      -1.42167      -6.19889       6.19889       240.524       246.723    
  50  0.612368     -0.490422      -2.13839       2.13839       239.319       241.457    
  51  0.952207     -0.489727E-01 -0.213535      0.213535       245.726       245.939    
  52  0.857144     -0.154149     -0.672136      0.672136       226.453       227.125    
loop,thermsimp(1:2)       23  0.717077      0.716467    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269        231.10          1.04          0.99         23.99          0.21          0.05         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       23
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       24
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      268     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -9.95252       9.95252       222.242       232.194    
   2  0.372115     -0.988552      -4.31038       4.31038       223.818       228.129    
   3  0.732875     -0.310780      -1.35509       1.35509       225.238       226.594    
   4  0.341646      -1.07398      -4.68287       4.68287       226.453       231.136    
   5  0.406512     -0.900141      -3.92488       3.92488       227.582       231.506    
   6  0.271848      -1.30251      -5.67934       5.67934       227.526       233.205    
   7  0.738418     -0.303245      -1.32224       1.32224       227.625       228.947    
   8  0.903199     -0.101813     -0.443934      0.443934       226.974       227.418    
   9  0.511789     -0.669842      -2.92071       2.92071       228.015       230.936    
  10  0.202674      -1.59616      -6.95972       6.95972       224.174       231.134    
  11  0.325695      -1.12179      -4.89136       4.89136       228.088       232.979    
  12  0.719720     -0.328893      -1.43407       1.43407       226.541       227.975    
  13  0.715609     -0.334622      -1.45905       1.45905       225.904       227.363    
  14  0.973328     -0.270339E-01 -0.117876      0.117876       228.431       228.549    
  15  0.373998     -0.983504      -4.28837       4.28837       228.288       232.576    
  16  0.977965     -0.222815E-01 -0.971539E-01  0.971539E-01   228.957       229.054    
  17  0.105495      -2.24909      -9.80671       9.80671       228.765       238.572    
  18  0.729809     -0.314973      -1.37338       1.37338       229.149       230.523    
  19  0.378008     -0.972839      -4.24187       4.24187       229.951       234.193    
  20  0.678326     -0.388127      -1.69235       1.69235       230.057       231.749    
  21  0.671993     -0.397507      -1.73325       1.73325       229.027       230.760    
  22  0.515926     -0.661792      -2.88561       2.88561       228.831       231.717    
  23  0.363490      -1.01200      -4.41264       4.41264       229.354       233.766    
  24  0.206319      -1.57833      -6.88199       6.88199       230.079       236.961    
  25  0.755157E-01  -2.58341      -11.2645       11.2645       229.399       240.664    
  26  0.413763     -0.882461      -3.84779       3.84779       231.389       235.237    
  27  0.279023      -1.27646      -5.56574       5.56574       229.140       234.706    
  28  0.506422     -0.680385      -2.96668       2.96668       230.912       233.878    
  29  0.643082E-02  -5.04665      -22.0049       22.0049       224.312       246.317    
  30  0.285888E-01  -3.55474      -15.4997       15.4997       227.100       242.600    
  31  0.660419     -0.414880      -1.80900       1.80900       231.049       232.858    
  32  0.739369     -0.301959      -1.31663       1.31663       232.549       233.866    
  33  0.270269      -1.30834      -5.70474       5.70474       230.091       235.796    
  34  0.663889     -0.409640      -1.78615       1.78615       229.684       231.471    
  35  0.898739E-01  -2.40935      -10.5055       10.5055       227.193       237.699    
  36  0.832427     -0.183410     -0.799722      0.799722       227.269       228.068    
  37  0.723106     -0.324200      -1.41361       1.41361       226.348       227.762    
  38  0.986274     -0.138207E-01 -0.602624E-01  0.602624E-01   231.270       231.330    
  39  0.812861     -0.207195     -0.903432      0.903432       230.407       231.311    
  40  0.553236     -0.591971      -2.58117       2.58117       232.919       235.501    
  41  0.693785E-01  -2.66818      -11.6341       11.6341       236.183       247.817    
  42  0.117256      -2.14340      -9.34585       9.34585       228.512       237.858    
  43  0.807809     -0.213430     -0.930617      0.930617       227.808       228.739    
  44  0.900249     -0.105084     -0.458196      0.458196       237.369       237.827    
  45  0.753470     -0.283066      -1.23425       1.23425       239.319       240.553    
  46  0.127159      -2.06232      -8.99232       8.99232       234.506       243.498    
  47  0.535389     -0.624762      -2.72415       2.72415       237.593       240.317    
  48  0.957281     -0.436582E-01 -0.190363      0.190363       231.626       231.817    
  49  0.227700      -1.47973      -6.45204       6.45204       227.112       233.564    
  50  0.636404     -0.451921      -1.97051       1.97051       245.726       247.696    
  51  0.905015     -0.998042E-01 -0.435176      0.435176       240.524       240.959    
  52  0.555191     -0.588444      -2.56579       2.56579       231.096       233.662    
loop,thermsimp(1:2)       24   9.95252       4.31038    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270        229.15          0.99          0.99         24.03          0.21          0.07         26.29
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    271        455.83          1.02          1.00         24.09          0.06          0.06         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       24
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       25
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      270     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.165379      0.165379       225.238       225.404    
   2  0.355374      -1.03458      -4.51109       4.51109       225.904       230.415    
   3  0.294461      -1.22261      -5.33094       5.33094       226.974       232.305    
   4  0.644538     -0.439222      -1.91514       1.91514       226.348       228.263    
   5  0.741622     -0.298915      -1.30336       1.30336       226.541       227.844    
   6  0.805913E-01  -2.51837      -10.9808       10.9808       227.269       238.249    
   7  0.498180     -0.696794      -3.03823       3.03823       223.818       226.857    
   8  0.771004     -0.260061      -1.13394       1.13394       228.431       229.565    
   9  0.753480     -0.283053      -1.23419       1.23419       227.808       229.042    
  10  0.460525     -0.775387      -3.38092       3.38092       227.625       231.006    
  11  0.918626     -0.848759E-01 -0.370084      0.370084       228.957       229.327    
  12  0.355379      -1.03457      -4.51103       4.51103       229.149       233.660    
  13  0.664646     -0.408501      -1.78119       1.78119       229.027       230.808    
  14  0.328018      -1.11469      -4.86037       4.86037       228.015       232.875    
  15  0.529583     -0.635665      -2.77169       2.77169       224.174       226.946    
  16  0.259823      -1.34775      -5.87660       5.87660       226.453       232.330    
  17  0.463690E-01  -3.07112      -13.3910       13.3910       230.407       243.798    
  18  0.366509      -1.00373      -4.37657       4.37657       231.270       235.647    
  19  0.794534     -0.229999      -1.00287       1.00287       229.684       230.687    
  20  0.669373     -0.401413      -1.75028       1.75028       227.582       229.332    
  21  0.798901     -0.224518     -0.978967      0.978967       228.831       229.810    
  22  0.610403     -0.493636      -2.15240       2.15240       230.057       232.209    
  23  0.267818      -1.31745      -5.74446       5.74446       231.626       237.371    
  24  0.663049     -0.410906      -1.79167       1.79167       222.242       224.034    
  25  0.782871     -0.244788      -1.06735       1.06735       228.288       229.355    
  26  0.706545     -0.347368      -1.51463       1.51463       231.049       232.564    
  27  0.120119      -2.11927      -9.24065       9.24065       228.088       237.329    
  28  0.270575      -1.30721      -5.69981       5.69981       227.526       233.226    
  29  0.505391     -0.682422      -2.97556       2.97556       227.112       230.087    
  30  0.665734     -0.406865      -1.77405       1.77405       231.096       232.870    
  31  0.836788     -0.178185     -0.776939      0.776939       229.354       230.131    
  32  0.866983     -0.142736     -0.622372      0.622372       232.549       233.172    
  33  0.552904     -0.592571      -2.58378       2.58378       230.912       233.495    
  34  0.554153     -0.590314      -2.57395       2.57395       229.951       232.525    
  35  0.592407E-01  -2.82615      -12.3228       12.3228       229.140       241.463    
  36  0.902163     -0.102960     -0.448935      0.448935       231.389       231.838    
  37  0.266638E-01  -3.62445      -15.8037       15.8037       232.919       248.723    
  38  0.897053     -0.108640     -0.473703      0.473703       230.091       230.565    
  39  0.840496     -0.173763     -0.757658      0.757658       230.079       230.837    
  40  0.288358      -1.24355      -5.42226       5.42226       227.193       232.615    
  41  0.835972E-01  -2.48175      -10.8211       10.8211       237.369       248.190    
  42  0.412070     -0.886563      -3.86568       3.86568       228.512       232.378    
  43  0.725010     -0.321570      -1.40214       1.40214       228.765       230.167    
  44  0.316556      -1.15026      -5.01546       5.01546       237.593       242.608    
  45  0.486178     -0.721181      -3.14456       3.14456       239.319       242.464    
  46  0.143341      -1.94253      -8.47001       8.47001       229.399       237.869    
  47  0.956913     -0.440430E-01 -0.192041      0.192041       240.524       240.716    
  48  0.362697      -1.01419      -4.42216       4.42216       227.100       231.522    
  49  0.951746     -0.494572E-01 -0.215648      0.215648       234.506       234.722    
  50  0.511140     -0.671112      -2.92625       2.92625       224.312       227.238    
  51  0.364891E-01  -3.31074      -14.4358       14.4358       245.726       260.161    
  52  0.377076     -0.975308      -4.25263       4.25263       229.150       233.402    
loop,thermsimp(1:2)       25  0.165379       4.51109    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    272        230.94          1.27          1.04         24.14          0.03          0.06         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       25
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       26
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      271     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.547429E-01  0.547429E-01   222.242       222.297    
   2  0.516099     -0.661457      -2.88415       2.88415       225.238       228.123    
   3  0.202206      -1.59847      -6.96981       6.96981       223.818       230.788    
   4  0.240260      -1.42603      -6.21793       6.21793       224.174       230.392    
   5  0.717263E-01  -2.63490      -11.4889       11.4889       224.312       235.801    
   6  0.395382     -0.927902      -4.04593       4.04593       226.541       230.587    
   7  0.494348     -0.704516      -3.07190       3.07190       226.348       229.420    
   8  0.970815     -0.296196E-01 -0.129150      0.129150       227.808       227.937    
   9  0.992795     -0.723105E-02 -0.315295E-01  0.315295E-01   228.957       228.988    
  10  0.387320     -0.948503      -4.13576       4.13576       227.582       231.717    
  11  0.586568     -0.533466      -2.32607       2.32607       228.288       230.614    
  12  0.119144      -2.12742      -9.27620       9.27620       228.431       237.707    
  13  0.145144      -1.93003      -8.41550       8.41550       228.831       237.247    
  14  0.767931     -0.264056      -1.15136       1.15136       227.112       228.263    
  15  0.415014     -0.879442      -3.83463       3.83463       229.354       233.188    
  16  0.994477     -0.553801E-02 -0.241473E-01  0.241473E-01   228.765       228.789    
  17  0.757243     -0.278071      -1.21247       1.21247       225.904       227.116    
  18  0.669290     -0.401537      -1.75082       1.75082       230.091       231.842    
  19  0.112026      -2.18903      -9.54480       9.54480       229.684       239.229    
  20  0.434244     -0.834148      -3.63713       3.63713       229.027       232.664    
  21  0.491828     -0.709627      -3.09418       3.09418       230.079       233.173    
  22  0.517535     -0.658677      -2.87203       2.87203       227.625       230.497    
  23  0.411147     -0.888804      -3.87545       3.87545       227.100       230.976    
  24  0.250164      -1.38564      -6.04179       6.04179       231.389       237.431    
  25  0.109742E-01  -4.51221      -19.6746       19.6746       230.057       249.731    
  26  0.559459     -0.580786      -2.53240       2.53240       226.974       229.506    
  27  0.289677      -1.23899      -5.40236       5.40236       226.453       231.855    
  28  0.835809     -0.179356     -0.782044      0.782044       228.512       229.294    
  29  0.236182      -1.44315      -6.29257       6.29257       229.951       236.244    
  30  0.700988     -0.355264      -1.54906       1.54906       231.049       232.598    
  31  0.886914     -0.120007     -0.523267      0.523267       227.193       227.716    
  32  0.182911      -1.69875      -7.40707       7.40707       231.096       238.503    
  33  0.693089     -0.366597      -1.59847       1.59847       228.015       229.613    
  34  0.108523      -2.22079      -9.68330       9.68330       232.549       242.232    
  35  0.141600      -1.95475      -8.52327       8.52327       227.526       236.049    
  36  0.168348E-01  -4.08431      -17.8088       17.8088       229.150       246.958    
  37  0.419419E-01  -3.17147      -13.8286       13.8286       230.912       244.740    
  38  0.244896      -1.40692      -6.13460       6.13460       229.149       235.284    
  39  0.360662      -1.01981      -4.44670       4.44670       234.506       238.953    
  40  0.927013     -0.757879E-01 -0.330458      0.330458       231.270       231.601    
  41  0.869067     -0.140335     -0.611902      0.611902       228.088       228.700    
  42  0.827083     -0.189851     -0.827806      0.827806       231.626       232.454    
  43  0.928403     -0.742893E-01 -0.323923      0.323923       229.399       229.723    
  44  0.513193     -0.667103      -2.90877       2.90877       227.269       230.177    
  45  0.809080     -0.211858     -0.923763      0.923763       240.524       241.448    
  46  0.341224E-02  -5.68039      -24.7682       24.7682       229.140       253.908    
  47  0.734431     -0.308659      -1.34585       1.34585       239.319       240.665    
  48  0.688454     -0.373307      -1.62773       1.62773       237.593       239.220    
  49  0.990614     -0.943067E-02 -0.411205E-01  0.411205E-01   230.407       230.448    
  50  0.143408      -1.94206      -8.46796       8.46796       237.369       245.837    
  51  0.868596     -0.140878     -0.614269      0.614269       232.919       233.534    
  52  0.244103      -1.41016      -6.14874       6.14874       230.939       237.087    
loop,thermsimp(1:2)       26  0.547429E-01   2.88415    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273        222.69          1.25          1.03         24.03          0.07          0.07         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    274        226.06          1.05          1.03         24.06          0.04          0.06         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    222.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       26
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       27
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      273     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -7.02616       7.02616       222.242       229.268    
   2  0.983274     -0.168677E-01 -0.735480E-01  0.735480E-01   225.904       225.977    
   3  0.569108     -0.563685      -2.45783       2.45783       227.193       229.651    
   4  0.411179     -0.888728      -3.87512       3.87512       227.808       231.683    
   5  0.889241     -0.117387     -0.511840      0.511840       225.238       225.750    
   6  0.109537      -2.21149      -9.64277       9.64277       227.112       236.754    
   7  0.658027     -0.418509      -1.82483       1.82483       228.088       229.913    
   8  0.427534     -0.849722      -3.70504       3.70504       228.765       232.470    
   9  0.277803      -1.28084      -5.58485       5.58485       228.957       234.542    
  10  0.568421     -0.564892      -2.46310       2.46310       228.512       230.975    
  11  0.368489     -0.998346      -4.35308       4.35308       226.348       230.701    
  12  0.100945E-01  -4.59576      -20.0389       20.0389       226.974       247.013    
  13  0.811445     -0.208939     -0.911035      0.911035       228.015       228.926    
  14  0.135138      -2.00146      -8.72695       8.72695       229.399       238.126    
  15  0.600340     -0.510258      -2.22488       2.22488       227.269       229.493    
  16  0.537538     -0.620755      -2.70668       2.70668       224.174       226.881    
  17  0.923261     -0.798434E-01 -0.348141      0.348141       230.407       230.755    
  18  0.296505      -1.21569      -5.30078       5.30078       227.625       232.926    
  19  0.975666     -0.246348E-01 -0.107415      0.107415       226.541       226.648    
  20  0.102971      -2.27331      -9.91232       9.91232       228.288       238.200    
  21  0.110137      -2.20603      -9.61895       9.61895       223.818       233.437    
  22  0.874539     -0.134058     -0.584533      0.584533       227.100       227.685    
  23  0.887507     -0.119339     -0.520355      0.520355       231.270       231.791    
  24  0.811767     -0.208543     -0.909307      0.909307       227.582       228.491    
  25  0.304283      -1.18980      -5.18787       5.18787       230.091       235.279    
  26  0.304144      -1.19025      -5.18986       5.18986       226.453       231.643    
  27  0.854538     -0.157194     -0.685412      0.685412       231.626       232.312    
  28  0.543001     -0.610645      -2.66259       2.66259       231.049       233.712    
  29  0.808766     -0.212246     -0.925456      0.925456       229.027       229.952    
  30  0.286176      -1.25115      -5.45538       5.45538       230.079       235.535    
  31  0.328161      -1.11425      -4.85846       4.85846       229.354       234.212    
  32  0.563264     -0.574006      -2.50284       2.50284       232.919       235.422    
  33  0.180895      -1.70984      -7.45540       7.45540       229.149       236.605    
  34  0.977796     -0.224538E-01 -0.979050E-01  0.979050E-01   224.312       224.410    
  35  0.650784     -0.429577      -1.87308       1.87308       227.526       229.399    
  36  0.350586      -1.04815      -4.57024       4.57024       229.951       234.522    
  37  0.852996E-01  -2.46159      -10.7332       10.7332       230.939       241.672    
  38  0.363921      -1.01082      -4.40747       4.40747       228.831       233.239    
  39  0.715496E-01  -2.63737      -11.4997       11.4997       231.389       242.889    
  40  0.540542     -0.615184      -2.68238       2.68238       228.431       231.114    
  41  0.458744E-02  -5.38443      -23.4777       23.4777       231.096       254.574    
  42  0.684509     -0.379054      -1.65279       1.65279       234.506       236.159    
  43  0.827193     -0.189717     -0.827223      0.827223       237.593       238.420    
  44  0.430712     -0.842315      -3.67274       3.67274       229.684       233.357    
  45  0.925073     -0.778822E-01 -0.339590      0.339590       239.319       239.659    
  46  0.139567      -1.96921      -8.58636       8.58636       240.524       249.110    
  47  0.905138     -0.996680E-01 -0.434582      0.434582       232.549       232.984    
  48  0.230323      -1.46827      -6.40210       6.40210       230.912       237.314    
  49  0.854981     -0.156676     -0.683152      0.683152       237.369       238.052    
  50  0.526676     -0.641170      -2.79569       2.79569       229.150       231.945    
  51  0.425904     -0.853542      -3.72170       3.72170       230.057       233.778    
  52  0.770395     -0.260852      -1.13739       1.13739       222.694       223.832    
loop,thermsimp(1:2)       27   7.02616      0.735480E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275        232.15          1.27          1.01         23.92          0.19          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    232.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       27
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       28
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      274     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -6.37676       6.37676       222.694       229.071    
   2  0.922423     -0.807516E-01 -0.352101      0.352101       224.312       224.664    
   3  0.556007     -0.586974      -2.55938       2.55938       225.238       227.798    
   4  0.921345     -0.819211E-01 -0.357201      0.357201       225.904       226.261    
   5  0.623358     -0.472635      -2.06083       2.06083       226.541       228.602    
   6  0.967150     -0.334012E-01 -0.145639      0.145639       224.174       224.320    
   7  0.239844      -1.42777      -6.22549       6.22549       227.100       233.326    
   8  0.707370     -0.346201      -1.50954       1.50954       227.582       229.091    
   9  0.375591     -0.979256      -4.26985       4.26985       228.015       232.285    
  10  0.164915      -1.80233      -7.85868       7.85868       222.242       230.101    
  11  0.634729     -0.454558      -1.98201       1.98201       227.526       229.508    
  12  0.956585     -0.443852E-01 -0.193533      0.193533       227.269       227.462    
  13  0.281051      -1.26922      -5.53417       5.53417       227.193       232.727    
  14  0.332446      -1.10128      -4.80190       4.80190       228.088       232.890    
  15  0.417901     -0.872510      -3.80440       3.80440       229.027       232.831    
  16  0.454459     -0.788647      -3.43873       3.43873       226.348       229.787    
  17  0.163150      -1.81309      -7.90560       7.90560       230.407       238.313    
  18  0.412675     -0.885095      -3.85928       3.85928       228.512       232.371    
  19  0.510076     -0.673195      -2.93533       2.93533       228.431       231.367    
  20  0.159872E-02  -6.43855      -28.0740       28.0740       226.453       254.527    
  21  0.279094      -1.27620      -5.56463       5.56463       227.808       233.373    
  22  0.229843E-01  -3.77294      -16.4512       16.4512       231.270       247.721    
  23  0.829240E-02  -4.79242      -20.8964       20.8964       229.150       250.046    
  24  0.722732     -0.324717      -1.41586       1.41586       231.626       233.042    
  25  0.399402     -0.917787      -4.00182       4.00182       228.765       232.767    
  26  0.321457      -1.13489      -4.94847       4.94847       227.625       232.574    
  27  0.103147      -2.27160      -9.90483       9.90483       232.549       242.454    
  28  0.488570     -0.716273      -3.12317       3.12317       228.831       231.954    
  29  0.775391     -0.254388      -1.10921       1.10921       229.684       230.794    
  30  0.264831      -1.32866      -5.79337       5.79337       223.818       229.612    
  31  0.291634      -1.23225      -5.37299       5.37299       231.049       236.422    
  32  0.754799E-02  -4.88647      -21.3065       21.3065       230.057       251.363    
  33  0.403715     -0.907047      -3.95499       3.95499       229.354       233.309    
  34  0.794963     -0.229460      -1.00051       1.00051       229.951       230.952    
  35  0.482612E-01  -3.03113      -13.2166       13.2166       228.957       242.173    
  36  0.309506      -1.17278      -5.11366       5.11366       230.091       235.205    
  37  0.265676      -1.32548      -5.77947       5.77947       232.919       238.699    
  38  0.793358     -0.231480      -1.00932       1.00932       230.079       231.089    
  39  0.603192E-01  -2.80811      -12.2442       12.2442       234.506       246.750    
  40  0.516664     -0.660363      -2.87938       2.87938       229.149       232.029    
  41  0.524892E-01  -2.94715      -12.8504       12.8504       227.112       239.962    
  42  0.581500     -0.542144      -2.36391       2.36391       230.912       233.276    
  43  0.403805     -0.906823      -3.95402       3.95402       237.369       241.323    
  44  0.447829     -0.803344      -3.50282       3.50282       229.399       232.902    
  45  0.470604     -0.753737      -3.28652       3.28652       228.288       231.575    
  46  0.479088     -0.735871      -3.20861       3.20861       237.593       240.801    
  47  0.959223     -0.416322E-01 -0.181529      0.181529       239.319       239.501    
  48  0.527403     -0.639789      -2.78967       2.78967       230.939       233.728    
  49  0.731687     -0.312402      -1.36217       1.36217       231.389       232.751    
  50  0.682707     -0.381689      -1.66428       1.66428       226.974       228.638    
  51  0.386616     -0.950322      -4.14369       4.14369       240.524       244.668    
  52  0.120332      -2.11750      -9.23295       9.23295       232.151       241.384    
loop,thermsimp(1:2)       28   6.37676      0.352101    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276        228.60          1.26          1.03         24.04          0.01          0.06         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    228.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       28
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       29
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      275     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -4.80709       4.80709       224.174       228.981    
   2  0.991191     -0.884791E-02 -0.385795E-01  0.385795E-01   224.312       224.351    
   3  0.752830     -0.283916      -1.23796       1.23796       225.904       227.142    
   4  0.718872     -0.330071      -1.43921       1.43921       227.269       228.708    
   5  0.362244      -1.01544      -4.42761       4.42761       225.238       229.666    
   6  0.993342E-01  -2.30927      -10.0691       10.0691       226.541       236.610    
   7  0.734379     -0.308729      -1.34615       1.34615       226.974       228.320    
   8  0.190509      -1.65806      -7.22961       7.22961       222.694       229.924    
   9  0.113713      -2.17408      -9.47962       9.47962       227.582       237.061    
  10  0.582158     -0.541014      -2.35898       2.35898       227.526       229.885    
  11  0.100405E-01  -4.60113      -20.0623       20.0623       223.818       243.881    
  12  0.614877     -0.486333      -2.12056       2.12056       226.348       228.469    
  13  0.996806     -0.319890E-02 -0.139482E-01  0.139482E-01   222.242       222.256    
  14  0.439871E-01  -3.12386      -13.6210       13.6210       229.684       243.305    
  15  0.610456     -0.493549      -2.15202       2.15202       229.951       232.104    
  16  0.676471     -0.390866      -1.70429       1.70429       230.079       231.784    
  17  0.263829      -1.33246      -5.80990       5.80990       228.431       234.241    
  18  0.761962     -0.271858      -1.18538       1.18538       228.288       229.473    
  19  0.405295     -0.903140      -3.93796       3.93796       228.831       232.769    
  20  0.184680      -1.68913      -7.36512       7.36512       229.149       236.514    
  21  0.695434     -0.363219      -1.58374       1.58374       228.015       229.599    
  22  0.597154     -0.515580      -2.24808       2.24808       228.512       230.760    
  23  0.254276      -1.36933      -5.97070       5.97070       227.625       233.596    
  24  0.777974     -0.251062      -1.09471       1.09471       227.193       228.288    
  25  0.597236     -0.515443      -2.24748       2.24748       231.389       233.637    
  26  0.658168     -0.418295      -1.82389       1.82389       228.765       230.589    
  27  0.917953     -0.856086E-01 -0.373279      0.373279       229.027       229.400    
  28  0.167567      -1.78637      -7.78912       7.78912       228.088       235.877    
  29  0.867739E-02  -4.74703      -20.6985       20.6985       229.399       250.098    
  30  0.157469      -1.84853      -8.06014       8.06014       231.626       239.686    
  31  0.947458     -0.539724E-01 -0.235336      0.235336       230.912       231.147    
  32  0.883772     -0.123556     -0.538740      0.538740       229.354       229.892    
  33  0.873100     -0.135705     -0.591713      0.591713       227.100       227.692    
  34  0.138043      -1.98019      -8.63420       8.63420       227.808       236.442    
  35  0.833185     -0.182500     -0.795752      0.795752       230.939       231.734    
  36  0.907894     -0.966275E-01 -0.421325      0.421325       230.091       230.513    
  37  0.858432     -0.152648     -0.665591      0.665591       231.049       231.715    
  38  0.192050      -1.65000      -7.19449       7.19449       230.407       237.602    
  39  0.890666     -0.115786     -0.504860      0.504860       232.919       233.424    
  40  0.389935     -0.941775      -4.10642       4.10642       239.319       243.425    
  41  0.842362     -0.171545     -0.747989      0.747989       227.112       227.860    
  42  0.143912      -1.93855      -8.45265       8.45265       237.593       246.045    
  43  0.678545     -0.387804      -1.69094       1.69094       237.369       239.060    
  44  0.621021     -0.476390      -2.07720       2.07720       232.151       234.228    
  45  0.533199     -0.628861      -2.74202       2.74202       228.957       231.699    
  46  0.891703     -0.114623     -0.499789      0.499789       232.549       233.049    
  47  0.675469     -0.392349      -1.71076       1.71076       240.524       242.235    
  48  0.757471     -0.277770      -1.21116       1.21116       234.506       235.717    
  49  0.855441     -0.156139     -0.680811      0.680811       231.270       231.951    
  50  0.737982     -0.303836      -1.32482       1.32482       229.150       230.474    
  51  0.630328     -0.461515      -2.01234       2.01234       230.057       232.069    
  52  0.701612     -0.354375      -1.54518       1.54518       228.599       230.144    
loop,thermsimp(1:2)       29   4.80709      0.385795E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277        223.13          1.28          1.04         23.79          0.15          0.07         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    278        225.41          1.02          1.03         24.02          0.09          0.06         26.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    223.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       29
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       30
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      277     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -8.05768       8.05768       222.242       230.300    
   2  0.553200     -0.592035      -2.58145       2.58145       224.312       226.893    
   3  0.825049     -0.192313     -0.838540      0.838540       225.904       226.742    
   4  0.767336     -0.264830      -1.15474       1.15474       227.100       228.255    
   5  0.966534     -0.340385E-01 -0.148418      0.148418       227.112       227.260    
   6  0.954430     -0.466410E-01 -0.203369      0.203369       227.193       227.396    
   7  0.780674     -0.247598      -1.07960       1.07960       226.974       228.053    
   8  0.312863      -1.16199      -5.06663       5.06663       226.348       231.415    
   9  0.990226     -0.982218E-02 -0.428276E-01  0.428276E-01   227.269       227.311    
  10  0.893872     -0.112193     -0.489193      0.489193       224.174       224.663    
  11  0.322320      -1.13221      -4.93677       4.93677       229.027       233.963    
  12  0.927465     -0.752997E-01 -0.328329      0.328329       228.288       228.616    
  13  0.539466     -0.617176      -2.69107       2.69107       228.015       230.706    
  14  0.461474     -0.773330      -3.37195       3.37195       225.238       228.610    
  15  0.745701     -0.293430      -1.27944       1.27944       227.526       228.806    
  16  0.703580     -0.351573      -1.53296       1.53296       229.354       230.887    
  17  0.917420E-01  -2.38878      -10.4158       10.4158       222.694       233.110    
  18  0.671661     -0.398001      -1.73540       1.73540       228.599       230.334    
  19  0.845179     -0.168207     -0.733433      0.733433       229.150       229.883    
  20  0.283605E-01  -3.56276      -15.5347       15.5347       230.091       245.626    
  21  0.108883E-01  -4.52006      -19.7088       19.7088       228.765       248.474    
  22  0.506006     -0.681208      -2.97027       2.97027       228.512       231.482    
  23  0.353918      -1.03869      -4.52900       4.52900       230.912       235.441    
  24  0.656862     -0.420282      -1.83255       1.83255       228.957       230.789    
  25  0.691560     -0.368806      -1.60810       1.60810       231.049       232.657    
  26  0.445402     -0.808779      -3.52652       3.52652       230.939       234.465    
  27  0.832700     -0.183081     -0.798289      0.798289       230.079       230.878    
  28  0.963063     -0.376360E-01 -0.164104      0.164104       231.270       231.434    
  29  0.422212     -0.862247      -3.75965       3.75965       230.057       233.816    
  30  0.917895     -0.856720E-01 -0.373555      0.373555       229.951       230.325    
  31  0.767210     -0.264994      -1.15545       1.15545       228.831       229.987    
  32  0.360836      -1.01933      -4.44459       4.44459       232.549       236.994    
  33  0.635930     -0.452667      -1.97376       1.97376       232.919       234.893    
  34  0.687292     -0.374995      -1.63509       1.63509       227.625       229.260    
  35  0.833832     -0.181724     -0.792370      0.792370       231.389       232.182    
  36  0.362075      -1.01590      -4.42965       4.42965       232.151       236.580    
  37  0.385764     -0.952530      -4.15331       4.15331       228.431       232.585    
  38  0.752556     -0.284279      -1.23954       1.23954       234.506       235.745    
  39  0.547433     -0.602515      -2.62714       2.62714       228.088       230.715    
  40  0.171004      -1.76607      -7.70059       7.70059       227.808       235.508    
  41  0.159022      -1.83871      -8.01732       8.01732       229.149       237.167    
  42  0.850806     -0.161571     -0.704496      0.704496       226.541       227.245    
  43  0.926075     -0.768001E-01 -0.334871      0.334871       227.582       227.916    
  44  0.584885     -0.536340      -2.33860       2.33860       230.407       232.746    
  45  0.547650     -0.602120      -2.62542       2.62542       237.369       239.994    
  46  0.864296     -0.145840     -0.635906      0.635906       231.626       232.262    
  47  0.384639     -0.955450      -4.16604       4.16604       240.524       244.690    
  48  0.359776      -1.02227      -4.45742       4.45742       229.684       234.142    
  49  0.147032      -1.91711      -8.35916       8.35916       239.319       247.678    
  50  0.649806     -0.431082      -1.87964       1.87964       223.818       225.698    
  51  0.909946     -0.943695E-01 -0.411479      0.411479       237.593       238.004    
  52  0.740699     -0.300161      -1.30879       1.30879       223.131       224.440    
loop,thermsimp(1:2)       30   8.05768       2.58145    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279        231.91          1.27          1.04         24.04          0.02          0.06         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       30
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       31
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      278     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -5.58942       5.58942       223.131       228.721    
   2  0.202445      -1.59728      -6.96464       6.96464       224.174       231.139    
   3  0.927152     -0.756373E-01 -0.329801      0.329801       223.818       224.148    
   4  0.403144     -0.908460      -3.96116       3.96116       225.904       229.865    
   5  0.791838     -0.233398      -1.01769       1.01769       224.312       225.330    
   6  0.292576      -1.22903      -5.35893       5.35893       226.541       231.900    
   7  0.135578      -1.99821      -8.71279       8.71279       227.112       235.824    
   8  0.516570     -0.660545      -2.88017       2.88017       227.269       230.149    
   9  0.730579     -0.313918      -1.36878       1.36878       227.193       228.562    
  10  0.508248     -0.676786      -2.95099       2.95099       227.582       230.533    
  11  0.928455     -0.742338E-01 -0.323681      0.323681       226.974       227.298    
  12  0.696477     -0.361721      -1.57721       1.57721       227.100       228.677    
  13  0.465556     -0.764522      -3.33354       3.33354       225.238       228.572    
  14  0.194653      -1.63654      -7.13578       7.13578       228.288       235.424    
  15  0.650312     -0.430303      -1.87625       1.87625       227.526       229.402    
  16  0.555802     -0.587343      -2.56099       2.56099       227.625       230.186    
  17  0.985517     -0.145893E-01 -0.636137E-01  0.636137E-01   229.150       229.213    
  18  0.923066     -0.800544E-01 -0.349061      0.349061       228.831       229.180    
  19  0.658765     -0.417388      -1.81994       1.81994       222.242       224.062    
  20  0.197878      -1.62010      -7.06414       7.06414       229.951       237.016    
  21  0.449673     -0.799236      -3.48490       3.48490       228.599       232.084    
  22  0.208093      -1.56977      -6.84467       6.84467       228.015       234.860    
  23  0.102791      -2.27506      -9.91994       9.91994       228.088       238.008    
  24  0.650538     -0.429955      -1.87473       1.87473       228.957       230.832    
  25  0.223365      -1.49895      -6.53586       6.53586       230.079       236.615    
  26  0.520729     -0.652525      -2.84520       2.84520       229.354       232.199    
  27  0.919707E-01  -2.38629      -10.4049       10.4049       226.348       236.753    
  28  0.788427     -0.237716      -1.03651       1.03651       231.270       232.307    
  29  0.395754     -0.926961      -4.04183       4.04183       228.512       232.554    
  30  0.903388     -0.101603     -0.443021      0.443021       231.389       231.832    
  31  0.569415     -0.563145      -2.45548       2.45548       231.626       234.082    
  32  0.974677     -0.256496E-01 -0.111840      0.111840       228.431       228.543    
  33  0.376411     -0.977073      -4.26033       4.26033       231.049       235.309    
  34  0.309090      -1.17412      -5.11953       5.11953       230.407       235.527    
  35  0.248039      -1.39417      -6.07900       6.07900       222.694       228.773    
  36  0.941329     -0.604621E-01 -0.263633      0.263633       230.057       230.320    
  37  0.131879      -2.02587      -8.83341       8.83341       229.027       237.860    
  38  0.188022      -1.67120      -7.28692       7.28692       229.684       236.971    
  39  0.898649E-01  -2.40945      -10.5059       10.5059       230.939       241.445    
  40  0.853893     -0.157949     -0.688705      0.688705       232.919       233.608    
  41  0.643577     -0.440714      -1.92164       1.92164       230.912       232.833    
  42  0.664391     -0.408885      -1.78286       1.78286       227.808       229.591    
  43  0.825262     -0.192054     -0.837414      0.837414       234.506       235.343    
  44  0.611498     -0.491843      -2.14458       2.14458       232.151       234.295    
  45  0.284000      -1.25878      -5.48865       5.48865       232.549       238.038    
  46  0.108174      -2.22402      -9.69737       9.69737       229.149       238.847    
  47  0.293070      -1.22734      -5.35158       5.35158       237.593       242.944    
  48  0.412045     -0.886623      -3.86594       3.86594       237.369       241.235    
  49  0.464041     -0.767783      -3.34776       3.34776       240.524       243.872    
  50  0.711768     -0.340003      -1.48251       1.48251       230.091       231.574    
  51  0.919970     -0.834138E-01 -0.363709      0.363709       239.319       239.683    
  52  0.551321     -0.595437      -2.59628       2.59628       231.911       234.507    
loop,thermsimp(1:2)       31   5.58942       6.96464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280        226.98          1.28          1.04         24.01          0.02          0.07         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    281        260.52          1.08          1.04         24.01          0.06          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    260.52        2.802     -1.329      5.247     -100.0      1.367    
                     -0.5844      2.561     -100.0      2.524      1.073    
                       1.258     -1.153      1.841      0.000      0.000    
                     -0.7078      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.021     -2.862     -5.088     -2.206    
                      -13.34     -2.401      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.    -0.1374E-01 -1.386      0.000    -0.6114    
                     -0.1561    -0.2312    -0.5127E-01-0.1859    -0.1126    

                      -1.132    -0.7183      0.000    -0.4223E-01 0.1280    
                      0.8541E-01 0.8243E-01 0.9580E-01-0.1055     0.3101E-01
                      0.1903     0.1815    -0.2996E-01 -1.808      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.316      9.177     -7039.     -4.000    
                     -0.8887    -0.2632      9.055      8.441     -4904.    

                      -4.000     0.6346E-01-0.6343      8.627      8.973    
                      -6912.     -4.000     0.1140    -0.8300      9.580    
                       8.809     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    226.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       31
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       32
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      280     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -1.54685       1.54685       222.242       223.789    
   2  0.779682     -0.248869      -1.08514       1.08514       223.818       224.904    
   3  0.611645     -0.491604      -2.14354       2.14354       224.312       226.456    
   4  0.380626     -0.965937      -4.21177       4.21177       226.974       231.186    
   5  0.986599     -0.134915E-01 -0.588268E-01  0.588268E-01   228.431       228.490    
   6  0.699021     -0.358075      -1.56131       1.56131       227.193       228.754    
   7  0.981217E-01  -2.32155      -10.1226       10.1226       225.238       235.361    
   8  0.221199      -1.50869      -6.57834       6.57834       227.100       233.679    
   9  0.802460     -0.220073     -0.959585      0.959585       223.131       224.091    
  10  0.623430     -0.472519      -2.06032       2.06032       222.694       224.755    
  11  0.669862     -0.400684      -1.74710       1.74710       228.831       230.578    
  12  0.957999     -0.429090E-01 -0.187096      0.187096       229.150       229.337    
  13  0.569879E-01  -2.86492      -12.4919       12.4919       227.526       240.018    
  14  0.245244      -1.40550      -6.12840       6.12840       227.808       233.936    
  15  0.870123     -0.139121     -0.606608      0.606608       225.904       226.510    
  16  0.429679     -0.844716      -3.68321       3.68321       227.269       230.952    
  17  0.369880     -0.994577      -4.33665       4.33665       227.625       231.962    
  18  0.964882     -0.357490E-01 -0.155876      0.155876       230.057       230.213    
  19  0.625983     -0.468432      -2.04250       2.04250       227.582       229.624    
  20  0.508652     -0.675991      -2.94752       2.94752       228.957       231.904    
  21  0.694697     -0.364279      -1.58836       1.58836       224.174       225.762    
  22  0.817819     -0.201114     -0.876916      0.876916       230.091       230.968    
  23  0.655732     -0.422003      -1.84006       1.84006       231.389       233.229    
  24  0.658757     -0.417401      -1.81999       1.81999       226.541       228.361    
  25  0.325934      -1.12106      -4.88816       4.88816       228.599       233.487    
  26  0.849137     -0.163535     -0.713060      0.713060       229.354       230.067    
  27  0.953435     -0.476843E-01 -0.207918      0.207918       231.270       231.478    
  28  0.435049     -0.832297      -3.62906       3.62906       228.512       232.141    
  29  0.155341E-01  -4.16472      -18.1594       18.1594       230.912       249.071    
  30  0.390095     -0.941364      -4.10463       4.10463       232.919       237.024    
  31  0.400867E-02  -5.51929      -24.0658       24.0658       231.626       255.692    
  32  0.989750     -0.103025E-01 -0.449220E-01  0.449220E-01   232.151       232.196    
  33  0.194149      -1.63913      -7.14708       7.14708       231.911       239.058    
  34  0.573547     -0.555915      -2.42395       2.42395       228.015       230.439    
  35  0.570216     -0.561740      -2.44935       2.44935       231.049       233.498    
  36  0.802122     -0.220494     -0.961420      0.961420       234.506       235.467    
  37  0.831214E-01  -2.48745      -10.8460       10.8460       228.288       239.134    
  38  0.280368      -1.27165      -5.54478       5.54478       230.407       235.952    
  39  0.568263     -0.565171      -2.46431       2.46431       227.112       229.576    
  40  0.570544     -0.561165      -2.44684       2.44684       230.079       232.526    
  41  0.524202     -0.645877      -2.81622       2.81622       226.348       229.164    
  42  0.625335E-01  -2.77205      -12.0870       12.0870       229.684       241.771    
  43  0.717146     -0.332476      -1.44970       1.44970       229.951       231.401    
  44  0.234175      -1.45169      -6.32979       6.32979       229.027       235.356    
  45  0.366320      -1.00425      -4.37882       4.37882       228.088       232.467    
  46  0.458915     -0.778891      -3.39620       3.39620       232.549       235.945    
  47  0.379536     -0.968806      -4.22428       4.22428       229.149       233.374    
  48  0.854466     -0.157278     -0.685781      0.685781       239.319       240.005    
  49  0.452738E-01  -3.09503      -13.4952       13.4952       237.369       250.864    
  50  0.966525     -0.340477E-01 -0.148458      0.148458       230.939       231.087    
  51  0.400949     -0.913920      -3.98496       3.98496       237.593       241.578    
  52  0.563096     -0.574305      -2.50414       2.50414       226.984       229.488    
loop,thermsimp(1:2)       32   1.54685       1.08514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282        236.11          1.09          1.01         23.80          0.19          0.06         26.15
Just calling func    0   0         26.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    236.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       32
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       33
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      281     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -3.95223       3.95223       222.242       226.194    
   2  0.598662     -0.513057      -2.23708       2.23708       223.131       225.369    
   3  0.165178      -1.80073      -7.85172       7.85172       222.694       230.546    
   4  0.785331     -0.241651      -1.05367       1.05367       223.818       224.872    
   5  0.422061     -0.862604      -3.76121       3.76121       224.174       227.935    
   6  0.343624      -1.06821      -4.65770       4.65770       224.312       228.970    
   7  0.988862     -0.112001E-01 -0.488357E-01  0.488357E-01   225.904       225.953    
   8  0.586093E-01  -2.83686      -12.3696       12.3696       226.541       238.911    
   9  0.324880      -1.12430      -4.90228       4.90228       228.431       233.334    
  10  0.869373     -0.139983     -0.610368      0.610368       227.193       227.803    
  11  0.314362      -1.15721      -5.04577       5.04577       226.348       231.394    
  12  0.635265     -0.453712      -1.97832       1.97832       229.150       231.128    
  13  0.800738     -0.222221     -0.968949      0.968949       226.984       227.952    
  14  0.234515      -1.45024      -6.32346       6.32346       227.112       233.435    
  15  0.818766     -0.199957     -0.871872      0.871872       227.582       228.453    
  16  0.480807     -0.732289      -3.19300       3.19300       229.354       232.547    
  17  0.173083      -1.75398      -7.64789       7.64789       230.057       237.705    
  18  0.544835     -0.607272      -2.64789       2.64789       228.015       230.663    
  19  0.955728     -0.452816E-01 -0.197441      0.197441       228.831       229.029    
  20  0.909631     -0.947157E-01 -0.412989      0.412989       227.269       227.682    
  21  0.538276     -0.619384      -2.70070       2.70070       230.091       232.792    
  22  0.640373     -0.445705      -1.94340       1.94340       230.939       232.882    
  23  0.588429     -0.530300      -2.31226       2.31226       226.974       229.286    
  24  0.954392     -0.466804E-01 -0.203540      0.203540       229.951       230.155    
  25  0.976738     -0.235363E-01 -0.102625      0.102625       231.270       231.373    
  26  0.801897     -0.220775     -0.962645      0.962645       228.957       229.919    
  27  0.679499     -0.386400      -1.68482       1.68482       227.625       229.310    
  28  0.303686      -1.19176      -5.19643       5.19643       228.512       233.709    
  29  0.907562     -0.969936E-01 -0.422921      0.422921       232.151       232.574    
  30  0.117971E-01  -4.43990      -19.3593       19.3593       228.088       247.447    
  31  0.324683      -1.12491      -4.90493       4.90493       230.079       234.984    
  32  0.662106     -0.412329      -1.79788       1.79788       231.389       233.187    
  33  0.334080      -1.09637      -4.78052       4.78052       229.149       233.930    
  34  0.307577      -1.17903      -5.14092       5.14092       228.599       233.740    
  35  0.539029     -0.617986      -2.69460       2.69460       231.049       233.744    
  36  0.822737     -0.195119     -0.850777      0.850777       227.100       227.951    
  37  0.973480     -0.268776E-01 -0.117194      0.117194       227.808       227.925    
  38  0.918970     -0.845018E-01 -0.368453      0.368453       229.027       229.395    
  39  0.203072      -1.59419      -6.95116       6.95116       225.238       232.190    
  40  0.467655     -0.760024      -3.31393       3.31393       234.506       237.820    
  41  0.323145      -1.12965      -4.92562       4.92562       232.549       237.475    
  42  0.505961     -0.681295      -2.97065       2.97065       230.407       233.378    
  43  0.699853E-01  -2.65947      -11.5961       11.5961       232.919       244.516    
  44  0.188263      -1.66991      -7.28132       7.28132       231.911       239.192    
  45  0.663178     -0.410711      -1.79082       1.79082       228.288       230.079    
  46  0.680233     -0.385320      -1.68011       1.68011       239.319       240.999    
  47  0.717812     -0.331548      -1.44565       1.44565       227.526       228.972    
  48  0.319374      -1.14139      -4.97681       4.97681       237.593       242.570    
  49  0.667076     -0.404851      -1.76527       1.76527       229.684       231.450    
  50  0.755360     -0.280560      -1.22333       1.22333       230.912       232.135    
  51  0.105804      -2.24617      -9.79396       9.79396       237.369       247.163    
  52  0.432752     -0.837590      -3.65214       3.65214       236.112       239.765    
loop,thermsimp(1:2)       33   3.95223       2.23708    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283        224.70          1.06          0.99         23.91          0.38          0.05         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284        223.67          1.00          1.00         23.89          0.28          0.05         26.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    223.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       33
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       34
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      283     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -6.42867       6.42867       223.818       230.247    
   2  0.299376      -1.20605      -5.25876       5.25876       223.131       228.390    
   3  0.220114      -1.51361      -6.59978       6.59978       225.904       232.504    
   4  0.229209      -1.47312      -6.42325       6.42325       222.242       228.665    
   5  0.902477     -0.102612     -0.447421      0.447421       227.269       227.716    
   6  0.659052     -0.416953      -1.81804       1.81804       227.193       229.011    
   7  0.100321E-01  -4.60197      -20.0660       20.0660       227.808       247.874    
   8  0.588837     -0.529606      -2.30924       2.30924       224.174       226.483    
   9  0.270943      -1.30585      -5.69389       5.69389       227.100       232.794    
  10  0.505518     -0.682171      -2.97447       2.97447       226.984       229.958    
  11  0.264565      -1.32967      -5.79776       5.79776       227.582       233.379    
  12  0.806386     -0.215193     -0.938307      0.938307       224.312       225.250    
  13  0.340560      -1.07716      -4.69675       4.69675       227.526       232.223    
  14  0.906186     -0.985106E-01 -0.429535      0.429535       228.831       229.261    
  15  0.786070     -0.240709      -1.04956       1.04956       226.974       228.023    
  16  0.540508     -0.615247      -2.68266       2.68266       227.625       230.308    
  17  0.935065     -0.671392E-01 -0.292747      0.292747       229.027       229.319    
  18  0.915359     -0.884391E-01 -0.385621      0.385621       228.957       229.342    
  19  0.958261     -0.426353E-01 -0.185903      0.185903       228.288       228.474    
  20  0.935110     -0.670907E-01 -0.292536      0.292536       229.951       230.244    
  21  0.637755     -0.449800      -1.96126       1.96126       222.694       224.655    
  22  0.975714     -0.245861E-01 -0.107203      0.107203       228.015       228.122    
  23  0.797424     -0.226369     -0.987037      0.987037       229.150       230.137    
  24  0.214179      -1.54094      -6.71898       6.71898       231.270       237.989    
  25  0.372145     -0.988472      -4.31003       4.31003       226.348       230.658    
  26  0.925208     -0.777367E-01 -0.338955      0.338955       229.684       230.023    
  27  0.175897      -1.73786      -7.57756       7.57756       230.912       238.489    
  28  0.952033     -0.491554E-01 -0.214332      0.214332       225.238       225.453    
  29  0.158274E-01  -4.14601      -18.0778       18.0778       229.354       247.432    
  30  0.799308     -0.224008     -0.976743      0.976743       232.151       233.127    
  31  0.248227      -1.39341      -6.07569       6.07569       230.091       236.167    
  32  0.244914      -1.40685      -6.13427       6.13427       230.939       237.073    
  33  0.390842     -0.939452      -4.09629       4.09629       231.389       235.486    
  34  0.146784      -1.91879      -8.36651       8.36651       228.431       236.798    
  35  0.500975     -0.691199      -3.01383       3.01383       230.407       233.421    
  36  0.480131E-01  -3.03628      -13.2391       13.2391       227.112       240.351    
  37  0.124503      -2.08343      -9.08436       9.08436       228.512       237.597    
  38  0.670304     -0.400024      -1.74422       1.74422       228.599       230.343    
  39  0.997449     -0.255468E-02 -0.111392E-01  0.111392E-01   231.049       231.060    
  40  0.681761     -0.383076      -1.67032       1.67032       229.149       230.820    
  41  0.440529     -0.819778      -3.57448       3.57448       230.079       233.654    
  42  0.342489      -1.07152      -4.67213       4.67213       232.549       237.221    
  43  0.735753     -0.306861      -1.33800       1.33800       230.057       231.395    
  44  0.614752     -0.486537      -2.12144       2.12144       234.506       236.627    
  45  0.351660      -1.04509      -4.55691       4.55691       226.541       231.098    
  46  0.777165     -0.252103      -1.09924       1.09924       231.911       233.010    
  47  0.392618     -0.934919      -4.07652       4.07652       236.112       240.189    
  48  0.385647     -0.952832      -4.15463       4.15463       239.319       243.474    
  49  0.834392     -0.181052     -0.789443      0.789443       237.593       238.382    
  50  0.469158     -0.756815      -3.29994       3.29994       232.919       236.219    
  51  0.697320     -0.360511      -1.57194       1.57194       237.369       238.941    
  52  0.987150     -0.129333E-01 -0.563929E-01  0.563929E-01   223.674       223.730    
loop,thermsimp(1:2)       34   6.42867       5.25876    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       3306.22          1.08          1.00         24.08          0.09          0.06         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    286        243.30          1.05          1.02         24.04          0.03          0.06         26.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    243.30
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       34
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       35
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      285     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -4.61210       4.61210       223.674       228.286    
   2  0.621479     -0.475653      -2.07399       2.07399       222.694       224.768    
   3  0.221273      -1.50836      -6.57689       6.57689       224.312       230.889    
   4  0.180626E-01  -4.01391      -17.5019       17.5019       225.238       242.740    
   5  0.216093      -1.53205      -6.68019       6.68019       224.174       230.854    
   6  0.351343      -1.04599      -4.56083       4.56083       227.269       231.829    
   7  0.360847      -1.01930      -4.44446       4.44446       226.974       231.418    
   8  0.439525     -0.822061      -3.58443       3.58443       228.015       231.599    
   9  0.910616E-01  -2.39622      -10.4482       10.4482       223.131       233.580    
  10  0.549745     -0.598300      -2.60877       2.60877       228.288       230.897    
  11  0.619825     -0.478318      -2.08561       2.08561       222.242       224.327    
  12  0.548169E-01  -2.90376      -12.6612       12.6612       227.193       239.854    
  13  0.947163     -0.542842E-01 -0.236695      0.236695       228.831       229.068    
  14  0.725459     -0.320951      -1.39944       1.39944       229.027       230.426    
  15  0.481613     -0.730615      -3.18570       3.18570       228.957       232.142    
  16  0.866286     -0.143540     -0.625879      0.625879       226.984       227.609    
  17  0.221988E-01  -3.80772      -16.6028       16.6028       229.684       246.287    
  18  0.980823     -0.193630E-01 -0.844286E-01  0.844286E-01   229.150       229.234    
  19  0.332549      -1.10097      -4.80055       4.80055       229.951       234.752    
  20  0.989035     -0.110256E-01 -0.480749E-01  0.480749E-01   223.818       223.866    
  21  0.364016      -1.01056      -4.40633       4.40633       227.625       232.032    
  22  0.861799     -0.148733     -0.648521      0.648521       228.599       229.248    
  23  0.622306     -0.474324      -2.06819       2.06819       226.348       228.416    
  24  0.575476     -0.552558      -2.40932       2.40932       229.149       231.559    
  25  0.205536      -1.58213      -6.89857       6.89857       231.049       237.948    
  26  0.124037      -2.08718      -9.10072       9.10072       226.541       235.642    
  27  0.467008     -0.761408      -3.31997       3.31997       230.057       233.377    
  28  0.273870      -1.29510      -5.64703       5.64703       227.526       233.173    
  29  0.842780     -0.171050     -0.745827      0.745827       225.904       226.650    
  30  0.709315     -0.343455      -1.49757       1.49757       227.100       228.598    
  31  0.677144     -0.389871      -1.69995       1.69995       231.911       233.611    
  32  0.656062     -0.421500      -1.83787       1.83787       232.151       233.988    
  33  0.721592     -0.326295      -1.42274       1.42274       227.582       229.004    
  34  0.120172      -2.11883      -9.23875       9.23875       230.407       239.646    
  35  0.832403     -0.183439     -0.799848      0.799848       230.079       230.879    
  36  0.607577     -0.498276      -2.17263       2.17263       231.389       233.562    
  37  0.169814      -1.77305      -7.73102       7.73102       230.091       237.822    
  38  0.578085     -0.548034      -2.38959       2.38959       232.919       235.309    
  39  0.201144      -1.60373      -6.99276       6.99276       234.506       241.499    
  40  0.922823     -0.803178E-01 -0.350209      0.350209       228.431       228.781    
  41  0.136644      -1.99038      -8.67863       8.67863       230.939       239.617    
  42  0.836366     -0.178689     -0.779135      0.779135       232.549       233.328    
  43  0.590669     -0.526499      -2.29569       2.29569       228.512       230.808    
  44  0.745946     -0.293102      -1.27801       1.27801       231.270       232.548    
  45  0.874736     -0.133833     -0.583552      0.583552       237.593       238.176    
  46  0.370232     -0.993625      -4.33250       4.33250       230.912       235.244    
  47  0.832293     -0.183570     -0.800421      0.800421       237.369       238.169    
  48  0.351566      -1.04536      -4.55807       4.55807       236.112       240.671    
  49  0.705870     -0.348324      -1.51880       1.51880       227.112       228.630    
  50  0.323816      -1.12758      -4.91659       4.91659       239.319       244.236    
  51  0.197269      -1.62319      -7.07758       7.07758       229.354       236.431    
  52  0.140686      -1.96123      -8.55153       8.55153       243.304       251.855    
loop,thermsimp(1:2)       35   4.61210       2.07399    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287        227.08          1.15          0.99         23.91          0.23          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    288        230.18          1.02          1.00         24.12          0.09          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       35
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       36
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      287     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -6.33842       6.33842       223.818       230.157    
   2  0.607568     -0.498291      -2.17270       2.17270       222.242       224.415    
   3  0.905785     -0.989529E-01 -0.431464      0.431464       222.694       223.126    
   4  0.995938E-01  -2.30666      -10.0577       10.0577       225.904       235.962    
   5  0.851360     -0.160920     -0.701660      0.701660       226.984       227.685    
   6  0.730583     -0.313913      -1.36875       1.36875       223.674       225.042    
   7  0.426216     -0.852810      -3.71850       3.71850       226.348       230.067    
   8  0.285108      -1.25489      -5.47169       5.47169       227.100       232.572    
   9  0.839246     -0.175251     -0.764148      0.764148       227.112       227.876    
  10  0.217639      -1.52492      -6.64909       6.64909       228.431       235.080    
  11  0.183996E-02  -6.29801      -27.4612       27.4612       227.582       255.043    
  12  0.682631     -0.381801      -1.66477       1.66477       228.831       230.496    
  13  0.203596      -1.59162      -6.93993       6.93993       229.150       236.090    
  14  0.881164     -0.126512     -0.551630      0.551630       228.599       229.151    
  15  0.711431     -0.340477      -1.48458       1.48458       229.027       230.511    
  16  0.874326     -0.134302     -0.585596      0.585596       228.512       229.098    
  17  0.814222     -0.205523     -0.896141      0.896141       224.174       225.070    
  18  0.995668     -0.434126E-02 -0.189292E-01  0.189292E-01   230.079       230.098    
  19  0.693805     -0.365564      -1.59397       1.59397       224.312       225.906    
  20  0.958584     -0.422984E-01 -0.184434      0.184434       228.288       228.472    
  21  0.748022     -0.290323      -1.26590       1.26590       226.974       228.240    
  22  0.696703     -0.361396      -1.57579       1.57579       229.149       230.725    
  23  0.732990     -0.310623      -1.35441       1.35441       228.015       229.369    
  24  0.534749     -0.625958      -2.72936       2.72936       227.269       229.998    
  25  0.691641     -0.368688      -1.60759       1.60759       227.625       229.233    
  26  0.300458      -1.20245      -5.24303       5.24303       228.957       234.200    
  27  0.977116     -0.231502E-01 -0.100942      0.100942       231.270       231.371    
  28  0.542581     -0.611418      -2.66597       2.66597       227.526       230.192    
  29  0.266111      -1.32384      -5.77234       5.77234       232.549       238.322    
  30  0.692298     -0.367738      -1.60345       1.60345       230.057       231.660    
  31  0.664047     -0.409403      -1.78512       1.78512       231.389       233.174    
  32  0.542186     -0.612146      -2.66914       2.66914       223.131       225.801    
  33  0.362243      -1.01544      -4.42761       4.42761       231.911       236.339    
  34  0.578658     -0.547044      -2.38527       2.38527       232.151       234.536    
  35  0.489298     -0.714783      -3.11667       3.11667       229.951       233.068    
  36  0.617485     -0.482100      -2.10210       2.10210       230.912       233.014    
  37  0.368651     -0.997905      -4.35116       4.35116       232.919       237.271    
  38  0.198936      -1.61477      -7.04088       7.04088       226.541       233.582    
  39  0.505263     -0.682676      -2.97667       2.97667       229.354       232.330    
  40  0.983997     -0.161325E-01 -0.703424E-01  0.703424E-01   230.091       230.162    
  41  0.630553     -0.461159      -2.01079       2.01079       231.049       233.060    
  42  0.423821E-01  -3.16103      -13.7830       13.7830       237.369       251.152    
  43  0.488935     -0.715526      -3.11991       3.11991       237.593       240.713    
  44  0.402078     -0.911110      -3.97271       3.97271       230.939       234.911    
  45  0.380878     -0.965277      -4.20889       4.20889       230.407       234.616    
  46  0.260585E-01  -3.64741      -15.9038       15.9038       227.193       243.097    
  47  0.681660     -0.383224      -1.67097       1.67097       236.112       237.783    
  48  0.489074     -0.715241      -3.11866       3.11866       234.506       237.625    
  49  0.752363     -0.284536      -1.24066       1.24066       225.238       226.479    
  50  0.978934     -0.212911E-01 -0.928357E-01  0.928357E-01   239.319       239.412    
  51  0.297789      -1.21137      -5.28194       5.28194       229.684       234.966    
  52  0.551604     -0.594926      -2.59405       2.59405       227.085       229.679    
loop,thermsimp(1:2)       36   6.33842       2.17270    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289        224.23          1.10          1.02         24.03          0.05          0.05         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    290        251.12          0.95          1.00         24.07          0.13          0.05         26.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    224.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       36
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       37
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      289     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -3.87383       3.87383       222.694       226.568    
   2  0.697205     -0.360676      -1.57266       1.57266       222.242       223.815    
   3  0.314648E-01  -3.45889      -15.0818       15.0818       223.674       238.755    
   4  0.857269     -0.154003     -0.671499      0.671499       224.174       224.845    
   5  0.652165     -0.427457      -1.86384       1.86384       223.131       224.995    
   6  0.510145     -0.673060      -2.93474       2.93474       224.312       227.247    
   7  0.175175      -1.74197      -7.59550       7.59550       225.238       232.834    
   8  0.373803     -0.984025      -4.29064       4.29064       226.984       231.274    
   9  0.514972     -0.663642      -2.89368       2.89368       227.112       230.005    
  10  0.548235     -0.601051      -2.62076       2.62076       226.974       229.595    
  11  0.541310     -0.613763      -2.67619       2.67619       228.288       230.964    
  12  0.734083     -0.309133      -1.34791       1.34791       228.512       229.860    
  13  0.422599     -0.861332      -3.75566       3.75566       228.599       232.355    
  14  0.287055      -1.24808      -5.44200       5.44200       227.625       233.067    
  15  0.885133     -0.122017     -0.532031      0.532031       228.015       228.547    
  16  0.391075     -0.938857      -4.09370       4.09370       227.085       231.179    
  17  0.473784     -0.747003      -3.25716       3.25716       227.269       230.526    
  18  0.691812     -0.368440      -1.60651       1.60651       226.348       227.955    
  19  0.644447     -0.439363      -1.91575       1.91575       230.079       231.995    
  20  0.805933     -0.215754     -0.940752      0.940752       223.818       224.759    
  21  0.393766     -0.931998      -4.06379       4.06379       230.091       234.155    
  22  0.907098E-01  -2.40009      -10.4651       10.4651       227.526       237.991    
  23  0.376515     -0.976796      -4.25912       4.25912       228.831       233.090    
  24  0.819190     -0.199439     -0.869615      0.869615       229.027       229.896    
  25  0.692438     -0.367536      -1.60257       1.60257       229.149       230.752    
  26  0.188370      -1.66935      -7.27885       7.27885       231.270       238.549    
  27  0.500532     -0.692083      -3.01769       3.01769       230.057       233.074    
  28  0.282311      -1.26475      -5.51467       5.51467       229.354       234.868    
  29  0.338061      -1.08453      -4.72886       4.72886       227.100       231.829    
  30  0.466208     -0.763123      -3.32744       3.32744       230.912       234.239    
  31  0.893084     -0.113075     -0.493040      0.493040       231.049       231.542    
  32  0.818806     -0.199908     -0.871660      0.871660       229.951       230.823    
  33  0.585066     -0.536031      -2.33726       2.33726       231.389       233.727    
  34  0.527412     -0.639774      -2.78961       2.78961       226.541       229.331    
  35  0.994295     -0.572143E-02 -0.249471E-01  0.249471E-01   228.957       228.982    
  36  0.739278     -0.302082      -1.31717       1.31717       232.151       233.468    
  37  0.230995      -1.46536      -6.38939       6.38939       230.407       236.797    
  38  0.414929     -0.879648      -3.83552       3.83552       230.939       234.774    
  39  0.378446     -0.971682      -4.23682       4.23682       229.684       233.921    
  40  0.368620     -0.997990      -4.35153       4.35153       228.431       232.783    
  41  0.301312      -1.19961      -5.23065       5.23065       225.904       231.134    
  42  0.105882E-01  -4.54801      -19.8307       19.8307       229.150       248.980    
  43  0.481885     -0.730049      -3.18323       3.18323       231.911       235.094    
  44  0.446716     -0.805833      -3.51367       3.51367       232.919       236.433    
  45  0.482098     -0.729608      -3.18131       3.18131       234.506       237.687    
  46  0.278892      -1.27693      -5.56780       5.56780       236.112       241.680    
  47  0.756484     -0.279074      -1.21685       1.21685       232.549       233.766    
  48  0.662766     -0.411334      -1.79354       1.79354       239.319       241.113    
  49  0.433861E-01  -3.13762      -13.6809       13.6809       237.593       251.274    
  50  0.825649E-02  -4.79676      -20.9153       20.9153       227.193       248.108    
  51  0.476679     -0.740911      -3.23059       3.23059       237.369       240.600    
  52  0.128614      -2.05094      -8.94270       8.94270       224.231       233.174    
loop,thermsimp(1:2)       37   3.87383       1.57266    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291        225.39          1.25          1.02         24.11          0.09          0.06         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    292        257.64          0.98          0.99         23.99          0.16          0.05         26.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    225.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       37
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       38
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      291     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -3.89986       3.89986       222.242       226.142    
   2  0.259700      -1.34823      -5.87867       5.87867       223.818       229.697    
   3  0.681144E-01  -2.68657      -11.7142       11.7142       224.174       235.888    
   4  0.158140      -1.84427      -8.04157       8.04157       223.131       231.173    
   5  0.497681     -0.697796      -3.04260       3.04260       222.694       225.737    
   6  0.800218     -0.222871     -0.971782      0.971782       224.312       225.284    
   7  0.831967     -0.183962     -0.802130      0.802130       226.348       227.150    
   8  0.707345     -0.346237      -1.50969       1.50969       228.015       229.525    
   9  0.265927      -1.32454      -5.77537       5.77537       228.957       234.732    
  10  0.659046     -0.416962      -1.81808       1.81808       226.541       228.359    
  11  0.654587E-01  -2.72634      -11.8876       11.8876       226.974       238.862    
  12  0.223329      -1.49911      -6.53657       6.53657       228.512       235.049    
  13  0.996019     -0.398855E-02 -0.173913E-01  0.173913E-01   229.027       229.044    
  14  0.553910     -0.590753      -2.57586       2.57586       227.112       229.687    
  15  0.218863      -1.51931      -6.62464       6.62464       227.269       233.893    
  16  0.414020     -0.881841      -3.84509       3.84509       229.149       232.994    
  17  0.229117      -1.47352      -6.42500       6.42500       229.951       236.376    
  18  0.341764      -1.07363      -4.68137       4.68137       228.288       232.969    
  19  0.357052      -1.02987      -4.49055       4.49055       225.904       230.394    
  20  0.780779     -0.247463      -1.07901       1.07901       227.085       228.164    
  21  0.382234     -0.961721      -4.19339       4.19339       226.984       231.177    
  22  0.123899      -2.08829      -9.10557       9.10557       231.049       240.155    
  23  0.393312     -0.933152      -4.06882       4.06882       227.100       231.169    
  24  0.481741     -0.730349      -3.18454       3.18454       230.079       233.264    
  25  0.120001      -2.12026      -9.24495       9.24495       228.599       237.844    
  26  0.506023     -0.681173      -2.97012       2.97012       228.431       231.401    
  27  0.891157     -0.115235     -0.502460      0.502460       225.238       225.741    
  28  0.584674     -0.536701      -2.34018       2.34018       227.625       229.965    
  29  0.313196      -1.16093      -5.06198       5.06198       230.057       235.119    
  30  0.507340     -0.678574      -2.95879       2.95879       228.831       231.790    
  31  0.985030     -0.150835E-01 -0.657687E-01  0.657687E-01   224.231       224.297    
  32  0.186570      -1.67895      -7.32071       7.32071       232.151       239.471    
  33  0.992622     -0.740493E-02 -0.322877E-01  0.322877E-01   231.389       231.422    
  34  0.344152      -1.06667      -4.65100       4.65100       232.549       237.200    
  35  0.327214      -1.11714      -4.87107       4.87107       229.684       234.556    
  36  0.722008     -0.325719      -1.42023       1.42023       230.091       231.512    
  37  0.471441     -0.751960      -3.27877       3.27877       230.912       234.190    
  38  0.483594     -0.726510      -3.16780       3.16780       230.939       234.106    
  39  0.799410     -0.223881     -0.976186      0.976186       229.354       230.330    
  40  0.864070     -0.146101     -0.637045      0.637045       231.911       232.548    
  41  0.326419      -1.11957      -4.88168       4.88168       232.919       237.801    
  42  0.970166E-01  -2.33287      -10.1720       10.1720       230.407       240.579    
  43  0.822479     -0.195432     -0.852144      0.852144       234.506       235.358    
  44  0.719858     -0.328701      -1.43324       1.43324       227.526       228.959    
  45  0.359763      -1.02231      -4.45758       4.45758       231.270       235.728    
  46  0.879180     -0.128765     -0.561456      0.561456       223.674       224.235    
  47  0.152514      -1.88050      -8.19954       8.19954       237.369       245.569    
  48  0.379430     -0.969085      -4.22550       4.22550       239.319       243.545    
  49  0.444703     -0.810349      -3.53336       3.53336       236.112       239.646    
  50  0.240485      -1.42510      -6.21385       6.21385       227.193       233.407    
  51  0.682479     -0.382024      -1.66574       1.66574       229.150       230.815    
  52  0.989508     -0.105479E-01 -0.459920E-01  0.459920E-01   225.392       225.438    
loop,thermsimp(1:2)       38   3.89986       5.87867    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293        225.09          1.00          0.99         23.96          0.21          0.06         26.22
Just calling func    0   0         26.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    294        774.83          1.04          1.00         24.07          0.11          0.05         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    225.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       38
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       39
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      293     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -9.06458       9.06458       223.674       232.738    
   2  0.274837      -1.29158      -5.63165       5.63165       224.231       229.863    
   3  0.305931E-01  -3.48698      -15.2043       15.2043       224.312       239.516    
   4  0.929157     -0.734779E-01 -0.320386      0.320386       225.392       225.712    
   5  0.995956     -0.405208E-02 -0.176683E-01  0.176683E-01   222.694       222.712    
   6  0.904971     -0.998521E-01 -0.435385      0.435385       225.238       225.674    
   7  0.189758      -1.66200      -7.24684       7.24684       222.242       229.489    
   8  0.134931      -2.00299      -8.73365       8.73365       226.348       235.082    
   9  0.302412      -1.19596      -5.21476       5.21476       227.085       232.300    
  10  0.389155     -0.943777      -4.11515       4.11515       226.541       230.656    
  11  0.947428     -0.540040E-01 -0.235473      0.235473       227.526       227.762    
  12  0.338357      -1.08365      -4.72505       4.72505       229.027       233.752    
  13  0.937476     -0.645645E-01 -0.281520      0.281520       228.015       228.296    
  14  0.399493     -0.917560      -4.00083       4.00083       227.112       231.112    
  15  0.527586     -0.639444      -2.78817       2.78817       223.818       226.607    
  16  0.297740      -1.21153      -5.28265       5.28265       227.625       232.908    
  17  0.557978     -0.583436      -2.54395       2.54395       229.354       231.898    
  18  0.267521      -1.31856      -5.74930       5.74930       225.904       231.653    
  19  0.637637     -0.449986      -1.96207       1.96207       229.150       231.112    
  20  0.838569     -0.176059     -0.767668      0.767668       227.100       227.868    
  21  0.132199E-01  -4.32603      -18.8628       18.8628       223.131       241.994    
  22  0.745606     -0.293557      -1.28000       1.28000       226.984       228.264    
  23  0.334504      -1.09511      -4.77499       4.77499       228.431       233.206    
  24  0.118852      -2.12987      -9.28689       9.28689       231.389       240.676    
  25  0.319911      -1.13971      -4.96949       4.96949       230.091       235.061    
  26  0.638302E-01  -2.75153      -11.9975       11.9975       228.831       240.829    
  27  0.173204      -1.75329      -7.64485       7.64485       231.911       239.556    
  28  0.885640     -0.121444     -0.529534      0.529534       228.288       228.818    
  29  0.710758     -0.341423      -1.48871       1.48871       229.149       230.638    
  30  0.938919     -0.630265E-01 -0.274814      0.274814       230.079       230.354    
  31  0.217740      -1.52445      -6.64706       6.64706       227.193       233.840    
  32  0.130036      -2.03994      -8.89475       8.89475       227.269       236.163    
  33  0.331090      -1.10537      -4.81973       4.81973       230.939       235.758    
  34  0.453525E-01  -3.09329      -13.4877       13.4877       230.912       244.399    
  35  0.494600     -0.704006      -3.06967       3.06967       229.684       232.754    
  36  0.488771E-01  -3.01845      -13.1613       13.1613       228.957       242.118    
  37  0.262916E-01  -3.63850      -15.8650       15.8650       228.512       244.377    
  38  0.975293     -0.250177E-01 -0.109085      0.109085       230.057       230.166    
  39  0.521026     -0.651955      -2.84272       2.84272       234.506       237.349    
  40  0.210960      -1.55609      -6.78500       6.78500       231.270       238.055    
  41  0.475166E-02  -5.34926      -23.3244       23.3244       224.174       247.498    
  42  0.675859     -0.391771      -1.70824       1.70824       229.951       231.660    
  43  0.691418     -0.369011      -1.60900       1.60900       232.549       234.158    
  44  0.425152     -0.855309      -3.72940       3.72940       232.919       236.649    
  45  0.141313      -1.95678      -8.53212       8.53212       228.599       237.131    
  46  0.902170     -0.102952     -0.448902      0.448902       226.974       227.423    
  47  0.794321     -0.230268      -1.00404       1.00404       232.151       233.155    
  48  0.685387     -0.377772      -1.64720       1.64720       236.112       237.760    
  49  0.273223      -1.29747      -5.65734       5.65734       231.049       236.706    
  50  0.784111     -0.243205      -1.06045       1.06045       230.407       231.468    
  51  0.824524     -0.192949     -0.841317      0.841317       239.319       240.160    
  52  0.855082     -0.156558     -0.682640      0.682640       225.094       225.777    
loop,thermsimp(1:2)       39   9.06458       5.63165    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295        232.71          1.07          0.99         24.02          0.24          0.05         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    232.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       39
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       40
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      294     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -3.33294       3.33294       222.694       226.027    
   2  0.310178      -1.17061      -5.10420       5.10420       225.238       230.343    
   3  0.883713     -0.123623     -0.539034      0.539034       225.392       225.931    
   4  0.641465     -0.444001      -1.93598       1.93598       225.094       227.030    
   5  0.458576E-01  -3.08222      -13.4394       13.4394       223.818       237.258    
   6  0.611421     -0.491970      -2.14514       2.14514       226.974       229.119    
   7  0.292603      -1.22894      -5.35854       5.35854       227.526       232.885    
   8  0.180818      -1.71026      -7.45726       7.45726       227.100       234.558    
   9  0.490648     -0.712028      -3.10466       3.10466       226.984       230.088    
  10  0.538601     -0.618781      -2.69807       2.69807       228.015       230.713    
  11  0.451209     -0.795824      -3.47003       3.47003       228.288       231.758    
  12  0.610260     -0.493870      -2.15342       2.15342       222.242       224.395    
  13  0.425113     -0.855401      -3.72980       3.72980       224.231       227.961    
  14  0.647858     -0.434084      -1.89274       1.89274       230.057       231.949    
  15  0.394937     -0.929029      -4.05084       4.05084       230.079       234.130    
  16  0.452279E-01  -3.09604      -13.4997       13.4997       229.149       242.649    
  17  0.954905     -0.461437E-01 -0.201200      0.201200       226.541       226.742    
  18  0.362548      -1.01460      -4.42395       4.42395       229.150       233.574    
  19  0.808078     -0.213097     -0.929166      0.929166       227.112       228.041    
  20  0.219348      -1.51709      -6.61498       6.61498       230.407       237.022    
  21  0.206981      -1.57513      -6.86802       6.86802       225.904       232.772    
  22  0.719933     -0.328597      -1.43278       1.43278       229.951       231.384    
  23  0.950238     -0.510432E-01 -0.222563      0.222563       229.354       229.576    
  24  0.845993     -0.167244     -0.729233      0.729233       227.085       227.814    
  25  0.157926      -1.84563      -8.04750       8.04750       223.674       231.721    
  26  0.430020     -0.843924      -3.67976       3.67976       229.684       233.364    
  27  0.624159     -0.471350      -2.05523       2.05523       227.625       229.680    
  28  0.355386      -1.03455      -4.51095       4.51095       232.151       236.662    
  29  0.297353      -1.21284      -5.28833       5.28833       228.431       233.720    
  30  0.185476      -1.68483      -7.34635       7.34635       229.027       236.373    
  31  0.406569     -0.900002      -3.92428       3.92428       227.193       231.117    
  32  0.147052      -1.91697      -8.35856       8.35856       232.549       240.908    
  33  0.205955      -1.58010      -6.88968       6.88968       230.091       236.981    
  34  0.383503     -0.958409      -4.17895       4.17895       226.348       230.527    
  35  0.514677E-01  -2.96680      -12.9361       12.9361       230.939       243.875    
  36  0.499194     -0.694760      -3.02936       3.02936       227.269       230.298    
  37  0.103172E-01  -4.57394      -19.9437       19.9437       232.919       252.863    
  38  0.470163     -0.754676      -3.29061       3.29061       231.049       234.340    
  39  0.983694     -0.164404E-01 -0.716848E-01  0.716848E-01   228.599       228.671    
  40  0.880425     -0.127351     -0.555287      0.555287       234.506       235.061    
  41  0.969759     -0.307072E-01 -0.133892      0.133892       236.112       236.246    
  42  0.761826E-01  -2.57462      -11.2261       11.2261       231.270       242.496    
  43  0.124427      -2.08404      -9.08701       9.08701       224.312       233.399    
  44  0.997702     -0.230032E-02 -0.100301E-01  0.100301E-01   231.911       231.921    
  45  0.213939      -1.54206      -6.72385       6.72385       239.319       246.043    
  46  0.471369     -0.752113      -3.27944       3.27944       231.389       234.669    
  47  0.421561E-01  -3.16638      -13.8063       13.8063       228.831       242.638    
  48  0.693092     -0.366592      -1.59845       1.59845       223.131       224.730    
  49  0.375157     -0.980409      -4.27488       4.27488       228.957       233.232    
  50  0.285659      -1.25296      -5.46326       5.46326       228.512       233.975    
  51  0.338951      -1.08190      -4.71741       4.71741       230.912       235.629    
  52  0.930127E-01  -2.37502      -10.3558       10.3558       232.710       243.066    
loop,thermsimp(1:2)       40   3.33294       5.10420    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296        220.78          1.03          0.98         23.93          0.38          0.07         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    297        225.20          1.02          0.98         23.95          0.30          0.06         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    220.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       40
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       41
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      296     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -6.38789       6.38789       222.242       228.630    
   2  0.984723     -0.153953E-01 -0.671282E-01  0.671282E-01   223.131       223.199    
   3  0.689569     -0.371688      -1.62067       1.62067       225.392       227.013    
   4  0.539532     -0.617054      -2.69054       2.69054       222.694       225.385    
   5  0.103859      -2.26472      -9.87487       9.87487       226.541       236.416    
   6  0.403261     -0.908171      -3.95990       3.95990       225.094       229.054    
   7  0.545138     -0.606716      -2.64546       2.64546       227.085       229.730    
   8  0.211198      -1.55496      -6.78009       6.78009       224.231       231.011    
   9  0.533123     -0.629004      -2.74264       2.74264       227.112       229.854    
  10  0.891214     -0.115171     -0.502178      0.502178       228.599       229.101    
  11  0.604806     -0.502847      -2.19256       2.19256       226.974       229.166    
  12  0.176166      -1.73633      -7.57092       7.57092       229.354       236.925    
  13  0.733693     -0.309664      -1.35023       1.35023       227.625       228.975    
  14  0.248504      -1.39230      -6.07083       6.07083       226.984       233.054    
  15  0.183808      -1.69387      -7.38576       7.38576       227.269       234.654    
  16  0.308674E-02  -5.78064      -25.2053       25.2053       225.238       250.444    
  17  0.651025     -0.429207      -1.87147       1.87147       226.348       228.220    
  18  0.864353     -0.145775     -0.635620      0.635620       228.015       228.650    
  19  0.547352     -0.602664      -2.62779       2.62779       227.193       229.821    
  20  0.631248     -0.460057      -2.00599       2.00599       229.951       231.957    
  21  0.344368E-01  -3.36863      -14.6882       14.6882       223.674       238.362    
  22  0.876828     -0.131444     -0.573136      0.573136       228.288       228.861    
  23  0.884538     -0.122690     -0.534966      0.534966       231.911       232.446    
  24  0.926808     -0.760084E-01 -0.331419      0.331419       230.057       230.388    
  25  0.823462     -0.194237     -0.846933      0.846933       225.904       226.751    
  26  0.852580     -0.159489     -0.695418      0.695418       227.526       228.222    
  27  0.577707     -0.548689      -2.39245       2.39245       228.957       231.349    
  28  0.510093     -0.673163      -2.93519       2.93519       229.684       232.620    
  29  0.890288     -0.116210     -0.506710      0.506710       224.312       224.819    
  30  0.304875      -1.18785      -5.17939       5.17939       229.150       234.329    
  31  0.152164      -1.88279      -8.20954       8.20954       228.431       236.641    
  32  0.718687     -0.330329      -1.44033       1.44033       228.512       229.953    
  33  0.488128     -0.717177      -3.12711       3.12711       230.079       233.206    
  34  0.373052     -0.986038      -4.29942       4.29942       231.049       235.348    
  35  0.247351      -1.39695      -6.09110       6.09110       227.100       233.191    
  36  0.532108     -0.630909      -2.75095       2.75095       231.389       234.140    
  37  0.828879E-02  -4.79285      -20.8983       20.8983       234.506       255.404    
  38  0.168277      -1.78214      -7.77067       7.77067       230.912       238.682    
  39  0.253216      -1.37351      -5.98893       5.98893       236.112       242.101    
  40  0.458588     -0.779602      -3.39930       3.39930       229.027       232.426    
  41  0.725692     -0.320630      -1.39804       1.39804       232.151       233.549    
  42  0.283543      -1.26039      -5.49569       5.49569       230.091       235.587    
  43  0.798055     -0.225578     -0.983587      0.983587       230.407       231.391    
  44  0.805371     -0.216453     -0.943798      0.943798       223.818       224.762    
  45  0.580747     -0.543441      -2.36956       2.36956       232.549       234.919    
  46  0.581119     -0.542799      -2.36677       2.36677       231.270       233.637    
  47  0.305196      -1.18680      -5.17481       5.17481       228.831       234.006    
  48  0.905702     -0.990454E-01 -0.431867      0.431867       229.149       229.581    
  49  0.265633E-01  -3.62822      -15.8201       15.8201       232.710       248.530    
  50  0.114529E-01  -4.46951      -19.4884       19.4884       230.939       250.427    
  51  0.990634     -0.941033E-02 -0.410318E-01  0.410318E-01   239.319       239.360    
  52  0.609564     -0.495011      -2.15840       2.15840       220.777       222.935    
loop,thermsimp(1:2)       41   6.38789      0.671282E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298        221.18          1.25          1.03         23.85          0.40          0.05         26.57
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    299        224.87          0.98          1.00         23.95          0.28          0.05         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    221.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       41
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       42
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      298     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -13.5905       13.5905       220.777       234.367    
   2  0.196215      -1.62854      -7.10093       7.10093       223.131       230.232    
   3  0.501152     -0.690846      -3.01230       3.01230       223.818       226.831    
   4  0.288339      -1.24362      -5.42255       5.42255       224.312       229.735    
   5  0.773132     -0.257306      -1.12193       1.12193       222.694       223.816    
   6  0.417683     -0.873033      -3.80669       3.80669       225.904       229.711    
   7  0.229479      -1.47195      -6.41812       6.41812       225.392       231.810    
   8  0.964123     -0.365367E-01 -0.159311      0.159311       226.348       226.508    
   9  0.263782      -1.33263      -5.81067       5.81067       227.526       233.337    
  10  0.102960      -2.27342      -9.91277       9.91277       222.242       232.155    
  11  0.828790     -0.187788     -0.818812      0.818812       228.015       228.834    
  12  0.738697     -0.302868      -1.32059       1.32059       228.288       229.609    
  13  0.458595     -0.779589      -3.39924       3.39924       227.625       231.024    
  14  0.905176     -0.996260E-01 -0.434399      0.434399       225.094       225.529    
  15  0.147067      -1.91687      -8.35810       8.35810       228.599       236.957    
  16  0.142365      -1.94936      -8.49978       8.49978       226.974       235.474    
  17  0.483147     -0.727435      -3.17183       3.17183       229.149       232.321    
  18  0.640417     -0.445636      -1.94311       1.94311       227.085       229.028    
  19  0.719349     -0.329408      -1.43632       1.43632       227.193       228.629    
  20  0.714234     -0.336545      -1.46744       1.46744       227.112       228.579    
  21  0.825507     -0.191757     -0.836117      0.836117       228.512       229.348    
  22  0.155188      -1.86312      -8.12374       8.12374       230.057       238.180    
  23  0.248874      -1.39081      -6.06434       6.06434       224.231       230.296    
  24  0.107953      -2.22606      -9.70629       9.70629       228.957       238.663    
  25  0.349169      -1.05220      -4.58790       4.58790       230.407       234.995    
  26  0.967311     -0.332356E-01 -0.144917      0.144917       229.951       230.096    
  27  0.519506     -0.654877      -2.85546       2.85546       229.027       231.882    
  28  0.462662     -0.770758      -3.36074       3.36074       231.911       235.272    
  29  0.811438     -0.208948     -0.911074      0.911074       229.684       230.596    
  30  0.394710E-01  -3.23219      -14.0933       14.0933       226.984       241.077    
  31  0.482930     -0.727884      -3.17379       3.17379       227.100       230.274    
  32  0.520883     -0.652231      -2.84392       2.84392       230.079       232.923    
  33  0.980978E-01  -2.32179      -10.1237       10.1237       232.151       242.274    
  34  0.626549     -0.467529      -2.03856       2.03856       231.270       233.309    
  35  0.618402     -0.480616      -2.09563       2.09563       228.831       230.927    
  36  0.681438     -0.383550      -1.67239       1.67239       231.389       233.062    
  37  0.816820     -0.202336     -0.882245      0.882245       229.150       230.032    
  38  0.578487     -0.547340      -2.38656       2.38656       227.269       229.655    
  39  0.349734      -1.05058      -4.58085       4.58085       232.549       237.130    
  40  0.945672     -0.558596E-01 -0.243564      0.243564       231.049       231.293    
  41  0.767680     -0.264382      -1.15278       1.15278       230.091       231.244    
  42  0.122064      -2.10321      -9.17061       9.17061       226.541       235.712    
  43  0.211623      -1.55295      -6.77131       6.77131       228.431       235.203    
  44  0.969992E-01  -2.33305      -10.1728       10.1728       229.354       239.526    
  45  0.877482     -0.130699     -0.569888      0.569888       223.674       224.244    
  46  0.448991     -0.800752      -3.49152       3.49152       230.912       234.403    
  47  0.833113     -0.182586     -0.796131      0.796131       239.319       240.115    
  48  0.691765     -0.368508      -1.60681       1.60681       236.112       237.719    
  49  0.310664      -1.16904      -5.09738       5.09738       232.710       237.807    
  50  0.422283     -0.862080      -3.75893       3.75893       230.939       234.698    
  51  0.382184E-01  -3.26444      -14.2339       14.2339       225.238       239.472    
  52  0.679614E-01  -2.68882      -11.7240       11.7240       221.175       232.899    
loop,thermsimp(1:2)       42   13.5905       7.10093    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300        228.55          1.09          1.00         23.92          0.36          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    228.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       42
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       43
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      299     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -5.27016       5.27016       222.694       227.964    
   2  0.383173     -0.959268      -4.18269       4.18269       223.674       227.856    
   3  0.386205     -0.951387      -4.14833       4.14833       225.094       229.242    
   4  0.362178      -1.01562      -4.42840       4.42840       226.348       230.777    
   5  0.394462     -0.930233      -4.05609       4.05609       223.818       227.875    
   6  0.883072     -0.124349     -0.542197      0.542197       227.112       227.654    
   7  0.571477     -0.559531      -2.43972       2.43972       227.193       229.633    
   8  0.944036     -0.575912E-01 -0.251115      0.251115       228.015       228.266    
   9  0.326573      -1.11910      -4.87962       4.87962       227.085       231.964    
  10  0.467297     -0.760791      -3.31727       3.31727       228.512       231.829    
  11  0.828365     -0.188301     -0.821048      0.821048       228.288       229.109    
  12  0.826991     -0.189962     -0.828290      0.828290       227.269       228.097    
  13  0.675447E-01  -2.69497      -11.7509       11.7509       225.904       237.655    
  14  0.924113     -0.789214E-01 -0.344121      0.344121       224.312       224.656    
  15  0.810131     -0.210560     -0.918104      0.918104       229.150       230.068    
  16  0.410286     -0.890900      -3.88459       3.88459       229.951       233.836    
  17  0.334977      -1.09369      -4.76883       4.76883       223.131       227.900    
  18  0.119017      -2.12849      -9.28084       9.28084       227.100       236.381    
  19  0.447328     -0.804463      -3.50770       3.50770       224.231       227.739    
  20  0.324388E-02  -5.73098      -24.9888       24.9888       229.684       254.673    
  21  0.158272      -1.84344      -8.03795       8.03795       228.831       236.869    
  22  0.241219      -1.42205      -6.20057       6.20057       227.625       233.826    
  23  0.259790      -1.34788      -5.87716       5.87716       230.091       235.969    
  24  0.521973     -0.650139      -2.83480       2.83480       231.049       233.884    
  25  0.336335      -1.08965      -4.75119       4.75119       225.392       230.143    
  26  0.642248     -0.442780      -1.93065       1.93065       229.027       230.957    
  27  0.984615     -0.155047E-01 -0.676051E-01  0.676051E-01   222.242       222.309    
  28  0.373782     -0.984082      -4.29089       4.29089       229.149       233.440    
  29  0.932479     -0.699087E-01 -0.304823      0.304823       221.175       221.480    
  30  0.711360     -0.340577      -1.48502       1.48502       230.079       231.564    
  31  0.315363      -1.15403      -5.03192       5.03192       231.389       236.421    
  32  0.528583     -0.637556      -2.77993       2.77993       231.270       234.050    
  33  0.622355E-01  -2.77683      -12.1078       12.1078       227.526       239.634    
  34  0.144849      -1.93206      -8.42436       8.42436       220.777       229.201    
  35  0.868928     -0.140495     -0.612598      0.612598       230.912       231.524    
  36  0.243398      -1.41306      -6.16135       6.16135       230.939       237.100    
  37  0.936928     -0.651491E-01 -0.284070      0.284070       230.407       230.691    
  38  0.979804E-01  -2.32299      -10.1289       10.1289       228.431       238.560    
  39  0.805773     -0.215953     -0.941617      0.941617       231.911       232.853    
  40  0.210751      -1.55708      -6.78933       6.78933       226.974       233.763    
  41  0.497104     -0.698956      -3.04766       3.04766       226.541       229.589    
  42  0.532106     -0.630913      -2.75097       2.75097       228.599       231.350    
  43  0.898420     -0.107117     -0.467063      0.467063       232.549       233.016    
  44  0.579370     -0.545814      -2.37991       2.37991       236.112       238.492    
  45  0.191213      -1.65437      -7.21352       7.21352       232.710       239.924    
  46  0.491633     -0.710023      -3.09591       3.09591       230.057       233.153    
  47  0.989123     -0.109370E-01 -0.476886E-01  0.476886E-01   228.957       229.004    
  48  0.576855     -0.550164      -2.39888       2.39888       225.238       227.637    
  49  0.133368      -2.01464      -8.78444       8.78444       229.354       238.138    
  50  0.708426     -0.344710      -1.50304       1.50304       239.319       240.822    
  51  0.183469      -1.69571      -7.39380       7.39380       226.984       234.377    
  52  0.951201     -0.500300E-01 -0.218146      0.218146       228.553       228.771    
loop,thermsimp(1:2)       43   5.27016       4.18269    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301        222.07          1.00          0.98         23.96          0.27          0.05         26.27
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    302        223.04          1.04          1.00         24.07          0.21          0.05         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    222.07        2.663     -1.512      5.226     -100.0      1.233    
                     -0.5239      2.773     -100.0      3.173     0.9336    
                       1.201     -1.079      1.841      0.000      0.000    
                      -1.851      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.021     -3.261     -5.981     -2.759    
                      -12.78     -3.035      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.7085E-01-0.2713E-01  0.000    -0.6902    
                     -0.3404    -0.1588    -0.1368    -0.1882    -0.8488E-02

                      -1.030    -0.6342      0.000    -0.1075    -0.6536E-01
                      0.8541E-01 0.1656E-01-0.9536E-01-0.8414E-01-0.1194    
                      0.9926E-01 0.3753E-01 0.6205     -1.607      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.161      9.103     -7039.     -4.000    
                     -0.6918E-01 0.9467E-01  8.994      8.527     -4904.    

                      -4.000    -0.4036    -0.5412      8.760      9.101    
                      -6912.     -4.000     0.6470E-02-0.8734      9.663    
                       8.791     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    222.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       43
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       44
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      301     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -5.44217       5.44217       221.175       226.617    
   2  0.260243      -1.34614      -5.86956       5.86956       222.242       228.111    
   3  0.646915     -0.435540      -1.89908       1.89908       224.312       226.211    
   4  0.572447     -0.557835      -2.43232       2.43232       225.238       227.671    
   5  0.105907      -2.24520      -9.78972       9.78972       227.112       236.901    
   6  0.693038     -0.366671      -1.59879       1.59879       224.231       225.830    
   7  0.329408      -1.11046      -4.84193       4.84193       223.674       228.516    
   8  0.187221      -1.67546      -7.30552       7.30552       223.818       231.124    
   9  0.545731     -0.605630      -2.64072       2.64072       223.131       225.772    
  10  0.752820     -0.283930      -1.23802       1.23802       222.694       223.932    
  11  0.153542      -1.87378      -8.17023       8.17023       227.269       235.439    
  12  0.400659     -0.914645      -3.98812       3.98812       228.015       232.003    
  13  0.306182      -1.18357      -5.16074       5.16074       228.553       233.713    
  14  0.270957E-01  -3.60838      -15.7336       15.7336       228.957       244.690    
  15  0.776765     -0.252618      -1.10149       1.10149       228.288       229.390    
  16  0.711945     -0.339755      -1.48143       1.48143       220.777       222.258    
  17  0.217190      -1.52698      -6.65810       6.65810       225.094       231.752    
  18  0.285226      -1.25447      -5.46988       5.46988       226.541       232.011    
  19  0.348904      -1.05296      -4.59121       4.59121       227.193       231.784    
  20  0.686414     -0.376275      -1.64067       1.64067       229.150       230.790    
  21  0.212825      -1.54729      -6.74663       6.74663       225.392       232.139    
  22  0.501697     -0.689760      -3.00756       3.00756       230.407       233.415    
  23  0.363771      -1.01123      -4.40927       4.40927       226.348       230.757    
  24  0.789273     -0.236642      -1.03183       1.03183       229.027       230.058    
  25  0.232884      -1.45721      -6.35388       6.35388       228.599       234.953    
  26  0.754896     -0.281175      -1.22601       1.22601       230.912       232.138    
  27  0.639358     -0.447290      -1.95032       1.95032       230.079       232.030    
  28  0.532505     -0.630163      -2.74770       2.74770       228.512       231.260    
  29  0.759813     -0.274683      -1.19770       1.19770       227.085       228.283    
  30  0.768360     -0.263497      -1.14893       1.14893       231.911       233.060    
  31  0.245116      -1.40602      -6.13067       6.13067       232.549       238.680    
  32  0.672517     -0.396727      -1.72985       1.72985       230.057       231.787    
  33  0.910675     -0.935691E-01 -0.407989      0.407989       229.149       229.557    
  34  0.441618     -0.817310      -3.56372       3.56372       226.974       230.538    
  35  0.212980      -1.54656      -6.74345       6.74345       227.625       234.369    
  36  0.471690     -0.751434      -3.27647       3.27647       229.951       233.228    
  37  0.968545     -0.319606E-01 -0.139358      0.139358       231.049       231.188    
  38  0.711169     -0.340845      -1.48618       1.48618       231.270       232.756    
  39  0.222170      -1.50431      -6.55926       6.55926       226.984       233.543    
  40  0.896100     -0.109703     -0.478339      0.478339       230.091       230.570    
  41  0.898054     -0.107525     -0.468841      0.468841       227.100       227.569    
  42  0.981364     -0.188122E-01 -0.820268E-01  0.820268E-01   231.389       231.471    
  43  0.238126      -1.43496      -6.25683       6.25683       228.831       235.088    
  44  0.884882     -0.122301     -0.533270      0.533270       230.939       231.472    
  45  0.206421      -1.57784      -6.87985       6.87985       225.904       232.784    
  46  0.421939     -0.862894      -3.76247       3.76247       229.354       233.116    
  47  0.334170E-01  -3.39869      -14.8193       14.8193       236.112       250.932    
  48  0.940374     -0.614772E-01 -0.268059      0.268059       228.431       228.699    
  49  0.119361      -2.12561      -9.26828       9.26828       227.526       236.794    
  50  0.493355     -0.706527      -3.08067       3.08067       232.710       235.791    
  51  0.239498      -1.42921      -6.23179       6.23179       239.319       245.551    
  52  0.779094     -0.249623      -1.08843       1.08843       222.075       223.163    
loop,thermsimp(1:2)       44   5.44217       5.86956    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303        229.13          1.18          1.01         23.77          0.36          0.05         26.37
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    229.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       44
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       45
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      302     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -6.92484       6.92484       220.777       227.702    
   2  0.455846E-01  -3.08818      -13.4654       13.4654       222.075       235.540    
   3  0.655807     -0.421889      -1.83956       1.83956       222.694       224.534    
   4  0.902989     -0.102045     -0.444947      0.444947       223.131       223.576    
   5  0.826012     -0.191146     -0.833451      0.833451       224.231       225.065    
   6  0.160871      -1.82715      -7.96693       7.96693       224.312       232.279    
   7  0.516410     -0.660854      -2.88152       2.88152       221.175       224.057    
   8  0.506939     -0.679364      -2.96223       2.96223       227.100       230.063    
   9  0.728359     -0.316962      -1.38205       1.38205       225.238       226.621    
  10  0.453162     -0.791506      -3.45120       3.45120       222.242       225.693    
  11  0.837994     -0.176745     -0.770659      0.770659       227.085       227.855    
  12  0.118024      -2.13686      -9.31736       9.31736       223.674       232.991    
  13  0.274030      -1.29452      -5.64449       5.64449       228.431       234.076    
  14  0.402227     -0.910738      -3.97109       3.97109       228.288       232.259    
  15  0.444245     -0.811380      -3.53786       3.53786       229.149       232.687    
  16  0.594880     -0.519396      -2.26472       2.26472       229.027       231.291    
  17  0.548806     -0.600010      -2.61622       2.61622       226.974       229.590    
  18  0.222827      -1.50136      -6.54637       6.54637       230.091       236.638    
  19  0.152541      -1.88032      -8.19875       8.19875       226.348       234.547    
  20  0.816533     -0.202688     -0.883778      0.883778       229.150       230.033    
  21  0.525417     -0.643564      -2.80613       2.80613       223.818       226.625    
  22  0.661450     -0.413320      -1.80220       1.80220       231.049       232.851    
  23  0.437535     -0.826598      -3.60421       3.60421       228.512       232.116    
  24  0.464442     -0.766918      -3.34399       3.34399       231.389       234.733    
  25  0.683975     -0.379834      -1.65619       1.65619       230.939       232.595    
  26  0.407919     -0.896688      -3.90982       3.90982       225.094       229.004    
  27  0.934669     -0.675632E-01 -0.294595      0.294595       227.193       227.488    
  28  0.866891     -0.142842     -0.622832      0.622832       230.057       230.680    
  29  0.145435E-01  -4.23061      -18.4467       18.4467       228.015       246.462    
  30  0.514599     -0.664368      -2.89684       2.89684       226.541       229.438    
  31  0.370591     -0.992656      -4.32828       4.32828       230.079       234.407    
  32  0.251726      -1.37941      -6.01465       6.01465       230.912       236.926    
  33  0.959470     -0.413742E-01 -0.180404      0.180404       225.392       225.572    
  34  0.344885E-01  -3.36713      -14.6817       14.6817       231.270       245.952    
  35  0.348690      -1.05357      -4.59389       4.59389       225.904       230.498    
  36  0.610898     -0.492826      -2.14887       2.14887       231.911       234.060    
  37  0.440567     -0.819693      -3.57411       3.57411       229.354       232.928    
  38  0.340409      -1.07761      -4.69869       4.69869       229.951       234.650    
  39  0.345015E-01  -3.36675      -14.6800       14.6800       230.407       245.087    
  40  0.667224     -0.404630      -1.76431       1.76431       226.984       228.748    
  41  0.138336      -1.97807      -8.62499       8.62499       228.553       237.178    
  42  0.412023     -0.886676      -3.86617       3.86617       227.625       231.491    
  43  0.578410     -0.547473      -2.38714       2.38714       228.599       230.986    
  44  0.972817     -0.275594E-01 -0.120167      0.120167       228.831       228.951    
  45  0.152341      -1.88163      -8.20448       8.20448       227.269       235.473    
  46  0.764264     -0.268842      -1.17223       1.17223       232.710       233.882    
  47  0.898082E-01  -2.41008      -10.5087       10.5087       227.526       238.035    
  48  0.205097      -1.58427      -6.90789       6.90789       227.112       234.019    
  49  0.249611E-01  -3.69044      -16.0914       16.0914       232.549       248.641    
  50  0.999211     -0.789000E-03 -0.344027E-02  0.344027E-02   228.957       228.960    
  51  0.622898E-01  -2.77596      -12.1040       12.1040       239.319       251.423    
  52  0.588779     -0.529705      -2.30967       2.30967       229.130       231.439    
loop,thermsimp(1:2)       45   6.92484       13.4654    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304        219.94          0.99          1.00         23.83          0.41          0.07         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    305        282.33          1.05          1.00         23.89          0.23          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    219.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       45
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       46
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      304     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -1.00294       1.00294       223.131       224.134    
   2  0.338444      -1.08340      -4.72393       4.72393       221.175       225.899    
   3  0.563800     -0.573055      -2.49869       2.49869       222.694       225.193    
   4  0.295284      -1.21982      -5.31876       5.31876       224.231       229.550    
   5  0.506481     -0.680269      -2.96617       2.96617       225.392       228.358    
   6  0.345803      -1.06189      -4.63014       4.63014       222.242       226.872    
   7  0.741641     -0.298890      -1.30325       1.30325       225.238       226.542    
   8  0.182310      -1.70204      -7.42142       7.42142       223.818       231.240    
   9  0.315187      -1.15459      -5.03435       5.03435       227.193       232.227    
  10  0.598844     -0.512755      -2.23576       2.23576       220.777       223.013    
  11  0.659119     -0.416852      -1.81760       1.81760       227.085       228.902    
  12  0.247481      -1.39642      -6.08882       6.08882       226.984       233.072    
  13  0.255298      -1.36532      -5.95321       5.95321       228.831       234.784    
  14  0.876488     -0.131833     -0.574829      0.574829       228.957       229.532    
  15  0.358010      -1.02719      -4.47887       4.47887       225.094       229.573    
  16  0.317480      -1.14734      -5.00275       5.00275       226.541       231.544    
  17  0.153422      -1.87456      -8.17365       8.17365       226.974       235.148    
  18  0.296162      -1.21685      -5.30582       5.30582       229.150       234.455    
  19  0.629760     -0.462417      -2.01627       2.01627       227.100       229.117    
  20  0.458345E-01  -3.08272      -13.4416       13.4416       225.904       239.345    
  21  0.209534      -1.56287      -6.81456       6.81456       230.057       236.871    
  22  0.490210E-01  -3.01551      -13.1485       13.1485       228.599       241.748    
  23  0.144817      -1.93229      -8.42534       8.42534       229.027       237.452    
  24  0.764061     -0.269107      -1.17339       1.17339       229.130       230.303    
  25  0.158664      -1.84097      -8.02717       8.02717       227.625       235.652    
  26  0.242818      -1.41544      -6.17175       6.17175       228.512       234.684    
  27  0.779950     -0.248525      -1.08364       1.08364       228.288       229.372    
  28  0.763580     -0.269737      -1.17613       1.17613       224.312       225.488    
  29  0.817639     -0.201335     -0.877878      0.877878       230.939       231.816    
  30  0.656802     -0.420373      -1.83295       1.83295       229.149       230.982    
  31  0.202192      -1.59854      -6.97010       6.97010       231.049       238.019    
  32  0.469647     -0.755773      -3.29540       3.29540       229.354       232.649    
  33  0.107456      -2.23067      -9.72638       9.72638       223.674       233.400    
  34  0.709118     -0.343734      -1.49878       1.49878       232.710       234.209    
  35  0.988480     -0.115868E-01 -0.505221E-01  0.505221E-01   227.112       227.162    
  36  0.645173     -0.438236      -1.91084       1.91084       231.911       233.822    
  37  0.583143     -0.539322      -2.35161       2.35161       228.431       230.783    
  38  0.276552E-01  -3.58794      -15.6445       15.6445       230.079       245.724    
  39  0.560517     -0.578896      -2.52416       2.52416       226.348       228.872    
  40  0.292779      -1.22834      -5.35591       5.35591       229.951       235.307    
  41  0.486207     -0.721121      -3.14430       3.14430       231.389       234.534    
  42  0.379142E-01  -3.27243      -14.2688       14.2688       227.269       241.537    
  43  0.459895     -0.776757      -3.38689       3.38689       222.075       225.462    
  44  0.810771     -0.209769     -0.914656      0.914656       230.091       231.006    
  45  0.189138      -1.66528      -7.26110       7.26110       230.912       238.173    
  46  0.509870     -0.673599      -2.93709       2.93709       228.553       231.490    
  47  0.468020E-01  -3.06183      -13.3505       13.3505       227.526       240.877    
  48  0.568404     -0.564922      -2.46323       2.46323       230.407       232.870    
  49  0.891250     -0.115130     -0.502003      0.502003       231.270       231.772    
  50  0.415261     -0.878849      -3.83204       3.83204       228.015       231.847    
  51  0.714019     -0.336846      -1.46875       1.46875       232.549       234.018    
  52  0.606207     -0.500534      -2.18247       2.18247       219.936       222.118    
loop,thermsimp(1:2)       46   1.00294       4.72393    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306        232.29          1.06          1.00         23.87          0.25          0.05         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    232.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       46
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       47
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      305     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -1.86152       1.86152       219.936       221.797    
   2  0.474910     -0.744630      -3.24681       3.24681       220.777       224.024    
   3  0.125725      -2.07366      -9.04177       9.04177       223.131       232.173    
   4  0.950967     -0.502756E-01 -0.219216      0.219216       222.694       222.913    
   5  0.562475     -0.575409      -2.50895       2.50895       222.075       224.584    
   6  0.728528     -0.316729      -1.38103       1.38103       224.312       225.693    
   7  0.326058      -1.12068      -4.88650       4.88650       221.175       226.062    
   8  0.460979     -0.774402      -3.37662       3.37662       225.238       228.615    
   9  0.186861      -1.67739      -7.31393       7.31393       222.242       229.556    
  10  0.737773     -0.304119      -1.32605       1.32605       227.112       228.438    
  11  0.254524      -1.36836      -5.96646       5.96646       225.392       231.358    
  12  0.475390     -0.743621      -3.24241       3.24241       226.348       229.591    
  13  0.783107     -0.244486      -1.06603       1.06603       227.085       228.151    
  14  0.615536     -0.485261      -2.11588       2.11588       227.100       229.216    
  15  0.600710E-01  -2.81223      -12.2621       12.2621       228.288       240.550    
  16  0.834417     -0.181022     -0.789311      0.789311       228.957       229.746    
  17  0.270355      -1.30802      -5.70336       5.70336       224.231       229.935    
  18  0.408387     -0.895540      -3.90482       3.90482       225.094       228.999    
  19  0.248286      -1.39318      -6.07466       6.07466       229.130       235.204    
  20  0.586808E-01  -2.83564      -12.3642       12.3642       228.431       240.796    
  21  0.747050     -0.291623      -1.27156       1.27156       229.149       230.421    
  22  0.261869E-01  -3.64250      -15.8824       15.8824       230.091       245.974    
  23  0.495813     -0.701557      -3.05900       3.05900       223.818       226.877    
  24  0.600032     -0.510772      -2.22712       2.22712       228.553       230.780    
  25  0.936456     -0.656531E-01 -0.286267      0.286267       226.541       226.827    
  26  0.583260     -0.539121      -2.35073       2.35073       231.270       233.621    
  27  0.994266     -0.575021E-02 -0.250726E-01  0.250726E-01   230.939       230.964    
  28  0.149755      -1.89876      -8.27914       8.27914       228.015       236.294    
  29  0.751239     -0.286032      -1.24718       1.24718       227.193       228.440    
  30  0.703931     -0.351075      -1.53079       1.53079       229.354       230.884    
  31  0.998476     -0.152564E-02 -0.665224E-02  0.665224E-02   230.407       230.414    
  32  0.501495     -0.690161      -3.00931       3.00931       226.984       229.993    
  33  0.446468     -0.806387      -3.51608       3.51608       223.674       227.190    
  34  0.321376      -1.13514      -4.94957       4.94957       231.911       236.860    
  35  0.850901     -0.161459     -0.704011      0.704011       232.549       233.253    
  36  0.975881     -0.244142E-01 -0.106453      0.106453       232.710       232.816    
  37  0.386316     -0.951100      -4.14708       4.14708       229.150       233.297    
  38  0.782734     -0.244962      -1.06811       1.06811       231.389       232.457    
  39  0.142678      -1.94716      -8.49021       8.49021       228.512       237.002    
  40  0.509914     -0.673514      -2.93672       2.93672       228.831       231.768    
  41  0.211111      -1.55537      -6.78188       6.78188       226.974       233.756    
  42  0.212538      -1.54864      -6.75251       6.75251       229.951       236.704    
  43  0.889982     -0.116555     -0.508212      0.508212       227.625       228.133    
  44  0.769070     -0.262573      -1.14490       1.14490       230.057       231.202    
  45  0.792434     -0.232646      -1.01441       1.01441       229.027       230.041    
  46  0.250220E-01  -3.68800      -16.0808       16.0808       231.049       247.130    
  47  0.190304      -1.65913      -7.23431       7.23431       230.912       238.146    
  48  0.579595     -0.545425      -2.37822       2.37822       225.904       228.282    
  49  0.373376     -0.985170      -4.29563       4.29563       227.526       231.822    
  50  0.933620E-01  -2.37127      -10.3394       10.3394       227.269       237.608    
  51  0.628243     -0.464828      -2.02679       2.02679       228.599       230.626    
  52  0.737857     -0.304005      -1.32555       1.32555       232.287       233.613    
loop,thermsimp(1:2)       47   1.86152       3.24681    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307        222.79          1.02          0.98         23.98          0.31          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    308        230.78          1.02          0.99         24.08          0.14          0.05         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    222.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       47
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       48
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      307     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -5.02294       5.02294       219.936       224.959    
   2  0.452730     -0.792459      -3.45536       3.45536       222.694       226.150    
   3  0.463916     -0.768051      -3.34893       3.34893       220.777       224.126    
   4  0.531172E-01  -2.93526      -12.7986       12.7986       222.075       234.874    
   5  0.933113     -0.692290E-01 -0.301859      0.301859       224.312       224.614    
   6  0.107612      -2.22922      -9.72007       9.72007       221.175       230.895    
   7  0.228017      -1.47833      -6.44597       6.44597       226.541       232.987    
   8  0.766526     -0.265887      -1.15935       1.15935       223.818       224.978    
   9  0.676418     -0.390944      -1.70463       1.70463       223.674       225.378    
  10  0.220696      -1.51097      -6.58827       6.58827       227.625       234.213    
  11  0.959946E-01  -2.34346      -10.2182       10.2182       227.085       237.303    
  12  0.570655     -0.560971      -2.44600       2.44600       225.904       228.350    
  13  0.736426     -0.305947      -1.33402       1.33402       227.112       228.446    
  14  0.966377     -0.342013E-01 -0.149128      0.149128       227.193       227.342    
  15  0.797662     -0.226070     -0.985733      0.985733       225.238       226.224    
  16  0.413688     -0.882643      -3.84859       3.84859       225.094       228.943    
  17  0.200670      -1.60609      -7.00304       7.00304       227.100       234.103    
  18  0.843958E-01  -2.47224      -10.7797       10.7797       222.242       233.022    
  19  0.375580     -0.979284      -4.26997       4.26997       226.348       230.618    
  20  0.968669     -0.318322E-01 -0.138798      0.138798       228.957       229.096    
  21  0.379263     -0.969525      -4.22742       4.22742       224.231       228.459    
  22  0.421746     -0.863352      -3.76447       3.76447       226.984       230.748    
  23  0.639909     -0.446429      -1.94656       1.94656       229.027       230.973    
  24  0.549878     -0.598059      -2.60772       2.60772       230.407       233.015    
  25  0.226469      -1.48515      -6.47568       6.47568       229.149       235.625    
  26  0.547044E-02  -5.20840      -22.7102       22.7102       228.599       251.309    
  27  0.372808     -0.986692      -4.30227       4.30227       228.553       232.855    
  28  0.406819E-01  -3.20197      -13.9615       13.9615       229.354       243.315    
  29  0.664564     -0.408624      -1.78172       1.78172       230.939       232.720    
  30  0.708700     -0.344323      -1.50135       1.50135       230.057       231.558    
  31  0.863329     -0.146959     -0.640784      0.640784       225.392       226.033    
  32  0.406109     -0.901134      -3.92921       3.92921       228.831       232.760    
  33  0.101947      -2.28330      -9.95587       9.95587       227.526       237.482    
  34  0.660574     -0.414646      -1.80798       1.80798       223.131       224.939    
  35  0.839002     -0.175542     -0.765417      0.765417       231.389       232.155    
  36  0.735312E-01  -2.61005      -11.3806       11.3806       232.710       244.091    
  37  0.559917     -0.579967      -2.52883       2.52883       232.549       235.078    
  38  0.922004     -0.812055E-01 -0.354080      0.354080       229.150       229.504    
  39  0.891471     -0.114882     -0.500921      0.500921       232.287       232.788    
  40  0.489346     -0.714686      -3.11625       3.11625       231.270       234.386    
  41  0.583196     -0.539231      -2.35121       2.35121       226.974       229.325    
  42  0.989235     -0.108230E-01 -0.471917E-01  0.471917E-01   229.130       229.177    
  43  0.844741     -0.168725     -0.735693      0.735693       228.015       228.751    
  44  0.734982     -0.307909      -1.34257       1.34257       229.951       231.294    
  45  0.913246     -0.907495E-01 -0.395695      0.395695       231.911       232.307    
  46  0.605096     -0.502369      -2.19048       2.19048       228.512       230.703    
  47  0.623739     -0.472024      -2.05816       2.05816       227.269       229.327    
  48  0.780990     -0.247193      -1.07784       1.07784       230.912       231.989    
  49  0.615662E-01  -2.78764      -12.1550       12.1550       228.288       240.443    
  50  0.646443E-02  -5.04144      -21.9822       21.9822       228.431       250.413    
  51  0.848055     -0.164809     -0.718618      0.718618       230.091       230.810    
  52  0.740886     -0.299909      -1.30769       1.30769       222.789       224.096    
loop,thermsimp(1:2)       48   5.02294       3.45536    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309        224.36          1.02          0.98         23.82          0.49          0.06         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    310        238.07          1.03          0.99         24.11          0.11          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    224.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.36030               307
loop is:       48
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.36030               307
loop is:       49
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    2.18015               358

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      309     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.185338E-01  0.185338E-01   222.789       222.807    
   2  0.120199      -2.11861      -4.61887       4.61887       220.777       225.396    
   3  0.825835     -0.191360     -0.417193      0.417193       224.312       224.729    
   4  0.769690     -0.261767     -0.570691      0.570691       223.131       223.702    
   5  0.206534      -1.57729      -3.43873       3.43873       219.936       223.375    
   6  0.435455     -0.831363      -1.81249       1.81249       223.818       225.631    
   7  0.408718     -0.894731      -1.95065       1.95065       223.674       225.624    
   8  0.504170E-01  -2.98743      -6.51303       6.51303       225.392       231.905    
   9  0.943874     -0.577631E-01 -0.125932      0.125932       222.694       222.820    
  10  0.161493      -1.82330      -3.97506       3.97506       225.238       229.214    
  11  0.248560      -1.39207      -3.03492       3.03492       227.193       230.228    
  12  0.952734     -0.484195E-01 -0.105562      0.105562       225.904       226.009    
  13  0.349224      -1.05204      -2.29361       2.29361       227.112       229.405    
  14  0.245013      -1.40644      -3.06625       3.06625       224.231       227.298    
  15  0.713805     -0.337146     -0.735027      0.735027       228.015       228.750    
  16  0.206995      -1.57506      -3.43387       3.43387       225.094       228.528    
  17  0.573984     -0.555154      -1.21032       1.21032       228.957       230.167    
  18  0.791297     -0.234082     -0.510334      0.510334       229.130       229.640    
  19  0.599323     -0.511955      -1.11614       1.11614       226.974       228.090    
  20  0.632893     -0.457454     -0.997318      0.997318       227.269       228.266    
  21  0.920472     -0.828688E-01 -0.180666      0.180666       229.150       229.330    
  22  0.650695     -0.429713     -0.936839      0.936839       226.348       227.285    
  23  0.759327     -0.275322     -0.600243      0.600243       228.512       229.112    
  24  0.547563     -0.602278      -1.31305       1.31305       226.984       228.297    
  25  0.375945     -0.978312      -2.13287       2.13287       230.091       232.224    
  26  0.436593     -0.828753      -1.80681       1.80681       221.175       222.982    
  27  0.226348      -1.48568      -3.23900       3.23900       229.027       232.266    
  28  0.889061     -0.117589     -0.256362      0.256362       229.951       230.208    
  29  0.294563      -1.22226      -2.66471       2.66471       230.057       232.721    
  30  0.760606     -0.273640     -0.596576      0.596576       230.912       231.508    
  31  0.131934      -2.02545      -4.41578       4.41578       231.389       235.805    
  32  0.150887      -1.89123      -4.12316       4.12316       231.911       236.034    
  33  0.108814      -2.21811      -4.83581       4.83581       230.939       235.774    
  34  0.392982     -0.933991      -2.03624       2.03624       228.831       230.867    
  35  0.524209     -0.645865      -1.40808       1.40808       232.287       233.696    
  36  0.779329     -0.249322     -0.543559      0.543559       228.553       229.096    
  37  0.684136     -0.379599     -0.827582      0.827582       226.541       227.369    
  38  0.898629     -0.106885     -0.233026      0.233026       230.407       230.640    
  39  0.885947E-01  -2.42368      -5.28399       5.28399       222.242       227.526    
  40  0.865042     -0.144977     -0.316072      0.316072       227.100       227.416    
  41  0.953799     -0.473027E-01 -0.103127      0.103127       227.625       227.728    
  42  0.264945      -1.32823      -2.89575       2.89575       231.270       234.166    
  43  0.931660     -0.707875E-01 -0.154327      0.154327       222.075       222.229    
  44  0.273150      -1.29773      -2.82925       2.82925       232.549       235.378    
  45  0.773196     -0.257223     -0.560784      0.560784       229.149       229.710    
  46  0.936342     -0.657743E-01 -0.143398      0.143398       227.085       227.228    
  47  0.367272      -1.00165      -2.18375       2.18375       227.526       229.710    
  48  0.970907     -0.295243E-01 -0.643673E-01  0.643673E-01   228.288       228.352    
  49  0.722669     -0.324804     -0.708122      0.708122       229.354       230.062    
  50  0.247966      -1.39446      -3.04014       3.04014       232.710       235.750    
  51  0.730821     -0.313587     -0.683665      0.683665       228.431       229.115    
  52  0.379134     -0.969864      -2.11445       2.11445       224.359       226.473    
loop,thermsimp(1:2)       49  0.185338E-01   4.61887    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311        226.73          1.00          0.99         23.91          0.34          0.06         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    226.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       49
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       50
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      310     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -10.2238       10.2238       222.075       232.299    
   2  0.902150     -0.102974     -0.224499      0.224499       222.789       223.013    
   3  0.375868     -0.978517      -2.13331       2.13331       222.694       224.828    
   4  0.136549E-01  -4.29366      -9.36081       9.36081       221.175       230.536    
   5  0.948329     -0.530533E-01 -0.115664      0.115664       219.936       220.051    
   6  0.489379E-01  -3.01720      -6.57795       6.57795       223.131       229.709    
   7  0.319400      -1.14131      -2.48823       2.48823       224.312       226.800    
   8  0.748008     -0.290342     -0.632988      0.632988       220.777       221.410    
   9  0.468015     -0.759255      -1.65529       1.65529       223.674       225.329    
  10  0.467420     -0.760527      -1.65806       1.65806       223.818       225.476    
  11  0.345085      -1.06396      -2.31960       2.31960       225.904       228.223    
  12  0.598981     -0.512526      -1.11738       1.11738       224.359       225.476    
  13  0.231496      -1.46319      -3.18997       3.18997       227.085       230.275    
  14  0.685496     -0.377613     -0.823252      0.823252       226.348       227.171    
  15  0.225803      -1.48809      -3.24426       3.24426       224.231       227.476    
  16  0.744991E-01  -2.59697      -5.66178       5.66178       226.541       232.203    
  17  0.436777     -0.828332      -1.80589       1.80589       227.100       228.906    
  18  0.241074      -1.42265      -3.10159       3.10159       222.242       225.343    
  19  0.728071     -0.317357     -0.691886      0.691886       227.625       228.317    
  20  0.228500      -1.47622      -3.21838       3.21838       226.974       230.192    
  21  0.423678     -0.858781      -1.87227       1.87227       227.269       229.141    
  22  0.812855     -0.207202     -0.451731      0.451731       226.984       227.435    
  23  0.810546     -0.210047     -0.457934      0.457934       228.288       228.746    
  24  0.113500      -2.17595      -4.74389       4.74389       225.094       229.838    
  25  0.197385      -1.62260      -3.53751       3.53751       228.015       231.552    
  26  0.101018      -2.29246      -4.99790       4.99790       228.553       233.551    
  27  0.857009E-01  -2.45689      -5.35639       5.35639       228.512       233.869    
  28  0.693668     -0.365762     -0.797415      0.797415       228.431       229.229    
  29  0.705918     -0.348256     -0.759250      0.759250       225.238       225.998    
  30  0.309793      -1.17185      -2.55481       2.55481       229.150       231.704    
  31  0.144843      -1.93210      -4.21227       4.21227       227.112       231.324    
  32  0.412916     -0.884511      -1.92837       1.92837       229.130       231.058    
  33  0.916661     -0.870180E-01 -0.189712      0.189712       227.526       227.716    
  34  0.933384E-01  -2.37152      -5.17027       5.17027       229.149       234.320    
  35  0.937330     -0.647200E-01 -0.141099      0.141099       229.354       229.495    
  36  0.958012     -0.428952E-01 -0.935179E-01  0.935179E-01   228.957       229.050    
  37  0.692877E-01  -2.66949      -5.81988       5.81988       229.951       235.771    
  38  0.228520E-01  -3.77872      -8.23817       8.23817       227.193       235.431    
  39  0.188135      -1.67060      -3.64215       3.64215       230.407       234.049    
  40  0.122595E-01  -4.40146      -9.59583       9.59583       228.831       238.427    
  41  0.776693     -0.252710     -0.550946      0.550946       230.912       231.463    
  42  0.571957     -0.558691      -1.21803       1.21803       225.392       226.610    
  43  0.313016      -1.16150      -2.53224       2.53224       230.091       232.624    
  44  0.512360     -0.668728      -1.45793       1.45793       229.027       230.485    
  45  0.874954     -0.133584     -0.291233      0.291233       230.057       230.348    
  46  0.617920     -0.481397      -1.04952       1.04952       232.287       233.337    
  47  0.529196     -0.636396      -1.38744       1.38744       231.270       232.658    
  48  0.389261E-02  -5.54867      -12.0969       12.0969       232.549       244.646    
  49  0.323386E-01  -3.43149      -7.48117       7.48117       232.710       240.191    
  50  0.900641     -0.104648     -0.228149      0.228149       230.939       231.167    
  51  0.872638     -0.136235     -0.297012      0.297012       231.389       231.686    
  52  0.965349     -0.352660E-01 -0.768851E-01  0.768851E-01   226.726       226.803    
loop,thermsimp(1:2)       50   10.2238      0.224499    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312        220.28          1.21          1.01         24.06          0.07          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    313        227.88          0.99          0.99         23.98          0.22          0.05         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    220.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       50
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       51
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      312     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577     -0.221452      0.221452       219.936       220.157    
   2  0.808902     -0.212077     -0.462360      0.462360       220.777       221.239    
   3  0.762147     -0.271616     -0.592163      0.592163       222.789       223.381    
   4  0.287851      -1.24531      -2.71496       2.71496       222.694       225.409    
   5  0.212418      -1.54920      -3.37749       3.37749       223.674       227.051    
   6  0.380717     -0.965699      -2.10537       2.10537       222.242       224.347    
   7  0.877795     -0.130342     -0.284165      0.284165       224.359       224.643    
   8  0.836834     -0.178130     -0.388349      0.388349       223.818       224.207    
   9  0.435183     -0.831988      -1.81386       1.81386       225.238       227.052    
  10  0.900166     -0.105177     -0.229301      0.229301       225.392       225.621    
  11  0.175095      -1.74242      -3.79874       3.79874       224.312       228.111    
  12  0.322232      -1.13248      -2.46898       2.46898       226.726       229.195    
  13  0.706662     -0.347203     -0.756955      0.756955       226.348       227.105    
  14  0.494297     -0.704618      -1.53617       1.53617       226.984       228.520    
  15  0.324383      -1.12583      -2.45448       2.45448       224.231       226.686    
  16  0.777122     -0.252157     -0.549740      0.549740       227.526       228.076    
  17  0.499054E-01  -2.99763      -6.53527       6.53527       225.904       232.439    
  18  0.489193E-01  -3.01758      -6.57878       6.57878       227.625       234.204    
  19  0.480140     -0.733678      -1.59953       1.59953       228.288       229.888    
  20  0.914126     -0.897865E-01 -0.195748      0.195748       227.100       227.296    
  21  0.613008     -0.489378      -1.06692       1.06692       228.957       230.024    
  22  0.470573     -0.753804      -1.64340       1.64340       227.269       228.912    
  23  0.614279     -0.487307      -1.06240       1.06240       228.431       229.494    
  24  0.410529     -0.890308      -1.94100       1.94100       229.354       231.295    
  25  0.582759     -0.539981      -1.17724       1.17724       223.131       224.309    
  26  0.422753E-01  -3.16355      -6.89701       6.89701       225.094       231.991    
  27  0.717044     -0.332618     -0.725157      0.725157       226.974       227.699    
  28  0.420765     -0.865682      -1.88731       1.88731       227.085       228.972    
  29  0.801392     -0.221405     -0.482695      0.482695       230.057       230.539    
  30  0.426188     -0.852875      -1.85939       1.85939       229.027       230.886    
  31  0.338881      -1.08211      -2.35916       2.35916       221.175       223.534    
  32  0.398160     -0.920902      -2.00770       2.00770       229.130       231.137    
  33  0.938837     -0.631132E-01 -0.137596      0.137596       230.939       231.076    
  34  0.411860E-01  -3.18966      -6.95393       6.95393       227.112       234.065    
  35  0.180703      -1.71090      -3.73002       3.73002       230.912       234.642    
  36  0.617012     -0.482867      -1.05272       1.05272       228.015       229.068    
  37  0.788612     -0.237480     -0.517742      0.517742       231.389       231.907    
  38  0.381719     -0.963071      -2.09964       2.09964       229.150       231.249    
  39  0.376038     -0.978064      -2.13233       2.13233       226.541       228.673    
  40  0.105996      -2.24435      -4.89303       4.89303       222.075       226.968    
  41  0.769932E-01  -2.56404      -5.58998       5.58998       230.091       235.681    
  42  0.365987      -1.00516      -2.19139       2.19139       231.270       233.462    
  43  0.731763     -0.312298     -0.680856      0.680856       232.287       232.968    
  44  0.447137     -0.804891      -1.75478       1.75478       228.553       230.308    
  45  0.273519      -1.29638      -2.82631       2.82631       228.512       231.338    
  46  0.870614     -0.138556     -0.302073      0.302073       230.407       230.709    
  47  0.822463     -0.195452     -0.426114      0.426114       229.149       229.575    
  48  0.456061     -0.785129      -1.71170       1.71170       227.193       228.905    
  49  0.603947     -0.504269      -1.09938       1.09938       229.951       231.051    
  50  0.342037      -1.07284      -2.33894       2.33894       228.831       231.170    
  51  0.693527     -0.365965     -0.797859      0.797859       232.710       233.508    
  52  0.958323     -0.425703E-01 -0.928096E-01  0.928096E-01   220.276       220.369    
loop,thermsimp(1:2)       51  0.221452      0.462360    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314        225.62          1.02          0.99         23.76          0.43          0.06         26.25
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    225.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       51
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       52
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      313     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -1.88562       1.88562       219.936       221.821    
   2  0.315135      -1.15476      -2.51754       2.51754       220.276       222.794    
   3  0.696708     -0.361389     -0.787882      0.787882       220.777       221.565    
   4  0.922116     -0.810842E-01 -0.176776      0.176776       222.789       222.965    
   5  0.908133     -0.963648E-01 -0.210090      0.210090       221.175       221.385    
   6  0.174132      -1.74794      -3.81077       3.81077       223.818       227.629    
   7  0.490629     -0.712068      -1.55241       1.55241       223.131       224.684    
   8  0.382604     -0.960755      -2.09459       2.09459       222.242       224.336    
   9  0.985159     -0.149527E-01 -0.325991E-01  0.325991E-01   224.359       224.391    
  10  0.182634      -1.70027      -3.70684       3.70684       222.694       226.401    
  11  0.554568     -0.589565      -1.28534       1.28534       225.392       226.677    
  12  0.999791     -0.209153E-03 -0.455984E-03  0.455984E-03   224.231       224.232    
  13  0.284621      -1.25660      -2.73957       2.73957       222.075       224.814    
  14  0.920706E-01  -2.38520      -5.20009       5.20009       223.674       228.874    
  15  0.243911      -1.41095      -3.07609       3.07609       225.238       228.315    
  16  0.866829     -0.142914     -0.311573      0.311573       226.348       226.660    
  17  0.640039     -0.446225     -0.972838      0.972838       227.100       228.073    
  18  0.737488E-01  -2.60709      -5.68385       5.68385       226.974       232.658    
  19  0.511916     -0.669594      -1.45981       1.45981       227.526       228.986    
  20  0.870220     -0.139009     -0.303061      0.303061       224.312       224.615    
  21  0.594690     -0.519714      -1.13305       1.13305       226.984       228.117    
  22  0.659508     -0.416262     -0.907513      0.907513       226.541       227.448    
  23  0.702023     -0.353789     -0.771314      0.771314       227.193       227.964    
  24  0.178121      -1.72529      -3.76139       3.76139       227.269       231.030    
  25  0.622271     -0.474379      -1.03422       1.03422       227.085       228.119    
  26  0.877027     -0.131217     -0.286073      0.286073       228.015       228.301    
  27  0.206753      -1.57623      -3.43642       3.43642       226.726       230.162    
  28  0.927381     -0.753912E-01 -0.164364      0.164364       228.431       228.596    
  29  0.610274     -0.493848      -1.07666       1.07666       229.149       230.226    
  30  0.453676     -0.790373      -1.72313       1.72313       228.288       230.011    
  31  0.203335      -1.59290      -3.47276       3.47276       228.957       232.430    
  32  0.558786     -0.581989      -1.26882       1.26882       228.553       229.822    
  33  0.685013     -0.378317     -0.824787      0.824787       230.057       230.881    
  34  0.753574     -0.282929     -0.616827      0.616827       230.407       231.024    
  35  0.736990E-01  -2.60777      -5.68532       5.68532       229.027       234.712    
  36  0.719848     -0.328716     -0.716649      0.716649       229.951       230.668    
  37  0.177345E-01  -4.03224      -8.79089       8.79089       230.939       239.729    
  38  0.277334E-01  -3.58512      -7.81609       7.81609       229.130       236.946    
  39  0.228604      -1.47576      -3.21738       3.21738       228.831       232.049    
  40  0.874609     -0.133979     -0.292093      0.292093       229.150       229.442    
  41  0.875699     -0.132733     -0.289378      0.289378       229.354       229.643    
  42  0.540874     -0.614569      -1.33985       1.33985       228.512       229.852    
  43  0.343108E-01  -3.37230      -7.35211       7.35211       231.389       238.741    
  44  0.982551     -0.176027E-01 -0.383766E-01  0.383766E-01   225.094       225.132    
  45  0.201823      -1.60037      -3.48904       3.48904       225.904       229.393    
  46  0.116838      -2.14697      -4.68071       4.68071       232.287       236.968    
  47  0.520586     -0.652800      -1.42320       1.42320       231.270       232.693    
  48  0.515528     -0.662563      -1.44449       1.44449       232.710       234.155    
  49  0.814407     -0.205295     -0.447573      0.447573       227.112       227.559    
  50  0.436930     -0.827981      -1.80512       1.80512       227.625       229.430    
  51  0.802441     -0.220097     -0.479843      0.479843       230.912       231.391    
  52  0.366662      -1.00331      -2.18737       2.18737       225.620       227.808    
loop,thermsimp(1:2)       52   1.88562       2.51754    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315        230.74          1.29          1.04         23.98          0.12          0.06         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       52
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       53
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      314     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -7.36640       7.36640       221.175       228.541    
   2  0.714674     -0.335928     -0.732373      0.732373       220.777       221.509    
   3  0.977792     -0.224587E-01 -0.489633E-01  0.489633E-01   219.936       219.985    
   4  0.771231     -0.259767     -0.566331      0.566331       220.276       220.843    
   5  0.265148      -1.32747      -2.89408       2.89408       222.789       225.683    
   6  0.559491     -0.580728      -1.26607       1.26607       224.231       225.497    
   7  0.934824E-01  -2.36998      -5.16691       5.16691       222.242       227.409    
   8  0.928182     -0.745278E-01 -0.162482      0.162482       224.359       224.521    
   9  0.464905     -0.765922      -1.66982       1.66982       224.312       225.982    
  10  0.871919     -0.137059     -0.298808      0.298808       223.131       223.430    
  11  0.982233     -0.179265E-01 -0.390824E-01  0.390824E-01   222.075       222.114    
  12  0.426376     -0.852433      -1.85843       1.85843       225.094       226.953    
  13  0.471128E-01  -3.05521      -6.66081       6.66081       222.694       229.355    
  14  0.686439     -0.376238     -0.820256      0.820256       226.348       227.168    
  15  0.117826      -2.13855      -4.66235       4.66235       225.392       230.054    
  16  0.756878E-01  -2.58114      -5.62727       5.62727       226.541       232.168    
  17  0.196211      -1.62856      -3.55051       3.55051       227.112       230.662    
  18  0.431930     -0.839491      -1.83021       1.83021       223.818       225.649    
  19  0.707794     -0.345602     -0.753465      0.753465       225.620       226.374    
  20  0.174358E-01  -4.04923      -8.82793       8.82793       227.193       236.021    
  21  0.267976      -1.31686      -2.87094       2.87094       227.100       229.971    
  22  0.793866     -0.230841     -0.503267      0.503267       226.984       227.487    
  23  0.135848      -1.99622      -4.35206       4.35206       227.085       231.437    
  24  0.663958     -0.409536     -0.892849      0.892849       228.015       228.908    
  25  0.281101      -1.26904      -2.76670       2.76670       225.238       228.005    
  26  0.606466     -0.500106      -1.09031       1.09031       228.431       229.522    
  27  0.940056     -0.618158E-01 -0.134768      0.134768       223.674       223.808    
  28  0.124106      -2.08662      -4.54914       4.54914       227.526       232.075    
  29  0.205090      -1.58431      -3.45402       3.45402       225.904       229.358    
  30  0.852960     -0.159043     -0.346737      0.346737       227.625       227.972    
  31  0.241701      -1.42005      -3.09592       3.09592       229.150       232.246    
  32  0.744368     -0.295220     -0.643624      0.643624       229.354       229.997    
  33  0.279909      -1.27329      -2.77597       2.77597       228.553       231.329    
  34  0.142971      -1.94511      -4.24064       4.24064       228.512       232.753    
  35  0.367233      -1.00176      -2.18398       2.18398       228.288       230.472    
  36  0.839044     -0.175493     -0.382600      0.382600       226.726       227.109    
  37  0.762369     -0.271325     -0.591529      0.591529       229.149       229.741    
  38  0.414704     -0.880189      -1.91894       1.91894       229.951       231.870    
  39  0.294445      -1.22266      -2.66559       2.66559       230.057       232.722    
  40  0.296874      -1.21445      -2.64767       2.64767       230.407       233.055    
  41  0.834777     -0.180590     -0.393714      0.393714       227.269       227.662    
  42  0.399354     -0.917907      -2.00117       2.00117       230.912       232.913    
  43  0.948666     -0.526981E-01 -0.114890      0.114890       228.831       228.946    
  44  0.306553E-01  -3.48495      -7.59771       7.59771       228.957       236.555    
  45  0.768324E-01  -2.56613      -5.59454       5.59454       226.974       232.568    
  46  0.723813     -0.323222     -0.704672      0.704672       231.270       231.975    
  47  0.912222     -0.918720E-01 -0.200295      0.200295       232.710       232.910    
  48  0.846322     -0.166855     -0.363768      0.363768       229.027       229.390    
  49  0.704090     -0.350850     -0.764905      0.764905       229.130       229.895    
  50  0.443839     -0.812294      -1.77092       1.77092       232.287       234.058    
  51  0.790462     -0.235137     -0.512634      0.512634       231.389       231.902    
  52  0.134239      -2.00813      -4.37802       4.37802       230.737       235.115    
loop,thermsimp(1:2)       53   7.36640      0.732373    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316        225.42          1.26          1.04         24.08          0.07          0.06         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    225.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       53
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       54
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      315     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -1.05984       1.05984       219.936       220.996    
   2  0.438442     -0.824528      -1.79759       1.79759       220.276       222.074    
   3  0.666371     -0.405908     -0.884941      0.884941       220.777       221.662    
   4  0.419797     -0.867984      -1.89233       1.89233       222.075       223.967    
   5  0.662493     -0.411746     -0.897667      0.897667       223.131       224.029    
   6  0.261021      -1.34315      -2.92827       2.92827       223.674       226.602    
   7  0.451731     -0.794667      -1.73249       1.73249       224.359       226.091    
   8  0.858047     -0.153096     -0.333772      0.333772       224.231       224.565    
   9  0.678039     -0.388550     -0.847097      0.847097       223.818       224.666    
  10  0.257304      -1.35750      -2.95954       2.95954       222.789       225.748    
  11  0.379774     -0.968178      -2.11077       2.11077       224.312       226.423    
  12  0.200314      -1.60787      -3.50540       3.50540       225.620       229.126    
  13  0.702955E-01  -2.65505      -5.78840       5.78840       225.094       230.882    
  14  0.846007     -0.167228     -0.364582      0.364582       226.726       227.091    
  15  0.692217     -0.367856     -0.801981      0.801981       226.348       227.150    
  16  0.830541     -0.185678     -0.404806      0.404806       222.242       222.647    
  17  0.162133E-02  -6.42451      -14.0064       14.0064       226.984       240.990    
  18  0.829216     -0.187275     -0.408287      0.408287       227.269       227.677    
  19  0.464918     -0.765894      -1.66976       1.66976       227.625       229.295    
  20  0.204157      -1.58887      -3.46396       3.46396       225.238       228.702    
  21  0.203429      -1.59244      -3.47175       3.47175       221.175       224.647    
  22  0.403935     -0.906500      -1.97631       1.97631       228.015       229.991    
  23  0.508037     -0.677201      -1.47640       1.47640       228.831       230.308    
  24  0.337702      -1.08559      -2.36675       2.36675       222.694       225.061    
  25  0.375672     -0.979039      -2.13445       2.13445       225.904       228.038    
  26  0.218755      -1.51980      -3.31339       3.31339       229.027       232.340    
  27  0.803422     -0.218876     -0.477181      0.477181       228.431       228.908    
  28  0.324101      -1.12670      -2.45638       2.45638       229.149       231.606    
  29  0.804001     -0.218155     -0.475609      0.475609       229.130       229.605    
  30  0.727676     -0.317899     -0.693068      0.693068       227.100       227.793    
  31  0.769479     -0.262042     -0.571291      0.571291       229.354       229.925    
  32  0.632293     -0.458402     -0.999385      0.999385       225.392       226.391    
  33  0.300459      -1.20244      -2.62150       2.62150       228.288       230.910    
  34  0.567362     -0.566759      -1.23562       1.23562       227.112       228.347    
  35  0.803345     -0.218971     -0.477390      0.477390       228.553       229.030    
  36  0.764706     -0.268264     -0.584856      0.584856       227.085       227.670    
  37  0.159444      -1.83606      -4.00289       4.00289       229.951       233.954    
  38  0.951670     -0.495367E-01 -0.107997      0.107997       231.389       231.497    
  39  0.769198     -0.262407     -0.572085      0.572085       231.270       231.842    
  40  0.916532     -0.871588E-01 -0.190019      0.190019       227.526       227.716    
  41  0.146117E-01  -4.22593      -9.21316       9.21316       226.541       235.754    
  42  0.196164      -1.62880      -3.55103       3.55103       229.150       232.701    
  43  0.399482     -0.917586      -2.00047       2.00047       226.974       228.974    
  44  0.646732     -0.435823     -0.950159      0.950159       230.057       231.007    
  45  0.207790      -1.57122      -3.42550       3.42550       228.512       231.938    
  46  0.276388      -1.28595      -2.80356       2.80356       232.710       235.514    
  47  0.410494     -0.890394      -1.94119       1.94119       230.912       232.853    
  48  0.437747     -0.826115      -1.80105       1.80105       230.407       232.208    
  49  0.414886     -0.879752      -1.91799       1.91799       232.287       234.205    
  50  0.453890     -0.789901      -1.72210       1.72210       230.737       232.459    
  51  0.141383      -1.95628      -4.26499       4.26499       227.193       231.458    
  52  0.264375      -1.33039      -2.90044       2.90044       225.417       228.317    
loop,thermsimp(1:2)       54   1.05984       1.79759    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317        234.51          1.28          1.04         24.04          0.10          0.06         26.52
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    234.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       54
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       55
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      316     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -1.02083       1.02083       219.936       220.957    
   2  0.909442     -0.949244E-01 -0.206949      0.206949       220.777       220.984    
   3  0.449837     -0.798870      -1.74166       1.74166       220.276       222.018    
   4  0.761598     -0.272336     -0.593733      0.593733       222.242       222.836    
   5  0.706800     -0.347007     -0.756528      0.756528       222.075       222.831    
   6  0.214343      -1.54018      -3.35782       3.35782       223.131       226.489    
   7  0.855661     -0.155881     -0.339843      0.339843       224.231       224.571    
   8  0.432924E-01  -3.13978      -6.84518       6.84518       221.175       228.020    
   9  0.902784     -0.102271     -0.222967      0.222967       223.818       224.041    
  10  0.706965     -0.346774     -0.756019      0.756019       222.694       223.450    
  11  0.826667     -0.190354     -0.414999      0.414999       222.789       223.204    
  12  0.824436     -0.193055     -0.420889      0.420889       224.359       224.780    
  13  0.442772     -0.814700      -1.77617       1.77617       225.392       227.168    
  14  0.416355     -0.876217      -1.91028       1.91028       224.312       226.222    
  15  0.268464      -1.31504      -2.86698       2.86698       223.674       226.541    
  16  0.779742     -0.248792     -0.542403      0.542403       226.726       227.268    
  17  0.406799E-01  -3.20202      -6.98088       6.98088       226.348       233.329    
  18  0.975397     -0.249106E-01 -0.543088E-01  0.543088E-01   227.085       227.139    
  19  0.425150E-01  -3.15790      -6.88469       6.88469       227.269       234.153    
  20  0.302481      -1.19574      -2.60688       2.60688       227.526       230.133    
  21  0.732033     -0.311930     -0.680054      0.680054       227.100       227.780    
  22  0.774561     -0.255459     -0.556939      0.556939       225.904       226.461    
  23  0.899897     -0.105475     -0.229951      0.229951       225.417       225.647    
  24  0.549624     -0.598520      -1.30486       1.30486       227.112       228.416    
  25  0.143543      -1.94112      -4.23193       4.23193       225.238       229.470    
  26  0.229055      -1.47379      -3.21309       3.21309       228.431       231.644    
  27  0.334206      -1.09600      -2.38944       2.38944       226.974       229.363    
  28  0.301620      -1.19859      -2.61310       2.61310       228.553       231.166    
  29  0.856030     -0.155449     -0.338903      0.338903       225.620       225.959    
  30  0.978878     -0.213482E-01 -0.465422E-01  0.465422E-01   227.625       227.672    
  31  0.890790E-01  -2.41823      -5.27211       5.27211       229.130       234.402    
  32  0.275076      -1.29071      -2.81393       2.81393       229.354       232.168    
  33  0.506865     -0.679511      -1.48144       1.48144       228.015       229.496    
  34  0.628553     -0.464334      -1.01232       1.01232       228.831       229.843    
  35  0.787972     -0.238293     -0.519514      0.519514       225.094       225.614    
  36  0.746168     -0.292804     -0.638357      0.638357       228.288       228.926    
  37  0.116954      -2.14598      -4.67855       4.67855       230.057       234.735    
  38  0.245368      -1.40500      -3.06310       3.06310       227.193       230.256    
  39  0.873952     -0.134729     -0.293730      0.293730       231.389       231.683    
  40  0.850596     -0.161818     -0.352787      0.352787       229.149       229.502    
  41  0.455763     -0.785783      -1.71312       1.71312       231.270       232.983    
  42  0.984333     -0.157910E-01 -0.344267E-01  0.344267E-01   228.512       228.547    
  43  0.956700     -0.442655E-01 -0.965054E-01  0.965054E-01   230.407       230.504    
  44  0.186161      -1.68114      -3.66514       3.66514       229.027       232.692    
  45  0.791379     -0.233979     -0.510108      0.510108       230.737       231.247    
  46  0.262937      -1.33584      -2.91233       2.91233       229.150       232.062    
  47  0.115228E-01  -4.46342      -9.73093       9.73093       230.912       240.643    
  48  0.324912      -1.12420      -2.45092       2.45092       229.951       232.402    
  49  0.164288      -1.80613      -3.93764       3.93764       232.287       236.225    
  50  0.334193E-02  -5.70121      -12.4295       12.4295       232.710       245.140    
  51  0.189130      -1.66532      -3.63064       3.63064       226.541       230.172    
  52  0.157956      -1.84544      -4.02333       4.02333       234.508       238.531    
loop,thermsimp(1:2)       55   1.02083      0.206949    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318        222.30          1.27          1.02         24.05          0.11          0.07         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    319        230.14          1.02          0.99         23.98          0.09          0.06         26.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    222.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       55
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       56
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      318     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -3.05889       3.05889       219.936       222.995    
   2  0.963480     -0.372033E-01 -0.811087E-01  0.811087E-01   220.777       220.858    
   3  0.633143     -0.457059     -0.996456      0.996456       220.276       221.273    
   4  0.939850E-02  -4.66721      -10.1752       10.1752       222.075       232.250    
   5  0.796978     -0.226928     -0.494737      0.494737       222.242       222.737    
   6  0.229125      -1.47349      -3.21243       3.21243       222.789       226.001    
   7  0.926958     -0.758467E-01 -0.165357      0.165357       222.694       222.860    
   8  0.687512     -0.374676     -0.816849      0.816849       223.818       224.635    
   9  0.695030     -0.363800     -0.793138      0.793138       224.231       225.024    
  10  0.900736     -0.104543     -0.227918      0.227918       224.359       224.587    
  11  0.867179     -0.142510     -0.310693      0.310693       225.094       225.405    
  12  0.879271     -0.128662     -0.280502      0.280502       225.417       225.697    
  13  0.197557      -1.62173      -3.53561       3.53561       225.620       229.156    
  14  0.790701     -0.234835     -0.511975      0.511975       224.312       224.824    
  15  0.807456     -0.213867     -0.466261      0.466261       225.904       226.370    
  16  0.688117     -0.373796     -0.814931      0.814931       223.131       223.946    
  17  0.227000      -1.48280      -3.23273       3.23273       223.674       226.906    
  18  0.374715     -0.981589      -2.14001       2.14001       227.085       229.225    
  19  0.176077      -1.73683      -3.78655       3.78655       225.392       229.178    
  20  0.446126E-01  -3.10974      -6.77969       6.77969       226.726       233.506    
  21  0.997763E-01  -2.30482      -5.02486       5.02486       227.625       232.650    
  22  0.142978E-01  -4.24765      -9.26051       9.26051       227.100       236.361    
  23  0.652216     -0.427379     -0.931750      0.931750       221.175       222.107    
  24  0.909797     -0.945339E-01 -0.206098      0.206098       227.112       227.318    
  25  0.145015      -1.93092      -4.20969       4.20969       228.512       232.722    
  26  0.189723      -1.66219      -3.62383       3.62383       228.288       231.912    
  27  0.260997      -1.34324      -2.92847       2.92847       226.974       229.902    
  28  0.167755      -1.78525      -3.89211       3.89211       225.238       229.131    
  29  0.148939      -1.90422      -4.15148       4.15148       228.015       232.166    
  30  0.209474      -1.56315      -3.40791       3.40791       229.149       232.557    
  31  0.594522     -0.519998      -1.13367       1.13367       228.831       229.965    
  32  0.401703     -0.912043      -1.98839       1.98839       227.526       229.515    
  33  0.306469      -1.18264      -2.57833       2.57833       226.541       229.119    
  34  0.879335     -0.128589     -0.280343      0.280343       227.193       227.473    
  35  0.920707     -0.826134E-01 -0.180110      0.180110       230.407       230.587    
  36  0.215616      -1.53425      -3.34490       3.34490       228.553       231.898    
  37  0.821708     -0.196370     -0.428117      0.428117       230.737       231.165    
  38  0.935240     -0.669517E-01 -0.145965      0.145965       228.431       228.577    
  39  0.691932     -0.368268     -0.802878      0.802878       231.389       232.192    
  40  0.493152     -0.706938      -1.54123       1.54123       229.150       230.691    
  41  0.362160      -1.01567      -2.21431       2.21431       229.354       231.568    
  42  0.636318     -0.452056     -0.985549      0.985549       229.951       230.937    
  43  0.178369      -1.72390      -3.75836       3.75836       229.027       232.785    
  44  0.987372     -0.127089E-01 -0.277072E-01  0.277072E-01   231.270       231.298    
  45  0.557690     -0.583953      -1.27310       1.27310       226.348       227.621    
  46  0.434391     -0.833811      -1.81783       1.81783       227.269       229.086    
  47  0.759572     -0.275001     -0.599542      0.599542       229.130       229.729    
  48  0.578559     -0.547214      -1.19301       1.19301       230.057       231.250    
  49  0.262392      -1.33792      -2.91686       2.91686       232.287       235.204    
  50  0.615619     -0.485127      -1.05765       1.05765       234.508       235.565    
  51  0.580502     -0.543861      -1.18570       1.18570       230.912       232.097    
  52  0.434749     -0.832986      -1.81603       1.81603       222.298       224.114    
loop,thermsimp(1:2)       56   3.05889      0.811087E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320        236.39          1.27          1.02         23.95          0.05          0.07         26.36
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    321        227.02          1.05          1.02         23.82          0.09          0.06         26.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    227.02        2.690     -1.515      5.139     -100.0      1.254    
                     -0.5151      2.733     -100.0      3.056      1.043    
                       1.248     -1.012      1.841      0.000      0.000    
                      -1.658      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.905     -2.967     -5.848     -2.744    
                      -13.18     -2.772      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.1066     0.6329E-02  0.000    -0.7384    
                     -0.2780    -0.2228    -0.1521    -0.1884    -0.2264E-01

                      -1.285    -0.6129      0.000    -0.1111    -0.4186E-01
                      0.8541E-01 0.2588    -0.5921E-01-0.1070    -0.1110    
                      0.1132     0.2751E-01-0.2569     -1.327      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.144      9.090     -7039.     -4.000    
                     -0.2589     0.1516      8.997      8.554     -4904.    

                      -4.000    -0.3292    -0.5104      8.746      9.085    
                      -6912.     -4.000    -0.9400E-01-0.8230      9.622    
                       8.778     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    227.02
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       56
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       57
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      320     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -2.59667       2.59667       220.777       223.373    
   2  0.729962     -0.314762     -0.686228      0.686228       220.276       220.963    
   3  0.788140     -0.238080     -0.519050      0.519050       221.175       221.694    
   4  0.718031     -0.331242     -0.722158      0.722158       222.242       222.964    
   5  0.603575     -0.504885      -1.10072       1.10072       222.694       223.795    
   6  0.287757      -1.24564      -2.71568       2.71568       219.936       222.651    
   7  0.690986     -0.369635     -0.805859      0.805859       223.131       223.937    
   8  0.976315     -0.239695E-01 -0.522571E-01  0.522571E-01   222.298       222.350    
   9  0.983892     -0.162393E-01 -0.354041E-01  0.354041E-01   224.359       224.394    
  10  0.858769     -0.152255     -0.331938      0.331938       223.818       224.150    
  11  0.968889     -0.316048E-01 -0.689032E-01  0.689032E-01   224.312       224.381    
  12  0.364921      -1.00807      -2.19775       2.19775       224.231       226.429    
  13  0.540930     -0.614466      -1.33963       1.33963       225.094       226.434    
  14  0.812278E-01  -2.51050      -5.47326       5.47326       225.417       230.890    
  15  0.919841     -0.835539E-01 -0.182160      0.182160       222.789       222.971    
  16  0.275462      -1.28930      -2.81088       2.81088       225.904       228.715    
  17  0.704362     -0.350463     -0.764062      0.764062       223.674       224.438    
  18  0.896809     -0.108913     -0.237446      0.237446       227.112       227.349    
  19  0.166873      -1.79052      -3.90361       3.90361       227.193       231.097    
  20  0.927791E-02  -4.68012      -10.2034       10.2034       226.348       236.552    
  21  0.906733     -0.979074E-01 -0.213453      0.213453       228.431       228.645    
  22  0.575421     -0.552654      -1.20487       1.20487       227.269       228.473    
  23  0.975069     -0.252469E-01 -0.550421E-01  0.550421E-01   226.541       226.596    
  24  0.610094     -0.494143      -1.07730       1.07730       225.238       226.316    
  25  0.823028     -0.194765     -0.424616      0.424616       225.620       226.045    
  26  0.709022     -0.343869     -0.749685      0.749685       225.392       226.142    
  27  0.956893     -0.440633E-01 -0.960646E-01  0.960646E-01   227.085       227.181    
  28  0.897850E-01  -2.41034      -5.25489       5.25489       227.526       232.781    
  29  0.836996     -0.177936     -0.387928      0.387928       229.130       229.518    
  30  0.688664     -0.373001     -0.813199      0.813199       226.974       227.787    
  31  0.587454     -0.531957      -1.15975       1.15975       228.831       229.991    
  32  0.880970     -0.126731     -0.276293      0.276293       230.407       230.683    
  33  0.506724     -0.679789      -1.48204       1.48204       229.150       230.632    
  34  0.802262     -0.220320     -0.480330      0.480330       229.951       230.432    
  35  0.764787E-01  -2.57074      -5.60460       5.60460       230.737       236.342    
  36  0.907101     -0.975014E-01 -0.212568      0.212568       230.057       230.269    
  37  0.797350     -0.226461     -0.493720      0.493720       231.270       231.764    
  38  0.257375      -1.35722      -2.95894       2.95894       229.354       232.313    
  39  0.643190     -0.441315     -0.962132      0.962132       228.553       229.515    
  40  0.513768     -0.665984      -1.45194       1.45194       228.288       229.740    
  41  0.850264     -0.162208     -0.353638      0.353638       230.912       231.265    
  42  0.200819      -1.60535      -3.49990       3.49990       228.015       231.515    
  43  0.331940      -1.10280      -2.40427       2.40427       231.389       233.794    
  44  0.900490     -0.104816     -0.228514      0.228514       222.075       222.303    
  45  0.618957     -0.479719      -1.04586       1.04586       229.149       230.195    
  46  0.395756     -0.926956      -2.02090       2.02090       227.625       229.646    
  47  0.528166     -0.638345      -1.39169       1.39169       228.512       229.904    
  48  0.586635     -0.533352      -1.16279       1.16279       229.027       230.189    
  49  0.705559     -0.348765     -0.760360      0.760360       226.726       227.486    
  50  0.191018      -1.65539      -3.60899       3.60899       232.287       235.896    
  51  0.581133     -0.542775      -1.18333       1.18333       234.508       235.691    
  52  0.297529      -1.21224      -2.64287       2.64287       227.025       229.668    
loop,thermsimp(1:2)       57   2.59667      0.686228    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322        225.72          1.26          1.02         23.93          0.09          0.06         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    225.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       57
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       58
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      321     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -1.38327       1.38327       220.276       221.660    
   2  0.175946E-01  -4.04016      -8.80816       8.80816       221.175       229.983    
   3  0.419998     -0.867504      -1.89129       1.89129       222.075       223.966    
   4  0.448197E-01  -3.10511      -6.76959       6.76959       222.298       229.067    
   5  0.501784     -0.689586      -1.50340       1.50340       219.936       221.439    
   6  0.858173     -0.152949     -0.333452      0.333452       222.242       222.575    
   7  0.101932      -2.28345      -4.97827       4.97827       222.789       227.767    
   8  0.453268     -0.791273      -1.72509       1.72509       220.777       222.502    
   9  0.128092      -2.05501      -4.48022       4.48022       222.694       227.174    
  10  0.779644     -0.248918     -0.542677      0.542677       223.131       223.674    
  11  0.769943E-01  -2.56402      -5.58995       5.58995       223.818       229.408    
  12  0.140214      -1.96458      -4.28308       4.28308       224.312       228.595    
  13  0.571588     -0.559337      -1.21944       1.21944       224.359       225.578    
  14  0.455096     -0.787247      -1.71632       1.71632       223.674       225.390    
  15  0.594240     -0.520471      -1.13470       1.13470       225.620       226.755    
  16  0.833288     -0.182376     -0.397606      0.397606       225.392       225.789    
  17  0.807090E-01  -2.51691      -5.48723       5.48723       225.238       230.726    
  18  0.430313     -0.843242      -1.83839       1.83839       224.231       226.070    
  19  0.990463     -0.958277E-02 -0.208919E-01  0.208919E-01   225.094       225.115    
  20  0.907906     -0.966144E-01 -0.210634      0.210634       226.541       226.752    
  21  0.607469     -0.498455      -1.08671       1.08671       227.085       228.172    
  22  0.927102     -0.756916E-01 -0.165019      0.165019       227.112       227.277    
  23  0.379122     -0.969896      -2.11452       2.11452       226.726       228.840    
  24  0.183121E-01  -4.00019      -8.72101       8.72101       226.974       235.695    
  25  0.561966     -0.576313      -1.25645       1.25645       227.269       228.525    
  26  0.638772     -0.448208     -0.977159      0.977159       228.431       229.408    
  27  0.234202      -1.45157      -3.16464       3.16464       225.904       229.068    
  28  0.257221      -1.35782      -2.96024       2.96024       228.553       231.513    
  29  0.688379     -0.373416     -0.814102      0.814102       229.130       229.944    
  30  0.360237E-01  -3.32358      -7.24589       7.24589       227.625       234.871    
  31  0.849177     -0.163487     -0.356426      0.356426       227.025       227.381    
  32  0.324868E-01  -3.42692      -7.47120       7.47120       228.288       235.759    
  33  0.216483E-01  -3.83283      -8.35613       8.35613       228.512       236.868    
  34  0.794095     -0.230552     -0.502637      0.502637       228.831       229.334    
  35  0.453180     -0.791465      -1.72551       1.72551       229.027       230.752    
  36  0.286278      -1.25079      -2.72691       2.72691       229.149       231.876    
  37  0.931500     -0.709590E-01 -0.154701      0.154701       230.057       230.211    
  38  0.483424     -0.726861      -1.58467       1.58467       229.951       231.536    
  39  0.782276     -0.245547     -0.535330      0.535330       229.150       229.685    
  40  0.976661     -0.236156E-01 -0.514855E-01  0.514855E-01   230.407       230.459    
  41  0.707981     -0.345338     -0.752887      0.752887       225.417       226.170    
  42  0.101993      -2.28285      -4.97696       4.97696       227.193       232.170    
  43  0.690974E-01  -2.67224      -5.82587       5.82587       230.912       236.738    
  44  0.767576E-01  -2.56710      -5.59667       5.59667       228.015       233.612    
  45  0.584825     -0.536443      -1.16953       1.16953       231.270       232.440    
  46  0.588828     -0.529621      -1.15465       1.15465       229.354       230.508    
  47  0.894562     -0.111421     -0.242914      0.242914       227.526       227.769    
  48  0.260723      -1.34430      -2.93077       2.93077       231.389       234.320    
  49  0.773456E-01  -2.55947      -5.58003       5.58003       234.508       240.088    
  50  0.848651E-01  -2.46669      -5.37776       5.37776       232.287       237.665    
  51  0.992803     -0.722305E-02 -0.157473E-01  0.157473E-01   230.737       230.753    
  52  0.529202     -0.636386      -1.38742       1.38742       225.716       227.104    
loop,thermsimp(1:2)       58   1.38327       8.80816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323        226.53          1.23          1.01         23.93          0.08          0.06         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    226.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       58
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       59
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      322     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.118908      0.118908       219.936       220.055    
   2  0.224221      -1.49512      -3.25959       3.25959       220.276       223.536    
   3  0.699642     -0.357186     -0.778718      0.778718       220.777       221.555    
   4  0.490916     -0.711482      -1.55114       1.55114       222.242       223.793    
   5  0.204251      -1.58840      -3.46296       3.46296       223.131       226.594    
   6  0.356522      -1.03136      -2.24852       2.24852       222.075       224.323    
   7  0.745938     -0.293113     -0.639029      0.639029       225.094       225.733    
   8  0.451533     -0.795107      -1.73345       1.73345       223.674       225.407    
   9  0.101038      -2.29226      -4.99747       4.99747       224.359       229.356    
  10  0.826978     -0.189977     -0.414178      0.414178       225.392       225.806    
  11  0.212337      -1.54958      -3.37832       3.37832       224.231       227.610    
  12  0.490540     -0.712248      -1.55281       1.55281       225.417       226.969    
  13  0.672078     -0.397381     -0.866349      0.866349       226.541       227.407    
  14  0.690580     -0.370223     -0.807141      0.807141       225.620       226.427    
  15  0.513190     -0.667108      -1.45440       1.45440       225.716       227.171    
  16  0.268393      -1.31530      -2.86756       2.86756       222.694       225.562    
  17  0.896898     -0.108813     -0.237229      0.237229       227.112       227.349    
  18  0.911953     -0.921674E-01 -0.200939      0.200939       227.025       227.226    
  19  0.355703      -1.03366      -2.25353       2.25353       222.789       225.042    
  20  0.293818      -1.22479      -2.67023       2.67023       227.526       230.196    
  21  0.713392     -0.337724     -0.736288      0.736288       227.085       227.821    
  22  0.660627     -0.414565     -0.903814      0.903814       227.269       228.172    
  23  0.795097     -0.229291     -0.499888      0.499888       224.312       224.812    
  24  0.919484     -0.839428E-01 -0.183008      0.183008       226.726       226.909    
  25  0.976382     -0.239014E-01 -0.521085E-01  0.521085E-01   222.298       222.350    
  26  0.922195     -0.809991E-01 -0.176590      0.176590       225.904       226.080    
  27  0.436062     -0.829970      -1.80946       1.80946       228.831       230.641    
  28  0.271848      -1.30251      -2.83967       2.83967       223.818       226.658    
  29  0.389360     -0.943252      -2.05643       2.05643       228.431       230.488    
  30  0.314178E-01  -3.46038      -7.54415       7.54415       229.150       236.694    
  31  0.545460     -0.606126      -1.32144       1.32144       229.130       230.451    
  32  0.925479E-01  -2.38003      -5.18882       5.18882       221.175       226.364    
  33  0.971973     -0.284273E-01 -0.619757E-01  0.619757E-01   230.057       230.119    
  34  0.403500     -0.907578      -1.97865       1.97865       230.407       232.386    
  35  0.392926     -0.934133      -2.03655       2.03655       229.354       231.390    
  36  0.718758     -0.330230     -0.719951      0.719951       225.238       225.958    
  37  0.746082     -0.292920     -0.638609      0.638609       229.027       229.665    
  38  0.353478      -1.03993      -2.26721       2.26721       230.737       233.005    
  39  0.843229     -0.170517     -0.371752      0.371752       228.553       228.924    
  40  0.388011     -0.946720      -2.06399       2.06399       229.951       232.015    
  41  0.969569     -0.309034E-01 -0.673739E-01  0.673739E-01   229.149       229.217    
  42  0.441380E-01  -3.12043      -6.80301       6.80301       227.193       233.996    
  43  0.533000     -0.629233      -1.37182       1.37182       231.270       232.642    
  44  0.288396      -1.24342      -2.71084       2.71084       228.015       230.726    
  45  0.683115     -0.381092     -0.830837      0.830837       231.389       232.220    
  46  0.339511      -1.08025      -2.35511       2.35511       227.625       229.980    
  47  0.150420E-01  -4.19691      -9.14988       9.14988       226.974       236.124    
  48  0.141026      -1.95881      -4.27049       4.27049       228.288       232.559    
  49  0.421666     -0.863541      -1.88265       1.88265       230.912       232.794    
  50  0.953496     -0.476201E-01 -0.103819      0.103819       228.512       228.616    
  51  0.966647     -0.339215E-01 -0.739538E-01  0.739538E-01   232.287       232.361    
  52  0.365434      -1.00667      -2.19469       2.19469       226.531       228.726    
loop,thermsimp(1:2)       59  0.118908       3.25959    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324        230.15          1.17          0.98         23.48          0.67          0.06         26.36
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       59
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       60
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      323     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -2.30677       2.30677       219.936       222.243    
   2  0.605757     -0.501276      -1.09286       1.09286       220.777       221.870    
   3  0.690633     -0.370146     -0.806973      0.806973       222.298       223.105    
   4  0.400665     -0.914628      -1.99403       1.99403       220.276       222.270    
   5  0.862165     -0.148309     -0.323335      0.323335       222.242       222.565    
   6  0.874011     -0.134662     -0.293584      0.293584       222.075       222.369    
   7  0.389525     -0.942826      -2.05550       2.05550       224.312       226.368    
   8  0.102225E-01  -4.58317      -9.99199       9.99199       222.789       232.781    
   9  0.102697      -2.27597      -4.96196       4.96196       223.674       228.636    
  10  0.818271     -0.200561     -0.437253      0.437253       222.694       223.131    
  11  0.888768     -0.117920     -0.257082      0.257082       225.094       225.351    
  12  0.539210     -0.617651      -1.34657       1.34657       225.392       226.738    
  13  0.317914      -1.14597      -2.49840       2.49840       225.238       227.737    
  14  0.437422     -0.826857      -1.80267       1.80267       225.904       227.707    
  15  0.925263     -0.776773E-01 -0.169348      0.169348       221.175       221.344    
  16  0.422436     -0.861717      -1.87867       1.87867       225.620       227.499    
  17  0.965248     -0.353697E-01 -0.771112E-01  0.771112E-01   223.131       223.209    
  18  0.771278     -0.259706     -0.566197      0.566197       223.818       224.385    
  19  0.902488     -0.102600     -0.223683      0.223683       226.726       226.950    
  20  0.512816     -0.667839      -1.45599       1.45599       225.417       226.873    
  21  0.915966     -0.877758E-01 -0.191364      0.191364       225.716       225.908    
  22  0.612605     -0.490035      -1.06835       1.06835       227.025       228.093    
  23  0.323528      -1.12847      -2.46023       2.46023       227.112       229.572    
  24  0.206646      -1.57675      -3.43755       3.43755       226.541       229.979    
  25  0.481057     -0.731769      -1.59536       1.59536       224.231       225.827    
  26  0.287887E-01  -3.54777      -7.73467       7.73467       227.085       234.819    
  27  0.996968     -0.303648E-02 -0.661998E-02  0.661998E-02   227.269       227.275    
  28  0.132770      -2.01914      -4.40202       4.40202       228.512       232.914    
  29  0.716038     -0.334023     -0.728219      0.728219       226.531       227.259    
  30  0.229552      -1.47162      -3.20836       3.20836       228.553       231.761    
  31  0.236358      -1.44241      -3.14466       3.14466       229.149       232.294    
  32  0.542780     -0.611051      -1.33218       1.33218       224.359       225.691    
  33  0.875156     -0.133353     -0.290729      0.290729       229.027       229.317    
  34  0.988730     -0.113343E-01 -0.247105E-01  0.247105E-01   227.625       227.650    
  35  0.244332      -1.40923      -3.07233       3.07233       230.057       233.129    
  36  0.659246     -0.416659     -0.908378      0.908378       227.526       228.434    
  37  0.457872     -0.781166      -1.70306       1.70306       229.130       230.833    
  38  0.380652E-01  -3.26846      -7.12572       7.12572       228.431       235.557    
  39  0.358843      -1.02487      -2.23437       2.23437       228.831       231.066    
  40  0.846233     -0.166960     -0.363998      0.363998       228.015       228.379    
  41  0.359308      -1.02358      -2.23155       2.23155       229.354       231.585    
  42  0.533329     -0.628617      -1.37048       1.37048       229.951       231.322    
  43  0.645289     -0.438058     -0.955031      0.955031       231.389       232.344    
  44  0.311850      -1.16523      -2.54038       2.54038       232.287       234.828    
  45  0.270084      -1.30902      -2.85386       2.85386       230.407       233.261    
  46  0.530313     -0.634287      -1.38284       1.38284       228.288       229.671    
  47  0.975874     -0.244213E-01 -0.532421E-01  0.532421E-01   231.270       231.323    
  48  0.313811      -1.15896      -2.52672       2.52672       230.912       233.438    
  49  0.932688     -0.696844E-01 -0.151922      0.151922       230.737       230.889    
  50  0.357359      -1.02901      -2.24340       2.24340       227.193       229.436    
  51  0.545837     -0.605435      -1.31994       1.31994       226.974       228.294    
  52  0.954982     -0.460626E-01 -0.100423      0.100423       230.153       230.254    
loop,thermsimp(1:2)       60   2.30677       1.09286    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325        238.55          1.27          1.02         24.00          0.08          0.07         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    326        225.98          1.03          1.01         23.99          0.06          0.06         26.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    225.98
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       60
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       61
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      325     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597     -0.892983      0.892983       221.175       222.068    
   2  0.718953     -0.329960     -0.719361      0.719361       220.777       221.496    
   3  0.454275     -0.789053      -1.72025       1.72025       219.936       221.656    
   4  0.253407E-01  -3.67534      -8.01279       8.01279       220.276       228.289    
   5  0.611947     -0.491110      -1.07069       1.07069       222.075       223.146    
   6  0.234016      -1.45237      -3.16637       3.16637       222.242       225.408    
   7  0.359481E-01  -3.32568      -7.25047       7.25047       222.298       229.548    
   8  0.222118E-01  -3.80713      -8.30012       8.30012       222.694       230.994    
   9  0.905838E-01  -2.40148      -5.23558       5.23558       223.131       228.367    
  10  0.791683     -0.233594     -0.509270      0.509270       223.818       224.328    
  11  0.557734     -0.583873      -1.27293       1.27293       225.094       226.367    
  12  0.936048E-01  -2.36867      -5.16406       5.16406       224.359       229.523    
  13  0.431059     -0.841510      -1.83462       1.83462       224.231       226.066    
  14  0.225758      -1.48829      -3.24470       3.24470       225.716       228.961    
  15  0.275181E-01  -3.59291      -7.83308       7.83308       224.312       232.145    
  16  0.802517     -0.220002     -0.479638      0.479638       225.392       225.872    
  17  0.423872     -0.858323      -1.87127       1.87127       225.417       227.288    
  18  0.300971      -1.20074      -2.61779       2.61779       226.726       229.344    
  19  0.479556     -0.734895      -1.60218       1.60218       226.531       228.133    
  20  0.621838     -0.475076      -1.03574       1.03574       227.269       228.304    
  21  0.397654     -0.922172      -2.01047       2.01047       225.620       227.631    
  22  0.664976     -0.408004     -0.889510      0.889510       227.625       228.515    
  23  0.288358      -1.24355      -2.71113       2.71113       225.904       228.615    
  24  0.442017     -0.816406      -1.77989       1.77989       225.238       227.018    
  25  0.150763E-01  -4.19463      -9.14492       9.14492       227.025       236.170    
  26  0.600886     -0.509350      -1.11046       1.11046       226.974       228.084    
  27  0.162927      -1.81446      -3.95578       3.95578       228.015       231.971    
  28  0.932743     -0.696251E-01 -0.151793      0.151793       227.526       227.678    
  29  0.997186     -0.281799E-02 -0.614364E-02  0.614364E-02   223.674       223.680    
  30  0.418339     -0.871463      -1.89992       1.89992       229.027       230.927    
  31  0.694800     -0.364132     -0.793861      0.793861       227.193       227.987    
  32  0.852711     -0.159334     -0.347373      0.347373       227.112       227.459    
  33  0.624847     -0.470249      -1.02521       1.02521       228.288       229.313    
  34  0.427649     -0.849453      -1.85193       1.85193       226.541       228.393    
  35  0.149871      -1.89798      -4.13788       4.13788       230.153       234.291    
  36  0.563430     -0.573713      -1.25078       1.25078       229.130       230.381    
  37  0.860100     -0.150706     -0.328562      0.328562       230.737       231.066    
  38  0.867090E-01  -2.44520      -5.33089       5.33089       228.831       234.162    
  39  0.847848     -0.165054     -0.359842      0.359842       229.951       230.311    
  40  0.782599E-01  -2.54772      -5.55441       5.55441       231.270       236.825    
  41  0.697889E-01  -2.66228      -5.80417       5.80417       229.354       235.158    
  42  0.422765     -0.860939      -1.87697       1.87697       228.553       230.430    
  43  0.158365      -1.84286      -4.01770       4.01770       229.149       233.167    
  44  0.518935     -0.655976      -1.43013       1.43013       231.389       232.819    
  45  0.430406     -0.843027      -1.83792       1.83792       222.789       224.627    
  46  0.639805     -0.446592     -0.973638      0.973638       228.512       229.486    
  47  0.830453E-01  -2.48837      -5.42501       5.42501       230.057       235.482    
  48  0.639384     -0.447250     -0.975071      0.975071       230.407       231.382    
  49  0.833791     -0.181773     -0.396292      0.396292       230.912       231.308    
  50  0.453972     -0.789720      -1.72171       1.72171       227.085       228.807    
  51  0.542088     -0.612327      -1.33496       1.33496       232.287       233.622    
  52  0.271321      -1.30445      -2.84390       2.84390       225.985       228.829    
loop,thermsimp(1:2)       61  0.892983      0.719361    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327        221.16          1.23          1.01         24.00          0.11          0.07         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    328        232.45          1.07          1.01         24.00          0.07          0.06         26.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    221.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       61
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       62
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      327     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.308872E-01  0.308872E-01   220.777       220.808    
   2  0.420912     -0.865330      -1.88655       1.88655       219.936       221.822    
   3  0.617210     -0.482545      -1.05202       1.05202       221.175       222.227    
   4  0.787846     -0.238453     -0.519864      0.519864       222.075       222.595    
   5  0.608770     -0.496315      -1.08204       1.08204       223.674       224.756    
   6  0.925975     -0.769083E-01 -0.167671      0.167671       223.818       223.986    
   7  0.545822     -0.605462      -1.32000       1.32000       222.789       224.109    
   8  0.240142      -1.42653      -3.11004       3.11004       222.242       225.352    
   9  0.800257     -0.222822     -0.485785      0.485785       225.392       225.878    
  10  0.250149      -1.38570      -3.02103       3.02103       224.231       227.252    
  11  0.814044     -0.205741     -0.448547      0.448547       225.094       225.543    
  12  0.897552     -0.108084     -0.235639      0.235639       225.238       225.474    
  13  0.807530     -0.213775     -0.466062      0.466062       225.417       225.883    
  14  0.369031     -0.996874      -2.17333       2.17333       227.112       229.285    
  15  0.892620     -0.113594     -0.247652      0.247652       225.620       225.868    
  16  0.992736     -0.729054E-02 -0.158945E-01  0.158945E-01   227.526       227.542    
  17  0.264259      -1.33083      -2.90140       2.90140       227.193       230.094    
  18  0.164586      -1.80432      -3.93369       3.93369       226.974       230.908    
  19  0.594739     -0.519633      -1.13288       1.13288       226.531       227.664    
  20  0.766319     -0.266156     -0.580260      0.580260       220.276       220.857    
  21  0.392663     -0.934804      -2.03801       2.03801       227.269       229.307    
  22  0.900399     -0.104917     -0.228736      0.228736       223.131       223.360    
  23  0.853164E-01  -2.46139      -5.36619       5.36619       226.541       231.907    
  24  0.753181     -0.283450     -0.617963      0.617963       227.625       228.243    
  25  0.801958     -0.220699     -0.481156      0.481156       225.904       226.385    
  26  0.840206     -0.174108     -0.379582      0.379582       227.085       227.464    
  27  0.899787     -0.105597     -0.230218      0.230218       225.985       226.215    
  28  0.555629     -0.587654      -1.28117       1.28117       225.716       226.998    
  29  0.117481E-01  -4.44406      -9.68871       9.68871       228.288       237.977    
  30  0.228476      -1.47632      -3.21860       3.21860       226.726       229.945    
  31  0.121877      -2.10474      -4.58865       4.58865       228.512       233.101    
  32  0.475375     -0.743652      -1.62127       1.62127       224.359       225.980    
  33  0.208734      -1.56669      -3.41562       3.41562       222.298       225.713    
  34  0.680231     -0.385322     -0.840060      0.840060       229.951       230.792    
  35  0.211647      -1.55284      -3.38542       3.38542       229.130       232.515    
  36  0.982763     -0.173870E-01 -0.379063E-01  0.379063E-01   228.553       228.591    
  37  0.819904     -0.198568     -0.432908      0.432908       229.027       229.460    
  38  0.282339      -1.26465      -2.75712       2.75712       222.694       225.451    
  39  0.391986     -0.936529      -2.04177       2.04177       230.737       232.779    
  40  0.218050      -1.52303      -3.32043       3.32043       230.912       234.232    
  41  0.236244      -1.44289      -3.14572       3.14572       230.407       233.553    
  42  0.544673     -0.607570      -1.32459       1.32459       228.015       229.339    
  43  0.721937     -0.325818     -0.710331      0.710331       224.312       225.022    
  44  0.649728     -0.431202     -0.940084      0.940084       231.389       232.329    
  45  0.641823     -0.443443     -0.966771      0.966771       229.149       230.116    
  46  0.597293     -0.515347      -1.12353       1.12353       232.287       233.411    
  47  0.467405     -0.760558      -1.65813       1.65813       228.831       230.489    
  48  0.676900     -0.390232     -0.850764      0.850764       230.153       231.004    
  49  0.925913     -0.769750E-01 -0.167817      0.167817       229.354       229.521    
  50  0.692551     -0.367374     -0.800929      0.800929       230.057       230.858    
  51  0.161390      -1.82393      -3.97644       3.97644       227.025       231.001    
  52  0.513279     -0.666936      -1.45402       1.45402       221.160       222.614    
loop,thermsimp(1:2)       62  0.308872E-01   1.88655    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329        219.84          1.28          1.04         24.02          0.03          0.07         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    330        218.83          1.05          1.02         24.02          0.00          0.06         26.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    218.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       62
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       63
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      329     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.329889E-01  0.329889E-01   220.777       220.810    
   2  0.760415     -0.273890     -0.597122      0.597122       220.276       220.874    
   3  0.328612      -1.11288      -2.42624       2.42624       219.936       222.362    
   4  0.164880      -1.80254      -3.92980       3.92980       221.175       225.105    
   5  0.706606     -0.347282     -0.757126      0.757126       222.075       222.832    
   6  0.832070     -0.183839     -0.400797      0.400797       221.160       221.561    
   7  0.231505      -1.46315      -3.18989       3.18989       223.131       226.321    
   8  0.802671E-01  -2.52240      -5.49920       5.49920       223.818       229.318    
   9  0.116349      -2.15116      -4.68985       4.68985       222.789       227.479    
  10  0.874222     -0.134421     -0.293058      0.293058       223.674       223.967    
  11  0.729333     -0.315625     -0.688110      0.688110       224.312       225.000    
  12  0.301675      -1.19841      -2.61270       2.61270       222.242       224.855    
  13  0.496896     -0.699375      -1.52474       1.52474       222.694       224.219    
  14  0.692174     -0.367918     -0.802116      0.802116       225.238       226.041    
  15  0.717718     -0.331678     -0.723108      0.723108       225.094       225.817    
  16  0.867334E-01  -2.44492      -5.33028       5.33028       222.298       227.628    
  17  0.762934     -0.270584     -0.589912      0.589912       225.620       226.210    
  18  0.966741     -0.338246E-01 -0.737427E-01  0.737427E-01   225.392       225.466    
  19  0.375386     -0.979801      -2.13611       2.13611       225.417       227.553    
  20  0.878716     -0.129293     -0.281878      0.281878       224.359       224.641    
  21  0.238969      -1.43142      -3.12071       3.12071       225.985       229.105    
  22  0.939578     -0.623249E-01 -0.135878      0.135878       225.904       226.040    
  23  0.694828     -0.364091     -0.793772      0.793772       225.716       226.510    
  24  0.869149     -0.140241     -0.305745      0.305745       224.231       224.537    
  25  0.310010      -1.17115      -2.55328       2.55328       227.085       229.638    
  26  0.831753     -0.184219     -0.401626      0.401626       227.526       227.928    
  27  0.621050     -0.476344      -1.03850       1.03850       226.531       227.570    
  28  0.902274     -0.102837     -0.224201      0.224201       227.625       227.849    
  29  0.341345      -1.07486      -2.34336       2.34336       228.553       230.896    
  30  0.718647     -0.330385     -0.720288      0.720288       227.112       227.832    
  31  0.489532     -0.714305      -1.55729       1.55729       227.269       228.826    
  32  0.387793     -0.947282      -2.06522       2.06522       228.015       230.080    
  33  0.576785     -0.550285      -1.19970       1.19970       229.027       230.226    
  34  0.454048     -0.789552      -1.72134       1.72134       229.354       231.075    
  35  0.532728     -0.629744      -1.37294       1.37294       226.726       228.099    
  36  0.459832     -0.776895      -1.69375       1.69375       227.193       228.887    
  37  0.784910     -0.242187     -0.528003      0.528003       229.149       229.677    
  38  0.842297     -0.171622     -0.374161      0.374161       228.831       229.205    
  39  0.967556     -0.329823E-01 -0.719064E-01  0.719064E-01   229.951       230.023    
  40  0.126414      -2.06819      -4.50897       4.50897       230.057       234.566    
  41  0.407002     -0.898938      -1.95982       1.95982       226.974       228.934    
  42  0.903435     -0.101551     -0.221397      0.221397       227.025       227.246    
  43  0.430116     -0.843701      -1.83939       1.83939       230.153       231.993    
  44  0.675859     -0.391771     -0.854119      0.854119       226.541       227.395    
  45  0.444470     -0.810872      -1.76782       1.76782       231.389       233.157    
  46  0.728661     -0.316547     -0.690119      0.690119       229.130       229.820    
  47  0.143617      -1.94060      -4.23080       4.23080       230.737       234.968    
  48  0.729467E-01  -2.61803      -5.70769       5.70769       228.512       234.220    
  49  0.720547     -0.327745     -0.714532      0.714532       232.287       233.002    
  50  0.742905     -0.297187     -0.647911      0.647911       230.407       231.055    
  51  0.807330     -0.214023     -0.466603      0.466603       230.912       231.378    
  52  0.387442     -0.948190      -2.06720       2.06720       218.834       220.901    
loop,thermsimp(1:2)       63  0.329889E-01  0.597122    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331        228.40          1.28          1.03         23.96          0.09          0.06         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    228.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       63
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       64
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      330     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.792301E-01  0.792301E-01   220.777       220.856    
   2  0.186231      -1.68077      -3.66432       3.66432       220.276       223.941    
   3  0.127308      -2.06115      -4.49361       4.49361       218.834       223.327    
   4  0.305661      -1.18528      -2.58409       2.58409       221.160       223.744    
   5  0.685804     -0.377164     -0.822273      0.822273       219.936       220.758    
   6  0.713250     -0.337923     -0.736723      0.736723       222.075       222.812    
   7  0.562604     -0.575180      -1.25398       1.25398       223.674       224.928    
   8  0.410540     -0.890283      -1.94095       1.94095       222.694       224.635    
   9  0.667633     -0.404017     -0.880817      0.880817       224.231       225.112    
  10  0.111237      -2.19609      -4.78780       4.78780       224.359       229.147    
  11  0.987129     -0.129550E-01 -0.282438E-01  0.282438E-01   222.242       222.270    
  12  0.525481     -0.643442      -1.40280       1.40280       224.312       225.715    
  13  0.740553     -0.300358     -0.654825      0.654825       221.175       221.830    
  14  0.456748E-01  -3.08621      -6.72839       6.72839       225.392       232.120    
  15  0.831796     -0.184168     -0.401515      0.401515       225.094       225.496    
  16  0.798422     -0.225118     -0.490791      0.490791       225.904       226.395    
  17  0.985535     -0.145708E-01 -0.317664E-01  0.317664E-01   225.238       225.270    
  18  0.323340      -1.12905      -2.46150       2.46150       225.620       228.082    
  19  0.745026     -0.294336     -0.641696      0.641696       223.131       223.773    
  20  0.711871     -0.339858     -0.740942      0.740942       225.716       226.457    
  21  0.232875      -1.45725      -3.17703       3.17703       227.025       230.202    
  22  0.118192      -2.13545      -4.65560       4.65560       226.541       231.197    
  23  0.310641      -1.16912      -2.54885       2.54885       222.789       225.338    
  24  0.220899      -1.51005      -3.29214       3.29214       225.417       228.709    
  25  0.487797     -0.717856      -1.56503       1.56503       226.531       228.096    
  26  0.278848      -1.27709      -2.78424       2.78424       222.298       225.082    
  27  0.159355      -1.83662      -4.00410       4.00410       227.112       231.116    
  28  0.473156     -0.748329      -1.63147       1.63147       227.625       229.257    
  29  0.358980      -1.02449      -2.23354       2.23354       227.526       229.760    
  30  0.873266     -0.135515     -0.295442      0.295442       226.726       227.021    
  31  0.168201      -1.78260      -3.88632       3.88632       227.269       231.155    
  32  0.492581     -0.708096      -1.54375       1.54375       227.193       228.737    
  33  0.878329     -0.129734     -0.282840      0.282840       226.974       227.257    
  34  0.266147      -1.32371      -2.88588       2.88588       225.985       228.871    
  35  0.510485     -0.672394      -1.46592       1.46592       228.831       230.297    
  36  0.810074     -0.210630     -0.459205      0.459205       223.818       224.278    
  37  0.950614     -0.506467E-01 -0.110417      0.110417       227.085       227.195    
  38  0.329006      -1.11168      -2.42363       2.42363       229.149       231.573    
  39  0.934893E-01  -2.36991      -5.16675       5.16675       229.130       234.297    
  40  0.686671     -0.375900     -0.819518      0.819518       229.951       230.771    
  41  0.888060     -0.118716     -0.258819      0.258819       228.015       228.274    
  42  0.749618     -0.288192     -0.628301      0.628301       229.027       229.655    
  43  0.433754     -0.835279      -1.82103       1.82103       228.553       230.374    
  44  0.630341     -0.461494      -1.00612       1.00612       230.407       231.413    
  45  0.569388     -0.563194      -1.22785       1.22785       229.354       230.582    
  46  0.965872     -0.347242E-01 -0.757038E-01  0.757038E-01   230.912       230.987    
  47  0.797995     -0.225653     -0.491957      0.491957       230.153       230.645    
  48  0.716091     -0.333948     -0.728055      0.728055       232.287       233.016    
  49  0.339849      -1.07925      -2.35293       2.35293       231.389       233.742    
  50  0.202757      -1.59575      -3.47897       3.47897       228.512       231.991    
  51  0.266068      -1.32400      -2.88652       2.88652       230.057       232.943    
  52  0.985546E-01  -2.31715      -5.05172       5.05172       228.398       233.450    
loop,thermsimp(1:2)       64  0.792301E-01   3.66432    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332        230.07          1.22          1.02         24.04          0.04          0.06         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       64
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       65
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      331     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -1.86779       1.86779       219.936       221.804    
   2  0.350039      -1.04971      -2.28852       2.28852       220.777       223.065    
   3  0.872911     -0.135921     -0.296329      0.296329       221.175       221.471    
   4  0.829005     -0.187529     -0.408840      0.408840       222.242       222.651    
   5  0.201827      -1.60035      -3.48899       3.48899       222.075       225.564    
   6  0.735791     -0.306809     -0.668890      0.668890       218.834       219.503    
   7  0.985788     -0.143135E-01 -0.312055E-01  0.312055E-01   221.160       221.191    
   8  0.962727     -0.379858E-01 -0.828147E-01  0.828147E-01   223.131       223.214    
   9  0.796954     -0.226958     -0.494803      0.494803       220.276       220.771    
  10  0.563149     -0.574211      -1.25187       1.25187       223.818       225.070    
  11  0.776846     -0.252513     -0.550517      0.550517       222.694       223.245    
  12  0.921010     -0.822839E-01 -0.179391      0.179391       223.674       223.853    
  13  0.884938     -0.122238     -0.266498      0.266498       222.298       222.564    
  14  0.850974     -0.161373     -0.351817      0.351817       224.231       224.583    
  15  0.391065     -0.938882      -2.04690       2.04690       225.238       227.285    
  16  0.150921      -1.89100      -4.12266       4.12266       222.789       226.911    
  17  0.295162      -1.22023      -2.66028       2.66028       225.094       227.754    
  18  0.662567     -0.411634     -0.897424      0.897424       224.312       225.209    
  19  0.893994     -0.112056     -0.244298      0.244298       225.904       226.148    
  20  0.103282      -2.27029      -4.94957       4.94957       225.716       230.666    
  21  0.416341     -0.876251      -1.91036       1.91036       226.726       228.636    
  22  0.986101E-01  -2.31658      -5.05049       5.05049       227.085       232.135    
  23  0.617817E-01  -2.78415      -6.06986       6.06986       226.974       233.044    
  24  0.371945     -0.989010      -2.15619       2.15619       225.620       227.776    
  25  0.884755     -0.122444     -0.266947      0.266947       226.531       226.798    
  26  0.584237     -0.537449      -1.17172       1.17172       228.015       229.187    
  27  0.239981      -1.42719      -3.11150       3.11150       225.417       228.528    
  28  0.106477      -2.23982      -4.88315       4.88315       227.193       232.076    
  29  0.142954      -1.94523      -4.24089       4.24089       225.985       230.226    
  30  0.802284     -0.220292     -0.480270      0.480270       224.359       224.839    
  31  0.373571     -0.984648      -2.14668       2.14668       227.625       229.772    
  32  0.617091     -0.482739      -1.05244       1.05244       229.027       230.079    
  33  0.813617     -0.206266     -0.449690      0.449690       227.526       227.976    
  34  0.219787E-01  -3.81768      -8.32311       8.32311       227.025       235.348    
  35  0.398995     -0.918807      -2.00314       2.00314       228.831       230.834    
  36  0.906985     -0.976296E-01 -0.212847      0.212847       228.553       228.766    
  37  0.259146E-01  -3.65295      -7.96397       7.96397       229.354       237.318    
  38  0.347543      -1.05687      -2.30413       2.30413       230.153       232.457    
  39  0.879549     -0.128346     -0.279813      0.279813       229.951       230.231    
  40  0.618015     -0.481242      -1.04918       1.04918       230.912       231.961    
  41  0.173348      -1.75246      -3.82061       3.82061       227.112       230.932    
  42  0.324418      -1.12572      -2.45424       2.45424       227.269       229.723    
  43  0.426503     -0.852135      -1.85778       1.85778       226.541       228.399    
  44  0.672650     -0.396530     -0.864495      0.864495       230.407       231.272    
  45  0.500711     -0.691727      -1.50807       1.50807       229.149       230.657    
  46  0.457446     -0.782097      -1.70509       1.70509       228.512       230.217    
  47  0.408507     -0.895245      -1.95177       1.95177       225.392       227.344    
  48  0.649058     -0.432234     -0.942334      0.942334       230.057       230.999    
  49  0.275220      -1.29018      -2.81279       2.81279       232.287       235.100    
  50  0.706820     -0.346979     -0.756466      0.756466       228.398       229.155    
  51  0.596044     -0.517441      -1.12810       1.12810       231.389       232.517    
  52  0.362601      -1.01445      -2.21166       2.21166       230.073       232.285    
loop,thermsimp(1:2)       65   1.86779       2.28852    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333        217.36          1.26          1.02         23.99          0.09          0.07         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    334        215.65          1.03          0.99         24.05          0.10          0.06         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    215.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       65
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       66
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      333     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -1.62687       1.62687       218.834       220.461    
   2  0.162949E-01  -4.11691      -8.97547       8.97547       220.276       229.252    
   3  0.560104     -0.579632      -1.26368       1.26368       221.160       222.423    
   4  0.583629     -0.538490      -1.17399       1.17399       221.175       222.349    
   5  0.794243     -0.230366     -0.502232      0.502232       219.936       220.438    
   6  0.183626E-01  -3.99744      -8.71501       8.71501       222.298       231.013    
   7  0.642495     -0.442397     -0.964491      0.964491       222.242       223.206    
   8  0.611061E-02  -5.09773      -11.1138       11.1138       220.777       231.891    
   9  0.974115E-01  -2.32881      -5.07715       5.07715       223.131       228.209    
  10  0.817249E-01  -2.50440      -5.45996       5.45996       222.694       228.154    
  11  0.644422     -0.439401     -0.957959      0.957959       223.674       224.632    
  12  0.378181     -0.972383      -2.11994       2.11994       224.231       226.351    
  13  0.105422      -2.24978      -4.90486       4.90486       224.359       229.264    
  14  0.713647     -0.337367     -0.735510      0.735510       223.818       224.554    
  15  0.602100     -0.507333      -1.10606       1.10606       224.312       225.418    
  16  0.746624     -0.292194     -0.637026      0.637026       222.075       222.712    
  17  0.687673     -0.374442     -0.816340      0.816340       225.904       226.720    
  18  0.356323      -1.03192      -2.24974       2.24974       226.531       228.781    
  19  0.631203     -0.460128      -1.00315       1.00315       222.789       223.792    
  20  0.348432      -1.05431      -2.29856       2.29856       225.238       227.537    
  21  0.200848      -1.60521      -3.49959       3.49959       225.392       228.891    
  22  0.863860     -0.146345     -0.319053      0.319053       225.094       225.413    
  23  0.278415      -1.27864      -2.78763       2.78763       225.620       228.408    
  24  0.871038     -0.138069     -0.301012      0.301012       227.526       227.827    
  25  0.581010     -0.542987      -1.18379       1.18379       226.541       227.725    
  26  0.960519     -0.402815E-01 -0.878196E-01  0.878196E-01   225.417       225.504    
  27  0.104828      -2.25543      -4.91717       4.91717       226.726       231.643    
  28  0.907238     -0.973501E-01 -0.212238      0.212238       228.553       228.765    
  29  0.685005     -0.378330     -0.824815      0.824815       228.398       229.223    
  30  0.239566E-01  -3.73151      -8.13525       8.13525       228.015       236.150    
  31  0.643900     -0.440211     -0.959726      0.959726       227.269       228.228    
  32  0.526819     -0.640898      -1.39725       1.39725       227.625       229.022    
  33  0.463387     -0.769192      -1.67695       1.67695       229.027       230.704    
  34  0.847158E-01  -2.46845      -5.38159       5.38159       228.512       233.894    
  35  0.134368E-01  -4.30976      -9.39591       9.39591       225.985       235.381    
  36  0.141068      -1.95851      -4.26984       4.26984       229.951       234.221    
  37  0.239867      -1.42767      -3.11253       3.11253       229.149       232.262    
  38  0.317049      -1.14870      -2.50433       2.50433       225.716       228.221    
  39  0.925847     -0.770459E-01 -0.167972      0.167972       228.831       228.999    
  40  0.939258     -0.626649E-01 -0.136619      0.136619       227.112       227.248    
  41  0.111598      -2.19286      -4.78075       4.78075       230.057       234.837    
  42  0.357545      -1.02849      -2.24227       2.24227       230.407       232.649    
  43  0.902640     -0.102432     -0.223317      0.223317       230.912       231.135    
  44  0.914421     -0.894640E-01 -0.195045      0.195045       227.193       227.388    
  45  0.320420      -1.13812      -2.48127       2.48127       227.085       229.566    
  46  0.341333      -1.07490      -2.34344       2.34344       230.073       232.417    
  47  0.509727     -0.673879      -1.46916       1.46916       230.153       231.622    
  48  0.130581E-02  -6.64093      -14.4782       14.4782       231.389       245.867    
  49  0.105413      -2.24987      -4.90504       4.90504       226.974       231.879    
  50  0.743306     -0.296647     -0.646734      0.646734       232.287       232.934    
  51  0.114013      -2.17144      -4.73407       4.73407       227.025       231.759    
  52  0.225326      -1.49021      -3.24887       3.24887       215.645       218.894    
loop,thermsimp(1:2)       66   1.62687       8.97547    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335        220.37          1.27          1.03         23.95          0.08          0.06         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    220.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       66
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       67
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      334     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780     -0.742951      0.742951       215.645       216.388    
   2  0.492413     -0.708438      -1.54450       1.54450       219.936       221.480    
   3  0.156563      -1.85430      -4.04264       4.04264       218.834       222.876    
   4  0.185270      -1.68594      -3.67560       3.67560       221.175       224.851    
   5  0.685983     -0.376903     -0.821704      0.821704       221.160       221.981    
   6  0.518581     -0.656659      -1.43161       1.43161       222.075       223.507    
   7  0.430667     -0.842421      -1.83660       1.83660       222.242       224.078    
   8  0.748228     -0.290047     -0.632346      0.632346       222.789       223.421    
   9  0.348167      -1.05507      -2.30022       2.30022       223.818       226.119    
  10  0.281980E-01  -3.56850      -7.77987       7.77987       223.674       231.454    
  11  0.670749     -0.399360     -0.870664      0.870664       225.094       225.965    
  12  0.225031      -1.49152      -3.25173       3.25173       224.312       227.564    
  13  0.258016      -1.35474      -2.95352       2.95352       225.417       228.370    
  14  0.122388      -2.10056      -4.57953       4.57953       224.231       228.811    
  15  0.556210     -0.586609      -1.27890       1.27890       225.904       227.183    
  16  0.938933     -0.630108E-01 -0.137373      0.137373       227.112       227.249    
  17  0.440352     -0.820180      -1.78811       1.78811       227.193       228.981    
  18  0.779048     -0.249683     -0.544347      0.544347       225.238       225.783    
  19  0.929725     -0.728667E-01 -0.158860      0.158860       226.541       226.700    
  20  0.330740      -1.10642      -2.41217       2.41217       227.526       229.938    
  21  0.214890      -1.53763      -3.35226       3.35226       222.694       226.046    
  22  0.363221      -1.01274      -2.20793       2.20793       223.131       225.339    
  23  0.681309     -0.383740     -0.836610      0.836610       225.716       226.553    
  24  0.107313      -2.23200      -4.86610       4.86610       227.269       232.135    
  25  0.622524     -0.473973      -1.03333       1.03333       225.620       226.654    
  26  0.532378     -0.630402      -1.37437       1.37437       228.553       229.927    
  27  0.298562      -1.20878      -2.63532       2.63532       226.531       229.167    
  28  0.432099     -0.839100      -1.82936       1.82936       225.392       227.221    
  29  0.243978      -1.41068      -3.07549       3.07549       228.831       231.907    
  30  0.581243     -0.542587      -1.18292       1.18292       227.625       228.808    
  31  0.897127E-01  -2.41114      -5.25665       5.25665       228.398       233.655    
  32  0.738124     -0.303644     -0.661989      0.661989       220.276       220.938    
  33  0.462727     -0.770619      -1.68006       1.68006       224.359       226.039    
  34  0.984641E-01  -2.31806      -5.05372       5.05372       227.085       232.139    
  35  0.641923     -0.443287     -0.966432      0.966432       229.027       229.993    
  36  0.334628      -1.09474      -2.38669       2.38669       222.298       224.684    
  37  0.482851     -0.728048      -1.58725       1.58725       230.912       232.499    
  38  0.826279     -0.190822     -0.416021      0.416021       230.153       230.569    
  39  0.966417     -0.341596E-01 -0.744731E-01  0.744731E-01   226.726       226.800    
  40  0.236833      -1.44040      -3.14029       3.14029       227.025       230.165    
  41  0.274744      -1.29192      -2.81657       2.81657       226.974       229.790    
  42  0.310307      -1.17019      -2.55119       2.55119       220.777       223.328    
  43  0.697298     -0.360543     -0.786037      0.786037       229.149       229.935    
  44  0.239072      -1.43099      -3.11977       3.11977       230.073       233.193    
  45  0.809729     -0.211055     -0.460132      0.460132       230.407       230.867    
  46  0.651880     -0.427895     -0.932874      0.932874       232.287       233.220    
  47  0.515020     -0.663550      -1.44664       1.44664       228.512       229.959    
  48  0.359059      -1.02427      -2.23306       2.23306       229.951       232.185    
  49  0.516010E-02  -5.26680      -11.4824       11.4824       230.057       241.539    
  50  0.321807      -1.13380      -2.47186       2.47186       225.985       228.457    
  51  0.787972     -0.238293     -0.519515      0.519515       228.015       228.534    
  52  0.842264     -0.171662     -0.374249      0.374249       220.371       220.745    
loop,thermsimp(1:2)       67  0.742951       1.54450    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336        227.53          1.26          1.02         24.02          0.10          0.06         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    227.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       67
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       68
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      335     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -1.13169       1.13169       215.645       216.777    
   2  0.204294      -1.58819      -3.46250       3.46250       220.371       223.833    
   3  0.902141     -0.102985     -0.224522      0.224522       220.276       220.501    
   4  0.317306      -1.14789      -2.50257       2.50257       219.936       222.438    
   5  0.914914E-01  -2.39151      -5.21385       5.21385       221.160       226.374    
   6  0.362439      -1.01490      -2.21263       2.21263       218.834       221.046    
   7  0.284546      -1.25686      -2.74014       2.74014       220.777       223.517    
   8  0.752727     -0.284053     -0.619278      0.619278       222.789       223.408    
   9  0.972148     -0.282475E-01 -0.615837E-01  0.615837E-01   222.075       222.137    
  10  0.312417      -1.16342      -2.53642       2.53642       222.242       224.778    
  11  0.772549E-01  -2.56064      -5.58259       5.58259       222.298       227.880    
  12  0.190763      -1.65672      -3.61190       3.61190       221.175       224.787    
  13  0.829036     -0.187492     -0.408761      0.408761       223.131       223.540    
  14  0.309766      -1.17194      -2.55500       2.55500       225.238       227.793    
  15  0.691616     -0.368724     -0.803874      0.803874       225.094       225.898    
  16  0.177510      -1.72873      -3.76889       3.76889       224.359       228.128    
  17  0.848561     -0.164214     -0.358010      0.358010       222.694       223.052    
  18  0.464945     -0.765836      -1.66964       1.66964       223.818       225.488    
  19  0.626682     -0.467316      -1.01882       1.01882       225.716       226.735    
  20  0.451266     -0.795699      -1.73474       1.73474       225.620       227.355    
  21  0.161179E-01  -4.12783      -8.99927       8.99927       226.541       235.540    
  22  0.848853     -0.163869     -0.357260      0.357260       226.726       227.083    
  23  0.565946     -0.569256      -1.24106       1.24106       225.904       227.145    
  24  0.798567     -0.224937     -0.490396      0.490396       225.392       225.882    
  25  0.282371      -1.26453      -2.75687       2.75687       227.112       229.868    
  26  0.887219     -0.119663     -0.260884      0.260884       224.312       224.573    
  27  0.311981      -1.16481      -2.53946       2.53946       225.417       227.956    
  28  0.454937     -0.787596      -1.71708       1.71708       225.985       227.702    
  29  0.200774E-01  -3.90816      -8.52037       8.52037       228.015       236.535    
  30  0.549692     -0.598397      -1.30459       1.30459       227.625       228.930    
  31  0.928164     -0.745470E-01 -0.162524      0.162524       224.231       224.394    
  32  0.876026     -0.132360     -0.288564      0.288564       227.193       227.482    
  33  0.360538      -1.02016      -2.22410       2.22410       226.531       228.755    
  34  0.810484     -0.210124     -0.458101      0.458101       226.974       227.432    
  35  0.350387      -1.04872      -2.28636       2.28636       228.553       230.839    
  36  0.609257     -0.495514      -1.08029       1.08029       229.149       230.230    
  37  0.847473     -0.165497     -0.360807      0.360807       227.526       227.887    
  38  0.459433     -0.777763      -1.69564       1.69564       228.512       230.208    
  39  0.213778      -1.54282      -3.36357       3.36357       229.027       232.390    
  40  0.983077     -0.170677E-01 -0.372100E-01  0.372100E-01   227.025       227.062    
  41  0.719533     -0.329153     -0.717602      0.717602       230.153       230.871    
  42  0.317292      -1.14793      -2.50267       2.50267       230.407       232.910    
  43  0.300670      -1.20174      -2.61998       2.61998       223.674       226.294    
  44  0.486388     -0.720748      -1.57134       1.57134       228.831       230.403    
  45  0.309580      -1.17254      -2.55631       2.55631       227.269       229.825    
  46  0.111802      -2.19103      -4.77677       4.77677       227.085       231.862    
  47  0.913484     -0.904897E-01 -0.197281      0.197281       229.951       230.149    
  48  0.438377     -0.824676      -1.79792       1.79792       230.912       232.710    
  49  0.773114     -0.257329     -0.561016      0.561016       230.073       230.634    
  50  0.248259      -1.39328      -3.03757       3.03757       232.287       235.325    
  51  0.502855     -0.687454      -1.49875       1.49875       228.398       229.897    
  52  0.827610E-01  -2.49180      -5.43249       5.43249       227.530       232.963    
loop,thermsimp(1:2)       68   1.13169       3.46250    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337        231.31          1.28          1.04         23.99          0.05          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       68
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       69
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      336     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -1.78676       1.78676       215.645       217.432    
   2  0.752309     -0.284608     -0.620487      0.620487       220.276       220.897    
   3  0.209108      -1.56490      -3.41172       3.41172       218.834       222.245    
   4  0.842922     -0.170881     -0.372547      0.372547       222.075       222.447    
   5  0.161148      -1.82543      -3.97971       3.97971       219.936       223.915    
   6  0.601748     -0.507917      -1.10734       1.10734       222.694       223.802    
   7  0.890912     -0.115510     -0.251829      0.251829       222.789       223.040    
   8  0.631939     -0.458963      -1.00061       1.00061       220.777       221.777    
   9  0.144759E-01  -4.23527      -9.23351       9.23351       223.131       232.365    
  10  0.653698     -0.425110     -0.926803      0.926803       220.371       221.297    
  11  0.401463     -0.912639      -1.98969       1.98969       224.231       226.221    
  12  0.906126     -0.985765E-01 -0.214911      0.214911       224.312       224.527    
  13  0.480601E-01  -3.03530      -6.61741       6.61741       222.242       228.859    
  14  0.264260      -1.33082      -2.90139       2.90139       221.175       224.076    
  15  0.586033     -0.534379      -1.16503       1.16503       223.818       224.983    
  16  0.323072      -1.12988      -2.46330       2.46330       225.392       227.855    
  17  0.785147     -0.241884     -0.527342      0.527342       225.094       225.621    
  18  0.139165      -1.97210      -4.29947       4.29947       223.674       227.973    
  19  0.105818E-01  -4.54862      -9.91666       9.91666       221.160       231.076    
  20  0.896943     -0.108763     -0.237120      0.237120       225.716       225.954    
  21  0.854239     -0.157544     -0.343469      0.343469       227.025       227.368    
  22  0.566003     -0.569157      -1.24085       1.24085       226.726       227.967    
  23  0.566387     -0.568477      -1.23936       1.23936       225.904       227.143    
  24  0.414905     -0.879707      -1.91789       1.91789       225.620       227.538    
  25  0.173772      -1.75001      -3.81529       3.81529       226.974       230.789    
  26  0.884308E-01  -2.42554      -5.28803       5.28803       227.193       232.481    
  27  0.417457     -0.873573      -1.90452       1.90452       225.985       227.889    
  28  0.334615      -1.09477      -2.38677       2.38677       225.238       227.625    
  29  0.706024E-01  -2.65069      -5.77890       5.77890       222.298       228.077    
  30  0.996422     -0.358418E-02 -0.781404E-02  0.781404E-02   227.526       227.534    
  31  0.894500     -0.111491     -0.243066      0.243066       225.417       225.660    
  32  0.827855     -0.188917     -0.411867      0.411867       224.359       224.771    
  33  0.434964     -0.832492      -1.81496       1.81496       226.531       228.346    
  34  0.121450      -2.10825      -4.59630       4.59630       227.625       232.222    
  35  0.498977     -0.695195      -1.51563       1.51563       227.269       228.784    
  36  0.117961      -2.13740      -4.65985       4.65985       227.112       231.771    
  37  0.309211      -1.17373      -2.55891       2.55891       228.398       230.957    
  38  0.786265     -0.240461     -0.524242      0.524242       229.951       230.476    
  39  0.614330     -0.487222      -1.06222       1.06222       228.512       229.574    
  40  0.820857     -0.197407     -0.430376      0.430376       229.149       229.580    
  41  0.670448     -0.399809     -0.871642      0.871642       228.831       229.703    
  42  0.742403     -0.297863     -0.649386      0.649386       230.073       230.723    
  43  0.760912E-01  -2.57582      -5.61567       5.61567       228.553       234.168    
  44  0.709677     -0.342945     -0.747671      0.747671       230.153       230.901    
  45  0.943449     -0.582133E-01 -0.126914      0.126914       227.085       227.212    
  46  0.176370      -1.73517      -3.78294       3.78294       229.027       232.810    
  47  0.866890     -0.142843     -0.311420      0.311420       230.912       231.223    
  48  0.711056     -0.341004     -0.743440      0.743440       230.407       231.151    
  49  0.929667E-01  -2.37551      -5.17897       5.17897       227.530       232.709    
  50  0.960091     -0.407270E-01 -0.887909E-01  0.887909E-01   232.287       232.376    
  51  0.948380     -0.530000E-01 -0.115548      0.115548       226.541       226.657    
  52  0.257449      -1.35693      -2.95831       2.95831       231.314       234.272    
loop,thermsimp(1:2)       69   1.78676      0.620487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338        228.01          1.25          1.02         23.95          0.09          0.06         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    228.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       69
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       70
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      337     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.254601E-01  0.254601E-01   215.645       215.671    
   2  0.482301     -0.729186      -1.58973       1.58973       220.276       221.866    
   3  0.546964     -0.603372      -1.31544       1.31544       220.371       221.686    
   4  0.543918     -0.608957      -1.32762       1.32762       220.777       222.104    
   5  0.427641     -0.849472      -1.85198       1.85198       218.834       220.686    
   6  0.498345     -0.696462      -1.51839       1.51839       222.075       223.593    
   7  0.989308     -0.107494E-01 -0.234352E-01  0.234352E-01   222.789       222.812    
   8  0.658822     -0.417302     -0.909779      0.909779       222.694       223.604    
   9  0.917808     -0.857673E-01 -0.186985      0.186985       219.936       220.123    
  10  0.914490E-04  -9.29973      -20.2748       20.2748       221.175       241.450    
  11  0.989901     -0.101499E-01 -0.221283E-01  0.221283E-01   224.312       224.334    
  12  0.558183     -0.583069      -1.27118       1.27118       224.359       225.630    
  13  0.706994     -0.346733     -0.755930      0.755930       223.818       224.574    
  14  0.599152     -0.512240      -1.11676       1.11676       225.094       226.211    
  15  0.845909     -0.167343     -0.364832      0.364832       225.417       225.782    
  16  0.655384     -0.422534     -0.921186      0.921186       225.716       226.638    
  17  0.412232E-01  -3.18875      -6.95196       6.95196       224.231       231.183    
  18  0.495401     -0.702387      -1.53131       1.53131       226.541       228.072    
  19  0.378829     -0.970671      -2.11621       2.11621       225.904       228.020    
  20  0.653665E-02  -5.03033      -10.9669       10.9669       227.085       238.052    
  21  0.782670     -0.245045     -0.534234      0.534234       227.025       227.559    
  22  0.945547     -0.559921E-01 -0.122071      0.122071       227.526       227.648    
  23  0.969857     -0.306063E-01 -0.667264E-01  0.667264E-01   225.620       225.687    
  24  0.822249     -0.195712     -0.426681      0.426681       225.238       225.665    
  25  0.265012E-01  -3.63056      -7.91517       7.91517       225.392       233.307    
  26  0.360432E-01  -3.32304      -7.24471       7.24471       225.985       233.229    
  27  0.796418     -0.227631     -0.496269      0.496269       226.726       227.222    
  28  0.292313E-01  -3.53252      -7.70141       7.70141       223.674       231.375    
  29  0.227321      -1.48139      -3.22966       3.22966       222.298       225.527    
  30  0.812637     -0.207471     -0.452317      0.452317       226.531       226.984    
  31  0.930544     -0.719857E-01 -0.156940      0.156940       227.269       227.426    
  32  0.674873     -0.393231     -0.857302      0.857302       222.242       223.099    
  33  0.264030      -1.33169      -2.90328       2.90328       228.512       231.415    
  34  0.807464     -0.213856     -0.466239      0.466239       229.149       229.616    
  35  0.653731     -0.425060     -0.926694      0.926694       228.831       229.758    
  36  0.858536     -0.152527     -0.332531      0.332531       229.951       230.284    
  37  0.538887     -0.618250      -1.34788       1.34788       230.073       231.421    
  38  0.468049     -0.759182      -1.65513       1.65513       226.974       228.629    
  39  0.401324     -0.912987      -1.99045       1.99045       230.153       232.144    
  40  0.363356      -1.01237      -2.20712       2.20712       228.398       230.605    
  41  0.924933     -0.780342E-01 -0.170126      0.170126       221.160       221.330    
  42  0.797289     -0.226538     -0.493887      0.493887       230.407       230.901    
  43  0.200097      -1.60895      -3.50775       3.50775       230.912       234.419    
  44  0.686219     -0.376559     -0.820954      0.820954       227.112       227.933    
  45  0.895629     -0.110230     -0.240317      0.240317       227.625       227.866    
  46  0.331830      -1.10313      -2.40499       2.40499       223.131       225.536    
  47  0.967018     -0.335379E-01 -0.731175E-01  0.731175E-01   232.287       232.361    
  48  0.268282      -1.31572      -2.86846       2.86846       227.193       230.062    
  49  0.472399     -0.749931      -1.63496       1.63496       227.530       229.165    
  50  0.399276E-01  -3.22069      -7.02158       7.02158       229.027       236.048    
  51  0.956493     -0.444820E-01 -0.969775E-01  0.969775E-01   228.553       228.650    
  52  0.444161     -0.811569      -1.76934       1.76934       228.015       229.784    
loop,thermsimp(1:2)       70  0.254601E-01   1.58973    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339        227.98          1.27          1.04         24.06          0.03          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    227.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       70
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       71
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      338     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575     -0.328277      0.328277       215.645       215.974    
   2  0.573661     -0.555717      -1.21155       1.21155       219.936       221.147    
   3  0.499290     -0.694569      -1.51426       1.51426       218.834       220.348    
   4  0.677563     -0.389253     -0.848630      0.848630       221.160       222.008    
   5  0.476566     -0.741149      -1.61582       1.61582       220.371       221.986    
   6  0.153036      -1.87708      -4.09232       4.09232       220.276       224.369    
   7  0.626270     -0.467973      -1.02025       1.02025       220.777       221.797    
   8  0.794744     -0.229735     -0.500857      0.500857       222.789       223.290    
   9  0.111868E-01  -4.49302      -9.79545       9.79545       222.242       232.037    
  10  0.643880     -0.440243     -0.959795      0.959795       222.075       223.035    
  11  0.634705     -0.454595     -0.991084      0.991084       222.694       223.685    
  12  0.653568     -0.425308     -0.927236      0.927236       224.312       225.239    
  13  0.888231     -0.118524     -0.258400      0.258400       223.818       224.077    
  14  0.681775E-01  -2.68564      -5.85509       5.85509       222.298       228.153    
  15  0.241248      -1.42193      -3.10002       3.10002       223.131       226.231    
  16  0.208857      -1.56610      -3.41434       3.41434       224.359       227.773    
  17  0.652439     -0.427038     -0.931005      0.931005       225.238       226.169    
  18  0.489833     -0.713691      -1.55595       1.55595       225.620       227.176    
  19  0.719225     -0.329581     -0.718534      0.718534       225.417       226.135    
  20  0.924762     -0.782189E-01 -0.170529      0.170529       225.094       225.265    
  21  0.845502     -0.167825     -0.365883      0.365883       225.716       226.082    
  22  0.665989     -0.406482     -0.886191      0.886191       226.531       227.417    
  23  0.378562     -0.971376      -2.11774       2.11774       226.726       228.844    
  24  0.396889     -0.924098      -2.01467       2.01467       227.269       229.283    
  25  0.158089      -1.84460      -4.02150       4.02150       227.025       231.046    
  26  0.590577     -0.526655      -1.14819       1.14819       227.526       228.674    
  27  0.949513     -0.518061E-01 -0.112945      0.112945       227.625       227.738    
  28  0.518198     -0.657398      -1.43322       1.43322       227.112       228.545    
  29  0.551080     -0.595875      -1.29909       1.29909       225.904       227.203    
  30  0.986285     -0.138097E-01 -0.301073E-01  0.301073E-01   226.541       226.571    
  31  0.920142     -0.832276E-01 -0.181449      0.181449       226.974       227.155    
  32  0.133201      -2.01590      -4.39496       4.39496       228.553       232.948    
  33  0.584507     -0.536987      -1.17071       1.17071       227.530       228.701    
  34  0.790583     -0.234984     -0.512300      0.512300       229.149       229.662    
  35  0.702664     -0.352876     -0.769322      0.769322       228.831       229.601    
  36  0.148885      -1.90458      -4.15227       4.15227       228.015       232.167    
  37  0.290436      -1.23637      -2.69547       2.69547       227.193       229.889    
  38  0.638249     -0.449027     -0.978946      0.978946       229.951       230.930    
  39  0.381605     -0.963369      -2.10029       2.10029       228.398       230.498    
  40  0.823069     -0.194716     -0.424509      0.424509       230.407       230.832    
  41  0.492318     -0.708630      -1.54492       1.54492       224.231       225.776    
  42  0.773199     -0.257218     -0.560774      0.560774       223.674       224.234    
  43  0.289475E-01  -3.54227      -7.72268       7.72268       228.512       236.235    
  44  0.355683      -1.03371      -2.25365       2.25365       230.073       232.327    
  45  0.160396      -1.83011      -3.98991       3.98991       230.153       234.143    
  46  0.972861     -0.275140E-01 -0.599847E-01  0.599847E-01   232.287       232.347    
  47  0.781938E-02  -4.85115      -10.5762       10.5762       225.985       236.561    
  48  0.225299      -1.49033      -3.24914       3.24914       225.392       228.641    
  49  0.631686     -0.459363      -1.00148       1.00148       230.912       231.913    
  50  0.212316      -1.54968      -3.37853       3.37853       229.027       232.405    
  51  0.673664     -0.395024     -0.861211      0.861211       227.085       227.946    
  52  0.728322     -0.317012     -0.691134      0.691134       227.983       228.675    
loop,thermsimp(1:2)       71  0.328277       1.21155    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340        221.99          1.27          1.03         23.95          0.14          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    221.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       71
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       72
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      339     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -1.78605       1.78605       215.645       217.431    
   2  0.202294      -1.59803      -3.48395       3.48395       218.834       222.318    
   3  0.873786     -0.134920     -0.294146      0.294146       219.936       220.230    
   4  0.262141      -1.33887      -2.91894       2.91894       220.777       223.696    
   5  0.342005      -1.07293      -2.33914       2.33914       220.371       222.710    
   6  0.421217     -0.864607      -1.88497       1.88497       221.160       223.045    
   7  0.618489     -0.480477      -1.04751       1.04751       222.075       223.122    
   8  0.412552     -0.885393      -1.93029       1.93029       222.789       224.719    
   9  0.951192     -0.500396E-01 -0.109094      0.109094       222.694       222.803    
  10  0.298546      -1.20883      -2.63543       2.63543       223.818       226.454    
  11  0.805120     -0.216763     -0.472576      0.472576       223.674       224.146    
  12  0.208146      -1.56951      -3.42177       3.42177       220.276       223.698    
  13  0.924021     -0.790209E-01 -0.172277      0.172277       224.312       224.484    
  14  0.447624     -0.803802      -1.75241       1.75241       225.094       226.847    
  15  0.667709     -0.403903     -0.880569      0.880569       224.231       225.112    
  16  0.767295E-01  -2.56747      -5.59746       5.59746       225.716       231.314    
  17  0.301582      -1.19871      -2.61337       2.61337       225.417       228.030    
  18  0.788580     -0.237522     -0.517833      0.517833       225.238       225.756    
  19  0.887020     -0.119888     -0.261373      0.261373       223.131       223.393    
  20  0.233035E-01  -3.75915      -8.19551       8.19551       226.541       234.736    
  21  0.899320     -0.106116     -0.231350      0.231350       226.974       227.205    
  22  0.144480      -1.93461      -4.21774       4.21774       225.620       229.838    
  23  0.274629      -1.29233      -2.81748       2.81748       225.904       228.721    
  24  0.831597     -0.184407     -0.402034      0.402034       226.531       226.933    
  25  0.388827     -0.944620      -2.05941       2.05941       227.625       229.685    
  26  0.257578      -1.35643      -2.95723       2.95723       224.359       227.316    
  27  0.427791     -0.849120      -1.85121       1.85121       227.085       228.936    
  28  0.837664E-01  -2.47972      -5.40616       5.40616       222.298       227.704    
  29  0.782727     -0.244972     -0.534074      0.534074       227.112       227.646    
  30  0.259676E-01  -3.65091      -7.95952       7.95952       225.392       233.351    
  31  0.166181      -1.79468      -3.91267       3.91267       227.526       231.439    
  32  0.360749      -1.01957      -2.22282       2.22282       227.983       230.206    
  33  0.369697     -0.995071      -2.16940       2.16940       227.530       229.700    
  34  0.959392     -0.414553E-01 -0.903786E-01  0.903786E-01   226.726       226.816    
  35  0.449170     -0.800353      -1.74489       1.74489       227.269       229.013    
  36  0.655790E-02  -5.02708      -10.9598       10.9598       228.831       239.791    
  37  0.133569      -2.01313      -4.38893       4.38893       229.149       233.538    
  38  0.282061      -1.26563      -2.75927       2.75927       227.193       229.952    
  39  0.431813     -0.839762      -1.83081       1.83081       228.398       230.229    
  40  0.713174     -0.338031     -0.736957      0.736957       230.407       231.144    
  41  0.511305     -0.670790      -1.46242       1.46242       229.951       231.414    
  42  0.264485      -1.32997      -2.89954       2.89954       227.025       229.924    
  43  0.779298     -0.249362     -0.543646      0.543646       230.912       231.455    
  44  0.709352E-02  -4.94857      -10.7886       10.7886       222.242       233.031    
  45  0.770402     -0.260843     -0.568675      0.568675       228.015       228.584    
  46  0.694393     -0.364718     -0.795139      0.795139       230.073       230.868    
  47  0.589268E-01  -2.83146      -6.17300       6.17300       232.287       238.460    
  48  0.817644     -0.201328     -0.438925      0.438925       229.027       229.466    
  49  0.990168     -0.988073E-02 -0.215415E-01  0.215415E-01   228.553       228.574    
  50  0.733536E-01  -2.61246      -5.69556       5.69556       230.153       235.849    
  51  0.781472     -0.246575     -0.537571      0.537571       228.512       229.050    
  52  0.582548     -0.540344      -1.17803       1.17803       221.991       223.169    
loop,thermsimp(1:2)       72   1.78605       3.48395    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341        224.06          1.05          0.98         23.72          0.56          0.05         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    224.06        2.600     -1.644      5.291     -100.0      1.140    
                     -0.4764      2.886     -100.0      3.539     0.9211    
                       1.054     -1.209      1.841      0.000      0.000    
                      -1.613      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.814     -3.620     -6.332     -2.625    
                      -12.66     -2.949      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.8396E-01-0.5113E-01  0.000    -0.6021    
                     -0.3118    -0.1518    -0.1515    -0.2258     0.1584E-03

                      -1.429    -0.6039      0.000    -0.1714    -0.8451E-01
                      0.8541E-01 0.5552E-01-0.4187E-01-0.5403E-01-0.7502E-01
                      0.8317E-01 0.2280E-01-0.3183     -1.679      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.215      9.027     -7039.     -4.000    
                     -0.8497E-01 0.3706      8.997      8.523     -4904.    

                      -4.000      1.018    -0.4549      8.699      9.101    
                      -6912.     -4.000    -0.1146    -0.9431      9.667    
                       8.765     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    224.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       72
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       73
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      340     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326     -0.465083      0.465083       215.645       216.110    
   2  0.554495     -0.589697      -1.28563       1.28563       219.936       221.221    
   3  0.997056     -0.294851E-02 -0.642818E-02  0.642818E-02   218.834       218.840    
   4  0.901183E-01  -2.40663      -5.24682       5.24682       220.371       225.617    
   5  0.296736      -1.21491      -2.64869       2.64869       222.694       225.343    
   6  0.907820     -0.967094E-01 -0.210841      0.210841       221.160       221.371    
   7  0.325542      -1.12226      -2.44670       2.44670       222.075       224.522    
   8  0.947537     -0.538896E-01 -0.117487      0.117487       221.991       222.109    
   9  0.378276     -0.972130      -2.11939       2.11939       223.131       225.251    
  10  0.985613     -0.144920E-01 -0.315946E-01  0.315946E-01   220.777       220.808    
  11  0.167434      -1.78717      -3.89629       3.89629       220.276       224.173    
  12  0.693849E-01  -2.66809      -5.81682       5.81682       223.674       229.490    
  13  0.434983     -0.832447      -1.81486       1.81486       224.312       226.127    
  14  0.998656     -0.134491E-02 -0.293210E-02  0.293210E-02   222.789       222.792    
  15  0.650302     -0.430318     -0.938157      0.938157       224.231       225.169    
  16  0.152610      -1.87987      -4.09840       4.09840       225.238       229.337    
  17  0.273947      -1.29482      -2.82290       2.82290       223.818       226.641    
  18  0.990471     -0.957469E-02 -0.208742E-01  0.208742E-01   226.726       226.747    
  19  0.684493     -0.379077     -0.826444      0.826444       225.094       225.921    
  20  0.864467E-01  -2.44823      -5.33750       5.33750       226.531       231.869    
  21  0.546085     -0.604980      -1.31895       1.31895       226.974       228.293    
  22  0.246642      -1.39982      -3.05181       3.05181       224.359       227.411    
  23  0.484505     -0.724627      -1.57980       1.57980       227.112       228.691    
  24  0.567359     -0.566763      -1.23563       1.23563       222.298       223.533    
  25  0.564371     -0.572043      -1.24714       1.24714       225.417       226.664    
  26  0.825604     -0.191640     -0.417805      0.417805       228.553       228.971    
  27  0.302493      -1.19570      -2.60680       2.60680       228.015       230.622    
  28  0.630396     -0.461407      -1.00594       1.00594       225.904       226.910    
  29  0.886734     -0.120210     -0.262076      0.262076       227.085       227.347    
  30  0.389345     -0.943288      -2.05651       2.05651       227.269       229.325    
  31  0.181391      -1.70710      -3.72173       3.72173       228.512       232.234    
  32  0.933221     -0.691132E-01 -0.150677      0.150677       229.027       229.177    
  33  0.169237E-01  -4.07904      -8.89292       8.89292       227.625       236.518    
  34  0.757788     -0.277351     -0.604667      0.604667       227.530       228.135    
  35  0.300993E-01  -3.50325      -7.63761       7.63761       225.620       233.258    
  36  0.395621     -0.927300      -2.02165       2.02165       227.025       229.046    
  37  0.459505     -0.777605      -1.69529       1.69529       227.193       228.888    
  38  0.733176     -0.310370     -0.676653      0.676653       227.983       228.660    
  39  0.575459     -0.552587      -1.20472       1.20472       228.398       229.603    
  40  0.560889     -0.578233      -1.26063       1.26063       230.073       231.334    
  41  0.428351     -0.847812      -1.84836       1.84836       230.407       232.256    
  42  0.553832     -0.590895      -1.28824       1.28824       225.716       227.005    
  43  0.581118     -0.542801      -1.18339       1.18339       229.951       231.135    
  44  0.319195E-01  -3.44454      -7.50961       7.50961       227.526       235.036    
  45  0.224512E-01  -3.79641      -8.27674       8.27674       230.912       239.188    
  46  0.113637E-01  -4.47733      -9.76125       9.76125       222.242       232.003    
  47  0.889134     -0.117508     -0.256185      0.256185       225.392       225.648    
  48  0.422937     -0.860531      -1.87609       1.87609       229.149       231.025    
  49  0.479928     -0.734119      -1.60049       1.60049       226.541       228.141    
  50  0.813133     -0.206861     -0.450987      0.450987       230.153       230.604    
  51  0.544683     -0.607551      -1.32455       1.32455       232.287       233.612    
  52  0.694184E-01  -2.66760      -5.81577       5.81577       224.063       229.879    
loop,thermsimp(1:2)       73  0.465083       1.28563    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342        222.57          0.99          0.98         23.82          0.48          0.05         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    222.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       73
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       74
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      341     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889     -0.254836      0.254836       215.645       215.900    
   2  0.480213     -0.733525      -1.59919       1.59919       218.834       220.433    
   3  0.226156      -1.48653      -3.24086       3.24086       220.777       224.018    
   4  0.633402     -0.456651     -0.995566      0.995566       219.936       220.931    
   5  0.925311     -0.776258E-01 -0.169236      0.169236       221.160       221.329    
   6  0.498405     -0.696343      -1.51813       1.51813       221.991       223.509    
   7  0.133283      -2.01528      -4.39361       4.39361       222.789       227.182    
   8  0.657074E-01  -2.72254      -5.93555       5.93555       222.298       228.233    
   9  0.726758     -0.319162     -0.695821      0.695821       220.276       220.972    
  10  0.398365     -0.920388      -2.00658       2.00658       222.075       224.082    
  11  0.321047E-01  -3.43875      -7.49699       7.49699       224.231       231.728    
  12  0.276307      -1.28624      -2.80420       2.80420       223.131       225.936    
  13  0.483740     -0.726208      -1.58324       1.58324       222.694       224.277    
  14  0.224589      -1.49348      -3.25601       3.25601       220.371       223.627    
  15  0.832041     -0.183874     -0.400872      0.400872       225.392       225.793    
  16  0.939301     -0.626192E-01 -0.136519      0.136519       225.094       225.231    
  17  0.624052     -0.471522      -1.02799       1.02799       224.312       225.340    
  18  0.172753      -1.75589      -3.82811       3.82811       223.818       227.647    
  19  0.468323     -0.758597      -1.65385       1.65385       225.417       227.071    
  20  0.963461     -0.372229E-01 -0.811514E-01  0.811514E-01   226.726       226.807    
  21  0.812092     -0.208142     -0.453780      0.453780       225.904       226.358    
  22  0.376764     -0.976137      -2.12812       2.12812       225.716       227.845    
  23  0.791872E-01  -2.53594      -5.52873       5.52873       227.085       232.614    
  24  0.237003      -1.43968      -3.13872       3.13872       224.359       227.498    
  25  0.320094      -1.13914      -2.48350       2.48350       227.530       230.014    
  26  0.821410E-01  -2.49932      -5.44888       5.44888       226.541       231.990    
  27  0.789147     -0.236802     -0.516264      0.516264       226.974       227.490    
  28  0.734353E-01  -2.61135      -5.69313       5.69313       227.983       233.677    
  29  0.226401      -1.48545      -3.23850       3.23850       227.112       230.350    
  30  0.380831     -0.965399      -2.10471       2.10471       227.193       229.298    
  31  0.264857      -1.32857      -2.89647       2.89647       228.553       231.449    
  32  0.246167      -1.40174      -3.05601       3.05601       227.025       230.081    
  33  0.142133      -1.95099      -4.25346       4.25346       229.027       233.280    
  34  0.123438E-01  -4.39460      -9.58088       9.58088       227.269       236.849    
  35  0.853289     -0.158657     -0.345895      0.345895       225.238       225.584    
  36  0.418603     -0.870831      -1.89854       1.89854       223.674       225.572    
  37  0.235242      -1.44714      -3.15498       3.15498       228.398       231.553    
  38  0.841712     -0.172317     -0.375676      0.375676       224.063       224.439    
  39  0.113373      -2.17707      -4.74634       4.74634       230.153       234.900    
  40  0.617966     -0.481322      -1.04935       1.04935       228.015       229.064    
  41  0.149268      -1.90202      -4.14668       4.14668       229.149       233.296    
  42  0.811010     -0.209475     -0.456687      0.456687       229.951       230.408    
  43  0.571477     -0.559531      -1.21986       1.21986       230.073       231.293    
  44  0.105494      -2.24911      -4.90338       4.90338       226.531       231.435    
  45  0.709548     -0.343127     -0.748067      0.748067       222.242       222.990    
  46  0.535895     -0.623816      -1.36001       1.36001       228.512       229.872    
  47  0.137736      -1.98242      -4.32197       4.32197       230.407       234.729    
  48  0.666779     -0.405297     -0.883608      0.883608       225.620       226.504    
  49  0.326487      -1.11936      -2.44038       2.44038       232.287       234.728    
  50  0.461090     -0.774162      -1.68779       1.68779       227.526       229.214    
  51  0.246088      -1.40207      -3.05671       3.05671       227.625       230.682    
  52  0.308348      -1.17653      -2.56500       2.56500       222.566       225.131    
loop,thermsimp(1:2)       74  0.254836       1.59919    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343        231.73          1.04          0.99         23.73          0.49          0.05         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       74
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       75
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      342     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264     -0.953300      0.953300       215.645       216.599    
   2  0.108032      -2.22533      -4.85154       4.85154       218.834       223.685    
   3  0.908790     -0.956413E-01 -0.208512      0.208512       219.936       220.144    
   4  0.987883     -0.121914E-01 -0.265790E-01  0.265790E-01   220.276       220.303    
   5  0.318380      -1.14451      -2.49520       2.49520       221.160       223.655    
   6  0.924426     -0.785824E-01 -0.171321      0.171321       222.242       222.413    
   7  0.965220     -0.353996E-01 -0.771763E-01  0.771763E-01   221.991       222.068    
   8  0.852248     -0.159878     -0.348558      0.348558       220.371       220.719    
   9  0.329186      -1.11113      -2.42244       2.42244       220.777       223.199    
  10  0.282479      -1.26415      -2.75604       2.75604       222.075       224.831    
  11  0.818943     -0.199740     -0.435464      0.435464       222.694       223.130    
  12  0.842569     -0.171300     -0.373459      0.373459       224.063       224.437    
  13  0.370966     -0.991644      -2.16193       2.16193       222.566       224.728    
  14  0.362233      -1.01547      -2.21387       2.21387       225.094       227.308    
  15  0.356944E-01  -3.33276      -7.26592       7.26592       224.312       231.578    
  16  0.149119      -1.90301      -4.14885       4.14885       223.674       227.822    
  17  0.127170      -2.06223      -4.49598       4.49598       225.238       229.734    
  18  0.589256     -0.528895      -1.15307       1.15307       225.392       226.545    
  19  0.702139     -0.353624     -0.770953      0.770953       223.131       223.902    
  20  0.713819     -0.337127     -0.734986      0.734986       225.904       226.639    
  21  0.121783      -2.10552      -4.59034       4.59034       225.620       230.211    
  22  0.992321     -0.770837E-02 -0.168054E-01  0.168054E-01   226.726       226.743    
  23  0.622746     -0.473616      -1.03255       1.03255       225.417       226.449    
  24  0.388486     -0.945499      -2.06133       2.06133       222.789       224.850    
  25  0.365204      -1.00730      -2.19606       2.19606       226.974       229.170    
  26  0.416566     -0.875710      -1.90918       1.90918       224.359       226.268    
  27  0.250735      -1.38336      -3.01592       3.01592       223.818       226.834    
  28  0.243824      -1.41131      -3.07687       3.07687       225.716       228.793    
  29  0.177195      -1.73050      -3.77275       3.77275       222.298       226.070    
  30  0.723685     -0.323399     -0.705058      0.705058       228.015       228.720    
  31  0.157256      -1.84988      -4.03301       4.03301       227.526       231.559    
  32  0.941988     -0.597623E-01 -0.130291      0.130291       227.193       227.323    
  33  0.110785      -2.20016      -4.79668       4.79668       228.512       233.309    
  34  0.200758      -1.60566      -3.50057       3.50057       227.530       231.031    
  35  0.873323     -0.135450     -0.295301      0.295301       227.025       227.320    
  36  0.842283     -0.171639     -0.374198      0.374198       227.112       227.486    
  37  0.326633      -1.11892      -2.43941       2.43941       229.951       232.391    
  38  0.648559     -0.433003     -0.944011      0.944011       227.625       228.569    
  39  0.460689E-01  -3.07762      -6.70966       6.70966       230.073       236.783    
  40  0.676614     -0.390654     -0.851683      0.851683       226.531       227.383    
  41  0.863029     -0.147307     -0.321151      0.321151       228.553       228.874    
  42  0.646727     -0.435831     -0.950176      0.950176       228.398       229.348    
  43  0.310616      -1.16920      -2.54902       2.54902       224.231       226.780    
  44  0.521840     -0.650394      -1.41796       1.41796       226.541       227.959    
  45  0.381245     -0.964312      -2.10234       2.10234       227.085       229.187    
  46  0.815908     -0.203453     -0.443559      0.443559       229.027       229.470    
  47  0.209395E-01  -3.86612      -8.42871       8.42871       229.149       237.578    
  48  0.800991E-01  -2.52449      -5.50376       5.50376       227.983       233.487    
  49  0.824204     -0.193337     -0.421504      0.421504       232.287       232.709    
  50  0.828636     -0.187975     -0.409813      0.409813       230.407       230.817    
  51  0.609810     -0.494608      -1.07832       1.07832       230.153       231.232    
  52  0.793631     -0.231137     -0.503913      0.503913       231.733       232.237    
loop,thermsimp(1:2)       75  0.953300       4.85154    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344        219.80          1.09          0.98         23.56          0.52          0.05         26.21
Just calling func    0   0         26.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    219.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       75
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       76
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      343     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -3.48242       3.48242       215.645       219.128    
   2  0.337724      -1.08553      -2.36661       2.36661       219.936       222.302    
   3  0.870295     -0.138923     -0.302873      0.302873       220.276       220.579    
   4  0.837087     -0.177827     -0.387689      0.387689       220.371       220.758    
   5  0.512110     -0.669215      -1.45899       1.45899       221.991       223.450    
   6  0.998742     -0.125879E-02 -0.274435E-02  0.274435E-02   222.242       222.245    
   7  0.203490      -1.59214      -3.47110       3.47110       222.694       226.165    
   8  0.525951E-01  -2.94513      -6.42083       6.42083       220.777       227.198    
   9  0.474810     -0.744841      -1.62386       1.62386       221.160       222.784    
  10  0.440755     -0.819266      -1.78612       1.78612       218.834       220.620    
  11  0.225689      -1.48860      -3.24537       3.24537       223.131       226.377    
  12  0.902704     -0.102360     -0.223160      0.223160       224.063       224.286    
  13  0.663331     -0.410481     -0.894909      0.894909       222.566       223.461    
  14  0.511480     -0.670447      -1.46167       1.46167       222.075       223.537    
  15  0.625297     -0.469528      -1.02364       1.02364       222.789       223.812    
  16  0.812907     -0.207139     -0.451594      0.451594       222.298       222.749    
  17  0.979453     -0.207607E-01 -0.452613E-01  0.452613E-01   224.359       224.404    
  18  0.255329      -1.36520      -2.97635       2.97635       225.417       228.393    
  19  0.856654     -0.154722     -0.337316      0.337316       225.392       225.729    
  20  0.610394     -0.493650      -1.07623       1.07623       225.904       226.980    
  21  0.703614     -0.351525     -0.766376      0.766376       226.726       227.492    
  22  0.623403     -0.472562      -1.03025       1.03025       224.231       225.262    
  23  0.375727     -0.978893      -2.13413       2.13413       223.818       225.953    
  24  0.870528     -0.138656     -0.302290      0.302290       225.094       225.396    
  25  0.175838E-01  -4.04078      -8.80950       8.80950       227.025       235.834    
  26  0.237914      -1.43585      -3.13036       3.13036       227.193       230.323    
  27  0.464352     -0.767112      -1.67242       1.67242       226.531       228.204    
  28  0.776873     -0.252478     -0.550440      0.550440       227.112       227.662    
  29  0.380679     -0.965800      -2.10559       2.10559       223.674       225.779    
  30  0.391295     -0.938295      -2.04562       2.04562       226.541       228.587    
  31  0.369488     -0.995636      -2.17064       2.17064       227.625       229.796    
  32  0.302398      -1.19601      -2.60748       2.60748       228.015       230.622    
  33  0.809138     -0.211786     -0.461725      0.461725       225.716       226.178    
  34  0.675473     -0.392342     -0.855364      0.855364       228.553       229.408    
  35  0.486217     -0.721100      -1.57211       1.57211       226.974       228.546    
  36  0.937468     -0.645730E-01 -0.140779      0.140779       227.085       227.226    
  37  0.741025     -0.299721     -0.653436      0.653436       228.398       229.052    
  38  0.155236      -1.86281      -4.06120       4.06120       229.027       233.088    
  39  0.407249     -0.898331      -1.95850       1.95850       225.238       227.197    
  40  0.348550E-01  -3.35656      -7.31779       7.31779       225.620       232.938    
  41  0.178548      -1.72290      -3.75617       3.75617       230.407       234.163    
  42  0.127429      -2.06020      -4.49154       4.49154       227.530       232.022    
  43  0.919888     -0.835037E-01 -0.182051      0.182051       230.153       230.335    
  44  0.520080     -0.653772      -1.42532       1.42532       227.526       228.951    
  45  0.574092     -0.554965      -1.20991       1.20991       224.312       225.522    
  46  0.893427     -0.112690     -0.245682      0.245682       231.733       231.979    
  47  0.658991     -0.417045     -0.909221      0.909221       229.951       230.861    
  48  0.803744     -0.218475     -0.476307      0.476307       232.287       232.764    
  49  0.499877     -0.693392      -1.51170       1.51170       228.512       230.024    
  50  0.723109     -0.324195     -0.706793      0.706793       227.983       228.690    
  51  0.477842     -0.738475      -1.60998       1.60998       230.073       231.683    
  52  0.946108     -0.553980E-01 -0.120776      0.120776       219.798       219.918    
loop,thermsimp(1:2)       76   3.48242       2.36661    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345        220.27          1.07          0.99         23.56          0.55          0.05         26.22
Just calling func    0   0         26.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    220.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       76
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       77
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      344     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -1.08175       1.08175       215.645       216.727    
   2  0.437836     -0.825911      -1.80061       1.80061       219.798       221.598    
   3  0.123560      -2.09103      -4.55876       4.55876       220.276       224.835    
   4  0.943438     -0.582242E-01 -0.126937      0.126937       218.834       218.961    
   5  0.215054      -1.53686      -3.35059       3.35059       220.371       223.721    
   6  0.984763     -0.153546E-01 -0.334753E-01  0.334753E-01   222.242       222.275    
   7  0.154160E-01  -4.17235      -9.09634       9.09634       219.936       229.032    
   8  0.231957      -1.46120      -3.18564       3.18564       222.298       225.483    
   9  0.476349     -0.741605      -1.61681       1.61681       221.160       222.777    
  10  0.620436     -0.477333      -1.04066       1.04066       221.991       223.032    
  11  0.456145     -0.784945      -1.71130       1.71130       222.566       224.277    
  12  0.507296     -0.678660      -1.47958       1.47958       222.075       223.554    
  13  0.910123     -0.941755E-01 -0.205317      0.205317       222.789       222.994    
  14  0.323556      -1.12838      -2.46004       2.46004       224.063       226.523    
  15  0.666279     -0.406046     -0.885241      0.885241       224.359       225.244    
  16  0.781920     -0.246002     -0.536321      0.536321       224.231       224.768    
  17  0.921689     -0.815478E-01 -0.177786      0.177786       225.094       225.272    
  18  0.152544      -1.88030      -4.09934       4.09934       224.312       228.411    
  19  0.265926      -1.32454      -2.88769       2.88769       225.392       228.280    
  20  0.812409     -0.207751     -0.452928      0.452928       223.674       224.127    
  21  0.517560E-01  -2.96121      -6.45589       6.45589       223.818       230.274    
  22  0.559187     -0.581271      -1.26726       1.26726       222.694       223.961    
  23  0.708792     -0.344194     -0.750393      0.750393       225.716       226.467    
  24  0.287762      -1.24562      -2.71564       2.71564       223.131       225.847    
  25  0.896953     -0.108752     -0.237096      0.237096       225.904       226.141    
  26  0.305048      -1.18729      -2.58846       2.58846       225.238       227.827    
  27  0.752428     -0.284450     -0.620142      0.620142       220.777       221.397    
  28  0.248159      -1.39369      -3.03844       3.03844       227.085       230.123    
  29  0.997822     -0.217989E-02 -0.475249E-02  0.475249E-02   226.726       226.731    
  30  0.706427     -0.347535     -0.757677      0.757677       227.112       227.869    
  31  0.885217     -0.121923     -0.265810      0.265810       226.531       226.797    
  32  0.448301     -0.802290      -1.74911       1.74911       225.417       227.166    
  33  0.316275      -1.15114      -2.50967       2.50967       226.974       229.484    
  34  0.682241     -0.382372     -0.833627      0.833627       226.541       227.375    
  35  0.655896     -0.421752     -0.919483      0.919483       227.983       228.903    
  36  0.129575      -2.04350      -4.45513       4.45513       227.526       231.981    
  37  0.236133      -1.44336      -3.14674       3.14674       228.398       231.545    
  38  0.481338     -0.731186      -1.59409       1.59409       228.553       230.147    
  39  0.825902     -0.191279     -0.417016      0.417016       227.625       228.042    
  40  0.818029     -0.200857     -0.437898      0.437898       228.512       228.950    
  41  0.135951E-01  -4.29805      -9.37038       9.37038       227.193       236.563    
  42  0.535484     -0.624585      -1.36169       1.36169       230.153       231.515    
  43  0.451882     -0.794334      -1.73177       1.73177       228.015       229.747    
  44  0.591282     -0.525463      -1.14559       1.14559       229.951       231.097    
  45  0.220584      -1.51148      -3.29524       3.29524       230.073       233.369    
  46  0.217569      -1.52524      -3.32524       3.32524       231.733       235.058    
  47  0.541669     -0.613101      -1.33665       1.33665       227.530       228.867    
  48  0.927891     -0.748411E-01 -0.163165      0.163165       232.287       232.451    
  49  0.888902     -0.117768     -0.256751      0.256751       225.620       225.877    
  50  0.391529     -0.937694      -2.04431       2.04431       229.027       231.071    
  51  0.611187     -0.492353      -1.07340       1.07340       230.407       231.481    
  52  0.475002     -0.744437      -1.62298       1.62298       220.266       221.889    
loop,thermsimp(1:2)       77   1.08175       1.80061    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346        221.71          1.17          1.00         23.95          0.16          0.06         26.34
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    347        237.90          1.03          0.99         24.09          0.08          0.06         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    221.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       77
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       78
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      346     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -5.06357       5.06357       215.645       220.709    
   2  0.700279     -0.356277     -0.776737      0.776737       218.834       219.610    
   3  0.681564     -0.383366     -0.835794      0.835794       220.777       221.613    
   4  0.838213E-01  -2.47907      -5.40474       5.40474       219.798       225.202    
   5  0.708687     -0.344341     -0.750715      0.750715       220.266       221.017    
   6  0.253966      -1.37055      -2.98801       2.98801       222.242       225.230    
   7  0.210796      -1.55686      -3.39419       3.39419       221.160       224.554    
   8  0.967741     -0.327906E-01 -0.714884E-01  0.714884E-01   222.789       222.860    
   9  0.901331     -0.103882     -0.226479      0.226479       221.991       222.217    
  10  0.985067     -0.150452E-01 -0.328007E-01  0.328007E-01   222.075       222.108    
  11  0.153899      -1.87146      -4.08006       4.08006       220.371       224.451    
  12  0.297572      -1.21210      -2.64255       2.64255       222.694       225.337    
  13  0.111036      -2.19790      -4.79175       4.79175       223.674       228.465    
  14  0.489011     -0.715370      -1.55961       1.55961       222.566       224.126    
  15  0.970731     -0.297058E-01 -0.647632E-01  0.647632E-01   224.231       224.296    
  16  0.246322      -1.40112      -3.05464       3.05464       220.276       223.331    
  17  0.293332      -1.22645      -2.67384       2.67384       224.359       227.033    
  18  0.545752     -0.605591      -1.32028       1.32028       225.094       226.414    
  19  0.455999     -0.785265      -1.71200       1.71200       222.298       224.010    
  20  0.427211     -0.850477      -1.85417       1.85417       223.131       224.986    
  21  0.185046E-01  -3.98974      -8.69822       8.69822       225.620       234.318    
  22  0.768936     -0.262748     -0.572829      0.572829       225.904       226.477    
  23  0.870591     -0.138583     -0.302132      0.302132       225.716       226.019    
  24  0.563023     -0.574436      -1.25235       1.25235       224.063       225.316    
  25  0.132150E-01  -4.32640      -9.43221       9.43221       226.726       236.158    
  26  0.890415     -0.116068     -0.253045      0.253045       226.531       226.784    
  27  0.163417      -1.81145      -3.94924       3.94924       225.417       229.366    
  28  0.360288      -1.02085      -2.22561       2.22561       226.541       228.767    
  29  0.622131     -0.474604      -1.03471       1.03471       225.238       226.273    
  30  0.942630     -0.590811E-01 -0.128806      0.128806       227.112       227.240    
  31  0.135626      -1.99785      -4.35562       4.35562       227.625       231.981    
  32  0.369646     -0.995208      -2.16970       2.16970       225.392       227.562    
  33  0.501457     -0.690237      -1.50482       1.50482       224.312       225.817    
  34  0.459762     -0.777047      -1.69408       1.69408       227.530       229.224    
  35  0.489970     -0.713411      -1.55534       1.55534       227.983       229.539    
  36  0.504194     -0.684794      -1.49295       1.49295       228.512       230.005    
  37  0.543102E-01  -2.91304      -6.35087       6.35087       219.936       226.287    
  38  0.873609     -0.135122     -0.294586      0.294586       226.974       227.268    
  39  0.425787     -0.853816      -1.86145       1.86145       228.015       229.876    
  40  0.792406     -0.232682     -0.507281      0.507281       227.085       227.592    
  41  0.691102     -0.369469     -0.805496      0.805496       228.553       229.358    
  42  0.752290     -0.284633     -0.620543      0.620543       223.818       224.439    
  43  0.279962      -1.27310      -2.77555       2.77555       229.027       231.802    
  44  0.315915E-01  -3.45487      -7.53212       7.53212       229.951       237.484    
  45  0.266419      -1.32269      -2.88365       2.88365       230.407       233.291    
  46  0.949868     -0.514319E-01 -0.112129      0.112129       230.153       230.265    
  47  0.520560     -0.652850      -1.42331       1.42331       228.398       229.822    
  48  0.805351     -0.216477     -0.471953      0.471953       227.526       227.998    
  49  0.281582      -1.26733      -2.76297       2.76297       232.287       235.050    
  50  0.365228      -1.00723      -2.19592       2.19592       230.073       232.269    
  51  0.961426     -0.393382E-01 -0.857631E-01  0.857631E-01   231.733       231.819    
  52  0.176024      -1.73713      -3.78721       3.78721       221.714       225.501    
loop,thermsimp(1:2)       78   5.06357      0.776737    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348        224.60          1.25          1.00         24.07          0.07          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    224.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       78
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       79
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      347     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -3.61817       3.61817       218.834       222.452    
   2  0.812983     -0.207045     -0.451389      0.451389       215.645       216.097    
   3  0.820046E-01  -2.50098      -5.45251       5.45251       220.266       225.718    
   4  0.863006     -0.147333     -0.321208      0.321208       220.777       221.098    
   5  0.647901     -0.434017     -0.946222      0.946222       222.075       223.021    
   6  0.650063E-01  -2.73327      -5.95894       5.95894       221.991       227.950    
   7  0.407685E-02  -5.50243      -11.9961       11.9961       222.789       234.785    
   8  0.935930     -0.662149E-01 -0.144358      0.144358       220.276       220.421    
   9  0.158531      -1.84180      -4.01541       4.01541       222.298       226.313    
  10  0.846482     -0.166666     -0.363357      0.363357       222.566       222.930    
  11  0.252208      -1.37750      -3.00316       3.00316       224.231       227.234    
  12  0.781651E-02  -4.85152      -10.5770       10.5770       223.818       234.395    
  13  0.990286     -0.976134E-02 -0.212812E-01  0.212812E-01   220.371       220.392    
  14  0.550116     -0.597625      -1.30291       1.30291       221.160       222.463    
  15  0.483066     -0.727601      -1.58628       1.58628       223.131       224.718    
  16  0.196160      -1.62883      -3.55108       3.55108       219.798       223.349    
  17  0.469455     -0.756184      -1.64859       1.64859       222.242       223.890    
  18  0.624392     -0.470977      -1.02680       1.02680       224.063       225.090    
  19  0.743593     -0.296262     -0.645894      0.645894       222.694       223.340    
  20  0.348439      -1.05429      -2.29851       2.29851       221.714       224.012    
  21  0.779083     -0.249637     -0.544246      0.544246       224.312       224.856    
  22  0.989010     -0.110506E-01 -0.240920E-01  0.240920E-01   225.716       225.741    
  23  0.655432E-01  -2.72505      -5.94100       5.94100       225.238       231.179    
  24  0.470908     -0.753092      -1.64185       1.64185       219.936       221.578    
  25  0.685537     -0.377553     -0.823121      0.823121       225.094       225.917    
  26  0.863060E-02  -4.75244      -10.3610       10.3610       225.904       236.265    
  27  0.526195     -0.642084      -1.39984       1.39984       226.531       227.931    
  28  0.767692     -0.264367     -0.576358      0.576358       224.359       224.935    
  29  0.380048     -0.967459      -2.10920       2.10920       227.112       229.221    
  30  0.337508E-01  -3.38875      -7.38798       7.38798       226.974       234.362    
  31  0.683667     -0.380285     -0.829077      0.829077       225.392       226.221    
  32  0.245511      -1.40441      -3.06183       3.06183       227.085       230.147    
  33  0.294388      -1.22286      -2.66601       2.66601       227.526       230.192    
  34  0.159040      -1.83860      -4.00841       4.00841       223.674       227.682    
  35  0.613798     -0.488089      -1.06411       1.06411       226.541       227.605    
  36  0.863839E-01  -2.44895      -5.33908       5.33908       227.530       232.869    
  37  0.118930      -2.12922      -4.64202       4.64202       228.553       233.195    
  38  0.961460     -0.393026E-01 -0.856855E-01  0.856855E-01   225.417       225.502    
  39  0.457884     -0.781140      -1.70300       1.70300       227.983       229.686    
  40  0.312963      -1.16167      -2.53261       2.53261       228.398       230.931    
  41  0.892553     -0.113669     -0.247815      0.247815       228.015       228.263    
  42  0.448774     -0.801235      -1.74681       1.74681       228.512       230.259    
  43  0.942987E-01  -2.36129      -5.14796       5.14796       230.153       235.301    
  44  0.848599     -0.164169     -0.357912      0.357912       229.027       229.385    
  45  0.665342     -0.407455     -0.888312      0.888312       231.733       232.622    
  46  0.894010     -0.112039     -0.244261      0.244261       227.625       227.869    
  47  0.403928     -0.906518      -1.97634       1.97634       230.073       232.050    
  48  0.612812     -0.489696      -1.06761       1.06761       230.407       231.475    
  49  0.726279     -0.319821     -0.697257      0.697257       225.620       226.317    
  50  0.694767     -0.364179     -0.793964      0.793964       232.287       233.081    
  51  0.849471     -0.163141     -0.355672      0.355672       226.726       227.082    
  52  0.615908     -0.484657      -1.05662       1.05662       224.598       225.655    
loop,thermsimp(1:2)       79   3.61817      0.451389    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349        234.69          1.25          1.02         23.95          0.02          0.05         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    234.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       79
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       80
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      348     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -2.37055       2.37055       215.645       218.016    
   2  0.744737     -0.294724     -0.642542      0.642542       220.371       221.013    
   3  0.361564E-01  -3.31990      -7.23788       7.23788       220.276       227.514    
   4  0.312099      -1.16444      -2.53864       2.53864       220.777       223.315    
   5  0.119132      -2.12752      -4.63832       4.63832       219.936       224.574    
   6  0.617735     -0.481696      -1.05017       1.05017       218.834       219.884    
   7  0.117626      -2.14025      -4.66605       4.66605       221.160       225.826    
   8  0.258570      -1.35259      -2.94885       2.94885       222.566       225.515    
   9  0.851854E-01  -2.46293      -5.36954       5.36954       222.075       227.444    
  10  0.220620      -1.51131      -3.29489       3.29489       222.694       225.989    
  11  0.648876     -0.432513     -0.942943      0.942943       219.798       220.741    
  12  0.958689     -0.421884E-01 -0.919770E-01  0.919770E-01   222.242       222.334    
  13  0.240652      -1.42440      -3.10541       3.10541       221.714       224.819    
  14  0.975871     -0.244252E-01 -0.532506E-01  0.532506E-01   223.131       223.185    
  15  0.467835     -0.759639      -1.65613       1.65613       224.312       225.968    
  16  0.398205     -0.920788      -2.00746       2.00746       224.359       226.366    
  17  0.757338E-01  -2.58053      -5.62594       5.62594       224.063       229.689    
  18  0.654643     -0.423666     -0.923654      0.923654       225.417       226.340    
  19  0.305298      -1.18647      -2.58667       2.58667       224.598       227.185    
  20  0.435768     -0.830645      -1.81093       1.81093       220.266       222.077    
  21  0.689410     -0.371920     -0.810840      0.810840       225.716       226.527    
  22  0.267500      -1.31864      -2.87482       2.87482       225.094       227.969    
  23  0.590747     -0.526367      -1.14756       1.14756       225.392       226.539    
  24  0.108947E-01  -4.51948      -9.85313       9.85313       222.298       232.151    
  25  0.236025      -1.44382      -3.14774       3.14774       225.620       228.768    
  26  0.590760     -0.526345      -1.14751       1.14751       226.726       227.873    
  27  0.782443     -0.245334     -0.534864      0.534864       224.231       224.766    
  28  0.702257     -0.353456     -0.770586      0.770586       226.541       227.312    
  29  0.764991     -0.267891     -0.584043      0.584043       223.674       224.258    
  30  0.753362     -0.283210     -0.617439      0.617439       227.625       228.243    
  31  0.961949E-01  -2.34138      -5.10455       5.10455       226.531       231.636    
  32  0.541564     -0.613294      -1.33707       1.33707       221.991       223.328    
  33  0.474786     -0.744891      -1.62397       1.62397       228.015       229.639    
  34  0.242842      -1.41534      -3.08566       3.08566       227.112       230.197    
  35  0.495414     -0.702361      -1.53125       1.53125       229.027       230.558    
  36  0.636645     -0.451543     -0.984432      0.984432       227.983       228.968    
  37  0.758087     -0.276957     -0.603808      0.603808       227.085       227.689    
  38  0.209321      -1.56389      -3.40951       3.40951       227.526       230.936    
  39  0.484343     -0.724961      -1.58052       1.58052       228.512       230.093    
  40  0.499790     -0.693567      -1.51208       1.51208       228.398       229.910    
  41  0.316628      -1.15003      -2.50723       2.50723       225.238       227.746    
  42  0.705469     -0.348892     -0.760636      0.760636       230.407       231.168    
  43  0.514591     -0.664383      -1.44845       1.44845       230.073       231.522    
  44  0.869006     -0.140406     -0.306105      0.306105       231.733       232.039    
  45  0.112600      -2.18392      -4.76126       4.76126       227.530       232.292    
  46  0.511991     -0.669449      -1.45950       1.45950       232.287       233.747    
  47  0.477456     -0.739283      -1.61175       1.61175       228.553       230.164    
  48  0.494460     -0.704290      -1.53546       1.53546       226.974       228.509    
  49  0.698938     -0.358193     -0.780915      0.780915       223.818       224.599    
  50  0.430212     -0.843478      -1.83891       1.83891       222.789       224.628    
  51  0.474243E-01  -3.04862      -6.64644       6.64644       230.153       236.800    
  52  0.167497      -1.78679      -3.89547       3.89547       234.691       238.587    
loop,thermsimp(1:2)       80   2.37055      0.642542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350        225.90          1.07          0.99         23.92          0.16          0.06         26.19
Just calling func    0   0         26.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    225.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       80
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       81
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      349     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -2.32693       2.32693       215.645       217.972    
   2  0.822787     -0.195058     -0.425255      0.425255       218.834       219.259    
   3  0.320831E-01  -3.43942      -7.49846       7.49846       219.798       227.296    
   4  0.224034      -1.49596      -3.26141       3.26141       220.371       223.632    
   5  0.200770      -1.60559      -3.50043       3.50043       220.266       223.766    
   6  0.983846     -0.162863E-01 -0.355065E-01  0.355065E-01   222.242       222.277    
   7  0.762274     -0.271449     -0.591799      0.591799       223.131       223.723    
   8  0.872649     -0.136221     -0.296983      0.296983       220.777       221.074    
   9  0.366891      -1.00269      -2.18601       2.18601       221.991       224.177    
  10  0.800852     -0.222079     -0.484166      0.484166       223.674       224.158    
  11  0.755695     -0.280117     -0.610696      0.610696       219.936       220.546    
  12  0.595174     -0.518902      -1.13128       1.13128       223.818       224.950    
  13  0.316509      -1.15040      -2.50805       2.50805       222.789       225.297    
  14  0.847901     -0.164991     -0.359705      0.359705       224.231       224.591    
  15  0.116195      -2.15248      -4.69273       4.69273       221.714       226.406    
  16  0.121963      -2.10403      -4.58711       4.58711       222.566       227.153    
  17  0.298485      -1.20903      -2.63587       2.63587       221.160       223.796    
  18  0.698751     -0.358461     -0.781498      0.781498       224.312       225.094    
  19  0.248186      -1.39358      -3.03820       3.03820       222.694       225.732    
  20  0.717251     -0.332329     -0.724527      0.724527       225.417       226.141    
  21  0.591856     -0.524491      -1.14347       1.14347       224.359       225.502    
  22  0.780177E-01  -2.55082      -5.56116       5.56116       225.716       231.278    
  23  0.314281      -1.15747      -2.52345       2.52345       225.392       227.915    
  24  0.565423E-01  -2.87277      -6.26306       6.26306       224.598       230.861    
  25  0.964829     -0.358044E-01 -0.780590E-01  0.780590E-01   226.541       226.619    
  26  0.900157     -0.105186     -0.229322      0.229322       222.075       222.304    
  27  0.656998     -0.420074     -0.915823      0.915823       220.276       221.192    
  28  0.888436E-01  -2.42088      -5.27787       5.27787       227.085       232.363    
  29  0.853838     -0.158014     -0.344494      0.344494       225.238       225.583    
  30  0.704842     -0.349782     -0.762577      0.762577       226.726       227.489    
  31  0.890111     -0.116409     -0.253788      0.253788       225.094       225.348    
  32  0.424397     -0.857087      -1.86858       1.86858       227.625       229.494    
  33  0.959371     -0.414778E-01 -0.904279E-01  0.904279E-01   226.974       227.064    
  34  0.323832      -1.12753      -2.45819       2.45819       225.620       228.078    
  35  0.943913     -0.577217E-01 -0.125842      0.125842       227.983       228.109    
  36  0.119048      -2.12823      -4.63985       4.63985       228.015       232.655    
  37  0.427842E-01  -3.15159      -6.87092       6.87092       224.063       230.934    
  38  0.433544     -0.835761      -1.82208       1.82208       228.398       230.220    
  39  0.773173     -0.257253     -0.560850      0.560850       228.512       229.073    
  40  0.455657     -0.786014      -1.71363       1.71363       228.553       230.266    
  41  0.362132      -1.01575      -2.21448       2.21448       227.112       229.326    
  42  0.775394     -0.254384     -0.554594      0.554594       229.027       229.581    
  43  0.889906     -0.116639     -0.254291      0.254291       227.526       227.780    
  44  0.415923     -0.877255      -1.91255       1.91255       230.407       232.320    
  45  0.374532E-01  -3.28466      -7.16106       7.16106       230.073       237.234    
  46  0.904805     -0.100036     -0.218093      0.218093       226.531       226.749    
  47  0.130905      -2.03328      -4.43286       4.43286       231.733       236.166    
  48  0.951733     -0.494710E-01 -0.107854      0.107854       222.298       222.406    
  49  0.720673     -0.327570     -0.714151      0.714151       227.530       228.244    
  50  0.425150     -0.855314      -1.86471       1.86471       232.287       234.152    
  51  0.464059     -0.767744      -1.67380       1.67380       230.153       231.827    
  52  0.822031     -0.195978     -0.427260      0.427260       225.904       226.331    
loop,thermsimp(1:2)       81   2.32693      0.425255    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351        225.82          1.17          1.00         24.00          0.04          0.06         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    225.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       81
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       82
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      350     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -1.27797       1.27797       215.645       216.923    
   2  0.926592     -0.762421E-01 -0.166219      0.166219       218.834       219.000    
   3  0.766762     -0.265579     -0.579002      0.579002       219.936       220.515    
   4  0.627980     -0.465247      -1.01431       1.01431       220.777       221.791    
   5  0.647527     -0.434594     -0.947480      0.947480       220.276       221.224    
   6  0.639464     -0.447125     -0.974799      0.974799       222.242       223.217    
   7  0.168437      -1.78119      -3.88326       3.88326       222.075       225.958    
   8  0.725133     -0.321400     -0.700700      0.700700       222.298       222.998    
   9  0.620073     -0.477917      -1.04193       1.04193       220.371       221.413    
  10  0.837394     -0.177461     -0.386890      0.386890       223.131       223.518    
  11  0.763326     -0.270070     -0.588792      0.588792       220.266       220.855    
  12  0.216703      -1.52923      -3.33395       3.33395       221.160       224.494    
  13  0.846730     -0.166373     -0.362718      0.362718       223.674       224.036    
  14  0.712127     -0.339499     -0.740159      0.740159       221.991       222.731    
  15  0.731222     -0.313039     -0.682471      0.682471       224.231       224.914    
  16  0.131329      -2.03005      -4.42582       4.42582       223.818       228.244    
  17  0.946517     -0.549662E-01 -0.119835      0.119835       224.312       224.432    
  18  0.303743      -1.19157      -2.59781       2.59781       222.789       225.386    
  19  0.452199     -0.793633      -1.73024       1.73024       225.094       226.824    
  20  0.176302      -1.73556      -3.78377       3.78377       224.359       228.143    
  21  0.569871     -0.562345      -1.22599       1.22599       225.238       226.464    
  22  0.267873      -1.31724      -2.87179       2.87179       222.694       225.566    
  23  0.295877      -1.21781      -2.65501       2.65501       225.417       228.072    
  24  0.658567     -0.417689     -0.910624      0.910624       225.904       226.814    
  25  0.633120     -0.457096     -0.996536      0.996536       221.714       222.710    
  26  0.655522     -0.422324     -0.920729      0.920729       226.541       227.462    
  27  0.532295     -0.630558      -1.37471       1.37471       226.531       227.906    
  28  0.611209     -0.492317      -1.07332       1.07332       226.974       228.047    
  29  0.768812E-01  -2.56549      -5.59316       5.59316       222.566       228.159    
  30  0.845132     -0.168262     -0.366836      0.366836       219.798       220.164    
  31  0.133696      -2.01219      -4.38686       4.38686       226.726       231.113    
  32  0.850522E-01  -2.46449      -5.37295       5.37295       227.526       232.899    
  33  0.901960     -0.103185     -0.224958      0.224958       225.392       225.617    
  34  0.394454E-01  -3.23284      -7.04807       7.04807       225.620       232.668    
  35  0.152819      -1.87850      -4.09540       4.09540       227.983       232.079    
  36  0.951369     -0.498538E-01 -0.108689      0.108689       227.530       227.639    
  37  0.909075     -0.953273E-01 -0.207828      0.207828       228.512       228.720    
  38  0.552964     -0.592462      -1.29166       1.29166       227.112       228.403    
  39  0.904748     -0.100099     -0.218231      0.218231       227.625       227.843    
  40  0.434860     -0.832731      -1.81548       1.81548       229.027       230.842    
  41  0.807557E-01  -2.51633      -5.48597       5.48597       228.398       233.884    
  42  0.245089      -1.40614      -3.06558       3.06558       228.553       231.618    
  43  0.566857     -0.567648      -1.23756       1.23756       224.598       225.836    
  44  0.154441      -1.86794      -4.07239       4.07239       224.063       228.136    
  45  0.961849     -0.388974E-01 -0.848022E-01  0.848022E-01   225.716       225.801    
  46  0.267234      -1.31963      -2.87699       2.87699       230.153       233.030    
  47  0.170042      -1.77171      -3.86259       3.86259       230.407       234.270    
  48  0.796608     -0.227393     -0.495750      0.495750       227.085       227.581    
  49  0.474137     -0.746260      -1.62696       1.62696       228.015       229.642    
  50  0.164737      -1.80340      -3.93169       3.93169       232.287       236.219    
  51  0.728428     -0.316867     -0.690817      0.690817       231.733       232.424    
  52  0.259284      -1.34983      -2.94283       2.94283       225.816       228.759    
loop,thermsimp(1:2)       82   1.27797      0.166219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352        221.87          1.26          1.02         23.90          0.05          0.05         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    221.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       82
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       83
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      351     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -1.04021       1.04021       215.645       216.685    
   2  0.835522     -0.179699     -0.391770      0.391770       218.834       219.226    
   3  0.626661     -0.467350      -1.01889       1.01889       219.798       220.817    
   4  0.197939      -1.61980      -3.53139       3.53139       219.936       223.467    
   5  0.842637     -0.171219     -0.373283      0.373283       220.266       220.639    
   6  0.873669     -0.135053     -0.294437      0.294437       220.276       220.571    
   7  0.298180E-01  -3.51264      -7.65808       7.65808       220.371       228.029    
   8  0.548374     -0.600797      -1.30983       1.30983       220.777       222.087    
   9  0.407469E-01  -3.20037      -6.97729       6.97729       221.714       228.691    
  10  0.210105E-02  -6.16532      -13.4413       13.4413       221.991       235.432    
  11  0.631577     -0.459536      -1.00186       1.00186       222.298       223.300    
  12  0.944026     -0.576013E-01 -0.125579      0.125579       222.242       222.367    
  13  0.492775     -0.707703      -1.54290       1.54290       223.131       224.674    
  14  0.195107      -1.63421      -3.56281       3.56281       223.674       227.236    
  15  0.775688     -0.254005     -0.553768      0.553768       224.312       224.866    
  16  0.763907     -0.269310     -0.587135      0.587135       221.160       221.747    
  17  0.797499     -0.226275     -0.493313      0.493313       224.231       224.725    
  18  0.639217     -0.447511     -0.975641      0.975641       222.789       223.764    
  19  0.775225     -0.254602     -0.555070      0.555070       222.694       223.249    
  20  0.680633     -0.384733     -0.838774      0.838774       225.392       226.231    
  21  0.532184     -0.630766      -1.37516       1.37516       225.716       227.092    
  22  0.843009     -0.170778     -0.372322      0.372322       224.598       224.970    
  23  0.943186     -0.584913E-01 -0.127520      0.127520       222.075       222.202    
  24  0.601611     -0.508143      -1.10783       1.10783       225.238       226.346    
  25  0.259021      -1.35084      -2.94504       2.94504       225.904       228.849    
  26  0.855132     -0.156500     -0.341193      0.341193       225.094       225.435    
  27  0.351229      -1.04632      -2.28113       2.28113       226.541       228.822    
  28  0.950362     -0.509122E-01 -0.110996      0.110996       227.085       227.196    
  29  0.447301     -0.804524      -1.75398       1.75398       227.530       229.284    
  30  0.325509      -1.12237      -2.44692       2.44692       227.625       230.072    
  31  0.717010     -0.332666     -0.725261      0.725261       226.531       227.256    
  32  0.676718     -0.390500     -0.851349      0.851349       226.974       227.825    
  33  0.493623     -0.705983      -1.53915       1.53915       225.417       226.956    
  34  0.155805E-01  -4.16174      -9.07321       9.07321       224.063       233.137    
  35  0.417708     -0.872973      -1.90321       1.90321       224.359       226.262    
  36  0.395067     -0.928699      -2.02470       2.02470       222.566       224.591    
  37  0.977835     -0.224139E-01 -0.488656E-01  0.488656E-01   223.818       223.867    
  38  0.603414     -0.505151      -1.10130       1.10130       227.112       228.213    
  39  0.173810      -1.74979      -3.81481       3.81481       228.512       232.327    
  40  0.979719     -0.204895E-01 -0.446701E-01  0.446701E-01   225.816       225.860    
  41  0.234071      -1.45213      -3.16586       3.16586       228.015       231.181    
  42  0.264051      -1.33161      -2.90312       2.90312       229.027       231.930    
  43  0.756353     -0.279247     -0.608801      0.608801       226.726       227.335    
  44  0.980782     -0.194046E-01 -0.423049E-01  0.423049E-01   228.553       228.595    
  45  0.444591E-01  -3.11319      -6.78721       6.78721       227.983       234.771    
  46  0.276895      -1.28412      -2.79957       2.79957       231.733       234.533    
  47  0.754338     -0.281915     -0.614617      0.614617       225.620       226.235    
  48  0.288496      -1.24308      -2.71009       2.71009       227.526       230.236    
  49  0.945547     -0.559915E-01 -0.122070      0.122070       230.153       230.275    
  50  0.698722     -0.358502     -0.781587      0.781587       228.398       229.180    
  51  0.586821     -0.533035      -1.16210       1.16210       230.407       231.569    
  52  0.173241      -1.75307      -3.82196       3.82196       221.874       225.696    
loop,thermsimp(1:2)       83   1.04021      0.391770    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353        223.77          1.16          1.01         24.01          0.02          0.06         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    223.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       83
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       84
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      352     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -1.21123       1.21123       215.645       216.856    
   2  0.583943E-01  -2.84054      -6.19279       6.19279       218.834       225.027    
   3  0.377108     -0.975224      -2.12613       2.12613       220.276       222.403    
   4  0.117758      -2.13912      -4.66361       4.66361       220.266       224.929    
   5  0.531627     -0.631812      -1.37744       1.37744       219.798       221.175    
   6  0.348101      -1.05526      -2.30063       2.30063       221.160       223.460    
   7  0.713050     -0.338204     -0.737335      0.737335       220.777       221.514    
   8  0.895286     -0.110612     -0.241151      0.241151       222.075       222.316    
   9  0.873863     -0.134831     -0.293952      0.293952       222.242       222.536    
  10  0.225074      -1.49132      -3.25131       3.25131       222.694       225.946    
  11  0.542220     -0.612083      -1.33443       1.33443       222.298       223.632    
  12  0.262707      -1.33672      -2.91424       2.91424       219.936       222.850    
  13  0.864358E-01  -2.44835      -5.33777       5.33777       222.789       228.126    
  14  0.468331     -0.758581      -1.65382       1.65382       223.818       225.472    
  15  0.896509     -0.109247     -0.238175      0.238175       222.566       222.804    
  16  0.169842E-01  -4.07547      -8.88513       8.88513       223.131       232.017    
  17  0.980158     -0.200410E-01 -0.436924E-01  0.436924E-01   224.231       224.275    
  18  0.252821      -1.37507      -2.99786       2.99786       224.312       227.310    
  19  0.556823     -0.585507      -1.27649       1.27649       224.598       225.875    
  20  0.520304     -0.653342      -1.42438       1.42438       225.094       226.518    
  21  0.956705E-01  -2.34685      -5.11647       5.11647       221.874       226.990    
  22  0.458762     -0.779224      -1.69882       1.69882       225.816       227.515    
  23  0.684654     -0.378842     -0.825931      0.825931       225.392       226.218    
  24  0.749393     -0.288492     -0.628955      0.628955       225.620       226.249    
  25  0.112724      -2.18282      -4.75886       4.75886       224.359       229.118    
  26  0.642114     -0.442989     -0.965783      0.965783       225.238       226.204    
  27  0.881888     -0.125691     -0.274024      0.274024       225.417       225.691    
  28  0.933845     -0.684452E-01 -0.149221      0.149221       225.716       225.866    
  29  0.124482      -2.08359      -4.54254       4.54254       227.085       231.627    
  30  0.189487      -1.66344      -3.62654       3.62654       223.674       227.300    
  31  0.526869     -0.640804      -1.39705       1.39705       226.531       227.928    
  32  0.490162     -0.713020      -1.55449       1.55449       226.726       228.280    
  33  0.292049      -1.23083      -2.68340       2.68340       226.974       229.657    
  34  0.646685     -0.435896     -0.950317      0.950317       220.371       221.321    
  35  0.738289     -0.303420     -0.661501      0.661501       227.112       227.773    
  36  0.379268     -0.969513      -2.11368       2.11368       228.553       230.666    
  37  0.691037     -0.369562     -0.805700      0.805700       221.714       222.519    
  38  0.566288     -0.568653      -1.23975       1.23975       226.541       227.781    
  39  0.130734      -2.03459      -4.43571       4.43571       225.904       230.340    
  40  0.298876      -1.20773      -2.63302       2.63302       228.398       231.031    
  41  0.369194     -0.996434      -2.17237       2.17237       227.530       229.703    
  42  0.291325      -1.23331      -2.68881       2.68881       227.625       230.314    
  43  0.828296     -0.188384     -0.410706      0.410706       227.526       227.937    
  44  0.540492E-01  -2.91786      -6.36137       6.36137       230.153       236.515    
  45  0.979889     -0.203162E-01 -0.442924E-01  0.442924E-01   228.015       228.059    
  46  0.411533     -0.887866      -1.93568       1.93568       230.407       232.343    
  47  0.430635     -0.842495      -1.83676       1.83676       229.027       230.863    
  48  0.948338     -0.530447E-01 -0.115645      0.115645       228.512       228.628    
  49  0.400713E-02  -5.51968      -12.0337       12.0337       224.063       236.097    
  50  0.963092     -0.376065E-01 -0.819877E-01  0.819877E-01   231.733       231.815    
  51  0.101802      -2.28472      -4.98104       4.98104       227.983       232.964    
  52  0.161305      -1.82446      -3.97759       3.97759       223.773       227.751    
loop,thermsimp(1:2)       84   1.21123       6.19279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354        222.72          1.21          1.01         24.02          0.00          0.06         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    222.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       84
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       85
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      353     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.142563      0.142563       215.645       215.788    
   2  0.765516     -0.267206     -0.582548      0.582548       219.798       220.380    
   3  0.899266     -0.106176     -0.231479      0.231479       220.371       220.602    
   4  0.953341     -0.477822E-01 -0.104172      0.104172       220.777       220.881    
   5  0.642356     -0.442612     -0.964960      0.964960       222.075       223.040    
   6  0.265713      -1.32534      -2.88944       2.88944       220.276       223.166    
   7  0.379937     -0.967749      -2.10984       2.10984       221.714       223.824    
   8  0.449606     -0.799384      -1.74278       1.74278       222.242       223.985    
   9  0.810725     -0.209826     -0.457452      0.457452       222.566       223.024    
  10  0.218977      -1.51879      -3.31119       3.31119       219.936       223.247    
  11  0.456613     -0.783919      -1.70906       1.70906       221.160       222.869    
  12  0.439289E-02  -5.42777      -11.8333       11.8333       222.298       234.131    
  13  0.710409     -0.341914     -0.745424      0.745424       224.231       224.977    
  14  0.385315     -0.953695      -2.07920       2.07920       220.266       222.345    
  15  0.116701      -2.14814      -4.68327       4.68327       218.834       223.517    
  16  0.985237     -0.148728E-01 -0.324248E-01  0.324248E-01   223.818       223.851    
  17  0.856588     -0.154798     -0.337482      0.337482       225.417       225.754    
  18  0.155419      -1.86163      -4.05863       4.05863       225.716       229.775    
  19  0.257525      -1.35664      -2.95768       2.95768       224.598       227.556    
  20  0.548716     -0.600174      -1.30847       1.30847       222.694       224.003    
  21  0.589698     -0.528145      -1.15143       1.15143       225.238       226.390    
  22  0.884364     -0.122887     -0.267911      0.267911       225.392       225.660    
  23  0.871018E-01  -2.44068      -5.32104       5.32104       225.620       230.941    
  24  0.486795     -0.719912      -1.56952       1.56952       225.094       226.664    
  25  0.161417      -1.82376      -3.97608       3.97608       221.874       225.850    
  26  0.598774     -0.512871      -1.11813       1.11813       223.674       224.792    
  27  0.483527     -0.726647      -1.58420       1.58420       224.312       225.896    
  28  0.715961     -0.334130     -0.728452      0.728452       225.816       226.544    
  29  0.771801     -0.259029     -0.564721      0.564721       223.773       224.338    
  30  0.458713     -0.779330      -1.69905       1.69905       227.112       228.811    
  31  0.235181      -1.44740      -3.15555       3.15555       226.541       229.697    
  32  0.488220     -0.716988      -1.56314       1.56314       226.531       228.094    
  33  0.365473      -1.00656      -2.19446       2.19446       227.526       229.721    
  34  0.191311      -1.65386      -3.60565       3.60565       228.015       231.620    
  35  0.484999     -0.723609      -1.57758       1.57758       222.789       224.366    
  36  0.799086     -0.224286     -0.488977      0.488977       226.726       227.215    
  37  0.811458     -0.208923     -0.455483      0.455483       228.512       228.968    
  38  0.829885E-01  -2.48905      -5.42650       5.42650       224.359       229.785    
  39  0.731085     -0.313226     -0.682880      0.682880       226.974       227.657    
  40  0.854012     -0.157810     -0.344048      0.344048       227.530       227.874    
  41  0.699629     -0.357205     -0.778760      0.778760       227.625       228.404    
  42  0.918965     -0.845069E-01 -0.184237      0.184237       225.904       226.088    
  43  0.463498     -0.768952      -1.67643       1.67643       228.553       230.229    
  44  0.758690E-01  -2.57875      -5.62205       5.62205       229.027       234.649    
  45  0.577757     -0.548602      -1.19603       1.19603       228.398       229.594    
  46  0.897332     -0.108329     -0.236173      0.236173       227.085       227.321    
  47  0.522547     -0.649040      -1.41500       1.41500       231.733       233.148    
  48  0.408730E-01  -3.19729      -6.97056       6.97056       223.131       230.102    
  49  0.244793      -1.40734      -3.06821       3.06821       230.407       233.475    
  50  0.503867     -0.685443      -1.49437       1.49437       227.983       229.478    
  51  0.268075      -1.31649      -2.87014       2.87014       224.063       226.933    
  52  0.502965     -0.687236      -1.49828       1.49828       222.716       224.214    
loop,thermsimp(1:2)       85  0.142563      0.582548    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355        221.52          1.25          1.04         24.00          0.04          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    221.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       85
neval is:      354
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       86
neval is:      354


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      354     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -2.38818       2.38818       215.645       218.033    
   2  0.140144      -1.96508      -4.28417       4.28417       219.798       224.082    
   3  0.520913     -0.652172      -1.42183       1.42183       220.371       221.792    
   4  0.628337     -0.464678      -1.01307       1.01307       220.777       221.790    
   5  0.203324      -1.59296      -3.47288       3.47288       220.266       223.739    
   6  0.481205     -0.731462      -1.59470       1.59470       221.160       222.754    
   7  0.948759     -0.526009E-01 -0.114678      0.114678       222.566       222.681    
   8  0.251825      -1.37902      -3.00647       3.00647       222.075       225.081    
   9  0.363806      -1.01114      -2.20442       2.20442       220.276       222.481    
  10  0.465077     -0.765552      -1.66902       1.66902       219.936       221.605    
  11  0.580920     -0.543143      -1.18413       1.18413       218.834       220.018    
  12  0.957129     -0.438167E-01 -0.955269E-01  0.955269E-01   221.714       221.809    
  13  0.345007      -1.06419      -2.32009       2.32009       223.818       226.138    
  14  0.177852E-01  -4.02939      -8.78467       8.78467       222.242       231.027    
  15  0.843779     -0.169864     -0.370329      0.370329       222.694       223.065    
  16  0.765452     -0.267288     -0.582728      0.582728       222.716       223.299    
  17  0.453925     -0.789824      -1.72193       1.72193       223.773       225.495    
  18  0.378234     -0.972243      -2.11963       2.11963       222.789       224.908    
  19  0.167312      -1.78790      -3.89788       3.89788       223.674       227.572    
  20  0.240345      -1.42568      -3.10819       3.10819       224.231       227.340    
  21  0.868226     -0.141303     -0.308062      0.308062       225.392       225.700    
  22  0.907002     -0.976102E-01 -0.212805      0.212805       225.417       225.629    
  23  0.433040     -0.836925      -1.82462       1.82462       221.874       223.699    
  24  0.291080      -1.23416      -2.69065       2.69065       224.312       227.003    
  25  0.391091     -0.938815      -2.04676       2.04676       225.904       227.951    
  26  0.541803     -0.612853      -1.33611       1.33611       225.238       226.575    
  27  0.494251     -0.704711      -1.53638       1.53638       225.816       227.352    
  28  0.617376     -0.482277      -1.05143       1.05143       225.094       226.146    
  29  0.919515     -0.839094E-01 -0.182935      0.182935       224.063       224.246    
  30  0.836216     -0.178868     -0.389959      0.389959       226.726       227.116    
  31  0.436173     -0.829716      -1.80891       1.80891       227.085       228.894    
  32  0.175211      -1.74176      -3.79730       3.79730       224.598       228.395    
  33  0.304297      -1.18975      -2.59383       2.59383       226.974       229.568    
  34  0.996125     -0.388259E-02 -0.846463E-02  0.846463E-02   227.530       227.539    
  35  0.146253      -1.92242      -4.19115       4.19115       226.531       230.722    
  36  0.110666      -2.20124      -4.79902       4.79902       227.625       232.424    
  37  0.481190E-01  -3.03408      -6.61474       6.61474       227.112       233.726    
  38  0.342728      -1.07082      -2.33454       2.33454       228.512       230.847    
  39  0.998409E-01  -2.30418      -5.02345       5.02345       227.983       233.007    
  40  0.509248     -0.674821      -1.47121       1.47121       228.398       229.869    
  41  0.974159     -0.261804E-01 -0.570773E-01  0.570773E-01   226.541       226.598    
  42  0.950347     -0.509279E-01 -0.111030      0.111030       227.526       227.637    
  43  0.333494      -1.09813      -2.39409       2.39409       225.716       228.111    
  44  0.914660     -0.892024E-01 -0.194474      0.194474       224.359       224.553    
  45  0.249678      -1.38758      -3.02514       3.02514       223.131       226.157    
  46  0.512508     -0.668440      -1.45730       1.45730       228.553       230.010    
  47  0.592185     -0.523937      -1.14226       1.14226       225.620       226.762    
  48  0.931089     -0.714008E-01 -0.155664      0.155664       228.015       228.171    
  49  0.638700     -0.448321     -0.977405      0.977405       231.733       232.711    
  50  0.563786     -0.573081      -1.24940       1.24940       230.407       231.657    
  51  0.136824      -1.98906      -4.33645       4.33645       222.298       226.634    
  52  0.806361     -0.215224     -0.469219      0.469219       221.522       221.991    
loop,thermsimp(1:2)       86   2.38818       4.28417    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    356        220.52          1.15          1.02         24.00          0.00          0.06         26.23
Just calling func    0   0         26.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    220.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       86
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       87
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      355     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -6.77481       6.77481       215.645       222.420    
   2  0.682805     -0.381545     -0.831825      0.831825       218.834       219.666    
   3  0.699780     -0.356989     -0.778290      0.778290       219.936       220.714    
   4  0.515086     -0.663422      -1.44636       1.44636       220.777       222.223    
   5  0.402461     -0.910157      -1.98428       1.98428       220.371       222.355    
   6  0.652803     -0.426480     -0.929790      0.929790       221.714       222.644    
   7  0.483213     -0.727297      -1.58562       1.58562       221.522       223.107    
   8  0.873684     -0.135037     -0.294400      0.294400       220.276       220.571    
   9  0.142648      -1.94738      -4.24557       4.24557       222.566       226.812    
  10  0.844357     -0.169180     -0.368838      0.368838       221.160       221.529    
  11  0.154187      -1.86959      -4.07598       4.07598       222.694       226.770    
  12  0.437314E-01  -3.12969      -6.82319       6.82319       222.716       229.539    
  13  0.455393E-02  -5.39176      -11.7548       11.7548       221.874       233.629    
  14  0.236800      -1.44054      -3.14059       3.14059       220.266       223.406    
  15  0.660181     -0.415241     -0.905288      0.905288       219.798       220.703    
  16  0.652586     -0.426813     -0.930515      0.930515       224.063       224.994    
  17  0.153101      -1.87666      -4.09140       4.09140       224.359       228.450    
  18  0.753412     -0.283143     -0.617293      0.617293       222.789       223.406    
  19  0.240839      -1.42363      -3.10371       3.10371       222.075       225.179    
  20  0.684622     -0.378888     -0.826033      0.826033       223.773       224.599    
  21  0.243018      -1.41462      -3.08408       3.08408       225.417       228.501    
  22  0.815539     -0.203906     -0.444545      0.444545       225.392       225.836    
  23  0.589355     -0.528726      -1.15270       1.15270       223.818       224.971    
  24  0.243009      -1.41466      -3.08416       3.08416       225.094       228.178    
  25  0.821886     -0.196154     -0.427645      0.427645       223.131       223.559    
  26  0.261401      -1.34170      -2.92511       2.92511       225.238       228.164    
  27  0.571134     -0.560131      -1.22117       1.22117       226.541       227.762    
  28  0.406429E-01  -3.20293      -6.98287       6.98287       222.298       229.281    
  29  0.341463      -1.07451      -2.34260       2.34260       225.620       227.963    
  30  0.252643      -1.37578      -2.99940       2.99940       224.312       227.311    
  31  0.503366     -0.686439      -1.49654       1.49654       226.726       228.222    
  32  0.247804      -1.39512      -3.04156       3.04156       224.231       227.273    
  33  0.902392     -0.102706     -0.223914      0.223914       225.816       226.040    
  34  0.198330E-01  -3.92041      -8.54707       8.54707       227.530       236.077    
  35  0.695627     -0.362942     -0.791267      0.791267       223.674       224.465    
  36  0.833441     -0.182192     -0.397206      0.397206       227.526       227.923    
  37  0.720954     -0.327181     -0.713302      0.713302       225.904       226.617    
  38  0.155604      -1.86044      -4.05604       4.05604       225.716       229.772    
  39  0.496580E-01  -3.00260      -6.54611       6.54611       228.015       234.561    
  40  0.804644     -0.217356     -0.473868      0.473868       224.598       225.072    
  41  0.329241      -1.11097      -2.42207       2.42207       227.085       229.507    
  42  0.889596     -0.116988     -0.255051      0.255051       226.974       227.229    
  43  0.857341     -0.153920     -0.335568      0.335568       228.398       228.734    
  44  0.238258      -1.43440      -3.12720       3.12720       228.553       231.680    
  45  0.998437     -0.156448E-02 -0.341079E-02  0.341079E-02   226.531       226.535    
  46  0.280889      -1.26979      -2.76834       2.76834       228.512       231.281    
  47  0.518450     -0.656912      -1.43217       1.43217       222.242       223.674    
  48  0.348786      -1.05330      -2.29634       2.29634       230.407       232.704    
  49  0.250207      -1.38547      -3.02052       3.02052       227.625       230.646    
  50  0.442136     -0.816138      -1.77930       1.77930       231.733       233.513    
  51  0.881002     -0.126696     -0.276215      0.276215       227.983       228.260    
  52  0.903963     -0.100967     -0.220123      0.220123       220.517       220.737    
loop,thermsimp(1:2)       87   6.77481      0.831825    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357        226.17          1.16          1.03         23.96          0.00          0.06         26.21
Just calling func    0   0         26.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    226.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       87
neval is:      356
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       88
neval is:      356


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      356     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -1.64111       1.64111       218.834       220.475    
   2  0.531040     -0.632917      -1.37985       1.37985       220.276       221.656    
   3  0.592986E-01  -2.82517      -6.15929       6.15929       219.798       225.957    
   4  0.247694      -1.39556      -3.04253       3.04253       219.936       222.978    
   5  0.131832      -2.02623      -4.41747       4.41747       220.517       224.934    
   6  0.928797E-01  -2.37645      -5.18101       5.18101       221.160       226.341    
   7  0.638590     -0.448492     -0.977780      0.977780       220.777       221.755    
   8  0.220145      -1.51347      -3.29959       3.29959       220.371       223.670    
   9  0.764323     -0.268765     -0.585948      0.585948       215.645       216.231    
  10  0.223429      -1.49866      -3.26730       3.26730       221.714       224.981    
  11  0.705665     -0.348615     -0.760032      0.760032       221.522       222.282    
  12  0.812667     -0.207434     -0.452238      0.452238       222.789       223.241    
  13  0.344167      -1.06663      -2.32541       2.32541       220.266       222.591    
  14  0.691720     -0.368573     -0.803545      0.803545       223.131       223.935    
  15  0.601584     -0.508189      -1.10793       1.10793       222.242       223.350    
  16  0.323598      -1.12825      -2.45976       2.45976       223.674       226.133    
  17  0.536181     -0.623284      -1.35885       1.35885       223.773       225.132    
  18  0.224445      -1.49412      -3.25741       3.25741       223.818       227.076    
  19  0.967837     -0.326916E-01 -0.712724E-01  0.712724E-01   224.063       224.135    
  20  0.982234     -0.179257E-01 -0.390808E-01  0.390808E-01   224.598       224.637    
  21  0.656459     -0.420894     -0.917612      0.917612       222.075       222.993    
  22  0.138036      -1.98024      -4.31721       4.31721       225.392       229.709    
  23  0.698821     -0.358360     -0.781279      0.781279       225.816       226.597    
  24  0.603237     -0.505446      -1.10195       1.10195       226.531       227.633    
  25  0.253585      -1.37205      -2.99128       2.99128       225.904       228.895    
  26  0.404885     -0.904153      -1.97119       1.97119       222.694       224.665    
  27  0.802083     -0.220543     -0.480816      0.480816       222.566       223.047    
  28  0.756447     -0.279123     -0.608529      0.608529       226.974       227.582    
  29  0.390929     -0.939231      -2.04766       2.04766       224.231       226.279    
  30  0.260757      -1.34417      -2.93048       2.93048       224.312       227.242    
  31  0.177681      -1.72776      -3.76678       3.76678       226.541       230.308    
  32  0.806362     -0.215223     -0.469218      0.469218       227.526       227.995    
  33  0.222380      -1.50337      -3.27756       3.27756       225.620       228.898    
  34  0.969986     -0.304736E-01 -0.664370E-01  0.664370E-01   225.238       225.305    
  35  0.417166     -0.874272      -1.90604       1.90604       225.094       227.000    
  36  0.212672      -1.54800      -3.37488       3.37488       226.726       230.101    
  37  0.141187      -1.95767      -4.26801       4.26801       227.983       232.251    
  38  0.750343     -0.287224     -0.626191      0.626191       224.359       224.985    
  39  0.628172     -0.464941      -1.01364       1.01364       225.417       226.430    
  40  0.466629     -0.762221      -1.66176       1.66176       228.398       230.060    
  41  0.120425      -2.11672      -4.61477       4.61477       222.298       226.912    
  42  0.179567      -1.71721      -3.74377       3.74377       227.085       230.829    
  43  0.209268      -1.56414      -3.41006       3.41006       222.716       226.126    
  44  0.730304E-01  -2.61688      -5.70519       5.70519       225.716       231.422    
  45  0.985392     -0.147157E-01 -0.320825E-01  0.320825E-01   227.625       227.657    
  46  0.726759E-01  -2.62175      -5.71579       5.71579       228.512       234.228    
  47  0.205943      -1.58016      -3.44498       3.44498       228.553       231.998    
  48  0.198791      -1.61550      -3.52203       3.52203       230.407       233.929    
  49  0.320500      -1.13787      -2.48074       2.48074       231.733       234.214    
  50  0.911267     -0.929191E-01 -0.202577      0.202577       221.874       222.077    
  51  0.153842      -1.87183      -4.08087       4.08087       228.015       232.096    
  52  0.152265      -1.88213      -4.10333       4.10333       226.168       230.271    
loop,thermsimp(1:2)       88   1.64111       1.37985    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    358        216.73          1.27          1.04         23.99          0.04          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    216.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       88
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       89
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      357     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -2.28647       2.28647       215.645       217.932    
   2  0.650675     -0.429745     -0.936908      0.936908       218.834       219.771    
   3  0.849247     -0.163405     -0.356248      0.356248       220.276       220.633    
   4  0.910703     -0.935381E-01 -0.203927      0.203927       220.777       220.981    
   5  0.188892      -1.66658      -3.63339       3.63339       221.874       225.507    
   6  0.256564      -1.36038      -2.96582       2.96582       221.522       224.487    
   7  0.465488E-01  -3.06725      -6.68707       6.68707       220.266       226.953    
   8  0.824855     -0.192548     -0.419784      0.419784       219.936       220.356    
   9  0.730565     -0.313937     -0.684428      0.684428       222.075       222.759    
  10  0.888077     -0.118697     -0.258777      0.258777       222.566       222.825    
  11  0.898172     -0.107394     -0.234135      0.234135       222.789       223.023    
  12  0.314974      -1.15527      -2.51865       2.51865       222.242       224.761    
  13  0.247979      -1.39441      -3.04002       3.04002       220.371       223.411    
  14  0.330032E-01  -3.41115      -7.43682       7.43682       223.131       230.568    
  15  0.570783E-01  -2.86333      -6.24249       6.24249       224.063       230.306    
  16  0.694187     -0.365014     -0.795784      0.795784       224.598       225.394    
  17  0.314834      -1.15571      -2.51962       2.51962       222.694       225.214    
  18  0.917621     -0.859711E-01 -0.187430      0.187430       220.517       220.704    
  19  0.613858     -0.487991      -1.06389       1.06389       221.714       222.778    
  20  0.744084E-01  -2.59819      -5.66443       5.66443       224.359       230.023    
  21  0.454198     -0.789221      -1.72062       1.72062       223.773       225.494    
  22  0.118203E-01  -4.43793      -9.67535       9.67535       225.238       234.914    
  23  0.746996     -0.291695     -0.635938      0.635938       219.798       220.434    
  24  0.416160     -0.876686      -1.91131       1.91131       222.716       224.627    
  25  0.339178E-01  -3.38381      -7.37722       7.37722       223.674       231.051    
  26  0.824080     -0.193487     -0.421831      0.421831       224.231       224.653    
  27  0.589652     -0.528223      -1.15160       1.15160       221.160       222.311    
  28  0.680293     -0.385231     -0.839861      0.839861       225.417       226.257    
  29  0.864872E-01  -2.44776      -5.33648       5.33648       225.816       231.152    
  30  0.672988     -0.396027     -0.863398      0.863398       222.298       223.161    
  31  0.797049E-01  -2.52942      -5.51452       5.51452       225.094       230.609    
  32  0.831708     -0.184273     -0.401743      0.401743       223.818       224.220    
  33  0.280253E-01  -3.57465      -7.79326       7.79326       224.312       232.105    
  34  0.131717      -2.02710      -4.41938       4.41938       226.974       231.393    
  35  0.343675      -1.06806      -2.32853       2.32853       226.531       228.860    
  36  0.280745      -1.27031      -2.76946       2.76946       227.625       230.395    
  37  0.322275      -1.13235      -2.46869       2.46869       227.526       229.995    
  38  0.769830E-01  -2.56417      -5.59027       5.59027       225.904       231.494    
  39  0.851798     -0.160406     -0.349708      0.349708       225.620       225.970    
  40  0.864683     -0.145392     -0.316976      0.316976       225.392       225.709    
  41  0.157880      -1.84592      -4.02438       4.02438       228.398       232.423    
  42  0.371895     -0.989143      -2.15648       2.15648       226.726       228.882    
  43  0.861425     -0.149167     -0.325207      0.325207       226.168       226.493    
  44  0.778275E-01  -2.55326      -5.56649       5.56649       226.541       232.107    
  45  0.450106     -0.798272      -1.74035       1.74035       227.085       228.825    
  46  0.188928      -1.66639      -3.63298       3.63298       225.716       229.349    
  47  0.225391      -1.48992      -3.24824       3.24824       228.553       231.801    
  48  0.814689     -0.204949     -0.446818      0.446818       228.015       228.462    
  49  0.556109     -0.586791      -1.27929       1.27929       227.983       229.263    
  50  0.860351     -0.150415     -0.327928      0.327928       230.407       230.735    
  51  0.124594      -2.08269      -4.54058       4.54058       231.733       236.274    
  52  0.924630     -0.783615E-01 -0.170840      0.170840       216.726       216.897    
loop,thermsimp(1:2)       89   2.28647      0.936908    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359        222.35          1.14          1.02         24.00          0.00          0.06         26.21
Just calling func    0   0         26.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    222.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       89
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       90
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      358     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -4.42103       4.42103       216.726       221.147    
   2  0.314760      -1.15594      -2.52013       2.52013       215.645       218.165    
   3  0.748375     -0.289851     -0.631918      0.631918       218.834       219.466    
   4  0.632472     -0.458119     -0.998767      0.998767       219.936       220.935    
   5  0.677472     -0.389387     -0.848921      0.848921       219.798       220.647    
   6  0.433475     -0.835921      -1.82243       1.82243       220.276       222.099    
   7  0.458976     -0.778758      -1.69781       1.69781       220.517       222.215    
   8  0.411427E-02  -5.49329      -11.9762       11.9762       220.777       232.753    
   9  0.904989     -0.998322E-01 -0.217649      0.217649       221.160       221.377    
  10  0.480311     -0.733322      -1.59875       1.59875       222.075       223.674    
  11  0.277870      -1.28060      -2.79190       2.79190       221.714       224.506    
  12  0.958372     -0.425196E-01 -0.926991E-01  0.926991E-01   222.566       222.659    
  13  0.321639      -1.13432      -2.47300       2.47300       222.789       225.262    
  14  0.562333     -0.575660      -1.25503       1.25503       222.298       223.553    
  15  0.665565     -0.407119     -0.887579      0.887579       220.371       221.258    
  16  0.307614      -1.17891      -2.57020       2.57020       223.818       226.389    
  17  0.504790E-01  -2.98620      -6.51035       6.51035       221.522       228.032    
  18  0.361959      -1.01622      -2.21552       2.21552       222.716       224.931    
  19  0.470787     -0.753350      -1.64242       1.64242       224.231       225.874    
  20  0.312221      -1.16404      -2.53779       2.53779       222.242       224.780    
  21  0.156792      -1.85283      -4.03945       4.03945       222.694       226.734    
  22  0.445216     -0.809196      -1.76417       1.76417       224.598       226.362    
  23  0.999492     -0.508321E-03 -0.110822E-02  0.110822E-02   223.773       223.774    
  24  0.167067      -1.78936      -3.90107       3.90107       221.874       225.775    
  25  0.435083     -0.832219      -1.81436       1.81436       225.392       227.206    
  26  0.110403      -2.20362      -4.80421       4.80421       225.620       230.424    
  27  0.704194     -0.350701     -0.764581      0.764581       225.417       226.181    
  28  0.767816     -0.264205     -0.576007      0.576007       226.168       226.744    
  29  0.231293      -1.46407      -3.19189       3.19189       220.266       223.458    
  30  0.965513     -0.350953E-01 -0.765129E-01  0.765129E-01   228.015       228.091    
  31  0.674440     -0.393873     -0.858701      0.858701       227.085       227.944    
  32  0.248626      -1.39181      -3.03435       3.03435       226.531       229.566    
  33  0.461218     -0.773884      -1.68718       1.68718       226.726       228.413    
  34  0.778910     -0.249859     -0.544731      0.544731       227.983       228.528    
  35  0.665530     -0.407172     -0.887696      0.887696       225.716       226.604    
  36  0.383296     -0.958947      -2.09065       2.09065       227.526       229.617    
  37  0.492311     -0.708645      -1.54495       1.54495       224.359       225.904    
  38  0.631911     -0.459006      -1.00070       1.00070       224.063       225.064    
  39  0.150454E-01  -4.19668      -9.14940       9.14940       227.625       236.775    
  40  0.958677     -0.422006E-01 -0.920036E-01  0.920036E-01   223.131       223.223    
  41  0.411899     -0.886977      -1.93374       1.93374       225.094       227.028    
  42  0.466999     -0.761428      -1.66003       1.66003       230.407       232.067    
  43  0.622674     -0.473731      -1.03280       1.03280       223.674       224.706    
  44  0.497710     -0.697737      -1.52117       1.52117       225.816       227.337    
  45  0.763352E-01  -2.57262      -5.60870       5.60870       226.974       232.583    
  46  0.192360      -1.64839      -3.59373       3.59373       225.904       229.498    
  47  0.444368     -0.811101      -1.76832       1.76832       228.553       230.321    
  48  0.617268     -0.482452      -1.05182       1.05182       224.312       225.364    
  49  0.898554     -0.106968     -0.233206      0.233206       226.541       226.774    
  50  0.382850     -0.960111      -2.09319       2.09319       228.398       230.491    
  51  0.769319     -0.262250     -0.571743      0.571743       225.238       225.810    
  52  0.356805      -1.03057      -2.24679       2.24679       222.352       224.598    
loop,thermsimp(1:2)       90   4.42103       2.52013    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    360        230.08          1.24          1.02         24.07          0.01          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.18015               358
loop is:       90
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.18015               358
loop is:       91
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.09007               409

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      359     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.904453E-01  0.904453E-01   215.645       215.736    
   2  0.393393     -0.932946      -1.01698       1.01698       218.834       219.851    
   3  0.317218      -1.14817      -1.25159       1.25159       219.798       221.049    
   4  0.324247      -1.12625      -1.22769       1.22769       219.936       221.163    
   5  0.515746E-01  -2.96473      -3.23177       3.23177       216.726       219.958    
   6  0.143224      -1.94335      -2.11839       2.11839       220.371       222.489    
   7  0.512136     -0.669164     -0.729439      0.729439       221.160       221.889    
   8  0.993896     -0.612239E-02 -0.667386E-02  0.667386E-02   220.276       220.283    
   9  0.440900     -0.818937     -0.892702      0.892702       220.517       221.410    
  10  0.861233     -0.149390     -0.162847      0.162847       222.566       222.729    
  11  0.690005     -0.371056     -0.404479      0.404479       223.131       223.536    
  12  0.192792      -1.64614      -1.79442       1.79442       220.266       222.060    
  13  0.975175     -0.251388E-01 -0.274031E-01  0.274031E-01   222.298       222.325    
  14  0.595327E-01  -2.82123      -3.07535       3.07535       222.075       225.150    
  15  0.142661      -1.94729      -2.12269       2.12269       223.773       225.896    
  16  0.141610      -1.95468      -2.13074       2.13074       221.714       223.844    
  17  0.976591     -0.236872E-01 -0.258208E-01  0.258208E-01   222.352       222.377    
  18  0.894748     -0.111213     -0.121231      0.121231       223.674       223.795    
  19  0.747310     -0.291275     -0.317511      0.317511       222.242       222.559    
  20  0.434887     -0.832670     -0.907672      0.907672       222.716       223.624    
  21  0.673581     -0.395146     -0.430739      0.430739       224.063       224.494    
  22  0.624944     -0.470094     -0.512437      0.512437       222.789       223.301    
  23  0.617967     -0.481321     -0.524676      0.524676       224.312       224.837    
  24  0.659853     -0.415739     -0.453186      0.453186       221.874       222.327    
  25  0.963159E-01  -2.34012      -2.55091       2.55091       225.238       227.789    
  26  0.179190      -1.71931      -1.87417       1.87417       224.231       226.105    
  27  0.251042      -1.38213      -1.50663       1.50663       224.359       225.865    
  28  0.116711      -2.14806      -2.34154       2.34154       225.417       227.758    
  29  0.890376     -0.116112     -0.126570      0.126570       224.598       224.725    
  30  0.880065E-02  -4.73293      -5.15924       5.15924       223.818       228.978    
  31  0.613810     -0.488070     -0.532033      0.532033       225.716       226.248    
  32  0.960436E-01  -2.34295      -2.55399       2.55399       222.694       225.248    
  33  0.768907E-02  -4.86796      -5.30643       5.30643       226.168       231.474    
  34  0.316163      -1.15150      -1.25522       1.25522       226.541       227.796    
  35  0.195769      -1.63082      -1.77771       1.77771       225.094       226.872    
  36  0.813020     -0.207000     -0.225645      0.225645       225.392       225.618    
  37  0.578245     -0.547758     -0.597097      0.597097       225.816       226.413    
  38  0.711511     -0.340365     -0.371023      0.371023       227.085       227.456    
  39  0.565886     -0.569362     -0.620647      0.620647       221.522       222.142    
  40  0.874556     -0.134039     -0.146112      0.146112       228.015       228.161    
  41  0.335685      -1.09158      -1.18990       1.18990       226.726       227.916    
  42  0.861776     -0.148759     -0.162159      0.162159       227.983       228.146    
  43  0.634500     -0.454918     -0.495895      0.495895       225.904       226.400    
  44  0.211879      -1.55174      -1.69151       1.69151       226.531       228.223    
  45  0.789454     -0.236414     -0.257709      0.257709       227.526       227.784    
  46  0.726316E-01  -2.62235      -2.85856       2.85856       228.553       231.411    
  47  0.344022      -1.06705      -1.16316       1.16316       225.620       226.783    
  48  0.367544      -1.00091      -1.09107       1.09107       228.398       229.489    
  49  0.634223     -0.455355     -0.496371      0.496371       230.407       230.904    
  50  0.462643     -0.770799     -0.840228      0.840228       226.974       227.814    
  51  0.904061     -0.100859     -0.109943      0.109943       220.777       220.887    
  52  0.183754      -1.69416      -1.84676       1.84676       230.080       231.927    
loop,thermsimp(1:2)       91  0.904453E-01   1.01698    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361        227.63          1.17          1.02         23.96          0.09          0.06         26.30
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    227.63        2.843     -1.443      5.145     -100.0      1.309    
                     -0.5011      2.628     -100.0      2.741      1.115    
                       1.299    -0.9708      1.841      0.000      0.000    
                      -1.509      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.958     -2.800     -5.555     -2.958    
                      -13.50     -2.692      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.1169    -0.2783E-01  0.000    -0.7941    
                     -0.2446    -0.2259    -0.1317    -0.2037    -0.3256E-02

                      -1.133    -0.6438      0.000    -0.8346E-01-0.1785E-01
                      0.8541E-01-0.1349E-01-0.2520E-01-0.1262    -0.1795    
                     -0.3104     0.5253E-01-0.2019    -0.6918      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.079      9.091     -7039.     -4.000    
                     -0.3350     0.2310      9.027      8.583     -4904.    

                      -4.000    -0.1586    -0.7319      8.847      9.046    
                      -6912.     -4.000     0.5213E-01-0.7574      9.607    
                       8.851     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    227.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.09007               409
loop is:       91
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.09007               409
loop is:       92
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      360     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -1.26294       1.26294       215.645       216.908    
   2  0.484866     -0.723883     -0.789086      0.789086       218.834       219.623    
   3  0.743257     -0.296713     -0.323439      0.323439       216.726       217.050    
   4  0.476659     -0.740953     -0.807694      0.807694       220.276       221.084    
   5  0.895662E-01  -2.41278      -2.63011       2.63011       220.777       223.407    
   6  0.100541      -2.29719      -2.50410       2.50410       219.798       222.302    
   7  0.394309     -0.930621      -1.01445       1.01445       219.936       220.950    
   8  0.856201     -0.155250     -0.169234      0.169234       220.517       220.686    
   9  0.903325     -0.101673     -0.110831      0.110831       221.160       221.271    
  10  0.849389     -0.163238     -0.177941      0.177941       220.266       220.444    
  11  0.245876      -1.40293      -1.52930       1.52930       221.522       223.051    
  12  0.535664     -0.624247     -0.680476      0.680476       222.298       222.978    
  13  0.509317     -0.674685     -0.735456      0.735456       221.874       222.609    
  14  0.103141      -2.27166      -2.47628       2.47628       222.352       224.828    
  15  0.822327     -0.195617     -0.213237      0.213237       220.371       220.584    
  16  0.293454      -1.22603      -1.33647       1.33647       222.242       223.578    
  17  0.610098E-01  -2.79672      -3.04863       3.04863       222.566       225.615    
  18  0.467864E-01  -3.06216      -3.33798       3.33798       222.789       226.127    
  19  0.888641     -0.118062     -0.128696      0.128696       223.131       223.260    
  20  0.371769     -0.989482      -1.07861       1.07861       222.716       223.794    
  21  0.770202     -0.261103     -0.284621      0.284621       223.674       223.958    
  22  0.752967E-01  -2.58632      -2.81928       2.81928       221.714       224.533    
  23  0.787365E-01  -2.54165      -2.77059       2.77059       224.063       226.834    
  24  0.516026     -0.661597     -0.721190      0.721190       224.598       225.319    
  25  0.133613      -2.01281      -2.19411       2.19411       224.312       226.506    
  26  0.705575     -0.348742     -0.380155      0.380155       222.075       222.455    
  27  0.747326     -0.291254     -0.317489      0.317489       222.694       223.012    
  28  0.941066E-01  -2.36333      -2.57620       2.57620       225.392       227.968    
  29  0.243001      -1.41469      -1.54212       1.54212       224.359       225.901    
  30  0.186020      -1.68190      -1.83340       1.83340       223.773       225.607    
  31  0.707073     -0.346621     -0.377843      0.377843       224.231       224.609    
  32  0.820399     -0.197964     -0.215795      0.215795       225.716       225.932    
  33  0.169787E-01  -4.07580      -4.44292       4.44292       225.904       230.347    
  34  0.196118      -1.62904      -1.77577       1.77577       225.816       227.592    
  35  0.910420E-01  -2.39643      -2.61229       2.61229       225.620       228.232    
  36  0.101963      -2.28314      -2.48880       2.48880       225.094       227.583    
  37  0.816143     -0.203166     -0.221466      0.221466       227.085       227.306    
  38  0.921931     -0.812847E-01 -0.886063E-01  0.886063E-01   225.417       225.505    
  39  0.867385     -0.142273     -0.155088      0.155088       227.526       227.681    
  40  0.534867     -0.625737     -0.682100      0.682100       225.238       225.921    
  41  0.354961      -1.03575      -1.12904       1.12904       226.541       227.670    
  42  0.707205     -0.346435     -0.377640      0.377640       226.974       227.352    
  43  0.341296      -1.07501      -1.17184       1.17184       226.726       227.898    
  44  0.615332     -0.485594     -0.529334      0.529334       227.983       228.513    
  45  0.100325      -2.29934      -2.50645       2.50645       228.015       230.521    
  46  0.218012      -1.52321      -1.66041       1.66041       226.531       228.192    
  47  0.346044      -1.06119      -1.15677       1.15677       223.818       224.975    
  48  0.313706      -1.15930      -1.26372       1.26372       228.398       229.662    
  49  0.884226     -0.123043     -0.134126      0.134126       230.407       230.541    
  50  0.562231     -0.575842     -0.627710      0.627710       228.553       229.180    
  51  0.208749      -1.56662      -1.70773       1.70773       226.168       227.876    
  52  0.553752     -0.591038     -0.644276      0.644276       227.625       228.269    
loop,thermsimp(1:2)       92   1.26294      0.789086    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    362        218.20          1.27          1.04         24.03          0.01          0.06         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    218.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.09007               409
loop is:       92
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.09007               409
loop is:       93
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      361     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -5.50258       5.50258       215.645       221.148    
   2  0.977343     -0.229176E-01 -0.249819E-01  0.249819E-01   216.726       216.751    
   3  0.515611     -0.662402     -0.722068      0.722068       218.834       219.556    
   4  0.985018     -0.150949E-01 -0.164546E-01  0.164546E-01   220.266       220.282    
   5  0.909744E-01  -2.39718      -2.61310       2.61310       220.371       222.984    
   6  0.163485      -1.81103      -1.97416       1.97416       220.517       222.491    
   7  0.709610     -0.343039     -0.373938      0.373938       219.936       220.310    
   8  0.639309     -0.447368     -0.487664      0.487664       220.276       220.764    
   9  0.500633     -0.691882     -0.754203      0.754203       221.160       221.914    
  10  0.623218     -0.472859     -0.515452      0.515452       219.798       220.313    
  11  0.974620     -0.257075E-01 -0.280231E-01  0.280231E-01   222.075       222.103    
  12  0.940866     -0.609540E-01 -0.664444E-01  0.664444E-01   221.874       221.940    
  13  0.268848      -1.31361      -1.43193       1.43193       222.298       223.730    
  14  0.131404      -2.02948      -2.21228       2.21228       222.694       224.906    
  15  0.242045      -1.41863      -1.54641       1.54641       221.522       223.068    
  16  0.333489      -1.09815      -1.19706       1.19706       223.131       224.328    
  17  0.540917     -0.614489     -0.669839      0.669839       220.777       221.447    
  18  0.935945     -0.661981E-01 -0.721609E-01  0.721609E-01   222.242       222.314    
  19  0.948265     -0.531218E-01 -0.579067E-01  0.579067E-01   222.716       222.774    
  20  0.306672      -1.18198      -1.28844       1.28844       223.674       224.962    
  21  0.674766E-01  -2.69597      -2.93881       2.93881       221.714       224.653    
  22  0.304885      -1.18782      -1.29481       1.29481       224.231       225.526    
  23  0.987276     -0.128055E-01 -0.139589E-01  0.139589E-01   222.352       222.366    
  24  0.866309     -0.143514     -0.156441      0.156441       223.818       223.975    
  25  0.325072      -1.12371      -1.22492       1.22492       224.598       225.823    
  26  0.882651     -0.124826     -0.136069      0.136069       225.417       225.553    
  27  0.608994E-02  -5.10112      -5.56060       5.56060       223.773       229.334    
  28  0.956776     -0.441859E-01 -0.481659E-01  0.481659E-01   222.566       222.614    
  29  0.680690E-01  -2.68723      -2.92928       2.92928       224.359       227.288    
  30  0.870194     -0.139039     -0.151563      0.151563       225.238       225.390    
  31  0.154954      -1.86463      -2.03258       2.03258       225.716       227.749    
  32  0.533144     -0.628963     -0.685616      0.685616       222.789       223.474    
  33  0.848128     -0.164724     -0.179561      0.179561       224.312       224.492    
  34  0.302343E-01  -3.49878      -3.81393       3.81393       224.063       227.877    
  35  0.670768     -0.399332     -0.435301      0.435301       227.085       227.520    
  36  0.575709     -0.552152     -0.601887      0.601887       226.974       227.576    
  37  0.961243     -0.395278E-01 -0.430883E-01  0.430883E-01   225.094       225.137    
  38  0.174287      -1.74705      -1.90442       1.90442       225.816       227.720    
  39  0.450902     -0.796506     -0.868251      0.868251       226.541       227.409    
  40  0.807155     -0.214240     -0.233537      0.233537       227.526       227.760    
  41  0.245094E-01  -3.70870      -4.04276       4.04276       226.168       230.211    
  42  0.840819     -0.173379     -0.188995      0.188995       226.726       226.915    
  43  0.418157     -0.871899     -0.950435      0.950435       225.392       226.342    
  44  0.795491     -0.228796     -0.249404      0.249404       226.531       226.781    
  45  0.675445E-01  -2.69497      -2.93772       2.93772       225.620       228.558    
  46  0.158617      -1.84126      -2.00712       2.00712       227.625       229.632    
  47  0.538475     -0.619015     -0.674772      0.674772       227.983       228.658    
  48  0.318292      -1.14479      -1.24790       1.24790       228.553       229.801    
  49  0.427160     -0.850596     -0.927213      0.927213       228.398       229.325    
  50  0.485422     -0.722737     -0.787837      0.787837       225.904       226.692    
  51  0.603579     -0.504879     -0.550356      0.550356       228.015       228.565    
  52  0.151674      -1.88602      -2.05591       2.05591       218.201       220.257    
loop,thermsimp(1:2)       93   5.50258      0.249819E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363        226.29          1.26          1.04         23.99          0.05          0.06         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    226.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.09007               409
loop is:       93
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.09007               409
loop is:       94
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      362     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831     -0.956901      0.956901       216.726       217.683    
   2  0.262668E-01  -3.63945      -3.96727       3.96727       218.834       222.801    
   3  0.620248     -0.477636     -0.520659      0.520659       218.201       218.721    
   4  0.249183      -1.38957      -1.51473       1.51473       220.266       221.781    
   5  0.999872     -0.128438E-03 -0.140007E-03  0.140007E-03   219.936       219.936    
   6  0.933252     -0.690802E-01 -0.753025E-01  0.753025E-01   219.798       219.873    
   7  0.857047     -0.154263     -0.168158      0.168158       220.276       220.445    
   8  0.365787      -1.00570      -1.09629       1.09629       215.645       216.742    
   9  0.499682     -0.693784     -0.756276      0.756276       220.777       221.533    
  10  0.761560     -0.272387     -0.296922      0.296922       221.160       221.457    
  11  0.793904E-01  -2.53338      -2.76157       2.76157       221.874       224.636    
  12  0.514449     -0.664659     -0.724527      0.724527       222.075       222.799    
  13  0.678176     -0.388349     -0.423329      0.423329       222.242       222.665    
  14  0.257558      -1.35651      -1.47870       1.47870       222.352       223.830    
  15  0.832067E-01  -2.48643      -2.71039       2.71039       220.517       223.227    
  16  0.272851      -1.29883      -1.41582       1.41582       222.566       223.982    
  17  0.255245      -1.36553      -1.48853       1.48853       222.716       224.204    
  18  0.419883     -0.867779     -0.945943      0.945943       220.371       221.317    
  19  0.870346     -0.138865     -0.151373      0.151373       221.522       221.673    
  20  0.814510E-01  -2.50775      -2.73364       2.73364       222.789       225.522    
  21  0.560000     -0.579819     -0.632046      0.632046       222.298       222.930    
  22  0.860285     -0.150492     -0.164047      0.164047       223.818       223.982    
  23  0.538601     -0.618780     -0.674517      0.674517       223.131       223.806    
  24  0.542321     -0.611898     -0.667014      0.667014       224.312       224.979    
  25  0.836575     -0.178440     -0.194512      0.194512       221.714       221.908    
  26  0.705694     -0.348574     -0.379972      0.379972       222.694       223.074    
  27  0.301063      -1.20043      -1.30856       1.30856       223.674       224.982    
  28  0.125899      -2.07227      -2.25893       2.25893       225.094       227.353    
  29  0.476747     -0.740770     -0.807495      0.807495       225.238       226.046    
  30  0.676103     -0.391410     -0.426666      0.426666       224.231       224.658    
  31  0.385349     -0.953606      -1.03950       1.03950       225.417       226.456    
  32  0.141470      -1.95567      -2.13182       2.13182       224.598       226.730    
  33  0.146971      -1.91752      -2.09024       2.09024       225.392       227.482    
  34  0.616396     -0.483866     -0.527450      0.527450       225.904       226.431    
  35  0.962361     -0.383659E-01 -0.418217E-01  0.418217E-01   226.531       226.573    
  36  0.618266     -0.480836     -0.524147      0.524147       226.726       227.250    
  37  0.369072     -0.996763      -1.08655       1.08655       224.359       225.445    
  38  0.312675      -1.16259      -1.26731       1.26731       226.541       227.808    
  39  0.367326      -1.00150      -1.09171       1.09171       227.085       228.177    
  40  0.184422      -1.69053      -1.84280       1.84280       226.974       228.817    
  41  0.113088      -2.17959      -2.37592       2.37592       225.816       228.192    
  42  0.333487      -1.09815      -1.19707       1.19707       225.716       226.914    
  43  0.407562     -0.897562     -0.978409      0.978409       227.526       228.505    
  44  0.443434     -0.813206     -0.886455      0.886455       224.063       224.950    
  45  0.265046      -1.32785      -1.44746       1.44746       225.620       227.068    
  46  0.444603     -0.810573     -0.883584      0.883584       228.015       228.898    
  47  0.689395E-01  -2.67453      -2.91543       2.91543       227.983       230.899    
  48  0.862417     -0.148017     -0.161349      0.161349       228.398       228.560    
  49  0.541063     -0.614219     -0.669544      0.669544       223.773       224.443    
  50  0.885208     -0.121933     -0.132916      0.132916       227.625       227.758    
  51  0.808718     -0.212305     -0.231428      0.231428       228.553       228.784    
  52  0.238877E-01  -3.73439      -4.07076       4.07076       226.290       230.361    
loop,thermsimp(1:2)       94  0.956901       3.96727    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364        218.25          1.26          1.03         24.00          0.04          0.05         26.38
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    218.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.09007               409
loop is:       94
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    69.7648      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.09007               409
loop is:       95
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      363     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -1.33858       1.33858       215.645       216.984    
   2  0.225242      -1.49058      -1.62484       1.62484       216.726       218.351    
   3  0.946430E-01  -2.35764      -2.57001       2.57001       218.201       220.771    
   4  0.371694     -0.989684      -1.07883       1.07883       219.798       220.876    
   5  0.933291     -0.690381E-01 -0.752567E-01  0.752567E-01   219.936       220.011    
   6  0.926571     -0.762651E-01 -0.831346E-01  0.831346E-01   220.276       220.360    
   7  0.138048      -1.98015      -2.15852       2.15852       220.371       222.529    
   8  0.113008E-01  -4.48288      -4.88668       4.88668       221.160       226.046    
   9  0.405736     -0.902053     -0.983305      0.983305       220.777       221.760    
  10  0.390885     -0.939341      -1.02395       1.02395       221.522       222.546    
  11  0.873008     -0.135810     -0.148043      0.148043       220.266       220.414    
  12  0.945037     -0.565316E-01 -0.616236E-01  0.616236E-01   221.714       221.775    
  13  0.642194E-01  -2.74545      -2.99274       2.99274       222.242       225.235    
  14  0.322052E-01  -3.43563      -3.74509       3.74509       222.075       225.820    
  15  0.521559     -0.650933     -0.709565      0.709565       218.834       219.543    
  16  0.271788      -1.30273      -1.42008       1.42008       222.298       223.718    
  17  0.153503      -1.87403      -2.04284       2.04284       222.694       224.737    
  18  0.219303      -1.51730      -1.65397       1.65397       220.517       222.171    
  19  0.476616     -0.741044     -0.807793      0.807793       223.131       223.939    
  20  0.510024     -0.673297     -0.733943      0.733943       222.352       223.086    
  21  0.393388     -0.932959      -1.01699       1.01699       222.566       223.583    
  22  0.947927     -0.534776E-01 -0.582946E-01  0.582946E-01   223.818       223.877    
  23  0.472009     -0.750758     -0.818382      0.818382       222.716       223.534    
  24  0.678717     -0.387551     -0.422459      0.422459       223.773       224.196    
  25  0.617620     -0.481882     -0.525288      0.525288       221.874       222.399    
  26  0.138594E-01  -4.27879      -4.66420       4.66420       224.231       228.896    
  27  0.588445     -0.530273     -0.578036      0.578036       224.063       224.641    
  28  0.950805     -0.504465E-01 -0.549904E-01  0.549904E-01   224.312       224.367    
  29  0.444108     -0.811687     -0.884799      0.884799       223.674       224.558    
  30  0.299195      -1.20666      -1.31535       1.31535       224.359       225.674    
  31  0.808517E-01  -2.51514      -2.74169       2.74169       222.789       225.530    
  32  0.493903     -0.705415     -0.768955      0.768955       225.238       226.007    
  33  0.973584     -0.267710E-01 -0.291823E-01  0.291823E-01   225.904       225.933    
  34  0.219889      -1.51463      -1.65106       1.65106       225.417       227.068    
  35  0.872114     -0.136835     -0.149161      0.149161       226.531       226.680    
  36  0.413991     -0.881912     -0.961349      0.961349       224.598       225.559    
  37  0.155656      -1.86011      -2.02766       2.02766       225.716       227.744    
  38  0.744603     -0.294905     -0.321468      0.321468       225.620       225.942    
  39  0.627736     -0.465635     -0.507577      0.507577       226.726       227.234    
  40  0.137880      -1.98137      -2.15984       2.15984       225.094       227.254    
  41  0.270817      -1.30631      -1.42398       1.42398       225.392       226.816    
  42  0.271872      -1.30243      -1.41974       1.41974       227.625       229.045    
  43  0.988104     -0.119670E-01 -0.130449E-01  0.130449E-01   226.541       226.554    
  44  0.837729E-01  -2.47965      -2.70300       2.70300       227.085       229.788    
  45  0.731806     -0.312240     -0.340365      0.340365       225.816       226.156    
  46  0.520356     -0.653242     -0.712082      0.712082       227.526       228.238    
  47  0.158934      -1.83927      -2.00494       2.00494       228.398       230.403    
  48  0.724534     -0.322226     -0.351251      0.351251       228.553       228.904    
  49  0.895315     -0.110580     -0.120540      0.120540       226.974       227.094    
  50  0.850194     -0.162291     -0.176909      0.176909       228.015       228.192    
  51  0.428755     -0.846869     -0.923150      0.923150       226.290       227.214    
  52  0.523907     -0.646440     -0.704668      0.704668       218.254       218.958    
loop,thermsimp(1:2)       95   1.33858       1.62484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365        219.92          1.24          1.04         23.93          0.03          0.06         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    219.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.09007               409
loop is:       95
neval is:      364
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   3.00395    

hmean,hstd :    223.222       3.00395    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    223.222       3.00395    
h(1),h(best1),h(np1) :    215.645       215.645       219.919    
htherm(1),htherm(best1),htherm(np1) :    216.984       216.984       230.403    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    366        219.12          1.25          1.04         24.00          0.02          0.06         26.36

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    2.6828      -1.5219       5.2044      -100.00       1.2602     -0.49823    
    2.7763      -100.00       3.0348      0.98847       1.1652      -1.1399    
    1.8407       0.0000       0.0000      -1.5791       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       10113.       13790.      -1559.7    

   -34511.      -2.0000      -3.8159      -3.2512      -5.7967      -2.6130    
   -12.945      -2.7894       1521.8       0.0000       2659.4       3281.5    
    4343.7       3225.9       5995.8       2193.2       2108.2      0.10429    
  -0.46507E-01   0.0000     -0.65844     -0.28923     -0.17810     -0.16481    

  -0.22330     -0.19964E-02  -1.3488     -0.61211       0.0000     -0.10844    
  -0.45406E-01  0.85411E-01  0.25374E-01 -0.59644E-01 -0.82515E-01 -0.11319    
   0.10990      0.33576E-01 -0.27505      -1.5549       0.0000     -0.50000    
   -1.0000       1.7644      -1.2928       0.0000       0.0000       9.1755    

    9.0907      -7039.2      -4.0000     -0.14725      0.34868       9.0242    
    8.5351      -4903.9      -4.0000     -0.27241     -0.59410       8.7200    
    9.0863      -6912.4      -4.0000     -0.10710     -0.87348       9.6467    
    8.7868      -3546.1      -2.0000    
 Function value at centroid =   219.115    

 Minimum found after  365 function evaluations
 Minimum at
   2.68281     -1.52187      5.20439     -100.000      1.26022    -0.498227    
   2.77633     -100.000      3.03478     0.988470      1.16524     -1.13994    
   1.84069      0.00000      0.00000     -1.57907      0.00000      0.00000    
   0.00000     -1.22100     -2.50000      10112.7      13789.9     -1559.71    

  -34511.5     -2.00000     -3.81586     -3.25122     -5.79670     -2.61301    
  -12.9453     -2.78942      1521.76      0.00000      2659.41      3281.50    
   4343.74      3225.90      5995.85      2193.24      2108.24     0.104294    
 -0.465072E-01  0.00000    -0.658438    -0.289228    -0.178104    -0.164805    

 -0.223304    -0.199642E-02 -1.34884    -0.612114      0.00000    -0.108444    
