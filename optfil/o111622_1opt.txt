nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    48.4364      0.500000    
Tfreq:   74
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    48.4364      0.500000    
Tfreq:   74
 Estimating   74 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        161.45          4.38          1.13         25.27          0.02          0.04         30.84
iter,obj,time:      3        161.42          0.87          1.15         25.28          0.13          0.06         27.49
iter,obj,time:      4        162.91          0.87          1.15         25.26          0.33          0.05         27.67
iter,obj,time:      5        161.41          0.87          1.15         25.30          0.50          0.05         27.87
iter,obj,time:      6        164.57          0.87          1.15         25.25          0.08          0.05         27.41
iter,obj,time:      7        162.03          0.87          1.16         25.26          0.13          0.05         27.47
iter,obj,time:      8        162.75          0.87          1.15         25.27          0.09          0.05         27.43
iter,obj,time:      9        162.15          0.87          1.15         25.31          0.11          0.05         27.49
iter,obj,time:     10        159.76          0.87          1.16         25.30          0.10          0.05         27.47
iter,obj,time:     11        160.67          0.87          1.15         25.25          0.15          0.05         27.47
iter,obj,time:     12        170.73          0.87          1.16         25.23          0.16          0.05         27.47
iter,obj,time:     13        162.82          0.87          1.15         25.24          0.10          0.05         27.41
iter,obj,time:     14        162.31          0.87          1.15         25.27          0.07          0.05         27.41
iter,obj,time:     15        161.87          0.87          1.15         25.24          0.09          0.05         27.40
iter,obj,time:     16        161.44          0.87          1.15         25.30          0.58          0.05         27.95
iter,obj,time:     17        161.60          0.87          1.15         25.26          0.24          0.05         27.57
iter,obj,time:     18        161.46          0.87          1.15         25.25          0.15          0.06         27.47
iter,obj,time:     19        161.21          0.87          1.15         25.24          0.12          0.05         27.44
iter,obj,time:     20        161.46          0.87          1.17         25.29          0.19          0.05         27.57
iter,obj,time:     21        161.41          0.87          1.15         25.26          0.09          0.05         27.42
iter,obj,time:     22        161.45          0.87          1.15         25.26          0.14          0.05         27.47
iter,obj,time:     23        161.54          0.87          1.15         25.22          0.12          0.05         27.41
iter,obj,time:     24        157.39          0.87          1.15         25.26          0.12          0.05         27.45
iter,obj,time:     25        154.96          0.87          1.16         25.28          0.16          0.06         27.51
iter,obj,time:     26        158.42          0.87          1.15         25.29          0.21          0.05         27.57
iter,obj,time:     27        152.24          0.87          1.16         25.25          0.12          0.05         27.45
iter,obj,time:     28        160.33          0.87          1.15         25.30          0.06          0.05         27.44
iter,obj,time:     29        155.55          0.87          1.16         25.27          0.16          0.05         27.51
iter,obj,time:     30        155.76          0.87          1.15         25.26          0.08          0.05         27.42
iter,obj,time:     31        155.62          0.87          1.15         25.30          0.32          0.05         27.69
iter,obj,time:     32        163.61          0.87          1.15         25.30          0.44          0.06         27.81
iter,obj,time:     33        164.92          0.87          1.15         25.25          0.11          0.05         27.44
iter,obj,time:     34        164.35          0.87          1.15         25.25          0.11          0.05         27.43
iter,obj,time:     35        161.45          0.87          1.15         25.31          0.22          0.05         27.59
iter,obj,time:     36        162.35          0.87          1.14         25.25          0.14          0.05         27.46
iter,obj,time:     37        164.97          0.87          1.16         25.26          0.13          0.05         27.47
iter,obj,time:     38        163.72          0.87          1.15         25.23          0.12          0.05         27.43
iter,obj,time:     39        163.06          0.87          1.15         25.25          0.08          0.05         27.40
iter,obj,time:     40        164.69          0.87          1.15         25.28          0.12          0.05         27.47
iter,obj,time:     41        166.91          0.87          1.15         25.27          0.22          0.05         27.56
iter,obj,time:     42        161.21          0.87          1.14         25.30          0.50          0.05         27.87
iter,obj,time:     43        189.96          0.87          1.15         25.25          0.10          0.05         27.41
iter,obj,time:     44        163.12          0.87          1.15         25.22          0.17          0.06         27.48
iter,obj,time:     45        161.45          0.87          1.14         25.31          0.06          0.05         27.44
iter,obj,time:     46        162.80          0.87          1.15         25.25          0.15          0.05         27.47
iter,obj,time:     47        162.48          0.87          1.15         25.20          0.16          0.05         27.44
iter,obj,time:     48        161.56          0.87          1.15         25.32          0.23          0.05         27.62
iter,obj,time:     49        163.45          0.87          1.15         25.33          0.41          0.05         27.81
iter,obj,time:     50        161.85          0.87          1.15         25.29          0.04          0.06         27.40
iter,obj,time:     51        162.53          0.87          1.14         25.27          0.14          0.05         27.48
iter,obj,time:     52        161.89          0.87          1.15         25.30          0.04          0.06         27.41
iter,obj,time:     53        209.65          0.87          1.15         25.28          0.21          0.05         27.57
iter,obj,time:     54        194.36          0.87          1.15         25.29          0.08          0.06         27.45
iter,obj,time:     55        156.79          0.87          1.15         25.27          0.12          0.05         27.47
iter,obj,time:     56        161.33          0.87          1.15         25.27          0.07          0.05         27.42
iter,obj,time:     57        161.45          0.87          1.15         25.28          0.09          0.05         27.44
iter,obj,time:     58        161.45          0.87          1.14         25.31          0.04          0.05         27.42
iter,obj,time:     59        167.77          0.87          1.15         25.32          0.25          0.05         27.64
iter,obj,time:     60        164.27          0.87          1.15         25.25          0.13          0.04         27.44
iter,obj,time:     61        164.77          0.87          1.15         25.30          0.10          0.05         27.47
iter,obj,time:     62        162.64          0.87          1.15         25.25          0.49          0.05         27.81
iter,obj,time:     63        162.45          0.87          1.14         25.22          0.19          0.05         27.48
iter,obj,time:     64        163.98          0.87          1.16         25.31          0.14          0.05         27.52
iter,obj,time:     65        162.57          0.87          1.15         25.31          0.04          0.05         27.43
iter,obj,time:     66        163.36          0.87          1.15         25.31          0.22          0.05         27.62
iter,obj,time:     67        161.46          0.87          1.14         25.19          0.15          0.05         27.39
iter,obj,time:     68        160.63          0.87          1.14         25.16          0.23          0.05         27.46
iter,obj,time:     69        166.10          0.87          1.15         25.25          0.13          0.05         27.46
iter,obj,time:     70        165.82          0.86          1.14         25.25          0.18          0.05         27.48
iter,obj,time:     71        162.23          0.87          1.15         25.22          0.28          0.05         27.57
iter,obj,time:     72        162.09          0.86          1.14         25.33          0.38          0.05         27.77
iter,obj,time:     73        161.71          0.87          1.14         25.34          0.00          0.05         27.40
iter,obj,time:     74        164.06          0.87          1.14         25.27          0.12          0.05         27.46
iter,obj,time:     75        162.05          0.87          1.15         25.27          0.18          0.05         27.52
iter,obj,time:     76        162.82          0.85          1.14         25.34          0.01          0.05         27.39

    1    161.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    2    161.42      -0.2189     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    3    162.91       0.7811     -2.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    4    161.41       0.7811     -1.593      1.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    5    164.57       0.7811     -1.593      2.512     -102.6      1.924    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    6    162.03       0.7811     -1.593      2.512     -102.6     0.9245    
                       1.211      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    7    162.75       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      2.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    8    162.15       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      2.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

    9    159.76       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463    -0.5627    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   10    160.67       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       2.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   11    170.73       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835    -0.4395      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   12    162.82       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530     0.1000E+05  5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   13    162.31       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.     0.1000E+05
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   14    161.87       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                      0.3347      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   15    161.44       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      7500.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   16    161.60       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.     -2000.    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   17    161.46       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -4.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   18    161.21       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -3.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   19    161.46       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -6.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   20    161.41       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      7.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   21    161.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -12.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   22    161.54       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -1.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   23    157.39       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      7392.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   24    154.96       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000     0.1500E+05

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   25    158.42       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                      0.1500E+05  3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   26    152.24       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.     0.1500E+05  4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   27    160.33       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.     0.2218E+05  3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   28    155.55       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.     0.1500E+05  2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   29    155.76       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.     0.1330E+05
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   30    155.62       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                      0.1715E+05-0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   31    163.61       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.     0.2727     0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   32    164.92       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3312      0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   33    164.35       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.3598    
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   34    161.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                      0.2013    -0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   35    162.35       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01 0.2370     0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   36    164.97       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.3960    -0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   37    163.72       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01 0.2916    -0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   38    163.06       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02 0.2573    

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   39    164.69       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                      0.2644    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   40    166.91       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.4733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   41    161.21       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000     0.2302    -0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   42    189.96       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01 0.2749    
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   43    163.12       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000     0.2469    -0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   44    161.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01 0.2510    -0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   45    162.80       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01 0.1848    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   46    162.48       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152     0.2897    
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   47    161.56       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                      0.2356    -0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   48    163.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01 0.2882    -0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   49    161.85       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.1677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   50    162.53       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677    -0.7739      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   51    161.89       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074     0.1000E+05

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   52    209.65       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                      0.3594    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   53    194.36       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406     0.2666     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   54    156.79       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.000     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   55    161.33       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.000    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   56    161.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500     0.9437    
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   57    161.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                       1.215      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   58    167.77       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.399      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   59    164.27       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      9.089    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   60    164.77       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.3000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   61    162.64       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                      0.4169    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   62    162.45       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831     0.3604      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   63    163.98       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.585      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   64    162.57       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      9.076    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   65    163.36       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.3000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   66    161.46       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000      1.007    -0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   67    160.63       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02 0.1363      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   68    166.10       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      9.241      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   69    165.82       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      9.234    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   70    162.23       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.3000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   71    162.09       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000     0.5672    -0.7827      9.150    
                       8.796    -0.2000E+05 -7.000    

   72    161.71       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328     0.2173      9.150    
                       8.796    -0.2000E+05 -7.000    

   73    164.06       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.450    
                       8.796    -0.2000E+05 -7.000    

   74    162.05       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       9.096    -0.2000E+05 -7.000    

   75    162.82       0.7811     -1.593      2.512     -102.6     0.9245    
                      0.2114      1.531     -99.70      3.463     0.4373    
                       1.835     -1.440      1.530      5000.      5000.    
                     -0.6653      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5000.      0.000    
                     -0.5672     -6.516     -5.184     -8.327      5.914    
                      -14.91     -2.975      1478.      0.000      3000.    

                       3000.      3000.      4437.      3000.      2660.    
                       3429.    -0.2733E-01 0.3121E-01  0.000     0.5979E-01
                     -0.9870E-01-0.6297E-01 0.9604E-01-0.8364E-02-0.4265E-01

                     -0.2356    -0.9733      0.000    -0.6978E-01-0.2512E-01
                       0.000    -0.5307E-01-0.4898E-01-0.1152    -0.1027E-01
                     -0.6441E-01-0.1181E-01-0.4677     -1.074      5000.    

                     -0.6406    -0.7334     -2.500     -2.500    -0.5631E-01
                      0.2153      9.099      8.789    -0.2000E+05 -4.000    
                     -0.5831    -0.6396      9.285      8.776    -0.2000E+05

                      -4.000     0.7150E-02-0.8637      8.941      8.934    
                     -0.2000E+05 -7.000    -0.4328    -0.7827      9.150    
                       8.796    -0.3000E+05 -7.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          75          75

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        1
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       75     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -71.4880       71.4880       161.455       232.943    
   2  0.709707     -0.342904      -16.6090       16.6090       161.417       178.026    
   3  0.151889      -1.88460      -91.2833       91.2833       162.912       254.196    
   4  0.456170E-01  -3.08747      -149.546       149.546       161.408       310.954    
   5  0.882557     -0.124932      -6.05124       6.05124       164.566       170.617    
   6  0.711292     -0.340672      -16.5009       16.5009       162.030       178.531    
   7  0.241669      -1.42019      -68.7887       68.7887       162.747       231.536    
   8  0.682871     -0.381450      -18.4760       18.4760       162.153       180.629    
   9  0.500657     -0.691834      -33.5099       33.5099       159.760       193.270    
  10  0.494633     -0.703939      -34.0962       34.0962       160.674       194.770    
  11  0.437126     -0.827535      -40.0828       40.0828       170.733       210.816    
  12  0.462981     -0.770069      -37.2994       37.2994       162.825       200.124    
  13  0.988878     -0.111840E-01 -0.541712      0.541712       162.306       162.848    
  14  0.878158     -0.129929      -6.29329       6.29329       161.872       168.165    
  15  0.825605     -0.191638      -9.28227       9.28227       161.444       170.727    
  16  0.966665     -0.339033E-01  -1.64215       1.64215       161.597       163.239    
  17  0.340930      -1.07608      -52.1213       52.1213       161.458       213.579    
  18  0.288920      -1.24161      -60.1389       60.1389       161.207       221.346    
  19  0.442843     -0.814539      -39.4533       39.4533       161.457       200.910    
  20  0.878635     -0.129386      -6.26697       6.26697       161.413       167.680    
  21  0.198777E-01  -3.91816      -189.781       189.781       161.455       351.236    
  22  0.315829      -1.15255      -55.8255       55.8255       161.536       217.361    
  23  0.208690      -1.56690      -75.8952       75.8952       157.391       233.287    
  24  0.849393     -0.163234      -7.90645       7.90645       154.957       162.863    
  25  0.945818     -0.557056E-01  -2.69818       2.69818       158.419       161.117    
  26  0.567839     -0.565917      -27.4110       27.4110       152.236       179.647    
  27  0.718388     -0.330745      -16.0201       16.0201       160.327       176.347    
  28  0.115406      -2.15930      -104.589       104.589       155.551       260.139    
  29  0.659869E-01  -2.71830      -131.665       131.665       155.759       287.424    
  30  0.171393      -1.76380      -85.4320       85.4320       155.616       241.048    
  31  0.161953      -1.82045      -88.1760       88.1760       163.610       251.786    
  32  0.455406     -0.786566      -38.0984       38.0984       164.919       203.018    
  33  0.788693     -0.237378      -11.4977       11.4977       164.350       175.848    
  34  0.157754      -1.84672      -89.4484       89.4484       161.455       250.903    
  35  0.126279      -2.06926      -100.227       100.227       162.353       262.580    
  36  0.646962     -0.435467      -21.0925       21.0925       164.970       186.062    
  37  0.730769     -0.313658      -15.1924       15.1924       163.722       178.914    
  38  0.443446E-01  -3.11577      -150.916       150.916       163.057       313.973    
  39  0.219048      -1.51847      -73.5489       73.5489       164.689       238.238    
  40  0.311223E-01  -3.46983      -168.066       168.066       166.906       334.972    
  41  0.864417     -0.145700      -7.05719       7.05719       161.212       168.269    
  42  0.372606     -0.987233      -47.8180       47.8180       189.960       237.778    
  43  0.599250E-01  -2.81466      -136.332       136.332       163.123       299.455    
  44  0.250528      -1.38418      -67.0448       67.0448       161.455       228.499    
  45  0.404968E-01  -3.20653      -155.313       155.313       162.805       318.118    
  46  0.792822     -0.232156      -11.2448       11.2448       162.484       173.729    
  47  0.826691     -0.190324      -9.21860       9.21860       161.557       170.776    
  48  0.258424      -1.35316      -65.5419       65.5419       163.447       228.989    
  49  0.713620     -0.337405      -16.3427       16.3427       161.855       178.197    
  50  0.936186     -0.659413E-01  -3.19396       3.19396       162.535       165.729    
  51  0.655367E-01  -2.72514      -131.996       131.996       161.892       293.888    
  52  0.178790      -1.72154      -83.3853       83.3853       209.652       293.037    
  53  0.110644E-01  -4.50403      -218.159       218.159       194.364       412.522    
  54  0.459577     -0.777448      -37.6568       37.6568       156.791       194.448    
  55  0.210706      -1.55729      -75.4297       75.4297       161.330       236.759    
  56  0.667378     -0.404399      -19.5876       19.5876       161.455       181.042    
  57  0.787749     -0.238575      -11.5557       11.5557       161.455       173.010    
  58  0.774339E-01  -2.55833      -123.916       123.916       167.774       291.690    
  59  0.154999      -1.86434      -90.3018       90.3018       164.266       254.568    
  60  0.510712     -0.671950      -32.5468       32.5468       164.770       197.317    
  61  0.628107     -0.465044      -22.5251       22.5251       162.643       185.168    
  62  0.850273     -0.162197      -7.85625       7.85625       162.455       170.311    
  63  0.355976      -1.03289      -50.0295       50.0295       163.976       214.006    
  64  0.531318     -0.632394      -30.6309       30.6309       162.571       193.202    
  65  0.404575     -0.904917      -43.8309       43.8309       163.364       207.195    
  66  0.240103      -1.42669      -69.1035       69.1035       161.460       230.563    
  67  0.288602      -1.24271      -60.1923       60.1923       160.635       220.827    
  68  0.870493     -0.138695      -6.71789       6.71789       166.105       172.823    
  69  0.453038     -0.791780      -38.3509       38.3509       165.816       204.167    
  70  0.259221      -1.35008      -65.3928       65.3928       162.228       227.621    
  71  0.201751      -1.60072      -77.5331       77.5331       162.088       239.621    
  72  0.390245     -0.940979      -45.5776       45.5776       161.713       207.291    
  73  0.311089      -1.16768      -56.5580       56.5580       164.056       220.614    
  74  0.618900     -0.479811      -23.2403       23.2403       162.050       185.291    
  75  0.891204     -0.115182      -5.57900       5.57900       162.816       168.395    
loop,thermsimp(1:2)        1   71.4880       16.6090    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77        160.40          0.84          1.14         25.31          0.17          0.05         27.52
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     78        165.83          0.86          1.14         25.14          0.20          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        1
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        2
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       77     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -50.4728       50.4728       158.419       208.892    
   2  0.440787     -0.819193      -39.6788       39.6788       162.306       201.985    
   3  0.685789     -0.377185      -18.2695       18.2695       154.957       173.226    
   4  0.673104     -0.395856      -19.1738       19.1738       161.597       180.771    
   5  0.655536     -0.422301      -20.4548       20.4548       162.535       182.990    
   6  0.422838     -0.860766      -41.6924       41.6924       161.413       203.105    
   7  0.300870      -1.20108      -58.1758       58.1758       161.872       220.048    
   8  0.776987     -0.252331      -12.2220       12.2220       161.212       173.434    
   9  0.170551      -1.76872      -85.6704       85.6704       162.816       248.486    
  10  0.587497     -0.531884      -25.7625       25.7625       162.455       188.218    
  11  0.250425      -1.38459      -67.0647       67.0647       164.566       231.631    
  12  0.776362E-01  -2.55572      -123.790       123.790       161.444       285.234    
  13  0.766647     -0.265729      -12.8709       12.8709       161.557       174.428    
  14  0.480193     -0.733568      -35.5314       35.5314       166.105       201.636    
  15  0.434643     -0.833231      -40.3587       40.3587       161.455       201.813    
  16  0.815924E-01  -2.50602      -121.382       121.382       162.484       283.867    
  17  0.724257E-01  -2.62519      -127.155       127.155       164.350       291.505    
  18  0.573795     -0.555483      -26.9056       26.9056       160.327       187.232    
  19  0.196096      -1.62915      -78.9101       78.9101       161.417       240.327    
  20  0.240673      -1.42432      -68.9887       68.9887       161.855       230.843    
  21  0.194228      -1.63872      -79.3738       79.3738       162.030       241.404    
  22  0.236387      -1.44229      -69.8591       69.8591       163.722       233.581    
  23  0.261662      -1.34070      -64.9387       64.9387       152.236       217.175    
  24  0.146321      -1.92195      -93.0925       93.0925       162.153       255.245    
  25  0.169637      -1.77410      -85.9308       85.9308       161.455       247.385    
  26  0.886717     -0.120229      -5.82346       5.82346       162.643       168.467    
  27  0.253412      -1.37274      -66.4905       66.4905       162.050       228.541    
  28  0.470820     -0.753279      -36.4861       36.4861       164.970       201.456    
  29  0.329871      -1.10905      -53.7186       53.7186       162.571       216.290    
  30  0.726784     -0.319126      -15.4573       15.4573       159.760       175.217    
  31  0.612351     -0.490450      -23.7556       23.7556       156.791       180.547    
  32  0.146573      -1.92023      -93.0091       93.0091       160.674       253.683    
  33  0.812633     -0.207476      -10.0494       10.0494       164.770       174.819    
  34  0.486789     -0.719925      -34.8706       34.8706       162.825       197.695    
  35  0.653508     -0.425400      -20.6049       20.6049       161.457       182.062    
  36  0.180127      -1.71409      -83.0245       83.0245       164.919       247.944    
  37  0.155218      -1.86292      -90.2333       90.2333       165.816       256.050    
  38  0.830615     -0.185589      -8.98925       8.98925       163.364       172.354    
  39  0.728345     -0.316980      -15.3534       15.3534       161.713       177.067    
  40  0.262318      -1.33820      -64.8175       64.8175       170.733       235.551    
  41  0.234222      -1.45148      -70.3046       70.3046       161.458       231.763    
  42  0.250201      -1.38549      -67.1082       67.1082       163.976       231.084    
  43  0.898433     -0.107103      -5.18770       5.18770       161.536       166.723    
  44  0.580277     -0.544250      -26.3615       26.3615       164.056       190.418    
  45  0.823617     -0.194050      -9.39905       9.39905       160.635       170.034    
  46  0.820676     -0.197627      -9.57233       9.57233       161.207       170.779    
  47  0.502494     -0.688171      -33.3325       33.3325       162.228       195.560    
  48  0.751016     -0.286329      -13.8687       13.8687       161.455       175.323    
  49  0.360461      -1.02037      -49.4231       49.4231       163.447       212.870    
  50  0.948712     -0.526497E-01  -2.55016       2.55016       161.460       164.010    
  51  0.452918     -0.792045      -38.3638       38.3638       162.747       201.111    
  52  0.182886      -1.69889      -82.2883       82.2883       161.455       243.743    
  53  0.986780     -0.133085E-01 -0.644617      0.644617       157.391       158.036    
  54  0.720276     -0.328121      -15.8930       15.8930       161.330       177.223    
  55  0.999574     -0.426396E-03 -0.206531E-01  0.206531E-01   189.960       189.981    
  56  0.573447     -0.556089      -26.9350       26.9350       164.689       191.624    
  57  0.441160E-01  -3.12093      -151.167       151.167       162.088       313.254    
  58  0.596470     -0.516726      -25.0283       25.0283       155.616       180.644    
  59  0.561679E-01  -2.87941      -139.468       139.468       161.455       300.923    
  60  0.664610     -0.408554      -19.7889       19.7889       163.610       183.399    
  61  0.875363     -0.133117      -6.44769       6.44769       162.912       169.360    
  62  0.969943     -0.305184E-01  -1.47820       1.47820       164.266       165.744    
  63  0.692714     -0.367138      -17.7828       17.7828       155.551       173.334    
  64  0.107969      -2.22591      -107.815       107.815       162.353       270.168    
  65  0.530030     -0.634822      -30.7485       30.7485       155.759       186.508    
  66  0.246082      -1.40209      -67.9121       67.9121       167.774       235.686    
  67  0.561065     -0.577919      -27.9923       27.9923       209.652       237.644    
  68  0.888085     -0.118688      -5.74882       5.74882       161.892       167.641    
  69  0.180192      -1.71373      -83.0070       83.0070       163.123       246.130    
  70  0.259121      -1.35046      -65.4113       65.4113       161.408       226.819    
  71  0.728967     -0.316127      -15.3120       15.3120       163.057       178.369    
  72  0.546722     -0.603814      -29.2466       29.2466       162.805       192.052    
  73  0.334936      -1.09382      -52.9805       52.9805       166.906       219.887    
  74  0.681788     -0.383037      -18.5529       18.5529       161.455       180.008    
  75  0.367328      -1.00150      -48.5090       48.5090       160.402       208.911    
loop,thermsimp(1:2)        2   50.4728       39.6788    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79        162.07          0.86          1.15         25.21          0.20          0.06         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80        162.76          0.86          1.15         25.27          0.61          0.05         27.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        2
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        3
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       79     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -86.4298       86.4298       157.391       243.821    
   2  0.274399      -1.29317      -62.6366       62.6366       161.460       224.096    
   3  0.597410E-01  -2.81774      -136.481       136.481       164.266       300.747    
   4  0.283115E-01  -3.56449      -172.651       172.651       161.536       334.186    
   5  0.901069     -0.104174      -5.04581       5.04581       161.892       166.938    
   6  0.717939     -0.331371      -16.0504       16.0504       162.643       178.694    
   7  0.294866      -1.22123      -59.1521       59.1521       162.912       222.064    
   8  0.935651     -0.665127E-01  -3.22164       3.22164       160.635       163.856    
   9  0.314362      -1.15721      -56.0511       56.0511       161.207       217.258    
  10  0.807729     -0.213529      -10.3426       10.3426       163.364       173.707    
  11  0.757191     -0.278140      -13.4721       13.4721       154.957       168.429    
  12  0.508654     -0.675987      -32.7424       32.7424       155.551       188.293    
  13  0.722060     -0.325647      -15.7731       15.7731       161.212       176.985    
  14  0.424032     -0.857947      -41.5558       41.5558       161.557       203.113    
  15  0.786154     -0.240602      -11.6539       11.6539       164.770       176.424    
  16  0.399894     -0.916557      -44.3947       44.3947       159.760       204.154    
  17  0.757416     -0.277843      -13.4577       13.4577       161.455       174.912    
  18  0.637270     -0.450563      -21.8236       21.8236       161.713       183.537    
  19  0.586055     -0.534342      -25.8816       25.8816       161.330       187.211    
  20  0.821724     -0.196351      -9.51054       9.51054       163.057       172.567    
  21  0.921558     -0.816897E-01  -3.95675       3.95675       161.455       165.411    
  22  0.985596     -0.145083E-01 -0.702731      0.702731       156.791       157.494    
  23  0.257194      -1.35793      -65.7730       65.7730       155.616       221.389    
  24  0.921438E-01  -2.38440      -115.492       115.492       161.597       277.089    
  25  0.114653      -2.16584      -104.906       104.906       161.457       266.363    
  26  0.379827     -0.968040      -46.8884       46.8884       162.535       209.423    
  27  0.541451     -0.613503      -29.7158       29.7158       163.610       193.326    
  28  0.544274     -0.608302      -29.4640       29.4640       155.759       185.223    
  29  0.934365     -0.678883E-01  -3.28826       3.28826       160.327       163.615    
  30  0.266419E-01  -3.62527      -175.595       175.595       162.455       338.050    
  31  0.919572     -0.838466E-01  -4.06122       4.06122       189.960       194.022    
  32  0.864639     -0.145444      -7.04477       7.04477       164.056       171.101    
  33  0.341156      -1.07542      -52.0893       52.0893       164.689       216.778    
  34  0.803175     -0.219182      -10.6164       10.6164       162.805       173.421    
  35  0.699424     -0.357498      -17.3159       17.3159       162.228       179.544    
  36  0.223868E-01  -3.79928      -184.024       184.024       162.825       346.848    
  37  0.605689     -0.501389      -24.2855       24.2855       162.747       187.032    
  38  0.312349      -1.16363      -56.3622       56.3622       164.970       221.332    
  39  0.437501     -0.826675      -40.0412       40.0412       166.105       206.146    
  40  0.303330      -1.19293      -57.7814       57.7814       161.455       219.236    
  41  0.129735      -2.04226      -98.9196       98.9196       162.306       261.226    
  42  0.954352     -0.467224E-01  -2.26306       2.26306       161.413       163.676    
  43  0.519807     -0.654297      -31.6918       31.6918       158.419       190.110    
  44  0.950560     -0.507036E-01  -2.45590       2.45590       160.402       162.858    
  45  0.443941     -0.812064      -39.3334       39.3334       163.447       202.780    
  46  0.911446     -0.927229E-01  -4.49116       4.49116       162.571       167.062    
  47  0.782475     -0.245293      -11.8811       11.8811       152.236       164.118    
  48  0.412534     -0.885438      -42.8874       42.8874       166.906       209.794    
  49  0.843850     -0.169780      -8.22354       8.22354       161.872       170.096    
  50  0.149432      -1.90091      -92.0734       92.0734       161.408       253.481    
  51  0.292747      -1.22845      -59.5015       59.5015       162.050       221.552    
  52  0.579908E-02  -5.15006      -249.450       249.450       161.855       411.305    
  53  0.164431      -1.80526      -87.4404       87.4404       163.976       251.417    
  54  0.963795     -0.368765E-01  -1.78617       1.78617       164.566       166.352    
  55  0.536638     -0.622432      -30.1483       30.1483       161.458       191.606    
  56  0.231620      -1.46266      -70.8459       70.8459       163.722       234.568    
  57  0.452632E-01  -3.09526      -149.923       149.923       170.733       320.656    
  58  0.241294      -1.42174      -68.8639       68.8639       167.774       236.638    
  59  0.757653     -0.277529      -13.4425       13.4425       209.652       223.094    
  60  0.504715     -0.683762      -33.1189       33.1189       161.417       194.536    
  61  0.878562     -0.129469      -6.27102       6.27102       162.030       168.301    
  62  0.874452     -0.134158      -6.49814       6.49814       161.455       167.953    
  63  0.370953     -0.991680      -48.0334       48.0334       163.123       211.157    
  64  0.757717     -0.277446      -13.4385       13.4385       161.455       174.893    
  65  0.642844     -0.441853      -21.4018       21.4018       164.919       186.321    
  66  0.616137     -0.484286      -23.4571       23.4571       162.816       186.273    
  67  0.551578     -0.594972      -28.8183       28.8183       160.674       189.493    
  68  0.483778E-01  -3.02871      -146.700       146.700       162.153       308.853    
  69  0.839664     -0.174753      -8.46442       8.46442       165.816       174.281    
  70  0.334065      -1.09642      -53.1067       53.1067       162.353       215.459    
  71  0.995512     -0.449855E-02 -0.217893      0.217893       162.484       162.702    
  72  0.214896      -1.53760      -74.4759       74.4759       161.444       235.920    
  73  0.541100     -0.614151      -29.7473       29.7473       164.350       194.097    
  74  0.380397     -0.966540      -46.8157       46.8157       161.455       208.270    
  75  0.854752E-01  -2.45953      -119.131       119.131       162.074       281.205    
loop,thermsimp(1:2)        3   86.4298       62.6366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81        160.77          0.87          1.15         25.32          0.47          0.06         27.86
Just calling func    0   0         27.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82        160.98          0.86          1.15         25.27          0.15          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    160.77       0.7526     -1.621      2.484     -102.6     0.9530    
                      0.2400      1.559     -99.70      3.434     0.4088    
                       1.863     -1.411      1.530      5143.      5143.    
                     -0.6368      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5071.     -57.02    
                     -0.5672     -6.459     -5.127     -8.270      5.971    
                      -14.85     -2.946      1647.      0.000      3342.    

                       3342.      3342.      4942.      3342.      2963.    
                       3820.    -0.1878E-01 0.3976E-01  0.000     0.6835E-01
                     -0.9014E-01-0.5442E-01 0.1046     0.1886E-03-0.3410E-01

                     -0.2213    -0.9590      0.000    -0.6123E-01-0.1657E-01
                       0.000    -0.4451E-01-0.4043E-01-0.1066    -0.1722E-02
                     -0.5585E-01-0.3254E-02-0.7673     -1.065      5143.    

                     -0.6120    -0.7612     -2.486     -2.486    -0.2780E-01
                      0.2438      9.107      8.798    -0.2029E+05 -4.000    
                     -0.5546    -0.6111      9.294      8.785    -0.2029E+05

                      -4.000     0.3566E-01-0.8352      8.949      8.943    
                     -0.2029E+05 -7.000    -0.4591    -0.7542      9.159    
                       8.805    -0.2029E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        3
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        4
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       81     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -6.01395       6.01395       156.791       162.805    
   2  0.114178      -2.16999      -105.107       105.107       162.484       267.591    
   3  0.217017      -1.52778      -74.0001       74.0001       160.402       234.402    
   4  0.138317      -1.97821      -95.8171       95.8171       160.327       256.144    
   5  0.832728     -0.183048      -8.86618       8.86618       161.413       170.279    
   6  0.390825     -0.939496      -45.5058       45.5058       160.635       206.140    
   7  0.283633      -1.26007      -61.0335       61.0335       152.236       213.270    
   8  0.725809     -0.320468      -15.5223       15.5223       161.455       176.977    
   9  0.506121     -0.680979      -32.9842       32.9842       164.566       197.550    
  10  0.216234      -1.53139      -74.1751       74.1751       161.892       236.067    
  11  0.637942     -0.449509      -21.7726       21.7726       162.571       184.343    
  12  0.536707     -0.622302      -30.1421       30.1421       161.455       191.597    
  13  0.231844      -1.46169      -70.7990       70.7990       162.030       232.829    
  14  0.491379     -0.710540      -34.4160       34.4160       154.957       189.373    
  15  0.825774     -0.191434      -9.27239       9.27239       161.872       171.144    
  16  0.671593     -0.398102      -19.2826       19.2826       164.056       183.339    
  17  0.549103     -0.599470      -29.0361       29.0361       163.057       192.093    
  18  0.659287     -0.416597      -20.1784       20.1784       162.805       182.983    
  19  0.205012      -1.58469      -76.7564       76.7564       163.364       240.121    
  20  0.400541E-02  -5.52011      -267.374       267.374       165.816       433.190    
  21  0.750831     -0.286575      -13.8806       13.8806       161.455       175.335    
  22  0.619921     -0.478162      -23.1605       23.1605       161.455       184.615    
  23  0.435226     -0.831889      -40.2937       40.2937       164.770       205.063    
  24  0.460974     -0.774414      -37.5098       37.5098       161.212       198.722    
  25  0.891582E-01  -2.41734      -117.087       117.087       162.643       279.730    
  26  0.589618E-01  -2.83087      -137.117       137.117       162.228       299.345    
  27  0.541391     -0.613613      -29.7212       29.7212       161.713       191.434    
  28  0.545108E-01  -2.90936      -140.919       140.919       155.759       296.678    
  29  0.744722     -0.294744      -14.2763       14.2763       162.816       177.092    
  30  0.712477     -0.339008      -16.4203       16.4203       164.919       181.339    
  31  0.563836     -0.572992      -27.7536       27.7536       162.747       190.501    
  32  0.161455      -1.82353      -88.3251       88.3251       161.330       249.655    
  33  0.640738     -0.445135      -21.5607       21.5607       155.551       177.111    
  34  0.157494      -1.84837      -89.5281       89.5281       160.674       250.202    
  35  0.695323     -0.363378      -17.6007       17.6007       158.419       176.019    
  36  0.792798     -0.232186      -11.2463       11.2463       161.458       172.704    
  37  0.940634     -0.612017E-01  -2.96439       2.96439       163.610       166.574    
  38  0.750008     -0.287672      -13.9338       13.9338       189.960       203.894    
  39  0.298939E-01  -3.51010      -170.017       170.017       164.350       334.367    
  40  0.633510     -0.456480      -22.1102       22.1102       161.417       183.527    
  41  0.465723     -0.764164      -37.0133       37.0133       163.447       200.460    
  42  0.916259     -0.874560E-01  -4.23605       4.23605       161.557       165.793    
  43  0.451376     -0.795456      -38.5290       38.5290       159.760       198.289    
  44  0.414090     -0.881672      -42.7050       42.7050       166.105       208.810    
  45  0.273092      -1.29795      -62.8679       62.8679       161.455       224.322    
  46  0.361379      -1.01783      -49.2999       49.2999       162.535       211.835    
  47  0.548848     -0.599934      -29.0586       29.0586       166.906       195.965    
  48  0.832309     -0.183552      -8.89060       8.89060       163.123       172.014    
  49  0.673017     -0.395985      -19.1801       19.1801       162.353       181.533    
  50  0.692516     -0.367425      -17.7967       17.7967       164.689       182.486    
  51  0.354468E-01  -3.33972      -161.764       161.764       161.207       322.971    
  52  0.987850     -0.122240E-01 -0.592084      0.592084       161.455       162.047    
  53  0.659676     -0.416007      -20.1499       20.1499       164.970       185.120    
  54  0.276145      -1.28683      -62.3294       62.3294       155.616       217.945    
  55  0.426927     -0.851141      -41.2262       41.2262       162.050       203.277    
  56  0.221817      -1.50590      -72.9404       72.9404       162.912       235.853    
  57  0.911956     -0.921634E-01  -4.46406       4.46406       209.652       214.116    
  58  0.791973     -0.233228      -11.2967       11.2967       161.460       172.756    
  59  0.805447     -0.216358      -10.4796       10.4796       163.722       174.201    
  60  0.887840     -0.118963      -5.76215       5.76215       161.444       167.206    
  61  0.978176     -0.220657E-01  -1.06878       1.06878       167.774       168.843    
  62  0.539899     -0.616372      -29.8548       29.8548       157.391       187.246    
  63  0.313742      -1.15918      -56.1467       56.1467       163.976       220.123    
  64  0.355768      -1.03348      -50.0578       50.0578       161.408       211.466    
  65  0.413366     -0.883423      -42.7898       42.7898       162.306       205.096    
  66  0.352288      -1.04331      -50.5339       50.5339       161.457       211.991    
  67  0.269512      -1.31114      -63.5070       63.5070       161.597       225.104    
  68  0.841976E-01  -2.47459      -119.860       119.860       162.074       281.934    
  69  0.964450     -0.361976E-01  -1.75328       1.75328       164.266       166.019    
  70  0.554883     -0.588998      -28.5289       28.5289       162.153       190.682    
  71  0.192411      -1.64812      -79.8290       79.8290       170.733       250.562    
  72  0.834093     -0.181411      -8.78687       8.78687       161.536       170.322    
  73  0.606638     -0.499823      -24.2096       24.2096       162.455       186.665    
  74  0.181851E-01  -4.00716      -194.092       194.092       162.825       356.917    
  75  0.963499     -0.371840E-01  -1.80106       1.80106       160.765       162.566    
loop,thermsimp(1:2)        4   6.01395       105.107    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83        165.41          0.86          1.14         25.28          0.13          0.06         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84        185.12          0.86          1.15         25.24          0.07          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    165.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        4
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        5
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       83     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -1.56584       1.56584       161.455       163.020    
   2  0.384676     -0.955353      -46.2738       46.2738       160.765       207.039    
   3  0.472770     -0.749146      -36.2859       36.2859       156.791       193.077    
   4  0.131186      -2.03114      -98.3809       98.3809       161.557       259.938    
   5  0.387497     -0.948046      -45.9199       45.9199       164.266       210.186    
   6  0.474858     -0.744739      -36.0724       36.0724       163.610       199.683    
   7  0.654056     -0.424563      -20.5643       20.5643       161.444       182.009    
   8  0.375266     -0.980119      -47.4734       47.4734       167.774       215.247    
   9  0.605577     -0.501574      -24.2944       24.2944       161.413       185.707    
  10  0.485605     -0.722360      -34.9885       34.9885       161.536       196.524    
  11  0.503843     -0.685490      -33.2027       33.2027       161.872       195.075    
  12  0.374521     -0.982108      -47.5698       47.5698       163.123       210.693    
  13  0.955542E-01  -2.34806      -113.732       113.732       161.458       275.190    
  14  0.902567     -0.102512      -4.96531       4.96531       161.460       166.425    
  15  0.347215      -1.05781      -51.2365       51.2365       163.722       214.958    
  16  0.893138     -0.113014      -5.47400       5.47400       161.455       166.929    
  17  0.561145     -0.577776      -27.9854       27.9854       158.419       186.404    
  18  0.667287     -0.404536      -19.5942       19.5942       161.455       181.049    
  19  0.601102     -0.508991      -24.6537       24.6537       162.816       187.470    
  20  0.569928     -0.562245      -27.2331       27.2331       155.551       182.784    
  21  0.655926     -0.421708      -20.4260       20.4260       164.919       185.345    
  22  0.355892      -1.03313      -50.0409       50.0409       162.353       212.393    
  23  0.208013      -1.57015      -76.0525       76.0525       164.689       240.742    
  24  0.879772     -0.128093      -6.20435       6.20435       162.805       169.009    
  25  0.114206E-01  -4.47233      -216.624       216.624       164.056       380.680    
  26  0.950245     -0.510357E-01  -2.47198       2.47198       161.417       163.889    
  27  0.321268      -1.13548      -54.9985       54.9985       162.571       217.569    
  28  0.379005     -0.970207      -46.9933       46.9933       161.455       208.448    
  29  0.117960      -2.13741      -103.529       103.529       164.970       268.498    
  30  0.822558     -0.195337      -9.46141       9.46141       162.455       171.916    
  31  0.671085     -0.398860      -19.3193       19.3193       157.391       176.711    
  32  0.220279      -1.51286      -73.2775       73.2775       154.957       228.234    
  33  0.836335     -0.178727      -8.65687       8.65687       162.747       171.404    
  34  0.982442E-01  -2.32030      -112.387       112.387       162.153       274.540    
  35  0.912526     -0.915389E-01  -4.43381       4.43381       161.713       166.147    
  36  0.758802     -0.276015      -13.3691       13.3691       161.455       174.824    
  37  0.562651     -0.575096      -27.8556       27.8556       163.057       190.912    
  38  0.248142      -1.39375      -67.5084       67.5084       166.906       234.415    
  39  0.864881     -0.145163      -7.03117       7.03117       164.566       171.597    
  40  0.495151     -0.702893      -34.0456       34.0456       159.760       193.805    
  41  0.112352E-01  -4.48870      -217.416       217.416       161.212       378.628    
  42  0.745500     -0.293700      -14.2257       14.2257       163.447       177.673    
  43  0.405071     -0.903693      -43.7716       43.7716       162.050       205.822    
  44  0.617259     -0.482466      -23.3689       23.3689       189.960       213.329    
  45  0.992755     -0.727089E-02 -0.352176      0.352176       164.770       165.122    
  46  0.888739     -0.117952      -5.71317       5.71317       162.306       168.019    
  47  0.976701     -0.235748E-01  -1.14188       1.14188       160.635       161.776    
  48  0.461976     -0.772242      -37.4046       37.4046       166.105       203.509    
  49  0.150581      -1.89325      -91.7022       91.7022       161.408       253.110    
  50  0.726286E-01  -2.62240      -127.019       127.019       162.535       289.554    
  51  0.280837      -1.26998      -61.5132       61.5132       161.457       222.970    
  52  0.727959     -0.317510      -15.3790       15.3790       152.236       167.615    
  53  0.565225     -0.570532      -27.6345       27.6345       209.652       237.286    
  54  0.884775     -0.122422      -5.92970       5.92970       155.616       161.546    
  55  0.289837      -1.23844      -59.9855       59.9855       163.976       223.962    
  56  0.282389      -1.26447      -61.2463       61.2463       161.455       222.701    
  57  0.737455     -0.304550      -14.7513       14.7513       161.597       176.349    
  58  0.436668E-02  -5.43375      -263.191       263.191       162.030       425.222    
  59  0.809492     -0.211348      -10.2369       10.2369       160.402       170.639    
  60  0.957786E-01  -2.34572      -113.618       113.618       162.912       276.530    
  61  0.335750      -1.09139      -52.8629       52.8629       161.892       214.755    
  62  0.687327     -0.374945      -18.1610       18.1610       163.364       181.525    
  63  0.340103      -1.07851      -52.2389       52.2389       161.330       213.569    
  64  0.902520     -0.102564      -4.96783       4.96783       160.674       165.642    
  65  0.872595     -0.136284      -6.60108       6.60108       170.733       177.334    
  66  0.773535     -0.256784      -12.4377       12.4377       160.327       172.765    
  67  0.627340     -0.466267      -22.5843       22.5843       162.484       185.068    
  68  0.918418     -0.851028E-01  -4.12207       4.12207       162.643       166.765    
  69  0.347451      -1.05713      -51.2037       51.2037       162.074       213.278    
  70  0.962049     -0.386898E-01  -1.87399       1.87399       155.759       157.633    
  71  0.716962     -0.332732      -16.1163       16.1163       162.228       178.344    
  72  0.423789     -0.858520      -41.5836       41.5836       161.207       202.791    
  73  0.899832E-01  -2.40813      -116.641       116.641       164.350       280.991    
  74  0.770387     -0.260863      -12.6353       12.6353       162.825       175.460    
  75  0.746172     -0.292799      -14.1821       14.1821       165.413       179.595    
loop,thermsimp(1:2)        5   1.56584       46.2738    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85        167.84          0.86          1.14         25.21          0.20          0.06         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86        175.37          0.86          1.14         25.20          0.18          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    167.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        5
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        6
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       85     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -10.4323       10.4323       155.759       166.192    
   2  0.337878      -1.08507      -52.5569       52.5569       155.616       208.173    
   3  0.930612     -0.719127E-01  -3.48319       3.48319       160.635       164.118    
   4  0.843645     -0.170024      -8.23534       8.23534       161.455       169.690    
   5  0.757799     -0.277337      -13.4332       13.4332       161.417       174.850    
   6  0.627925     -0.465335      -22.5392       22.5392       164.770       187.309    
   7  0.412314     -0.885971      -42.9132       42.9132       160.674       203.587    
   8  0.282274      -1.26488      -61.2660       61.2660       161.713       222.979    
   9  0.426609E-01  -3.15447      -152.791       152.791       161.460       314.251    
  10  0.484876     -0.723862      -35.0612       35.0612       162.643       197.704    
  11  0.372210     -0.988296      -47.8695       47.8695       161.455       209.324    
  12  0.740507     -0.300421      -14.5513       14.5513       152.236       166.788    
  13  0.361519      -1.01744      -49.2812       49.2812       162.306       211.587    
  14  0.421034     -0.865042      -41.8995       41.8995       162.805       204.704    
  15  0.780595     -0.247699      -11.9977       11.9977       160.402       172.400    
  16  0.758410     -0.276531      -13.3942       13.3942       162.747       176.141    
  17  0.522921E-01  -2.95091      -142.931       142.931       164.566       307.497    
  18  0.609673     -0.494833      -23.9679       23.9679       162.455       186.423    
  19  0.204029      -1.58949      -76.9892       76.9892       160.327       237.316    
  20  0.516385     -0.660902      -32.0117       32.0117       161.455       193.466    
  21  0.323918      -1.12726      -54.6006       54.6006       162.825       217.425    
  22  0.671820     -0.397765      -19.2663       19.2663       161.597       180.864    
  23  0.850344     -0.162114      -7.85220       7.85220       157.391       165.244    
  24  0.515631     -0.662364      -32.0825       32.0825       170.733       202.816    
  25  0.919408     -0.840249E-01  -4.06986       4.06986       163.447       167.517    
  26  0.516519     -0.660643      -31.9991       31.9991       162.228       194.227    
  27  0.986900     -0.131869E-01 -0.638724      0.638724       165.413       166.052    
  28  0.127351      -2.06081      -99.8181       99.8181       161.455       261.273    
  29  0.775028E-01  -2.55744      -123.873       123.873       163.364       287.238    
  30  0.778307     -0.250634      -12.1398       12.1398       161.444       173.584    
  31  0.548570     -0.600441      -29.0832       29.0832       155.551       184.634    
  32  0.191672      -1.65197      -80.0154       80.0154       162.484       242.500    
  33  0.593733     -0.521326      -25.2511       25.2511       164.919       190.170    
  34  0.612853     -0.489631      -23.7159       23.7159       161.413       185.128    
  35  0.872749     -0.136107      -6.59252       6.59252       158.419       165.011    
  36  0.291105E-01  -3.53666      -171.303       171.303       162.816       334.119    
  37  0.310804      -1.16859      -56.6024       56.6024       163.057       219.659    
  38  0.238051      -1.43527      -69.5193       69.5193       156.791       226.311    
  39  0.600295     -0.510334      -24.7187       24.7187       159.760       184.478    
  40  0.856575     -0.154813      -7.49859       7.49859       161.872       169.371    
  41  0.127990      -2.05580      -99.5757       99.5757       161.536       261.111    
  42  0.390396E-01  -3.24318      -157.088       157.088       163.610       320.698    
  43  0.469298E-01  -3.05910      -148.172       148.172       161.207       309.379    
  44  0.170208      -1.77073      -85.7679       85.7679       166.105       251.873    
  45  0.457801     -0.781320      -37.8443       37.8443       162.050       199.895    
  46  0.451589     -0.794982      -38.5061       38.5061       160.765       199.271    
  47  0.601844     -0.507757      -24.5939       24.5939       161.455       186.048    
  48  0.923684     -0.793857E-01  -3.84516       3.84516       164.266       168.111    
  49  0.113154      -2.17901      -105.543       105.543       163.123       268.667    
  50  0.652894     -0.426340      -20.6504       20.6504       162.353       183.003    
  51  0.600010     -0.510809      -24.7417       24.7417       162.074       186.816    
  52  0.768679     -0.263082      -12.7427       12.7427       189.960       202.703    
  53  0.999310     -0.690144E-03 -0.334281E-01  0.334281E-01   161.330       161.363    
  54  0.798907     -0.224511      -10.8745       10.8745       161.892       172.766    
  55  0.246243      -1.40144      -67.8805       67.8805       163.722       231.602    
  56  0.798424     -0.225115      -10.9038       10.9038       167.774       178.678    
  57  0.120926      -2.11257      -102.325       102.325       162.571       264.896    
  58  0.771675     -0.259192      -12.5543       12.5543       161.455       174.009    
  59  0.670629     -0.399540      -19.3523       19.3523       161.457       180.809    
  60  0.127505      -2.05960      -99.7594       99.7594       163.976       263.736    
  61  0.375387     -0.979799      -47.4579       47.4579       154.957       202.414    
  62  0.572534E-01  -2.86027      -138.541       138.541       166.906       305.447    
  63  0.358654      -1.02540      -49.6665       49.6665       209.652       259.318    
  64  0.903087     -0.101937      -4.93745       4.93745       164.689       169.626    
  65  0.112925      -2.18103      -105.641       105.641       161.408       267.049    
  66  0.727950     -0.317523      -15.3797       15.3797       161.557       176.937    
  67  0.703618E-01  -2.65411      -128.555       128.555       164.970       293.525    
  68  0.461106     -0.774128      -37.4959       37.4959       162.153       199.649    
  69  0.546854     -0.603573      -29.2349       29.2349       161.458       190.693    
  70  0.264522      -1.32983      -64.4123       64.4123       162.912       227.325    
  71  0.562280     -0.575755      -27.8875       27.8875       164.350       192.238    
  72  0.745931     -0.293123      -14.1978       14.1978       162.535       176.733    
  73  0.753398E-01  -2.58575      -125.244       125.244       161.212       286.456    
  74  0.150464E-01  -4.19662      -203.269       203.269       164.056       367.325    
  75  0.237963      -1.43564      -69.5373       69.5373       167.843       237.380    
loop,thermsimp(1:2)        6   10.4323       52.5569    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87        160.68          0.86          1.15         25.28          0.07          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     88        162.06          0.86          1.15         25.27          0.13          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        6
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        7
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       87     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -103.629       103.629       161.330       264.959    
   2  0.421875     -0.863045      -41.8028       41.8028       160.635       202.437    
   3  0.700103     -0.356528      -17.2689       17.2689       158.419       175.688    
   4  0.209367      -1.56367      -75.7383       75.7383       157.391       233.130    
   5  0.117251      -2.14344      -103.820       103.820       165.413       269.234    
   6  0.898330     -0.107218      -5.19324       5.19324       155.759       160.953    
   7  0.209806      -1.56157      -75.6369       75.6369       152.236       227.873    
   8  0.917155     -0.864790E-01  -4.18873       4.18873       163.447       167.636    
   9  0.120514E-01  -4.41857      -214.020       214.020       164.266       378.286    
  10  0.189983      -1.66082      -80.4443       80.4443       161.872       242.316    
  11  0.257131      -1.35817      -65.7847       65.7847       164.689       230.474    
  12  0.913158E-01  -2.39343      -115.929       115.929       161.455       277.384    
  13  0.336531      -1.08906      -52.7503       52.7503       160.402       213.152    
  14  0.318351      -1.14460      -55.4403       55.4403       161.892       217.332    
  15  0.919606     -0.838101E-01  -4.05946       4.05946       161.444       165.504    
  16  0.719771E-01  -2.63141      -127.456       127.456       161.455       288.910    
  17  0.788730E-01  -2.53992      -123.024       123.024       161.417       284.441    
  18  0.905929     -0.987941E-01  -4.78523       4.78523       162.747       167.532    
  19  0.665501     -0.407215      -19.7240       19.7240       162.535       182.259    
  20  0.812159     -0.208059      -10.0776       10.0776       161.557       171.635    
  21  0.412726E-01  -3.18756      -154.394       154.394       167.774       322.168    
  22  0.256064      -1.36233      -65.9862       65.9862       161.457       227.443    
  23  0.277519      -1.28187      -62.0889       62.0889       161.597       223.686    
  24  0.279550      -1.27457      -61.7357       61.7357       162.353       224.088    
  25  0.857884     -0.153286      -7.42463       7.42463       159.760       167.184    
  26  0.205158      -1.58398      -76.7220       76.7220       155.551       232.273    
  27  0.482085     -0.729635      -35.3409       35.3409       161.413       196.753    
  28  0.494966E-01  -3.00585      -145.593       145.593       161.455       307.047    
  29  0.338791      -1.08237      -52.4262       52.4262       162.455       214.881    
  30  0.249491E-01  -3.69092      -178.775       178.775       162.074       340.849    
  31  0.480710     -0.732491      -35.4792       35.4792       164.770       200.249    
  32  0.908951E-01  -2.39805      -116.153       116.153       164.919       281.072    
  33  0.283223      -1.26152      -61.1036       61.1036       161.458       222.562    
  34  0.277734      -1.28109      -62.0514       62.0514       164.350       226.402    
  35  0.504407     -0.684372      -33.1485       33.1485       161.455       194.603    
  36  0.251881      -1.37880      -66.7840       66.7840       162.228       229.012    
  37  0.568193     -0.565294      -27.3808       27.3808       162.643       190.024    
  38  0.186135      -1.68128      -81.4352       81.4352       160.765       242.200    
  39  0.964582     -0.360604E-01  -1.74664       1.74664       162.153       163.899    
  40  0.493045     -0.707155      -34.2520       34.2520       162.050       196.302    
  41  0.477950     -0.738248      -35.7581       35.7581       154.957       190.715    
  42  0.114879      -2.16388      -104.810       104.810       189.960       294.771    
  43  0.324003      -1.12700      -54.5878       54.5878       170.733       225.321    
  44  0.720573     -0.327708      -15.8730       15.8730       160.674       176.547    
  45  0.934913     -0.673019E-01  -3.25986       3.25986       162.805       166.065    
  46  0.516467     -0.660745      -32.0041       32.0041       155.616       187.620    
  47  0.351513      -1.04551      -50.6406       50.6406       161.455       212.095    
  48  0.310221      -1.17047      -56.6934       56.6934       162.306       219.000    
  49  0.467571     -0.760204      -36.8215       36.8215       162.825       199.646    
  50  0.700644     -0.355756      -17.2315       17.2315       163.057       180.288    
  51  0.608579E-01  -2.79921      -135.584       135.584       161.713       297.297    
  52  0.360106      -1.02136      -49.4708       49.4708       156.791       206.262    
  53  0.355744      -1.03354      -50.0612       50.0612       162.912       212.973    
  54  0.356778      -1.03064      -49.9205       49.9205       163.722       213.642    
  55  0.209214      -1.56440      -75.7738       75.7738       160.327       236.101    
  56  0.513034     -0.667413      -32.3271       32.3271       167.843       200.170    
  57  0.131750      -2.02685      -98.1732       98.1732       162.484       260.657    
  58  0.860948     -0.149721      -7.25193       7.25193       166.105       173.357    
  59  0.245301      -1.40527      -68.0661       68.0661       209.652       277.718    
  60  0.411604     -0.887695      -42.9967       42.9967       161.536       204.532    
  61  0.444838     -0.810046      -39.2357       39.2357       161.455       200.690    
  62  0.173997      -1.74872      -84.7015       84.7015       163.976       248.678    
  63  0.616177     -0.484222      -23.4539       23.4539       162.571       186.025    
  64  0.794601     -0.229915      -11.1363       11.1363       161.408       172.544    
  65  0.926158     -0.767101E-01  -3.71556       3.71556       163.123       166.839    
  66  0.614053     -0.487673      -23.6211       23.6211       161.212       184.833    
  67  0.228742      -1.47516      -71.4514       71.4514       163.364       234.816    
  68  0.162916      -1.81452      -87.8889       87.8889       164.970       252.859    
  69  0.437909     -0.825744      -39.9960       39.9960       166.906       206.902    
  70  0.966188     -0.343970E-01  -1.66607       1.66607       164.566       166.232    
  71  0.756703     -0.278785      -13.5033       13.5033       161.207       174.710    
  72  0.537306     -0.621187      -30.0880       30.0880       161.460       191.548    
  73  0.544827     -0.607287      -29.4148       29.4148       163.610       193.025    
  74  0.452750     -0.792414      -38.3817       38.3817       162.816       201.198    
  75  0.951192E-01  -2.35262      -113.953       113.953       160.681       274.633    
loop,thermsimp(1:2)        7   103.629       41.8028    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89        162.95          0.86          1.14         25.31          0.25          0.06         27.61
Just calling func    0   0         27.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     90        182.54          0.85          1.15         25.23          0.15          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        7
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        8
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       89     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -34.8097       34.8097       155.759       190.569    
   2  0.568497     -0.564760      -27.3549       27.3549       162.153       189.508    
   3  0.632037E-01  -2.76139      -133.752       133.752       161.444       295.196    
   4  0.184325      -1.69105      -81.9085       81.9085       162.805       244.713    
   5  0.949772     -0.515332E-01  -2.49608       2.49608       164.566       167.062    
   6  0.512179     -0.669081      -32.4079       32.4079       163.123       195.531    
   7  0.573767     -0.555532      -26.9079       26.9079       159.760       186.668    
   8  0.590189     -0.527312      -25.5411       25.5411       162.747       188.288    
   9  0.323917      -1.12727      -54.6008       54.6008       163.447       218.048    
  10  0.246420E-01  -3.70330      -179.375       179.375       161.557       340.932    
  11  0.923153E-01  -2.38255      -115.402       115.402       161.408       276.810    
  12  0.236043      -1.44374      -69.9296       69.9296       166.105       236.034    
  13  0.885388     -0.121730      -5.89614       5.89614       161.207       167.103    
  14  0.617726     -0.481710      -23.3323       23.3323       158.419       181.751    
  15  0.349992      -1.04985      -50.8507       50.8507       160.674       211.525    
  16  0.892028     -0.114257      -5.53421       5.53421       163.057       168.591    
  17  0.382423     -0.961227      -46.5584       46.5584       162.535       209.093    
  18  0.850527     -0.161899      -7.84182       7.84182       161.212       169.054    
  19  0.653461     -0.425472      -20.6083       20.6083       162.571       183.179    
  20  0.413959     -0.881988      -42.7203       42.7203       155.616       198.336    
  21  0.807813     -0.213424      -10.3375       10.3375       162.643       172.981    
  22  0.348045      -1.05542      -51.1209       51.1209       154.957       206.077    
  23  0.435267     -0.831795      -40.2891       40.2891       161.460       201.749    
  24  0.434284     -0.834056      -40.3986       40.3986       163.610       204.009    
  25  0.983564     -0.165728E-01 -0.802728      0.802728       161.455       162.257    
  26  0.545923     -0.605277      -29.3174       29.3174       162.050       191.368    
  27  0.227140      -1.48219      -71.7918       71.7918       161.413       233.204    
  28  0.965085     -0.355395E-01  -1.72141       1.72141       162.825       164.546    
  29  0.183882      -1.69346      -82.0250       82.0250       167.843       249.868    
  30  0.187300E-02  -6.28022      -304.191       304.191       164.770       468.961    
  31  0.428736     -0.846914      -41.0214       41.0214       161.455       202.476    
  32  0.459764     -0.777041      -37.6371       37.6371       162.816       200.453    
  33  0.914786     -0.890649E-01  -4.31398       4.31398       160.635       164.949    
  34  0.872236     -0.136696      -6.62104       6.62104       161.536       168.157    
  35  0.789367     -0.236524      -11.4564       11.4564       156.791       168.248    
  36  0.619233E-01  -2.78186      -134.743       134.743       166.906       301.650    
  37  0.138004E-01  -4.28306      -207.456       207.456       161.455       368.910    
  38  0.287035      -1.24815      -60.4559       60.4559       162.912       223.368    
  39  0.138758E-01  -4.27761      -207.192       207.192       160.402       367.594    
  40  0.593330     -0.522005      -25.2840       25.2840       163.722       189.006    
  41  0.399445     -0.917679      -44.4490       44.4490       162.455       206.904    
  42  0.982947     -0.172001E-01 -0.833113      0.833113       161.892       162.725    
  43  0.259534      -1.34887      -65.3342       65.3342       162.306       227.640    
  44  0.816592E-01  -2.50520      -121.343       121.343       161.458       282.801    
  45  0.166083      -1.79527      -86.9562       86.9562       161.597       248.554    
  46  0.967370     -0.331741E-01  -1.60683       1.60683       162.353       163.959    
  47  0.371024     -0.991488      -48.0241       48.0241       170.733       218.757    
  48  0.941964     -0.597885E-01  -2.89594       2.89594       164.350       167.246    
  49  0.130219      -2.03854      -98.7392       98.7392       161.457       260.196    
  50  0.599455     -0.511734      -24.7865       24.7865       152.236       177.023    
  51  0.519323     -0.655230      -31.7370       31.7370       162.228       193.965    
  52  0.829175     -0.187324      -9.07332       9.07332       164.689       173.762    
  53  0.341525      -1.07433      -52.0368       52.0368       155.551       207.588    
  54  0.686480     -0.376178      -18.2207       18.2207       157.391       175.612    
  55  0.273157      -1.29771      -62.8564       62.8564       163.364       226.221    
  56  0.472999     -0.748662      -36.2625       36.2625       160.327       196.589    
  57  0.591611     -0.524905      -25.4245       25.4245       160.765       186.190    
  58  0.253673      -1.37171      -66.4407       66.4407       161.872       228.313    
  59  0.522398     -0.649326      -31.4510       31.4510       163.976       195.427    
  60  0.927744     -0.749995E-01  -3.63270       3.63270       164.970       168.602    
  61  0.470581     -0.753787      -36.5107       36.5107       162.484       198.995    
  62  0.365015      -1.00782      -48.8150       48.8150       161.330       210.145    
  63  0.732288     -0.311582      -15.0919       15.0919       165.413       180.505    
  64  0.536772E-01  -2.92477      -141.665       141.665       160.681       302.346    
  65  0.725826     -0.320444      -15.5212       15.5212       161.455       176.976    
  66  0.806822     -0.214652      -10.3970       10.3970       209.652       220.048    
  67  0.104580E-01  -4.56039      -220.889       220.889       164.919       385.808    
  68  0.818881     -0.199816      -9.67836       9.67836       161.417       171.095    
  69  0.330445      -1.10732      -53.6343       53.6343       161.455       215.089    
  70  0.316989      -1.14889      -55.6480       55.6480       189.960       245.608    
  71  0.776875     -0.252476      -12.2290       12.2290       161.713       173.942    
  72  0.782540     -0.245210      -11.8771       11.8771       161.455       173.332    
  73  0.972988     -0.273831E-01  -1.32634       1.32634       167.774       169.100    
  74  0.567786E-01  -2.86860      -138.944       138.944       162.074       301.018    
  75  0.111463      -2.19406      -106.272       106.272       162.947       269.219    
loop,thermsimp(1:2)        8   34.8097       27.3549    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91        156.59          0.86          1.14         25.30          0.40          0.06         27.76
Just calling func    0   0         27.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     92        169.84          0.86          1.16         25.33          0.23          0.05         27.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    156.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        8
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:        9
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       91     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -117.815       117.815       161.455       279.270    
   2  0.192227      -1.64908      -79.8754       79.8754       161.892       241.767    
   3  0.872733     -0.136126      -6.59345       6.59345       162.353       168.946    
   4  0.444113     -0.811675      -39.3146       39.3146       162.825       202.139    
   5  0.194382      -1.63793      -79.3355       79.3355       160.635       239.970    
   6  0.358074      -1.02702      -49.7450       49.7450       164.566       214.311    
   7  0.461693     -0.772855      -37.4343       37.4343       161.207       198.641    
   8  0.180202      -1.71368      -83.0044       83.0044       164.350       247.355    
   9  0.944954     -0.566187E-01  -2.74241       2.74241       161.536       164.278    
  10  0.738770     -0.302769      -14.6650       14.6650       156.791       171.456    
  11  0.822491E-01  -2.49800      -120.994       120.994       163.057       284.051    
  12  0.313602      -1.15963      -56.1683       56.1683       164.970       221.138    
  13  0.978185     -0.220567E-01  -1.06835       1.06835       161.212       162.280    
  14  0.540591E-01  -2.91768      -141.322       141.322       167.774       309.096    
  15  0.872885     -0.135951      -6.58498       6.58498       161.417       168.002    
  16  0.209079      -1.56504      -75.8049       75.8049       162.643       238.448    
  17  0.789205E-01  -2.53931      -122.995       122.995       161.455       284.450    
  18  0.746404     -0.292489      -14.1671       14.1671       164.689       178.856    
  19  0.110219      -2.20529      -106.816       106.816       161.713       268.530    
  20  0.656016     -0.421570      -20.4193       20.4193       157.391       177.811    
  21  0.665675     -0.406953      -19.7113       19.7113       161.455       181.166    
  22  0.563292     -0.573957      -27.8004       27.8004       152.236       180.037    
  23  0.615044     -0.486062      -23.5431       23.5431       165.413       188.956    
  24  0.128081      -2.05509      -99.5411       99.5411       158.419       257.960    
  25  0.459916     -0.776711      -37.6211       37.6211       162.571       200.192    
  26  0.433297     -0.836332      -40.5089       40.5089       160.765       201.274    
  27  0.225675      -1.48866      -72.1053       72.1053       159.760       231.865    
  28  0.808805     -0.212197      -10.2781       10.2781       162.747       173.025    
  29  0.578238     -0.547770      -26.5320       26.5320       163.722       190.254    
  30  0.569572     -0.562871      -27.2634       27.2634       162.153       189.416    
  31  0.291272      -1.23350      -59.7461       59.7461       155.759       215.506    
  32  0.144426      -1.93499      -93.7237       93.7237       162.050       255.774    
  33  0.908321     -0.961572E-01  -4.65751       4.65751       162.228       166.885    
  34  0.593166     -0.522281      -25.2974       25.2974       163.976       189.274    
  35  0.327630      -1.11587      -54.0488       54.0488       163.123       217.172    
  36  0.823214E-01  -2.49712      -120.952       120.952       160.327       281.278    
  37  0.742531     -0.297691      -14.4191       14.4191       155.616       170.035    
  38  0.476201E-01  -3.04450      -147.465       147.465       162.484       309.949    
  39  0.183829      -1.69375      -82.0391       82.0391       162.816       244.855    
  40  0.417257     -0.874053      -42.3360       42.3360       161.460       203.796    
  41  0.647723E-01  -2.73688      -132.564       132.564       161.455       294.019    
  42  0.123950E-01  -4.39046      -212.658       212.658       163.610       376.268    
  43  0.281372E-01  -3.57066      -172.950       172.950       154.957       327.907    
  44  0.883044     -0.124380      -6.02452       6.02452       162.455       168.479    
  45  0.445413     -0.808754      -39.1731       39.1731       155.551       194.724    
  46  0.418101     -0.872031      -42.2380       42.2380       162.535       204.773    
  47  0.301534      -1.19887      -58.0690       58.0690       161.330       219.399    
  48  0.674500     -0.393783      -19.0734       19.0734       160.674       179.748    
  49  0.732783     -0.310905      -15.0591       15.0591       161.455       176.514    
  50  0.970355     -0.300929E-01  -1.45759       1.45759       163.447       164.905    
  51  0.981589     -0.185824E-01 -0.900065      0.900065       170.733       171.633    
  52  0.677253     -0.389711      -18.8762       18.8762       209.652       228.528    
  53  0.800731     -0.222230      -10.7640       10.7640       162.912       173.676    
  54  0.529544     -0.635738      -30.7929       30.7929       163.364       194.157    
  55  0.814619     -0.205035      -9.93113       9.93113       162.306       172.237    
  56  0.909218     -0.951702E-01  -4.60970       4.60970       161.872       166.482    
  57  0.269472      -1.31129      -63.5142       63.5142       161.413       224.927    
  58  0.166504      -1.79274      -86.8336       86.8336       166.105       252.938    
  59  0.328775      -1.11238      -53.8797       53.8797       162.805       216.685    
  60  0.333602      -1.09781      -53.1738       53.1738       189.960       243.134    
  61  0.213893      -1.54228      -74.7024       74.7024       161.597       236.300    
  62  0.401720     -0.911999      -44.1739       44.1739       167.843       212.017    
  63  0.453769     -0.790168      -38.2729       38.2729       161.457       199.730    
  64  0.649690E-01  -2.73384      -132.418       132.418       162.947       295.365    
  65  0.510128     -0.673093      -32.6022       32.6022       161.408       194.010    
  66  0.430053     -0.843847      -40.8729       40.8729       161.458       202.331    
  67  0.528469E-01  -2.94036      -142.420       142.420       161.444       303.864    
  68  0.887506     -0.119339      -5.78037       5.78037       162.074       167.854    
  69  0.499442     -0.694264      -33.6276       33.6276       166.906       200.534    
  70  0.432451     -0.838287      -40.6036       40.6036       160.681       201.284    
  71  0.637121     -0.450796      -21.8349       21.8349       161.557       183.392    
  72  0.523182     -0.647826      -31.3783       31.3783       160.402       191.780    
  73  0.221333      -1.50809      -73.0463       73.0463       161.455       234.501    
  74  0.597769     -0.514551      -24.9230       24.9230       164.919       189.842    
  75  0.886305     -0.120694      -5.84596       5.84596       156.586       162.432    
loop,thermsimp(1:2)        9   117.815       79.8754    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93        162.15          0.86          1.15         25.26          0.09          0.06         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     94        166.84          0.86          1.15         25.17          0.24          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:        9
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       10
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       93     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -23.7987       23.7987       161.212       185.010    
   2  0.877337     -0.130865      -6.33861       6.33861       156.586       162.925    
   3  0.821280     -0.196891      -9.53671       9.53671       161.536       171.072    
   4  0.989636     -0.104181E-01 -0.504615      0.504615       163.447       163.952    
   5  0.492813     -0.707625      -34.2748       34.2748       161.872       196.147    
   6  0.904083     -0.100835      -4.88406       4.88406       162.228       167.112    
   7  0.490620     -0.712086      -34.4909       34.4909       162.074       196.565    
   8  0.572439     -0.557850      -27.0202       27.0202       161.417       188.437    
   9  0.588753     -0.529749      -25.6591       25.6591       162.455       188.114    
  10  0.341799      -1.07353      -51.9980       51.9980       162.353       214.351    
  11  0.449605     -0.799385      -38.7193       38.7193       155.616       194.335    
  12  0.740720     -0.300132      -14.5373       14.5373       156.791       171.329    
  13  0.173164E-01  -4.05610      -196.463       196.463       170.733       367.196    
  14  0.828389     -0.188272      -9.11921       9.11921       162.306       171.425    
  15  0.110451      -2.20318      -106.714       106.714       162.747       269.461    
  16  0.646816     -0.435693      -21.1034       21.1034       162.912       184.016    
  17  0.857676     -0.153529      -7.43637       7.43637       161.455       168.891    
  18  0.691202E-02  -4.97449      -240.946       240.946       157.391       398.338    
  19  0.530885     -0.633210      -30.6704       30.6704       164.689       195.359    
  20  0.742957     -0.297117      -14.3913       14.3913       160.674       175.066    
  21  0.883526E-01  -2.42642      -117.527       117.527       152.236       269.763    
  22  0.599138     -0.512263      -24.8122       24.8122       161.455       186.267    
  23  0.476407     -0.741482      -35.9147       35.9147       161.557       197.472    
  24  0.509994E-01  -2.97594      -144.144       144.144       165.413       309.557    
  25  0.669768     -0.400824      -19.4145       19.4145       163.976       183.391    
  26  0.874430     -0.134183      -6.49933       6.49933       162.153       168.652    
  27  0.830739     -0.185440      -8.98202       8.98202       164.919       173.901    
  28  0.166673      -1.79172      -86.7846       86.7846       163.722       250.506    
  29  0.578742     -0.546898      -26.4897       26.4897       160.402       186.892    
  30  0.433531     -0.835791      -40.4827       40.4827       161.408       201.890    
  31  0.979127     -0.210935E-01  -1.02169       1.02169       163.364       164.386    
  32  0.310252      -1.17037      -56.6885       56.6885       155.551       212.239    
  33  0.686879     -0.375597      -18.1926       18.1926       161.207       179.400    
  34  0.243104      -1.41427      -68.5020       68.5020       161.457       229.959    
  35  0.459407     -0.777818      -37.6747       37.6747       162.571       200.246    
  36  0.332163      -1.10213      -53.3831       53.3831       166.906       220.290    
  37  0.512243     -0.668956      -32.4018       32.4018       160.765       193.167    
  38  0.323240      -1.12936      -54.7021       54.7021       160.681       215.383    
  39  0.667455     -0.404284      -19.5820       19.5820       162.825       182.407    
  40  0.460037     -0.776449      -37.6084       37.6084       161.458       199.066    
  41  0.227415      -1.48098      -71.7331       71.7331       161.460       233.193    
  42  0.636494     -0.451780      -21.8826       21.8826       162.535       184.418    
  43  0.432078     -0.839149      -40.6453       40.6453       167.843       208.488    
  44  0.609015     -0.495913      -24.0202       24.0202       164.566       188.586    
  45  0.427755     -0.849205      -41.1324       41.1324       155.759       196.892    
  46  0.496712     -0.699745      -33.8931       33.8931       162.805       196.698    
  47  0.295308      -1.21974      -59.0796       59.0796       163.123       222.203    
  48  0.928979     -0.736692E-01  -3.56827       3.56827       161.330       164.898    
  49  0.245696E-01  -3.70625      -179.517       179.517       164.970       344.487    
  50  0.833617E-01  -2.48457      -120.343       120.343       161.413       281.756    
  51  0.499690     -0.693767      -33.6036       33.6036       209.652       243.255    
  52  0.320552      -1.13771      -55.1066       55.1066       159.760       214.866    
  53  0.151030E-01  -4.19286      -203.087       203.087       161.455       364.541    
  54  0.551054     -0.595922      -28.8643       28.8643       161.597       190.462    
  55  0.786630     -0.239997      -11.6246       11.6246       162.643       174.268    
  56  0.793760E-01  -2.53356      -122.716       122.716       160.635       283.351    
  57  0.456771     -0.783574      -37.9535       37.9535       161.892       199.845    
  58  0.613263     -0.488962      -23.6835       23.6835       189.960       213.644    
  59  0.407581     -0.897515      -43.4724       43.4724       162.816       206.288    
  60  0.214329      -1.54024      -74.6037       74.6037       164.350       238.954    
  61  0.543052     -0.610551      -29.5729       29.5729       166.105       195.678    
  62  0.861407     -0.149188      -7.22613       7.22613       162.050       169.277    
  63  0.727563     -0.318055      -15.4054       15.4054       158.419       173.824    
  64  0.954867     -0.461830E-01  -2.23694       2.23694       161.713       163.950    
  65  0.209413      -1.56345      -75.7276       75.7276       161.455       237.182    
  66  0.218233E-02  -6.12736      -296.787       296.787       160.327       457.114    
  67  0.990675     -0.936839E-02 -0.453771      0.453771       163.057       163.510    
  68  0.874543     -0.134054      -6.49308       6.49308       161.455       167.948    
  69  0.276161      -1.28677      -62.3266       62.3266       161.455       223.781    
  70  0.319398      -1.14132      -55.2812       55.2812       162.947       218.228    
  71  0.160691      -1.82827      -88.5549       88.5549       161.444       249.999    
  72  0.612149     -0.490779      -23.7716       23.7716       167.774       191.546    
  73  0.832427     -0.183410      -8.88370       8.88370       162.484       171.368    
  74  0.985697     -0.144064E-01 -0.697794      0.697794       154.957       155.654    
  75  0.607085     -0.499087      -24.1740       24.1740       162.149       186.323    
loop,thermsimp(1:2)       10   23.7987       6.33861    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95        158.97          0.86          1.14         25.25          0.08          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     96        160.19          0.84          1.14         25.26          0.17          0.05         27.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       10
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       11
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       95     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -49.9203       49.9203       154.957       204.877    
   2  0.318207      -1.14505      -55.4623       55.4623       156.586       212.049    
   3  0.410972E-01  -3.19181      -154.600       154.600       163.057       317.656    
   4  0.217948      -1.52350      -73.7927       73.7927       161.713       235.506    
   5  0.460755     -0.774888      -37.5328       37.5328       163.447       200.980    
   6  0.694214     -0.364975      -17.6781       17.6781       163.364       181.043    
   7  0.237764      -1.43648      -69.5777       69.5777       161.330       230.907    
   8  0.635477     -0.453379      -21.9600       21.9600       162.228       184.188    
   9  0.882831E-01  -2.42721      -117.565       117.565       161.455       279.020    
  10  0.889613     -0.116969      -5.66555       5.66555       162.153       167.818    
  11  0.236395      -1.44225      -69.8574       69.8574       161.455       231.312    
  12  0.785560     -0.241359      -11.6905       11.6905       162.050       173.741    
  13  0.253594      -1.37202      -66.4558       66.4558       161.536       227.991    
  14  0.767743     -0.264300      -12.8018       12.8018       156.791       169.593    
  15  0.425111     -0.855405      -41.4327       41.4327       162.484       203.917    
  16  0.334680E-01  -3.39717      -164.546       164.546       162.306       326.852    
  17  0.737903     -0.303943      -14.7219       14.7219       158.419       173.141    
  18  0.530906     -0.633170      -30.6685       30.6685       164.919       195.588    
  19  0.811772     -0.208536      -10.1007       10.1007       162.643       172.744    
  20  0.781494     -0.246548      -11.9419       11.9419       160.674       172.616    
  21  0.668871     -0.402164      -19.4794       19.4794       161.207       180.686    
  22  0.609633     -0.494898      -23.9710       23.9710       162.825       186.796    
  23  0.732795E-01  -2.61347      -126.587       126.587       163.976       290.563    
  24  0.999755     -0.244962E-03 -0.118651E-01  0.118651E-01   162.912       162.924    
  25  0.556911     -0.585350      -28.3523       28.3523       162.535       190.887    
  26  0.381942     -0.962485      -46.6193       46.6193       161.212       207.831    
  27  0.230973      -1.46546      -70.9814       70.9814       161.455       232.436    
  28  0.791084     -0.234351      -11.3511       11.3511       162.149       173.500    
  29  0.122039      -2.10341      -101.882       101.882       160.402       262.284    
  30  0.411383     -0.888231      -43.0227       43.0227       162.455       205.478    
  31  0.753656     -0.282819      -13.6987       13.6987       161.417       175.116    
  32  0.846821     -0.166266      -8.05333       8.05333       164.566       172.619    
  33  0.577745     -0.548622      -26.5733       26.5733       161.597       188.171    
  34  0.859903     -0.150936      -7.31078       7.31078       167.774       175.085    
  35  0.915816     -0.879395E-01  -4.25947       4.25947       160.765       165.025    
  36  0.220499      -1.51186      -73.2291       73.2291       155.616       228.845    
  37  0.539962     -0.616256      -29.8492       29.8492       164.689       194.538    
  38  0.810725     -0.209827      -10.1632       10.1632       166.105       176.268    
  39  0.901567     -0.103621      -5.01901       5.01901       161.872       166.891    
  40  0.196148      -1.62888      -78.8972       78.8972       162.074       240.971    
  41  0.413437     -0.883250      -42.7814       42.7814       162.805       205.586    
  42  0.192892      -1.64562      -79.7080       79.7080       155.759       235.467    
  43  0.194290      -1.63840      -79.3583       79.3583       161.557       240.915    
  44  0.988313     -0.117563E-01 -0.569433      0.569433       161.458       162.027    
  45  0.917980     -0.855792E-01  -4.14515       4.14515       161.892       166.037    
  46  0.136083      -1.99449      -96.6057       96.6057       162.571       259.177    
  47  0.847126     -0.165905      -8.03586       8.03586       161.408       169.444    
  48  0.513003     -0.667474      -32.3300       32.3300       162.816       195.146    
  49  0.562161     -0.575967      -27.8977       27.8977       167.843       195.740    
  50  0.926079     -0.767957E-01  -3.71970       3.71970       155.551       159.270    
  51  0.890313     -0.116182      -5.62743       5.62743       189.960       195.588    
  52  0.857665     -0.153542      -7.43699       7.43699       162.353       169.790    
  53  0.599877     -0.511031      -24.7525       24.7525       159.760       184.512    
  54  0.835330     -0.179929      -8.71509       8.71509       160.681       169.396    
  55  0.323336      -1.12906      -54.6878       54.6878       162.947       217.635    
  56  0.305042      -1.18731      -57.5088       57.5088       166.906       224.415    
  57  0.980883     -0.193016E-01 -0.934900      0.934900       163.123       164.058    
  58  0.129682      -2.04267      -98.9395       98.9395       161.455       260.394    
  59  0.738352     -0.303335      -14.6924       14.6924       161.457       176.149    
  60  0.383117     -0.959416      -46.4706       46.4706       161.460       207.930    
  61  0.524900     -0.644547      -31.2195       31.2195       161.455       192.674    
  62  0.594829     -0.519481      -25.1618       25.1618       164.350       189.512    
  63  0.596925     -0.515963      -24.9914       24.9914       209.652       234.643    
  64  0.462523     -0.771060      -37.3473       37.3473       161.444       198.792    
  65  0.837977     -0.176764      -8.56182       8.56182       163.722       172.284    
  66  0.380204     -0.967046      -46.8402       46.8402       162.747       209.587    
  67  0.135974E-01  -4.29788      -208.174       208.174       152.236       360.410    
  68  0.816466     -0.202771      -9.82147       9.82147       161.413       171.234    
  69  0.877970     -0.130143      -6.30364       6.30364       160.635       166.938    
  70  0.468378     -0.758480      -36.7380       36.7380       165.413       202.151    
  71  0.238817E-01  -3.73464      -180.893       180.893       164.970       345.862    
  72  0.517025     -0.659665      -31.9518       31.9518       161.455       193.406    
  73  0.583879     -0.538062      -26.0618       26.0618       170.733       196.795    
  74  0.987129E-03  -6.92071      -335.214       335.214       157.391       492.606    
  75  0.605732     -0.501317      -24.2820       24.2820       158.974       183.256    
loop,thermsimp(1:2)       11   49.9203       55.4623    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97        161.29          0.86          1.15         25.22          0.14          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       11
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       12
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       96     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -124.835       124.835       155.551       280.386    
   2  0.804470     -0.217571      -10.5384       10.5384       161.458       171.996    
   3  0.984017     -0.161120E-01 -0.780406      0.780406       162.912       163.693    
   4  0.587639     -0.531643      -25.7509       25.7509       163.123       188.874    
   5  0.523810     -0.646626      -31.3202       31.3202       160.765       192.085    
   6  0.930607     -0.719181E-01  -3.48345       3.48345       161.892       165.375    
   7  0.360114E-01  -3.32392      -160.999       160.999       161.872       322.871    
   8  0.963815     -0.368556E-01  -1.78515       1.78515       160.635       162.420    
   9  0.201264E-01  -3.90572      -189.179       189.179       162.153       351.332    
  10  0.954897     -0.461522E-01  -2.23545       2.23545       160.681       162.916    
  11  0.374160     -0.983071      -47.6164       47.6164       161.408       209.024    
  12  0.174967      -1.74316      -84.4322       84.4322       156.791       241.224    
  13  0.381618     -0.963335      -46.6604       46.6604       162.353       209.013    
  14  0.191097      -1.65498      -80.1611       80.1611       161.413       241.574    
  15  0.425287     -0.854991      -41.4127       41.4127       163.722       205.134    
  16  0.426180     -0.852893      -41.3111       41.3111       160.674       201.985    
  17  0.615671     -0.485042      -23.4937       23.4937       164.566       188.060    
  18  0.787264     -0.239192      -11.5856       11.5856       162.643       174.229    
  19  0.812636     -0.207472      -10.0492       10.0492       158.419       168.468    
  20  0.917241E-01  -2.38897      -115.713       115.713       162.149       277.862    
  21  0.671310     -0.398525      -19.3031       19.3031       162.050       181.353    
  22  0.548174     -0.601162      -29.1181       29.1181       167.774       196.892    
  23  0.134851      -2.00359      -97.0464       97.0464       161.417       258.463    
  24  0.373236     -0.985545      -47.7362       47.7362       161.457       209.193    
  25  0.578774     -0.546843      -26.4871       26.4871       166.105       192.592    
  26  0.910021     -0.942872E-01  -4.56693       4.56693       161.207       165.774    
  27  0.192323      -1.64858      -79.8511       79.8511       163.364       243.216    
  28  0.366342      -1.00419      -48.6392       48.6392       158.974       207.613    
  29  0.686994     -0.375430      -18.1845       18.1845       162.228       180.412    
  30  0.486551     -0.720414      -34.8943       34.8943       159.760       194.654    
  31  0.256801      -1.35945      -65.8470       65.8470       162.825       228.672    
  32  0.284977      -1.25535      -60.8045       60.8045       161.597       222.402    
  33  0.903072     -0.101953      -4.93821       4.93821       164.350       169.288    
  34  0.226450      -1.48523      -71.9392       71.9392       162.535       234.474    
  35  0.446078     -0.807261      -39.1008       39.1008       161.455       200.555    
  36  0.152634      -1.87971      -91.0465       91.0465       161.455       252.501    
  37  0.511955     -0.669518      -32.4290       32.4290       164.689       197.118    
  38  0.513138     -0.667210      -32.3172       32.3172       162.816       195.133    
  39  0.637309     -0.450501      -21.8206       21.8206       164.919       186.740    
  40  0.861477     -0.149107      -7.22220       7.22220       189.960       197.183    
  41  0.817364     -0.201671      -9.76820       9.76820       167.843       177.611    
  42  0.793820     -0.230898      -11.1839       11.1839       170.733       181.917    
  43  0.253309      -1.37315      -66.5102       66.5102       161.444       227.954    
  44  0.702532     -0.353065      -17.1012       17.1012       163.447       180.548    
  45  0.822324     -0.195620      -9.47514       9.47514       165.413       174.889    
  46  0.720485     -0.327831      -15.8789       15.8789       162.484       178.363    
  47  0.881589     -0.126029      -6.10441       6.10441       154.957       161.061    
  48  0.584479     -0.537035      -26.0120       26.0120       162.455       188.467    
  49  0.697197     -0.360688      -17.4704       17.4704       162.805       180.275    
  50  0.320931      -1.13653      -55.0494       55.0494       161.212       216.261    
  51  0.780071     -0.248371      -12.0302       12.0302       161.460       173.490    
  52  0.318322E-01  -3.44728      -166.974       166.974       162.747       329.720    
  53  0.693387     -0.366167      -17.7358       17.7358       156.586       174.322    
  54  0.332128      -1.10223      -53.3882       53.3882       162.947       216.335    
  55  0.891883E-01  -2.41701      -117.071       117.071       166.906       283.977    
  56  0.960735     -0.400567E-01  -1.94020       1.94020       161.536       163.476    
  57  0.726634     -0.319332      -15.4673       15.4673       155.616       171.083    
  58  0.867850     -0.141737      -6.86521       6.86521       161.330       168.195    
  59  0.960075     -0.407444E-01  -1.97351       1.97351       161.455       163.428    
  60  0.303374E-01  -3.49537      -169.303       169.303       161.455       330.758    
  61  0.159557      -1.83535      -88.8978       88.8978       209.652       298.549    
  62  0.487506     -0.718453      -34.7992       34.7992       155.759       190.559    
  63  0.978612E-01  -2.32420      -112.576       112.576       161.713       274.289    
  64  0.405010     -0.903843      -43.7789       43.7789       161.557       205.336    
  65  0.199088      -1.61401      -78.1766       78.1766       162.074       240.251    
  66  0.621424     -0.475741      -23.0432       23.0432       162.571       185.614    
  67  0.630612     -0.461065      -22.3323       22.3323       161.455       183.787    
  68  0.842429     -0.171466      -8.30519       8.30519       160.402       168.707    
  69  0.887493     -0.119355      -5.78113       5.78113       161.455       167.236    
  70  0.813538     -0.206363      -9.99548       9.99548       163.976       173.972    
  71  0.901945     -0.103202      -4.99873       4.99873       163.057       168.055    
  72  0.789044E-01  -2.53952      -123.005       123.005       162.306       285.311    
  73  0.325005      -1.12391      -54.4384       54.4384       164.970       219.408    
  74  0.701704     -0.354243      -17.1582       17.1582       152.236       169.395    
  75  0.797802     -0.225895      -10.9415       10.9415       161.286       172.228    
loop,thermsimp(1:2)       12   124.835       10.5384    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98        161.03          0.86          1.14         25.21          0.14          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99        161.60          0.86          1.16         25.21          0.12          0.06         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       12
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       13
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:       98     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -6.60995       6.60995       154.957       161.566    
   2  0.311340      -1.16687      -56.5190       56.5190       160.635       217.154    
   3  0.293828      -1.22476      -59.3230       59.3230       160.681       220.004    
   4  0.586668     -0.533296      -25.8309       25.8309       161.455       187.286    
   5  0.360311      -1.02079      -49.4433       49.4433       161.536       210.979    
   6  0.315643      -1.15314      -55.8540       55.8540       162.912       218.766    
   7  0.481464     -0.730923      -35.4033       35.4033       161.892       197.295    
   8  0.720279     -0.328116      -15.8928       15.8928       161.207       177.100    
   9  0.551471     -0.595166      -28.8277       28.8277       161.455       190.282    
  10  0.524434     -0.645435      -31.2625       31.2625       163.057       194.319    
  11  0.781600     -0.246412      -11.9353       11.9353       161.330       173.265    
  12  0.353648      -1.03945      -50.3473       50.3473       158.419       208.766    
  13  0.451044     -0.796190      -38.5646       38.5646       160.402       198.967    
  14  0.325353      -1.12284      -54.3865       54.3865       164.350       218.737    
  15  0.312157      -1.16425      -56.3919       56.3919       152.236       208.628    
  16  0.432418     -0.838362      -40.6072       40.6072       155.616       196.223    
  17  0.296543      -1.21556      -58.8774       58.8774       161.458       220.335    
  18  0.705416     -0.348967      -16.9027       16.9027       161.286       178.189    
  19  0.146505      -1.92069      -93.0314       93.0314       161.460       254.491    
  20  0.471608     -0.751607      -36.4051       36.4051       163.976       200.381    
  21  0.633095     -0.457134      -22.1419       22.1419       162.643       184.785    
  22  0.754855     -0.281230      -13.6218       13.6218       156.586       170.208    
  23  0.444501E-01  -3.11339      -150.801       150.801       165.413       316.215    
  24  0.160973      -1.82652      -88.4699       88.4699       167.843       256.312    
  25  0.943694     -0.579536E-01  -2.80706       2.80706       162.484       165.291    
  26  0.187304      -1.67502      -81.1321       81.1321       162.805       243.937    
  27  0.840922     -0.173257      -8.39192       8.39192       162.228       170.620    
  28  0.888648     -0.118054      -5.71810       5.71810       163.447       169.165    
  29  0.920614E-01  -2.38530      -115.535       115.535       162.050       277.586    
  30  0.906493     -0.981722E-01  -4.75511       4.75511       170.733       175.488    
  31  0.221761      -1.50616      -72.9528       72.9528       161.455       234.407    
  32  0.248725      -1.39141      -67.3947       67.3947       162.571       229.966    
  33  0.315928      -1.15224      -55.8104       55.8104       164.919       220.730    
  34  0.949967     -0.513283E-01  -2.48616       2.48616       164.566       167.052    
  35  0.802748     -0.219715      -10.6422       10.6422       162.455       173.097    
  36  0.558987     -0.581628      -28.1720       28.1720       163.123       191.295    
  37  0.638133     -0.449209      -21.7580       21.7580       155.759       177.517    
  38  0.637852     -0.449648      -21.7793       21.7793       160.765       182.544    
  39  0.382908     -0.959961      -46.4970       46.4970       166.105       212.602    
  40  0.982834     -0.173149E-01 -0.838673      0.838673       159.760       160.598    
  41  0.497022     -0.699120      -33.8628       33.8628       162.816       196.679    
  42  0.263620      -1.33325      -64.5776       64.5776       167.774       232.352    
  43  0.296939      -1.21423      -58.8129       58.8129       164.689       223.502    
  44  0.784161     -0.243141      -11.7769       11.7769       189.960       201.737    
  45  0.545321     -0.606380      -29.3709       29.3709       161.455       190.825    
  46  0.770080     -0.261260      -12.6545       12.6545       160.674       173.329    
  47  0.358755      -1.02511      -49.6528       49.6528       163.722       213.375    
  48  0.325126      -1.12354      -54.4203       54.4203       161.557       215.978    
  49  0.599396     -0.511832      -24.7913       24.7913       158.974       183.765    
  50  0.323708      -1.12791      -54.6321       54.6321       162.353       216.985    
  51  0.329142      -1.11127      -53.8257       53.8257       161.408       215.233    
  52  0.685661     -0.377371      -18.2785       18.2785       161.457       179.736    
  53  0.360361      -1.02065      -49.4365       49.4365       161.212       210.648    
  54  0.665281     -0.407545      -19.7400       19.7400       162.947       182.687    
  55  0.983321     -0.168196E-01 -0.814681      0.814681       164.970       165.784    
  56  0.644247     -0.439672      -21.2961       21.2961       161.597       182.893    
  57  0.735645     -0.307008      -14.8704       14.8704       161.444       176.315    
  58  0.680276     -0.385257      -18.6605       18.6605       162.825       181.485    
  59  0.864073     -0.146098      -7.07645       7.07645       162.535       169.611    
  60  0.788785     -0.237262      -11.4921       11.4921       162.074       173.566    
  61  0.429383     -0.845405      -40.9484       40.9484       156.791       197.740    
  62  0.798857     -0.224573      -10.8775       10.8775       161.413       172.290    
  63  0.946983     -0.544737E-01  -2.63851       2.63851       163.364       166.003    
  64  0.229664      -1.47114      -71.2565       71.2565       161.455       232.711    
  65  0.655912     -0.421729      -20.4270       20.4270       161.417       181.844    
  66  0.236982      -1.43977      -69.7372       69.7372       161.713       231.450    
  67  0.588628     -0.529960      -25.6694       25.6694       162.149       187.819    
  68  0.430113     -0.843707      -40.8661       40.8661       155.551       196.417    
  69  0.384455     -0.955929      -46.3017       46.3017       166.906       213.208    
  70  0.162044E-01  -4.12247      -199.678       199.678       162.306       361.984    
  71  0.769503     -0.262010      -12.6908       12.6908       209.652       222.342    
  72  0.220892      -1.51008      -73.1428       73.1428       161.872       235.015    
  73  0.978294E-01  -2.32453      -112.592       112.592       162.747       275.339    
  74  0.310072      -1.17095      -56.7167       56.7167       161.455       218.171    
  75  0.871728E-01  -2.43986      -118.178       118.178       161.034       279.212    
loop,thermsimp(1:2)       13   6.60995       56.5190    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100        157.81          0.86          1.14         25.28          0.09          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101        157.66          0.83          1.15         25.31          0.34          0.05         27.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    157.66       0.7066     -1.667      2.438     -102.6     0.9989    
                      0.1538      1.605     -99.70      3.498     0.3628    
                       1.909     -1.365      1.530      5372.     -9898.    
                     -0.5909      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5186.     -148.9    
                     -0.5672     -6.367     -5.035     -8.178      6.063    
                      -14.76     -2.900      1253.      0.000      3893.    

                       3893.      3893.      3707.      3893.      3452.    
                       4451.    -0.4061E-01 0.5354E-01  0.000     0.8213E-01
                     -0.7636E-01-0.4064E-01 0.1184     0.1397E-01-0.2032E-01

                     -0.1983    -0.9360      0.000    -0.4745E-01-0.2787E-02
                       0.000    -0.3073E-01-0.2665E-01-0.9285E-01 0.1206E-01
                     -0.4207E-01 0.1053E-01-0.4872     -1.052      5372.    

                     -0.5661    -0.8059     -2.463     -2.463     0.1813E-01
                      0.2898      9.121      8.774    -0.1953E+05 -4.000    
                     -0.5086    -0.5651      9.307      8.799    -0.2074E+05

                      -4.000     0.8159E-01-0.7892      8.963      8.916    
                     -0.2074E+05 -7.000    -0.5014    -0.7082      9.134    
                       8.819    -0.2074E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    157.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       13
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       14
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      100     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -51.6031       51.6031       159.760       211.363    
   2  0.267720      -1.31781      -63.8301       63.8301       154.957       218.787    
   3  0.279825      -1.27359      -61.6882       61.6882       162.484       224.172    
   4  0.281095      -1.26906      -61.4688       61.4688       164.970       226.439    
   5  0.245867      -1.40297      -67.9546       67.9546       163.364       231.319    
   6  0.914239     -0.896636E-01  -4.34298       4.34298       164.566       168.909    
   7  0.180116      -1.71415      -83.0274       83.0274       163.447       246.474    
   8  0.567917     -0.565780      -27.4044       27.4044       162.535       189.939    
   9  0.431941     -0.839465      -40.6607       40.6607       156.586       197.247    
  10  0.877920     -0.130199      -6.30639       6.30639       162.228       168.534    
  11  0.280355      -1.27170      -61.5964       61.5964       161.413       223.009    
  12  0.486947     -0.719601      -34.8548       34.8548       162.455       197.310    
  13  0.216546      -1.52995      -74.1053       74.1053       161.330       235.435    
  14  0.483718E-02  -5.33142      -258.235       258.235       160.674       418.909    
  15  0.785152E-03  -7.14963      -346.302       346.302       162.074       508.376    
  16  0.300781      -1.20137      -58.1901       58.1901       170.733       228.923    
  17  0.869691     -0.139618      -6.76258       6.76258       161.444       168.207    
  18  0.694261E-01  -2.66749      -129.204       129.204       161.207       290.411    
  19  0.635475     -0.453382      -21.9602       21.9602       155.759       177.720    
  20  0.894977     -0.110958      -5.37438       5.37438       161.286       166.661    
  21  0.442267     -0.815841      -39.5164       39.5164       161.457       200.973    
  22  0.283362      -1.26103      -61.0797       61.0797       162.825       223.904    
  23  0.518611     -0.656601      -31.8034       31.8034       161.417       193.220    
  24  0.858122E-01  -2.45559      -118.940       118.940       160.765       279.705    
  25  0.461153     -0.774026      -37.4910       37.4910       162.947       200.438    
  26  0.180026      -1.71465      -83.0517       83.0517       161.597       244.649    
  27  0.446938E-01  -3.10792      -150.536       150.536       158.974       309.510    
  28  0.152352      -1.88156      -91.1360       91.1360       162.643       253.779    
  29  0.163937E-01  -4.11086      -199.115       199.115       161.455       360.570    
  30  0.721347     -0.326635      -15.8210       15.8210       162.149       177.970    
  31  0.813323     -0.206626      -10.0082       10.0082       161.455       171.463    
  32  0.569343     -0.563273      -27.2829       27.2829       161.455       188.737    
  33  0.275899      -1.28772      -62.3725       62.3725       163.123       225.496    
  34  0.933187     -0.691492E-01  -3.34934       3.34934       163.057       166.406    
  35  0.716570     -0.333279      -16.1428       16.1428       155.616       171.759    
  36  0.405413     -0.902848      -43.7307       43.7307       155.551       199.281    
  37  0.907528     -0.970314E-01  -4.69985       4.69985       162.816       167.516    
  38  0.554651     -0.589416      -28.5492       28.5492       161.892       190.441    
  39  0.419962     -0.867592      -42.0230       42.0230       156.791       198.814    
  40  0.824173     -0.193375      -9.36639       9.36639       160.402       169.769    
  41  0.865647     -0.144278      -6.98832       6.98832       163.976       170.965    
  42  0.300944      -1.20083      -58.1640       58.1640       189.960       248.124    
  43  0.339688      -1.07973      -52.2981       52.2981       152.236       204.535    
  44  0.217032      -1.52771      -73.9968       73.9968       158.419       232.416    
  45  0.792618E-01  -2.53500      -122.786       122.786       161.212       283.998    
  46  0.997677     -0.232582E-02 -0.112654      0.112654       161.536       161.648    
  47  0.174239      -1.74733      -84.6341       84.6341       166.105       250.739    
  48  0.834084     -0.181422      -8.78740       8.78740       166.906       175.694    
  49  0.324404      -1.12577      -54.5280       54.5280       163.722       218.250    
  50  0.927598     -0.751564E-01  -3.64030       3.64030       161.408       165.048    
  51  0.981384     -0.187911E-01 -0.910174      0.910174       161.557       162.467    
  52  0.849105     -0.163572      -7.92284       7.92284       162.353       170.275    
  53  0.148698      -1.90584      -92.3120       92.3120       160.635       252.947    
  54  0.389930     -0.941789      -45.6169       45.6169       161.455       207.071    
  55  0.183568      -1.69517      -82.1079       82.1079       164.350       246.458    
  56  0.661220     -0.413669      -20.0366       20.0366       162.912       182.949    
  57  0.242183      -1.41806      -68.6857       68.6857       160.681       229.367    
  58  0.182262      -1.70231      -82.4538       82.4538       161.458       243.912    
  59  0.299801      -1.20464      -58.3482       58.3482       164.919       223.267    
  60  0.950117     -0.511698E-01  -2.47848       2.47848       209.652       212.130    
  61  0.184593      -1.68960      -81.8382       81.8382       164.689       246.527    
  62  0.730970     -0.313382      -15.1791       15.1791       162.571       177.750    
  63  0.753232E-01  -2.58597      -125.255       125.255       161.713       286.968    
  64  0.501460     -0.690231      -33.4323       33.4323       167.774       201.206    
  65  0.513248E-01  -2.96958      -143.836       143.836       161.455       305.290    
  66  0.931416     -0.710492E-01  -3.44137       3.44137       161.455       164.896    
  67  0.637420E-01  -2.75291      -133.341       133.341       161.872       295.213    
  68  0.322234E-01  -3.43506      -166.382       166.382       162.805       329.187    
  69  0.791156     -0.234260      -11.3467       11.3467       161.460       172.806    
  70  0.606746     -0.499645      -24.2010       24.2010       167.843       192.044    
  71  0.115774      -2.15611      -104.434       104.434       162.747       267.181    
  72  0.574132     -0.554896      -26.8772       26.8772       162.050       188.928    
  73  0.877193     -0.131028      -6.34653       6.34653       161.034       167.380    
  74  0.113746      -2.17379      -105.291       105.291       165.413       270.704    
  75  0.259994E-01  -3.64968      -176.777       176.777       157.662       334.440    
loop,thermsimp(1:2)       14   51.6031       63.8301    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102        160.97          0.86          1.14         25.30          0.23          0.06         27.59
Just calling func    0   0         27.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    103        161.57          0.86          1.12         25.36          0.02          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       14
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       15
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      102     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -71.1965       71.1965       161.536       232.732    
   2  0.322822      -1.13066      -54.7649       54.7649       161.557       216.322    
   3  0.327586      -1.11601      -54.0552       54.0552       161.455       215.510    
   4  0.799078     -0.224296      -10.8641       10.8641       161.408       172.272    
   5  0.698072     -0.359433      -17.4096       17.4096       163.057       180.466    
   6  0.733871     -0.309421      -14.9873       14.9873       161.286       176.274    
   7  0.823872     -0.193740      -9.38408       9.38408       161.034       170.418    
   8  0.800045     -0.223087      -10.8055       10.8055       162.816       173.621    
   9  0.162010      -1.82010      -88.1588       88.1588       161.444       249.603    
  10  0.113138      -2.17915      -105.550       105.550       162.228       267.778    
  11  0.973966     -0.263784E-01  -1.27767       1.27767       164.566       165.844    
  12  0.998107     -0.189521E-02 -0.917969E-01  0.917969E-01   160.402       160.494    
  13  0.631351     -0.459893      -22.2756       22.2756       162.353       184.628    
  14  0.698229     -0.359208      -17.3988       17.3988       163.976       181.375    
  15  0.359252      -1.02373      -49.5858       49.5858       161.455       211.040    
  16  0.936266     -0.658562E-01  -3.18983       3.18983       155.616       158.806    
  17  0.843107     -0.170662      -8.26623       8.26623       161.460       169.726    
  18  0.181284      -1.70769      -82.7144       82.7144       166.906       249.621    
  19  0.354246      -1.03777      -50.2656       50.2656       155.759       206.025    
  20  0.981540     -0.186324E-01 -0.902486      0.902486       162.571       163.473    
  21  0.582284E-01  -2.84338      -137.723       137.723       162.149       299.872    
  22  0.935088     -0.671143E-01  -3.25077       3.25077       162.912       166.163    
  23  0.682144     -0.382515      -18.5276       18.5276       161.455       179.982    
  24  0.441439     -0.817715      -39.6071       39.6071       162.050       201.658    
  25  0.325829      -1.12138      -54.3157       54.3157       162.535       216.851    
  26  0.956968E-01  -2.34657      -113.659       113.659       161.892       275.551    
  27  0.465124E-01  -3.06804      -148.605       148.605       167.843       316.447    
  28  0.645503     -0.437726      -21.2019       21.2019       161.417       182.619    
  29  0.184751      -1.68875      -81.7967       81.7967       156.586       238.383    
  30  0.676303     -0.391115      -18.9442       18.9442       162.455       181.399    
  31  0.408248     -0.895880      -43.3932       43.3932       156.791       200.185    
  32  0.215511      -1.53474      -74.3375       74.3375       155.551       229.888    
  33  0.762109     -0.271666      -13.1585       13.1585       162.947       176.106    
  34  0.445022     -0.809632      -39.2156       39.2156       161.457       200.673    
  35  0.667113     -0.404797      -19.6069       19.6069       167.774       187.381    
  36  0.995785     -0.422376E-02 -0.204584      0.204584       152.236       152.441    
  37  0.278840      -1.27712      -61.8590       61.8590       161.455       223.314    
  38  0.624255     -0.471196      -22.8230       22.8230       159.760       182.583    
  39  0.368212     -0.999097      -48.3927       48.3927       209.652       258.044    
  40  0.330266      -1.10786      -53.6606       53.6606       163.722       217.382    
  41  0.969155     -0.313304E-01  -1.51753       1.51753       154.957       156.474    
  42  0.686816     -0.375688      -18.1970       18.1970       161.413       179.610    
  43  0.201053      -1.60419      -77.7009       77.7009       164.919       242.620    
  44  0.481166     -0.731544      -35.4333       35.4333       162.825       198.258    
  45  0.992829     -0.719725E-02 -0.348609      0.348609       162.484       162.833    
  46  0.665697     -0.406921      -19.7098       19.7098       163.123       182.833    
  47  0.991934E-02  -4.61327      -223.450       223.450       164.970       388.420    
  48  0.211644      -1.55285      -75.2144       75.2144       170.733       245.948    
  49  0.908243E-01  -2.39883      -116.191       116.191       160.681       276.871    
  50  0.643762     -0.440426      -21.3327       21.3327       163.364       184.697    
  51  0.568794E-01  -2.86682      -138.858       138.858       158.419       297.277    
  52  0.159466      -1.83592      -88.9254       88.9254       161.330       250.255    
  53  0.918851     -0.846310E-01  -4.09922       4.09922       161.458       165.557    
  54  0.865178     -0.144820      -7.01456       7.01456       161.597       168.612    
  55  0.826009     -0.191150      -9.25861       9.25861       164.350       173.609    
  56  0.665816E-02  -5.01191      -242.759       242.759       163.447       406.206    
  57  0.998155     -0.184716E-02 -0.894696E-01  0.894696E-01   164.689       164.778    
  58  0.875957E-01  -2.43502      -117.944       117.944       189.960       307.904    
  59  0.546955     -0.603388      -29.2259       29.2259       166.105       195.331    
  60  0.953933     -0.471617E-01  -2.28434       2.28434       160.635       162.919    
  61  0.131488      -2.02884      -98.2696       98.2696       162.643       260.913    
  62  0.415197     -0.879003      -42.5757       42.5757       162.747       205.323    
  63  0.543800E-02  -5.21434      -252.564       252.564       165.413       417.977    
  64  0.821907     -0.196128      -9.49973       9.49973       160.765       170.265    
  65  0.590302     -0.527122      -25.5319       25.5319       161.212       186.744    
  66  0.380117     -0.967276      -46.8514       46.8514       161.713       208.565    
  67  0.640684     -0.445218      -21.5648       21.5648       161.207       182.772    
  68  0.268290      -1.31569      -63.7270       63.7270       161.872       225.599    
  69  0.625870     -0.468612      -22.6979       22.6979       161.455       184.152    
  70  0.937362     -0.646862E-01  -3.13317       3.13317       158.974       162.107    
  71  0.246375      -1.40090      -67.8545       67.8545       162.805       230.659    
  72  0.163534      -1.81073      -87.7053       87.7053       157.662       245.368    
  73  0.231078      -1.46500      -70.9592       70.9592       161.455       232.414    
  74  0.812335     -0.207842      -10.0671       10.0671       160.674       170.741    
  75  0.955269     -0.457625E-01  -2.21657       2.21657       160.969       163.185    
loop,thermsimp(1:2)       15   71.1965       54.7649    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104        165.07          0.86          1.15         25.35          0.00          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    105        201.31          0.86          1.16         25.28          0.23          0.05         27.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    165.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       15
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       16
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      104     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -28.2746       28.2746       152.236       180.511    
   2  0.850944     -0.161409      -7.81807       7.81807       154.957       162.775    
   3  0.343999      -1.06712      -51.6872       51.6872       155.616       207.303    
   4  0.481777E-02  -5.33544      -258.430       258.430       160.402       418.832    
   5  0.146991      -1.91738      -92.8710       92.8710       158.974       251.845    
   6  0.545677     -0.605728      -29.3392       29.3392       162.484       191.823    
   7  0.761940     -0.271888      -13.1693       13.1693       160.635       173.804    
   8  0.944477     -0.571238E-01  -2.76687       2.76687       160.969       163.736    
   9  0.965249     -0.353688E-01  -1.71314       1.71314       162.571       164.284    
  10  0.634176     -0.455429      -22.0593       22.0593       164.689       186.748    
  11  0.793205     -0.231673      -11.2214       11.2214       161.458       172.679    
  12  0.743605     -0.296246      -14.3491       14.3491       164.566       178.915    
  13  0.983069E-01  -2.31966      -112.356       112.356       162.912       275.268    
  14  0.618437     -0.480560      -23.2766       23.2766       161.597       184.874    
  15  0.429182     -0.845875      -40.9711       40.9711       161.460       202.431    
  16  0.771528     -0.259382      -12.5635       12.5635       160.765       173.329    
  17  0.218286      -1.52195      -73.7176       73.7176       161.034       234.751    
  18  0.556408     -0.586254      -28.3960       28.3960       160.674       189.070    
  19  0.526292     -0.641899      -31.0913       31.0913       161.408       192.499    
  20  0.665532     -0.407169      -19.7218       19.7218       164.350       184.072    
  21  0.261756      -1.34034      -64.9214       64.9214       162.816       227.737    
  22  0.975508     -0.247971E-01  -1.20108       1.20108       162.947       164.148    
  23  0.257613      -1.35630      -65.6941       65.6941       161.286       226.980    
  24  0.981555E-01  -2.32120      -112.431       112.431       161.413       273.843    
  25  0.955054     -0.459870E-01  -2.22744       2.22744       161.455       163.682    
  26  0.887906     -0.118890      -5.75859       5.75859       163.057       168.815    
  27  0.407043     -0.898837      -43.5364       43.5364       163.976       207.513    
  28  0.876870     -0.131396      -6.36436       6.36436       162.455       168.819    
  29  0.957152     -0.437935E-01  -2.12120       2.12120       159.760       161.881    
  30  0.827730     -0.189068      -9.15776       9.15776       161.417       170.575    
  31  0.289027      -1.24124      -60.1210       60.1210       161.207       221.328    
  32  0.125230      -2.07760      -100.631       100.631       163.123       263.755    
  33  0.242443      -1.41699      -68.6338       68.6338       161.455       230.088    
  34  0.654103     -0.424490      -20.5608       20.5608       162.353       182.913    
  35  0.811871     -0.208414      -10.0948       10.0948       163.364       173.459    
  36  0.145201E-01  -4.23222      -204.993       204.993       161.212       366.205    
  37  0.344449      -1.06581      -51.6239       51.6239       167.774       219.398    
  38  0.265532      -1.32602      -64.2276       64.2276       166.105       230.332    
  39  0.811851     -0.208438      -10.0960       10.0960       162.825       172.921    
  40  0.983290E-01  -2.31944      -112.345       112.345       156.791       269.137    
  41  0.347314      -1.05753      -51.2228       51.2228       161.457       212.680    
  42  0.923773     -0.792888E-01  -3.84046       3.84046       162.050       165.891    
  43  0.690375     -0.370520      -17.9467       17.9467       162.747       180.694    
  44  0.227523      -1.48051      -71.7103       71.7103       155.759       227.470    
  45  0.652275     -0.427289      -20.6963       20.6963       161.713       182.410    
  46  0.669640     -0.401014      -19.4237       19.4237       161.455       180.878    
  47  0.288804      -1.24201      -60.1583       60.1583       161.455       221.613    
  48  0.404648     -0.904738      -43.8222       43.8222       161.557       205.379    
  49  0.371042     -0.991440      -48.0217       48.0217       162.535       210.557    
  50  0.308424      -1.17628      -56.9748       56.9748       163.722       220.697    
  51  0.911221     -0.929703E-01  -4.50315       4.50315       161.455       165.958    
  52  0.615436     -0.485425      -23.5122       23.5122       161.872       185.384    
  53  0.780328     -0.248041      -12.0142       12.0142       155.551       167.565    
  54  0.127539      -2.05933      -99.7465       99.7465       162.805       262.551    
  55  0.709081     -0.343786      -16.6518       16.6518       161.455       178.106    
  56  0.974925     -0.253942E-01  -1.23000       1.23000       161.536       162.766    
  57  0.834943     -0.180392      -8.73751       8.73751       156.586       165.324    
  58  0.696274     -0.362013      -17.5346       17.5346       164.919       182.454    
  59  0.623965     -0.471660      -22.8455       22.8455       157.662       180.508    
  60  0.620467     -0.477282      -23.1178       23.1178       170.733       193.851    
  61  0.983840E-01  -2.31888      -112.318       112.318       161.444       273.762    
  62  0.452904     -0.792074      -38.3652       38.3652       166.906       205.272    
  63  0.731276     -0.312965      -15.1589       15.1589       161.330       176.489    
  64  0.136630      -1.99048      -96.4115       96.4115       209.652       306.063    
  65  0.819737     -0.198772      -9.62779       9.62779       162.643       172.271    
  66  0.415452     -0.878387      -42.5459       42.5459       162.228       204.774    
  67  0.931580     -0.708731E-01  -3.43284       3.43284       161.892       165.325    
  68  0.763119     -0.270341      -13.0943       13.0943       160.681       173.775    
  69  0.214680      -1.53861      -74.5246       74.5246       158.419       232.943    
  70  0.548736     -0.600138      -29.0685       29.0685       162.149       191.218    
  71  0.981486     -0.186872E-01 -0.905141      0.905141       189.960       190.866    
  72  0.475333     -0.743740      -36.0241       36.0241       167.843       203.867    
  73  0.484810     -0.723998      -35.0679       35.0679       164.970       200.038    
  74  0.433802     -0.835166      -40.4524       40.4524       163.447       203.899    
  75  0.642789     -0.441939      -21.4059       21.4059       165.069       186.474    
loop,thermsimp(1:2)       16   28.2746       7.81807    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106        191.77          0.86          1.15         25.31          0.06          0.06         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    191.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       16
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       17
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      105     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -14.5981       14.5981       159.760       174.358    
   2  0.527958     -0.638738      -30.9382       30.9382       161.536       192.474    
   3  0.326119      -1.12049      -54.2726       54.2726       154.957       209.229    
   4  0.647061     -0.435314      -21.0850       21.0850       161.455       182.540    
   5  0.419805     -0.867966      -42.0411       42.0411       160.969       203.010    
   6  0.218417      -1.52135      -73.6885       73.6885       162.947       236.636    
   7  0.168864      -1.77866      -86.1520       86.1520       162.571       248.723    
   8  0.761417     -0.272575      -13.2025       13.2025       156.586       169.789    
   9  0.383989     -0.957143      -46.3605       46.3605       161.892       208.253    
  10  0.104774      -2.25595      -109.270       109.270       162.050       271.321    
  11  0.167912      -1.78432      -86.4259       86.4259       161.455       247.880    
  12  0.997930     -0.207190E-02 -0.100355      0.100355       155.551       155.651    
  13  0.493294     -0.706650      -34.2276       34.2276       163.057       197.284    
  14  0.483048     -0.727639      -35.2442       35.2442       162.455       197.699    
  15  0.715967     -0.334121      -16.1836       16.1836       161.417       177.601    
  16  0.595423E-01  -2.82107      -136.642       136.642       162.643       299.285    
  17  0.636569     -0.451662      -21.8769       21.8769       161.458       183.335    
  18  0.482980     -0.727779      -35.2510       35.2510       162.825       198.076    
  19  0.500121     -0.692905      -33.5618       33.5618       160.765       194.327    
  20  0.426980     -0.851018      -41.2202       41.2202       163.364       204.585    
  21  0.546576     -0.604082      -29.2596       29.2596       160.681       189.940    
  22  0.142720      -1.94687      -94.2995       94.2995       160.635       254.934    
  23  0.473622     -0.747346      -36.1987       36.1987       161.330       197.528    
  24  0.892718E-01  -2.41607      -117.026       117.026       161.455       278.480    
  25  0.660659     -0.414518      -20.0777       20.0777       164.566       184.644    
  26  0.328755      -1.11244      -53.8827       53.8827       157.662       211.545    
  27  0.544150     -0.608530      -29.4750       29.4750       152.236       181.711    
  28  0.199068      -1.61411      -78.1817       78.1817       162.747       240.929    
  29  0.685070     -0.378234      -18.3203       18.3203       161.455       179.775    
  30  0.500258     -0.692632      -33.5486       33.5486       161.713       195.262    
  31  0.130607      -2.03556      -98.5953       98.5953       164.919       263.514    
  32  0.982013E-01  -2.32074      -112.408       112.408       162.353       274.761    
  33  0.581494E-01  -2.84474      -137.789       137.789       164.350       302.139    
  34  0.841391     -0.172699      -8.36493       8.36493       161.597       169.962    
  35  0.838937E-01  -2.47820      -120.035       120.035       161.872       281.907    
  36  0.729848     -0.314919      -15.2535       15.2535       165.069       180.322    
  37  0.748292     -0.289962      -14.0447       14.0447       164.689       178.734    
  38  0.229216      -1.47309      -71.3511       71.3511       160.674       232.025    
  39  0.710713     -0.341487      -16.5404       16.5404       189.960       206.501    
  40  0.511506     -0.670395      -32.4715       32.4715       162.149       194.621    
  41  0.106756      -2.23721      -108.362       108.362       162.484       270.846    
  42  0.583466     -0.538770      -26.0961       26.0961       161.408       187.504    
  43  0.993140E-01  -2.30947      -111.862       111.862       170.733       282.595    
  44  0.461224     -0.773871      -37.4835       37.4835       164.970       202.453    
  45  0.574465     -0.554316      -26.8490       26.8490       161.460       188.309    
  46  0.715977     -0.334107      -16.1830       16.1830       167.843       184.026    
  47  0.877584     -0.130583      -6.32496       6.32496       163.447       169.772    
  48  0.492354     -0.708558      -34.3200       34.3200       162.228       196.548    
  49  0.874926     -0.133616      -6.47190       6.47190       166.906       173.378    
  50  0.800367     -0.222685      -10.7860       10.7860       161.557       172.343    
  51  0.507308     -0.678636      -32.8707       32.8707       155.616       188.487    
  52  0.727831     -0.317686      -15.3876       15.3876       163.976       179.364    
  53  0.899777E-01  -2.40819      -116.644       116.644       162.535       279.179    
  54  0.392780     -0.934505      -45.2641       45.2641       161.457       206.721    
  55  0.585301     -0.535629      -25.9439       25.9439       167.774       193.718    
  56  0.522884     -0.648395      -31.4059       31.4059       163.722       195.128    
  57  0.559213     -0.581225      -28.1524       28.1524       161.207       189.359    
  58  0.116989      -2.14568      -103.929       103.929       161.455       265.383    
  59  0.411020     -0.889113      -43.0654       43.0654       161.286       204.352    
  60  0.484202     -0.725253      -35.1286       35.1286       155.759       190.888    
  61  0.771761     -0.259080      -12.5489       12.5489       162.816       175.365    
  62  0.908486     -0.959755E-01  -4.64870       4.64870       161.455       166.103    
  63  0.340814      -1.07642      -52.1378       52.1378       166.105       218.243    
  64  0.519873     -0.654172      -31.6857       31.6857       158.419       190.104    
  65  0.516320     -0.661029      -32.0179       32.0179       161.034       193.051    
  66  0.495555     -0.702076      -34.0060       34.0060       158.974       192.980    
  67  0.291626      -1.23228      -59.6873       59.6873       162.805       222.492    
  68  0.492590     -0.708077      -34.2967       34.2967       163.123       197.420    
  69  0.545663E-01  -2.90834      -140.869       140.869       156.791       297.661    
  70  0.200869      -1.60510      -77.7453       77.7453       161.444       239.190    
  71  0.434763     -0.832954      -40.3453       40.3453       161.413       201.758    
  72  0.241886E-01  -3.72187      -180.274       180.274       162.912       343.186    
  73  0.846355     -0.166816      -8.07998       8.07998       209.652       217.732    
  74  0.598037     -0.514102      -24.9012       24.9012       161.212       186.113    
  75  0.780316     -0.248056      -12.0149       12.0149       191.766       203.781    
loop,thermsimp(1:2)       17   14.5981       30.9382    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107        162.45          0.86          1.15         25.39          0.05          0.06         27.51
Just calling func    0   0         27.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108        208.08          0.86          1.16         25.35          0.37          0.06         27.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       17
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       18
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      107     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -46.5031       46.5031       155.551       202.054    
   2  0.293468      -1.22599      -59.3824       59.3824       161.455       220.837    
   3  0.954036     -0.470539E-01  -2.27912       2.27912       163.447       165.726    
   4  0.452934     -0.792010      -38.3621       38.3621       156.586       194.949    
   5  0.251692      -1.37955      -66.8204       66.8204       161.597       228.418    
   6  0.881081     -0.126605      -6.13231       6.13231       161.557       167.689    
   7  0.855311     -0.156290      -7.57011       7.57011       166.906       174.477    
   8  0.576474     -0.550824      -26.6799       26.6799       159.760       186.440    
   9  0.433835     -0.835090      -40.4487       40.4487       162.816       203.265    
  10  0.298626      -1.20856      -58.5385       58.5385       161.417       219.956    
  11  0.269991      -1.30937      -63.4210       63.4210       164.689       228.110    
  12  0.884826     -0.122364      -5.92687       5.92687       163.976       169.903    
  13  0.664124     -0.409287      -19.8244       19.8244       161.455       181.279    
  14  0.580836     -0.543287      -26.3149       26.3149       165.069       191.383    
  15  0.285501      -1.25351      -60.7154       60.7154       152.236       212.952    
  16  0.690757     -0.369967      -17.9199       17.9199       161.455       179.374    
  17  0.578320     -0.547628      -26.5251       26.5251       161.458       187.983    
  18  0.563230     -0.574067      -27.8057       27.8057       167.843       195.648    
  19  0.681565     -0.383363      -18.5687       18.5687       164.566       183.135    
  20  0.453362     -0.791065      -38.3163       38.3163       161.212       199.528    
  21  0.645457     -0.437797      -21.2053       21.2053       161.408       182.613    
  22  0.982222E-01  -2.32052      -112.398       112.398       161.460       273.857    
  23  0.843064     -0.170712      -8.26869       8.26869       155.616       163.885    
  24  0.505683     -0.681845      -33.0261       33.0261       161.207       194.233    
  25  0.350376      -1.04875      -50.7976       50.7976       160.681       211.478    
  26  0.367167      -1.00194      -48.5303       48.5303       158.419       206.949    
  27  0.268175      -1.31611      -63.7478       63.7478       155.759       219.507    
  28  0.989085E-01  -2.31356      -112.060       112.060       161.536       273.596    
  29  0.349392      -1.05156      -50.9338       50.9338       158.974       209.907    
  30  0.945468     -0.560755E-01  -2.71609       2.71609       161.034       163.750    
  31  0.305400      -1.18613      -57.4519       57.4519       167.774       225.226    
  32  0.942706     -0.590006E-01  -2.85778       2.85778       160.765       163.623    
  33  0.778346     -0.250584      -12.1374       12.1374       162.149       174.287    
  34  0.256449      -1.36083      -65.9135       65.9135       163.722       229.635    
  35  0.338120      -1.08436      -52.5222       52.5222       161.713       214.235    
  36  0.644609     -0.439112      -21.2690       21.2690       162.228       183.497    
  37  0.420837     -0.865509      -41.9221       41.9221       163.057       204.979    
  38  0.793406     -0.231421      -11.2092       11.2092       163.123       174.333    
  39  0.685561     -0.377517      -18.2856       18.2856       161.330       179.615    
  40  0.278740      -1.27748      -61.8763       61.8763       162.455       224.331    
  41  0.414078     -0.881700      -42.7064       42.7064       162.825       205.531    
  42  0.999720     -0.280334E-03 -0.135784E-01  0.135784E-01   161.413       161.426    
  43  0.714259     -0.336509      -16.2993       16.2993       164.970       181.269    
  44  0.713371     -0.337753      -16.3596       16.3596       160.969       177.328    
  45  0.451360     -0.795490      -38.5307       38.5307       191.766       230.297    
  46  0.887280     -0.119595      -5.79275       5.79275       161.286       167.079    
  47  0.234319      -1.45107      -70.2847       70.2847       163.364       233.649    
  48  0.277567E-01  -3.58428      -173.609       173.609       189.960       363.570    
  49  0.582411     -0.540579      -26.1837       26.1837       161.457       187.641    
  50  0.969019     -0.314707E-01  -1.52433       1.52433       161.892       163.416    
  51  0.441889     -0.816696      -39.5578       39.5578       154.957       194.514    
  52  0.150247      -1.89548      -91.8100       91.8100       157.662       249.472    
  53  0.901555E-01  -2.40622      -116.549       116.549       209.652       326.200    
  54  0.274120      -1.29419      -62.6859       62.6859       166.105       228.791    
  55  0.166801      -1.79095      -86.7473       86.7473       162.805       249.552    
  56  0.783053     -0.244555      -11.8454       11.8454       160.674       172.520    
  57  0.541655     -0.613126      -29.6976       29.6976       162.947       192.645    
  58  0.113786      -2.17344      -105.273       105.273       161.444       266.718    
  59  0.794080     -0.230571      -11.1680       11.1680       162.747       173.915    
  60  0.266758      -1.32141      -64.0044       64.0044       161.455       225.459    
  61  0.637690     -0.449903      -21.7917       21.7917       162.571       184.363    
  62  0.912681     -0.913685E-01  -4.42556       4.42556       160.635       165.060    
  63  0.303728      -1.19162      -57.7179       57.7179       164.919       222.637    
  64  0.318303      -1.14475      -55.4476       55.4476       161.455       216.902    
  65  0.255833      -1.36323      -66.0299       66.0299       162.484       228.514    
  66  0.988998     -0.110626E-01 -0.535833      0.535833       162.050       162.586    
  67  0.335641      -1.09171      -52.8786       52.8786       162.353       215.231    
  68  0.575346     -0.552784      -26.7749       26.7749       161.455       188.229    
  69  0.439298E-01  -3.12516      -151.372       151.372       162.535       313.907    
  70  0.179935      -1.71516      -83.0760       83.0760       161.872       244.948    
  71  0.939813     -0.620740E-01  -3.00664       3.00664       170.733       173.740    
  72  0.787717     -0.238616      -11.5577       11.5577       156.791       168.349    
  73  0.622521     -0.473978      -22.9578       22.9578       162.643       185.601    
  74  0.544172     -0.608491      -29.4731       29.4731       164.350       193.823    
  75  0.688511     -0.373223      -18.0776       18.0776       162.449       180.527    
loop,thermsimp(1:2)       18   46.5031       59.3824    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109        162.43          0.86          1.15         25.32          0.09          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110        170.52          0.86          1.15         25.28          0.03          0.05         27.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       18
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       19
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      109     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -50.4373       50.4373       161.413       211.850    
   2  0.270835E-01  -3.60883      -174.799       174.799       162.050       336.849    
   3  0.923755     -0.793087E-01  -3.84143       3.84143       161.892       165.733    
   4  0.535520     -0.624517      -30.2493       30.2493       160.765       191.014    
   5  0.629344     -0.463078      -22.4298       22.4298       161.034       183.463    
   6  0.572648E-01  -2.86007      -138.531       138.531       155.616       294.147    
   7  0.353113E-01  -3.34355      -161.950       161.950       160.635       322.584    
   8  0.580838     -0.543283      -26.3146       26.3146       163.447       189.762    
   9  0.370403     -0.993164      -48.1053       48.1053       161.286       209.392    
  10  0.443010     -0.814162      -39.4350       39.4350       161.557       200.992    
  11  0.188704      -1.66757      -80.7713       80.7713       156.791       237.563    
  12  0.177608      -1.72818      -83.7067       83.7067       163.976       247.683    
  13  0.694998     -0.363847      -17.6234       17.6234       160.674       178.298    
  14  0.160742      -1.82796      -88.5396       88.5396       170.733       259.273    
  15  0.290050      -1.23770      -59.9498       59.9498       162.747       222.697    
  16  0.441138E-01  -3.12098      -151.169       151.169       162.149       313.318    
  17  0.372461     -0.987622      -47.8368       47.8368       163.123       210.960    
  18  0.652779     -0.426517      -20.6589       20.6589       166.906       187.565    
  19  0.998108     -0.189387E-02 -0.917324E-01  0.917324E-01   160.969       161.061    
  20  0.741140     -0.299566      -14.5099       14.5099       161.455       175.964    
  21  0.623042     -0.473141      -22.9173       22.9173       161.330       184.247    
  22  0.504617     -0.683955      -33.1283       33.1283       162.449       195.578    
  23  0.872499     -0.136394      -6.60644       6.60644       164.970       171.576    
  24  0.142620      -1.94757      -94.3333       94.3333       161.455       255.788    
  25  0.580285     -0.544236      -26.3608       26.3608       161.408       187.769    
  26  0.860063E-01  -2.45334      -118.831       118.831       164.566       283.397    
  27  0.401846     -0.911687      -44.1588       44.1588       162.228       206.387    
  28  0.161242      -1.82485      -88.3892       88.3892       162.571       250.960    
  29  0.550753     -0.596469      -28.8908       28.8908       162.643       191.534    
  30  0.815012     -0.204553      -9.90778       9.90778       159.760       169.667    
  31  0.438663     -0.824024      -39.9127       39.9127       161.457       201.370    
  32  0.542283     -0.611968      -29.6415       29.6415       161.458       191.099    
  33  0.943132E-01  -2.36113      -114.365       114.365       161.455       275.819    
  34  0.236587      -1.44144      -69.8181       69.8181       165.069       234.887    
  35  0.283068      -1.26207      -61.1300       61.1300       162.947       224.077    
  36  0.973178     -0.271886E-01  -1.31692       1.31692       164.350       165.667    
  37  0.596723     -0.516302      -25.0078       25.0078       161.207       186.215    
  38  0.595114     -0.519003      -25.1386       25.1386       154.957       180.095    
  39  0.948736     -0.526250E-01  -2.54896       2.54896       156.586       159.135    
  40  0.216072E-01  -3.83473      -185.740       185.740       167.843       353.583    
  41  0.440213     -0.820496      -39.7419       39.7419       161.212       200.954    
  42  0.905197     -0.996023E-01  -4.82438       4.82438       155.551       160.375    
  43  0.158396      -1.84266      -89.2518       89.2518       162.816       252.068    
  44  0.287789      -1.24553      -60.3288       60.3288       163.057       223.385    
  45  0.238244      -1.43446      -69.4801       69.4801       162.825       232.305    
  46  0.363881      -1.01093      -48.9657       48.9657       158.419       207.384    
  47  0.828805     -0.187771      -9.09494       9.09494       158.974       168.069    
  48  0.587140     -0.532492      -25.7920       25.7920       160.681       186.473    
  49  0.141687      -1.95414      -94.6514       94.6514       152.236       246.888    
  50  0.879115     -0.128839      -6.24049       6.24049       161.713       167.954    
  51  0.742190     -0.298150      -14.4413       14.4413       162.353       176.794    
  52  0.218958      -1.51887      -73.5687       73.5687       161.455       235.023    
  53  0.333192      -1.09904      -53.2334       53.2334       155.759       208.993    
  54  0.356774      -1.03065      -49.9211       49.9211       161.417       211.338    
  55  0.739597     -0.301650      -14.6108       14.6108       161.455       176.065    
  56  0.224658E-01  -3.79576      -183.853       183.853       164.919       348.772    
  57  0.338214      -1.08408      -52.5087       52.5087       162.455       214.964    
  58  0.227014      -1.48275      -71.8188       71.8188       167.774       239.593    
  59  0.289792E-01  -3.54118      -171.522       171.522       161.455       332.976    
  60  0.871226     -0.137854      -6.67716       6.67716       164.689       171.366    
  61  0.159622      -1.83495      -88.8783       88.8783       161.597       250.476    
  62  0.581826     -0.541584      -26.2324       26.2324       162.484       188.717    
  63  0.733467E-02  -4.91514      -238.072       238.072       166.105       404.176    
  64  0.646078     -0.436835      -21.1587       21.1587       163.722       184.881    
  65  0.976710     -0.235653E-01  -1.14142       1.14142       191.766       192.907    
  66  0.390127     -0.941284      -45.5924       45.5924       163.364       208.957    
  67  0.394291     -0.930666      -45.0781       45.0781       161.872       206.950    
  68  0.796004     -0.228151      -11.0508       11.0508       157.662       168.713    
  69  0.393786     -0.931948      -45.1402       45.1402       162.805       207.945    
  70  0.672353     -0.396971      -19.2279       19.2279       161.444       180.672    
  71  0.856786E-01  -2.45715      -119.016       119.016       161.536       280.551    
  72  0.769351     -0.262207      -12.7004       12.7004       161.460       174.160    
  73  0.161441E-01  -4.12620      -199.858       199.858       162.535       362.393    
  74  0.126673      -2.06615      -100.077       100.077       209.652       309.728    
  75  0.594452E-01  -2.82270      -136.721       136.721       162.425       299.147    
loop,thermsimp(1:2)       19   50.4373       174.799    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111        161.24          0.86          1.15         25.29          0.04          0.05         27.39
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112        170.93          0.86          1.15         25.28          0.12          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       19
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       20
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      111     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -30.3194       30.3194       156.586       186.906    
   2  0.288348      -1.24359      -60.2349       60.2349       155.551       215.786    
   3  0.910112E-01  -2.39677      -116.091       116.091       160.969       277.060    
   4  0.213812      -1.54266      -74.7207       74.7207       164.350       239.071    
   5  0.575222     -0.552999      -26.7853       26.7853       161.892       188.677    
   6  0.855707     -0.155827      -7.54770       7.54770       161.713       169.261    
   7  0.818692     -0.200047      -9.68957       9.68957       158.974       168.663    
   8  0.309911      -1.17147      -56.7418       56.7418       157.662       214.404    
   9  0.773438     -0.256910      -12.4438       12.4438       159.760       172.203    
  10  0.440502E-01  -3.12243      -151.239       151.239       164.689       315.928    
  11  0.211655      -1.55280      -75.2119       75.2119       164.970       240.182    
  12  0.713577     -0.337465      -16.3456       16.3456       161.460       177.805    
  13  0.927405     -0.753650E-01  -3.65041       3.65041       161.455       165.105    
  14  0.360229      -1.02101      -49.4542       49.4542       161.455       210.909    
  15  0.911872     -0.922553E-01  -4.46851       4.46851       162.353       166.821    
  16  0.800691     -0.222280      -10.7665       10.7665       160.674       171.441    
  17  0.169830      -1.77296      -85.8757       85.8757       154.957       240.832    
  18  0.581014     -0.542980      -26.3000       26.3000       161.444       187.744    
  19  0.869395     -0.139958      -6.77904       6.77904       161.034       167.813    
  20  0.773880     -0.256338      -12.4161       12.4161       161.330       173.746    
  21  0.496085     -0.701008      -33.9543       33.9543       163.722       197.676    
  22  0.530037     -0.634809      -30.7478       30.7478       161.207       191.955    
  23  0.239414      -1.42956      -69.2428       69.2428       160.681       229.924    
  24  0.595728     -0.517972      -25.0887       25.0887       166.906       191.995    
  25  0.170793      -1.76730      -85.6018       85.6018       161.408       247.010    
  26  0.983027     -0.171183E-01 -0.829148      0.829148       162.484       163.313    
  27  0.608714     -0.496407      -24.0441       24.0441       163.447       187.491    
  28  0.518727     -0.656378      -31.7926       31.7926       160.765       192.558    
  29  0.887918     -0.118876      -5.75791       5.75791       161.458       167.216    
  30  0.140498      -1.96256      -95.0594       95.0594       162.643       257.703    
  31  0.256308      -1.36138      -65.9401       65.9401       191.766       257.706    
  32  0.887238     -0.119642      -5.79501       5.79501       162.449       168.244    
  33  0.306042      -1.18403      -57.3503       57.3503       161.212       218.562    
  34  0.993873     -0.614632E-02 -0.297705      0.297705       161.557       161.855    
  35  0.275412E-01  -3.59207      -173.987       173.987       161.457       335.444    
  36  0.698960     -0.358161      -17.3480       17.3480       162.228       179.576    
  37  0.268424      -1.31519      -63.7028       63.7028       161.872       225.575    
  38  0.580935E-01  -2.84570      -137.835       137.835       158.419       296.254    
  39  0.242705      -1.41591      -68.5815       68.5815       162.805       231.386    
  40  0.443517     -0.813019      -39.3797       39.3797       163.364       202.744    
  41  0.904179     -0.100728      -4.87889       4.87889       155.759       160.638    
  42  0.454025     -0.789603      -38.2455       38.2455       161.286       199.532    
  43  0.592994     -0.522572      -25.3115       25.3115       163.123       188.435    
  44  0.401796     -0.911812      -44.1649       44.1649       161.417       205.582    
  45  0.130776      -2.03427      -98.5327       98.5327       161.413       259.945    
  46  0.709753     -0.342839      -16.6059       16.6059       162.455       179.061    
  47  0.388071     -0.946568      -45.8483       45.8483       162.747       208.595    
  48  0.362521      -1.01467      -49.1470       49.1470       163.057       212.204    
  49  0.285379      -1.25394      -60.7362       60.7362       162.947       223.683    
  50  0.286508      -1.24999      -60.5449       60.5449       162.825       223.370    
  51  0.951542     -0.496714E-01  -2.40590       2.40590       165.069       167.474    
  52  0.122933      -2.09612      -101.528       101.528       161.455       262.983    
  53  0.210928      -1.55624      -75.3785       75.3785       156.791       232.170    
  54  0.860093     -0.150715      -7.30009       7.30009       167.774       175.074    
  55  0.997563     -0.243951E-02 -0.118161      0.118161       152.236       152.355    
  56  0.750720     -0.286722      -13.8878       13.8878       163.976       177.864    
  57  0.667101     -0.404814      -19.6077       19.6077       161.597       181.205    
  58  0.508750E-01  -2.97838      -144.262       144.262       162.571       306.833    
  59  0.552474     -0.593349      -28.7397       28.7397       162.816       191.556    
  60  0.514478     -0.664602      -32.1909       32.1909       161.455       193.646    
  61  0.539834     -0.616494      -29.8607       29.8607       170.733       200.594    
  62  0.610888     -0.492841      -23.8714       23.8714       161.455       185.326    
  63  0.328075      -1.11451      -53.9830       53.9830       161.536       215.519    
  64  0.894692     -0.111276      -5.38982       5.38982       164.566       169.956    
  65  0.810283     -0.210372      -10.1896       10.1896       155.616       165.806    
  66  0.691642     -0.368687      -17.8578       17.8578       162.425       180.283    
  67  0.896896     -0.108815      -5.27060       5.27060       209.652       214.922    
  68  0.742287     -0.298020      -14.4350       14.4350       162.149       176.584    
  69  0.974450     -0.258821E-01  -1.25364       1.25364       160.635       161.888    
  70  0.339669      -1.07978      -52.3008       52.3008       161.455       213.755    
  71  0.854515     -0.157221      -7.61523       7.61523       162.050       169.666    
  72  0.153353      -1.87501      -90.8188       90.8188       164.919       255.738    
  73  0.883349     -0.124034      -6.00777       6.00777       167.843       173.850    
  74  0.716255     -0.333718      -16.1641       16.1641       162.535       178.699    
  75  0.645043     -0.438438      -21.2363       21.2363       161.237       182.474    
loop,thermsimp(1:2)       20   30.3194       60.2349    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113        161.91          0.86          1.15         25.32          0.02          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114        162.80          0.86          1.15         25.31          0.18          0.06         27.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       20
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       21
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      113     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -58.7341       58.7341       152.236       210.971    
   2  0.663536     -0.410173      -19.8673       19.8673       155.759       175.627    
   3  0.263982      -1.33188      -64.5112       64.5112       161.557       226.068    
   4  0.792402     -0.232686      -11.2705       11.2705       160.635       171.905    
   5  0.624731     -0.470434      -22.7861       22.7861       162.484       185.270    
   6  0.170977      -1.76622      -85.5495       85.5495       161.455       247.004    
   7  0.362487      -1.01477      -49.1517       49.1517       155.616       204.768    
   8  0.659245     -0.416659      -20.1815       20.1815       162.353       182.534    
   9  0.746481E-03  -7.20014      -348.749       348.749       161.458       510.207    
  10  0.690046     -0.370998      -17.9698       17.9698       165.069       183.038    
  11  0.905636     -0.991173E-01  -4.80088       4.80088       161.034       165.834    
  12  0.317643      -1.14683      -55.5482       55.5482       162.449       217.997    
  13  0.321948      -1.13336      -54.8961       54.8961       158.974       213.870    
  14  0.293974      -1.22426      -59.2990       59.2990       161.713       221.012    
  15  0.679275     -0.386729      -18.7317       18.7317       162.050       180.782    
  16  0.180340      -1.71291      -82.9672       82.9672       164.566       247.533    
  17  0.539600     -0.616927      -29.8817       29.8817       160.674       190.556    
  18  0.260315      -1.34586      -65.1886       65.1886       159.760       224.948    
  19  0.256777      -1.35955      -65.8515       65.8515       161.330       227.181    
  20  0.518851     -0.656138      -31.7810       31.7810       167.843       199.624    
  21  0.485887     -0.721780      -34.9604       34.9604       167.774       202.734    
  22  0.562814     -0.574805      -27.8415       27.8415       162.149       189.991    
  23  0.906369     -0.983082E-01  -4.76169       4.76169       161.460       166.221    
  24  0.332143      -1.10219      -53.3861       53.3861       163.976       217.362    
  25  0.912001E-01  -2.39470      -115.991       115.991       162.535       278.526    
  26  0.302569      -1.19545      -57.9030       57.9030       162.455       220.358    
  27  0.362040      -1.01600      -49.2114       49.2114       162.228       211.439    
  28  0.630870     -0.460656      -22.3125       22.3125       162.425       184.738    
  29  0.685312     -0.377881      -18.3032       18.3032       161.597       179.901    
  30  0.329910      -1.10894      -53.7129       53.7129       161.237       214.950    
  31  0.906630E-01  -2.40061      -116.277       116.277       161.455       277.731    
  32  0.339749      -1.07955      -52.2895       52.2895       156.586       208.876    
  33  0.783039     -0.244573      -11.8462       11.8462       163.447       175.293    
  34  0.322673      -1.13112      -54.7872       54.7872       161.444       216.232    
  35  0.255311      -1.36527      -66.1288       66.1288       163.123       229.252    
  36  0.645921     -0.437078      -21.1705       21.1705       161.892       183.062    
  37  0.240122      -1.42661      -69.0997       69.0997       162.816       231.916    
  38  0.224638      -1.49326      -72.3283       72.3283       161.207       233.535    
  39  0.682659     -0.381760      -18.4911       18.4911       166.906       185.397    
  40  0.533856     -0.627629      -30.4001       30.4001       160.765       191.165    
  41  0.439620E-02  -5.42701      -262.865       262.865       161.455       424.319    
  42  0.409891     -0.891863      -43.1986       43.1986       163.722       206.920    
  43  0.379406     -0.969149      -46.9421       46.9421       161.286       208.228    
  44  0.982111     -0.180514E-01 -0.874345      0.874345       170.733       171.607    
  45  0.243530      -1.41251      -68.4170       68.4170       163.364       231.782    
  46  0.709323     -0.343445      -16.6352       16.6352       161.417       178.052    
  47  0.212014      -1.55110      -75.1298       75.1298       162.747       237.877    
  48  0.530919     -0.633146      -30.6673       30.6673       161.455       192.122    
  49  0.439600     -0.821890      -39.8094       39.8094       163.057       202.866    
  50  0.304385      -1.18946      -57.6132       57.6132       161.455       219.068    
  51  0.850253     -0.162221      -7.85740       7.85740       157.662       165.520    
  52  0.686564     -0.376055      -18.2147       18.2147       209.652       227.866    
  53  0.894299     -0.111715      -5.41106       5.41106       161.536       166.947    
  54  0.724097E-02  -4.92800      -238.694       238.694       155.551       394.245    
  55  0.666382     -0.405892      -19.6599       19.6599       161.212       180.872    
  56  0.216072      -1.53214      -74.2115       74.2115       162.825       237.036    
  57  0.481454     -0.730944      -35.4043       35.4043       162.947       198.351    
  58  0.107413      -2.23107      -108.065       108.065       161.872       269.937    
  59  0.943557     -0.580990E-01  -2.81410       2.81410       160.681       163.495    
  60  0.259811      -1.34780      -65.2826       65.2826       162.805       228.088    
  61  0.526852     -0.640836      -31.0398       31.0398       156.791       187.831    
  62  0.306319E-01  -3.48571      -168.835       168.835       164.350       333.185    
  63  0.180513      -1.71195      -82.9208       82.9208       164.970       247.891    
  64  0.901495     -0.103701      -5.02290       5.02290       154.957       159.979    
  65  0.274530      -1.29269      -62.6135       62.6135       161.408       224.021    
  66  0.773836     -0.256395      -12.4189       12.4189       164.919       177.338    
  67  0.158774      -1.84027      -89.1361       89.1361       162.643       251.779    
  68  0.514226     -0.665093      -32.2147       32.2147       191.766       223.981    
  69  0.312978      -1.16162      -56.2648       56.2648       161.413       217.677    
  70  0.917534     -0.860656E-01  -4.16871       4.16871       161.455       165.623    
  71  0.548182     -0.601148      -29.1174       29.1174       160.969       190.086    
  72  0.131177      -2.03121      -98.3843       98.3843       158.419       256.803    
  73  0.407078     -0.898750      -43.5322       43.5322       162.571       206.103    
  74  0.793948     -0.230737      -11.1761       11.1761       164.689       175.865    
  75  0.817497     -0.201509      -9.76035       9.76035       161.906       171.667    
loop,thermsimp(1:2)       21   58.7341       19.8673    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115        161.96          0.86          1.15         25.31          0.08          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116        162.87          0.86          1.15         25.33          0.38          0.05         27.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       21
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       22
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      115     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -46.4005       46.4005       154.957       201.357    
   2  0.741480     -0.299107      -14.4876       14.4876       160.681       175.168    
   3  0.138898      -1.97401      -95.6141       95.6141       157.662       253.276    
   4  0.751974E-01  -2.58764      -125.336       125.336       161.455       286.790    
   5  0.824485     -0.192996      -9.34803       9.34803       161.034       170.382    
   6  0.982900     -0.172482E-01 -0.835442      0.835442       161.460       162.295    
   7  0.693409     -0.366136      -17.7343       17.7343       161.536       179.270    
   8  0.941572     -0.602045E-01  -2.91609       2.91609       170.733       173.649    
   9  0.812713     -0.207378      -10.0446       10.0446       161.906       171.951    
  10  0.879507     -0.128393      -6.21890       6.21890       160.635       166.853    
  11  0.418958     -0.869984      -42.1388       42.1388       163.447       205.586    
  12  0.314952      -1.15533      -55.9602       55.9602       155.759       211.720    
  13  0.812426     -0.207731      -10.0617       10.0617       164.689       174.751    
  14  0.213788      -1.54277      -74.7261       74.7261       164.919       239.645    
  15  0.521629     -0.650798      -31.5223       31.5223       161.417       192.939    
  16  0.287143      -1.24777      -60.4377       60.4377       161.597       222.035    
  17  0.518340     -0.657125      -31.8287       31.8287       162.050       193.879    
  18  0.712802E-02  -4.94372      -239.456       239.456       161.212       400.668    
  19  0.579935     -0.544838      -26.3900       26.3900       162.353       188.743    
  20  0.508101E-02  -5.28224      -255.853       255.853       165.069       420.921    
  21  0.984466     -0.156557E-01 -0.758307      0.758307       161.892       162.650    
  22  0.394325     -0.930579      -45.0739       45.0739       162.425       207.499    
  23  0.837309     -0.177562      -8.60046       8.60046       162.484       171.085    
  24  0.683519     -0.380501      -18.4301       18.4301       166.906       185.336    
  25  0.892337     -0.113912      -5.51748       5.51748       156.791       162.309    
  26  0.297675      -1.21175      -58.6929       58.6929       162.149       220.842    
  27  0.566054     -0.569065      -27.5635       27.5635       160.969       188.532    
  28  0.325499E-01  -3.42498      -165.894       165.894       160.674       326.568    
  29  0.721169     -0.326882      -15.8330       15.8330       160.765       176.598    
  30  0.370449     -0.993040      -48.0993       48.0993       161.455       209.554    
  31  0.398952     -0.918913      -44.5088       44.5088       162.947       207.456    
  32  0.942469     -0.592518E-01  -2.86994       2.86994       167.843       170.713    
  33  0.379045     -0.970101      -46.9882       46.9882       167.774       214.762    
  34  0.218373      -1.52155      -73.6984       73.6984       163.057       236.755    
  35  0.413944     -0.882024      -42.7220       42.7220       155.616       198.338    
  36  0.452532     -0.792896      -38.4050       38.4050       162.571       200.976    
  37  0.938896     -0.630505E-01  -3.05394       3.05394       163.722       166.776    
  38  0.389299     -0.943409      -45.6953       45.6953       161.286       206.982    
  39  0.943794     -0.578471E-01  -2.80190       2.80190       156.586       159.388    
  40  0.706887     -0.346884      -16.8018       16.8018       152.236       169.038    
  41  0.274873      -1.29145      -62.5530       62.5530       162.228       224.781    
  42  0.343864      -1.06751      -51.7063       51.7063       158.974       210.680    
  43  0.869527E-01  -2.44239      -118.301       118.301       161.237       279.538    
  44  0.859615     -0.151271      -7.32700       7.32700       161.444       168.771    
  45  0.264079      -1.33151      -64.4934       64.4934       163.976       228.470    
  46  0.494871     -0.703457      -34.0729       34.0729       161.413       195.485    
  47  0.112943      -2.18087      -105.634       105.634       162.449       268.083    
  48  0.358273      -1.02646      -49.7180       49.7180       161.455       211.173    
  49  0.215257      -1.53592      -74.3944       74.3944       162.455       236.849    
  50  0.441681     -0.817166      -39.5806       39.5806       161.713       201.294    
  51  0.888276     -0.118473      -5.73841       5.73841       191.766       197.504    
  52  0.780286     -0.248095      -12.0168       12.0168       161.408       173.425    
  53  0.488747     -0.715911      -34.6761       34.6761       159.760       194.436    
  54  0.683795     -0.380097      -18.4105       18.4105       161.557       179.968    
  55  0.466986     -0.761456      -36.8821       36.8821       161.330       198.212    
  56  0.900497     -0.104809      -5.07655       5.07655       209.652       214.728    
  57  0.876058     -0.132323      -6.40923       6.40923       162.805       169.214    
  58  0.413808     -0.882354      -42.7380       42.7380       163.123       205.861    
  59  0.268165      -1.31615      -63.7497       63.7497       163.364       227.114    
  60  0.637465     -0.450255      -21.8087       21.8087       162.816       184.625    
  61  0.476344     -0.741616      -35.9212       35.9212       161.207       197.128    
  62  0.878474     -0.129569      -6.27586       6.27586       162.825       169.101    
  63  0.185973      -1.68216      -81.4775       81.4775       162.747       244.224    
  64  0.802667E-03  -7.12757      -345.234       345.234       161.455       506.688    
  65  0.480758     -0.732390      -35.4743       35.4743       164.566       200.040    
  66  0.789279     -0.236635      -11.4617       11.4617       164.970       176.431    
  67  0.174217      -1.74745      -84.6403       84.6403       162.643       247.283    
  68  0.825561     -0.191692      -9.28485       9.28485       158.419       167.704    
  69  0.532291     -0.630566      -30.5423       30.5423       161.872       192.414    
  70  0.118632E-01  -4.43431      -214.782       214.782       161.455       376.237    
  71  0.214857      -1.53778      -74.4846       74.4846       162.535       237.020    
  72  0.111318      -2.19536      -106.335       106.335       164.350       270.686    
  73  0.823034     -0.194758      -9.43337       9.43337       155.551       164.984    
  74  0.697593     -0.360119      -17.4428       17.4428       161.455       178.897    
  75  0.588207     -0.530676      -25.7040       25.7040       161.959       187.663    
loop,thermsimp(1:2)       22   46.4005       14.4876    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117        162.01          0.86          1.15         25.31          0.19          0.05         27.56
Just calling func    0   0         27.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118        162.93          0.86          1.15         25.27          0.19          0.05         27.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       22
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       23
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      117     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -54.0449       54.0449       156.586       210.631    
   2  0.736029     -0.306486      -14.8451       14.8451       161.460       176.305    
   3  0.608436     -0.496864      -24.0663       24.0663       156.791       180.858    
   4  0.584882     -0.536346      -25.9787       25.9787       161.892       187.871    
   5  0.617514     -0.482053      -23.3489       23.3489       155.551       178.900    
   6  0.376473     -0.976909      -47.3179       47.3179       163.722       211.040    
   7  0.535145     -0.625218      -30.2833       30.2833       160.635       190.918    
   8  0.341783      -1.07358      -52.0003       52.0003       158.419       210.419    
   9  0.804208E-01  -2.52048      -122.083       122.083       161.444       283.527    
  10  0.660499     -0.414760      -20.0895       20.0895       152.236       172.326    
  11  0.739860E-01  -2.60388      -126.122       126.122       162.825       288.947    
  12  0.203251      -1.59331      -77.1743       77.1743       162.805       239.979    
  13  0.637025     -0.450946      -21.8422       21.8422       161.034       182.876    
  14  0.687460     -0.374752      -18.1516       18.1516       167.843       185.994    
  15  0.663581     -0.410105      -19.8640       19.8640       162.484       182.348    
  16  0.579690     -0.545263      -26.4105       26.4105       161.906       188.317    
  17  0.775653     -0.254050      -12.3053       12.3053       161.408       173.713    
  18  0.284124      -1.25834      -60.9496       60.9496       170.733       231.683    
  19  0.317710      -1.14662      -55.5379       55.5379       164.689       220.227    
  20  0.958871     -0.419990E-01  -2.03428       2.03428       160.681       162.715    
  21  0.582932     -0.539685      -26.1404       26.1404       164.970       191.110    
  22  0.905476     -0.992942E-01  -4.80945       4.80945       160.765       165.574    
  23  0.225214      -1.49070      -72.2042       72.2042       161.455       233.659    
  24  0.618260     -0.480846      -23.2904       23.2904       161.536       184.826    
  25  0.608706     -0.496420      -24.0448       24.0448       161.557       185.602    
  26  0.651052     -0.429165      -20.7872       20.7872       162.816       183.603    
  27  0.138439E-02  -6.58249      -318.832       318.832       166.906       485.739    
  28  0.157375      -1.84913      -89.5649       89.5649       161.959       251.524    
  29  0.168063      -1.78342      -86.3822       86.3822       160.969       247.351    
  30  0.924354     -0.786598E-01  -3.81000       3.81000       162.353       166.163    
  31  0.985585     -0.145204E-01 -0.703316      0.703316       161.872       162.575    
  32  0.540844E-01  -2.91721      -141.299       141.299       161.417       302.716    
  33  0.535345     -0.624843      -30.2651       30.2651       162.050       192.316    
  34  0.736351     -0.306048      -14.8239       14.8239       159.760       174.584    
  35  0.283062E-01  -3.56467      -172.660       172.660       161.413       334.072    
  36  0.690743     -0.369987      -17.9208       17.9208       161.207       179.128    
  37  0.260994      -1.34326      -65.0625       65.0625       191.766       256.828    
  38  0.243637      -1.41208      -68.3959       68.3959       161.330       229.726    
  39  0.850226     -0.162253      -7.85896       7.85896       155.616       163.475    
  40  0.589307     -0.528809      -25.6136       25.6136       164.566       190.180    
  41  0.515087     -0.663420      -32.1337       32.1337       162.571       194.705    
  42  0.348855      -1.05310      -51.0084       51.0084       161.713       212.722    
  43  0.791407     -0.233943      -11.3314       11.3314       154.957       166.288    
  44  0.370775     -0.992160      -48.0566       48.0566       163.447       211.504    
  45  0.676021     -0.391531      -18.9644       18.9644       163.123       182.088    
  46  0.125601      -2.07465      -100.488       100.488       161.286       261.775    
  47  0.582904     -0.539733      -26.1427       26.1427       162.947       189.090    
  48  0.818994     -0.199679      -9.67172       9.67172       162.425       172.097    
  49  0.291406      -1.23304      -59.7239       59.7239       161.455       221.178    
  50  0.887104     -0.119794      -5.80237       5.80237       158.974       164.776    
  51  0.666242     -0.406102      -19.6701       19.6701       161.455       181.125    
  52  0.931047     -0.714460E-01  -3.46059       3.46059       155.759       159.220    
  53  0.169651      -1.77401      -85.9266       85.9266       209.652       295.578    
  54  0.228429      -1.47653      -71.5178       71.5178       167.774       239.292    
  55  0.453181     -0.791463      -38.3356       38.3356       162.149       200.485    
  56  0.376518     -0.976789      -47.3121       47.3121       161.597       208.909    
  57  0.551543     -0.595035      -28.8213       28.8213       162.228       191.049    
  58  0.837469     -0.177371      -8.59122       8.59122       163.364       171.956    
  59  0.436148     -0.829773      -40.1912       40.1912       163.976       204.167    
  60  0.245765      -1.40338      -67.9746       67.9746       163.057       231.031    
  61  0.727782     -0.317754      -15.3908       15.3908       162.455       177.846    
  62  0.677441     -0.389433      -18.8627       18.8627       162.535       181.398    
  63  0.835222     -0.180057      -8.72133       8.72133       164.919       173.640    
  64  0.964839     -0.357941E-01  -1.73374       1.73374       162.747       164.481    
  65  0.799790     -0.223406      -10.8210       10.8210       162.643       173.464    
  66  0.274169      -1.29401      -62.6772       62.6772       157.662       220.339    
  67  0.342685      -1.07094      -51.8727       51.8727       162.449       214.322    
  68  0.688325     -0.373494      -18.0907       18.0907       164.350       182.441    
  69  0.683936     -0.379890      -18.4005       18.4005       161.237       179.638    
  70  0.779136     -0.249570      -12.0883       12.0883       161.455       173.543    
  71  0.806749     -0.214742      -10.4013       10.4013       160.674       171.076    
  72  0.645551     -0.437652      -21.1983       21.1983       161.455       182.653    
  73  0.403078     -0.908624      -44.0105       44.0105       161.212       205.222    
  74  0.663948     -0.409551      -19.8372       19.8372       165.069       184.906    
  75  0.410392     -0.890644      -43.1395       43.1395       162.006       205.145    
loop,thermsimp(1:2)       23   54.0449       14.8451    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119        160.41          0.86          1.15         25.27          0.13          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120        161.43          0.86          1.16         25.30          0.05          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       23
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       24
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      119     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -59.7079       59.7079       155.759       215.467    
   2  0.991852     -0.818183E-02 -0.396298      0.396298       161.872       162.268    
   3  0.317368      -1.14769      -55.5901       55.5901       160.681       216.271    
   4  0.737330     -0.304720      -14.7595       14.7595       155.616       170.375    
   5  0.834641     -0.180753      -8.75502       8.75502       162.747       171.502    
   6  0.464401     -0.767007      -37.1511       37.1511       158.974       196.125    
   7  0.592116     -0.524053      -25.3832       25.3832       160.765       186.148    
   8  0.464372     -0.767069      -37.1540       37.1540       162.353       199.507    
   9  0.636055E-01  -2.75505      -133.445       133.445       154.957       288.401    
  10  0.712927     -0.338376      -16.3897       16.3897       160.674       177.064    
  11  0.265597      -1.32578      -64.2158       64.2158       163.364       227.580    
  12  0.152318      -1.88178      -91.1468       91.1468       162.425       253.572    
  13  0.629580     -0.462703      -22.4116       22.4116       152.236       174.648    
  14  0.849464     -0.163150      -7.90237       7.90237       162.643       170.546    
  15  0.487816     -0.717817      -34.7684       34.7684       161.455       196.223    
  16  0.374667     -0.981718      -47.5509       47.5509       164.919       212.470    
  17  0.657383     -0.419488      -20.3185       20.3185       161.408       181.726    
  18  0.846901     -0.166172      -8.04875       8.04875       159.760       167.808    
  19  0.201185      -1.60353      -77.6692       77.6692       161.460       239.129    
  20  0.771980     -0.258797      -12.5352       12.5352       162.455       174.990    
  21  0.507739     -0.677788      -32.8296       32.8296       155.551       188.380    
  22  0.280262      -1.27203      -61.6126       61.6126       161.207       222.820    
  23  0.285359      -1.25401      -60.7396       60.7396       161.237       221.977    
  24  0.246191      -1.40165      -67.8906       67.8906       156.791       224.682    
  25  0.559989E-01  -2.88242      -139.614       139.614       161.455       301.069    
  26  0.330462      -1.10726      -53.6318       53.6318       162.535       216.167    
  27  0.899405     -0.106022      -5.13533       5.13533       163.123       168.259    
  28  0.637003     -0.450981      -21.8439       21.8439       162.484       184.328    
  29  0.699726E-01  -2.65965      -128.824       128.824       164.350       293.174    
  30  0.677191     -0.389802      -18.8806       18.8806       161.455       180.335    
  31  0.649507     -0.431542      -20.9023       20.9023       161.034       181.936    
  32  0.527986     -0.638685      -30.9356       30.9356       162.816       193.751    
  33  0.374870E-01  -3.28376      -159.054       159.054       161.536       320.589    
  34  0.448697     -0.801407      -38.8173       38.8173       165.069       203.886    
  35  0.809612     -0.211200      -10.2298       10.2298       161.557       171.787    
  36  0.836235     -0.178846      -8.66264       8.66264       167.843       176.505    
  37  0.198161      -1.61867      -78.4027       78.4027       161.892       240.295    
  38  0.222702      -1.50192      -72.7476       72.7476       161.906       234.654    
  39  0.888863     -0.117812      -5.70638       5.70638       162.947       168.653    
  40  0.868267     -0.141256      -6.84192       6.84192       164.566       171.408    
  41  0.164066      -1.80749      -87.5481       87.5481       160.635       248.183    
  42  0.163797      -1.80912      -87.6274       87.6274       162.228       249.855    
  43  0.883498     -0.123867      -5.99965       5.99965       164.970       170.969    
  44  0.749983     -0.287705      -13.9354       13.9354       162.050       175.986    
  45  0.666691     -0.405428      -19.6375       19.6375       162.571       182.208    
  46  0.978530     -0.217038E-01  -1.05125       1.05125       162.149       163.201    
  47  0.442024     -0.816391      -39.5430       39.5430       163.976       203.519    
  48  0.228080      -1.47806      -71.5918       71.5918       162.006       233.597    
  49  0.226174      -1.48645      -71.9982       71.9982       161.212       233.210    
  50  0.388394     -0.945736      -45.8080       45.8080       161.597       207.405    
  51  0.257425      -1.35703      -65.7294       65.7294       158.419       224.148    
  52  0.707288     -0.346317      -16.7744       16.7744       156.586       173.361    
  53  0.518387     -0.657032      -31.8243       31.8243       163.722       195.546    
  54  0.628700     -0.464102      -22.4794       22.4794       163.447       185.926    
  55  0.981249     -0.189295E-01 -0.916877      0.916877       161.713       162.630    
  56  0.928260     -0.744431E-01  -3.60575       3.60575       162.449       166.055    
  57  0.752004E-02  -4.89018      -236.863       236.863       164.689       401.552    
  58  0.930611     -0.719140E-01  -3.48325       3.48325       157.662       161.145    
  59  0.552686     -0.592965      -28.7211       28.7211       161.455       190.176    
  60  0.695877     -0.362583      -17.5622       17.5622       161.330       178.892    
  61  0.432533     -0.838096      -40.5943       40.5943       163.057       203.651    
  62  0.127859      -2.05683      -99.6254       99.6254       170.733       270.359    
  63  0.304427      -1.18932      -57.6066       57.6066       161.455       219.061    
  64  0.938376     -0.636043E-01  -3.08076       3.08076       167.774       170.855    
  65  0.958131     -0.427711E-01  -2.07168       2.07168       162.805       164.877    
  66  0.177025      -1.73147      -83.8660       83.8660       160.969       244.835    
  67  0.352264      -1.04338      -50.5373       50.5373       161.959       212.496    
  68  0.915612     -0.881621E-01  -4.27025       4.27025       191.766       196.036    
  69  0.891986     -0.114305      -5.53650       5.53650       161.286       166.823    
  70  0.754865     -0.281216      -13.6211       13.6211       161.444       175.065    
  71  0.616120     -0.484313      -23.4584       23.4584       162.825       186.283    
  72  0.873159     -0.135638      -6.56981       6.56981       209.652       216.221    
  73  0.437761     -0.826082      -40.0124       40.0124       161.417       201.429    
  74  0.627710     -0.465677      -22.5557       22.5557       161.413       183.968    
  75  0.174492      -1.74588      -84.5640       84.5640       160.411       244.975    
loop,thermsimp(1:2)       24   59.7079      0.396298    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121        160.11          0.84          1.14         25.34          0.24          0.06         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122        160.30          0.86          1.15         25.32          0.02          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    160.11       0.7356     -1.574      2.467     -102.6     0.9700    
                      0.1661      1.576     -99.70      3.493     0.3917    
                       1.880     -1.394      1.530      5228.      4512.    
                     -0.6198      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5114.     -91.04    
                     -0.5672     -6.540     -5.093     -8.354      6.005    
                      -14.82     -2.929      1290.      0.000      3546.    

                       3546.      3546.      3833.      3546.      3144.    
                       4054.    -0.3818E-01 0.4487E-01  0.000     0.7345E-01
                     -0.8504E-01-0.4932E-01 0.1097     0.5292E-02-0.2900E-01

                     -0.7263    -0.9779      0.000    -0.5613E-01-0.3024E-01
                       0.000    -0.3941E-01-0.3532E-01-0.1015     0.3381E-02
                     -0.5075E-01 0.1849E-02-0.4817     -1.060      5228.    

                     -0.5950    -0.7135     -2.477     -2.477    -0.1079E-01
                      0.2609      9.112      8.777    -0.1962E+05 -4.000    
                     -0.5376    -0.5941      9.299      8.790    -0.2046E+05

                      -4.000     0.5267E-01-0.8181      8.936      8.941    
                     -0.2046E+05 -7.000    -0.4104    -0.7371      9.137    
                       8.810    -0.2046E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       24
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       25
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      121     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -93.2314       93.2314       157.662       250.894    
   2  0.438196     -0.825090      -39.9644       39.9644       161.872       201.836    
   3  0.637359     -0.450422      -21.8168       21.8168       161.713       183.530    
   4  0.122813      -2.09709      -101.575       101.575       162.149       263.725    
   5  0.926899     -0.759107E-01  -3.67684       3.67684       162.805       166.482    
   6  0.456580     -0.783992      -37.9737       37.9737       162.449       200.423    
   7  0.988763     -0.113008E-01 -0.547372      0.547372       161.286       161.834    
   8  0.499609     -0.693930      -33.6115       33.6115       159.760       193.371    
   9  0.432617     -0.837902      -40.5849       40.5849       163.123       203.708    
  10  0.403570     -0.907406      -43.9515       43.9515       162.947       206.899    
  11  0.435824     -0.830517      -40.2272       40.2272       155.616       195.843    
  12  0.504807     -0.683579      -33.1101       33.1101       162.643       195.753    
  13  0.778763     -0.250048      -12.1114       12.1114       167.774       179.885    
  14  0.429140     -0.845972      -40.9758       40.9758       164.970       205.946    
  15  0.597763     -0.514562      -24.9235       24.9235       164.566       189.490    
  16  0.425932     -0.853476      -41.3393       41.3393       162.747       204.086    
  17  0.825778     -0.191430      -9.27217       9.27217       161.557       170.829    
  18  0.448772     -0.801241      -38.8092       38.8092       156.586       195.396    
  19  0.701335     -0.354770      -17.1838       17.1838       152.236       169.420    
  20  0.425857     -0.853651      -41.3478       41.3478       162.455       203.803    
  21  0.800815     -0.222126      -10.7590       10.7590       161.444       172.203    
  22  0.724239     -0.322634      -15.6272       15.6272       162.050       177.678    
  23  0.312194      -1.16413      -56.3862       56.3862       167.843       224.229    
  24  0.796592     -0.227412      -11.0150       11.0150       160.674       171.689    
  25  0.164146      -1.80700      -87.5246       87.5246       161.330       248.854    
  26  0.503041     -0.687083      -33.2798       33.2798       161.455       194.734    
  27  0.640838     -0.444978      -21.5531       21.5531       161.408       182.961    
  28  0.327752      -1.11550      -54.0307       54.0307       161.034       215.064    
  29  0.720325     -0.328053      -15.8897       15.8897       162.571       178.461    
  30  0.447570     -0.803922      -38.9390       38.9390       161.413       200.352    
  31  0.377461     -0.974289      -47.1910       47.1910       162.484       209.675    
  32  0.951264     -0.499633E-01  -2.42004       2.42004       163.447       165.867    
  33  0.610405     -0.493632      -23.9098       23.9098       160.765       184.675    
  34  0.564697     -0.571466      -27.6797       27.6797       162.825       190.504    
  35  0.993998     -0.601974E-02 -0.291574      0.291574       155.551       155.842    
  36  0.908032     -0.964757E-01  -4.67293       4.67293       161.455       166.128    
  37  0.731210     -0.313055      -15.1633       15.1633       162.816       177.979    
  38  0.818812     -0.199901      -9.68248       9.68248       163.722       173.404    
  39  0.423172     -0.859976      -41.6541       41.6541       191.766       233.420    
  40  0.554414     -0.589843      -28.5699       28.5699       158.974       187.544    
  41  0.244903E-01  -3.70948      -179.674       179.674       161.455       341.128    
  42  0.337898      -1.08501      -52.5540       52.5540       162.353       214.907    
  43  0.634521E-01  -2.75747      -133.562       133.562       161.417       294.979    
  44  0.824978     -0.192398      -9.31907       9.31907       163.976       173.295    
  45  0.954123     -0.469622E-01  -2.27468       2.27468       163.057       165.331    
  46  0.807852     -0.213376      -10.3352       10.3352       165.069       175.404    
  47  0.335430      -1.09234      -52.9090       52.9090       161.597       214.506    
  48  0.266194      -1.32353      -64.1071       64.1071       164.919       229.026    
  49  0.797818     -0.225874      -10.9405       10.9405       161.959       172.899    
  50  0.710601     -0.341644      -16.5480       16.5480       155.759       172.307    
  51  0.469059     -0.757026      -36.6676       36.6676       162.535       199.203    
  52  0.256457E-01  -3.66338      -177.441       177.441       209.652       387.092    
  53  0.620630     -0.477020      -23.1051       23.1051       160.681       183.786    
  54  0.600237     -0.510431      -24.7234       24.7234       161.455       186.178    
  55  0.959467     -0.413769E-01  -2.00415       2.00415       161.237       163.241    
  56  0.541492     -0.613428      -29.7122       29.7122       161.207       190.919    
  57  0.577789     -0.548547      -26.5696       26.5696       158.419       184.988    
  58  0.701570     -0.354435      -17.1675       17.1675       156.791       173.959    
  59  0.274557E-01  -3.59518      -174.138       174.138       163.364       337.502    
  60  0.584746     -0.536578      -25.9899       25.9899       161.212       187.202    
  61  0.131184      -2.03115      -98.3816       98.3816       162.006       260.387    
  62  0.986883     -0.132037E-01 -0.639540      0.639540       161.906       162.546    
  63  0.257198      -1.35791      -65.7721       65.7721       161.460       227.232    
  64  0.831173     -0.184917      -8.95672       8.95672       161.892       170.849    
  65  0.332503      -1.10111      -53.3336       53.3336       160.969       214.302    
  66  0.123451      -2.09191      -101.324       101.324       160.411       261.735    
  67  0.545729     -0.605633      -29.3347       29.3347       160.635       189.969    
  68  0.194995      -1.63478      -79.1829       79.1829       162.228       241.411    
  69  0.811658     -0.208676      -10.1075       10.1075       162.425       172.533    
  70  0.610911     -0.492804      -23.8696       23.8696       170.733       194.603    
  71  0.482852     -0.728044      -35.2638       35.2638       154.957       190.220    
  72  0.487726     -0.718001      -34.7774       34.7774       164.350       199.128    
  73  0.650526     -0.429973      -20.8263       20.8263       161.455       182.281    
  74  0.710826     -0.341328      -16.5327       16.5327       161.536       178.068    
  75  0.840473     -0.173791      -8.41781       8.41781       160.107       168.525    
loop,thermsimp(1:2)       25   93.2314       39.9644    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123        163.58          0.86          1.15         25.31          0.06          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124        171.20          0.85          1.14         25.31          0.02          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    163.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       25
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       26
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      123     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -11.9699       11.9699       155.551       167.521    
   2  0.928800     -0.738619E-01  -3.57760       3.57760       161.286       164.864    
   3  0.727994     -0.317462      -15.3767       15.3767       161.906       177.283    
   4  0.109723E-01  -4.51238      -218.563       218.563       161.237       379.801    
   5  0.160096      -1.83198      -88.7344       88.7344       163.057       251.791    
   6  0.497079     -0.699006      -33.8573       33.8573       163.447       197.304    
   7  0.789473     -0.236389      -11.4498       11.4498       161.455       172.904    
   8  0.763780     -0.269476      -13.0524       13.0524       162.805       175.857    
   9  0.217288      -1.52653      -73.9397       73.9397       160.107       234.047    
  10  0.867642     -0.141976      -6.87683       6.87683       152.236       159.113    
  11  0.740966     -0.299800      -14.5212       14.5212       161.557       176.078    
  12  0.999757     -0.242662E-03 -0.117537E-01  0.117537E-01   161.892       161.904    
  13  0.587476     -0.531920      -25.7643       25.7643       160.674       186.438    
  14  0.703619     -0.351518      -17.0263       17.0263       161.444       178.471    
  15  0.740946     -0.299828      -14.5226       14.5226       155.759       170.282    
  16  0.335927      -1.09086      -52.8373       52.8373       162.425       215.263    
  17  0.736553     -0.305774      -14.8106       14.8106       161.959       176.769    
  18  0.597397     -0.515174      -24.9531       24.9531       163.976       188.929    
  19  0.126601      -2.06672      -100.104       100.104       163.722       263.826    
  20  0.990194     -0.985477E-02 -0.477329      0.477329       156.791       157.269    
  21  0.716453     -0.333443      -16.1508       16.1508       165.069       181.219    
  22  0.279233E-01  -3.57829      -173.320       173.320       162.050       335.370    
  23  0.413932     -0.882054      -42.7235       42.7235       162.816       205.539    
  24  0.109516      -2.21168      -107.126       107.126       161.536       268.661    
  25  0.440749     -0.819279      -39.6829       39.6829       162.571       202.254    
  26  0.412115     -0.886453      -42.9366       42.9366       167.774       210.711    
  27  0.146963      -1.91758      -92.8805       92.8805       161.455       254.335    
  28  0.345919      -1.06155      -51.4176       51.4176       161.408       212.825    
  29  0.343614      -1.06824      -51.7415       51.7415       161.713       213.455    
  30  0.600334E-01  -2.81285      -136.244       136.244       160.681       296.925    
  31  0.751538     -0.285634      -13.8351       13.8351       160.765       174.600    
  32  0.878119     -0.129973      -6.29544       6.29544       158.419       164.714    
  33  0.544046     -0.608721      -29.4843       29.4843       161.455       190.939    
  34  0.931023     -0.714714E-01  -3.46182       3.46182       161.212       164.674    
  35  0.131968      -2.02520      -98.0933       98.0933       158.974       257.067    
  36  0.826694E-01  -2.49291      -120.747       120.747       164.566       285.313    
  37  0.174702E-02  -6.34984      -307.563       307.563       160.635       468.198    
  38  0.233470      -1.45470      -70.4606       70.4606       154.957       225.417    
  39  0.232927      -1.45703      -70.5732       70.5732       162.825       233.398    
  40  0.958279     -0.426163E-01  -2.06418       2.06418       161.207       163.271    
  41  0.820100     -0.198330      -9.60636       9.60636       159.760       169.366    
  42  0.305797      -1.18483      -57.3891       57.3891       170.733       228.122    
  43  0.260853      -1.34380      -65.0887       65.0887       161.455       226.543    
  44  0.960408     -0.403967E-01  -1.95667       1.95667       156.586       158.543    
  45  0.318957      -1.14270      -55.3482       55.3482       162.643       217.991    
  46  0.146887      -1.91809      -92.9055       92.9055       155.616       248.521    
  47  0.787623     -0.238735      -11.5635       11.5635       164.350       175.914    
  48  0.452412     -0.793163      -38.4179       38.4179       162.535       200.953    
  49  0.218339      -1.52170      -73.7058       73.7058       161.413       235.118    
  50  0.177672      -1.72782      -83.6892       83.6892       162.449       246.138    
  51  0.928922     -0.737304E-01  -3.57123       3.57123       161.872       165.443    
  52  0.341447      -1.07456      -52.0479       52.0479       163.123       215.171    
  53  0.462674     -0.770732      -37.3315       37.3315       162.455       199.786    
  54  0.125513      -2.07534      -100.522       100.522       162.747       263.269    
  55  0.354899      -1.03592      -50.1763       50.1763       164.970       215.146    
  56  0.341830      -1.07344      -51.9937       51.9937       162.947       214.941    
  57  0.604983     -0.502555      -24.3419       24.3419       162.484       186.826    
  58  0.223932      -1.49641      -72.4808       72.4808       160.969       233.450    
  59  0.146473      -1.92091      -93.0420       93.0420       161.597       254.639    
  60  0.997224     -0.277992E-02 -0.134649      0.134649       162.353       162.487    
  61  0.430465     -0.842888      -40.8265       40.8265       161.034       201.860    
  62  0.712472     -0.339015      -16.4206       16.4206       167.843       184.263    
  63  0.303370      -1.19280      -57.7750       57.7750       161.460       219.235    
  64  0.676458E-01  -2.69347      -130.462       130.462       164.919       295.381    
  65  0.226497      -1.48502      -71.9292       71.9292       191.766       263.695    
  66  0.590955     -0.526015      -25.4783       25.4783       162.228       187.706    
  67  0.914813     -0.890359E-01  -4.31258       4.31258       161.330       165.642    
  68  0.157483      -1.84844      -89.5316       89.5316       157.662       247.194    
  69  0.117954E-01  -4.44005      -215.060       215.060       162.006       377.066    
  70  0.589104     -0.529153      -25.6302       25.6302       160.411       186.041    
  71  0.826668     -0.190352      -9.21998       9.21998       162.149       171.369    
  72  0.535992     -0.623635      -30.2066       30.2066       161.417       191.624    
  73  0.460564     -0.775304      -37.5529       37.5529       163.364       200.917    
  74  0.142631E-01  -4.25008      -205.858       205.858       161.455       367.313    
  75  0.599401E-01  -2.81441      -136.320       136.320       163.578       299.898    
loop,thermsimp(1:2)       26   11.9699       3.57760    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125        161.79          0.86          1.17         25.36          0.08          0.05         27.52
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       26
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       27
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      124     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -9.70041       9.70041       156.791       166.492    
   2  0.309452      -1.17295      -56.8136       56.8136       156.586       213.400    
   3  0.303638      -1.19192      -57.7323       57.7323       152.236       209.969    
   4  0.754457     -0.281757      -13.6473       13.6473       161.892       175.539    
   5  0.623133     -0.472996      -22.9102       22.9102       162.353       185.263    
   6  0.989422E-01  -2.31322      -112.044       112.044       161.207       273.251    
   7  0.695126     -0.363662      -17.6145       17.6145       161.212       178.826    
   8  0.832210E-01  -2.48626      -120.425       120.425       158.419       278.844    
   9  0.869521     -0.139813      -6.77204       6.77204       161.286       168.058    
  10  0.488136     -0.717160      -34.7366       34.7366       161.872       196.609    
  11  0.579877     -0.544940      -26.3949       26.3949       161.330       187.725    
  12  0.480435     -0.733064      -35.5070       35.5070       155.551       191.058    
  13  0.792626     -0.232404      -11.2568       11.2568       159.760       171.016    
  14  0.870230     -0.138998      -6.73255       6.73255       155.759       162.492    
  15  0.886361     -0.120631      -5.84292       5.84292       162.149       167.992    
  16  0.358181      -1.02672      -49.7305       49.7305       161.455       211.185    
  17  0.560125     -0.579594      -28.0735       28.0735       160.765       188.838    
  18  0.546151     -0.604859      -29.2972       29.2972       162.805       192.102    
  19  0.732086     -0.311858      -15.1053       15.1053       164.350       179.455    
  20  0.590102     -0.527460      -25.5482       25.5482       161.557       187.105    
  21  0.867355     -0.142307      -6.89285       6.89285       161.959       168.852    
  22  0.749758     -0.288005      -13.9499       13.9499       161.906       175.856    
  23  0.721970     -0.325772      -15.7792       15.7792       161.444       177.224    
  24  0.596865     -0.516065      -24.9963       24.9963       165.069       190.065    
  25  0.878161     -0.129925      -6.29309       6.29309       167.843       174.136    
  26  0.558752E-01  -2.88463      -139.721       139.721       160.411       300.132    
  27  0.555543     -0.587810      -28.4714       28.4714       160.674       189.146    
  28  0.597562     -0.514897      -24.9397       24.9397       162.484       187.424    
  29  0.995329     -0.468202E-02 -0.226780      0.226780       162.228       162.455    
  30  0.206787      -1.57606      -76.3389       76.3389       163.976       240.315    
  31  0.645457     -0.437797      -21.2053       21.2053       161.455       182.660    
  32  0.871352     -0.137710      -6.67015       6.67015       161.417       168.087    
  33  0.701360     -0.354733      -17.1820       17.1820       163.447       180.629    
  34  0.936151     -0.659784E-01  -3.19576       3.19576       162.455       165.651    
  35  0.590091     -0.527478      -25.5491       25.5491       163.364       188.914    
  36  0.750433     -0.287105      -13.9063       13.9063       162.535       176.441    
  37  0.326255      -1.12007      -54.2524       54.2524       161.034       215.286    
  38  0.873133     -0.135668      -6.57126       6.57126       162.571       169.142    
  39  0.621627     -0.475415      -23.0274       23.0274       162.816       185.843    
  40  0.153041      -1.87705      -90.9175       90.9175       167.774       258.691    
  41  0.196696      -1.62610      -78.7622       78.7622       161.408       240.170    
  42  0.365028      -1.00778      -48.8133       48.8133       161.713       210.527    
  43  0.398429     -0.920226      -44.5724       44.5724       162.947       207.519    
  44  0.549691     -0.598399      -28.9843       28.9843       164.970       193.954    
  45  0.994179     -0.583795E-02 -0.282769      0.282769       163.123       163.406    
  46  0.147335E-01  -4.21763      -204.287       204.287       162.425       366.712    
  47  0.224737      -1.49282      -72.3070       72.3070       162.643       234.950    
  48  0.182172      -1.70281      -82.4778       82.4778       161.460       243.937    
  49  0.230919      -1.46569      -70.9927       70.9927       154.957       225.949    
  50  0.491818     -0.709647      -34.3727       34.3727       161.455       195.827    
  51  0.370754     -0.992217      -48.0594       48.0594       170.733       218.792    
  52  0.785622     -0.241279      -11.6867       11.6867       162.825       174.511    
  53  0.476284     -0.741742      -35.9273       35.9273       160.969       196.896    
  54  0.958799     -0.420736E-01  -2.03789       2.03789       160.107       162.145    
  55  0.305133      -1.18701      -57.4943       57.4943       161.413       218.907    
  56  0.270329      -1.30812      -63.3604       63.3604       162.449       225.810    
  57  0.130426      -2.03695      -98.6624       98.6624       157.662       256.325    
  58  0.222171      -1.50431      -72.8632       72.8632       155.616       228.479    
  59  0.233872      -1.45298      -70.3772       70.3772       163.057       233.434    
  60  0.916355E-02  -4.69252      -227.289       227.289       161.455       388.743    
  61  0.400634     -0.914708      -44.3051       44.3051       161.597       205.902    
  62  0.354647E-01  -3.33922      -161.740       161.740       158.974       320.713    
  63  0.453450     -0.790870      -38.3069       38.3069       162.747       201.054    
  64  0.411527     -0.887880      -43.0057       43.0057       191.766       234.772    
  65  0.607753     -0.497987      -24.1207       24.1207       163.722       187.842    
  66  0.157481      -1.84845      -89.5322       89.5322       161.536       251.068    
  67  0.260711E-01  -3.64693      -176.644       176.644       164.566       341.210    
  68  0.183987      -1.69289      -81.9975       81.9975       164.919       246.917    
  69  0.704951     -0.349627      -16.9347       16.9347       160.681       177.616    
  70  0.337767      -1.08540      -52.5727       52.5727       163.578       216.151    
  71  0.718219     -0.330981      -16.0315       16.0315       162.050       178.082    
  72  0.102024      -2.28254      -110.558       110.558       161.455       272.013    
  73  0.357156      -1.02958      -49.8692       49.8692       162.006       211.875    
  74  0.290676      -1.23555      -59.8454       59.8454       161.237       221.083    
  75  0.384145E-01  -3.25932      -157.870       157.870       161.786       319.656    
loop,thermsimp(1:2)       27   9.70041       56.8136    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126        160.95          0.86          1.15         25.28          0.04          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    127        160.57          0.86          1.15         25.28          0.13          0.04         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       27
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       28
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      126     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -10.2869       10.2869       160.107       170.394    
   2  0.162004E-01  -4.12272      -199.690       199.690       162.228       361.917    
   3  0.446841E-01  -3.10814      -150.547       150.547       155.759       306.306    
   4  0.757954     -0.277132      -13.4233       13.4233       163.123       176.547    
   5  0.525315     -0.643757      -31.1813       31.1813       162.455       193.636    
   6  0.229940      -1.46994      -71.1985       71.1985       156.791       227.990    
   7  0.273310E-01  -3.59973      -174.358       174.358       162.149       336.507    
   8  0.228047      -1.47820      -71.5988       71.5988       161.286       232.885    
   9  0.963384E-01  -2.33989      -113.336       113.336       161.417       274.753    
  10  0.495504     -0.702179      -34.0110       34.0110       161.959       195.970    
  11  0.930436     -0.721018E-01  -3.49235       3.49235       162.571       166.063    
  12  0.138744      -1.97513      -95.6680       95.6680       159.760       255.428    
  13  0.676381     -0.390999      -18.9386       18.9386       167.843       186.781    
  14  0.763696     -0.269586      -13.0578       13.0578       162.825       175.882    
  15  0.282468      -1.26419      -61.2328       61.2328       161.892       223.125    
  16  0.359172      -1.02395      -49.5966       49.5966       161.906       211.503    
  17  0.392258     -0.935834      -45.3284       45.3284       162.535       207.863    
  18  0.524686     -0.644955      -31.2393       31.2393       161.444       192.684    
  19  0.850465     -0.161972      -7.84534       7.84534       160.681       168.526    
  20  0.227056      -1.48256      -71.8097       71.8097       162.050       233.860    
  21  0.942039     -0.597082E-01  -2.89205       2.89205       161.212       164.104    
  22  0.807336     -0.214016      -10.3662       10.3662       164.350       174.716    
  23  0.345853      -1.06174      -51.4269       51.4269       163.447       214.874    
  24  0.762940     -0.270575      -13.1057       13.1057       161.455       174.560    
  25  0.589959     -0.527702      -25.5600       25.5600       162.353       187.912    
  26  0.563539     -0.573518      -27.7791       27.7791       162.816       190.595    
  27  0.812044     -0.208201      -10.0845       10.0845       161.557       171.642    
  28  0.735850     -0.306729      -14.8569       14.8569       162.484       177.341    
  29  0.396292     -0.925605      -44.8329       44.8329       161.330       206.163    
  30  0.623568     -0.472298      -22.8764       22.8764       163.722       186.598    
  31  0.925937     -0.769486E-01  -3.72711       3.72711       160.765       164.492    
  32  0.880074     -0.127749      -6.18772       6.18772       163.364       169.552    
  33  0.379958     -0.967693      -46.8716       46.8716       160.674       207.546    
  34  0.842940E-01  -2.47344      -119.805       119.805       165.069       284.873    
  35  0.199092      -1.61399      -78.1757       78.1757       155.551       233.726    
  36  0.625899     -0.468566      -22.6956       22.6956       162.805       185.501    
  37  0.888337     -0.118405      -5.73509       5.73509       164.970       170.705    
  38  0.959633     -0.412048E-01  -1.99581       1.99581       161.455       163.450    
  39  0.289813      -1.23852      -59.9893       59.9893       161.872       221.861    
  40  0.889440     -0.117163      -5.67496       5.67496       160.969       166.644    
  41  0.797260     -0.226575      -10.9744       10.9744       162.747       173.721    
  42  0.451097     -0.796073      -38.5589       38.5589       161.597       200.156    
  43  0.609578     -0.494989      -23.9755       23.9755       162.947       186.923    
  44  0.910850     -0.933770E-01  -4.52284       4.52284       152.236       156.759    
  45  0.448191     -0.802536      -38.8719       38.8719       161.713       200.585    
  46  0.831229     -0.184850      -8.95344       8.95344       161.455       170.408    
  47  0.246260      -1.40137      -67.8772       67.8772       162.006       229.883    
  48  0.280480      -1.27125      -61.5749       61.5749       156.586       218.161    
  49  0.161513      -1.82317      -88.3077       88.3077       161.034       249.341    
  50  0.337020      -1.08761      -52.6801       52.6801       163.578       216.258    
  51  0.160136      -1.83173      -88.7223       88.7223       170.733       259.455    
  52  0.268039      -1.31662      -63.7725       63.7725       161.413       225.185    
  53  0.907744     -0.967928E-01  -4.68829       4.68829       161.237       165.926    
  54  0.237998      -1.43549      -69.5301       69.5301       162.449       231.979    
  55  0.932063     -0.703547E-01  -3.40773       3.40773       154.957       158.364    
  56  0.304233      -1.18996      -57.6375       57.6375       155.616       213.253    
  57  0.471578     -0.751672      -36.4083       36.4083       163.057       199.465    
  58  0.985625     -0.144798E-01 -0.701349      0.701349       191.766       192.467    
  59  0.576194     -0.551311      -26.7035       26.7035       162.643       189.347    
  60  0.561463     -0.577209      -27.9579       27.9579       161.408       189.366    
  61  0.762775     -0.270792      -13.1162       13.1162       163.976       177.092    
  62  0.728042     -0.317397      -15.3735       15.3735       161.460       176.833    
  63  0.246589      -1.40003      -67.8125       67.8125       164.919       232.732    
  64  0.128678      -2.05044      -99.3159       99.3159       161.536       260.852    
  65  0.646131     -0.436753      -21.1547       21.1547       157.662       178.817    
  66  0.520849E-01  -2.95488      -143.124       143.124       167.774       310.898    
  67  0.103665      -2.26659      -109.785       109.785       161.455       271.240    
  68  0.209683      -1.56216      -75.6653       75.6653       161.207       236.872    
  69  0.401865     -0.911640      -44.1565       44.1565       158.419       202.575    
  70  0.111589      -2.19294      -106.218       106.218       160.411       266.629    
  71  0.683688     -0.380253      -18.4181       18.4181       161.786       180.204    
  72  0.912223     -0.918706E-01  -4.44988       4.44988       158.974       163.424    
  73  0.651148E-01  -2.73160      -132.309       132.309       164.566       296.875    
  74  0.647173E-01  -2.73773      -132.606       132.606       162.425       295.031    
  75  0.356220      -1.03221      -49.9963       49.9963       160.568       210.564    
loop,thermsimp(1:2)       28   10.2869       199.690    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128        158.31          0.84          1.14         25.35          0.04          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    129        161.80          0.86          1.15         25.33          0.42          0.05         27.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       28
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       29
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      128     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -104.388       104.388       152.236       256.624    
   2  0.685048     -0.378267      -18.3219       18.3219       154.957       173.278    
   3  0.739526     -0.301746      -14.6155       14.6155       158.974       173.589    
   4  0.161448      -1.82357      -88.3272       88.3272       161.455       249.782    
   5  0.819608     -0.198929      -9.63541       9.63541       161.212       170.847    
   6  0.750679     -0.286777      -13.8904       13.8904       160.765       174.655    
   7  0.797409     -0.226388      -10.9654       10.9654       161.237       172.203    
   8  0.193123      -1.64443      -79.6502       79.6502       162.571       242.221    
   9  0.189346E-01  -3.96676      -192.136       192.136       160.969       353.104    
  10  0.715264     -0.335103      -16.2312       16.2312       160.681       176.912    
  11  0.384856     -0.954886      -46.2512       46.2512       163.364       209.616    
  12  0.268023      -1.31668      -63.7754       63.7754       160.107       223.883    
  13  0.777164     -0.252104      -12.2110       12.2110       161.455       173.666    
  14  0.707495E-01  -2.64861      -128.289       128.289       164.970       293.259    
  15  0.233610      -1.45410      -70.4314       70.4314       161.557       231.989    
  16  0.193057      -1.64477      -79.6668       79.6668       162.747       242.414    
  17  0.486879     -0.719739      -34.8616       34.8616       161.455       196.316    
  18  0.735370     -0.307381      -14.8884       14.8884       164.350       179.239    
  19  0.147509      -1.91387      -92.7008       92.7008       162.825       255.525    
  20  0.739111     -0.302308      -14.6427       14.6427       163.123       177.766    
  21  0.886241     -0.120766      -5.84946       5.84946       161.460       167.309    
  22  0.158672      -1.84092      -89.1673       89.1673       163.976       253.143    
  23  0.143658      -1.94032      -93.9822       93.9822       162.484       256.466    
  24  0.637431E-02  -5.05548      -244.869       244.869       157.662       402.531    
  25  0.753372     -0.283196      -13.7170       13.7170       161.786       175.503    
  26  0.555831     -0.587292      -28.4463       28.4463       162.805       191.251    
  27  0.280013      -1.27292      -61.6556       61.6556       163.722       225.377    
  28  0.811304     -0.209112      -10.1287       10.1287       167.843       177.971    
  29  0.972296E-02  -4.63327      -224.419       224.419       162.947       387.366    
  30  0.713459     -0.337631      -16.3536       16.3536       162.353       178.706    
  31  0.194621      -1.63670      -79.2758       79.2758       162.643       241.919    
  32  0.492587     -0.708083      -34.2970       34.2970       161.408       195.705    
  33  0.759094E-01  -2.57821      -124.879       124.879       162.816       287.695    
  34  0.494544     -0.704119      -34.1050       34.1050       191.766       225.871    
  35  0.297023      -1.21395      -58.7992       58.7992       161.444       220.243    
  36  0.429878E-01  -3.14684      -152.421       152.421       162.455       314.876    
  37  0.490931     -0.711452      -34.4601       34.4601       161.959       196.419    
  38  0.534417     -0.626578      -30.3492       30.3492       163.057       193.406    
  39  0.254967      -1.36662      -66.1941       66.1941       161.597       227.791    
  40  0.995945     -0.406335E-02 -0.196814      0.196814       161.713       161.910    
  41  0.428814E-01  -3.14932      -152.541       152.541       158.419       310.960    
  42  0.332915      -1.09987      -53.2736       53.2736       161.330       214.603    
  43  0.657266     -0.419666      -20.3271       20.3271       160.674       181.001    
  44  0.301071      -1.20041      -58.1434       58.1434       162.535       220.678    
  45  0.998178     -0.182349E-02 -0.883234E-01  0.883234E-01   160.568       160.656    
  46  0.533372     -0.628536      -30.4440       30.4440       161.906       192.350    
  47  0.244746      -1.40753      -68.1758       68.1758       155.616       223.792    
  48  0.345321      -1.06328      -51.5015       51.5015       163.447       214.948    
  49  0.339541      -1.08016      -52.3191       52.3191       163.578       215.897    
  50  0.456434     -0.784311      -37.9892       37.9892       156.586       194.576    
  51  0.510210     -0.672933      -32.5944       32.5944       161.872       194.466    
  52  0.678441     -0.387958      -18.7913       18.7913       161.892       180.683    
  53  0.802552     -0.219958      -10.6540       10.6540       161.413       172.067    
  54  0.542503     -0.611562      -29.6219       29.6219       156.791       186.413    
  55  0.887113     -0.119783      -5.80186       5.80186       162.006       167.808    
  56  0.631934     -0.458971      -22.2309       22.2309       162.449       184.680    
  57  0.776760     -0.252624      -12.2362       12.2362       164.919       177.155    
  58  0.764990     -0.267893      -12.9758       12.9758       161.286       174.262    
  59  0.329328      -1.11070      -53.7983       53.7983       155.551       209.349    
  60  0.304425      -1.18933      -57.6068       57.6068       162.050       219.657    
  61  0.992863     -0.716266E-02 -0.346933      0.346933       161.207       161.554    
  62  0.545111     -0.606767      -29.3896       29.3896       161.034       190.423    
  63  0.215175      -1.53630      -74.4129       74.4129       159.760       234.173    
  64  0.486479     -0.720562      -34.9014       34.9014       170.733       205.635    
  65  0.323711      -1.12790      -54.6316       54.6316       161.536       216.167    
  66  0.339000      -1.08176      -52.3964       52.3964       160.411       212.807    
  67  0.494013     -0.705193      -34.1570       34.1570       161.455       195.612    
  68  0.496084     -0.701011      -33.9544       33.9544       161.417       195.371    
  69  0.736144     -0.306329      -14.8375       14.8375       165.069       179.906    
  70  0.106083E-01  -4.54612      -220.198       220.198       162.425       382.623    
  71  0.106417      -2.24039      -108.516       108.516       164.566       273.082    
  72  0.378322     -0.972010      -47.0807       47.0807       155.759       202.840    
  73  0.180300      -1.71314      -82.9781       82.9781       167.774       250.752    
  74  0.761678     -0.272232      -13.1859       13.1859       162.149       175.335    
  75  0.926997     -0.758048E-01  -3.67171       3.67171       158.314       161.986    
loop,thermsimp(1:2)       29   104.388       18.3219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130        163.55          0.86          1.15         25.32          0.12          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131        164.58          0.85          1.15         25.29          0.04          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    163.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       29
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       30
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      130     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -156.350       156.350       160.568       316.918    
   2  0.712690     -0.338709      -16.4058       16.4058       161.207       177.613    
   3  0.284498      -1.25703      -60.8860       60.8860       161.713       222.599    
   4  0.132414      -2.02182      -97.9297       97.9297       158.314       256.244    
   5  0.868558     -0.140920      -6.82567       6.82567       161.460       168.285    
   6  0.695240     -0.363498      -17.6065       17.6065       162.006       179.612    
   7  0.777362     -0.251849      -12.1987       12.1987       161.212       173.410    
   8  0.302494      -1.19569      -57.9151       57.9151       161.413       219.328    
   9  0.710188     -0.342225      -16.5762       16.5762       161.237       177.813    
  10  0.884530     -0.122698      -5.94306       5.94306       154.957       160.900    
  11  0.146421E-01  -4.22386      -204.588       204.588       158.974       363.562    
  12  0.834801     -0.180562      -8.74575       8.74575       161.455       170.200    
  13  0.414011     -0.881863      -42.7143       42.7143       161.286       204.001    
  14  0.655777     -0.421935      -20.4370       20.4370       160.765       181.202    
  15  0.530106     -0.634679      -30.7416       30.7416       162.149       192.891    
  16  0.325231      -1.12322      -54.4047       54.4047       161.786       216.191    
  17  0.293550      -1.22571      -59.3689       59.3689       160.681       220.050    
  18  0.194161      -1.63907      -79.3906       79.3906       164.919       244.310    
  19  0.589029E-01  -2.83186      -137.165       137.165       163.123       300.289    
  20  0.385142     -0.954143      -46.2152       46.2152       167.843       214.058    
  21  0.287461      -1.24667      -60.3841       60.3841       162.353       222.737    
  22  0.528518     -0.637678      -30.8868       30.8868       164.350       195.237    
  23  0.517042     -0.659630      -31.9501       31.9501       165.069       197.019    
  24  0.453375     -0.791035      -38.3148       38.3148       161.892       200.207    
  25  0.695596     -0.362986      -17.5817       17.5817       160.674       178.256    
  26  0.645178     -0.438228      -21.2262       21.2262       162.449       183.675    
  27  0.696076     -0.362297      -17.5484       17.5484       156.791       174.340    
  28  0.483522     -0.726659      -35.1967       35.1967       161.034       196.230    
  29  0.155396E-01  -4.16436      -201.707       201.707       162.805       364.512    
  30  0.883154     -0.124256      -6.01851       6.01851       161.906       167.925    
  31  0.525944     -0.642561      -31.1233       31.1233       163.057       194.180    
  32  0.746799     -0.291959      -14.1414       14.1414       161.872       176.013    
  33  0.458658     -0.779449      -37.7537       37.7537       156.586       194.340    
  34  0.614284     -0.487298      -23.6030       23.6030       161.417       185.020    
  35  0.581412     -0.542295      -26.2668       26.2668       161.455       187.721    
  36  0.820935     -0.197312      -9.55707       9.55707       161.408       170.965    
  37  0.852366     -0.159739      -7.73718       7.73718       161.455       169.192    
  38  0.527059     -0.640443      -31.0207       31.0207       161.959       192.980    
  39  0.376404     -0.977092      -47.3268       47.3268       155.759       203.086    
  40  0.729525E-01  -2.61795      -126.804       126.804       170.733       297.537    
  41  0.342258      -1.07219      -51.9330       51.9330       155.551       207.484    
  42  0.955065     -0.459761E-01  -2.22691       2.22691       163.364       165.591    
  43  0.508654E-01  -2.97857      -144.271       144.271       160.411       304.682    
  44  0.471716     -0.751379      -36.3941       36.3941       161.330       197.724    
  45  0.137118      -1.98691      -96.2389       96.2389       163.447       259.686    
  46  0.844826     -0.168625      -8.16756       8.16756       163.578       171.745    
  47  0.841708     -0.172322      -8.34664       8.34664       161.536       169.882    
  48  0.360396E-01  -3.32314      -160.961       160.961       162.050       323.011    
  49  0.953282     -0.478444E-01  -2.31741       2.31741       161.444       163.762    
  50  0.503408     -0.686355      -33.2445       33.2445       162.535       195.780    
  51  0.593854     -0.521122      -25.2413       25.2413       155.616       180.857    
  52  0.524910     -0.644528      -31.2186       31.2186       160.107       191.326    
  53  0.730244     -0.314377      -15.2273       15.2273       163.722       178.949    
  54  0.828919     -0.187632      -9.08823       9.08823       191.766       200.854    
  55  0.151629      -1.88632      -91.3663       91.3663       161.597       252.964    
  56  0.431672     -0.840089      -40.6908       40.6908       161.557       202.248    
  57  0.449333     -0.799990      -38.7486       38.7486       159.760       198.508    
  58  0.116759      -2.14764      -104.024       104.024       162.643       266.667    
  59  0.578588     -0.547165      -26.5027       26.5027       162.571       189.074    
  60  0.119282      -2.12627      -102.989       102.989       162.747       265.736    
  61  0.643272E-01  -2.74377      -132.898       132.898       161.455       294.353    
  62  0.906211     -0.984834E-01  -4.77018       4.77018       167.774       172.544    
  63  0.811859     -0.208429      -10.0955       10.0955       163.976       174.072    
  64  0.119821      -2.12175      -102.770       102.770       162.825       265.595    
  65  0.827508     -0.189336      -9.17075       9.17075       162.484       171.655    
  66  0.597713     -0.514645      -24.9275       24.9275       152.236       177.164    
  67  0.408976     -0.894099      -43.3069       43.3069       164.566       207.873    
  68  0.889044     -0.117608      -5.69651       5.69651       162.816       168.512    
  69  0.623536     -0.472349      -22.8789       22.8789       164.970       187.849    
  70  0.477389     -0.739423      -35.8150       35.8150       158.419       194.234    
  71  0.313804      -1.15899      -56.1372       56.1372       162.455       218.592    
  72  0.814527     -0.205148      -9.93662       9.93662       160.969       170.905    
  73  0.133792      -2.01147      -97.4284       97.4284       162.425       259.854    
  74  0.533947     -0.627458      -30.3918       30.3918       162.947       193.339    
  75  0.625219     -0.469653      -22.7483       22.7483       163.549       186.297    
loop,thermsimp(1:2)       30   156.350       16.4058    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132        162.40          0.86          1.15         25.31          0.02          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133        165.66          0.87          1.15         25.29          0.10          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       30
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       31
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      132     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -67.4228       67.4228       154.957       222.379    
   2  0.247647      -1.39575      -67.6051       67.6051       161.444       229.049    
   3  0.396263     -0.925678      -44.8365       44.8365       163.364       208.201    
   4  0.386461     -0.950723      -46.0496       46.0496       161.906       207.956    
   5  0.729285     -0.315691      -15.2909       15.2909       161.460       176.751    
   6  0.665866     -0.406667      -19.6975       19.6975       162.816       182.513    
   7  0.385122     -0.954194      -46.2177       46.2177       161.455       207.672    
   8  0.625701     -0.468883      -22.7110       22.7110       161.536       184.247    
   9  0.392668     -0.934792      -45.2779       45.2779       161.455       206.733    
  10  0.698356     -0.359026      -17.3899       17.3899       160.969       178.359    
  11  0.537534E-01  -2.92335      -141.596       141.596       161.408       303.004    
  12  0.289307      -1.24027      -60.0741       60.0741       162.484       222.558    
  13  0.138460E-01  -4.27976      -207.296       207.296       163.578       370.874    
  14  0.824110     -0.193451      -9.37005       9.37005       167.774       177.144    
  15  0.560983     -0.578065      -27.9994       27.9994       161.212       189.211    
  16  0.116087E-01  -4.45600      -215.833       215.833       163.976       379.809    
  17  0.218033      -1.52311      -73.7738       73.7738       156.791       230.565    
  18  0.893705E-01  -2.41497      -116.972       116.972       161.872       278.844    
  19  0.304886      -1.18782      -57.5335       57.5335       152.236       209.770    
  20  0.179833      -1.71573      -83.1037       83.1037       161.207       244.311    
  21  0.867378     -0.142281      -6.89156       6.89156       161.237       168.129    
  22  0.243287      -1.41351      -68.4654       68.4654       160.674       229.140    
  23  0.772489     -0.258138      -12.5032       12.5032       163.722       176.225    
  24  0.321011      -1.13628      -55.0373       55.0373       162.006       217.043    
  25  0.499417     -0.694314      -33.6300       33.6300       155.616       189.246    
  26  0.396806     -0.924307      -44.7701       44.7701       160.765       205.535    
  27  0.580203E-01  -2.84696      -137.897       137.897       162.449       300.346    
  28  0.854206     -0.157583      -7.63274       7.63274       161.417       169.050    
  29  0.914649     -0.892145E-01  -4.32123       4.32123       163.549       167.870    
  30  0.167601      -1.78617      -86.5156       86.5156       161.455       247.970    
  31  0.350137      -1.04943      -50.8306       50.8306       164.970       215.800    
  32  0.522932     -0.648304      -31.4015       31.4015       162.571       193.972    
  33  0.538779     -0.618450      -29.9555       29.9555       160.107       190.063    
  34  0.693066     -0.366629      -17.7582       17.7582       162.149       179.908    
  35  0.361961      -1.01622      -49.2219       49.2219       161.959       211.181    
  36  0.310665      -1.16904      -56.6241       56.6241       162.947       219.571    
  37  0.818669     -0.200076      -9.69095       9.69095       163.057       172.747    
  38  0.582861     -0.539807      -26.1463       26.1463       158.419       184.565    
  39  0.401728     -0.911979      -44.1730       44.1730       156.586       200.759    
  40  0.171089      -1.76557      -85.5179       85.5179       164.350       249.868    
  41  0.980174     -0.200248E-01 -0.969929      0.969929       162.535       163.505    
  42  0.495496     -0.702196      -34.0119       34.0119       161.034       195.045    
  43  0.436683     -0.828549      -40.1319       40.1319       165.069       205.200    
  44  0.910411     -0.938588E-01  -4.54618       4.54618       161.330       165.876    
  45  0.649932     -0.430887      -20.8706       20.8706       159.760       180.630    
  46  0.755226     -0.280738      -13.5979       13.5979       161.892       175.490    
  47  0.927352     -0.754221E-01  -3.65317       3.65317       191.766       195.419    
  48  0.848028     -0.164842      -7.98434       7.98434       161.557       169.542    
  49  0.146193      -1.92283      -93.1350       93.1350       155.759       248.894    
  50  0.571278     -0.559879      -27.1185       27.1185       161.286       188.405    
  51  0.244418      -1.40888      -68.2409       68.2409       155.551       223.792    
  52  0.979014     -0.212091E-01  -1.02729       1.02729       164.566       165.593    
  53  0.235747      -1.44500      -69.9904       69.9904       167.843       237.833    
  54  0.486927     -0.719642      -34.8569       34.8569       161.786       196.643    
  55  0.694010     -0.365269      -17.6923       17.6923       162.455       180.147    
  56  0.392305     -0.935716      -45.3227       45.3227       161.413       206.735    
  57  0.334373      -1.09550      -53.0620       53.0620       160.681       213.743    
  58  0.526166     -0.642138      -31.1028       31.1028       161.713       192.816    
  59  0.701539     -0.354479      -17.1697       17.1697       162.353       179.522    
  60  0.447845     -0.803307      -38.9093       38.9093       164.919       203.828    
  61  0.927856     -0.748784E-01  -3.62684       3.62684       161.597       165.224    
  62  0.453274     -0.791258      -38.3257       38.3257       158.314       196.640    
  63  0.291736      -1.23190      -59.6690       59.6690       163.447       223.116    
  64  0.497643E-02  -5.30304      -256.860       256.860       162.425       419.285    
  65  0.972200E-01  -2.33078      -112.894       112.894       162.825       275.719    
  66  0.821987     -0.196031      -9.49501       9.49501       162.747       172.242    
  67  0.652134     -0.427506      -20.7068       20.7068       162.643       183.350    
  68  0.774447     -0.255606      -12.3806       12.3806       161.455       173.835    
  69  0.103131      -2.27176      -110.036       110.036       170.733       280.769    
  70  0.767617E-01  -2.56705      -124.339       124.339       163.123       287.462    
  71  0.965592     -0.350134E-01  -1.69592       1.69592       160.411       162.107    
  72  0.631959     -0.458930      -22.2289       22.2289       160.568       182.797    
  73  0.276224      -1.28654      -62.3156       62.3156       162.050       224.366    
  74  0.386375     -0.950946      -46.0604       46.0604       158.974       205.034    
  75  0.105407      -2.24993      -108.978       108.978       162.401       271.379    
loop,thermsimp(1:2)       31   67.4228       67.6051    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134        189.20          0.87          1.15         25.26          0.05          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135        196.47          0.86          1.15         25.35          0.21          0.05         27.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       31
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       32
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      134     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.190723      0.190723       160.411       160.602    
   2  0.758684E-02  -4.88134      -236.434       236.434       162.535       398.969    
   3  0.404439     -0.905254      -43.8472       43.8472       161.597       205.445    
   4  0.947917E-01  -2.35607      -114.120       114.120       164.566       278.686    
   5  0.834417     -0.181022      -8.76806       8.76806       161.330       170.098    
   6  0.891274     -0.115104      -5.57521       5.57521       163.549       169.124    
   7  0.744451     -0.295108      -14.2940       14.2940       161.237       175.531    
   8  0.559638     -0.580466      -28.1157       28.1157       161.417       189.533    
   9  0.821724     -0.196351      -9.51052       9.51052       161.557       171.068    
  10  0.847292     -0.165710      -8.02637       8.02637       162.747       170.773    
  11  0.661676     -0.412979      -20.0032       20.0032       163.057       183.060    
  12  0.993427     -0.659478E-02 -0.319427      0.319427       161.455       161.774    
  13  0.425996     -0.853326      -41.3320       41.3320       161.892       203.224    
  14  0.673132     -0.395813      -19.1718       19.1718       163.722       182.894    
  15  0.234810      -1.44898      -70.1833       70.1833       161.460       231.643    
  16  0.122926      -2.09617      -101.531       101.531       167.774       269.305    
  17  0.523553     -0.647118      -31.3440       31.3440       160.969       192.313    
  18  0.959317     -0.415333E-01  -2.01172       2.01172       162.353       164.364    
  19  0.321726      -1.13406      -54.9295       54.9295       162.149       217.079    
  20  0.493112     -0.707018      -34.2454       34.2454       162.455       196.700    
  21  0.416134     -0.876748      -42.4665       42.4665       159.760       202.226    
  22  0.409432     -0.892985      -43.2529       43.2529       162.816       206.069    
  23  0.657956     -0.418617      -20.2763       20.2763       160.568       180.844    
  24  0.904324     -0.100567      -4.87112       4.87112       162.643       167.514    
  25  0.714426     -0.336276      -16.2880       16.2880       161.536       177.824    
  26  0.150521      -1.89365      -91.7216       91.7216       158.419       250.140    
  27  0.758740     -0.276096      -13.3731       13.3731       161.286       174.659    
  28  0.359105      -1.02414      -49.6057       49.6057       161.212       210.817    
  29  0.666937     -0.405060      -19.6196       19.6196       155.616       175.235    
  30  0.343213      -1.06940      -51.7980       51.7980       160.107       211.906    
  31  0.484849     -0.723918      -35.0640       35.0640       161.713       196.777    
  32  0.874661     -0.133919      -6.48655       6.48655       162.571       169.057    
  33  0.994710     -0.530415E-02 -0.256914      0.256914       161.034       161.290    
  34  0.821923     -0.196109      -9.49881       9.49881       191.766       201.265    
  35  0.954096E-02  -4.65216      -225.334       225.334       158.314       383.648    
  36  0.240030      -1.42699      -69.1182       69.1182       161.786       230.904    
  37  0.279003      -1.27653      -61.8306       61.8306       156.586       218.417    
  38  0.553830     -0.590898      -28.6210       28.6210       164.919       193.540    
  39  0.400809     -0.914271      -44.2840       44.2840       158.974       203.258    
  40  0.146125      -1.92330      -93.1575       93.1575       165.069       258.226    
  41  0.811879     -0.208403      -10.0943       10.0943       160.765       170.859    
  42  0.349149      -1.05226      -50.9675       50.9675       161.455       212.422    
  43  0.897422     -0.108229      -5.24221       5.24221       161.413       166.655    
  44  0.114492      -2.16725      -104.974       104.974       161.455       266.428    
  45  0.831901E-01  -2.48663      -120.443       120.443       161.906       282.349    
  46  0.721169     -0.326882      -15.8330       15.8330       163.364       179.197    
  47  0.801724     -0.220991      -10.7040       10.7040       152.236       162.940    
  48  0.466569     -0.762349      -36.9254       36.9254       161.959       198.884    
  49  0.103404      -2.26911      -109.908       109.908       160.681       270.588    
  50  0.417206     -0.874175      -42.3419       42.3419       164.970       207.312    
  51  0.267666      -1.31802      -63.8399       63.8399       162.006       225.846    
  52  0.670232     -0.400131      -19.3809       19.3809       162.947       182.328    
  53  0.161265      -1.82470      -88.3821       88.3821       154.957       243.339    
  54  0.414706     -0.880185      -42.6330       42.6330       162.484       205.117    
  55  0.501015     -0.691119      -33.4753       33.4753       163.447       196.922    
  56  0.516090     -0.661474      -32.0394       32.0394       155.551       187.590    
  57  0.424740     -0.856278      -41.4750       41.4750       162.050       203.525    
  58  0.303796      -1.19140      -57.7070       57.7070       161.444       219.151    
  59  0.803455     -0.218834      -10.5995       10.5995       160.674       171.274    
  60  0.416256     -0.876456      -42.4523       42.4523       156.791       199.244    
  61  0.760689     -0.273531      -13.2488       13.2488       167.843       181.091    
  62  0.995587     -0.442238E-02 -0.214204      0.214204       161.207       161.421    
  63  0.961804     -0.389449E-01  -1.88635       1.88635       161.455       163.341    
  64  0.321618      -1.13439      -54.9458       54.9458       155.759       210.705    
  65  0.850055     -0.162454      -7.86869       7.86869       164.350       172.219    
  66  0.408700     -0.894773      -43.3395       43.3395       162.401       205.740    
  67  0.204039E-01  -3.89203      -188.516       188.516       162.825       351.340    
  68  0.195538      -1.63200      -79.0482       79.0482       161.872       240.920    
  69  0.577737     -0.548636      -26.5739       26.5739       170.733       197.307    
  70  0.958394     -0.424960E-01  -2.05835       2.05835       163.123       165.182    
  71  0.570540     -0.561172      -27.1811       27.1811       162.449       189.630    
  72  0.509347     -0.674626      -32.6764       32.6764       161.408       194.084    
  73  0.805802     -0.215917      -10.4582       10.4582       163.578       174.036    
  74  0.188251      -1.66998      -80.8878       80.8878       163.976       244.864    
  75  0.113356      -2.17722      -105.457       105.457       189.195       294.652    
loop,thermsimp(1:2)       32  0.190723       236.434    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136        160.32          0.86          1.15         25.33          0.31          0.05         27.70
Just calling func    0   0         27.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137        162.18          0.86          1.16         25.34          0.26          0.05         27.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       32
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       33
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      136     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -38.0788       38.0788       160.411       198.490    
   2  0.588265E-01  -2.83316      -137.228       137.228       161.034       298.262    
   3  0.787103E-01  -2.54198      -123.124       123.124       161.207       284.331    
   4  0.597713     -0.514644      -24.9275       24.9275       161.455       186.382    
   5  0.110741      -2.20056      -106.587       106.587       152.236       258.824    
   6  0.677861     -0.388813      -18.8327       18.8327       161.455       180.287    
   7  0.307724      -1.17855      -57.0848       57.0848       162.353       219.437    
   8  0.550587     -0.596770      -28.9054       28.9054       163.123       192.029    
   9  0.601295     -0.508669      -24.6381       24.6381       161.413       186.051    
  10  0.487121     -0.719243      -34.8375       34.8375       162.643       197.481    
  11  0.146295      -1.92213      -93.1009       93.1009       162.571       255.672    
  12  0.714050     -0.336802      -16.3135       16.3135       163.549       179.862    
  13  0.723089     -0.324223      -15.7042       15.7042       161.330       177.034    
  14  0.805432     -0.216376      -10.4805       10.4805       162.747       173.227    
  15  0.123280      -2.09329      -101.392       101.392       160.765       262.157    
  16  0.853039     -0.158950      -7.69898       7.69898       161.557       169.256    
  17  0.288289      -1.24379      -60.2447       60.2447       160.674       220.919    
  18  0.705126     -0.349379      -16.9227       16.9227       164.350       181.273    
  19  0.772420     -0.258227      -12.5076       12.5076       163.578       176.085    
  20  0.962845     -0.378631E-01  -1.83395       1.83395       161.286       163.120    
  21  0.245802      -1.40323      -67.9672       67.9672       155.616       223.583    
  22  0.752702     -0.284087      -13.7601       13.7601       161.237       174.997    
  23  0.729896     -0.314853      -15.2503       15.2503       161.536       176.786    
  24  0.869278     -0.140092      -6.78556       6.78556       163.364       170.150    
  25  0.597817E-01  -2.81706      -136.448       136.448       160.568       297.016    
  26  0.984108     -0.160195E-01 -0.775927      0.775927       167.843       168.619    
  27  0.278288      -1.27910      -61.9549       61.9549       162.947       224.902    
  28  0.588278     -0.530555      -25.6982       25.6982       163.722       189.420    
  29  0.807614     -0.213671      -10.3495       10.3495       163.057       173.406    
  30  0.428679     -0.847047      -41.0279       41.0279       155.551       196.579    
  31  0.452991     -0.791883      -38.3559       38.3559       161.417       199.773    
  32  0.678742     -0.387514      -18.7698       18.7698       162.449       181.219    
  33  0.504500     -0.684188      -33.1396       33.1396       160.969       194.108    
  34  0.894800     -0.111155      -5.38394       5.38394       164.919       170.303    
  35  0.854311     -0.157461      -7.62682       7.62682       161.408       169.035    
  36  0.756230     -0.279410      -13.5336       13.5336       162.455       175.989    
  37  0.744369     -0.295219      -14.2993       14.2993       161.713       176.013    
  38  0.435758     -0.830668      -40.2345       40.2345       163.447       203.681    
  39  0.677387     -0.389513      -18.8666       18.8666       170.733       189.600    
  40  0.504989     -0.683219      -33.0926       33.0926       161.959       195.052    
  41  0.325676      -1.12185      -54.3384       54.3384       156.791       211.130    
  42  0.147207      -1.91591      -92.7999       92.7999       191.766       284.566    
  43  0.432041     -0.839234      -40.6495       40.6495       159.760       200.409    
  44  0.615972     -0.484555      -23.4701       23.4701       161.892       185.362    
  45  0.150867      -1.89136      -91.6105       91.6105       158.974       250.584    
  46  0.464307     -0.767210      -37.1609       37.1609       162.050       199.211    
  47  0.379753     -0.968234      -46.8977       46.8977       162.484       209.382    
  48  0.886192     -0.120822      -5.85217       5.85217       161.597       167.450    
  49  0.231751E-01  -3.76468      -182.347       182.347       162.401       344.748    
  50  0.257662      -1.35611      -65.6849       65.6849       162.816       228.501    
  51  0.470381E-01  -3.05680      -148.060       148.060       164.970       313.030    
  52  0.972366     -0.280233E-01  -1.35735       1.35735       155.759       157.117    
  53  0.242054      -1.41860      -68.7116       68.7116       161.212       229.923    
  54  0.660577     -0.414642      -20.0838       20.0838       160.107       180.191    
  55  0.234396      -1.45074      -70.2686       70.2686       161.455       231.723    
  56  0.891547     -0.114797      -5.56036       5.56036       162.149       167.710    
  57  0.408879E-01  -3.19692      -154.847       154.847       156.586       311.434    
  58  0.577007     -0.549901      -26.6352       26.6352       161.444       188.079    
  59  0.851462     -0.160801      -7.78861       7.78861       162.006       169.794    
  60  0.733240     -0.310283      -15.0290       15.0290       161.786       176.815    
  61  0.219002E-01  -3.82126      -185.088       185.088       161.460       346.548    
  62  0.293643      -1.22539      -59.3535       59.3535       161.872       221.225    
  63  0.552105     -0.594017      -28.7720       28.7720       154.957       183.729    
  64  0.638007E-01  -2.75199      -133.296       133.296       163.976       297.273    
  65  0.332554      -1.10095      -53.3261       53.3261       158.419       211.745    
  66  0.365239      -1.00720      -48.7853       48.7853       165.069       213.854    
  67  0.160984      -1.82645      -88.4665       88.4665       161.455       249.921    
  68  0.149423      -1.90098      -92.0764       92.0764       167.774       259.850    
  69  0.142989      -1.94499      -94.2083       94.2083       160.681       254.889    
  70  0.516056     -0.661540      -32.0426       32.0426       164.566       196.609    
  71  0.719056E-01  -2.63240      -127.504       127.504       161.906       289.410    
  72  0.968385     -0.321257E-01  -1.55605       1.55605       189.195       190.751    
  73  0.888186     -0.118574      -5.74327       5.74327       162.825       168.568    
  74  0.626022E-01  -2.77095      -134.215       134.215       158.314       292.529    
  75  0.597532     -0.514948      -24.9422       24.9422       160.315       185.257    
loop,thermsimp(1:2)       33   38.0788       137.228    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138        162.30          0.86          1.15         25.30          0.07          0.06         27.45
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    139        163.18          0.86          1.17         25.32          0.00          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       33
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       34
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      138     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -113.426       113.426       155.759       269.185    
   2  0.298819      -1.20792      -58.5072       58.5072       161.286       219.794    
   3  0.706385     -0.347595      -16.8363       16.8363       161.597       178.434    
   4  0.958764     -0.421100E-01  -2.03965       2.03965       162.149       164.189    
   5  0.306496      -1.18255      -57.2785       57.2785       162.825       220.103    
   6  0.905447     -0.993270E-01  -4.81104       4.81104       167.843       172.654    
   7  0.234113      -1.45195      -70.3272       70.3272       161.408       231.735    
   8  0.704141     -0.350777      -16.9904       16.9904       161.557       178.548    
   9  0.908200     -0.962902E-01  -4.66395       4.66395       162.006       166.670    
  10  0.656383     -0.421011      -20.3923       20.3923       163.364       183.757    
  11  0.967894     -0.326327E-01  -1.58061       1.58061       164.919       166.500    
  12  0.754670     -0.281475      -13.6336       13.6336       162.747       176.380    
  13  0.488960     -0.715475      -34.6550       34.6550       163.057       197.712    
  14  0.451577     -0.795009      -38.5073       38.5073       161.237       199.745    
  15  0.387599E-01  -3.25037      -157.436       157.436       162.455       319.891    
  16  0.210942E-02  -6.16134      -298.433       298.433       161.713       460.146    
  17  0.656530     -0.420787      -20.3814       20.3814       163.578       183.959    
  18  0.181246      -1.70790      -82.7245       82.7245       161.536       244.260    
  19  0.758879     -0.275913      -13.3642       13.3642       161.786       175.150    
  20  0.392052     -0.936362      -45.3540       45.3540       161.330       206.684    
  21  0.406710     -0.899654      -43.5760       43.5760       163.549       207.125    
  22  0.830107     -0.186201      -9.01888       9.01888       160.107       169.126    
  23  0.311833      -1.16529      -56.4424       56.4424       161.455       217.897    
  24  0.945407     -0.561396E-01  -2.71920       2.71920       162.449       165.168    
  25  0.303319      -1.19297      -57.7831       57.7831       164.350       222.133    
  26  0.284230      -1.25797      -60.9316       60.9316       154.957       215.888    
  27  0.292492      -1.22932      -59.5437       59.5437       160.315       219.859    
  28  0.401496     -0.912557      -44.2010       44.2010       161.892       206.093    
  29  0.379648     -0.968510      -46.9111       46.9111       161.413       208.324    
  30  0.723496E-01  -2.62625      -127.206       127.206       161.455       288.660    
  31  0.940338     -0.615157E-01  -2.97960       2.97960       161.444       164.424    
  32  0.766237     -0.266264      -12.8968       12.8968       163.722       176.619    
  33  0.984920     -0.151946E-01 -0.735971      0.735971       170.733       171.469    
  34  0.552546     -0.593218      -28.7333       28.7333       189.195       217.929    
  35  0.735557     -0.307128      -14.8762       14.8762       163.123       178.000    
  36  0.142195      -1.95056      -94.4778       94.4778       160.969       255.447    
  37  0.304783      -1.18816      -57.5499       57.5499       161.959       219.509    
  38  0.868582     -0.140894      -6.82439       6.82439       155.551       162.375    
  39  0.382741     -0.960397      -46.5181       46.5181       164.566       211.084    
  40  0.273812      -1.29531      -62.7403       62.7403       162.643       225.383    
  41  0.601920     -0.507631      -24.5878       24.5878       160.411       184.999    
  42  0.827744     -0.189051      -9.15697       9.15697       162.050       171.207    
  43  0.881186E-01  -2.42907      -117.655       117.655       161.417       279.072    
  44  0.386744     -0.949994      -46.0142       46.0142       159.760       205.774    
  45  0.852312     -0.159803      -7.74028       7.74028       163.447       171.187    
  46  0.830189     -0.186102      -9.01413       9.01413       162.484       171.498    
  47  0.216531      -1.53002      -74.1087       74.1087       156.791       230.900    
  48  0.835540     -0.179677      -8.70291       8.70291       158.419       167.122    
  49  0.962152     -0.385824E-01  -1.86879       1.86879       165.069       166.937    
  50  0.866477     -0.143320      -6.94188       6.94188       162.353       169.294    
  51  0.640111     -0.446114      -21.6081       21.6081       160.674       182.282    
  52  0.103467      -2.26850      -109.878       109.878       161.872       271.750    
  53  0.746080     -0.292923      -14.1881       14.1881       155.616       169.804    
  54  0.154266      -1.86908      -90.5314       90.5314       162.947       253.478    
  55  0.479981     -0.734008      -35.5527       35.5527       162.816       198.369    
  56  0.641740     -0.443572      -21.4850       21.4850       161.212       182.697    
  57  0.282342      -1.26463      -61.2543       61.2543       161.455       222.709    
  58  0.691857     -0.368376      -17.8428       17.8428       161.455       179.297    
  59  0.774818     -0.255127      -12.3574       12.3574       158.974       171.331    
  60  0.950647     -0.506124E-01  -2.45148       2.45148       160.681       163.132    
  61  0.946272E-01  -2.35781      -114.204       114.204       162.571       276.775    
  62  0.936976     -0.650979E-01  -3.15310       3.15310       152.236       155.390    
  63  0.339755      -1.07953      -52.2886       52.2886       167.774       220.063    
  64  0.781991     -0.245913      -11.9111       11.9111       160.765       172.676    
  65  0.524538     -0.645237      -31.2530       31.2530       161.207       192.460    
  66  0.740186     -0.300853      -14.5722       14.5722       191.766       206.338    
  67  0.713516     -0.337550      -16.3497       16.3497       161.906       178.256    
  68  0.760009     -0.274425      -13.2922       13.2922       158.314       171.606    
  69  0.813040     -0.206975      -10.0251       10.0251       160.568       170.593    
  70  0.177817E-01  -4.02959      -195.178       195.178       163.976       359.155    
  71  0.585717     -0.534918      -25.9095       25.9095       161.034       186.943    
  72  0.151688      -1.88593      -91.3477       91.3477       156.586       247.934    
  73  0.870493     -0.138695      -6.71790       6.71790       164.970       171.688    
  74  0.226172      -1.48646      -71.9987       71.9987       162.401       234.399    
  75  0.555889E-01  -2.88977      -139.970       139.970       162.299       302.269    
loop,thermsimp(1:2)       34   113.426       58.5072    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140        160.56          0.85          1.15         25.33          0.14          0.05         27.52
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141        160.08          0.85          1.15         25.31          0.05          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    160.08       0.6726     -1.535      2.404     -102.6      1.033    
                      0.1014      1.639     -99.70      3.536     0.3288    
                       1.943     -1.331      1.530      5542.      5557.    
                     -0.5569      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5271.     -216.9    
                     -0.5672     -6.608     -4.967     -8.428      6.131    
                      -14.69     -2.866      1019.      0.000      4301.    

                       4301.      4301.      2968.      4301.      3814.    
                       4917.    -0.5371E-01 0.6374E-01  0.000     0.9232E-01
                     -0.6617E-01-0.3044E-01 0.1286     0.2417E-01-0.1012E-01

                     -0.2528    -0.9925      0.000    -0.3725E-01-0.7310E-02
                       0.000    -0.2054E-01-0.1645E-01-0.1183     0.2226E-01
                     -0.3188E-01 0.2072E-01-0.5014     -1.075      5542.    

                     -0.6713    -0.6731     -2.446     -2.446     0.5212E-01
                      0.6661E-01  9.131      8.759    -0.1907E+05 -4.000    
                     -0.4746    -0.5311      9.318      8.809    -0.2108E+05

                      -4.000     0.6014E-02-0.8908      8.924      8.953    
                     -0.1983E+05 -7.000    -0.3666     -3.728      9.119    
                       8.829    -0.2108E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       34
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       35
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      140     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -51.1138       51.1138       152.236       203.350    
   2  0.175000      -1.74297      -84.4232       84.4232       155.551       239.974    
   3  0.131587      -2.02809      -98.2334       98.2334       160.681       258.914    
   4  0.301717      -1.19826      -58.0396       58.0396       162.149       220.189    
   5  0.166877      -1.79050      -86.7254       86.7254       161.444       248.170    
   6  0.481073     -0.731736      -35.4426       35.4426       162.449       197.892    
   7  0.706381     -0.347600      -16.8365       16.8365       164.919       181.756    
   8  0.702617     -0.352943      -17.0953       17.0953       162.006       179.101    
   9  0.552795     -0.592767      -28.7115       28.7115       165.069       193.780    
  10  0.495420     -0.702349      -34.0192       34.0192       158.419       192.438    
  11  0.479343     -0.735339      -35.6172       35.6172       160.107       195.725    
  12  0.462659     -0.770765      -37.3331       37.3331       162.353       199.686    
  13  0.631315E-01  -2.76253      -133.807       133.807       155.616       289.423    
  14  0.785681     -0.241205      -11.6831       11.6831       160.568       172.251    
  15  0.767932     -0.264055      -12.7899       12.7899       163.447       176.237    
  16  0.262689E-01  -3.63937      -176.278       176.278       162.050       338.328    
  17  0.871353     -0.137708      -6.67008       6.67008       158.974       165.644    
  18  0.618350     -0.480701      -23.2834       23.2834       170.733       194.017    
  19  0.196090      -1.62918      -78.9118       78.9118       162.484       241.396    
  20  0.925050     -0.779078E-01  -3.77357       3.77357       158.314       162.088    
  21  0.903269     -0.101735      -4.92768       4.92768       164.970       169.897    
  22  0.958828     -0.420436E-01  -2.03644       2.03644       167.843       169.879    
  23  0.969274     -0.312081E-01  -1.51161       1.51161       160.765       162.277    
  24  0.313932      -1.15858      -56.1173       56.1173       161.786       217.904    
  25  0.106324      -2.24126      -108.559       108.559       162.747       271.306    
  26  0.718705     -0.330304      -15.9987       15.9987       163.722       179.721    
  27  0.751116     -0.286195      -13.8622       13.8622       163.123       176.986    
  28  0.996391     -0.361592E-02 -0.175142      0.175142       161.906       162.081    
  29  0.313387      -1.16032      -56.2016       56.2016       161.597       217.799    
  30  0.305057      -1.18726      -57.5064       57.5064       161.557       219.064    
  31  0.408833     -0.894447      -43.3238       43.3238       161.455       204.778    
  32  0.589856     -0.527877      -25.5685       25.5685       160.674       186.243    
  33  0.808683     -0.212349      -10.2854       10.2854       161.212       171.497    
  34  0.481635     -0.730569      -35.3861       35.3861       163.364       198.751    
  35  0.677481     -0.389374      -18.8599       18.8599       163.578       182.438    
  36  0.673605     -0.395111      -19.1377       19.1377       160.411       179.549    
  37  0.409374E-01  -3.19571      -154.789       154.789       161.034       315.822    
  38  0.362144      -1.01571      -49.1975       49.1975       161.207       210.404    
  39  0.364718E-01  -3.31122      -160.383       160.383       163.057       323.440    
  40  0.280272      -1.27199      -61.6108       61.6108       162.816       224.427    
  41  0.532528     -0.630120      -30.5207       30.5207       161.237       191.758    
  42  0.901591     -0.103595      -5.01775       5.01775       159.760       164.777    
  43  0.262858      -1.33614      -64.7178       64.7178       161.892       226.610    
  44  0.168755      -1.77931      -86.1833       86.1833       191.766       277.949    
  45  0.504619     -0.683952      -33.1282       33.1282       161.330       194.458    
  46  0.900650     -0.104639      -5.06832       5.06832       163.549       168.617    
  47  0.438495     -0.824406      -39.9312       39.9312       161.413       201.344    
  48  0.984597     -0.155233E-01 -0.751894      0.751894       164.566       165.318    
  49  0.469739     -0.755579      -36.5975       36.5975       154.957       191.554    
  50  0.252111      -1.37789      -66.7398       66.7398       161.455       228.194    
  51  0.764692     -0.268282      -12.9946       12.9946       189.195       202.190    
  52  0.848445     -0.164351      -7.96054       7.96054       161.959       169.919    
  53  0.705739     -0.348509      -16.8805       16.8805       161.286       178.167    
  54  0.449895     -0.798741      -38.6881       38.6881       160.315       199.003    
  55  0.742135     -0.298224      -14.4449       14.4449       167.774       182.219    
  56  0.305311      -1.18642      -57.4661       57.4661       162.825       220.291    
  57  0.798408     -0.225136      -10.9048       10.9048       164.350       175.255    
  58  0.807590     -0.213700      -10.3509       10.3509       161.455       171.805    
  59  0.768432     -0.263404      -12.7583       12.7583       162.643       175.401    
  60  0.895397     -0.110488      -5.35166       5.35166       156.791       162.143    
  61  0.585964     -0.534497      -25.8891       25.8891       161.408       187.297    
  62  0.785258     -0.241743      -11.7091       11.7091       162.401       174.110    
  63  0.311021      -1.16790      -56.5686       56.5686       161.536       218.104    
  64  0.803571     -0.218690      -10.5926       10.5926       156.586       167.179    
  65  0.879509     -0.128391      -6.21880       6.21880       162.947       169.166    
  66  0.605375     -0.501907      -24.3106       24.3106       160.969       185.279    
  67  0.774979     -0.254920      -12.3474       12.3474       155.759       168.107    
  68  0.621445     -0.475708      -23.0415       23.0415       161.872       184.914    
  69  0.755932     -0.279804      -13.5527       13.5527       162.571       176.124    
  70  0.211323E-01  -3.85695      -186.817       186.817       161.417       348.234    
  71  0.616355     -0.483932      -23.4399       23.4399       161.455       184.895    
  72  0.102593      -2.27699      -110.289       110.289       162.299       272.588    
  73  0.728301     -0.317041      -15.3563       15.3563       162.455       177.811    
  74  0.243662      -1.41197      -68.3909       68.3909       163.976       232.367    
  75  0.530372     -0.634177      -30.7172       30.7172       160.084       190.802    
loop,thermsimp(1:2)       35   51.1138       84.4232    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142        162.61          0.86          1.15         25.33          0.41          0.06         27.80
Just calling func    0   0         27.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    143        164.71          0.86          1.15         25.29          0.20          0.05         27.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       35
neval is:      142
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       36
neval is:      142


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      142     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -124.955       124.955       161.906       286.861    
   2  0.962370     -0.383559E-01  -1.85782       1.85782       158.314       160.172    
   3  0.356737      -1.03076      -49.9261       49.9261       156.791       206.718    
   4  0.884319     -0.122937      -5.95463       5.95463       160.765       166.720    
   5  0.919725E-01  -2.38627      -115.582       115.582       159.760       275.342    
   6  0.900184     -0.105156      -5.09337       5.09337       164.566       169.659    
   7  0.390055     -0.941468      -45.6013       45.6013       158.974       204.575    
   8  0.263976      -1.33190      -64.5123       64.5123       156.586       221.099    
   9  0.898455     -0.107078      -5.18649       5.18649       155.759       160.946    
  10  0.697674E-01  -2.66259      -128.966       128.966       163.549       292.515    
  11  0.888938     -0.117727      -5.70228       5.70228       162.947       168.649    
  12  0.824147     -0.193406      -9.36789       9.36789       167.843       177.210    
  13  0.941109     -0.606968E-01  -2.93993       2.93993       164.970       167.910    
  14  0.885654     -0.121429      -5.88157       5.88157       161.959       167.840    
  15  0.798208     -0.225386      -10.9169       10.9169       161.212       172.129    
  16  0.365331      -1.00695      -48.7731       48.7731       161.455       210.228    
  17  0.519490     -0.654907      -31.7213       31.7213       160.568       192.289    
  18  0.922741     -0.804065E-01  -3.89460       3.89460       162.401       166.295    
  19  0.877443     -0.130744      -6.33275       6.33275       164.350       170.683    
  20  0.584844     -0.536410      -25.9818       25.9818       162.643       188.625    
  21  0.671390     -0.398406      -19.2973       19.2973       162.571       181.868    
  22  0.203335      -1.59290      -77.1543       77.1543       163.447       240.601    
  23  0.330236E-01  -3.41053      -165.194       165.194       163.123       328.317    
  24  0.879725     -0.128146      -6.20695       6.20695       162.455       168.662    
  25  0.833976     -0.181550      -8.79365       8.79365       161.286       170.080    
  26  0.901698     -0.103475      -5.01196       5.01196       162.006       167.018    
  27  0.692847     -0.366946      -17.7735       17.7735       160.411       178.185    
  28  0.550572     -0.596797      -28.9067       28.9067       163.722       192.628    
  29  0.158383E-01  -4.14532      -200.784       200.784       164.919       365.703    
  30  0.503246     -0.686677      -33.2601       33.2601       167.774       201.034    
  31  0.648812     -0.432612      -20.9542       20.9542       163.578       184.532    
  32  0.306980      -1.18097      -57.2021       57.2021       161.455       218.657    
  33  0.205188      -1.58383      -76.7150       76.7150       161.872       238.587    
  34  0.265146      -1.32748      -64.2981       64.2981       160.969       225.267    
  35  0.272730E-01  -3.60186      -174.461       174.461       160.674       335.135    
  36  0.262990E-01  -3.63823      -176.222       176.222       161.408       337.630    
  37  0.492753     -0.707748      -34.2808       34.2808       160.084       194.365    
  38  0.255065      -1.36624      -66.1755       66.1755       154.957       221.132    
  39  0.623259     -0.472794      -22.9004       22.9004       161.237       184.138    
  40  0.949296     -0.520343E-01  -2.52035       2.52035       158.419       160.939    
  41  0.982394     -0.177630E-01 -0.860374      0.860374       165.069       165.929    
  42  0.566450     -0.568366      -27.5296       27.5296       170.733       198.263    
  43  0.557613     -0.584090      -28.2912       28.2912       161.330       189.621    
  44  0.900731     -0.104549      -5.06397       5.06397       160.107       165.171    
  45  0.671339     -0.398481      -19.3010       19.3010       162.449       181.750    
  46  0.650454     -0.430084      -20.8317       20.8317       163.364       184.196    
  47  0.749315     -0.288595      -13.9785       13.9785       160.315       174.294    
  48  0.667497     -0.404220      -19.5789       19.5789       162.353       181.931    
  49  0.132870      -2.01838      -97.7632       97.7632       161.413       259.176    
  50  0.964787     -0.358480E-01  -1.73635       1.73635       189.195       190.932    
  51  0.835780     -0.179390      -8.68898       8.68898       152.236       160.925    
  52  0.601609     -0.508148      -24.6128       24.6128       161.455       186.067    
  53  0.937321     -0.647298E-01  -3.13528       3.13528       161.207       164.342    
  54  0.467877     -0.759550      -36.7899       36.7899       161.597       198.387    
  55  0.953249     -0.478789E-01  -2.31908       2.31908       161.786       164.105    
  56  0.827724     -0.189076      -9.15814       9.15814       161.536       170.694    
  57  0.624780     -0.470355      -22.7823       22.7823       161.557       184.339    
  58  0.821535     -0.196581      -9.52165       9.52165       162.149       171.671    
  59  0.625285     -0.469548      -22.7432       22.7432       162.825       185.568    
  60  0.581213     -0.542638      -26.2834       26.2834       162.816       189.099    
  61  0.855886E-01  -2.45820      -119.066       119.066       161.892       280.958    
  62  0.262334      -1.33814      -64.8144       64.8144       161.455       226.269    
  63  0.978265     -0.219749E-01  -1.06439       1.06439       163.976       165.041    
  64  0.600842     -0.509423      -24.6746       24.6746       155.551       180.225    
  65  0.476413     -0.741470      -35.9141       35.9141       162.484       198.398    
  66  0.922813     -0.803282E-01  -3.89081       3.89081       161.444       165.335    
  67  0.468949     -0.757261      -36.6790       36.6790       160.681       197.360    
  68  0.832153E-01  -2.48632      -120.429       120.429       162.747       283.175    
  69  0.927485     -0.752786E-01  -3.64622       3.64622       162.299       165.945    
  70  0.487372     -0.718728      -34.8126       34.8126       191.766       226.579    
  71  0.410125     -0.891292      -43.1710       43.1710       155.616       198.787    
  72  0.961670     -0.390839E-01  -1.89308       1.89308       161.034       162.927    
  73  0.683411     -0.380659      -18.4378       18.4378       163.057       181.494    
  74  0.970618     -0.298221E-01  -1.44448       1.44448       162.050       163.495    
  75  0.181020      -1.70915      -82.7850       82.7850       162.606       245.391    
loop,thermsimp(1:2)       36   124.955       1.85782    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    144        161.95          0.86          1.16         25.30          0.06          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    145        165.75          0.84          1.14         25.33          0.20          0.05         27.57
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       36
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       37
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      144     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -3.04009       3.04009       158.314       161.354    
   2  0.112532E-01  -4.48710      -217.339       217.339       152.236       369.575    
   3  0.907929     -0.965891E-01  -4.67842       4.67842       158.419       163.097    
   4  0.478640     -0.736807      -35.6883       35.6883       155.759       191.448    
   5  0.737686     -0.304237      -14.7361       14.7361       161.034       175.770    
   6  0.114880      -2.16387      -104.810       104.810       162.050       266.860    
   7  0.309837      -1.17171      -56.7533       56.7533       161.786       218.540    
   8  0.469091     -0.756958      -36.6643       36.6643       161.207       197.871    
   9  0.721151     -0.326907      -15.8342       15.8342       163.976       179.810    
  10  0.557251     -0.584740      -28.3227       28.3227       160.107       188.430    
  11  0.581534     -0.542085      -26.2567       26.2567       161.444       187.701    
  12  0.501412     -0.690326      -33.4369       33.4369       165.069       198.505    
  13  0.783062     -0.244543      -11.8448       11.8448       162.299       174.144    
  14  0.571322     -0.559803      -27.1148       27.1148       162.401       189.515    
  15  0.902729E-01  -2.40492      -116.486       116.486       160.765       277.251    
  16  0.695403E-01  -2.66585      -129.124       129.124       162.006       291.130    
  17  0.128872      -2.04894      -99.2432       99.2432       161.959       261.202    
  18  0.940828E-01  -2.36358      -114.483       114.483       164.970       279.453    
  19  0.326350      -1.11979      -54.2383       54.2383       162.947       217.185    
  20  0.102915      -2.27385      -110.137       110.137       162.455       272.592    
  21  0.324524      -1.12540      -54.5101       54.5101       164.566       219.076    
  22  0.259454      -1.34918      -65.3493       65.3493       161.286       226.636    
  23  0.782812     -0.244863      -11.8603       11.8603       164.350       176.210    
  24  0.383591     -0.958178      -46.4107       46.4107       161.536       207.946    
  25  0.626880     -0.466999      -22.6198       22.6198       162.149       184.769    
  26  0.292269      -1.23008      -59.5806       59.5806       161.212       220.792    
  27  0.448852     -0.801062      -38.8005       38.8005       160.315       199.116    
  28  0.685432     -0.377706      -18.2947       18.2947       167.843       186.137    
  29  0.995399     -0.461118E-02 -0.223349      0.223349       160.411       160.634    
  30  0.163323      -1.81203      -87.7681       87.7681       155.551       243.319    
  31  0.952940     -0.482038E-01  -2.33482       2.33482       163.057       165.391    
  32  0.861306     -0.149306      -7.23183       7.23183       162.449       169.681    
  33  0.587276     -0.532261      -25.7808       25.7808       162.571       188.352    
  34  0.908704     -0.957357E-01  -4.63709       4.63709       162.353       166.990    
  35  0.585935     -0.534546      -25.8915       25.8915       161.237       187.129    
  36  0.429836     -0.844352      -40.8974       40.8974       163.364       204.262    
  37  0.726203     -0.319926      -15.4961       15.4961       161.557       177.053    
  38  0.151145E-01  -4.19210      -203.050       203.050       163.578       366.628    
  39  0.927869     -0.748646E-01  -3.62617       3.62617       162.825       166.451    
  40  0.961645     -0.391099E-01  -1.89434       1.89434       161.455       163.349    
  41  0.253977      -1.37051      -66.3825       66.3825       162.643       229.026    
  42  0.768038     -0.263917      -12.7832       12.7832       162.816       175.599    
  43  0.569441E-01  -2.86569      -138.803       138.803       161.330       300.133    
  44  0.103919      -2.26415      -109.667       109.667       189.195       298.862    
  45  0.312226      -1.16403      -56.3813       56.3813       160.568       216.949    
  46  0.473636E-02  -5.35249      -259.255       259.255       163.722       422.977    
  47  0.192099      -1.64975      -79.9077       79.9077       160.084       239.992    
  48  0.799429     -0.223858      -10.8429       10.8429       160.681       171.524    
  49  0.164379      -1.80558      -87.4558       87.4558       170.733       258.189    
  50  0.421896     -0.862996      -41.8004       41.8004       161.597       203.398    
  51  0.361660      -1.01705      -49.2623       49.2623       162.484       211.746    
  52  0.346541      -1.05975      -51.3307       51.3307       155.616       206.947    
  53  0.728715     -0.316473      -15.3288       15.3288       167.774       183.103    
  54  0.305329      -1.18637      -57.4632       57.4632       158.974       216.437    
  55  0.547244     -0.602861      -29.2004       29.2004       156.791       185.992    
  56  0.942790     -0.589122E-01  -2.85349       2.85349       161.455       164.308    
  57  0.846801     -0.166290      -8.05448       8.05448       161.455       169.509    
  58  0.961806     -0.389424E-01  -1.88623       1.88623       156.586       158.473    
  59  0.101104      -2.29161      -110.997       110.997       154.957       265.954    
  60  0.181736      -1.70520      -82.5938       82.5938       160.969       243.563    
  61  0.298004      -1.21065      -58.6395       58.6395       161.455       220.094    
  62  0.840699E-01  -2.47611      -119.934       119.934       191.766       311.700    
  63  0.796444     -0.227598      -11.0240       11.0240       161.872       172.896    
  64  0.294043      -1.22403      -59.2875       59.2875       163.447       222.734    
  65  0.156591      -1.85412      -89.8067       89.8067       162.606       252.413    
  66  0.973381     -0.269794E-01  -1.30679       1.30679       161.413       162.719    
  67  0.515799     -0.662038      -32.0667       32.0667       159.760       191.826    
  68  0.211924      -1.55153      -75.1505       75.1505       161.892       237.042    
  69  0.830172     -0.186122      -9.01509       9.01509       162.747       171.762    
  70  0.666225     -0.406128      -19.6714       19.6714       161.906       181.578    
  71  0.756659     -0.278843      -13.5061       13.5061       163.549       177.055    
  72  0.799292     -0.224029      -10.8511       10.8511       163.123       173.975    
  73  0.644747     -0.438898      -21.2586       21.2586       160.674       181.933    
  74  0.802537     -0.219977      -10.6549       10.6549       161.408       172.063    
  75  0.205334      -1.58312      -76.6805       76.6805       161.949       238.629    
loop,thermsimp(1:2)       37   3.04009       217.339    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146        160.40          0.86          1.15         25.29          0.11          0.05         27.46
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    147        165.46          0.86          1.15         25.28          0.10          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       37
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       38
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      146     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -47.9290       47.9290       156.586       204.515    
   2  0.687927     -0.374072      -18.1187       18.1187       160.411       178.530    
   3  0.288957      -1.24148      -60.1327       60.1327       158.314       218.447    
   4  0.192838      -1.64590      -79.7216       79.7216       161.413       241.134    
   5  0.369869     -0.994607      -48.1752       48.1752       158.419       206.594    
   6  0.735973     -0.306562      -14.8487       14.8487       161.455       176.303    
   7  0.637144     -0.450760      -21.8332       21.8332       161.455       183.288    
   8  0.703934     -0.351071      -17.0046       17.0046       163.057       180.061    
   9  0.864279     -0.145859      -7.06489       7.06489       162.825       169.890    
  10  0.473452     -0.747705      -36.2161       36.2161       162.353       198.569    
  11  0.242010      -1.41877      -68.7203       68.7203       161.455       230.175    
  12  0.510769     -0.671838      -32.5414       32.5414       162.449       194.991    
  13  0.829624     -0.186782      -9.04707       9.04707       160.681       169.728    
  14  0.228911      -1.47442      -71.4157       71.4157       162.747       234.163    
  15  0.310006      -1.17116      -56.7270       56.7270       161.408       218.135    
  16  0.248341      -1.39295      -67.4696       67.4696       161.872       229.342    
  17  0.723214     -0.324050      -15.6958       15.6958       163.123       178.819    
  18  0.420900     -0.865360      -41.9149       41.9149       162.299       204.214    
  19  0.133903      -2.01064      -97.3879       97.3879       162.816       260.204    
  20  0.571916     -0.558763      -27.0645       27.0645       161.034       188.098    
  21  0.609104     -0.495766      -24.0131       24.0131       164.350       188.363    
  22  0.582057     -0.541186      -26.2131       26.2131       161.557       187.770    
  23  0.440731     -0.819321      -39.6850       39.6850       163.549       203.234    
  24  0.211006      -1.55587      -75.3607       75.3607       163.976       239.337    
  25  0.665769     -0.406813      -19.7045       19.7045       161.906       181.611    
  26  0.766062     -0.266493      -12.9079       12.9079       160.674       173.582    
  27  0.321416E-01  -3.43760      -166.505       166.505       167.774       334.279    
  28  0.165897E-01  -4.09897      -198.539       198.539       162.149       360.689    
  29  0.634553     -0.454835      -22.0306       22.0306       156.791       178.822    
  30  0.981834     -0.183335E-01 -0.888009      0.888009       167.843       168.731    
  31  0.511720     -0.669978      -32.4513       32.4513       161.237       193.689    
  32  0.426358     -0.852477      -41.2909       41.2909       161.444       202.735    
  33  0.500527     -0.692094      -33.5225       33.5225       162.571       196.093    
  34  0.100483      -2.29777      -111.296       111.296       160.107       271.403    
  35  0.837324     -0.177545      -8.59962       8.59962       162.401       171.000    
  36  0.257741      -1.35580      -65.6701       65.6701       155.759       221.429    
  37  0.437184     -0.827401      -40.0763       40.0763       159.760       199.836    
  38  0.707529     -0.345976      -16.7578       16.7578       161.207       177.965    
  39  0.538379     -0.619193      -29.9915       29.9915       165.069       195.060    
  40  0.611820     -0.491317      -23.7976       23.7976       160.315       184.113    
  41  0.404533     -0.905022      -43.8360       43.8360       161.597       205.433    
  42  0.902499     -0.102588      -4.96900       4.96900       163.364       168.333    
  43  0.704299     -0.350552      -16.9795       16.9795       155.616       172.595    
  44  0.511818     -0.669786      -32.4420       32.4420       161.536       193.978    
  45  0.748131     -0.290178      -14.0552       14.0552       162.484       176.539    
  46  0.296598      -1.21538      -58.8685       58.8685       158.974       217.842    
  47  0.805122     -0.216762      -10.4992       10.4992       160.568       171.067    
  48  0.525063     -0.644236      -31.2045       31.2045       162.947       194.152    
  49  0.192567      -1.64731      -79.7898       79.7898       161.786       241.576    
  50  0.991898     -0.813527E-02 -0.394043      0.394043       164.566       164.960    
  51  0.238175      -1.43475      -69.4941       69.4941       161.455       230.949    
  52  0.627675     -0.465733      -22.5584       22.5584       161.212       183.770    
  53  0.328849      -1.11216      -53.8688       53.8688       163.447       217.316    
  54  0.697651     -0.360037      -17.4389       17.4389       161.286       178.725    
  55  0.154345      -1.86857      -90.5067       90.5067       162.643       253.150    
  56  0.196838      -1.62537      -78.7273       78.7273       161.892       240.619    
  57  0.397903     -0.921546      -44.6364       44.6364       161.949       206.585    
  58  0.746135E-01  -2.59543      -125.713       125.713       160.084       285.798    
  59  0.283843      -1.25934      -60.9976       60.9976       155.551       216.548    
  60  0.540853E-02  -5.21978      -252.827       252.827       160.969       413.796    
  61  0.534720     -0.626011      -30.3217       30.3217       162.606       192.928    
  62  0.909816     -0.945126E-01  -4.57785       4.57785       170.733       175.311    
  63  0.190142      -1.65998      -80.4036       80.4036       161.959       242.362    
  64  0.150854      -1.89144      -91.6146       91.6146       154.957       246.571    
  65  0.385455     -0.953330      -46.1759       46.1759       162.050       208.226    
  66  0.655101     -0.422966      -20.4869       20.4869       162.455       182.942    
  67  0.527025     -0.640508      -31.0239       31.0239       160.765       191.789    
  68  0.110501      -2.20273      -106.692       106.692       164.970       271.662    
  69  0.206094      -1.57942      -76.5014       76.5014       162.006       238.507    
  70  0.961998     -0.387429E-01  -1.87656       1.87656       189.195       191.072    
  71  0.842154     -0.171793      -8.32103       8.32103       161.330       169.651    
  72  0.178445      -1.72347      -83.4788       83.4788       191.766       275.245    
  73  0.742172     -0.298174      -14.4425       14.4425       163.578       178.020    
  74  0.985630     -0.144744E-01 -0.701085      0.701085       152.236       152.938    
  75  0.455040     -0.787371      -38.1374       38.1374       160.402       198.540    
loop,thermsimp(1:2)       38   47.9290       18.1187    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148        161.71          0.84          1.16         25.33          0.03          0.06         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    149        163.01          0.85          1.16         25.31          0.11          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       38
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       39
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      148     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -15.6256       15.6256       152.236       167.862    
   2  0.309663      -1.17227      -56.7805       56.7805       164.566       221.347    
   3  0.688114     -0.373801      -18.1055       18.1055       163.364       181.470    
   4  0.677876     -0.388791      -18.8316       18.8316       167.843       186.674    
   5  0.283701      -1.25984      -61.0219       61.0219       161.330       222.352    
   6  0.183733      -1.69427      -82.0643       82.0643       160.681       242.745    
   7  0.243414      -1.41299      -68.4402       68.4402       162.825       231.265    
   8  0.785389     -0.241576      -11.7010       11.7010       162.401       174.102    
   9  0.258033      -1.35467      -65.6153       65.6153       160.568       226.183    
  10  0.137887      -1.98132      -95.9682       95.9682       155.616       251.584    
  11  0.386520     -0.950573      -46.0423       46.0423       160.674       206.717    
  12  0.882934     -0.124505      -6.03059       6.03059       170.733       176.764    
  13  0.395106     -0.928602      -44.9781       44.9781       161.455       206.433    
  14  0.107633      -2.22903      -107.966       107.966       162.484       270.450    
  15  0.434094     -0.834495      -40.4199       40.4199       161.207       201.627    
  16  0.558484     -0.582529      -28.2156       28.2156       163.578       191.794    
  17  0.102706      -2.27589      -110.236       110.236       160.411       270.647    
  18  0.325804      -1.12146      -54.3194       54.3194       161.286       215.606    
  19  0.693871     -0.365469      -17.7020       17.7020       163.123       180.825    
  20  0.832622     -0.183176      -8.87237       8.87237       156.791       165.664    
  21  0.691207     -0.369316      -17.8883       17.8883       163.057       180.945    
  22  0.903946     -0.100985      -4.89136       4.89136       161.906       166.798    
  23  0.258785E-01  -3.65434      -177.003       177.003       162.455       339.458    
  24  0.247338      -1.39700      -67.6656       67.6656       161.455       229.120    
  25  0.861464     -0.149122      -7.22294       7.22294       161.212       168.435    
  26  0.954919     -0.461290E-01  -2.23432       2.23432       160.315       162.549    
  27  0.579638     -0.545352      -26.4149       26.4149       161.557       187.972    
  28  0.537182     -0.621418      -30.0992       30.0992       161.034       191.133    
  29  0.407710     -0.897199      -43.4571       43.4571       164.350       207.807    
  30  0.958466     -0.424211E-01  -2.05472       2.05472       189.195       191.250    
  31  0.884674     -0.122536      -5.93520       5.93520       160.765       166.700    
  32  0.395055     -0.928731      -44.9844       44.9844       162.606       207.591    
  33  0.325425      -1.12262      -54.3758       54.3758       161.237       215.613    
  34  0.679842     -0.385895      -18.6914       18.6914       161.536       180.227    
  35  0.765292     -0.267498      -12.9566       12.9566       162.947       175.904    
  36  0.217460      -1.52574      -73.9013       73.9013       162.449       236.351    
  37  0.181189      -1.70822      -82.7398       82.7398       165.069       247.808    
  38  0.518456     -0.656899      -31.8178       31.8178       162.571       194.389    
  39  0.249864E-01  -3.68942      -178.702       178.702       160.402       339.105    
  40  0.336654      -1.08870      -52.7327       52.7327       162.353       215.085    
  41  0.873801     -0.134903      -6.53420       6.53420       159.760       166.294    
  42  0.478904     -0.736255      -35.6615       35.6615       161.444       197.106    
  43  0.819950     -0.198512      -9.61521       9.61521       163.549       173.164    
  44  0.966813     -0.337500E-01  -1.63473       1.63473       162.299       163.934    
  45  0.514109     -0.665319      -32.2257       32.2257       156.586       188.812    
  46  0.483734     -0.726221      -35.1755       35.1755       161.597       196.773    
  47  0.227743E-01  -3.78212      -183.192       183.192       161.949       345.141    
  48  0.409495     -0.892830      -43.2454       43.2454       158.419       201.664    
  49  0.198361      -1.61767      -78.3540       78.3540       162.050       240.404    
  50  0.925767     -0.771331E-01  -3.73605       3.73605       155.551       159.287    
  51  0.842113     -0.171842      -8.32338       8.32338       163.447       171.770    
  52  0.347114E-01  -3.36069      -162.779       162.779       158.974       321.753    
  53  0.215814      -1.53334      -74.2693       74.2693       161.408       235.677    
  54  0.219309      -1.51727      -73.4912       73.4912       158.314       231.805    
  55  0.940126     -0.617416E-01  -2.99054       2.99054       155.759       158.750    
  56  0.663408     -0.410365      -19.8766       19.8766       161.872       181.749    
  57  0.630947     -0.460533      -22.3065       22.3065       161.455       183.761    
  58  0.719671     -0.328961      -15.9337       15.9337       161.455       177.388    
  59  0.939094     -0.628392E-01  -3.04370       3.04370       162.747       165.791    
  60  0.901520     -0.103673      -5.02155       5.02155       162.006       167.027    
  61  0.771028     -0.260031      -12.5950       12.5950       163.976       176.571    
  62  0.320616      -1.13751      -55.0969       55.0969       161.892       216.989    
  63  0.893890     -0.112173      -5.43324       5.43324       161.413       166.846    
  64  0.874332     -0.134295      -6.50476       6.50476       161.786       168.291    
  65  0.363931      -1.01079      -48.9591       48.9591       161.959       210.918    
  66  0.140534      -1.96231      -95.0471       95.0471       154.957       250.004    
  67  0.432559     -0.838038      -40.5915       40.5915       162.643       203.235    
  68  0.446579     -0.806139      -39.0465       39.0465       162.816       201.862    
  69  0.830196     -0.186093      -9.01368       9.01368       160.107       169.121    
  70  0.324418      -1.12572      -54.5260       54.5260       164.970       219.496    
  71  0.645984E-01  -2.73957      -132.695       132.695       191.766       324.461    
  72  0.465516     -0.764609      -37.0349       37.0349       160.084       197.119    
  73  0.456901     -0.783288      -37.9396       37.9396       167.774       205.714    
  74  0.263704      -1.33293      -64.5623       64.5623       162.149       226.712    
  75  0.873440     -0.135316      -6.55422       6.55422       161.708       168.262    
loop,thermsimp(1:2)       39   15.6256       56.7805    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150        164.99          0.86          1.15         25.29          0.01          0.06         27.36
Just calling func    0   0         27.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    151        205.66          0.85          1.15         25.28          0.21          0.05         27.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.4364               149
loop is:       39
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    48.4364               149
loop is:       40
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    24.2182               223

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      150     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -1.12444       1.12444       155.759       156.884    
   2  0.450411     -0.797594      -19.3163       19.3163       155.551       174.867    
   3  0.691912E-01  -2.67088      -64.6839       64.6839       160.315       224.999    
   4  0.740935     -0.299842      -7.26163       7.26163       162.299       169.561    
   5  0.452531     -0.792898      -19.2026       19.2026       156.791       175.994    
   6  0.461330     -0.773642      -18.7362       18.7362       162.747       181.483    
   7  0.102999      -2.27303      -55.0488       55.0488       159.760       214.808    
   8  0.475106     -0.744217      -18.0236       18.0236       160.765       178.789    
   9  0.240275      -1.42597      -34.5344       34.5344       161.906       196.441    
  10  0.276707E-01  -3.58738      -86.8799       86.8799       161.413       248.292    
  11  0.132701E-01  -4.32224      -104.677       104.677       162.006       266.682    
  12  0.997219     -0.278509E-02 -0.674497E-01  0.674497E-01   152.236       152.304    
  13  0.563305     -0.573934      -13.8996       13.8996       161.708       175.608    
  14  0.347949      -1.05570      -25.5671       25.5671       161.786       187.353    
  15  0.546018     -0.605103      -14.6545       14.6545       161.212       175.866    
  16  0.343968      -1.06721      -25.8458       25.8458       160.107       185.953    
  17  0.945234     -0.563230E-01  -1.36404       1.36404       163.447       164.811    
  18  0.346208      -1.06072      -25.6886       25.6886       163.549       189.237    
  19  0.406433     -0.900337      -21.8045       21.8045       162.401       184.205    
  20  0.632259     -0.458455      -11.1030       11.1030       162.947       174.050    
  21  0.983930     -0.162002E-01 -0.392339      0.392339       163.976       164.369    
  22  0.200798      -1.60546      -38.8813       38.8813       170.733       209.614    
  23  0.223962      -1.49628      -36.2371       36.2371       161.455       197.692    
  24  0.594322     -0.520335      -12.6016       12.6016       161.536       174.137    
  25  0.875298     -0.133191      -3.22564       3.22564       163.123       166.349    
  26  0.327822      -1.11529      -27.0102       27.0102       163.057       190.067    
  27  0.215105      -1.53663      -37.2143       37.2143       163.364       200.579    
  28  0.905181     -0.996198E-01  -2.41261       2.41261       161.872       164.285    
  29  0.699086     -0.357981      -8.66966       8.66966       161.455       170.124    
  30  0.747401     -0.291154      -7.05122       7.05122       167.843       174.894    
  31  0.699189     -0.357834      -8.66608       8.66608       161.557       170.223    
  32  0.563488     -0.573610      -13.8918       13.8918       156.586       170.478    
  33  0.155576      -1.86062      -45.0609       45.0609       161.034       206.094    
  34  0.380593     -0.966025      -23.3954       23.3954       189.195       212.591    
  35  0.626112     -0.468226      -11.3396       11.3396       163.578       174.917    
  36  0.372369     -0.987870      -23.9244       23.9244       162.571       186.495    
  37  0.517531     -0.658686      -15.9522       15.9522       161.597       177.550    
  38  0.673247     -0.395643      -9.58174       9.58174       161.444       171.026    
  39  0.741527     -0.299044      -7.24230       7.24230       160.084       167.327    
  40  0.280982      -1.26947      -30.7441       30.7441       161.207       191.951    
  41  0.331745      -1.10339      -26.7221       26.7221       158.419       185.141    
  42  0.712030     -0.339635      -8.22535       8.22535       162.816       171.041    
  43  0.200581      -1.60654      -38.9074       38.9074       162.643       201.551    
  44  0.989915     -0.101357E-01 -0.245468      0.245468       167.774       168.019    
  45  0.808031     -0.213155      -5.16224       5.16224       161.455       166.617    
  46  0.893446     -0.112670      -2.72866       2.72866       160.674       163.403    
  47  0.364885      -1.00817      -24.4161       24.4161       162.606       187.022    
  48  0.923731     -0.793347E-01  -1.92134       1.92134       164.350       166.272    
  49  0.504880     -0.683434      -16.5515       16.5515       161.959       178.510    
  50  0.724988     -0.321600      -7.78858       7.78858       162.353       170.141    
  51  0.927322     -0.754540E-01  -1.82736       1.82736       161.286       163.114    
  52  0.857721     -0.153476      -3.71692       3.71692       161.237       164.954    
  53  0.943333     -0.583361E-01  -1.41279       1.41279       161.892       163.305    
  54  0.794551     -0.229978      -5.56964       5.56964       164.970       170.539    
  55  0.732400     -0.311429      -7.54225       7.54225       164.566       172.108    
  56  0.143434      -1.94188      -47.0288       47.0288       161.330       208.359    
  57  0.859384     -0.151540      -3.67002       3.67002       160.568       164.238    
  58  0.677471     -0.389389      -9.43028       9.43028       162.149       171.580    
  59  0.258745      -1.35191      -32.7408       32.7408       161.455       194.195    
  60  0.380926E-01  -3.26773      -79.1386       79.1386       162.825       241.963    
  61  0.563373     -0.573814      -13.8967       13.8967       158.314       172.211    
  62  0.985538     -0.145678E-01 -0.352805      0.352805       161.408       161.761    
  63  0.647297     -0.434951      -10.5337       10.5337       162.449       172.983    
  64  0.608092     -0.497430      -12.0468       12.0468       162.050       174.097    
  65  0.944821     -0.567601E-01  -1.37463       1.37463       160.681       162.055    
  66  0.458402E-01  -3.08259      -74.6548       74.6548       165.069       239.723    
  67  0.573743E-01  -2.85816      -69.2194       69.2194       154.957       224.176    
  68  0.755011     -0.281022      -6.80585       6.80585       155.616       162.422    
  69  0.199134      -1.61378      -39.0828       39.0828       162.484       201.567    
  70  0.364851      -1.00827      -24.4184       24.4184       160.411       184.829    
  71  0.868783     -0.140661      -3.40657       3.40657       158.974       162.380    
  72  0.658442     -0.417879      -10.1203       10.1203       191.766       201.886    
  73  0.257054      -1.35847      -32.8997       32.8997       160.402       193.302    
  74  0.619402     -0.479001      -11.6005       11.6005       162.455       174.056    
  75  0.825535     -0.191724      -4.64320       4.64320       164.985       169.629    
loop,thermsimp(1:2)       40   1.12444       19.3163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152        161.05          0.86          1.15         25.29          0.07          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       40
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       41
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      151     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -24.8798       24.8798       152.236       177.116    
   2  0.414955     -0.879585      -21.3020       21.3020       155.759       177.061    
   3  0.407443     -0.897854      -21.7444       21.7444       161.408       183.152    
   4  0.883897     -0.123414      -2.98887       2.98887       160.681       163.670    
   5  0.520045     -0.653840      -15.8348       15.8348       158.974       174.808    
   6  0.634521     -0.454885      -11.0165       11.0165       155.616       166.632    
   7  0.344406      -1.06594      -25.8150       25.8150       161.286       187.101    
   8  0.545595     -0.605879      -14.6733       14.6733       161.892       176.565    
   9  0.766876     -0.265430      -6.42822       6.42822       160.674       167.102    
  10  0.639043     -0.447783      -10.8445       10.8445       160.568       171.413    
  11  0.850701     -0.161694      -3.91595       3.91595       161.872       165.788    
  12  0.832060     -0.183851      -4.45254       4.45254       163.976       168.429    
  13  0.728209     -0.317167      -7.68120       7.68120       163.447       171.128    
  14  0.531327     -0.632378      -15.3150       15.3150       161.237       176.552    
  15  0.188974E-01  -3.96873      -96.1154       96.1154       164.350       260.466    
  16  0.246817      -1.39911      -33.8838       33.8838       163.123       197.007    
  17  0.935336     -0.668496E-01  -1.61898       1.61898       161.455       163.074    
  18  0.730823     -0.313585      -7.59445       7.59445       160.084       167.679    
  19  0.482288     -0.729213      -17.6602       17.6602       167.774       185.434    
  20  0.782974E-04  -9.45500      -228.983       228.983       162.299       391.282    
  21  0.258744      -1.35192      -32.7410       32.7410       164.985       197.726    
  22  0.389044     -0.944063      -22.8635       22.8635       161.455       184.318    
  23  0.611459E-01  -2.79449      -67.6776       67.6776       162.353       230.030    
  24  0.124922      -2.08006      -50.3754       50.3754       161.557       211.933    
  25  0.253683      -1.37167      -33.2194       33.2194       156.586       189.806    
  26  0.781437     -0.246621      -5.97271       5.97271       164.970       170.942    
  27  0.835634     -0.179565      -4.34874       4.34874       161.444       165.793    
  28  0.542030     -0.612434      -14.8320       14.8320       162.816       177.648    
  29  0.463443     -0.769071      -18.6255       18.6255       162.149       180.775    
  30  0.120587      -2.11538      -51.2307       51.2307       164.566       215.797    
  31  0.733316     -0.310178      -7.51195       7.51195       158.314       165.826    
  32  0.955530     -0.454889E-01  -1.10166       1.10166       162.449       163.551    
  33  0.419735     -0.868132      -21.0246       21.0246       162.947       183.972    
  34  0.284829      -1.25587      -30.4148       30.4148       162.455       192.870    
  35  0.924079     -0.789582E-01  -1.91222       1.91222       162.050       163.963    
  36  0.432674     -0.837770      -20.2893       20.2893       161.536       181.825    
  37  0.155293      -1.86244      -45.1049       45.1049       155.551       200.656    
  38  0.634342     -0.455168      -11.0233       11.0233       167.843       178.866    
  39  0.935635     -0.665293E-01  -1.61122       1.61122       163.578       165.189    
  40  0.931832     -0.706024E-01  -1.70986       1.70986       161.708       163.418    
  41  0.875970     -0.132424      -3.20706       3.20706       161.212       164.419    
  42  0.273544      -1.29629      -31.3938       31.3938       156.791       188.185    
  43  0.799596     -0.223649      -5.41638       5.41638       161.597       167.014    
  44  0.772883     -0.257628      -6.23928       6.23928       161.959       168.198    
  45  0.274276      -1.29362      -31.3292       31.3292       160.765       192.094    
  46  0.116034      -2.15387      -52.1629       52.1629       162.747       214.910    
  47  0.700214     -0.356369      -8.63062       8.63062       162.401       171.031    
  48  0.704184E-01  -2.65330      -64.2581       64.2581       160.411       224.669    
  49  0.699980E-01  -2.65929      -64.4032       64.4032       158.419       222.822    
  50  0.186964      -1.67684      -40.6100       40.6100       160.107       200.717    
  51  0.342641      -1.07107      -25.9394       25.9394       162.571       188.510    
  52  0.989806     -0.102462E-01 -0.248144      0.248144       162.606       162.854    
  53  0.216227      -1.53143      -37.0884       37.0884       161.786       198.875    
  54  0.233793      -1.45332      -35.1968       35.1968       163.549       198.746    
  55  0.404477     -0.905159      -21.9213       21.9213       163.057       184.978    
  56  0.164502      -1.80483      -43.7097       43.7097       161.207       204.917    
  57  0.561765E-01  -2.87926      -69.7304       69.7304       160.402       230.133    
  58  0.169196E-01  -4.07928      -98.7928       98.7928       161.455       260.247    
  59  0.486948     -0.719597      -17.4273       17.4273       161.906       179.334    
  60  0.640730     -0.445148      -10.7807       10.7807       161.455       172.235    
  61  0.940004     -0.618708E-01  -1.49840       1.49840       163.364       164.863    
  62  0.216981      -1.52795      -37.0041       37.0041       162.643       199.647    
  63  0.131817      -2.02634      -49.0744       49.0744       162.484       211.559    
  64  0.996981     -0.302401E-02 -0.732360E-01  0.732360E-01   191.766       191.839    
  65  0.534925     -0.625629      -15.1516       15.1516       161.034       176.185    
  66  0.151104      -1.88978      -45.7672       45.7672       161.330       207.097    
  67  0.228761      -1.47508      -35.7237       35.7237       170.733       206.457    
  68  0.187751      -1.67264      -40.5083       40.5083       189.195       229.704    
  69  0.417030     -0.874597      -21.1811       21.1811       159.760       180.941    
  70  0.239615      -1.42872      -34.6010       34.6010       154.957       189.558    
  71  0.937866E-02  -4.66932      -113.082       113.082       160.315       273.397    
  72  0.929880     -0.727002E-01  -1.76067       1.76067       165.069       166.829    
  73  0.463017     -0.769992      -18.6478       18.6478       162.825       181.472    
  74  0.570687     -0.560915      -13.5843       13.5843       161.413       174.997    
  75  0.631316     -0.459949      -11.1391       11.1391       161.050       172.189    
loop,thermsimp(1:2)       41   24.8798       21.3020    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153        161.52          0.86          1.14         25.33          0.04          0.06         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154        165.49          0.86          1.12         25.26          0.08          0.05         27.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       41
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       42
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      153     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -69.8320       69.8320       162.606       232.438    
   2  0.688513     -0.373221      -9.03874       9.03874       161.455       170.493    
   3  0.530653     -0.633647      -15.3458       15.3458       161.708       177.054    
   4  0.542886     -0.610856      -14.7938       14.7938       162.449       177.243    
   5  0.603382     -0.505205      -12.2351       12.2351       160.681       172.916    
   6  0.478412     -0.737283      -17.8557       17.8557       162.050       179.906    
   7  0.809657     -0.211144      -5.11353       5.11353       161.212       166.325    
   8  0.764585     -0.268422      -6.50069       6.50069       163.364       169.865    
   9  0.228600      -1.47578      -35.7407       35.7407       163.578       199.319    
  10  0.495526     -0.702136      -17.0045       17.0045       161.872       178.876    
  11  0.368264     -0.998954      -24.1929       24.1929       161.444       185.637    
  12  0.407647     -0.897355      -21.7323       21.7323       158.314       180.046    
  13  0.316165      -1.15149      -27.8870       27.8870       155.616       183.503    
  14  0.458518     -0.779756      -18.8843       18.8843       165.069       183.953    
  15  0.643610     -0.440663      -10.6721       10.6721       161.597       172.269    
  16  0.316553E-01  -3.45285      -83.6218       83.6218       160.674       244.296    
  17  0.570171     -0.561819      -13.6062       13.6062       160.084       173.691    
  18  0.448642E-01  -3.10412      -75.1761       75.1761       161.959       237.135    
  19  0.128957      -2.04828      -49.6056       49.6056       163.976       213.582    
  20  0.159422      -1.83620      -44.4695       44.4695       164.970       209.439    
  21  0.154083      -1.87026      -45.2943       45.2943       162.401       207.695    
  22  0.696997     -0.360974      -8.74213       8.74213       163.447       172.189    
  23  0.579421     -0.545727      -13.2165       13.2165       160.568       173.785    
  24  0.528206     -0.638269      -15.4577       15.4577       161.050       176.507    
  25  0.322914      -1.13037      -27.3755       27.3755       161.455       188.830    
  26  0.369562     -0.995437      -24.1077       24.1077       158.974       183.081    
  27  0.134248      -2.00806      -48.6317       48.6317       161.413       210.044    
  28  0.950150     -0.511358E-01  -1.23842       1.23842       161.034       162.272    
  29  0.138040      -1.98021      -47.9571       47.9571       161.237       209.194    
  30  0.316838      -1.14936      -27.8355       27.8355       161.892       189.728    
  31  0.151783      -1.88530      -45.6587       45.6587       155.759       201.418    
  32  0.338674      -1.08272      -26.2215       26.2215       152.236       178.458    
  33  0.814165     -0.205592      -4.97907       4.97907       162.816       167.795    
  34  0.578183     -0.547865      -13.2683       13.2683       167.843       181.111    
  35  0.208707      -1.56682      -37.9456       37.9456       161.906       199.852    
  36  0.540561     -0.615147      -14.8978       14.8978       162.149       177.047    
  37  0.910129     -0.941686E-01  -2.28059       2.28059       159.760       162.040    
  38  0.907740     -0.967972E-01  -2.34425       2.34425       162.825       165.169    
  39  0.549661     -0.598453      -14.4935       14.4935       161.536       176.029    
  40  0.193889      -1.64047      -39.7292       39.7292       161.408       201.137    
  41  0.807651     -0.213625      -5.17362       5.17362       162.947       168.121    
  42  0.613777     -0.488124      -11.8215       11.8215       161.455       173.276    
  43  0.664452     -0.408793      -9.90022       9.90022       163.057       172.957    
  44  0.584630     -0.536776      -12.9997       12.9997       167.774       180.774    
  45  0.618915     -0.479787      -11.6196       11.6196       161.286       172.906    
  46  0.542097     -0.612311      -14.8291       14.8291       156.791       171.620    
  47  0.133641      -2.01260      -48.7415       48.7415       162.571       211.312    
  48  0.479627     -0.734747      -17.7942       17.7942       154.957       172.751    
  49  0.225939      -1.48749      -36.0244       36.0244       156.586       192.611    
  50  0.324869      -1.12433      -27.2293       27.2293       191.766       218.995    
  51  0.669051     -0.401895      -9.73318       9.73318       160.765       170.498    
  52  0.602039     -0.507434      -12.2891       12.2891       162.455       174.744    
  53  0.143076      -1.94438      -47.0894       47.0894       163.123       210.213    
  54  0.897604     -0.108026      -2.61620       2.61620       164.985       167.602    
  55  0.165810      -1.79691      -43.5180       43.5180       163.549       207.067    
  56  0.468567     -0.758077      -18.3593       18.3593       161.786       180.146    
  57  0.641740     -0.443572      -10.7425       10.7425       162.643       173.386    
  58  0.904980     -0.998426E-01  -2.41801       2.41801       155.551       157.969    
  59  0.674132     -0.394330      -9.54995       9.54995       160.107       169.657    
  60  0.756363     -0.279234      -6.76253       6.76253       161.207       167.970    
  61  0.113892      -2.17251      -52.6142       52.6142       170.733       223.347    
  62  0.835916     -0.179227      -4.34055       4.34055       161.330       165.670    
  63  0.284183      -1.25814      -30.4698       30.4698       162.484       192.954    
  64  0.276674      -1.28492      -31.1183       31.1183       161.557       192.676    
  65  0.686678     -0.375890      -9.10336       9.10336       162.747       171.850    
  66  0.567044     -0.567318      -13.7394       13.7394       164.566       178.305    
  67  0.416554     -0.875738      -21.2088       21.2088       158.419       179.627    
  68  0.810149     -0.210537      -5.09881       5.09881       160.411       165.510    
  69  0.979175     -0.210445E-01 -0.509661      0.509661       189.195       189.705    
  70  0.334686      -1.09456      -26.5083       26.5083       162.353       188.861    
  71  0.331108      -1.10531      -26.7686       26.7686       160.402       187.171    
  72  0.734322     -0.308808      -7.47877       7.47877       161.455       168.933    
  73  0.958186E-01  -2.34530      -56.7989       56.7989       164.350       221.149    
  74  0.473076     -0.748500      -18.1273       18.1273       160.315       178.442    
  75  0.683967     -0.379846      -9.19917       9.19917       161.525       170.724    
loop,thermsimp(1:2)       42   69.8320       9.03874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155        161.74          0.86          1.16         25.34          0.24          0.06         27.65
Just calling func    0   0         27.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    156        174.11          0.86          1.15         25.29          0.03          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       42
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       43
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      155     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -5.75169       5.75169       155.551       161.302    
   2  0.796559     -0.227454      -5.50852       5.50852       159.760       165.268    
   3  0.784232     -0.243051      -5.88625       5.88625       161.034       166.920    
   4  0.503549     -0.686074      -16.6155       16.6155       162.825       179.440    
   5  0.468337     -0.758566      -18.3711       18.3711       160.411       178.782    
   6  0.198518      -1.61688      -39.1578       39.1578       161.330       200.488    
   7  0.857529     -0.153700      -3.72233       3.72233       161.212       164.934    
   8  0.845427     -0.167913      -4.06655       4.06655       164.985       169.052    
   9  0.710919     -0.341197      -8.26317       8.26317       162.816       171.079    
  10  0.934107     -0.681640E-01  -1.65081       1.65081       161.207       162.858    
  11  0.565087     -0.570775      -13.8231       13.8231       162.947       176.770    
  12  0.147377      -1.91476      -46.3720       46.3720       161.455       207.827    
  13  0.471965     -0.750851      -18.1843       18.1843       160.107       178.292    
  14  0.287319      -1.24716      -30.2040       30.2040       163.364       193.568    
  15  0.526906     -0.640733      -15.5174       15.5174       161.455       176.972    
  16  0.176999      -1.73161      -41.9365       41.9365       160.765       202.702    
  17  0.868579     -0.140897      -3.41226       3.41226       161.525       164.937    
  18  0.621282     -0.475971      -11.5271       11.5271       156.791       168.319    
  19  0.181881      -1.70440      -41.2776       41.2776       162.747       204.024    
  20  0.565209     -0.570560      -13.8179       13.8179       163.447       177.265    
  21  0.927617     -0.751364E-01  -1.81967       1.81967       161.597       163.417    
  22  0.296120      -1.21699      -29.4733       29.4733       154.957       184.430    
  23  0.152389      -1.88132      -45.5621       45.5621       161.286       206.848    
  24  0.508731     -0.675835      -16.3675       16.3675       160.681       177.048    
  25  0.389654     -0.942496      -22.8255       22.8255       163.057       185.882    
  26  0.770754     -0.260386      -6.30608       6.30608       161.455       167.761    
  27  0.144347      -1.93554      -46.8752       46.8752       162.643       209.518    
  28  0.690124     -0.370884      -8.98214       8.98214       160.084       169.066    
  29  0.882429     -0.125077      -3.02914       3.02914       160.568       163.597    
  30  0.781105     -0.247045      -5.98299       5.98299       162.455       168.438    
  31  0.331946      -1.10278      -26.7074       26.7074       161.536       188.243    
  32  0.157011      -1.85144      -44.8384       44.8384       161.050       205.888    
  33  0.734200     -0.308973      -7.48277       7.48277       162.149       169.632    
  34  0.563390     -0.573784      -13.8960       13.8960       161.708       175.604    
  35  0.349498      -1.05126      -25.4595       25.4595       162.449       187.909    
  36  0.256822      -1.35937      -32.9215       32.9215       164.566       197.488    
  37  0.563556     -0.573488      -13.8888       13.8888       160.315       174.204    
  38  0.945419E-01  -2.35871      -57.1237       57.1237       152.236       209.360    
  39  0.571450     -0.559577      -13.5520       13.5520       161.872       175.424    
  40  0.583029E-01  -2.84210      -68.8306       68.8306       158.419       227.249    
  41  0.428808     -0.846746      -20.5067       20.5067       162.050       182.557    
  42  0.628450     -0.464499      -11.2493       11.2493       158.314       169.563    
  43  0.152789      -1.87869      -45.4986       45.4986       161.786       207.285    
  44  0.787004E-01  -2.54211      -61.5652       61.5652       167.774       229.339    
  45  0.170927E-01  -4.06911      -98.5464       98.5464       167.843       266.389    
  46  0.531078     -0.632847      -15.3264       15.3264       158.974       174.300    
  47  0.206082E-01  -3.88206      -94.0166       94.0166       155.616       249.632    
  48  0.909565     -0.947891E-01  -2.29562       2.29562       165.069       167.364    
  49  0.456291     -0.784625      -19.0022       19.0022       161.444       180.446    
  50  0.997425E-02  -4.60775      -111.591       111.591       160.402       271.994    
  51  0.251070      -1.38202      -33.4701       33.4701       161.455       194.925    
  52  0.548517     -0.600536      -14.5439       14.5439       162.353       176.896    
  53  0.210242      -1.55950      -37.7682       37.7682       189.195       226.964    
  54  0.848361     -0.164449      -3.98266       3.98266       161.892       165.875    
  55  0.160491E-01  -4.13210      -100.072       100.072       156.586       256.659    
  56  0.407967     -0.896570      -21.7133       21.7133       161.557       183.270    
  57  0.859929     -0.150905      -3.65466       3.65466       162.484       166.139    
  58  0.406052     -0.901274      -21.8272       21.8272       163.578       185.405    
  59  0.743169     -0.296832      -7.18874       7.18874       161.906       169.095    
  60  0.434823     -0.832817      -20.1693       20.1693       161.408       181.577    
  61  0.559897     -0.580003      -14.0466       14.0466       155.759       169.806    
  62  0.277128      -1.28328      -31.0786       31.0786       163.549       194.627    
  63  0.839691     -0.174721      -4.23144       4.23144       162.401       166.632    
  64  0.641867     -0.443375      -10.7377       10.7377       161.237       171.975    
  65  0.309074      -1.17417      -28.4364       28.4364       164.970       193.406    
  66  0.552351     -0.593572      -14.3752       14.3752       161.413       175.788    
  67  0.764824     -0.268109      -6.49312       6.49312       163.123       169.617    
  68  0.857070     -0.154235      -3.73530       3.73530       162.571       166.306    
  69  0.650112     -0.430610      -10.4286       10.4286       163.976       174.405    
  70  0.128926      -2.04851      -49.6113       49.6113       191.766       241.377    
  71  0.370422     -0.993113      -24.0514       24.0514       164.350       188.402    
  72  0.795676     -0.228564      -5.53540       5.53540       170.733       176.269    
  73  0.365230      -1.00723      -24.3932       24.3932       162.606       187.000    
  74  0.610005     -0.494288      -11.9708       11.9708       161.959       173.930    
  75  0.425864E-01  -3.15622      -76.4379       76.4379       161.736       238.174    
loop,thermsimp(1:2)       43   5.75169       5.50852    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157        163.26          0.84          1.15         25.30          0.08          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    158        204.23          0.86          1.15         25.35          0.18          0.06         27.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    163.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       43
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       44
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      157     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -54.5859       54.5859       155.551       210.137    
   2  0.780131E-01  -2.55088      -61.7777       61.7777       161.207       222.985    
   3  0.723689     -0.323394      -7.83202       7.83202       161.597       169.429    
   4  0.439896     -0.821218      -19.8884       19.8884       160.568       180.456    
   5  0.967364     -0.331803E-01 -0.803567      0.803567       161.212       162.015    
   6  0.235884      -1.44441      -34.9811       34.9811       161.525       196.506    
   7  0.311956      -1.16489      -28.2116       28.2116       159.760       187.971    
   8  0.600573     -0.509870      -12.3481       12.3481       161.892       174.240    
   9  0.781739     -0.246234      -5.96335       5.96335       162.484       168.448    
  10  0.505036     -0.683126      -16.5441       16.5441       162.571       179.115    
  11  0.896130     -0.109670      -2.65601       2.65601       162.401       165.057    
  12  0.545040     -0.606897      -14.6979       14.6979       161.034       175.731    
  13  0.338019      -1.08465      -26.2684       26.2684       165.069       191.337    
  14  0.200467      -1.60711      -38.9212       38.9212       161.455       200.376    
  15  0.548763     -0.600089      -14.5331       14.5331       156.791       171.324    
  16  0.897241     -0.108431      -2.62600       2.62600       162.455       165.081    
  17  0.229905      -1.47009      -35.6029       35.6029       164.985       200.588    
  18  0.387828     -0.947193      -22.9393       22.9393       160.084       183.024    
  19  0.789400     -0.236482      -5.72717       5.72717       161.906       167.633    
  20  0.495667     -0.701851      -16.9976       16.9976       158.314       175.312    
  21  0.818926     -0.199761      -4.83786       4.83786       163.123       167.961    
  22  0.181319      -1.70750      -41.3525       41.3525       162.149       203.502    
  23  0.901986     -0.103156      -2.49826       2.49826       155.759       158.258    
  24  0.933790E-01  -2.37109      -57.4235       57.4235       162.816       220.239    
  25  0.171523      -1.76304      -42.6976       42.6976       161.237       203.935    
  26  0.648450     -0.433170      -10.4906       10.4906       161.959       172.449    
  27  0.777448     -0.251739      -6.09665       6.09665       160.315       166.412    
  28  0.777670     -0.251453      -6.08973       6.08973       158.974       165.063    
  29  0.972420     -0.279672E-01 -0.677316      0.677316       163.976       164.654    
  30  0.825305     -0.192002      -4.64993       4.64993       161.872       166.522    
  31  0.470649     -0.753642      -18.2518       18.2518       161.708       179.960    
  32  0.263953      -1.33198      -32.2582       32.2582       161.413       193.671    
  33  0.857551     -0.153675      -3.72173       3.72173       170.733       174.455    
  34  0.950157     -0.511279E-01  -1.23822       1.23822       162.947       164.185    
  35  0.866482     -0.143314      -3.47080       3.47080       162.353       165.823    
  36  0.904889     -0.999433E-01  -2.42045       2.42045       161.455       163.875    
  37  0.297565      -1.21212      -29.3554       29.3554       160.681       190.036    
  38  0.902696     -0.102369      -2.47920       2.47920       163.447       165.926    
  39  0.800054     -0.223076      -5.40250       5.40250       160.107       165.510    
  40  0.534162     -0.627057      -15.1862       15.1862       160.411       175.597    
  41  0.593018     -0.522530      -12.6547       12.6547       162.825       175.479    
  42  0.682417E-01  -2.68470      -65.0186       65.0186       161.444       226.463    
  43  0.336048      -1.09050      -26.4100       26.4100       161.408       187.818    
  44  0.576540     -0.550710      -13.3372       13.3372       162.050       175.388    
  45  0.217955      -1.52347      -36.8956       36.8956       161.557       198.453    
  46  0.281607      -1.26724      -30.6903       30.6903       154.957       185.647    
  47  0.306631      -1.18211      -28.6285       28.6285       163.578       192.206    
  48  0.676335E-01  -2.69365      -65.2354       65.2354       163.057       228.292    
  49  0.145631      -1.92668      -46.6607       46.6607       162.606       209.267    
  50  0.820952     -0.197291      -4.77803       4.77803       162.449       167.227    
  51  0.224137      -1.49550      -36.2182       36.2182       161.536       197.754    
  52  0.738282     -0.303430      -7.34853       7.34853       164.350       171.699    
  53  0.364089      -1.01036      -24.4690       24.4690       164.970       189.439    
  54  0.321068      -1.13610      -27.5143       27.5143       163.364       190.879    
  55  0.179504      -1.71756      -41.5961       41.5961       163.549       205.145    
  56  0.808596     -0.212456      -5.14530       5.14530       161.455       166.600    
  57  0.974692     -0.256343E-01 -0.620815      0.620815       164.566       165.187    
  58  0.559434     -0.580830      -14.0666       14.0666       161.330       175.396    
  59  0.443035E-01  -3.11669      -75.4806       75.4806       160.765       236.246    
  60  0.711672     -0.340139      -8.23754       8.23754       162.747       170.984    
  61  0.578255     -0.547741      -13.2653       13.2653       161.050       174.315    
  62  0.102770      -2.27527      -55.1028       55.1028       161.286       216.389    
  63  0.813100     -0.206901      -5.01076       5.01076       161.786       166.797    
  64  0.612419     -0.490339      -11.8751       11.8751       161.455       173.330    
  65  0.406120     -0.901107      -21.8232       21.8232       152.236       174.060    
  66  0.255858      -1.36313      -33.0126       33.0126       162.643       195.656    
  67  0.622680     -0.473723      -11.4727       11.4727       189.195       200.668    
  68  0.428339     -0.847839      -20.5331       20.5331       158.419       178.952    
  69  0.594560     -0.519934      -12.5919       12.5919       167.774       180.366    
  70  0.921341     -0.819246E-01  -1.98407       1.98407       161.736       163.720    
  71  0.152539      -1.88033      -45.5383       45.5383       191.766       237.304    
  72  0.539176     -0.617712      -14.9599       14.9599       155.616       170.576    
  73  0.179134      -1.71962      -41.6461       41.6461       156.586       198.233    
  74  0.815719     -0.203686      -4.93289       4.93289       167.843       172.775    
  75  0.909487     -0.948748E-01  -2.29769       2.29769       163.261       165.559    
loop,thermsimp(1:2)       44   54.5859       61.7777    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159        158.65          0.87          1.15         25.32          0.29          0.05         27.68
Just calling func    0   0         27.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    160        163.19          0.85          1.15         25.29          0.20          0.05         27.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       44
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       45
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      159     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -3.30000       3.30000       155.759       159.059    
   2  0.990306     -0.974175E-02 -0.235928      0.235928       161.212       161.448    
   3  0.488656     -0.716096      -17.3425       17.3425       161.736       179.079    
   4  0.865115E-01  -2.44748      -59.2735       59.2735       161.455       220.728    
   5  0.234262      -1.45132      -35.1483       35.1483       162.947       198.095    
   6  0.906541     -0.981186E-01  -2.37625       2.37625       163.976       166.352    
   7  0.680454     -0.384995      -9.32388       9.32388       162.401       171.725    
   8  0.575574     -0.552388      -13.3778       13.3778       158.974       172.351    
   9  0.537443E-02  -5.22610      -126.567       126.567       162.455       289.022    
  10  0.421676     -0.863518      -20.9128       20.9128       164.566       185.479    
  11  0.297588      -1.21204      -29.3535       29.3535       160.107       189.461    
  12  0.119337      -2.12581      -51.4832       51.4832       163.261       214.744    
  13  0.958276     -0.426192E-01  -1.03216       1.03216       162.353       163.385    
  14  0.115549      -2.15806      -52.2642       52.2642       163.447       215.711    
  15  0.104220      -2.26125      -54.7635       54.7635       160.315       215.078    
  16  0.719503     -0.329194      -7.97248       7.97248       161.872       169.844    
  17  0.875656     -0.132782      -3.21573       3.21573       161.455       164.670    
  18  0.578760     -0.546868      -13.2441       13.2441       161.786       175.030    
  19  0.923704     -0.793639E-01  -1.92205       1.92205       162.449       164.371    
  20  0.457980     -0.780930      -18.9127       18.9127       161.906       180.819    
  21  0.783173     -0.244401      -5.91896       5.91896       163.123       169.042    
  22  0.764479     -0.268561      -6.50406       6.50406       162.484       168.988    
  23  0.496891     -0.699384      -16.9378       16.9378       161.597       178.535    
  24  0.554859     -0.589041      -14.2655       14.2655       155.616       169.881    
  25  0.734503E-02  -4.91373      -119.002       119.002       162.747       281.749    
  26  0.117643      -2.14010      -51.8294       51.8294       156.791       208.621    
  27  0.145440      -1.92799      -46.6925       46.6925       164.350       211.043    
  28  0.375449     -0.979633      -23.7249       23.7249       161.959       185.684    
  29  0.954324E-01  -2.34934      -56.8967       56.8967       167.843       224.739    
  30  0.449085     -0.800543      -19.3877       19.3877       161.455       180.842    
  31  0.354483      -1.03709      -25.1165       25.1165       152.236       177.353    
  32  0.153971      -1.87099      -45.3120       45.3120       161.892       207.204    
  33  0.871598     -0.137427      -3.32822       3.32822       161.050       164.378    
  34  0.633061     -0.457188      -11.0723       11.0723       170.733       181.805    
  35  0.947022E-01  -2.35702      -57.0827       57.0827       158.314       215.397    
  36  0.793812     -0.230909      -5.59220       5.59220       162.050       167.643    
  37  0.760585     -0.273667      -6.62772       6.62772       161.330       167.957    
  38  0.124312      -2.08496      -50.4940       50.4940       162.825       213.319    
  39  0.961605E-03  -6.94691      -168.241       168.241       160.411       328.653    
  40  0.672529     -0.396710      -9.60759       9.60759       161.034       170.641    
  41  0.749847E-01  -2.59047      -62.7365       62.7365       158.419       221.155    
  42  0.982441     -0.177147E-01 -0.429018      0.429018       162.571       163.000    
  43  0.340727      -1.07667      -26.0751       26.0751       161.708       187.783    
  44  0.915043     -0.887846E-01  -2.15020       2.15020       167.774       169.924    
  45  0.150614      -1.89303      -45.8458       45.8458       160.568       206.414    
  46  0.892785     -0.113409      -2.74656       2.74656       160.084       162.831    
  47  0.844073     -0.169516      -4.10536       4.10536       154.957       159.062    
  48  0.469949     -0.755131      -18.2879       18.2879       161.408       179.696    
  49  0.389072     -0.943991      -22.8618       22.8618       159.760       182.621    
  50  0.738049     -0.303745      -7.35615       7.35615       164.970       172.326    
  51  0.250173      -1.38560      -33.5568       33.5568       160.681       194.238    
  52  0.383245     -0.959081      -23.2272       23.2272       163.364       186.592    
  53  0.384434     -0.955983      -23.1522       23.1522       165.069       188.221    
  54  0.479018E-01  -3.03860      -73.5894       73.5894       163.578       237.167    
  55  0.819285     -0.199323      -4.82725       4.82725       161.413       166.240    
  56  0.568165     -0.565344      -13.6916       13.6916       162.643       176.335    
  57  0.918732     -0.847606E-01  -2.05275       2.05275       161.525       163.577    
  58  0.374258     -0.982809      -23.8019       23.8019       161.536       185.337    
  59  0.966524     -0.340496E-01 -0.824620      0.824620       156.586       157.411    
  60  0.505261     -0.682680      -16.5333       16.5333       161.557       178.090    
  61  0.283819      -1.25942      -30.5008       30.5008       161.455       191.955    
  62  0.448920     -0.800911      -19.3966       19.3966       164.985       184.382    
  63  0.398648     -0.919676      -22.2729       22.2729       189.195       211.468    
  64  0.625742     -0.468817      -11.3539       11.3539       162.149       173.503    
  65  0.924606     -0.783881E-01  -1.89842       1.89842       161.237       163.136    
  66  0.546966     -0.603368      -14.6125       14.6125       163.549       178.161    
  67  0.372518     -0.987471      -23.9148       23.9148       162.606       186.521    
  68  0.167437      -1.78715      -43.2815       43.2815       155.551       198.832    
  69  0.142610      -1.94764      -47.1683       47.1683       161.286       208.455    
  70  0.935319     -0.668675E-01  -1.61941       1.61941       162.816       164.435    
  71  0.100396      -2.29864      -55.6688       55.6688       161.207       216.876    
  72  0.179415E-01  -4.02064      -97.3725       97.3725       161.444       258.817    
  73  0.733830     -0.309478      -7.49499       7.49499       163.057       170.552    
  74  0.730276E-01  -2.61692      -63.3770       63.3770       160.765       224.142    
  75  0.351871      -1.04449      -25.2956       25.2956       158.647       183.943    
loop,thermsimp(1:2)       45   3.30000      0.235928    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161        165.09          0.86          1.16         25.24          0.11          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    162        184.69          0.86          1.16         25.30          0.33          0.05         27.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    165.09       0.8291     -1.577      2.497     -102.6     0.9395    
                      0.2013      1.546     -99.70      3.469     0.4223    
                       1.792     -1.425      1.530      5075.      5907.    
                     -0.6503      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5038.     -30.00    
                     -0.5672     -6.547     -5.154     -8.360      5.944    
                      -14.88     -2.960      1440.      0.000      3180.    

                       3180.      3180.      4312.      3180.      2820.    
                       3635.    -0.2962E-01 0.3558E-01  0.000     0.6430E-01
                     -0.9420E-01-0.5847E-01 0.1005    -0.6336E-02-0.3815E-01

                     -0.2705    -0.4820      0.000    -0.6528E-01-0.9499E-02
                       0.000    -0.4856E-01-0.4448E-01-0.1318    -0.5774E-02
                     -0.5991E-01-0.7306E-02-0.4707     -1.089      5075.    

                     -0.7082    -0.7722     -2.492     -2.492    -0.4131E-01
                      0.7757E-01  9.103      8.786    -0.1992E+05 -4.000    
                     -0.5681    -0.6246      9.290      8.781    -0.2015E+05

                      -4.000     0.1485E-01-0.9292      8.935      8.940    
                     -0.1941E+05 -7.000    -0.4804    -0.8972      9.147    
                       8.801    -0.2015E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    165.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       45
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       46
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      161     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -58.8449       58.8449       156.586       215.431    
   2  0.312747      -1.16236      -28.1503       28.1503       155.759       183.910    
   3  0.317683      -1.14670      -27.7710       27.7710       154.957       182.728    
   4  0.693053     -0.366649      -8.87958       8.87958       161.212       170.091    
   5  0.361881      -1.01644      -24.6163       24.6163       160.084       184.701    
   6  0.127478      -2.05981      -49.8849       49.8849       162.571       212.456    
   7  0.718706     -0.330302      -7.99933       7.99933       161.237       169.237    
   8  0.609419E-01  -2.79783      -67.7585       67.7585       162.353       230.111    
   9  0.320798      -1.13695      -27.5347       27.5347       161.525       189.059    
  10  0.343503      -1.06856      -25.8786       25.8786       162.449       188.328    
  11  0.671828     -0.397753      -9.63286       9.63286       161.050       170.683    
  12  0.616702     -0.483369      -11.7063       11.7063       162.816       174.522    
  13  0.806358E-01  -2.51781      -60.9768       60.9768       161.455       222.431    
  14  0.997284     -0.271972E-02 -0.658668E-01  0.658668E-01   161.413       161.478    
  15  0.554344     -0.589969      -14.2880       14.2880       163.976       178.264    
  16  0.411057     -0.889023      -21.5305       21.5305       162.050       183.581    
  17  0.846258E-01  -2.46952      -59.8072       59.8072       161.330       221.137    
  18  0.737439     -0.304571      -7.37617       7.37617       162.484       169.860    
  19  0.393790     -0.931939      -22.5699       22.5699       163.123       185.693    
  20  0.965947     -0.346467E-01 -0.839080      0.839080       161.872       162.711    
  21  0.150166      -1.89601      -45.9180       45.9180       155.616       201.534    
  22  0.212005      -1.55114      -37.5659       37.5659       167.774       205.340    
  23  0.615060     -0.486036      -11.7709       11.7709       163.057       174.827    
  24  0.382142     -0.961962      -23.2970       23.2970       161.034       184.331    
  25  0.249044      -1.39013      -33.6664       33.6664       162.401       196.067    
  26  0.245943      -1.40266      -33.9698       33.9698       164.970       198.940    
  27  0.108882      -2.21749      -53.7037       53.7037       158.974       212.677    
  28  0.199835      -1.61026      -38.9977       38.9977       162.149       201.147    
  29  0.863954     -0.146235      -3.54156       3.54156       161.786       165.328    
  30  0.392842     -0.934347      -22.6282       22.6282       162.643       185.271    
  31  0.770596     -0.260592      -6.31105       6.31105       152.236       158.548    
  32  0.149868      -1.89800      -45.9662       45.9662       161.557       207.523    
  33  0.234154      -1.45178      -35.1594       35.1594       163.549       198.708    
  34  0.611512     -0.491821      -11.9110       11.9110       161.597       173.508    
  35  0.518093E-01  -2.96019      -71.6903       71.6903       161.736       233.427    
  36  0.567953     -0.565716      -13.7006       13.7006       161.408       175.108    
  37  0.190847      -1.65628      -40.1122       40.1122       161.906       202.018    
  38  0.104561      -2.25798      -54.6842       54.6842       161.455       216.139    
  39  0.135276      -2.00044      -48.4470       48.4470       170.733       219.180    
  40  0.262364      -1.33802      -32.4045       32.4045       159.760       192.164    
  41  0.463951     -0.767976      -18.5990       18.5990       158.647       177.246    
  42  0.419672     -0.868282      -21.0282       21.0282       164.985       186.014    
  43  0.897011     -0.108687      -2.63220       2.63220       161.536       164.168    
  44  0.818933     -0.199754      -4.83767       4.83767       164.566       169.404    
  45  0.136906      -1.98846      -48.1570       48.1570       161.959       210.116    
  46  0.561722     -0.576748      -13.9678       13.9678       162.606       176.574    
  47  0.991681     -0.835368E-02 -0.202311      0.202311       163.364       163.567    
  48  0.653388     -0.425585      -10.3069       10.3069       161.708       172.015    
  49  0.578557     -0.547219      -13.2526       13.2526       165.069       178.321    
  50  0.784121     -0.243191      -5.88966       5.88966       160.107       165.997    
  51  0.827307     -0.189579      -4.59126       4.59126       161.455       166.046    
  52  0.994261     -0.575522E-02 -0.139381      0.139381       160.681       160.820    
  53  0.274030      -1.29452      -31.3509       31.3509       162.947       194.298    
  54  0.879777     -0.128087      -3.10202       3.10202       155.551       158.653    
  55  0.694576E-01  -2.66704      -64.5909       64.5909       160.568       225.159    
  56  0.431517E-01  -3.14303      -76.1186       76.1186       161.892       238.011    
  57  0.620633     -0.477015      -11.5524       11.5524       161.286       172.839    
  58  0.166702      -1.79155      -43.3881       43.3881       156.791       200.180    
  59  0.785136E-01  -2.54448      -61.6228       61.6228       164.350       225.973    
  60  0.440162     -0.820613      -19.8738       19.8738       189.195       209.069    
  61  0.924092     -0.789432E-01  -1.91186       1.91186       162.825       164.737    
  62  0.957397     -0.435372E-01  -1.05439       1.05439       163.261       164.315    
  63  0.817312     -0.201734      -4.88563       4.88563       160.315       165.201    
  64  0.345978      -1.06138      -25.7047       25.7047       158.314       184.019    
  65  0.814305E-02  -4.81059      -116.504       116.504       163.447       279.951    
  66  0.961102     -0.396751E-01 -0.960859      0.960859       161.207       162.168    
  67  0.918841E-01  -2.38723      -57.8143       57.8143       161.455       219.269    
  68  0.875898     -0.132506      -3.20905       3.20905       158.419       161.628    
  69  0.884301     -0.122958      -2.97782       2.97782       160.765       163.743    
  70  0.822040E-01  -2.49855      -60.5104       60.5104       167.843       228.353    
  71  0.674949     -0.393119      -9.52062       9.52062       163.578       173.099    
  72  0.890073     -0.116452      -2.82024       2.82024       161.444       164.265    
  73  0.102417      -2.27870      -55.1861       55.1861       162.747       217.933    
  74  0.704459     -0.350326      -8.48426       8.48426       162.455       170.939    
  75  0.265524      -1.32605      -32.1145       32.1145       165.090       197.204    
loop,thermsimp(1:2)       46   58.8449       28.1503    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163        160.91          0.86          1.16         25.27          0.10          0.05         27.44
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164        165.68          0.86          1.15         25.31          0.12          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       46
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       47
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      163     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -76.8266       76.8266       152.236       229.063    
   2  0.581082     -0.542864      -13.1472       13.1472       155.551       168.698    
   3  0.690143     -0.370857      -8.98148       8.98148       160.681       169.662    
   4  0.958690     -0.421877E-01  -1.02171       1.02171       161.413       162.434    
   5  0.947492     -0.539367E-01  -1.30625       1.30625       158.419       159.725    
   6  0.253816E-01  -3.67373      -88.9711       88.9711       161.207       250.178    
   7  0.811950     -0.208316      -5.04503       5.04503       161.872       166.917    
   8  0.448512     -0.801821      -19.4186       19.4186       163.364       182.783    
   9  0.625244     -0.469613      -11.3732       11.3732       160.765       172.138    
  10  0.557627     -0.584065      -14.1450       14.1450       161.536       175.681    
  11  0.762657     -0.270947      -6.56185       6.56185       161.444       168.006    
  12  0.579328     -0.545887      -13.2204       13.2204       163.261       176.481    
  13  0.168395      -1.78144      -43.1433       43.1433       162.825       205.968    
  14  0.993282     -0.674111E-02 -0.163257      0.163257       160.315       160.478    
  15  0.573458     -0.556070      -13.4670       13.4670       161.786       175.253    
  16  0.900456     -0.104854      -2.53936       2.53936       160.107       162.647    
  17  0.961937     -0.388068E-01 -0.939830      0.939830       161.455       162.394    
  18  0.685702     -0.377312      -9.13782       9.13782       161.237       170.375    
  19  0.335644      -1.09171      -26.4391       26.4391       164.566       191.005    
  20  0.726392     -0.319666      -7.74172       7.74172       162.484       170.226    
  21  0.523515     -0.647189      -15.6737       15.6737       161.212       176.886    
  22  0.877914     -0.130206      -3.15336       3.15336       161.050       164.203    
  23  0.893563     -0.112539      -2.72549       2.72549       162.455       165.180    
  24  0.829449     -0.186994      -4.52866       4.52866       161.708       166.237    
  25  0.454457     -0.788653      -19.0997       19.0997       161.286       180.386    
  26  0.261407      -1.34168      -32.4930       32.4930       163.578       196.071    
  27  0.144225      -1.93638      -46.8957       46.8957       161.597       208.493    
  28  0.963744     -0.369299E-01 -0.894374      0.894374       162.816       163.710    
  29  0.267843      -1.31735      -31.9039       31.9039       163.057       194.960    
  30  0.251943E-01  -3.68114      -89.1505       89.1505       161.408       250.558    
  31  0.321532      -1.13466      -27.4794       27.4794       162.606       190.086    
  32  0.440903     -0.818930      -19.8330       19.8330       158.647       178.480    
  33  0.214416      -1.53984      -37.2921       37.2921       163.976       201.268    
  34  0.212185      -1.55030      -37.5454       37.5454       165.069       202.614    
  35  0.948253E-01  -2.35572      -57.0512       57.0512       154.957       212.008    
  36  0.507627     -0.678008      -16.4201       16.4201       162.050       178.471    
  37  0.415074     -0.879299      -21.2950       21.2950       155.759       177.054    
  38  0.768069     -0.263876      -6.39060       6.39060       158.314       164.705    
  39  0.462999E-01  -3.07261      -74.4132       74.4132       161.034       235.447    
  40  0.835390     -0.179856      -4.35580       4.35580       160.084       164.440    
  41  0.678734     -0.387526      -9.38519       9.38519       162.643       172.028    
  42  0.363569      -1.01179      -24.5036       24.5036       163.123       187.627    
  43  0.677161     -0.389846      -9.44136       9.44136       164.985       174.427    
  44  0.506668     -0.679899      -16.4659       16.4659       162.449       178.915    
  45  0.875658     -0.132779      -3.21567       3.21567       161.525       164.740    
  46  0.924863     -0.781102E-01  -1.89169       1.89169       159.760       161.651    
  47  0.794570E-01  -2.53254      -61.3335       61.3335       162.947       224.281    
  48  0.449212     -0.800261      -19.3809       19.3809       162.401       181.782    
  49  0.658987     -0.417051      -10.1002       10.1002       165.090       175.190    
  50  0.674357     -0.393995      -9.54185       9.54185       163.549       173.091    
  51  0.436334     -0.829348      -20.0853       20.0853       164.970       185.055    
  52  0.331871      -1.10301      -26.7128       26.7128       156.791       183.504    
  53  0.233029      -1.45659      -35.2761       35.2761       162.149       197.425    
  54  0.207666      -1.57183      -38.0668       38.0668       155.616       193.683    
  55  0.801765     -0.220940      -5.35077       5.35077       161.906       167.257    
  56  0.614336E-01  -2.78980      -67.5639       67.5639       167.774       235.338    
  57  0.167288      -1.78804      -43.3030       43.3030       161.557       204.860    
  58  0.718808     -0.330162      -7.99591       7.99591       189.195       197.191    
  59  0.981938     -0.182272E-01 -0.441430      0.441430       161.959       162.400    
  60  0.759328     -0.275322      -6.66780       6.66780       162.571       169.239    
  61  0.290749      -1.23530      -29.9166       29.9166       158.974       188.890    
  62  0.887200     -0.119685      -2.89855       2.89855       156.586       159.485    
  63  0.186280      -1.68051      -40.6988       40.6988       161.455       202.153    
  64  0.427708     -0.849315      -20.5689       20.5689       162.747       183.316    
  65  0.252777      -1.37525      -33.3060       33.3060       170.733       204.039    
  66  0.648648     -0.432865      -10.4832       10.4832       161.455       171.938    
  67  0.823358     -0.194364      -4.70715       4.70715       161.330       166.037    
  68  0.352572      -1.04250      -25.2475       25.2475       161.455       186.702    
  69  0.217910      -1.52367      -36.9006       36.9006       160.568       197.469    
  70  0.297394      -1.21270      -29.3694       29.3694       164.350       193.720    
  71  0.597449     -0.515086      -12.4744       12.4744       167.843       180.317    
  72  0.327024      -1.11772      -27.0692       27.0692       162.353       189.422    
  73  0.264314      -1.33062      -32.2251       32.2251       161.736       193.961    
  74  0.810025     -0.210691      -5.10254       5.10254       161.892       166.995    
  75  0.454229     -0.789155      -19.1119       19.1119       160.915       180.027    
loop,thermsimp(1:2)       47   76.8266       13.1472    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165        160.14          0.85          1.15         25.31          0.07          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166        159.06          0.85          1.15         25.31          0.05          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    159.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       47
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       48
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      165     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -13.7491       13.7491       156.586       170.336    
   2  0.216137      -1.53184      -37.0984       37.0984       158.419       195.517    
   3  0.476425     -0.741444      -17.9564       17.9564       160.315       178.271    
   4  0.184047      -1.69256      -40.9908       40.9908       159.760       200.750    
   5  0.722630     -0.324858      -7.86748       7.86748       161.455       169.322    
   6  0.887750     -0.119065      -2.88354       2.88354       161.959       164.842    
   7  0.236344      -1.44247      -34.9340       34.9340       161.413       196.347    
   8  0.798055     -0.225578      -5.46308       5.46308       160.107       165.571    
   9  0.425454     -0.854597      -20.6968       20.6968       162.816       183.513    
  10  0.605701     -0.501368      -12.1422       12.1422       161.050       173.192    
  11  0.742456     -0.297792      -7.21199       7.21199       160.084       167.296    
  12  0.378462E-01  -3.27423      -79.2958       79.2958       158.314       237.610    
  13  0.341910      -1.07321      -25.9911       25.9911       161.525       187.516    
  14  0.794971E-01  -2.53203      -61.3213       61.3213       162.455       223.776    
  15  0.586423     -0.533715      -12.9256       12.9256       161.330       174.255    
  16  0.990523     -0.952170E-02 -0.230598      0.230598       161.708       161.939    
  17  0.348475      -1.05419      -25.5305       25.5305       161.872       187.402    
  18  0.998034     -0.196755E-02 -0.476504E-01  0.476504E-01   161.892       161.940    
  19  0.616072     -0.484391      -11.7311       11.7311       161.906       173.637    
  20  0.427239     -0.850411      -20.5954       20.5954       161.444       182.040    
  21  0.598160     -0.513898      -12.4457       12.4457       155.551       167.996    
  22  0.642831     -0.441873      -10.7014       10.7014       162.571       173.272    
  23  0.392766     -0.934541      -22.6329       22.6329       160.681       183.314    
  24  0.738407     -0.303260      -7.34441       7.34441       162.484       169.829    
  25  0.334341      -1.09559      -26.5333       26.5333       161.237       187.771    
  26  0.997912     -0.208996E-02 -0.506150E-01  0.506150E-01   161.455       161.505    
  27  0.492305E-01  -3.01124      -72.9268       72.9268       162.643       235.570    
  28  0.304734      -1.18832      -28.7788       28.7788       160.765       189.544    
  29  0.159886      -1.83330      -44.3991       44.3991       163.549       207.948    
  30  0.991331     -0.870666E-02 -0.210859      0.210859       164.985       165.196    
  31  0.735164     -0.307662      -7.45102       7.45102       165.090       172.541    
  32  0.279948      -1.27315      -30.8334       30.8334       161.786       192.620    
  33  0.457260     -0.782502      -18.9508       18.9508       161.536       180.486    
  34  0.678170     -0.388358      -9.40532       9.40532       163.261       172.666    
  35  0.689603     -0.371639      -9.00042       9.00042       161.212       170.212    
  36  0.468470     -0.758283      -18.3642       18.3642       155.759       174.124    
  37  0.937429     -0.646141E-01  -1.56484       1.56484       162.050       163.615    
  38  0.115915      -2.15490      -52.1877       52.1877       158.647       210.835    
  39  0.125789      -2.07315      -50.2078       50.2078       162.449       212.657    
  40  0.137562      -1.98368      -48.0412       48.0412       160.915       208.956    
  41  0.273901      -1.29499      -31.3622       31.3622       167.843       199.205    
  42  0.934963     -0.672484E-01  -1.62864       1.62864       161.286       162.915    
  43  0.450296     -0.797850      -19.3225       19.3225       162.401       181.723    
  44  0.681645     -0.383246      -9.28153       9.28153       163.364       172.646    
  45  0.282914E-01  -3.56520      -86.3426       86.3426       162.747       249.089    
  46  0.962226     -0.385062E-01 -0.932550      0.932550       156.791       157.724    
  47  0.771412     -0.259533      -6.28541       6.28541       164.970       171.255    
  48  0.778208     -0.250761      -6.07299       6.07299       161.455       167.528    
  49  0.945686     -0.558450E-01  -1.35246       1.35246       163.123       164.476    
  50  0.648669     -0.432833      -10.4824       10.4824       158.974       169.456    
  51  0.214283      -1.54046      -37.3070       37.3070       162.353       199.660    
  52  0.692999     -0.366726      -8.88145       8.88145       162.606       171.488    
  53  0.966323     -0.342573E-01 -0.829649      0.829649       164.566       165.396    
  54  0.975007     -0.253104E-01 -0.612973      0.612973       155.616       156.229    
  55  0.947991E-01  -2.35600      -57.0579       57.0579       164.350       221.408    
  56  0.195092      -1.63429      -39.5794       39.5794       161.736       201.316    
  57  0.459282     -0.778091      -18.8439       18.8439       163.057       181.900    
  58  0.563954     -0.572782      -13.8717       13.8717       163.578       177.450    
  59  0.482884     -0.727978      -17.6303       17.6303       189.195       206.826    
  60  0.270357      -1.30801      -31.6777       31.6777       162.149       193.827    
  61  0.184282      -1.69129      -40.9599       40.9599       160.568       201.528    
  62  0.486455     -0.720611      -17.4519       17.4519       163.976       181.428    
  63  0.348603      -1.05382      -25.5217       25.5217       161.455       186.976    
  64  0.556175     -0.586673      -14.2081       14.2081       165.069       179.277    
  65  0.125277      -2.07723      -50.3067       50.3067       170.733       221.040    
  66  0.473622     -0.747346      -18.0994       18.0994       161.557       179.657    
  67  0.762738     -0.270841      -6.55928       6.55928       162.825       169.384    
  68  0.898920     -0.106561      -2.58072       2.58072       161.597       164.178    
  69  0.646772E-01  -2.73835      -66.3178       66.3178       154.957       221.274    
  70  0.303985      -1.19078      -28.8385       28.8385       162.947       191.786    
  71  0.561577     -0.577006      -13.9740       13.9740       152.236       166.211    
  72  0.522748     -0.648656      -15.7093       15.7093       167.774       183.483    
  73  0.916158     -0.875659E-01  -2.12069       2.12069       161.034       163.154    
  74  0.986389     -0.137046E-01 -0.331899      0.331899       161.207       161.539    
  75  0.944439     -0.571647E-01  -1.38442       1.38442       159.061       160.446    
loop,thermsimp(1:2)       48   13.7491       37.0984    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167        158.35          0.86          1.15         25.28          0.07          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168        174.85          0.87          1.15         25.30          0.07          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       48
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       49
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      167     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -41.3991       41.3991       155.616       197.015    
   2  0.335083      -1.09338      -26.4796       26.4796       156.791       183.271    
   3  0.585160     -0.535871      -12.9778       12.9778       159.061       172.039    
   4  0.445729     -0.808044      -19.5694       19.5694       161.455       181.024    
   5  0.963605     -0.370741E-01 -0.897867      0.897867       161.207       162.105    
   6  0.538074     -0.619758      -15.0094       15.0094       161.708       176.718    
   7  0.971443     -0.289729E-01 -0.701672      0.701672       161.892       162.594    
   8  0.817136     -0.201950      -4.89086       4.89086       161.286       166.177    
   9  0.216943      -1.52812      -37.0083       37.0083       161.034       198.042    
  10  0.572311     -0.558074      -13.5155       13.5155       162.050       175.566    
  11  0.511761     -0.669897      -16.2237       16.2237       161.597       177.821    
  12  0.331920E-01  -3.40545      -82.4738       82.4738       163.123       245.597    
  13  0.662680     -0.411462      -9.96487       9.96487       161.959       171.924    
  14  0.578679     -0.547007      -13.2475       13.2475       164.985       178.233    
  15  0.473979     -0.746592      -18.0811       18.0811       164.566       182.647    
  16  0.243750      -1.41161      -34.1867       34.1867       160.107       194.294    
  17  0.784227     -0.243057      -5.88641       5.88641       152.236       158.123    
  18  0.215065      -1.53682      -37.2189       37.2189       160.084       197.303    
  19  0.813272     -0.206689      -5.00564       5.00564       161.455       166.460    
  20  0.877336     -0.130865      -3.16932       3.16932       155.551       158.720    
  21  0.911070     -0.931357E-01  -2.25558       2.25558       161.455       163.710    
  22  0.424500     -0.856844      -20.7512       20.7512       162.825       183.576    
  23  0.122508      -2.09958      -50.8480       50.8480       158.974       209.822    
  24  0.173199      -1.75331      -42.4621       42.4621       162.484       204.946    
  25  0.243010      -1.41465      -34.2603       34.2603       161.212       195.472    
  26  0.618804     -0.479966      -11.6239       11.6239       156.586       168.210    
  27  0.365303      -1.00703      -24.3884       24.3884       164.970       189.358    
  28  0.178054      -1.72567      -41.7926       41.7926       162.606       204.399    
  29  0.416122     -0.876776      -21.2339       21.2339       165.090       186.324    
  30  0.789287     -0.236625      -5.73064       5.73064       163.364       169.095    
  31  0.786736     -0.239863      -5.80905       5.80905       163.261       169.070    
  32  0.295880      -1.21780      -29.4929       29.4929       161.050       190.543    
  33  0.418649     -0.870722      -21.0873       21.0873       162.571       183.658    
  34  0.706992     -0.346736      -8.39731       8.39731       161.906       170.304    
  35  0.281863      -1.26633      -30.6683       30.6683       155.759       186.428    
  36  0.357290      -1.02921      -24.9256       24.9256       161.330       186.255    
  37  0.174180      -1.74767      -42.3253       42.3253       163.578       205.903    
  38  0.190924      -1.65588      -40.1024       40.1024       160.315       200.417    
  39  0.630369     -0.461449      -11.1755       11.1755       165.069       176.244    
  40  0.252261      -1.37729      -33.3555       33.3555       161.557       194.913    
  41  0.359213      -1.02384      -24.7956       24.7956       161.536       186.331    
  42  0.740344     -0.300640      -7.28097       7.28097       163.976       171.257    
  43  0.283211      -1.26156      -30.5528       30.5528       162.401       192.953    
  44  0.965119     -0.355039E-01 -0.859839      0.859839       163.057       163.916    
  45  0.389600     -0.942634      -22.8289       22.8289       161.444       184.273    
  46  0.598383     -0.513525      -12.4366       12.4366       160.681       173.117    
  47  0.631795     -0.459190      -11.1208       11.1208       167.774       178.895    
  48  0.997460     -0.254363E-02 -0.616022E-01  0.616022E-01   162.816       162.878    
  49  0.192532      -1.64749      -39.8993       39.8993       161.455       201.354    
  50  0.769348     -0.262212      -6.35029       6.35029       161.872       168.222    
  51  0.740745     -0.300099      -7.26785       7.26785       161.525       168.792    
  52  0.590587     -0.526639      -12.7542       12.7542       161.237       173.992    
  53  0.628310E-01  -2.76731      -67.0192       67.0192       160.765       227.784    
  54  0.515529     -0.662562      -16.0460       16.0460       162.947       178.993    
  55  0.306025      -1.18409      -28.6765       28.6765       161.786       190.463    
  56  0.686790     -0.375726      -9.09941       9.09941       162.149       171.249    
  57  0.357910      -1.02747      -24.8836       24.8836       158.419       183.302    
  58  0.267469      -1.31875      -31.9378       31.9378       161.413       193.350    
  59  0.410193     -0.891128      -21.5815       21.5815       167.843       189.424    
  60  0.490314     -0.712709      -17.2605       17.2605       162.353       179.613    
  61  0.395217     -0.928320      -22.4822       22.4822       159.760       182.242    
  62  0.641491E-01  -2.74655      -66.5163       66.5163       161.736       228.253    
  63  0.610173     -0.494012      -11.9641       11.9641       160.568       172.532    
  64  0.657523     -0.419276      -10.1541       10.1541       189.195       199.349    
  65  0.172961      -1.75469      -42.4954       42.4954       163.549       206.044    
  66  0.166793      -1.79100      -43.3748       43.3748       160.915       204.290    
  67  0.184181      -1.69184      -40.9732       40.9732       158.647       199.620    
  68  0.728490     -0.316781      -7.67187       7.67187       162.449       170.121    
  69  0.307541      -1.17915      -28.5568       28.5568       170.733       199.290    
  70  0.929000     -0.736468E-01  -1.78359       1.78359       154.957       156.740    
  71  0.111633      -2.19254      -53.0994       53.0994       164.350       217.450    
  72  0.920233     -0.831286E-01  -2.01322       2.01322       162.455       164.468    
  73  0.808772     -0.212238      -5.14003       5.14003       162.643       167.783    
  74  0.834952     -0.180381      -4.36850       4.36850       158.314       162.683    
  75  0.391863E-01  -3.23943      -78.4531       78.4531       158.348       236.801    
loop,thermsimp(1:2)       49   41.3991       26.4796    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169        161.13          0.83          1.15         25.29          0.09          0.06         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       49
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       50
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      168     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -83.5702       83.5702       154.957       238.527    
   2  0.601445     -0.508421      -12.3130       12.3130       152.236       164.549    
   3  0.651191     -0.428952      -10.3884       10.3884       155.551       165.939    
   4  0.187303      -1.67503      -40.5661       40.5661       161.207       201.773    
   5  0.664603     -0.408566      -9.89472       9.89472       161.892       171.787    
   6  0.945236     -0.563208E-01  -1.36399       1.36399       158.314       159.678    
   7  0.865870     -0.144020      -3.48790       3.48790       162.816       166.304    
   8  0.674117     -0.394351      -9.55047       9.55047       161.455       171.005    
   9  0.959689E-01  -2.34373      -56.7609       56.7609       163.057       219.817    
  10  0.663337     -0.410472      -9.94088       9.94088       162.455       172.396    
  11  0.384854     -0.954891      -23.1257       23.1257       161.286       184.412    
  12  0.892338     -0.113910      -2.75870       2.75870       161.455       164.213    
  13  0.470837     -0.753243      -18.2422       18.2422       162.643       180.885    
  14  0.262618      -1.33706      -32.3811       32.3811       156.586       188.968    
  15  0.877143     -0.131085      -3.17463       3.17463       161.872       165.047    
  16  0.262102      -1.33902      -32.4287       32.4287       161.525       193.953    
  17  0.306130      -1.18375      -28.6682       28.6682       163.261       191.929    
  18  0.251844      -1.37895      -33.3956       33.3956       163.364       196.760    
  19  0.371147     -0.991157      -24.0040       24.0040       162.449       186.453    
  20  0.244393E-01  -3.71156      -89.8874       89.8874       161.906       251.794    
  21  0.550903     -0.596197      -14.4388       14.4388       162.149       176.588    
  22  0.509078     -0.675154      -16.3510       16.3510       163.976       180.327    
  23  0.741178     -0.299515      -7.25371       7.25371       161.959       169.213    
  24  0.585965     -0.534496      -12.9445       12.9445       159.061       172.006    
  25  0.602491     -0.506683      -12.2709       12.2709       160.568       172.839    
  26  0.532366     -0.630423      -15.2677       15.2677       160.681       175.949    
  27  0.264247      -1.33087      -32.2313       32.2313       161.237       193.469    
  28  0.468512     -0.758194      -18.3621       18.3621       162.050       180.412    
  29  0.338122      -1.08435      -26.2610       26.2610       165.069       191.329    
  30  0.815455     -0.204008      -4.94072       4.94072       161.708       166.649    
  31  0.126007      -2.07142      -50.1660       50.1660       161.597       211.763    
  32  0.391435     -0.937937      -22.7151       22.7151       164.985       187.701    
  33  0.477179     -0.739864      -17.9182       17.9182       167.774       185.692    
  34  0.926058     -0.768180E-01  -1.86039       1.86039       162.947       164.807    
  35  0.305992E-01  -3.48678      -84.4435       84.4435       162.353       246.796    
  36  0.142122      -1.95107      -47.2514       47.2514       161.455       208.706    
  37  0.934627E-01  -2.37019      -57.4018       57.4018       159.760       217.161    
  38  0.933240     -0.690924E-01  -1.67329       1.67329       164.566       166.239    
  39  0.551354     -0.595378      -14.4190       14.4190       156.791       171.210    
  40  0.167646      -1.78590      -43.2513       43.2513       158.419       201.670    
  41  0.657770     -0.418900      -10.1450       10.1450       162.825       172.970    
  42  0.937012     -0.650587E-01  -1.57560       1.57560       162.571       164.147    
  43  0.435130     -0.832109      -20.1522       20.1522       161.444       181.596    
  44  0.346278E-01  -3.36310      -81.4481       81.4481       161.330       242.778    
  45  0.529273     -0.636251      -15.4089       15.4089       165.090       180.499    
  46  0.543808     -0.609159      -14.7527       14.7527       161.536       176.288    
  47  0.476993     -0.740254      -17.9276       17.9276       155.759       173.687    
  48  0.602365     -0.506891      -12.2760       12.2760       164.970       177.246    
  49  0.429141     -0.845970      -20.4879       20.4879       167.843       188.330    
  50  0.161300E-01  -4.12707      -99.9502       99.9502       161.786       261.737    
  51  0.806405     -0.215169      -5.21101       5.21101       161.050       166.261    
  52  0.577848E-01  -2.85103      -69.0468       69.0468       162.401       231.447    
  53  0.992308     -0.772154E-02 -0.187002      0.187002       161.413       161.600    
  54  0.130687      -2.03495      -49.2829       49.2829       160.107       209.390    
  55  0.844072     -0.169518      -4.10541       4.10541       161.557       165.663    
  56  0.900890     -0.104372      -2.52771       2.52771       161.212       163.740    
  57  0.886923E-01  -2.42258      -58.6705       58.6705       155.616       214.286    
  58  0.675479     -0.392334      -9.50161       9.50161       160.084       169.586    
  59  0.486368     -0.720791      -17.4562       17.4562       161.034       178.490    
  60  0.868319E-01  -2.44378      -59.1839       59.1839       170.733       229.917    
  61  0.536051     -0.623527      -15.1007       15.1007       189.195       204.296    
  62  0.916344     -0.873636E-01  -2.11579       2.11579       158.647       160.763    
  63  0.264660E-01  -3.63190      -87.9579       87.9579       160.315       248.273    
  64  0.765006     -0.267871      -6.48735       6.48735       161.455       167.942    
  65  0.755495     -0.280383      -6.79036       6.79036       160.915       167.705    
  66  0.149819      -1.89833      -45.9740       45.9740       162.606       208.580    
  67  0.514409     -0.664736      -16.0987       16.0987       162.484       178.583    
  68  0.902494E-01  -2.40518      -58.2491       58.2491       163.578       221.827    
  69  0.837965     -0.176779      -4.28127       4.28127       163.549       167.830    
  70  0.833448     -0.182184      -4.41217       4.41217       158.974       163.386    
  71  0.830623     -0.185580      -4.49441       4.49441       164.350       168.845    
  72  0.391825     -0.936940      -22.6910       22.6910       160.765       183.456    
  73  0.561993     -0.576266      -13.9561       13.9561       161.736       175.692    
  74  0.106783      -2.23696      -54.1751       54.1751       158.348       212.523    
  75  0.997923     -0.207917E-02 -0.503537E-01  0.503537E-01   161.131       161.182    
loop,thermsimp(1:2)       50   83.5702       12.3130    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170        160.77          0.85          1.14         25.36          0.23          0.06         27.63
Just calling func    0   0         27.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    171        160.26          0.86          1.13         25.24          0.28          0.05         27.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       50
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       51
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      170     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -1.77589       1.77589       158.314       160.090    
   2  0.669511     -0.401208      -9.71653       9.71653       158.647       168.364    
   3  0.863337E-01  -2.44954      -59.3233       59.3233       161.131       220.455    
   4  0.279945      -1.27316      -30.8337       30.8337       161.413       192.246    
   5  0.832640     -0.183154      -4.43566       4.43566       158.974       163.409    
   6  0.848933     -0.163775      -3.96634       3.96634       161.212       165.178    
   7  0.141794      -1.95338      -47.3074       47.3074       162.571       209.878    
   8  0.208764      -1.56655      -37.9391       37.9391       161.455       199.394    
   9  0.755787     -0.279996      -6.78100       6.78100       152.236       159.017    
  10  0.177416      -1.72926      -41.8795       41.8795       162.947       204.827    
  11  0.405148     -0.903503      -21.8812       21.8812       161.872       183.753    
  12  0.640380     -0.445693      -10.7939       10.7939       161.557       172.351    
  13  0.548060     -0.601370      -14.5641       14.5641       155.551       170.115    
  14  0.773287     -0.257105      -6.22661       6.22661       164.566       170.793    
  15  0.180768      -1.71054      -41.4262       41.4262       161.050       202.476    
  16  0.135846      -1.99624      -48.3452       48.3452       162.816       211.161    
  17  0.601016     -0.509133      -12.3303       12.3303       161.708       174.038    
  18  0.302263      -1.19646      -28.9760       28.9760       160.915       189.891    
  19  0.189428      -1.66374      -40.2929       40.2929       163.549       203.842    
  20  0.737158     -0.304953      -7.38541       7.38541       161.455       168.840    
  21  0.790680     -0.234862      -5.68793       5.68793       164.350       170.038    
  22  0.177192E-01  -4.03310      -97.6745       97.6745       161.959       259.633    
  23  0.236042      -1.44375      -34.9649       34.9649       160.084       195.049    
  24  0.459229     -0.778206      -18.8467       18.8467       161.455       180.301    
  25  0.586479E-01  -2.83620      -68.6877       68.6877       156.791       225.479    
  26  0.263766      -1.33269      -32.2754       32.2754       161.892       194.167    
  27  0.942550     -0.591663E-01  -1.43290       1.43290       159.061       160.494    
  28  0.106855      -2.23628      -54.1586       54.1586       162.455       216.614    
  29  0.710700     -0.341505      -8.27062       8.27062       160.568       168.839    
  30  0.207109E-01  -3.87709      -93.8962       93.8962       162.825       256.721    
  31  0.901203     -0.104025      -2.51930       2.51930       155.759       158.279    
  32  0.949751     -0.515555E-01  -1.24858       1.24858       161.736       162.985    
  33  0.343487      -1.06861      -25.8797       25.8797       160.681       186.561    
  34  0.875043     -0.133483      -3.23271       3.23271       161.536       164.768    
  35  0.122447E-01  -4.40266      -106.625       106.625       162.149       268.774    
  36  0.820650     -0.197659      -4.78694       4.78694       164.970       169.757    
  37  0.748866     -0.289195      -7.00378       7.00378       161.034       168.037    
  38  0.594525     -0.519992      -12.5933       12.5933       162.484       175.077    
  39  0.927863E-01  -2.37746      -57.5777       57.5777       163.976       221.554    
  40  0.631335     -0.459918      -11.1384       11.1384       162.050       173.189    
  41  0.282620      -1.26365      -30.6034       30.6034       165.090       195.693    
  42  0.707811     -0.345578      -8.36926       8.36926       162.643       171.012    
  43  0.930463     -0.720730E-01  -1.74548       1.74548       161.444       163.190    
  44  0.988563     -0.115032E-01 -0.278588      0.278588       160.765       161.044    
  45  0.869439     -0.139907      -3.38830       3.38830       161.286       164.675    
  46  0.693921     -0.365397      -8.84925       8.84925       167.774       176.623    
  47  0.731753     -0.312312      -7.56363       7.56363       162.449       170.013    
  48  0.848712     -0.164035      -3.97263       3.97263       164.985       168.958    
  49  0.174447      -1.74613      -42.2882       42.2882       167.843       210.131    
  50  0.313212      -1.16087      -28.1143       28.1143       156.586       184.701    
  51  0.880789     -0.126937      -3.07418       3.07418       165.069       168.143    
  52  0.441967     -0.816520      -19.7746       19.7746       163.261       183.036    
  53  0.624106     -0.471435      -11.4173       11.4173       161.237       172.655    
  54  0.447426     -0.804244      -19.4773       19.4773       161.525       181.002    
  55  0.681696     -0.383171      -9.27972       9.27972       163.364       172.644    
  56  0.336384      -1.08950      -26.3858       26.3858       158.419       184.804    
  57  0.197044      -1.62433      -39.3383       39.3383       161.207       200.545    
  58  0.186834E-01  -3.98012      -96.3912       96.3912       189.195       285.587    
  59  0.467980     -0.759329      -18.3896       18.3896       162.606       180.996    
  60  0.607270     -0.498782      -12.0796       12.0796       161.455       173.534    
  61  0.299128      -1.20689      -29.2286       29.2286       160.107       189.336    
  62  0.166354      -1.79364      -43.4386       43.4386       161.597       205.036    
  63  0.542834     -0.610952      -14.7961       14.7961       158.348       173.144    
  64  0.811476     -0.208901      -5.05920       5.05920       155.616       160.675    
  65  0.520065     -0.653802      -15.8339       15.8339       159.760       175.594    
  66  0.955839     -0.451662E-01  -1.09384       1.09384       163.057       164.150    
  67  0.729602     -0.315256      -7.63492       7.63492       163.578       171.213    
  68  0.792398     -0.232691      -5.63536       5.63536       170.733       176.368    
  69  0.803787     -0.218421      -5.28975       5.28975       162.401       167.690    
  70  0.812756     -0.207324      -5.02102       5.02102       154.957       159.978    
  71  0.189528      -1.66322      -40.2802       40.2802       161.330       201.610    
  72  0.898459     -0.107074      -2.59314       2.59314       162.353       164.946    
  73  0.676452     -0.390894      -9.46676       9.46676       160.315       169.782    
  74  0.648856     -0.432545      -10.4755       10.4755       161.906       172.382    
  75  0.684885     -0.378505      -9.16670       9.16670       160.258       169.424    
loop,thermsimp(1:2)       51   1.77589       9.71653    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172        161.48          0.86          1.15         25.31          0.03          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       51
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       52
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      171     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -10.1354       10.1354       155.759       165.895    
   2  0.385391     -0.953496      -23.0920       23.0920       152.236       175.328    
   3  0.323679      -1.12800      -27.3182       27.3182       154.957       182.275    
   4  0.402516E-01  -3.21260      -77.8035       77.8035       158.314       236.118    
   5  0.866022     -0.143846      -3.48368       3.48368       159.061       162.545    
   6  0.560147     -0.579555      -14.0358       14.0358       155.616       169.652    
   7  0.389098     -0.943925      -22.8601       22.8601       160.765       183.625    
   8  0.470755     -0.753417      -18.2464       18.2464       161.736       179.983    
   9  0.794299     -0.230295      -5.57733       5.57733       161.444       167.022    
  10  0.897132     -0.108553      -2.62895       2.62895       158.974       161.603    
  11  0.359474      -1.02311      -24.7780       24.7780       163.057       187.835    
  12  0.604694     -0.503032      -12.1825       12.1825       161.286       173.469    
  13  0.101554      -2.28717      -55.3910       55.3910       161.536       216.927    
  14  0.274480      -1.29288      -31.3111       31.3111       162.353       193.664    
  15  0.916086     -0.876445E-01  -2.12259       2.12259       161.212       163.334    
  16  0.820070E-01  -2.50095      -60.5685       60.5685       162.401       222.969    
  17  0.975902     -0.243929E-01 -0.590752      0.590752       161.034       161.624    
  18  0.131665      -2.02750      -49.1023       49.1023       165.069       214.171    
  19  0.751313     -0.285933      -6.92478       6.92478       158.647       165.572    
  20  0.775324     -0.254475      -6.16291       6.16291       160.568       166.731    
  21  0.237000      -1.43969      -34.8668       34.8668       161.455       196.321    
  22  0.113641      -2.17471      -52.6675       52.6675       164.985       217.653    
  23  0.762281     -0.271440      -6.57378       6.57378       160.258       166.832    
  24  0.783730     -0.243690      -5.90174       5.90174       164.970       170.871    
  25  0.492891     -0.707468      -17.1336       17.1336       160.315       177.449    
  26  0.471904     -0.750980      -18.1874       18.1874       162.449       180.637    
  27  0.855781     -0.155740      -3.77175       3.77175       164.350       168.122    
  28  0.636473     -0.451814      -10.9421       10.9421       155.551       166.493    
  29  0.433340     -0.836232      -20.2520       20.2520       164.566       184.818    
  30  0.482236     -0.729321      -17.6628       17.6628       162.643       180.306    
  31  0.855143E-01  -2.45907      -59.5543       59.5543       163.578       223.132    
  32  0.916579     -0.871071E-01  -2.10958       2.10958       161.557       163.667    
  33  0.232519      -1.45878      -35.3291       35.3291       161.906       197.235    
  34  0.283977      -1.25886      -30.4874       30.4874       163.364       193.852    
  35  0.401228E-01  -3.21581      -77.8811       77.8811       161.237       239.118    
  36  0.235231      -1.44719      -35.0483       35.0483       158.348       193.396    
  37  0.233426      -1.45489      -35.2348       35.2348       162.050       197.285    
  38  0.903594     -0.101376      -2.45513       2.45513       161.455       163.910    
  39  0.857571     -0.153651      -3.72115       3.72115       161.708       165.429    
  40  0.444085     -0.811739      -19.6589       19.6589       162.484       182.143    
  41  0.151055      -1.89011      -45.7751       45.7751       159.760       205.535    
  42  0.745694     -0.293440      -7.10658       7.10658       170.733       177.840    
  43  0.470647E-01  -3.05623      -74.0164       74.0164       167.774       241.790    
  44  0.344459      -1.06578      -25.8113       25.8113       161.455       187.266    
  45  0.592738     -0.523004      -12.6662       12.6662       162.606       175.273    
  46  0.754292     -0.281975      -6.82893       6.82893       161.525       168.353    
  47  0.162950      -1.81431      -43.9394       43.9394       163.261       207.200    
  48  0.939100     -0.628333E-01  -1.52171       1.52171       161.872       163.394    
  49  0.966845     -0.337175E-01 -0.816577      0.816577       156.586       157.403    
  50  0.287323      -1.24715      -30.2036       30.2036       158.419       188.622    
  51  0.835081     -0.180227      -4.36476       4.36476       160.681       165.046    
  52  0.836052     -0.179064      -4.33661       4.33661       160.107       164.444    
  53  0.382321     -0.961495      -23.2857       23.2857       160.915       184.201    
  54  0.873869     -0.134824      -3.26520       3.26520       161.413       164.678    
  55  0.169635      -1.77411      -42.9656       42.9656       161.892       204.858    
  56  0.511680     -0.670055      -16.2275       16.2275       160.084       176.312    
  57  0.687848     -0.374188      -9.06214       9.06214       165.090       174.152    
  58  0.659885     -0.415689      -10.0672       10.0672       161.455       171.522    
  59  0.615967     -0.484562      -11.7352       11.7352       161.207       172.942    
  60  0.600029     -0.510778      -12.3701       12.3701       161.330       173.700    
  61  0.166513      -1.79268      -43.4155       43.4155       161.050       204.465    
  62  0.730640     -0.313835      -7.60052       7.60052       163.549       171.149    
  63  0.168194      -1.78264      -43.1723       43.1723       162.947       206.119    
  64  0.562652E-01  -2.87768      -69.6922       69.6922       161.597       231.290    
  65  0.787921     -0.238357      -5.77257       5.77257       162.571       168.344    
  66  0.937052     -0.650163E-01  -1.57458       1.57458       167.843       169.417    
  67  0.548780     -0.600057      -14.5323       14.5323       162.816       177.348    
  68  0.893892     -0.112170      -2.71655       2.71655       162.455       165.172    
  69  0.192558E-01  -3.94994      -95.6605       95.6605       161.131       256.792    
  70  0.818438     -0.200358      -4.85231       4.85231       163.976       168.829    
  71  0.621039     -0.476361      -11.5366       11.5366       156.791       168.328    
  72  0.868045     -0.141511      -3.42714       3.42714       162.825       166.252    
  73  0.579309     -0.545920      -13.2212       13.2212       161.959       175.180    
  74  0.646104E-01  -2.73938      -66.3428       66.3428       162.149       228.492    
  75  0.983794     -0.163390E-01 -0.395700      0.395700       161.480       161.875    
loop,thermsimp(1:2)       52   10.1354       23.0920    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173        162.98          0.85          1.15         25.31          0.16          0.05         27.53
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    162.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       52
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       53
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      172     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -13.1194       13.1194       156.586       169.706    
   2  0.307993      -1.17768      -28.5212       28.5212       158.974       187.495    
   3  0.551684     -0.594779      -14.4045       14.4045       161.034       175.438    
   4  0.969976     -0.304835E-01 -0.738256      0.738256       161.480       162.218    
   5  0.401714     -0.912015      -22.0874       22.0874       159.061       181.149    
   6  0.336211      -1.09002      -26.3982       26.3982       161.212       187.610    
   7  0.649191     -0.432028      -10.4629       10.4629       161.872       172.335    
   8  0.426986     -0.851005      -20.6098       20.6098       161.557       182.167    
   9  0.479997     -0.733976      -17.7756       17.7756       161.455       179.230    
  10  0.441527     -0.817516      -19.7988       19.7988       160.107       179.906    
  11  0.218988      -1.51874      -36.7811       36.7811       161.413       198.194    
  12  0.935549     -0.666221E-01  -1.61347       1.61347       160.681       162.294    
  13  0.159996      -1.83261      -44.3825       44.3825       162.455       206.837    
  14  0.486870     -0.719759      -17.4312       17.4312       161.708       179.139    
  15  0.835520     -0.179701      -4.35202       4.35202       158.647       162.999    
  16  0.643759     -0.440431      -10.6664       10.6664       155.759       166.426    
  17  0.177188      -1.73054      -41.9106       41.9106       162.825       204.735    
  18  0.408356     -0.895617      -21.6902       21.6902       155.551       177.241    
  19  0.463768     -0.768371      -18.6086       18.6086       160.568       179.177    
  20  0.616820     -0.483178      -11.7017       11.7017       160.258       171.959    
  21  0.377083     -0.975289      -23.6197       23.6197       161.444       185.064    
  22  0.278016      -1.28008      -31.0011       31.0011       164.350       195.351    
  23  0.746435     -0.292446      -7.08252       7.08252       156.791       163.874    
  24  0.872234     -0.136697      -3.31056       3.31056       162.571       165.881    
  25  0.887073E-01  -2.42241      -58.6664       58.6664       161.525       220.191    
  26  0.124913      -2.08014      -50.3772       50.3772       163.976       214.353    
  27  0.918160     -0.853835E-01  -2.06783       2.06783       167.843       169.910    
  28  0.924603     -0.783912E-01  -1.89849       1.89849       155.616       157.514    
  29  0.863214     -0.147092      -3.56231       3.56231       164.970       168.532    
  30  0.823499E-02  -4.79936      -116.232       116.232       163.549       279.781    
  31  0.548113     -0.601275      -14.5618       14.5618       161.455       176.016    
  32  0.800553     -0.222452      -5.38738       5.38738       161.207       166.594    
  33  0.180829      -1.71020      -41.4180       41.4180       161.286       202.704    
  34  0.968975E-01  -2.33410      -56.5277       56.5277       161.330       217.857    
  35  0.749847     -0.287886      -6.97209       6.97209       165.090       172.062    
  36  0.902028     -0.103110      -2.49714       2.49714       161.959       164.456    
  37  0.312083      -1.16449      -28.2017       28.2017       162.606       190.808    
  38  0.472691     -0.749313      -18.1470       18.1470       152.236       170.383    
  39  0.970346     -0.301026E-01 -0.729030      0.729030       160.084       160.813    
  40  0.485853     -0.721850      -17.4819       17.4819       162.816       180.298    
  41  0.604658     -0.503092      -12.1840       12.1840       160.315       172.499    
  42  0.172238      -1.75888      -42.5969       42.5969       170.733       213.330    
  43  0.359079E-01  -3.32680      -80.5690       80.5690       161.736       242.305    
  44  0.464923     -0.765884      -18.5483       18.5483       162.643       181.191    
  45  0.293512      -1.22584      -29.6875       29.6875       162.449       192.137    
  46  0.572788     -0.557239      -13.4953       13.4953       162.484       175.979    
  47  0.931713     -0.707300E-01  -1.71295       1.71295       154.957       156.669    
  48  0.983012     -0.171340E-01 -0.414955      0.414955       160.765       161.180    
  49  0.572194     -0.558278      -13.5205       13.5205       160.915       174.435    
  50  0.272189      -1.30126      -31.5141       31.5141       164.566       196.080    
  51  0.521081     -0.651849      -15.7866       15.7866       161.455       177.241    
  52  0.560075     -0.579685      -14.0389       14.0389       163.057       177.095    
  53  0.442251     -0.815877      -19.7591       19.7591       158.419       178.178    
  54  0.541873     -0.612723      -14.8390       14.8390       158.348       173.187    
  55  0.619019     -0.479619      -11.6155       11.6155       162.353       173.968    
  56  0.554460     -0.589760      -14.2829       14.2829       163.364       177.647    
  57  0.942853     -0.588454E-01  -1.42513       1.42513       161.455       162.880    
  58  0.289656E-01  -3.54165      -85.7723       85.7723       161.906       247.678    
  59  0.420166     -0.867105      -20.9997       20.9997       162.050       183.050    
  60  0.304886      -1.18782      -28.7668       28.7668       161.050       189.816    
  61  0.799970     -0.223182      -5.40506       5.40506       161.892       167.297    
  62  0.330194      -1.10808      -26.8356       26.8356       159.760       186.595    
  63  0.193095      -1.64457      -39.8285       39.8285       162.947       202.776    
  64  0.151812      -1.88511      -45.6540       45.6540       163.261       208.915    
  65  0.463265     -0.769456      -18.6348       18.6348       165.069       183.703    
  66  0.468691     -0.757811      -18.3528       18.3528       161.536       179.888    
  67  0.442877     -0.814463      -19.7248       19.7248       164.985       184.710    
  68  0.652140     -0.427496      -10.3532       10.3532       162.401       172.754    
  69  0.258134      -1.35428      -32.7982       32.7982       163.578       196.376    
  70  0.530519E-01  -2.93648      -71.1163       71.1163       162.149       233.266    
  71  0.479897     -0.734184      -17.7806       17.7806       161.597       179.378    
  72  0.266463      -1.32252      -32.0290       32.0290       158.314       190.343    
  73  0.380965     -0.965047      -23.3717       23.3717       161.237       184.609    
  74  0.429433     -0.845291      -20.4714       20.4714       167.774       188.245    
  75  0.174920      -1.74343      -42.2226       42.2226       162.983       205.205    
loop,thermsimp(1:2)       53   13.1194       28.5212    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174        157.20          0.86          1.15         25.28          0.09          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175        166.94          0.86          1.15         25.31          0.10          0.04         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    157.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       53
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       54
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      174     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -13.7854       13.7854       154.957       168.742    
   2  0.698829     -0.358349      -8.67856       8.67856       155.616       164.294    
   3  0.550231     -0.597418      -14.4684       14.4684       160.084       174.553    
   4  0.844966     -0.168459      -4.07977       4.07977       160.765       164.845    
   5  0.139804      -1.96751      -47.6496       47.6496       161.480       209.129    
   6  0.119451      -2.12485      -51.4600       51.4600       160.681       212.141    
   7  0.474112     -0.746312      -18.0743       18.0743       161.455       179.529    
   8  0.293024      -1.22750      -29.7278       29.7278       158.647       188.375    
   9  0.760137     -0.274256      -6.64198       6.64198       156.791       163.433    
  10  0.216376      -1.53074      -37.0717       37.0717       161.959       199.031    
  11  0.837069     -0.177849      -4.30717       4.30717       162.571       166.878    
  12  0.969258     -0.312245E-01 -0.756202      0.756202       155.759       156.516    
  13  0.335918      -1.09089      -26.4193       26.4193       161.207       187.626    
  14  0.966643     -0.339265E-01 -0.821639      0.821639       161.892       162.714    
  15  0.723887     -0.323119      -7.82536       7.82536       164.970       172.795    
  16  0.459929E-01  -3.07927      -74.5743       74.5743       156.586       231.161    
  17  0.536724     -0.622271      -15.0703       15.0703       167.843       182.913    
  18  0.432574     -0.838001      -20.2949       20.2949       152.236       172.531    
  19  0.160308      -1.83066      -44.3352       44.3352       160.258       204.593    
  20  0.885158     -0.121989      -2.95435       2.95435       165.090       168.044    
  21  0.753783     -0.282650      -6.84528       6.84528       161.872       168.717    
  22  0.135562      -1.99832      -48.3958       48.3958       160.315       208.711    
  23  0.817964     -0.200937      -4.86632       4.86632       162.401       167.267    
  24  0.286617      -1.24961      -30.2633       30.2633       158.348       188.611    
  25  0.319126      -1.14217      -27.6613       27.6613       162.353       190.014    
  26  0.104479E-01  -4.56135      -110.468       110.468       160.915       271.383    
  27  0.671407     -0.398379      -9.64802       9.64802       161.034       170.682    
  28  0.782955     -0.244680      -5.92572       5.92572       162.484       168.410    
  29  0.186689      -1.67831      -40.6457       40.6457       161.455       202.100    
  30  0.462519     -0.771067      -18.6738       18.6738       163.057       181.730    
  31  0.203171      -1.59371      -38.5967       38.5967       155.551       194.147    
  32  0.851762E-01  -2.46303      -59.6502       59.6502       161.455       221.105    
  33  0.702824     -0.352649      -8.54051       8.54051       163.364       171.905    
  34  0.747923     -0.290456      -7.03431       7.03431       158.419       165.453    
  35  0.224450      -1.49410      -36.1845       36.1845       161.708       197.893    
  36  0.243563E-02  -6.01755      -145.734       145.734       160.568       306.302    
  37  0.160790      -1.82766      -44.2626       44.2626       161.455       205.717    
  38  0.880431     -0.127343      -3.08402       3.08402       161.597       164.681    
  39  0.507306     -0.678640      -16.4354       16.4354       161.536       177.971    
  40  0.266019      -1.32419      -32.0694       32.0694       160.107       192.177    
  41  0.310751      -1.16876      -28.3053       28.3053       162.816       191.121    
  42  0.945006     -0.565640E-01  -1.36988       1.36988       159.061       160.431    
  43  0.265699E-01  -3.62797      -87.8630       87.8630       162.643       250.506    
  44  0.652842     -0.426420      -10.3271       10.3271       161.557       171.884    
  45  0.799409     -0.223882      -5.42202       5.42202       162.050       167.472    
  46  0.543529     -0.609672      -14.7651       14.7651       165.069       179.834    
  47  0.361947      -1.01626      -24.6119       24.6119       161.237       185.849    
  48  0.398721     -0.919492      -22.2684       22.2684       164.985       187.254    
  49  0.349489      -1.05128      -25.4601       25.4601       161.444       186.904    
  50  0.948739     -0.526212E-01  -1.27439       1.27439       159.760       161.034    
  51  0.346176      -1.06081      -25.6909       25.6909       158.974       184.664    
  52  0.678244     -0.388248      -9.40266       9.40266       161.212       170.614    
  53  0.858518     -0.152547      -3.69442       3.69442       167.774       171.468    
  54  0.835860E-01  -2.48188      -60.1066       60.1066       161.050       221.156    
  55  0.762568     -0.271063      -6.56466       6.56466       158.314       164.879    
  56  0.273927      -1.29489      -31.3600       31.3600       162.606       193.966    
  57  0.729557     -0.315318      -7.63644       7.63644       162.449       170.086    
  58  0.320381      -1.13825      -27.5663       27.5663       164.350       191.916    
  59  0.818134     -0.200729      -4.86129       4.86129       164.566       169.427    
  60  0.639548     -0.446993      -10.8254       10.8254       163.578       174.403    
  61  0.976107     -0.241828E-01 -0.585663      0.585663       161.413       161.998    
  62  0.232128      -1.46046      -35.3698       35.3698       161.286       196.656    
  63  0.215412      -1.53520      -37.1799       37.1799       162.947       200.127    
  64  0.770868     -0.260238      -6.30250       6.30250       162.825       169.127    
  65  0.147419E-01  -4.21706      -102.130       102.130       162.983       265.112    
  66  0.102273      -2.28010      -55.2200       55.2200       162.455       217.675    
  67  0.625951     -0.468483      -11.3458       11.3458       163.261       174.607    
  68  0.176925      -1.73203      -41.9466       41.9466       170.733       212.680    
  69  0.638162E-02  -5.05433      -122.407       122.407       163.976       286.383    
  70  0.301443      -1.19917      -29.0418       29.0418       161.330       190.371    
  71  0.586975     -0.532773      -12.9028       12.9028       161.525       174.427    
  72  0.595449     -0.518439      -12.5557       12.5557       162.149       174.705    
  73  0.189180      -1.66506      -40.3247       40.3247       161.736       202.061    
  74  0.621622     -0.475424      -11.5139       11.5139       161.906       173.420    
  75  0.706686     -0.347169      -8.40780       8.40780       157.199       165.607    
loop,thermsimp(1:2)       54   13.7854       8.67856    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176        161.73          0.85          1.16         25.27          0.08          0.06         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       54
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       55
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      175     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -39.6705       39.6705       155.759       195.430    
   2  0.875287     -0.133204      -3.22595       3.22595       159.061       162.287    
   3  0.103612      -2.26710      -54.9050       54.9050       159.760       214.665    
   4  0.159072      -1.83840      -44.5227       44.5227       161.413       205.935    
   5  0.118738      -2.13084      -51.6050       51.6050       161.892       213.497    
   6  0.294105      -1.22382      -29.6386       29.6386       156.791       186.430    
   7  0.967643     -0.328919E-01 -0.796583      0.796583       155.616       156.412    
   8  0.675183     -0.392772      -9.51223       9.51223       161.597       171.110    
   9  0.170112      -1.77130      -42.8976       42.8976       160.765       203.663    
  10  0.990992     -0.904902E-02 -0.219151      0.219151       158.314       158.533    
  11  0.198513      -1.61690      -39.1585       39.1585       158.419       197.577    
  12  0.404817E-01  -3.20690      -77.6654       77.6654       157.199       234.865    
  13  0.834933E-01  -2.48299      -60.1335       60.1335       162.571       222.704    
  14  0.458935     -0.778848      -18.8623       18.8623       162.401       181.263    
  15  0.929311     -0.733118E-01  -1.77548       1.77548       162.050       163.826    
  16  0.593071     -0.522440      -12.6526       12.6526       165.090       177.742    
  17  0.963359E-01  -2.33991      -56.6685       56.6685       162.484       219.153    
  18  0.383119E-01  -3.26200      -78.9996       78.9996       161.872       240.872    
  19  0.841843     -0.172161      -4.16944       4.16944       154.957       159.126    
  20  0.874261     -0.134376      -3.25435       3.25435       162.825       166.079    
  21  0.706443     -0.347513      -8.41614       8.41614       164.566       172.982    
  22  0.423649E-01  -3.16143      -76.5642       76.5642       162.449       239.013    
  23  0.904835     -0.100003      -2.42189       2.42189       161.212       163.634    
  24  0.728800     -0.316356      -7.66157       7.66157       161.034       168.695    
  25  0.764304     -0.268790      -6.50961       6.50961       167.774       174.284    
  26  0.578519     -0.547284      -13.2542       13.2542       161.557       174.811    
  27  0.321737      -1.13402      -27.4639       27.4639       163.364       190.828    
  28  0.592944     -0.522656      -12.6578       12.6578       152.236       164.894    
  29  0.159596      -1.83511      -44.4431       44.4431       164.970       209.413    
  30  0.797332     -0.226484      -5.48503       5.48503       161.906       167.391    
  31  0.263979      -1.33189      -32.2559       32.2559       163.578       195.834    
  32  0.449355     -0.799942      -19.3732       19.3732       161.525       180.898    
  33  0.859901     -0.150938      -3.65544       3.65544       160.084       163.740    
  34  0.730093     -0.314584      -7.61865       7.61865       163.261       170.880    
  35  0.484666     -0.724295      -17.5411       17.5411       162.149       179.690    
  36  0.180217      -1.71359      -41.5001       41.5001       161.536       203.036    
  37  0.857397     -0.153854      -3.72607       3.72607       161.455       165.181    
  38  0.502370     -0.688418      -16.6722       16.6722       165.069       181.741    
  39  0.245408      -1.40484      -34.0226       34.0226       163.057       197.079    
  40  0.134540      -2.00590      -48.5791       48.5791       167.843       216.422    
  41  0.468137     -0.758995      -18.3815       18.3815       158.974       177.355    
  42  0.864548E-01  -2.44813      -59.2894       59.2894       161.237       220.527    
  43  0.178791      -1.72154      -41.6926       41.6926       161.444       203.137    
  44  0.690351     -0.370555      -8.97416       8.97416       164.985       173.960    
  45  0.731648     -0.312455      -7.56710       7.56710       161.207       168.774    
  46  0.857623     -0.153591      -3.71969       3.71969       158.647       162.367    
  47  0.754956     -0.281095      -6.80762       6.80762       158.348       165.155    
  48  0.355557      -1.03407      -25.0433       25.0433       162.353       187.396    
  49  0.200964      -1.60463      -38.8613       38.8613       161.330       200.191    
  50  0.243499      -1.41264      -34.2116       34.2116       162.816       197.028    
  51  0.796288     -0.227794      -5.51677       5.51677       164.350       169.867    
  52  0.256937      -1.35892      -32.9107       32.9107       160.107       193.018    
  53  0.591760     -0.524655      -12.7062       12.7062       162.606       175.313    
  54  0.799227     -0.224110      -5.42753       5.42753       155.551       160.978    
  55  0.115295E-01  -4.46285      -108.082       108.082       161.286       269.368    
  56  0.559205     -0.581239      -14.0766       14.0766       161.708       175.785    
  57  0.742198     -0.298139      -7.22039       7.22039       161.959       169.179    
  58  0.543157     -0.610356      -14.7817       14.7817       162.947       177.729    
  59  0.100933      -2.29330      -55.5396       55.5396       161.736       217.276    
  60  0.201228      -1.60332      -38.8294       38.8294       161.455       200.284    
  61  0.602159E-01  -2.80982      -68.0487       68.0487       160.258       228.307    
  62  0.107777      -2.22769      -53.9507       53.9507       161.455       215.405    
  63  0.131787E-01  -4.32915      -104.844       104.844       160.315       265.159    
  64  0.756826     -0.278622      -6.74771       6.74771       161.480       168.227    
  65  0.617120     -0.482691      -11.6899       11.6899       160.681       172.371    
  66  0.885328     -0.121797      -2.94970       2.94970       170.733       173.683    
  67  0.617093     -0.482736      -11.6910       11.6910       162.455       174.146    
  68  0.654899     -0.423274      -10.2509       10.2509       161.455       171.706    
  69  0.847740     -0.165181      -4.00038       4.00038       161.050       165.050    
  70  0.121451E-01  -4.41083      -106.822       106.822       156.586       263.409    
  71  0.861782     -0.148752      -3.60251       3.60251       162.643       166.246    
  72  0.786555     -0.240093      -5.81461       5.81461       162.983       168.797    
  73  0.634771     -0.454491      -11.0070       11.0070       160.915       171.922    
  74  0.808947     -0.212022      -5.13479       5.13479       163.976       169.111    
  75  0.416116     -0.876792      -21.2343       21.2343       161.726       182.960    
loop,thermsimp(1:2)       55   39.6705       3.22595    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177        156.53          0.84          1.16         25.32          0.18          0.05         27.56
Just calling func    0   0         27.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178        154.73          0.86          1.15         25.32          0.07          0.04         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    154.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       55
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       56
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      177     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -47.3921       47.3921       155.616       203.008    
   2  0.197548      -1.62177      -39.2764       39.2764       158.314       197.591    
   3  0.774000     -0.256183      -6.20429       6.20429       154.957       161.161    
   4  0.170284      -1.77029      -42.8732       42.8732       155.551       198.424    
   5  0.250636      -1.38376      -33.5120       33.5120       159.061       192.573    
   6  0.907951     -0.965652E-01  -2.33863       2.33863       158.647       160.986    
   7  0.611678     -0.491549      -11.9044       11.9044       161.212       173.116    
   8  0.735945E-02  -4.91177      -118.954       118.954       160.084       279.039    
   9  0.309131      -1.17399      -28.4319       28.4319       162.050       190.482    
  10  0.577854     -0.548434      -13.2821       13.2821       152.236       165.519    
  11  0.931529     -0.709274E-01  -1.71773       1.71773       161.050       162.767    
  12  0.665703     -0.406912      -9.85468       9.85468       158.348       168.203    
  13  0.585695     -0.534955      -12.9556       12.9556       161.455       174.410    
  14  0.295001      -1.22078      -29.5650       29.5650       162.825       192.390    
  15  0.317712E-01  -3.44920      -83.5333       83.5333       162.643       246.176    
  16  0.222963      -1.50075      -36.3455       36.3455       161.906       198.252    
  17  0.325931      -1.12107      -27.1503       27.1503       161.480       188.630    
  18  0.785098     -0.241947      -5.85951       5.85951       161.034       166.893    
  19  0.550467     -0.596988      -14.4580       14.4580       161.207       175.665    
  20  0.780222     -0.248176      -6.01038       6.01038       162.983       168.993    
  21  0.130712      -2.03476      -49.2781       49.2781       163.976       213.254    
  22  0.873397     -0.135365      -3.27829       3.27829       161.959       165.237    
  23  0.366975      -1.00246      -24.2778       24.2778       164.350       188.628    
  24  0.813244     -0.206724      -5.00648       5.00648       163.261       168.267    
  25  0.782660E-01  -2.54764      -61.6993       61.6993       161.597       223.297    
  26  0.700327     -0.356208      -8.62671       8.62671       161.455       170.081    
  27  0.437766     -0.826071      -20.0059       20.0059       160.915       180.921    
  28  0.508966E-01  -2.97796      -72.1208       72.1208       160.681       232.802    
  29  0.276850      -1.28428      -31.1029       31.1029       164.566       195.669    
  30  0.792031     -0.233154      -5.64657       5.64657       170.733       176.380    
  31  0.174747      -1.74441      -42.2466       42.2466       164.985       207.232    
  32  0.469718     -0.755623      -18.2998       18.2998       162.455       180.755    
  33  0.252316      -1.37707      -33.3502       33.3502       167.774       201.124    
  34  0.980061     -0.201409E-01 -0.487775      0.487775       161.557       162.045    
  35  0.838300     -0.176379      -4.27159       4.27159       162.606       166.878    
  36  0.369385     -0.995915      -24.1193       24.1193       161.708       185.827    
  37  0.923139     -0.799751E-01  -1.93685       1.93685       158.974       160.910    
  38  0.592446     -0.523496      -12.6781       12.6781       162.947       175.625    
  39  0.348787      -1.05329      -25.5088       25.5088       165.090       190.599    
  40  0.569584     -0.562850      -13.6312       13.6312       162.149       175.781    
  41  0.543034E-01  -2.91317      -70.5517       70.5517       161.525       232.076    
  42  0.582662     -0.540148      -13.0814       13.0814       162.401       175.482    
  43  0.702825     -0.352648      -8.54049       8.54049       165.069       173.609    
  44  0.941375     -0.604140E-01  -1.46312       1.46312       161.726       163.189    
  45  0.258857      -1.35148      -32.7304       32.7304       156.791       189.522    
  46  0.116535      -2.14956      -52.0585       52.0585       162.353       214.411    
  47  0.102671      -2.27622      -55.1260       55.1260       163.364       218.490    
  48  0.172023      -1.76013      -42.6271       42.6271       160.107       202.735    
  49  0.434982E-01  -3.13504      -75.9249       75.9249       155.759       231.684    
  50  0.852122     -0.160026      -3.87554       3.87554       163.578       167.453    
  51  0.583521     -0.538675      -13.0457       13.0457       162.816       175.862    
  52  0.843374     -0.170345      -4.12544       4.12544       163.057       167.182    
  53  0.194743      -1.63607      -39.6227       39.6227       158.419       198.041    
  54  0.191808      -1.65126      -39.9905       39.9905       161.330       201.320    
  55  0.656555     -0.420749      -10.1898       10.1898       161.455       171.644    
  56  0.468384E-01  -3.06105      -74.1331       74.1331       161.536       235.669    
  57  0.812217     -0.207988      -5.03708       5.03708       161.444       166.481    
  58  0.852265     -0.159858      -3.87146       3.87146       160.765       164.636    
  59  0.340213      -1.07818      -26.1116       26.1116       161.413       187.524    
  60  0.655911     -0.421730      -10.2135       10.2135       164.970       175.183    
  61  0.329724      -1.10950      -26.8700       26.8700       161.892       188.762    
  62  0.362242      -1.01544      -24.5922       24.5922       159.760       184.352    
  63  0.273539      -1.29631      -31.3943       31.3943       161.455       192.849    
  64  0.524351     -0.645594      -15.6351       15.6351       167.843       183.478    
  65  0.817273     -0.201783      -4.88681       4.88681       161.736       166.623    
  66  0.642237     -0.442797      -10.7237       10.7237       162.484       173.208    
  67  0.276178      -1.28671      -31.1618       31.1618       161.237       192.399    
  68  0.721954     -0.325793      -7.89013       7.89013       162.571       170.461    
  69  0.676913     -0.390212      -9.45024       9.45024       160.258       169.708    
  70  0.148059      -1.91014      -46.2602       46.2602       157.199       203.459    
  71  0.692932     -0.366824      -8.88381       8.88381       162.449       171.333    
  72  0.749770     -0.287989      -6.97457       6.97457       161.872       168.847    
  73  0.513445     -0.666612      -16.1441       16.1441       156.586       172.731    
  74  0.483500E-01  -3.02929      -73.3639       73.3639       160.315       233.679    
  75  0.647196     -0.435106      -10.5375       10.5375       154.726       165.264    
loop,thermsimp(1:2)       56   47.3921       39.2764    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179        161.94          0.85          1.12         25.37          0.00          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    180        166.76          0.85          1.11         25.28          0.15          0.05         27.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       56
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       57
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      179     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -9.97990       9.97990       158.974       168.954    
   2  0.724212     -0.322671      -7.81451       7.81451       158.647       166.462    
   3  0.633711     -0.456163      -11.0474       11.0474       154.957       166.004    
   4  0.448566     -0.801700      -19.4157       19.4157       161.557       180.973    
   5  0.964228     -0.364273E-01 -0.882204      0.882204       161.050       161.932    
   6  0.714306     -0.336444      -8.14807       8.14807       161.726       169.874    
   7  0.528330     -0.638035      -15.4520       15.4520       160.765       176.217    
   8  0.654127     -0.424453      -10.2795       10.2795       161.959       172.238    
   9  0.368899     -0.997232      -24.1512       24.1512       154.726       178.878    
  10  0.227697      -1.47974      -35.8366       35.8366       152.236       188.073    
  11  0.612266     -0.490588      -11.8811       11.8811       161.444       173.325    
  12  0.313777      -1.15907      -28.0707       28.0707       161.736       189.807    
  13  0.258526      -1.35276      -32.7614       32.7614       162.606       195.368    
  14  0.119298      -2.12613      -51.4911       51.4911       161.034       212.525    
  15  0.213331      -1.54491      -37.4149       37.4149       163.057       200.471    
  16  0.294218      -1.22343      -29.6294       29.6294       163.578       193.207    
  17  0.352988      -1.04132      -25.2189       25.2189       158.348       183.567    
  18  0.348706      -1.05353      -25.5145       25.5145       163.261       188.775    
  19  0.449249     -0.800179      -19.3789       19.3789       161.872       181.251    
  20  0.879121     -0.128833      -3.12010       3.12010       162.983       166.103    
  21  0.464081     -0.767695      -18.5922       18.5922       160.258       178.850    
  22  0.497582     -0.697995      -16.9042       16.9042       161.455       178.359    
  23  0.920207     -0.831566E-01  -2.01390       2.01390       162.571       164.585    
  24  0.811773     -0.208535      -5.05034       5.05034       162.449       167.500    
  25  0.190651      -1.65731      -40.1370       40.1370       161.455       201.592    
  26  0.645174     -0.438235      -10.6133       10.6133       156.586       167.200    
  27  0.668343     -0.402954      -9.75883       9.75883       161.212       170.971    
  28  0.765111     -0.267735      -6.48405       6.48405       162.484       168.968    
  29  0.991779     -0.825499E-02 -0.199921      0.199921       165.069       165.268    
  30  0.136888      -1.98859      -48.1602       48.1602       161.455       209.615    
  31  0.645145E-01  -2.74086      -66.3788       66.3788       164.970       231.349    
  32  0.408515E-01  -3.19781      -77.4452       77.4452       162.401       239.846    
  33  0.264109      -1.33140      -32.2440       32.2440       162.947       195.191    
  34  0.382737     -0.960407      -23.2593       23.2593       161.207       184.466    
  35  0.402738E-02  -5.51464      -133.555       133.555       162.149       295.704    
  36  0.318074      -1.14547      -27.7412       27.7412       162.816       190.557    
  37  0.245237      -1.40553      -34.0394       34.0394       170.733       204.773    
  38  0.519766     -0.654377      -15.8478       15.8478       162.455       178.303    
  39  0.255147      -1.36592      -33.0800       33.0800       160.915       193.995    
  40  0.833841     -0.181712      -4.40074       4.40074       167.843       172.243    
  41  0.696242E-01  -2.66464      -64.5328       64.5328       159.760       224.292    
  42  0.487295     -0.718886      -17.4101       17.4101       161.708       179.118    
  43  0.276229E-01  -3.58911      -86.9218       86.9218       161.413       248.334    
  44  0.638327     -0.448905      -10.8717       10.8717       164.350       175.222    
  45  0.206684      -1.57657      -38.1816       38.1816       161.480       199.661    
  46  0.736003     -0.306521      -7.42339       7.42339       161.892       169.315    
  47  0.217444E-01  -3.82840      -92.7169       92.7169       156.791       249.508    
  48  0.956929     -0.440260E-01  -1.06623       1.06623       162.050       163.117    
  49  0.883561     -0.123795      -2.99808       2.99808       165.090       168.088    
  50  0.700901     -0.355388      -8.60686       8.60686       162.825       171.432    
  51  0.201997      -1.59950      -38.7370       38.7370       161.237       199.974    
  52  0.412152     -0.886362      -21.4661       21.4661       159.061       180.527    
  53  0.890450     -0.116029      -2.81001       2.81001       161.455       164.265    
  54  0.417423     -0.873654      -21.1583       21.1583       164.566       185.724    
  55  0.426501     -0.852140      -20.6373       20.6373       158.314       178.951    
  56  0.983871     -0.162605E-01 -0.393799      0.393799       158.419       158.812    
  57  0.384350     -0.956201      -23.1574       23.1574       161.906       185.064    
  58  0.155937      -1.85830      -45.0047       45.0047       155.551       200.555    
  59  0.361264      -1.01815      -24.6577       24.6577       167.774       192.432    
  60  0.538177     -0.619568      -15.0048       15.0048       161.330       176.335    
  61  0.514362E-01  -2.96741      -71.8654       71.8654       160.107       231.973    
  62  0.994100     -0.591759E-02 -0.143313      0.143313       155.616       155.759    
  63  0.622557     -0.473920      -11.4775       11.4775       157.199       168.677    
  64  0.703606     -0.351537      -8.51360       8.51360       164.985       173.499    
  65  0.151986      -1.88396      -45.6262       45.6262       163.976       209.602    
  66  0.105360      -2.25037      -54.4999       54.4999       162.353       216.852    
  67  0.572995     -0.556878      -13.4866       13.4866       163.364       176.851    
  68  0.201032      -1.60429      -38.8531       38.8531       161.597       200.450    
  69  0.786519     -0.240139      -5.81573       5.81573       155.759       161.575    
  70  0.251709E-01  -3.68207      -89.1730       89.1730       161.525       250.698    
  71  0.574605     -0.554072      -13.4186       13.4186       160.681       174.099    
  72  0.842012     -0.171961      -4.16458       4.16458       160.315       164.480    
  73  0.705908E-02  -4.95344      -119.963       119.963       161.536       281.499    
  74  0.322746      -1.13089      -27.3881       27.3881       162.643       190.031    
  75  0.747270E-01  -2.59391      -62.8199       62.8199       161.937       224.757    
loop,thermsimp(1:2)       57   9.97990       7.81451    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181        161.95          0.87          1.16         25.29          0.05          0.06         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    182        190.85          0.86          1.15         25.31          0.39          0.06         27.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    161.95       0.8439     -1.522      2.626     -102.6     0.9510    
                      0.1844      1.489     -99.70      3.537     0.4107    
                       1.779     -1.413      1.530      5133.      4600.    
                     -0.6388      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5066.     -53.18    
                     -0.5672     -6.640     -5.131     -8.456      5.967    
                      -14.86     -2.948      1706.      0.000      3319.    

                       3319.      3319.      3129.      3319.      2943.    
                       3794.     0.2662     0.3900E-01  0.000     0.6777E-01
                     -0.9072E-01-0.5499E-01 0.1040    -0.3891E-02-0.3468E-01

                     -0.2674    -0.9675      0.000    -0.6181E-01-0.3828E-01
                       0.000    -0.4668E-01-0.4100E-01-0.1342    -0.2298E-02
                     -0.5643E-01-0.2591E-01-0.4751     -1.093      5133.    

                     -0.7018    -0.7396     -2.487     -2.487    -0.2972E-01
                      0.2351      9.107      8.782    -0.1977E+05 -4.000    
                     -0.5565    -0.6130      9.293      8.784    -0.2027E+05

                      -4.000     0.2939E-01-0.7941      8.920      8.956    
                     -0.1935E+05 -7.000    -0.4511    -0.7723      9.142    
                       8.804    -0.2027E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       57
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       58
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      181     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -68.7544       68.7544       155.616       224.370    
   2  0.104884      -2.25490      -54.6097       54.6097       158.419       213.028    
   3  0.784254     -0.243023      -5.88556       5.88556       155.759       161.645    
   4  0.813133     -0.206861      -5.00980       5.00980       161.050       166.060    
   5  0.490778     -0.711764      -17.2376       17.2376       162.050       179.288    
   6  0.168573      -1.78039      -43.1177       43.1177       161.455       204.572    
   7  0.450161     -0.798149      -19.3297       19.3297       160.315       179.645    
   8  0.828233     -0.188461      -4.56418       4.56418       162.571       167.135    
   9  0.994731     -0.528342E-02 -0.127955      0.127955       165.069       165.196    
  10  0.813340     -0.206606      -5.00363       5.00363       154.957       159.960    
  11  0.776133     -0.253432      -6.13766       6.13766       162.983       169.120    
  12  0.729556     -0.315319      -7.63645       7.63645       158.647       166.284    
  13  0.530451     -0.634028      -15.3550       15.3550       156.586       171.941    
  14  0.752564E-01  -2.58685      -62.6489       62.6489       162.449       225.098    
  15  0.918457     -0.850597E-01  -2.05999       2.05999       165.090       167.150    
  16  0.162642      -1.81621      -43.9852       43.9852       157.199       201.184    
  17  0.725851     -0.320411      -7.75976       7.75976       158.974       166.733    
  18  0.322292      -1.13230      -27.4222       27.4222       162.484       189.906    
  19  0.838064     -0.176661      -4.27841       4.27841       161.892       166.170    
  20  0.346062E-01  -3.36372      -81.4632       81.4632       161.726       243.189    
  21  0.442915     -0.814377      -19.7227       19.7227       161.212       180.935    
  22  0.143708      -1.93997      -46.9826       46.9826       162.825       209.807    
  23  0.940845     -0.609769E-01  -1.47675       1.47675       161.959       163.436    
  24  0.972503     -0.278816E-01 -0.675243      0.675243       167.843       168.518    
  25  0.291831      -1.23158      -29.8267       29.8267       161.444       191.271    
  26  0.211976      -1.55128      -37.5693       37.5693       164.985       202.555    
  27  0.695427     -0.363229      -8.79676       8.79676       160.681       169.478    
  28  0.982540E-01  -2.32020      -56.1910       56.1910       164.350       220.541    
  29  0.730742     -0.313695      -7.59712       7.59712       160.765       168.362    
  30  0.417794     -0.872766      -21.1368       21.1368       161.330       182.467    
  31  0.868385     -0.141121      -3.41769       3.41769       163.364       166.782    
  32  0.300897      -1.20099      -29.0857       29.0857       162.455       191.541    
  33  0.917219     -0.864093E-01  -2.09268       2.09268       161.455       163.547    
  34  0.304394      -1.18943      -28.8059       28.8059       160.258       189.064    
  35  0.856500     -0.154901      -3.75143       3.75143       154.726       158.478    
  36  0.310652      -1.16908      -28.3130       28.3130       158.314       186.627    
  37  0.846275     -0.166911      -4.04229       4.04229       161.708       165.750    
  38  0.206825      -1.57588      -38.1650       38.1650       159.061       197.226    
  39  0.606376     -0.500256      -12.1153       12.1153       161.557       173.672    
  40  0.840015     -0.174336      -4.22209       4.22209       161.872       166.094    
  41  0.348835      -1.05315      -25.5055       25.5055       158.348       183.853    
  42  0.857325     -0.153939      -3.72812       3.72812       161.207       164.935    
  43  0.308035E-01  -3.48013      -84.2824       84.2824       161.906       246.189    
  44  0.400632     -0.914711      -22.1526       22.1526       164.566       186.719    
  45  0.242237      -1.41784      -34.3374       34.3374       152.236       186.574    
  46  0.407771     -0.897050      -21.7249       21.7249       163.261       184.986    
  47  0.430691     -0.842364      -20.4005       20.4005       161.736       182.137    
  48  0.415503     -0.878266      -21.2700       21.2700       162.643       183.913    
  49  0.593575     -0.521591      -12.6320       12.6320       162.816       175.448    
  50  0.973620     -0.267342E-01 -0.647453      0.647453       167.774       168.421    
  51  0.510257     -0.672840      -16.2950       16.2950       163.578       179.873    
  52  0.796475     -0.227560      -5.51108       5.51108       160.915       166.426    
  53  0.213576      -1.54376      -37.3871       37.3871       162.947       200.334    
  54  0.865534     -0.144409      -3.49732       3.49732       162.606       166.104    
  55  0.920053     -0.833240E-01  -2.01796       2.01796       161.480       163.498    
  56  0.534624     -0.626192      -15.1652       15.1652       161.237       176.403    
  57  0.963687     -0.369888E-01 -0.895801      0.895801       161.597       162.493    
  58  0.498139     -0.696877      -16.8771       16.8771       163.057       179.934    
  59  0.987058     -0.130264E-01 -0.315476      0.315476       155.551       155.866    
  60  0.488276E-01  -3.01946      -73.1258       73.1258       161.455       234.580    
  61  0.597381E-01  -2.81779      -68.2417       68.2417       170.733       238.975    
  62  0.589016     -0.529301      -12.8187       12.8187       163.976       176.795    
  63  0.680503     -0.384923      -9.32214       9.32214       161.455       170.777    
  64  0.793494     -0.231310      -5.60191       5.60191       161.034       166.635    
  65  0.269936E-01  -3.61216      -87.4799       87.4799       162.353       249.832    
  66  0.392490     -0.935245      -22.6499       22.6499       159.760       182.410    
  67  0.150218      -1.89567      -45.9096       45.9096       161.937       207.846    
  68  0.959939     -0.408856E-01 -0.990175      0.990175       164.970       165.960    
  69  0.559076     -0.581471      -14.0822       14.0822       160.107       174.190    
  70  0.820359     -0.198013      -4.79552       4.79552       162.401       167.196    
  71  0.876568     -0.131741      -3.19052       3.19052       161.413       164.603    
  72  0.338606      -1.08292      -26.2263       26.2263       156.791       183.018    
  73  0.877240     -0.130975      -3.17197       3.17197       161.525       164.697    
  74  0.746045     -0.292970      -7.09519       7.09519       161.536       168.631    
  75  0.933361     -0.689628E-01  -1.67015       1.67015       161.952       163.622    
loop,thermsimp(1:2)       58   68.7544       54.6097    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183        161.32          0.86          1.16         25.34          0.35          0.06         27.77
Just calling func    0   0         27.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184        164.91          0.86          1.14         25.34          0.20          0.05         27.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       58
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       59
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      183     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -26.8475       26.8475       155.551       182.398    
   2  0.939148     -0.627826E-01  -1.52048       1.52048       154.726       156.247    
   3  0.130906      -2.03328      -49.2423       49.2423       154.957       204.199    
   4  0.664370     -0.408916      -9.90320       9.90320       155.759       165.663    
   5  0.490908     -0.711498      -17.2312       17.2312       161.597       178.829    
   6  0.711731     -0.340055      -8.23552       8.23552       161.959       170.194    
   7  0.676080     -0.391444      -9.48006       9.48006       161.480       170.960    
   8  0.611139     -0.492432      -11.9258       11.9258       161.455       173.380    
   9  0.614246     -0.487359      -11.8030       11.8030       161.952       173.755    
  10  0.988045     -0.120275E-01 -0.291285      0.291285       161.413       161.704    
  11  0.232883      -1.45722      -35.2912       35.2912       161.525       196.816    
  12  0.450825     -0.796675      -19.2940       19.2940       161.207       180.501    
  13  0.493319     -0.706599      -17.1125       17.1125       165.069       182.181    
  14  0.191184      -1.65452      -40.0695       40.0695       161.708       201.778    
  15  0.894136     -0.111897      -2.70995       2.70995       164.970       167.680    
  16  0.391751     -0.937128      -22.6955       22.6955       161.050       183.745    
  17  0.236278      -1.44275      -34.9407       34.9407       161.872       196.813    
  18  0.496874E-01  -3.00200      -72.7031       72.7031       162.606       235.309    
  19  0.784524     -0.242678      -5.87723       5.87723       161.892       167.769    
  20  0.292328      -1.22988      -29.7855       29.7855       158.647       188.433    
  21  0.832247E-01  -2.48621      -60.2115       60.2115       160.915       221.126    
  22  0.423133     -0.860069      -20.8293       20.8293       161.034       181.863    
  23  0.234472      -1.45042      -35.1265       35.1265       158.974       194.100    
  24  0.868463     -0.141031      -3.41551       3.41551       163.364       166.780    
  25  0.122969      -2.09582      -50.7570       50.7570       162.571       213.328    
  26  0.811771     -0.208537      -5.05039       5.05039       165.090       170.140    
  27  0.786834     -0.239738      -5.80603       5.80603       162.401       168.207    
  28  0.163144      -1.81312      -43.9105       43.9105       160.765       204.675    
  29  0.571103     -0.560186      -13.5667       13.5667       167.774       181.341    
  30  0.769982     -0.261388      -6.33033       6.33033       167.843       174.173    
  31  0.471769     -0.751265      -18.1943       18.1943       161.536       179.730    
  32  0.584935     -0.536254      -12.9871       12.9871       162.983       175.970    
  33  0.416140     -0.876734      -21.2329       21.2329       160.681       181.914    
  34  0.106525E-01  -4.54196      -109.998       109.998       161.455       271.453    
  35  0.595424     -0.518482      -12.5567       12.5567       156.586       169.143    
  36  0.302400      -1.19600      -28.9650       28.9650       161.557       190.522    
  37  0.629701     -0.462510      -11.2011       11.2011       160.107       171.309    
  38  0.939026E-01  -2.36550      -57.2881       57.2881       162.816       220.104    
  39  0.911727     -0.924151E-01  -2.23813       2.23813       161.237       163.475    
  40  0.289502      -1.23959      -30.0207       30.0207       163.976       193.997    
  41  0.326571      -1.11911      -27.1027       27.1027       162.050       189.153    
  42  0.972366     -0.280231E-01 -0.678668      0.678668       160.315       160.994    
  43  0.823413     -0.194297      -4.70552       4.70552       163.578       168.283    
  44  0.790717     -0.234815      -5.68679       5.68679       163.057       168.743    
  45  0.167922      -1.78426      -43.2115       43.2115       161.212       204.423    
  46  0.804665     -0.217329      -5.26332       5.26332       161.736       167.000    
  47  0.154714      -1.86617      -45.1954       45.1954       159.760       204.955    
  48  0.240456      -1.42522      -34.5162       34.5162       161.330       195.846    
  49  0.351787      -1.04473      -25.3015       25.3015       156.791       182.093    
  50  0.666429E-01  -2.70841      -65.5927       65.5927       158.348       223.941    
  51  0.484113     -0.725437      -17.5688       17.5688       162.643       180.212    
  52  0.298509      -1.20896      -29.2787       29.2787       163.261       192.540    
  53  0.982136     -0.180253E-01 -0.436540      0.436540       152.236       152.673    
  54  0.799723     -0.223490      -5.41252       5.41252       158.314       163.727    
  55  0.559799     -0.580177      -14.0508       14.0508       164.566       178.617    
  56  0.492929     -0.707390      -17.1317       17.1317       160.258       177.389    
  57  0.655290     -0.422678      -10.2365       10.2365       162.484       172.721    
  58  0.426949     -0.851091      -20.6119       20.6119       161.444       182.056    
  59  0.575269     -0.552918      -13.3907       13.3907       162.455       175.846    
  60  0.252283      -1.37721      -33.3534       33.3534       159.061       192.415    
  61  0.628464     -0.464477      -11.2488       11.2488       162.947       174.196    
  62  0.847342E-01  -2.46824      -59.7762       59.7762       157.199       216.975    
  63  0.701567     -0.354439      -8.58387       8.58387       164.985       173.569    
  64  0.171664      -1.76222      -42.6777       42.6777       161.455       204.132    
  65  0.395346     -0.927995      -22.4744       22.4744       161.937       184.411    
  66  0.397662     -0.922153      -22.3329       22.3329       162.825       185.158    
  67  0.166798      -1.79097      -43.3741       43.3741       158.419       201.793    
  68  0.100957      -2.29306      -55.5338       55.5338       164.350       219.884    
  69  0.725220     -0.321280      -7.78082       7.78082       155.616       163.397    
  70  0.856561     -0.154829      -3.74969       3.74969       162.449       166.199    
  71  0.421738     -0.863372      -20.9093       20.9093       161.455       182.364    
  72  0.294072      -1.22393      -29.6414       29.6414       170.733       200.374    
  73  0.138461      -1.97717      -47.8834       47.8834       161.726       209.609    
  74  0.245131      -1.40596      -34.0499       34.0499       161.906       195.956    
  75  0.459231     -0.778203      -18.8467       18.8467       161.324       180.170    
loop,thermsimp(1:2)       59   26.8475       1.52048    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185        160.64          0.86          1.14         25.33          0.18          0.05         27.56
Just calling func    0   0         27.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186        158.33          0.85          1.14         25.27          0.13          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       59
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       60
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      185     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -28.8264       28.8264       152.236       181.063    
   2  0.843344     -0.170380      -4.12629       4.12629       154.726       158.853    
   3  0.457815     -0.781289      -18.9214       18.9214       160.315       179.236    
   4  0.933709     -0.685899E-01  -1.66112       1.66112       161.413       163.074    
   5  0.887159     -0.119731      -2.89966       2.89966       155.616       158.516    
   6  0.786211     -0.240530      -5.82521       5.82521       161.237       167.062    
   7  0.794803     -0.229661      -5.56197       5.56197       158.314       163.876    
   8  0.573435E-01  -2.85870      -69.2324       69.2324       155.759       224.992    
   9  0.647106     -0.435245      -10.5408       10.5408       162.449       172.990    
  10  0.110118      -2.20620      -53.4303       53.4303       163.364       216.795    
  11  0.339548      -1.08014      -26.1590       26.1590       161.736       187.895    
  12  0.635246     -0.453742      -10.9888       10.9888       164.970       175.959    
  13  0.488392     -0.716638      -17.3557       17.3557       161.892       179.248    
  14  0.602571     -0.506549      -12.2677       12.2677       162.401       174.668    
  15  0.710041     -0.342433      -8.29311       8.29311       163.578       171.871    
  16  0.585763     -0.534840      -12.9529       12.9529       163.057       176.009    
  17  0.288010      -1.24476      -30.1458       30.1458       156.586       186.732    
  18  0.455238     -0.786934      -19.0581       19.0581       165.090       184.148    
  19  0.723984     -0.322986      -7.82213       7.82213       161.959       169.781    
  20  0.554067     -0.590470      -14.3001       14.3001       161.480       175.780    
  21  0.646516     -0.436157      -10.5629       10.5629       160.107       170.670    
  22  0.271985      -1.30201      -31.5323       31.5323       162.484       194.016    
  23  0.901636E-02  -4.70871      -114.037       114.037       161.455       275.491    
  24  0.383616     -0.958114      -23.2038       23.2038       164.985       188.189    
  25  0.443516     -0.813022      -19.6899       19.6899       161.952       181.642    
  26  0.223023      -1.50048      -36.3390       36.3390       167.843       204.182    
  27  0.123255      -2.09350      -50.7007       50.7007       162.947       213.648    
  28  0.817485     -0.201523      -4.88052       4.88052       162.455       167.335    
  29  0.333893      -1.09693      -26.5657       26.5657       162.983       189.548    
  30  0.867877     -0.141706      -3.43186       3.43186       160.258       163.690    
  31  0.365747      -1.00581      -24.3590       24.3590       164.566       188.925    
  32  0.429445     -0.845262      -20.4707       20.4707       161.597       182.068    
  33  0.856620     -0.154761      -3.74803       3.74803       161.536       165.284    
  34  0.729532     -0.315352      -7.63726       7.63726       161.324       168.961    
  35  0.315845      -1.15251      -27.9116       27.9116       162.643       190.555    
  36  0.547596     -0.602217      -14.5846       14.5846       161.207       175.792    
  37  0.752130     -0.284846      -6.89847       6.89847       167.774       174.672    
  38  0.806451     -0.215112      -5.20963       5.20963       161.034       166.243    
  39  0.618613     -0.480275      -11.6314       11.6314       160.681       172.312    
  40  0.630350     -0.461480      -11.1762       11.1762       161.444       172.621    
  41  0.251741      -1.37935      -33.4055       33.4055       156.791       190.197    
  42  0.846504     -0.166640      -4.03571       4.03571       165.069       169.104    
  43  0.830791     -0.185377      -4.48948       4.48948       161.455       165.944    
  44  0.566838     -0.567681      -13.7482       13.7482       155.551       169.299    
  45  0.499450E-01  -2.99683      -72.5779       72.5779       161.050       233.628    
  46  0.976301     -0.239838E-01 -0.580845      0.580845       161.937       162.518    
  47  0.401049     -0.913672      -22.1275       22.1275       162.825       184.952    
  48  0.709931E-01  -2.64517      -64.0613       64.0613       158.647       222.708    
  49  0.920370E-02  -4.68815      -113.538       113.538       162.050       275.589    
  50  0.379723     -0.968314      -23.4508       23.4508       161.557       185.008    
  51  0.207569      -1.57229      -38.0781       38.0781       159.061       197.139    
  52  0.745673     -0.293468      -7.10726       7.10726       163.261       170.368    
  53  0.915877     -0.878737E-01  -2.12814       2.12814       163.976       166.104    
  54  0.836769     -0.178207      -4.31586       4.31586       158.974       163.290    
  55  0.769684E-01  -2.56436      -62.1042       62.1042       161.330       223.434    
  56  0.797754     -0.225955      -5.47223       5.47223       161.906       167.378    
  57  0.555189     -0.588446      -14.2511       14.2511       161.872       176.123    
  58  0.134224      -2.00825      -48.6361       48.6361       161.525       210.161    
  59  0.796234     -0.227862      -5.51841       5.51841       170.733       176.252    
  60  0.628721     -0.464068      -11.2389       11.2389       161.708       172.947    
  61  0.460391     -0.775679      -18.7855       18.7855       158.419       177.204    
  62  0.137302      -1.98558      -48.0870       48.0870       161.455       209.542    
  63  0.504249     -0.684686      -16.5818       16.5818       154.957       171.538    
  64  0.548486     -0.600594      -14.5453       14.5453       161.212       175.757    
  65  0.479259     -0.735514      -17.8128       17.8128       160.765       178.578    
  66  0.763784     -0.269471      -6.52609       6.52609       159.760       166.286    
  67  0.896024     -0.109788      -2.65886       2.65886       161.726       164.384    
  68  0.873307     -0.135468      -3.28079       3.28079       162.571       165.852    
  69  0.469885     -0.755268      -18.2912       18.2912       157.199       175.490    
  70  0.705401     -0.348988      -8.45186       8.45186       164.350       172.802    
  71  0.997081     -0.292289E-02 -0.707871E-01  0.707871E-01   162.816       162.887    
  72  0.204925      -1.58511      -38.3885       38.3885       160.915       199.303    
  73  0.676158     -0.391329      -9.47727       9.47727       158.348       167.825    
  74  0.273114      -1.29787      -31.4319       31.4319       162.606       194.038    
  75  0.777566     -0.251587      -6.09297       6.09297       158.335       164.428    
loop,thermsimp(1:2)       60   28.8264       4.12629    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187        160.24          0.86          1.15         25.27          0.05          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    160.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       60
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       61
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      186     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -4.52185       4.52185       155.616       160.138    
   2  0.735850     -0.306729      -7.42842       7.42842       154.726       162.155    
   3  0.828786     -0.187793      -4.54801       4.54801       161.937       166.485    
   4  0.592078     -0.524118      -12.6932       12.6932       162.816       175.509    
   5  0.691797E-01  -2.67105      -64.6879       64.6879       161.413       226.100    
   6  0.772335     -0.258337      -6.25645       6.25645       158.974       165.230    
   7  0.504563     -0.684063      -16.5668       16.5668       160.258       176.825    
   8  0.700615     -0.355797      -8.61675       8.61675       158.314       166.931    
   9  0.764596     -0.268408      -6.50035       6.50035       161.726       168.226    
  10  0.459614     -0.777368      -18.8265       18.8265       158.335       177.161    
  11  0.931193     -0.712882E-01  -1.72647       1.72647       161.536       163.262    
  12  0.502482E-01  -2.99078      -72.4313       72.4313       162.571       235.002    
  13  0.498197     -0.696760      -16.8743       16.8743       161.455       178.329    
  14  0.551534E-01  -2.89764      -70.1755       70.1755       163.976       234.152    
  15  0.172209      -1.75905      -42.6009       42.6009       161.034       203.634    
  16  0.238868E-01  -3.73443      -90.4411       90.4411       159.760       250.201    
  17  0.699366     -0.357581      -8.65996       8.65996       161.237       169.897    
  18  0.764093     -0.269066      -6.51630       6.51630       162.455       168.971    
  19  0.465633     -0.764357      -18.5113       18.5113       161.906       180.418    
  20  0.209906      -1.56110      -37.8070       37.8070       158.348       196.155    
  21  0.216891      -1.52836      -37.0141       37.0141       161.324       198.338    
  22  0.795854E-01  -2.53092      -61.2944       61.2944       165.069       226.363    
  23  0.701683     -0.354273      -8.57986       8.57986       155.551       164.131    
  24  0.574425     -0.554385      -13.4262       13.4262       161.959       175.385    
  25  0.674968     -0.393090      -9.51992       9.51992       163.261       172.781    
  26  0.684189     -0.379521      -9.19132       9.19132       160.107       169.299    
  27  0.541862     -0.612745      -14.8396       14.8396       154.957       169.796    
  28  0.668027     -0.403426      -9.77025       9.77025       163.578       173.348    
  29  0.353251      -1.04058      -25.2009       25.2009       160.681       185.882    
  30  0.778708     -0.250119      -6.05744       6.05744       161.444       167.502    
  31  0.829283     -0.187194      -4.53350       4.53350       164.350       168.884    
  32  0.679297     -0.386697      -9.36510       9.36510       161.708       171.073    
  33  0.536301     -0.623060      -15.0894       15.0894       162.449       177.539    
  34  0.247738      -1.39538      -33.7936       33.7936       162.401       196.194    
  35  0.271399      -1.30416      -31.5845       31.5845       167.774       199.358    
  36  0.284124      -1.25835      -30.4749       30.4749       157.199       187.674    
  37  0.664442     -0.408808      -9.90059       9.90059       161.212       171.112    
  38  0.874508     -0.134094      -3.24750       3.24750       161.480       164.727    
  39  0.916444     -0.872538E-01  -2.11313       2.11313       161.207       163.320    
  40  0.295165      -1.22022      -29.5515       29.5515       164.970       194.521    
  41  0.242592      -1.41637      -34.3020       34.3020       163.057       197.359    
  42  0.396124     -0.926028      -22.4267       22.4267       161.872       184.299    
  43  0.509193E-01  -2.97751      -72.1100       72.1100       170.733       242.843    
  44  0.778911     -0.249858      -6.05111       6.05111       158.419       164.470    
  45  0.351009      -1.04694      -25.3551       25.3551       160.765       186.120    
  46  0.480934     -0.732025      -17.7283       17.7283       160.315       178.043    
  47  0.908579     -0.958731E-01  -2.32187       2.32187       161.892       164.214    
  48  0.898885     -0.106600      -2.58166       2.58166       152.236       154.818    
  49  0.561121     -0.577819      -13.9937       13.9937       161.952       175.946    
  50  0.851109     -0.161215      -3.90435       3.90435       161.597       165.502    
  51  0.975854     -0.244425E-01 -0.591953      0.591953       165.090       165.682    
  52  0.187829      -1.67223      -40.4983       40.4983       162.825       203.323    
  53  0.962131     -0.386049E-01 -0.934940      0.934940       161.557       162.492    
  54  0.823812     -0.193813      -4.69380       4.69380       156.586       161.280    
  55  0.765207     -0.267609      -6.48101       6.48101       161.736       168.217    
  56  0.207984      -1.57030      -38.0297       38.0297       164.985       203.015    
  57  0.675792     -0.391869      -9.49036       9.49036       164.566       174.056    
  58  0.641275     -0.444296      -10.7601       10.7601       162.983       173.743    
  59  0.621346E-01  -2.77845      -67.2891       67.2891       156.791       224.081    
  60  0.911977E-01  -2.39473      -57.9959       57.9959       162.643       220.639    
  61  0.697078     -0.360859      -8.73934       8.73934       162.484       171.224    
  62  0.760976     -0.273154      -6.61529       6.61529       162.606       169.222    
  63  0.812117     -0.208111      -5.04007       5.04007       159.061       164.101    
  64  0.654868     -0.423322      -10.2521       10.2521       160.915       171.167    
  65  0.263345E-02  -5.93946      -143.843       143.843       167.843       311.686    
  66  0.180895      -1.70984      -41.4091       41.4091       161.455       202.864    
  67  0.830100     -0.186209      -4.50964       4.50964       161.525       166.034    
  68  0.396842E-01  -3.22680      -78.1473       78.1473       162.947       241.094    
  69  0.862274     -0.148182      -3.58869       3.58869       163.364       166.953    
  70  0.362095      -1.01585      -24.6020       24.6020       158.647       183.249    
  71  0.156544      -1.85442      -44.9107       44.9107       161.330       206.240    
  72  0.103594      -2.26727      -54.9093       54.9093       155.759       210.669    
  73  0.147771      -1.91209      -46.3074       46.3074       161.050       207.357    
  74  0.820171     -0.198243      -4.80108       4.80108       161.455       166.256    
  75  0.705290     -0.349146      -8.45569       8.45569       160.242       168.698    
loop,thermsimp(1:2)       61   4.52185       7.42842    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188        160.05          0.86          1.14         25.29          0.15          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    189        170.11          0.86          1.14         25.28          0.07          0.04         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       61
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       62
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      188     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -2.08801       2.08801       152.236       154.324    
   2  0.899579E-01  -2.40841      -58.3274       58.3274       155.616       213.943    
   3  0.997625     -0.237830E-02 -0.575982E-01  0.575982E-01   156.586       156.644    
   4  0.224083      -1.49574      -36.2241       36.2241       154.726       190.951    
   5  0.120769      -2.11388      -51.1943       51.1943       161.557       212.752    
   6  0.302676E-01  -3.49768      -84.7074       84.7074       161.536       246.243    
   7  0.315161      -1.15467      -27.9640       27.9640       161.207       189.171    
   8  0.155895      -1.85857      -45.0113       45.0113       159.061       204.072    
   9  0.467639     -0.760060      -18.4073       18.4073       155.551       173.958    
  10  0.277823      -1.28077      -31.0179       31.0179       161.892       192.910    
  11  0.712282     -0.339281      -8.21677       8.21677       158.419       166.635    
  12  0.929560     -0.730437E-01  -1.76899       1.76899       161.480       163.249    
  13  0.499024     -0.695101      -16.8341       16.8341       158.974       175.808    
  14  0.940347     -0.615066E-01  -1.48958       1.48958       161.597       163.087    
  15  0.714006     -0.336864      -8.15823       8.15823       165.090       173.248    
  16  0.162603      -1.81644      -43.9910       43.9910       161.525       205.516    
  17  0.663729     -0.409881      -9.92657       9.92657       161.455       171.381    
  18  0.314148      -1.15789      -28.0420       28.0420       161.937       189.979    
  19  0.497386     -0.698388      -16.9137       16.9137       158.314       175.228    
  20  0.368387     -0.998622      -24.1848       24.1848       163.364       187.549    
  21  0.326342      -1.11981      -27.1197       27.1197       161.444       188.564    
  22  0.442952     -0.814294      -19.7207       19.7207       161.736       181.457    
  23  0.929694     -0.729000E-01  -1.76551       1.76551       161.726       163.491    
  24  0.945450E-01  -2.35868      -57.1229       57.1229       160.242       217.365    
  25  0.407158     -0.898555      -21.7614       21.7614       164.350       186.112    
  26  0.706679     -0.347179      -8.40805       8.40805       162.455       170.863    
  27  0.657848     -0.418781      -10.1421       10.1421       162.606       172.748    
  28  0.968040     -0.324817E-01 -0.786649      0.786649       160.107       160.894    
  29  0.330387      -1.10749      -26.8214       26.8214       154.957       181.778    
  30  0.756161     -0.279501      -6.76901       6.76901       161.237       168.006    
  31  0.307772      -1.17840      -28.5386       28.5386       161.708       190.247    
  32  0.759008E-01  -2.57833      -62.4424       62.4424       161.212       223.654    
  33  0.615618E-01  -2.78771      -67.5134       67.5134       160.915       228.428    
  34  0.545984     -0.605166      -14.6560       14.6560       162.484       177.140    
  35  0.339865      -1.07921      -26.1364       26.1364       163.261       189.397    
  36  0.816477     -0.202757      -4.91041       4.91041       163.578       168.488    
  37  0.932889     -0.694691E-01  -1.68241       1.68241       162.983       164.665    
  38  0.667042     -0.404902      -9.80599       9.80599       164.566       174.372    
  39  0.583049     -0.539484      -13.0653       13.0653       161.959       175.024    
  40  0.210192      -1.55973      -37.7739       37.7739       162.816       200.590    
  41  0.158846      -1.83982      -44.5572       44.5572       161.952       206.509    
  42  0.360401      -1.02054      -24.7156       24.7156       160.258       184.973    
  43  0.508154     -0.676971      -16.3950       16.3950       158.335       174.730    
  44  0.873303     -0.135473      -3.28091       3.28091       162.449       165.730    
  45  0.650524     -0.429977      -10.4133       10.4133       160.315       170.728    
  46  0.805601     -0.216166      -5.23515       5.23515       161.455       166.690    
  47  0.312590E-03  -8.07062      -195.456       195.456       161.906       357.362    
  48  0.892261     -0.113997      -2.76079       2.76079       158.647       161.408    
  49  0.504672     -0.683846      -16.5615       16.5615       161.872       178.433    
  50  0.269834      -1.30995      -31.7245       31.7245       160.681       192.405    
  51  0.752889     -0.283838      -6.87403       6.87403       160.765       167.639    
  52  0.952800     -0.483498E-01  -1.17094       1.17094       157.199       158.370    
  53  0.147189E-01  -4.21863      -102.167       102.167       164.970       267.137    
  54  0.213392      -1.54462      -37.4080       37.4080       158.348       195.756    
  55  0.278061      -1.27992      -30.9973       30.9973       162.401       193.398    
  56  0.668800     -0.402271      -9.74227       9.74227       163.057       172.799    
  57  0.674989     -0.393058      -9.51916       9.51916       161.324       170.843    
  58  0.186370      -1.68002      -40.6870       40.6870       167.774       208.461    
  59  0.133078      -2.01682      -48.8436       48.8436       161.455       210.298    
  60  0.519821     -0.654270      -15.8452       15.8452       164.985       180.831    
  61  0.136847      -1.98889      -48.1673       48.1673       162.825       210.992    
  62  0.604880     -0.502725      -12.1751       12.1751       161.034       173.209    
  63  0.301519      -1.19892      -29.0357       29.0357       161.330       190.365    
  64  0.531506     -0.632040      -15.3069       15.3069       161.050       176.357    
  65  0.554963     -0.588854      -14.2610       14.2610       155.759       170.020    
  66  0.264726      -1.32906      -32.1874       32.1874       162.643       194.831    
  67  0.520437     -0.653087      -15.8166       15.8166       156.791       172.608    
  68  0.457095     -0.782865      -18.9596       18.9596       161.413       180.372    
  69  0.349515      -1.05121      -25.4584       25.4584       165.069       190.527    
  70  0.624446E-01  -2.77348      -67.1686       67.1686       163.976       231.145    
  71  0.659983     -0.415541      -10.0636       10.0636       162.571       172.635    
  72  0.171300      -1.76434      -42.7291       42.7291       162.947       205.676    
  73  0.458973E-01  -3.08135      -74.6247       74.6247       170.733       245.358    
  74  0.669804     -0.400770      -9.70593       9.70593       159.760       169.466    
  75  0.664636     -0.408516      -9.89351       9.89351       160.049       169.943    
loop,thermsimp(1:2)       62   2.08801       58.3274    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190        159.73          0.85          1.14         25.28          0.10          0.06         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191        158.51          0.85          1.14         25.36          0.00          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       62
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       63
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      190     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -11.6870       11.6870       152.236       163.923    
   2  0.828850     -0.187716      -4.54613       4.54613       156.586       161.133    
   3  0.138898      -1.97402      -47.8071       47.8071       157.199       205.006    
   4  0.174947      -1.74327      -42.2189       42.2189       160.107       202.326    
   5  0.452367E-01  -3.09585      -74.9758       74.9758       158.647       233.623    
   6  0.982229     -0.179305E-01 -0.434243      0.434243       161.597       162.032    
   7  0.855728     -0.155803      -3.77327       3.77327       161.480       165.253    
   8  0.350750      -1.04768      -25.3729       25.3729       161.726       187.098    
   9  0.880054     -0.127772      -3.09441       3.09441       162.983       166.077    
  10  0.106511      -2.23950      -54.2367       54.2367       162.449       216.686    
  11  0.336060      -1.09047      -26.4091       26.4091       158.419       184.828    
  12  0.904819     -0.100020      -2.42231       2.42231       161.455       163.877    
  13  0.765597     -0.267099      -6.46865       6.46865       160.765       167.234    
  14  0.551789     -0.594589      -14.3999       14.3999       161.237       175.637    
  15  0.832435     -0.183400      -4.44161       4.44161       163.578       168.020    
  16  0.353494      -1.03989      -25.1843       25.1843       159.760       184.944    
  17  0.510104     -0.673140      -16.3022       16.3022       160.049       176.351    
  18  0.523162     -0.647863      -15.6901       15.6901       155.759       171.449    
  19  0.953043     -0.480957E-01  -1.16479       1.16479       160.315       161.480    
  20  0.267001E-01  -3.62309      -87.7446       87.7446       161.324       249.068    
  21  0.280924      -1.26967      -30.7491       30.7491       162.455       193.204    
  22  0.956868     -0.440901E-01  -1.06778       1.06778       161.455       162.522    
  23  0.779725     -0.248814      -6.02582       6.02582       156.791       162.817    
  24  0.901061     -0.104183      -2.52312       2.52312       162.571       165.094    
  25  0.533391     -0.628501      -15.2212       15.2212       162.606       177.828    
  26  0.642536     -0.442333      -10.7125       10.7125       163.057       173.769    
  27  0.520565E-01  -2.95543      -71.5750       71.5750       161.034       232.609    
  28  0.330080      -1.10842      -26.8439       26.8439       165.090       191.934    
  29  0.280801      -1.27011      -30.7598       30.7598       155.551       186.311    
  30  0.144013      -1.93785      -46.9312       46.9312       164.566       211.497    
  31  0.201537      -1.60178      -38.7922       38.7922       158.335       197.127    
  32  0.920188     -0.831777E-01  -2.01441       2.01441       161.959       163.973    
  33  0.747222     -0.291393      -7.05701       7.05701       158.314       165.371    
  34  0.697959     -0.359595      -8.70874       8.70874       158.974       167.682    
  35  0.492949     -0.707349      -17.1307       17.1307       161.050       178.180    
  36  0.378001     -0.972857      -23.5608       23.5608       162.484       186.045    
  37  0.936484     -0.656225E-01  -1.58926       1.58926       161.872       163.461    
  38  0.458232     -0.780381      -18.8994       18.8994       161.413       180.312    
  39  0.286796      -1.24898      -30.2482       30.2482       164.985       195.234    
  40  0.524458     -0.645389      -15.6302       15.6302       161.736       177.366    
  41  0.126679      -2.06610      -50.0372       50.0372       154.957       204.994    
  42  0.645270     -0.438086      -10.6096       10.6096       160.258       170.867    
  43  0.996049     -0.395919E-02 -0.958845E-01  0.958845E-01   164.350       164.446    
  44  0.470695     -0.753545      -18.2495       18.2495       163.364       181.614    
  45  0.783048     -0.244561      -5.92282       5.92282       161.444       167.367    
  46  0.682425     -0.382103      -9.25384       9.25384       161.207       170.461    
  47  0.623779     -0.471960      -11.4300       11.4300       163.261       174.691    
  48  0.138146      -1.97945      -47.9386       47.9386       161.937       209.875    
  49  0.317697      -1.14666      -27.7699       27.7699       161.708       189.478    
  50  0.215616      -1.53426      -37.1569       37.1569       161.330       198.487    
  51  0.392653     -0.934829      -22.6399       22.6399       165.069       187.708    
  52  0.311957      -1.16489      -28.2115       28.2115       154.726       182.938    
  53  0.665567     -0.407116      -9.85960       9.85960       160.681       170.540    
  54  0.124333      -2.08479      -50.4898       50.4898       161.892       212.382    
  55  0.175373      -1.74084      -42.1600       42.1600       162.401       204.561    
  56  0.712195E-01  -2.64199      -63.9842       63.9842       162.643       226.627    
  57  0.626551E-01  -2.77011      -67.0871       67.0871       158.348       225.435    
  58  0.869671     -0.139640      -3.38183       3.38183       162.816       166.198    
  59  0.112950      -2.18081      -52.8152       52.8152       159.061       211.876    
  60  0.837299     -0.177574      -4.30051       4.30051       161.525       165.825    
  61  0.380546     -0.966149      -23.3984       23.3984       162.947       186.345    
  62  0.225371      -1.49001      -36.0853       36.0853       161.952       198.037    
  63  0.556139     -0.586737      -14.2097       14.2097       167.774       181.984    
  64  0.909618     -0.947309E-01  -2.29421       2.29421       161.455       163.749    
  65  0.432012     -0.839301      -20.3264       20.3264       162.825       183.151    
  66  0.554192     -0.590244      -14.2946       14.2946       161.557       175.852    
  67  0.264884      -1.32846      -32.1730       32.1730       155.616       187.789    
  68  0.667330     -0.404471      -9.79556       9.79556       160.242       170.037    
  69  0.445504     -0.808549      -19.5816       19.5816       161.212       180.793    
  70  0.194275      -1.63848      -39.6811       39.6811       160.915       200.596    
  71  0.886150     -0.120869      -2.92722       2.92722       163.976       166.903    
  72  0.487114     -0.719257      -17.4191       17.4191       170.733       188.152    
  73  0.195816E-01  -3.93317      -95.2541       95.2541       161.536       256.790    
  74  0.988505     -0.115613E-01 -0.279994      0.279994       164.970       165.250    
  75  0.632839     -0.457539      -11.0808       11.0808       158.507       169.587    
loop,thermsimp(1:2)       63   11.6870       4.54613    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192        160.89          0.85          1.14         25.31          0.15          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193        158.10          0.86          1.14         25.35          0.02          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       63
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       64
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      192     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -4.90829       4.90829       156.586       161.495    
   2  0.209930      -1.56098      -37.8042       37.8042       160.315       198.119    
   3  0.710991     -0.341096      -8.26072       8.26072       161.597       169.858    
   4  0.967365     -0.331789E-01 -0.803532      0.803532       161.455       162.258    
   5  0.650635E-01  -2.73239      -66.1736       66.1736       156.791       222.965    
   6  0.578340     -0.547593      -13.2617       13.2617       161.872       175.134    
   7  0.928890E-01  -2.37635      -57.5509       57.5509       161.455       219.005    
   8  0.486974     -0.719546      -17.4261       17.4261       161.455       178.881    
   9  0.560625     -0.578703      -14.0151       14.0151       152.236       166.252    
  10  0.552834     -0.592698      -14.3541       14.3541       161.959       176.313    
  11  0.744529E-01  -2.59759      -62.9089       62.9089       164.350       227.259    
  12  0.937600     -0.644318E-01  -1.56042       1.56042       162.571       164.131    
  13  0.154459      -1.86783      -45.2354       45.2354       164.970       210.205    
  14  0.186893E-02  -6.28239      -152.148       152.148       161.480       313.628    
  15  0.250797      -1.38311      -33.4965       33.4965       158.314       191.811    
  16  0.924847E-01  -2.38071      -57.6565       57.6565       161.525       219.181    
  17  0.476680     -0.740911      -17.9435       17.9435       162.983       180.926    
  18  0.266527      -1.32228      -32.0232       32.0232       162.816       194.839    
  19  0.369755     -0.994916      -24.0951       24.0951       163.976       188.071    
  20  0.595561     -0.518252      -12.5511       12.5511       160.765       173.316    
  21  0.636070     -0.452447      -10.9575       10.9575       161.444       172.402    
  22  0.447294     -0.804540      -19.4845       19.4845       158.974       178.458    
  23  0.964945     -0.356839E-01 -0.864199      0.864199       163.578       164.442    
  24  0.752421     -0.284460      -6.88909       6.88909       158.507       165.396    
  25  0.705556     -0.348769      -8.44656       8.44656       160.242       168.688    
  26  0.943467     -0.581939E-01  -1.40935       1.40935       161.207       162.616    
  27  0.272564      -1.29988      -31.4808       31.4808       160.681       192.162    
  28  0.215815      -1.53333      -37.1345       37.1345       160.258       197.392    
  29  0.756955     -0.278452      -6.74360       6.74360       155.759       162.503    
  30  0.538381     -0.619189      -14.9956       14.9956       163.057       178.052    
  31  0.182967      -1.69845      -41.1334       41.1334       163.261       204.394    
  32  0.644758     -0.438881      -10.6289       10.6289       161.237       171.866    
  33  0.939477     -0.624320E-01  -1.51199       1.51199       161.557       163.069    
  34  0.663186     -0.410699      -9.94639       9.94639       160.049       169.995    
  35  0.795014     -0.229396      -5.55556       5.55556       161.736       167.292    
  36  0.630792     -0.460779      -11.1592       11.1592       162.606       173.766    
  37  0.151039      -1.89022      -45.7776       45.7776       161.050       206.827    
  38  0.668306     -0.403009      -9.76015       9.76015       161.413       171.173    
  39  0.683820     -0.380061      -9.20439       9.20439       161.212       170.416    
  40  0.122229      -2.10186      -50.9032       50.9032       163.364       214.268    
  41  0.664453     -0.408791      -9.90017       9.90017       167.774       177.674    
  42  0.548687     -0.600228      -14.5364       14.5364       154.726       169.263    
  43  0.931535     -0.709210E-01  -1.71758       1.71758       162.825       164.542    
  44  0.139742      -1.96796      -47.6604       47.6604       158.419       206.079    
  45  0.429142     -0.845967      -20.4878       20.4878       159.760       180.247    
  46  0.531147     -0.632717      -15.3233       15.3233       162.484       177.807    
  47  0.575558     -0.552416      -13.3785       13.3785       155.551       168.929    
  48  0.336537      -1.08905      -26.3747       26.3747       162.947       189.322    
  49  0.324486      -1.12551      -27.2579       27.2579       161.726       188.983    
  50  0.652768     -0.426534      -10.3299       10.3299       165.069       175.398    
  51  0.537860     -0.620158      -15.0191       15.0191       155.616       170.635    
  52  0.415288     -0.878782      -21.2825       21.2825       170.733       192.016    
  53  0.771827     -0.258995      -6.27240       6.27240       161.708       167.981    
  54  0.537995     -0.619906      -15.0130       15.0130       165.090       180.103    
  55  0.438537     -0.824310      -19.9633       19.9633       162.455       182.418    
  56  0.872114     -0.136835      -3.31389       3.31389       164.985       168.299    
  57  0.974519E-01  -2.32840      -56.3895       56.3895       158.335       214.724    
  58  0.245035      -1.40635      -34.0593       34.0593       161.952       196.011    
  59  0.285418      -1.25380      -30.3648       30.3648       161.330       191.694    
  60  0.598735     -0.512936      -12.4224       12.4224       160.915       173.337    
  61  0.440039     -0.820892      -19.8805       19.8805       160.107       179.988    
  62  0.115587      -2.15774      -52.2564       52.2564       162.401       214.657    
  63  0.479716     -0.734560      -17.7897       17.7897       154.957       172.746    
  64  0.423297     -0.859681      -20.8199       20.8199       157.199       178.019    
  65  0.385689E-01  -3.25531      -78.8377       78.8377       161.937       240.774    
  66  0.504564     -0.684061      -16.5667       16.5667       164.566       181.133    
  67  0.406483     -0.900213      -21.8015       21.8015       159.061       180.863    
  68  0.362573E-01  -3.31712      -80.3345       80.3345       161.892       242.227    
  69  0.666448E-03  -7.31355      -177.121       177.121       162.449       339.570    
  70  0.428061     -0.848489      -20.5489       20.5489       158.348       178.897    
  71  0.324089      -1.12674      -27.2876       27.2876       162.643       189.931    
  72  0.491354     -0.710591      -17.2092       17.2092       161.034       178.243    
  73  0.610139E-02  -5.09924      -123.494       123.494       158.647       282.141    
  74  0.974548     -0.257817E-01 -0.624387      0.624387       161.324       161.948    
  75  0.196989      -1.62461      -39.3450       39.3450       158.097       197.442    
loop,thermsimp(1:2)       64   4.90829       37.8042    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194        160.66          0.86          1.15         25.30          0.03          0.06         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    195        159.63          0.85          1.16         25.28          0.07          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    159.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       64
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       65
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      194     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -24.2417       24.2417       156.586       180.828    
   2  0.298218      -1.20993      -29.3023       29.3023       161.324       190.626    
   3  0.374092     -0.983254      -23.8126       23.8126       161.455       185.267    
   4  0.417366     -0.873791      -21.1616       21.1616       155.759       176.921    
   5  0.299382      -1.20604      -29.2080       29.2080       161.207       190.415    
   6  0.373029     -0.986099      -23.8815       23.8815       161.557       185.439    
   7  0.628224     -0.464858      -11.2580       11.2580       162.571       173.829    
   8  0.111397      -2.19465      -53.1505       53.1505       163.578       216.728    
   9  0.983555     -0.165818E-01 -0.401581      0.401581       162.825       163.226    
  10  0.394578     -0.929938      -22.5214       22.5214       158.507       181.028    
  11  0.410639     -0.890042      -21.5552       21.5552       152.236       173.792    
  12  0.700680     -0.355705      -8.61452       8.61452       161.736       170.351    
  13  0.223946      -1.49635      -36.2389       36.2389       161.708       197.947    
  14  0.651113E-01  -2.73166      -66.1558       66.1558       164.985       231.141    
  15  0.704010     -0.350963      -8.49969       8.49969       160.242       168.742    
  16  0.172411      -1.75787      -42.5725       42.5725       155.551       198.123    
  17  0.567412     -0.566670      -13.7237       13.7237       154.726       168.450    
  18  0.186334      -1.68021      -40.6917       40.6917       161.597       202.289    
  19  0.677524     -0.389310      -9.42839       9.42839       160.049       169.477    
  20  0.362270      -1.01537      -24.5903       24.5903       161.212       185.802    
  21  0.603880     -0.504381      -12.2152       12.2152       155.616       167.831    
  22  0.782208     -0.245635      -5.94883       5.94883       161.413       167.361    
  23  0.129808      -2.04170      -49.4463       49.4463       161.237       210.684    
  24  0.284816      -1.25591      -30.4159       30.4159       161.444       191.860    
  25  0.246930      -1.39865      -33.8728       33.8728       154.957       188.829    
  26  0.256917      -1.35900      -32.9126       32.9126       160.765       193.678    
  27  0.240545      -1.42485      -34.5073       34.5073       160.915       195.422    
  28  0.218018      -1.52318      -36.8886       36.8886       162.606       199.495    
  29  0.235583E-01  -3.74828      -90.7765       90.7765       161.872       252.648    
  30  0.114660      -2.16578      -52.4513       52.4513       165.069       217.520    
  31  0.119129      -2.12755      -51.5254       51.5254       161.959       213.484    
  32  0.471707     -0.751398      -18.1975       18.1975       167.774       185.971    
  33  0.607413     -0.498546      -12.0739       12.0739       162.484       174.558    
  34  0.568731     -0.564347      -13.6675       13.6675       157.199       170.867    
  35  0.587492     -0.531893      -12.8815       12.8815       163.057       175.938    
  36  0.411259     -0.888533      -21.5187       21.5187       161.034       182.552    
  37  0.836192     -0.178897      -4.33255       4.33255       158.974       163.306    
  38  0.152977      -1.87747      -45.4688       45.4688       161.455       206.923    
  39  0.941831     -0.599291E-01  -1.45137       1.45137       158.348       159.799    
  40  0.936595     -0.655045E-01  -1.58640       1.58640       160.107       161.694    
  41  0.856621     -0.154759      -3.74799       3.74799       165.090       168.838    
  42  0.484786     -0.724047      -17.5351       17.5351       159.760       177.295    
  43  0.188261      -1.66993      -40.4426       40.4426       159.061       199.504    
  44  0.957606     -0.433189E-01  -1.04911       1.04911       162.983       164.032    
  45  0.234891      -1.44863      -35.0833       35.0833       164.566       199.649    
  46  0.758920     -0.275858      -6.68079       6.68079       162.455       169.136    
  47  0.135340      -1.99997      -48.4356       48.4356       163.976       212.412    
  48  0.779121E-01  -2.55217      -61.8090       61.8090       161.726       223.535    
  49  0.573767     -0.555531      -13.4540       13.4540       162.947       176.401    
  50  0.982512     -0.176424E-01 -0.427267      0.427267       162.643       163.070    
  51  0.109579      -2.21111      -53.5491       53.5491       161.330       214.879    
  52  0.714543     -0.336113      -8.14004       8.14004       158.314       166.454    
  53  0.573216     -0.556492      -13.4772       13.4772       170.733       184.210    
  54  0.389116     -0.943877      -22.8590       22.8590       160.681       183.540    
  55  0.149817      -1.89834      -45.9744       45.9744       162.816       208.790    
  56  0.623269     -0.472778      -11.4498       11.4498       161.952       173.402    
  57  0.682320E-02  -4.98743      -120.786       120.786       160.258       281.044    
  58  0.641698     -0.443637      -10.7441       10.7441       158.097       168.841    
  59  0.233363      -1.45516      -35.2414       35.2414       160.315       195.556    
  60  0.881483     -0.126150      -3.05512       3.05512       163.261       166.316    
  61  0.264921      -1.32832      -32.1696       32.1696       158.419       190.588    
  62  0.941652     -0.601200E-01  -1.45600       1.45600       161.050       162.506    
  63  0.179971      -1.71496      -41.5331       41.5331       164.970       206.503    
  64  0.381207E-01  -3.26700      -79.1207       79.1207       163.364       242.485    
  65  0.998657     -0.134405E-02 -0.325505E-01  0.325505E-01   162.401       162.433    
  66  0.553871     -0.590823      -14.3087       14.3087       158.335       172.643    
  67  0.599651     -0.511408      -12.3854       12.3854       161.455       173.840    
  68  0.834589     -0.180815      -4.37902       4.37902       161.525       165.904    
  69  0.622560     -0.473915      -11.4774       11.4774       156.791       168.269    
  70  0.437672E-03  -7.73404      -187.304       187.304       164.350       351.655    
  71  0.881230     -0.126437      -3.06208       3.06208       161.937       164.999    
  72  0.793726     -0.231017      -5.59482       5.59482       161.892       167.487    
  73  0.499689     -0.693770      -16.8018       16.8018       158.647       175.449    
  74  0.260074      -1.34679      -32.6168       32.6168       161.480       194.096    
  75  0.169454E-01  -4.07776      -98.7559       98.7559       159.627       258.383    
loop,thermsimp(1:2)       65   24.2417       29.3023    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196        160.81          0.86          1.15         25.29          0.06          0.06         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    197        163.87          0.86          1.15         25.36          0.38          0.05         27.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       65
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       66
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      196     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -33.0501       33.0501       158.348       191.398    
   2  0.513427E-01  -2.96923      -71.9094       71.9094       160.107       232.017    
   3  0.288453      -1.24322      -30.1086       30.1086       162.401       192.509    
   4  0.107044      -2.23452      -54.1159       54.1159       161.050       215.166    
   5  0.756779     -0.278684      -6.74921       6.74921       162.643       169.392    
   6  0.333762      -1.09733      -26.5753       26.5753       162.825       189.400    
   7  0.270335      -1.30809      -31.6797       31.6797       158.974       190.653    
   8  0.666278E-01  -2.70863      -65.5982       65.5982       162.983       228.581    
   9  0.517510     -0.658727      -15.9532       15.9532       161.937       177.890    
  10  0.719680     -0.328949      -7.96654       7.96654       161.525       169.491    
  11  0.401542     -0.912442      -22.0977       22.0977       163.261       185.359    
  12  0.408125     -0.896181      -21.7039       21.7039       158.314       180.018    
  13  0.481086     -0.731710      -17.7207       17.7207       161.413       179.133    
  14  0.166952E-01  -4.09263      -99.1161       99.1161       161.892       261.008    
  15  0.913266     -0.907286E-01  -2.19728       2.19728       155.616       157.813    
  16  0.972084     -0.283134E-01 -0.685700      0.685700       156.791       157.477    
  17  0.889421     -0.117184      -2.83799       2.83799       154.726       157.564    
  18  0.171754      -1.76169      -42.6650       42.6650       160.242       202.907    
  19  0.925876     -0.770155E-01  -1.86517       1.86517       165.090       166.955    
  20  0.992897     -0.712866E-02 -0.172643      0.172643       158.097       158.269    
  21  0.118575E-01  -4.43479      -107.403       107.403       162.455       269.858    
  22  0.492413     -0.708438      -17.1571       17.1571       160.049       177.206    
  23  0.952433     -0.487360E-01  -1.18030       1.18030       161.736       162.917    
  24  0.591826     -0.524543      -12.7035       12.7035       157.199       169.903    
  25  0.762199     -0.271548      -6.57639       6.57639       158.335       164.911    
  26  0.613492     -0.488588      -11.8327       11.8327       161.952       173.785    
  27  0.134863      -2.00350      -48.5211       48.5211       152.236       200.758    
  28  0.633670     -0.456227      -11.0490       11.0490       162.571       173.620    
  29  0.829625     -0.186782      -4.52351       4.52351       161.455       165.978    
  30  0.148219      -1.90906      -46.2341       46.2341       162.484       208.718    
  31  0.198093      -1.61902      -39.2097       39.2097       158.647       197.857    
  32  0.321318      -1.13532      -27.4955       27.4955       163.057       190.552    
  33  0.475408     -0.743582      -18.0082       18.0082       162.947       180.955    
  34  0.196520      -1.62699      -39.4028       39.4028       155.759       195.162    
  35  0.637413     -0.450337      -10.9064       10.9064       159.760       170.666    
  36  0.596751     -0.516255      -12.5028       12.5028       156.586       169.089    
  37  0.351361      -1.04594      -25.3308       25.3308       158.507       183.837    
  38  0.111764      -2.19136      -53.0708       53.0708       161.034       214.104    
  39  0.213579      -1.54375      -37.3868       37.3868       160.681       198.068    
  40  0.799647     -0.223585      -5.41483       5.41483       170.733       176.148    
  41  0.670682     -0.399460      -9.67421       9.67421       161.455       171.129    
  42  0.104235      -2.26111      -54.7600       54.7600       161.557       216.317    
  43  0.607160E-01  -2.80155      -67.8484       67.8484       161.212       229.060    
  44  0.462312     -0.771516      -18.6847       18.6847       167.774       186.459    
  45  0.269658      -1.31060      -31.7403       31.7403       154.957       186.697    
  46  0.678606     -0.387714      -9.38973       9.38973       161.207       170.597    
  47  0.669051     -0.401895      -9.73317       9.73317       158.419       168.152    
  48  0.551912     -0.594367      -14.3945       14.3945       161.324       175.718    
  49  0.116070E-01  -4.45614      -107.920       107.920       161.444       269.364    
  50  0.911337     -0.928428E-01  -2.24848       2.24848       160.765       163.014    
  51  0.302404      -1.19599      -28.9647       28.9647       161.480       190.444    
  52  0.527926     -0.638800      -15.4706       15.4706       160.915       176.385    
  53  0.204835      -1.58555      -38.3991       38.3991       160.315       198.714    
  54  0.761388     -0.272612      -6.60216       6.60216       161.708       168.310    
  55  0.189928      -1.66111      -40.2291       40.2291       155.551       195.780    
  56  0.423830     -0.858422      -20.7894       20.7894       162.606       183.396    
  57  0.895148     -0.110767      -2.68257       2.68257       159.061       161.744    
  58  0.109823      -2.20889      -53.4952       53.4952       164.566       218.061    
  59  0.960076     -0.407431E-01 -0.986725      0.986725       161.597       162.584    
  60  0.694180     -0.365024      -8.84022       8.84022       164.970       173.810    
  61  0.302866      -1.19446      -28.9277       28.9277       161.455       190.382    
  62  0.213503      -1.54410      -37.3954       37.3954       162.816       200.211    
  63  0.949162     -0.521754E-01  -1.26359       1.26359       161.237       162.501    
  64  0.912779     -0.912617E-01  -2.21019       2.21019       163.976       166.186    
  65  0.393978     -0.931461      -22.5583       22.5583       161.959       184.517    
  66  0.957683     -0.432380E-01  -1.04715       1.04715       161.330       162.377    
  67  0.785605     -0.241301      -5.84387       5.84387       163.578       169.422    
  68  0.670559     -0.399644      -9.67865       9.67865       165.069       174.747    
  69  0.793392     -0.231438      -5.60500       5.60500       161.726       167.331    
  70  0.594443     -0.520131      -12.5966       12.5966       164.985       177.582    
  71  0.298128      -1.21023      -29.3096       29.3096       163.364       192.674    
  72  0.233680      -1.45380      -35.2084       35.2084       161.872       197.080    
  73  0.410779     -0.889700      -21.5469       21.5469       159.627       181.174    
  74  0.811201     -0.209240      -5.06741       5.06741       160.258       165.325    
  75  0.737617     -0.304330      -7.37033       7.37033       160.814       168.185    
loop,thermsimp(1:2)       66   33.0501       71.9094    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198        159.28          0.86          1.15         25.37          0.02          0.06         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    199        156.24          0.85          1.15         25.33          0.05          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    156.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       66
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       67
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      198     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -29.3271       29.3271       156.791       186.119    
   2  0.840396     -0.173882      -4.21110       4.21110       154.726       158.938    
   3  0.165782      -1.79708      -43.5221       43.5221       155.616       199.138    
   4  0.516202E-01  -2.96384      -71.7789       71.7789       158.097       229.876    
   5  0.163201      -1.81278      -43.9021       43.9021       159.061       202.963    
   6  0.201529      -1.60182      -38.7932       38.7932       161.330       200.123    
   7  0.791805     -0.233441      -5.65351       5.65351       161.237       166.891    
   8  0.306466      -1.18265      -28.6416       28.6416       161.597       190.239    
   9  0.625963     -0.468465      -11.3454       11.3454       161.736       173.082    
  10  0.255827      -1.36325      -33.0156       33.0156       160.765       193.781    
  11  0.275269      -1.29001      -31.2416       31.2416       158.335       189.576    
  12  0.546374     -0.604451      -14.6387       14.6387       160.258       174.896    
  13  0.738275E-01  -2.60602      -63.1132       63.1132       161.455       224.568    
  14  0.459460     -0.777704      -18.8346       18.8346       163.976       182.811    
  15  0.245891      -1.40287      -33.9749       33.9749       165.090       199.065    
  16  0.818144E-01  -2.50330      -60.6254       60.6254       161.726       222.351    
  17  0.791963     -0.233241      -5.64868       5.64868       158.419       164.067    
  18  0.652560     -0.426852      -10.3376       10.3376       160.814       171.152    
  19  0.743237     -0.296740      -7.18650       7.18650       161.708       168.895    
  20  0.146095      -1.92350      -46.5837       46.5837       156.586       203.170    
  21  0.747148     -0.291492      -7.05941       7.05941       162.643       169.703    
  22  0.935024E-01  -2.36977      -57.3915       57.3915       163.578       220.969    
  23  0.924202     -0.788243E-01  -1.90898       1.90898       161.525       163.434    
  24  0.193934      -1.64024      -39.7236       39.7236       157.199       196.923    
  25  0.112499      -2.18481      -52.9121       52.9121       161.207       214.119    
  26  0.609079     -0.495807      -12.0076       12.0076       159.760       171.767    
  27  0.387822     -0.947210      -22.9397       22.9397       161.455       184.394    
  28  0.151976      -1.88403      -45.6279       45.6279       162.571       208.199    
  29  0.820125     -0.198299      -4.80243       4.80243       161.952       166.754    
  30  0.100865      -2.29397      -55.5558       55.5558       164.970       220.526    
  31  0.246930      -1.39865      -33.8728       33.8728       165.069       198.941    
  32  0.101973      -2.28305      -55.2912       55.2912       161.324       216.615    
  33  0.389401     -0.943145      -22.8413       22.8413       170.733       193.574    
  34  0.573635     -0.555762      -13.4595       13.4595       160.915       174.374    
  35  0.730896E-01  -2.61607      -63.3565       63.3565       160.049       223.405    
  36  0.260104      -1.34667      -32.6140       32.6140       164.985       197.599    
  37  0.562102     -0.576073      -13.9514       13.9514       161.937       175.888    
  38  0.159056      -1.83850      -44.5252       44.5252       161.413       205.938    
  39  0.779134E-02  -4.85474      -117.573       117.573       158.314       275.887    
  40  0.693208     -0.366425      -8.87415       8.87415       162.947       171.821    
  41  0.600279     -0.510361      -12.3600       12.3600       159.627       171.987    
  42  0.419387     -0.868962      -21.0447       21.0447       162.606       183.651    
  43  0.952036     -0.491524E-01  -1.19038       1.19038       158.507       159.697    
  44  0.613955     -0.487834      -11.8144       11.8144       161.959       173.773    
  45  0.842752     -0.171082      -4.14331       4.14331       163.261       167.404    
  46  0.733219     -0.310311      -7.51517       7.51517       167.774       175.289    
  47  0.776088     -0.253489      -6.13906       6.13906       154.957       161.096    
  48  0.965215     -0.354047E-01 -0.857436      0.857436       162.825       163.682    
  49  0.487812     -0.717826      -17.3844       17.3844       161.455       178.839    
  50  0.864492     -0.145613      -3.52648       3.52648       161.480       165.006    
  51  0.334607      -1.09480      -26.5140       26.5140       163.057       189.571    
  52  0.267438      -1.31887      -31.9406       31.9406       158.974       190.914    
  53  0.333561      -1.09793      -26.5899       26.5899       158.348       184.938    
  54  0.593184     -0.522250      -12.6480       12.6480       162.401       175.049    
  55  0.832475     -0.183352      -4.44046       4.44046       163.364       167.805    
  56  0.642050     -0.443089      -10.7308       10.7308       155.759       166.490    
  57  0.799223     -0.224116      -5.42768       5.42768       155.551       160.978    
  58  0.184219      -1.69163      -40.9683       40.9683       161.872       202.840    
  59  0.478229     -0.737666      -17.8649       17.8649       158.647       176.512    
  60  0.604888     -0.502712      -12.1748       12.1748       160.681       172.856    
  61  0.575395     -0.552698      -13.3853       13.3853       160.315       173.700    
  62  0.325892E-01  -3.42377      -82.9176       82.9176       162.816       245.733    
  63  0.759877     -0.274599      -6.65029       6.65029       152.236       158.887    
  64  0.214378      -1.54002      -37.2964       37.2964       160.242       197.538    
  65  0.668091     -0.403331      -9.76794       9.76794       162.484       172.252    
  66  0.601122     -0.508958      -12.3260       12.3260       161.034       173.360    
  67  0.378138     -0.972496      -23.5521       23.5521       161.050       184.602    
  68  0.849119     -0.163556      -3.96103       3.96103       161.557       165.518    
  69  0.426509     -0.852121      -20.6368       20.6368       164.566       185.203    
  70  0.558114E-01  -2.88578      -69.8883       69.8883       162.983       232.871    
  71  0.344448      -1.06581      -25.8120       25.8120       161.212       187.024    
  72  0.354132      -1.03809      -25.1405       25.1405       160.107       185.248    
  73  0.387730     -0.947445      -22.9454       22.9454       161.892       184.837    
  74  0.140493      -1.96260      -47.5306       47.5306       161.444       208.975    
  75  0.349783      -1.05044      -25.4398       25.4398       156.242       181.681    
loop,thermsimp(1:2)       67   29.3271       4.21110    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200        160.34          0.86          1.15         25.29          0.12          0.06         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    201        159.96          0.87          1.15         25.31          0.07          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    159.96        1.054     -1.780      2.935     -102.6     0.9177    
                      0.3724      1.322     -99.70      3.474     0.4440    
                       1.584     -1.446      1.530      4966.      6185.    
                     -0.6721      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      4983.      13.48    
                     -0.5672     -6.654     -5.198     -7.927      5.900    
                      -14.92     -3.232      3444.      0.000      2919.    

                       2919.      2919.      4560.      2919.      2588.    
                       3337.     0.2373E-01 0.2863E-01  0.000     0.2313E-01
                     -0.1007    -0.1113     0.9402E-01-0.2081E-01-0.4468E-01

                     -0.2800    -0.9034      0.000    -0.7180E-01-0.2005E-01
                       0.000    -0.5982E-01-0.5100E-01-0.1974    -0.1230E-01
                     -0.6643E-01-0.7950E-01-0.4590     -1.155      4966.    

                     -0.7273    -0.9204     -2.503     -2.503    -0.3561    
                      0.5229      9.097      8.794    -0.2016E+05 -4.000    
                     -0.5898    -0.8655      9.283      8.774    -0.1993E+05

                      -4.000    -0.1252E-01-0.5663      8.923      8.950    
                     -0.4858E+05 -7.000    -0.6604    -0.8377      9.155    
                       8.751    -0.1993E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    159.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       67
neval is:      200
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       68
neval is:      200


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      200     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -112.917       112.917       152.236       265.153    
   2  0.714357     -0.336373      -8.14634       8.14634       154.726       162.873    
   3  0.997096     -0.290808E-02 -0.704285E-01  0.704285E-01   158.507       158.577    
   4  0.905437     -0.993373E-01  -2.40577       2.40577       155.551       157.957    
   5  0.307060      -1.18071      -28.5947       28.5947       154.957       183.551    
   6  0.179061      -1.72003      -41.6559       41.6559       161.525       203.180    
   7  0.384312     -0.956301      -23.1599       23.1599       162.825       185.985    
   8  0.901101     -0.104138      -2.52204       2.52204       158.419       160.941    
   9  0.606170     -0.500594      -12.1235       12.1235       161.480       173.603    
  10  0.515234     -0.663133      -16.0599       16.0599       161.557       177.617    
  11  0.639447     -0.447152      -10.8292       10.8292       155.759       166.589    
  12  0.820429     -0.197928      -4.79345       4.79345       161.952       166.745    
  13  0.521739     -0.650587      -15.7560       15.7560       161.237       176.993    
  14  0.767979     -0.263993      -6.39343       6.39343       163.261       169.654    
  15  0.530366     -0.634187      -15.3589       15.3589       163.364       178.723    
  16  0.732471     -0.311332      -7.53990       7.53990       161.708       169.248    
  17  0.440461     -0.819933      -19.8573       19.8573       162.643       182.500    
  18  0.595715     -0.517993      -12.5449       12.5449       160.814       173.359    
  19  0.407958     -0.896592      -21.7138       21.7138       159.760       181.473    
  20  0.544683     -0.607550      -14.7138       14.7138       162.947       177.661    
  21  0.611386E-01  -2.79461      -67.6804       67.6804       159.627       227.308    
  22  0.135041      -2.00218      -48.4891       48.4891       162.484       210.973    
  23  0.547242     -0.602864      -14.6003       14.6003       160.681       175.281    
  24  0.214436      -1.53975      -37.2899       37.2899       161.736       199.026    
  25  0.340220      -1.07816      -26.1112       26.1112       161.034       187.145    
  26  0.270394      -1.30787      -31.6743       31.6743       160.315       191.989    
  27  0.605229     -0.502149      -12.1611       12.1611       161.959       174.120    
  28  0.630206     -0.461709      -11.1817       11.1817       160.915       172.097    
  29  0.942476     -0.592449E-01  -1.43480       1.43480       160.258       161.693    
  30  0.293125      -1.22716      -29.7195       29.7195       162.401       192.120    
  31  0.526210     -0.642056      -15.5494       15.5494       167.774       183.323    
  32  0.972201     -0.281927E-01 -0.682775      0.682775       161.937       162.619    
  33  0.570000     -0.562119      -13.6135       13.6135       158.647       172.261    
  34  0.752945     -0.283763      -6.87223       6.87223       161.455       168.327    
  35  0.333005      -1.09960      -26.6303       26.6303       156.242       182.872    
  36  0.430444     -0.842939      -20.4144       20.4144       163.976       184.391    
  37  0.106505      -2.23957      -54.2382       54.2382       162.606       216.845    
  38  0.327953      -1.11488      -27.0005       27.0005       161.455       188.455    
  39  0.586631     -0.533359      -12.9170       12.9170       161.050       173.967    
  40  0.563274     -0.573989      -13.9010       13.9010       161.892       175.793    
  41  0.802100     -0.220522      -5.34063       5.34063       158.348       163.688    
  42  0.594871     -0.519411      -12.5792       12.5792       164.566       177.145    
  43  0.816066     -0.203261      -4.92260       4.92260       160.107       165.030    
  44  0.170795E-01  -4.06987      -98.5650       98.5650       156.791       255.356    
  45  0.554958     -0.588864      -14.2612       14.2612       161.212       175.473    
  46  0.674023     -0.394492      -9.55388       9.55388       163.057       172.610    
  47  0.371758     -0.989512      -23.9642       23.9642       158.335       182.299    
  48  0.309440      -1.17299      -28.4077       28.4077       161.597       190.005    
  49  0.182337      -1.70190      -41.2169       41.2169       158.974       200.191    
  50  0.443504     -0.813049      -19.6906       19.6906       170.733       190.424    
  51  0.407824     -0.896918      -21.7217       21.7217       160.765       182.487    
  52  0.140254      -1.96430      -47.5717       47.5717       157.199       204.771    
  53  0.801043     -0.221840      -5.37257       5.37257       160.242       165.614    
  54  0.922923     -0.802099E-01  -1.94254       1.94254       164.985       166.928    
  55  0.982391     -0.177663E-01 -0.430267      0.430267       165.069       165.499    
  56  0.830509     -0.185717      -4.49773       4.49773       165.090       169.587    
  57  0.459056     -0.778583      -18.8559       18.8559       155.616       174.472    
  58  0.918078     -0.854734E-01  -2.07001       2.07001       161.330       163.400    
  59  0.858811E-01  -2.45479      -59.4506       59.4506       161.872       221.323    
  60  0.642813E-01  -2.74449      -66.4665       66.4665       159.061       225.528    
  61  0.328642      -1.11279      -26.9497       26.9497       156.586       183.536    
  62  0.238578      -1.43306      -34.7061       34.7061       161.413       196.119    
  63  0.183249      -1.69691      -41.0961       41.0961       162.571       203.667    
  64  0.575307     -0.552852      -13.3891       13.3891       161.444       174.833    
  65  0.509614     -0.674103      -16.3255       16.3255       161.207       177.533    
  66  0.528199     -0.638283      -15.4580       15.4580       161.324       176.782    
  67  0.114575      -2.16652      -52.4693       52.4693       164.970       217.439    
  68  0.227493      -1.48064      -35.8584       35.8584       163.578       199.436    
  69  0.451305     -0.795613      -19.2683       19.2683       161.726       180.994    
  70  0.873604     -0.135128      -3.27255       3.27255       160.049       163.322    
  71  0.457086     -0.782884      -18.9600       18.9600       161.455       180.415    
  72  0.587276     -0.532261      -12.8904       12.8904       158.097       170.987    
  73  0.193860E-01  -3.94320      -95.4973       95.4973       162.983       258.480    
  74  0.543354     -0.609995      -14.7730       14.7730       162.816       177.589    
  75  0.316881      -1.14923      -27.8322       27.8322       159.959       187.791    
loop,thermsimp(1:2)       68   112.917       8.14634    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    202        162.20          0.86          1.15         25.31          0.21          0.06         27.59
Just calling func    0   0         27.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    203       8100.08          0.87          1.15         25.35          0.29          0.05         27.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       68
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       69
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      202     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -15.7882       15.7882       155.551       171.339    
   2  0.554375     -0.589913      -14.2866       14.2866       158.507       172.793    
   3  0.404373     -0.905418      -21.9276       21.9276       158.419       180.346    
   4  0.632877     -0.457478      -11.0793       11.0793       160.258       171.337    
   5  0.395261     -0.928209      -22.4795       22.4795       161.937       184.416    
   6  0.715068     -0.335378      -8.12225       8.12225       154.726       162.849    
   7  0.918313     -0.852174E-01  -2.06381       2.06381       160.049       162.113    
   8  0.529514E-01  -2.93838      -71.1623       71.1623       161.330       232.492    
   9  0.284219      -1.25801      -30.4667       30.4667       158.348       188.815    
  10  0.809402     -0.211460      -5.12118       5.12118       160.107       165.229    
  11  0.604758     -0.502928      -12.1800       12.1800       165.069       177.248    
  12  0.624772     -0.470369      -11.3915       11.3915       160.242       171.633    
  13  0.622683     -0.473718      -11.4726       11.4726       155.759       167.232    
  14  0.491656     -0.709976      -17.1943       17.1943       161.952       179.146    
  15  0.823484     -0.194211      -4.70343       4.70343       164.985       169.689    
  16  0.185629E-01  -3.98659      -96.5480       96.5480       161.455       258.003    
  17  0.911253     -0.929346E-01  -2.25071       2.25071       161.708       163.959    
  18  0.825116     -0.192231      -4.65549       4.65549       165.090       169.745    
  19  0.902913     -0.102129      -2.47339       2.47339       163.261       165.734    
  20  0.869925     -0.139348      -3.37476       3.37476       158.097       161.472    
  21  0.135445      -1.99919      -48.4167       48.4167       160.915       209.332    
  22  0.516840     -0.660022      -15.9845       15.9845       158.647       174.632    
  23  0.127583      -2.05899      -49.8650       49.8650       163.057       212.922    
  24  0.237062E-01  -3.74202      -90.6249       90.6249       160.814       251.439    
  25  0.456233     -0.784753      -19.0053       19.0053       161.480       180.485    
  26  0.547397     -0.602581      -14.5934       14.5934       161.050       175.643    
  27  0.231746E-02  -6.06728      -146.939       146.939       161.959       308.897    
  28  0.467213     -0.760969      -18.4293       18.4293       155.616       174.045    
  29  0.397333     -0.922981      -22.3529       22.3529       161.444       183.797    
  30  0.291343      -1.23325      -29.8671       29.8671       160.681       190.548    
  31  0.964262     -0.363922E-01 -0.881352      0.881352       161.212       162.093    
  32  0.260485      -1.34521      -32.5785       32.5785       161.892       194.471    
  33  0.868574     -0.140902      -3.41240       3.41240       161.324       164.736    
  34  0.832573     -0.183235      -4.43761       4.43761       161.237       165.675    
  35  0.240383      -1.42552      -34.5236       34.5236       164.566       199.090    
  36  0.878342     -0.129719      -3.14156       3.14156       161.207       164.349    
  37  0.168707      -1.77959      -43.0985       43.0985       162.816       205.914    
  38  0.348015      -1.05551      -25.5626       25.5626       161.557       187.120    
  39  0.846224     -0.166971      -4.04375       4.04375       162.947       166.991    
  40  0.842580     -0.171286      -4.14824       4.14824       163.364       167.513    
  41  0.230401      -1.46794      -35.5507       35.5507       161.455       197.005    
  42  0.441962     -0.816531      -19.7749       19.7749       161.726       181.500    
  43  0.772036     -0.258724      -6.26583       6.26583       159.760       166.025    
  44  0.970063     -0.303946E-01 -0.736101      0.736101       158.335       159.071    
  45  0.610535     -0.493419      -11.9497       11.9497       160.765       172.715    
  46  0.548201     -0.601114      -14.5579       14.5579       162.643       177.201    
  47  0.322533      -1.13155      -27.4041       27.4041       156.242       183.646    
  48  0.194318E-01  -3.94084      -95.4401       95.4401       167.774       263.214    
  49  0.219930      -1.51445      -36.6771       36.6771       156.586       193.264    
  50  0.538995E-01  -2.92063      -70.7325       70.7325       154.957       225.689    
  51  0.189941      -1.66104      -40.2274       40.2274       163.976       204.204    
  52  0.339787      -1.07944      -26.1420       26.1420       162.825       188.967    
  53  0.783417     -0.244091      -5.91143       5.91143       161.034       166.945    
  54  0.347888      -1.05587      -25.5713       25.5713       159.959       185.530    
  55  0.511342     -0.670716      -16.2435       16.2435       161.455       177.698    
  56  0.656791     -0.420389      -10.1811       10.1811       161.597       171.778    
  57  0.433072E-01  -3.13944      -76.0315       76.0315       170.733       246.765    
  58  0.940019     -0.618557E-01  -1.49803       1.49803       160.315       161.813    
  59  0.560131     -0.579584      -14.0365       14.0365       162.401       176.437    
  60  0.335604      -1.09182      -26.4420       26.4420       161.413       187.855    
  61  0.677192     -0.389801      -9.44027       9.44027       161.736       171.177    
  62  0.166447      -1.79308      -43.4251       43.4251       163.578       207.003    
  63  0.966787     -0.337766E-01 -0.818008      0.818008       158.974       159.792    
  64  0.501486     -0.690179      -16.7149       16.7149       161.525       178.239    
  65  0.339741      -1.07957      -26.1453       26.1453       162.571       188.716    
  66  0.920721     -0.825986E-01  -2.00039       2.00039       157.199       159.200    
  67  0.215901      -1.53293      -37.1249       37.1249       162.484       199.609    
  68  0.259645      -1.34844      -32.6568       32.6568       162.606       195.263    
  69  0.927059     -0.757381E-01  -1.83424       1.83424       164.970       166.804    
  70  0.766870E-02  -4.87061      -117.957       117.957       161.872       279.829    
  71  0.398597     -0.919805      -22.2760       22.2760       159.061       181.337    
  72  0.870407     -0.138794      -3.36134       3.36134       159.627       162.989    
  73  0.571318     -0.559809      -13.5576       13.5576       156.791       170.349    
  74  0.443420     -0.813239      -19.6952       19.6952       162.983       182.678    
  75  0.796895     -0.227033      -5.49832       5.49832       162.205       167.703    
loop,thermsimp(1:2)       69   15.7882       14.2866    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204        159.05          0.86          1.15         25.27          0.07          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    205        158.82          0.86          1.15         25.28          0.09          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       69
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       70
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      204     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -34.3435       34.3435       158.335       192.678    
   2  0.384023     -0.957054      -23.1781       23.1781       157.199       180.377    
   3  0.672379     -0.396933      -9.61300       9.61300       158.974       168.587    
   4  0.204591      -1.58674      -38.4280       38.4280       158.097       196.525    
   5  0.145151      -1.92998      -46.7406       46.7406       160.315       207.056    
   6  0.235757      -1.44495      -34.9941       34.9941       161.212       196.206    
   7  0.882595     -0.124889      -3.02459       3.02459       160.049       163.074    
   8  0.215562      -1.53451      -37.1630       37.1630       154.726       191.889    
   9  0.248905      -1.39068      -33.6798       33.6798       159.627       193.307    
  10  0.695481     -0.363152      -8.79488       8.79488       161.708       170.503    
  11  0.515786     -0.662063      -16.0340       16.0340       161.207       177.241    
  12  0.956817     -0.441428E-01  -1.06906       1.06906       161.324       162.393    
  13  0.256477      -1.36072      -32.9541       32.9541       160.107       193.062    
  14  0.870409     -0.138792      -3.36129       3.36129       161.237       164.599    
  15  0.296335      -1.21627      -29.4557       29.4557       163.261       192.717    
  16  0.563087     -0.574322      -13.9090       13.9090       159.760       173.669    
  17  0.860973     -0.149692      -3.62527       3.62527       164.970       168.595    
  18  0.336353      -1.08959      -26.3880       26.3880       161.034       187.422    
  19  0.432238     -0.838780      -20.3137       20.3137       162.947       183.261    
  20  0.411587     -0.887734      -21.4993       21.4993       155.759       177.259    
  21  0.685679     -0.377346      -9.13862       9.13862       163.364       172.503    
  22  0.178038E-01  -4.02835      -97.5592       97.5592       162.205       259.764    
  23  0.330516      -1.10710      -26.8120       26.8120       164.985       191.797    
  24  0.987115     -0.129685E-01 -0.314073      0.314073       165.090       165.404    
  25  0.702947     -0.352474      -8.53628       8.53628       156.791       165.328    
  26  0.159040      -1.83860      -44.5275       44.5275       161.736       206.264    
  27  0.329714      -1.10953      -26.8708       26.8708       160.258       187.129    
  28  0.542452     -0.611656      -14.8132       14.8132       155.551       170.364    
  29  0.484074     -0.725518      -17.5707       17.5707       160.242       177.813    
  30  0.574330     -0.554551      -13.4302       13.4302       161.597       175.028    
  31  0.987944     -0.121288E-01 -0.293739      0.293739       160.765       161.059    
  32  0.565195E-01  -2.87317      -69.5830       69.5830       158.507       228.090    
  33  0.662626     -0.411545      -9.96687       9.96687       155.616       165.583    
  34  0.462195     -0.771769      -18.6908       18.6908       158.647       177.338    
  35  0.413957     -0.881994      -21.3603       21.3603       161.050       182.410    
  36  0.627825     -0.465493      -11.2734       11.2734       162.401       173.674    
  37  0.373783E-01  -3.28667      -79.5971       79.5971       162.643       242.240    
  38  0.318481      -1.14419      -27.7103       27.7103       165.069       192.779    
  39  0.193037      -1.64487      -39.8359       39.8359       161.455       201.290    
  40  0.246573      -1.40010      -33.9079       33.9079       161.525       195.432    
  41  0.913643     -0.903152E-01  -2.18727       2.18727       161.952       164.139    
  42  0.593287     -0.522077      -12.6437       12.6437       158.419       171.062    
  43  0.323913      -1.12728      -27.3007       27.3007       161.480       188.780    
  44  0.270579E-01  -3.60978      -87.4222       87.4222       159.061       246.483    
  45  0.684823     -0.378595      -9.16889       9.16889       161.726       170.894    
  46  0.279340      -1.27532      -30.8860       30.8860       162.983       193.869    
  47  0.285511      -1.25348      -30.3569       30.3569       156.242       186.598    
  48  0.361874      -1.01646      -24.6168       24.6168       161.444       186.061    
  49  0.779291     -0.249370      -6.03930       6.03930       161.937       167.976    
  50  0.590933     -0.526053      -12.7401       12.7401       159.959       172.699    
  51  0.493821E-01  -3.00817      -72.8523       72.8523       161.557       234.410    
  52  0.736348     -0.306053      -7.41205       7.41205       161.413       168.825    
  53  0.300670      -1.20174      -29.1040       29.1040       162.571       191.675    
  54  0.329072      -1.11148      -26.9180       26.9180       158.348       185.266    
  55  0.238483      -1.43346      -34.7157       34.7157       162.825       197.540    
  56  0.296796      -1.21471      -29.4181       29.4181       160.681       190.099    
  57  0.878745     -0.129261      -3.13047       3.13047       156.586       159.717    
  58  0.493874     -0.705475      -17.0853       17.0853       161.892       178.977    
  59  0.112522      -2.18461      -52.9073       52.9073       162.606       215.514    
  60  0.642649     -0.442156      -10.7082       10.7082       161.455       172.163    
  61  0.688378     -0.373417      -9.04349       9.04349       164.566       173.610    
  62  0.879214     -0.128727      -3.11754       3.11754       162.484       165.602    
  63  0.621151E-01  -2.77877      -67.2967       67.2967       163.976       231.273    
  64  0.270748      -1.30657      -31.6427       31.6427       162.816       194.459    
  65  0.871636     -0.137384      -3.32718       3.32718       163.578       166.905    
  66  0.188105      -1.67075      -40.4626       40.4626       160.915       201.378    
  67  0.394507     -0.930118      -22.5258       22.5258       163.057       185.582    
  68  0.532895     -0.629431      -15.2437       15.2437       154.957       170.200    
  69  0.925318     -0.776179E-01  -1.87976       1.87976       161.330       163.209    
  70  0.306237      -1.18340      -28.6597       28.6597       170.733       199.393    
  71  0.214861E-01  -3.84035      -93.0063       93.0063       160.814       253.820    
  72  0.995041     -0.497146E-02 -0.120400      0.120400       161.455       161.575    
  73  0.391846     -0.936888      -22.6897       22.6897       167.774       190.464    
  74  0.409622     -0.892520      -21.6152       21.6152       161.872       183.487    
  75  0.470670     -0.753598      -18.2508       18.2508       158.817       177.067    
loop,thermsimp(1:2)       70   34.3435       23.1781    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206        152.20          0.85          1.14         25.33          0.08          0.07         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    207        153.89          0.84          1.15         25.27          0.04          0.05         27.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       70
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       71
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      206     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -5.09415       5.09415       156.586       161.681    
   2  0.601567     -0.508218      -12.3081       12.3081       160.765       173.073    
   3  0.190401      -1.65862      -40.1688       40.1688       161.455       201.623    
   4  0.827263     -0.189632      -4.59255       4.59255       161.324       165.916    
   5  0.581677     -0.541840      -13.1224       13.1224       160.049       173.171    
   6  0.680336     -0.385169      -9.32809       9.32809       161.330       170.658    
   7  0.641383     -0.444128      -10.7560       10.7560       161.952       172.708    
   8  0.593931     -0.520992      -12.6175       12.6175       161.237       173.855    
   9  0.326400      -1.11963      -27.1155       27.1155       156.791       183.907    
  10  0.964323     -0.363286E-01 -0.879813      0.879813       165.090       165.970    
  11  0.481751     -0.730328      -17.6872       17.6872       155.616       173.303    
  12  0.230624E-01  -3.76955      -91.2917       91.2917       162.484       253.776    
  13  0.214859      -1.53777      -37.2421       37.2421       163.578       200.820    
  14  0.325804      -1.12146      -27.1597       27.1597       161.937       189.096    
  15  0.668745     -0.402353      -9.74426       9.74426       158.974       168.718    
  16  0.803263     -0.219073      -5.30555       5.30555       164.970       170.275    
  17  0.465531     -0.764577      -18.5167       18.5167       161.413       179.929    
  18  0.589796     -0.527978      -12.7867       12.7867       154.957       167.743    
  19  0.783335     -0.244195      -5.91397       5.91397       155.551       161.465    
  20  0.937099     -0.649659E-01  -1.57336       1.57336       161.708       163.281    
  21  0.504081     -0.685019      -16.5899       16.5899       161.726       178.315    
  22  0.368431E-01  -3.30109      -79.9463       79.9463       158.419       238.365    
  23  0.462712     -0.770651      -18.6638       18.6638       161.455       180.118    
  24  0.172447      -1.75767      -42.5675       42.5675       163.364       205.932    
  25  0.361979      -1.01617      -24.6098       24.6098       159.959       184.569    
  26  0.616189     -0.484202      -11.7265       11.7265       164.566       176.293    
  27  0.495582     -0.702023      -17.0017       17.0017       159.760       176.761    
  28  0.492859     -0.707532      -17.1352       17.1352       162.401       179.536    
  29  0.189027      -1.66586      -40.3442       40.3442       161.597       201.942    
  30  0.336237      -1.08994      -26.3964       26.3964       158.817       185.213    
  31  0.997382     -0.262184E-02 -0.634961E-01  0.634961E-01   161.207       161.270    
  32  0.629287     -0.463168      -11.2171       11.2171       155.759       166.976    
  33  0.226178      -1.48644      -35.9988       35.9988       158.647       194.646    
  34  0.522315     -0.649483      -15.7293       15.7293       160.242       175.971    
  35  0.238835E-02  -6.03715      -146.209       146.209       161.892       308.101    
  36  0.123092E-01  -4.39741      -106.497       106.497       157.199       263.696    
  37  0.488141     -0.717152      -17.3681       17.3681       161.050       178.418    
  38  0.925188     -0.777584E-01  -1.88317       1.88317       162.947       164.830    
  39  0.676413     -0.390952      -9.46814       9.46814       161.872       171.340    
  40  0.638827     -0.448121      -10.8527       10.8527       158.348       169.201    
  41  0.789998     -0.235725      -5.70883       5.70883       163.057       168.765    
  42  0.453703E-01  -3.09290      -74.9044       74.9044       161.444       236.349    
  43  0.866893     -0.142840      -3.45933       3.45933       156.242       159.701    
  44  0.122493E-01  -4.40228      -106.615       106.615       160.258       266.873    
  45  0.172311      -1.75846      -42.5866       42.5866       161.034       203.620    
  46  0.899580     -0.105827      -2.56293       2.56293       161.480       164.043    
  47  0.857845     -0.153332      -3.71342       3.71342       160.681       164.394    
  48  0.176813      -1.73266      -41.9619       41.9619       167.774       209.736    
  49  0.795271E-01  -2.53166      -61.3121       61.3121       162.571       223.883    
  50  0.461368     -0.773559      -18.7342       18.7342       164.985       183.720    
  51  0.727625     -0.317970      -7.70065       7.70065       154.726       162.427    
  52  0.106879      -2.23606      -54.1534       54.1534       158.335       212.488    
  53  0.169411      -1.77543      -42.9976       42.9976       163.261       206.259    
  54  0.150923      -1.89099      -45.7963       45.7963       165.069       210.865    
  55  0.970144     -0.303104E-01 -0.734064      0.734064       160.107       160.842    
  56  0.819386     -0.199200      -4.82426       4.82426       159.627       164.452    
  57  0.855509     -0.156059      -3.77947       3.77947       162.983       166.762    
  58  0.248182      -1.39359      -33.7503       33.7503       162.816       196.566    
  59  0.632181     -0.458580      -11.1060       11.1060       161.525       172.631    
  60  0.626090     -0.468262      -11.3405       11.3405       161.212       172.552    
  61  0.122722      -2.09783      -50.8056       50.8056       158.097       208.902    
  62  0.656077     -0.421477      -10.2074       10.2074       162.825       173.032    
  63  0.811645     -0.208692      -5.05415       5.05415       170.733       175.787    
  64  0.241419E-05  -12.9341      -313.242       313.242       161.455       474.696    
  65  0.450747     -0.796849      -19.2982       19.2982       160.915       180.213    
  66  0.299124      -1.20690      -29.2289       29.2289       161.736       190.965    
  67  0.156254      -1.85627      -44.9556       44.9556       160.315       205.271    
  68  0.323711      -1.12790      -27.3158       27.3158       162.606       189.922    
  69  0.447335     -0.804447      -19.4822       19.4822       158.507       177.989    
  70  0.457702     -0.781538      -18.9274       18.9274       163.976       182.904    
  71  0.532478     -0.630214      -15.2626       15.2626       161.557       176.820    
  72  0.847970E-01  -2.46749      -59.7583       59.7583       162.643       222.401    
  73  0.624219     -0.471254      -11.4129       11.4129       159.061       170.474    
  74  0.753467     -0.283070      -6.85544       6.85544       160.814       167.670    
  75  0.838964     -0.175587      -4.25240       4.25240       152.198       156.450    
loop,thermsimp(1:2)       71   5.09415       12.3081    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208        159.50          0.87          1.16         25.29          0.16          0.05         27.53
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    209        156.39          0.86          1.15         25.29          0.05          0.04         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    156.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       71
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       72
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      208     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -3.36349       3.36349       152.198       155.562    
   2  0.470451     -0.754063      -18.2620       18.2620       156.242       174.504    
   3  0.615627     -0.485114      -11.7486       11.7486       160.107       171.856    
   4  0.291899      -1.23135      -29.8210       29.8210       161.207       191.028    
   5  0.584822     -0.536448      -12.9918       12.9918       155.551       168.543    
   6  0.681731     -0.383120      -9.27848       9.27848       156.586       165.865    
   7  0.680149     -0.385444      -9.33475       9.33475       154.726       164.061    
   8  0.560478     -0.578966      -14.0215       14.0215       161.708       175.730    
   9  0.392299     -0.935730      -22.6617       22.6617       161.480       184.141    
  10  0.586793     -0.533083      -12.9103       12.9103       160.681       173.591    
  11  0.461418     -0.773452      -18.7316       18.7316       159.627       178.359    
  12  0.142886      -1.94571      -47.1216       47.1216       162.947       210.069    
  13  0.960325     -0.404831E-01 -0.980427      0.980427       161.324       162.304    
  14  0.547176     -0.602984      -14.6032       14.6032       165.090       179.693    
  15  0.817596     -0.201386      -4.87721       4.87721       162.983       167.860    
  16  0.184065      -1.69247      -40.9885       40.9885       155.759       196.748    
  17  0.763954     -0.269247      -6.52068       6.52068       160.814       167.335    
  18  0.740640     -0.300240      -7.27127       7.27127       154.957       162.228    
  19  0.257299      -1.35751      -32.8765       32.8765       158.974       191.850    
  20  0.274950      -1.29117      -31.2697       31.2697       163.057       194.326    
  21  0.850599     -0.161814      -3.91885       3.91885       158.348       162.267    
  22  0.265651      -1.32557      -32.1030       32.1030       164.970       197.073    
  23  0.388810     -0.944665      -22.8781       22.8781       159.061       181.939    
  24  0.921262     -0.820106E-01  -1.98615       1.98615       161.330       163.316    
  25  0.622168     -0.474545      -11.4926       11.4926       161.872       173.365    
  26  0.831499     -0.184526      -4.46887       4.46887       161.212       165.681    
  27  0.777776     -0.251317      -6.08644       6.08644       161.525       167.611    
  28  0.519638     -0.654624      -15.8538       15.8538       161.952       177.806    
  29  0.343480      -1.06863      -25.8802       25.8802       162.825       188.705    
  30  0.379182     -0.969738      -23.4853       23.4853       160.765       184.250    
  31  0.509964     -0.673415      -16.3089       16.3089       160.049       176.358    
  32  0.457294E-01  -3.08501      -74.7134       74.7134       155.616       230.329    
  33  0.952238     -0.489400E-01  -1.18524       1.18524       161.237       162.422    
  34  0.198116      -1.61890      -39.2069       39.2069       170.733       209.940    
  35  0.863922     -0.146273      -3.54247       3.54247       160.242       163.784    
  36  0.765944     -0.266646      -6.45769       6.45769       164.566       171.024    
  37  0.849389     -0.163238      -3.95334       3.95334       159.760       163.713    
  38  0.488339     -0.716745      -17.3583       17.3583       161.557       178.915    
  39  0.969632     -0.308388E-01 -0.746860      0.746860       158.507       159.254    
  40  0.971690     -0.287184E-01 -0.695507      0.695507       161.726       162.421    
  41  0.690522     -0.370307      -8.96817       8.96817       161.050       170.018    
  42  0.266028      -1.32415      -32.0686       32.0686       162.401       194.469    
  43  0.581296     -0.542495      -13.1382       13.1382       161.413       174.551    
  44  0.636654     -0.451529      -10.9352       10.9352       161.455       172.390    
  45  0.947680     -0.537383E-01  -1.30145       1.30145       160.915       162.216    
  46  0.792806     -0.232176      -5.62289       5.62289       163.976       169.599    
  47  0.420588     -0.866101      -20.9754       20.9754       164.985       185.961    
  48  0.780043     -0.248407      -6.01596       6.01596       156.791       162.807    
  49  0.834700E-01  -2.48327      -60.1403       60.1403       159.959       220.099    
  50  0.707823     -0.345562      -8.36888       8.36888       158.817       167.185    
  51  0.836500     -0.178529      -4.32365       4.32365       161.937       166.260    
  52  0.111614      -2.19271      -53.1034       53.1034       162.606       215.710    
  53  0.690314     -0.370608      -8.97546       8.97546       161.736       170.712    
  54  0.200139      -1.60874      -38.9609       38.9609       158.647       197.608    
  55  0.182543E-01  -4.00336      -96.9540       96.9540       162.816       259.770    
  56  0.248611      -1.39187      -33.7085       33.7085       163.578       197.286    
  57  0.951106     -0.501293E-01  -1.21404       1.21404       161.455       162.669    
  58  0.576942     -0.550013      -13.3203       13.3203       161.597       174.918    
  59  0.335384      -1.09248      -26.4579       26.4579       161.034       187.491    
  60  0.137719E-01  -4.28512      -103.778       103.778       160.315       264.093    
  61  0.839758     -0.174642      -4.22951       4.22951       163.364       167.594    
  62  0.324640      -1.12504      -27.2464       27.2464       163.261       190.507    
  63  0.758550     -0.276346      -6.69260       6.69260       158.097       164.789    
  64  0.704737     -0.349931      -8.47469       8.47469       167.774       176.249    
  65  0.848812     -0.163918      -3.96980       3.96980       165.069       169.038    
  66  0.881053     -0.126637      -3.06692       3.06692       158.335       161.401    
  67  0.191937      -1.65059      -39.9743       39.9743       162.643       202.617    
  68  0.646624     -0.435990      -10.5589       10.5589       162.571       173.130    
  69  0.424145     -0.857680      -20.7715       20.7715       161.444       182.216    
  70  0.760934     -0.273209      -6.61663       6.61663       158.419       165.035    
  71  0.774467     -0.255580      -6.18968       6.18968       162.484       168.674    
  72  0.253405      -1.37276      -33.2459       33.2459       157.199       190.445    
  73  0.251414      -1.38065      -33.4369       33.4369       160.258       193.695    
  74  0.600642     -0.509755      -12.3454       12.3454       161.892       174.237    
  75  0.209781      -1.56169      -37.8213       37.8213       156.387       194.208    
loop,thermsimp(1:2)       72   3.36349       18.2620    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210        160.21          0.82          1.14         25.30          0.14          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    211        163.24          0.83          1.15         25.29          0.07          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       72
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       73
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      210     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -7.22982       7.22982       152.198       159.428    
   2  0.823468     -0.194230      -4.70391       4.70391       158.507       163.211    
   3  0.352913      -1.04153      -25.2241       25.2241       158.335       183.559    
   4  0.268511      -1.31486      -31.8436       31.8436       160.915       192.759    
   5  0.137541      -1.98383      -48.0449       48.0449       154.957       203.001    
   6  0.953738     -0.473661E-01  -1.14712       1.14712       158.348       159.495    
   7  0.366602      -1.00348      -24.3024       24.3024       161.324       185.626    
   8  0.861530     -0.149046      -3.60962       3.60962       161.726       165.335    
   9  0.190086      -1.66028      -40.2089       40.2089       161.237       201.446    
  10  0.931621     -0.708293E-01  -1.71536       1.71536       161.455       163.170    
  11  0.135562      -1.99833      -48.3959       48.3959       156.791       205.187    
  12  0.577052     -0.549824      -13.3157       13.3157       161.330       174.645    
  13  0.937511     -0.645266E-01  -1.56272       1.56272       159.760       161.322    
  14  0.836727     -0.178258      -4.31708       4.31708       160.242       164.559    
  15  0.124731      -2.08159      -50.4124       50.4124       154.726       205.139    
  16  0.830758     -0.185417      -4.49047       4.49047       158.097       162.587    
  17  0.925849     -0.770442E-01  -1.86587       1.86587       158.419       160.285    
  18  0.945668     -0.558633E-01  -1.35291       1.35291       161.212       162.565    
  19  0.700762     -0.355587      -8.61167       8.61167       156.586       165.198    
  20  0.585168E-01  -2.83844      -68.7419       68.7419       161.937       230.679    
  21  0.241985      -1.41888      -34.3627       34.3627       158.817       193.179    
  22  0.426115     -0.853047      -20.6592       20.6592       160.814       181.473    
  23  0.730656     -0.313813      -7.59998       7.59998       163.364       170.964    
  24  0.227460      -1.48078      -35.8619       35.8619       161.525       197.386    
  25  0.824070     -0.193500      -4.68621       4.68621       162.983       167.669    
  26  0.912829     -0.912064E-01  -2.20885       2.20885       155.551       157.760    
  27  0.130860      -2.03363      -49.2508       49.2508       162.484       211.735    
  28  0.126999      -2.06358      -49.9761       49.9761       165.069       215.045    
  29  0.394828E-01  -3.23189      -78.2705       78.2705       163.976       242.247    
  30  0.927793     -0.749466E-01  -1.81507       1.81507       161.050       162.865    
  31  0.161762      -1.82163      -44.1166       44.1166       161.736       205.853    
  32  0.510374     -0.672611      -16.2894       16.2894       164.566       180.856    
  33  0.930607     -0.719186E-01  -1.74174       1.74174       160.107       161.849    
  34  0.825283E-01  -2.49461      -60.4150       60.4150       161.455       221.870    
  35  0.569143     -0.563624      -13.6500       13.6500       162.571       176.221    
  36  0.732951     -0.310676      -7.52402       7.52402       161.872       169.396    
  37  0.554950     -0.588877      -14.2615       14.2615       160.681       174.942    
  38  0.614368     -0.487160      -11.7981       11.7981       161.892       173.690    
  39  0.127889      -2.05659      -49.8070       49.8070       156.242       206.048    
  40  0.510007     -0.673330      -16.3068       16.3068       161.413       177.719    
  41  0.206107      -1.57936      -38.2493       38.2493       161.597       199.847    
  42  0.812962E-01  -2.50966      -60.7793       60.7793       161.708       222.487    
  43  0.711913     -0.339799      -8.22933       8.22933       167.774       176.003    
  44  0.649899     -0.430939      -10.4366       10.4366       160.049       170.486    
  45  0.102708      -2.27587      -55.1174       55.1174       161.952       217.069    
  46  0.152702      -1.87927      -45.5124       45.5124       159.627       205.140    
  47  0.827734     -0.189064      -4.57879       4.57879       161.557       166.136    
  48  0.558329     -0.582808      -14.1145       14.1145       165.090       179.204    
  49  0.174746      -1.74442      -42.2468       42.2468       159.061       201.308    
  50  0.107247      -2.23262      -54.0701       54.0701       161.444       215.514    
  51  0.988891     -0.111711E-01 -0.270543      0.270543       161.480       161.750    
  52  0.388651     -0.945075      -22.8880       22.8880       160.765       183.653    
  53  0.580190     -0.544399      -13.1844       13.1844       164.985       178.170    
  54  0.519409E-01  -2.95765      -71.6289       71.6289       161.034       232.662    
  55  0.418368     -0.871393      -21.1036       21.1036       162.825       183.928    
  56  0.435950     -0.830228      -20.1066       20.1066       157.199       177.306    
  57  0.226091      -1.48682      -36.0080       36.0080       163.261       199.269    
  58  0.371316     -0.990702      -23.9930       23.9930       161.207       185.200    
  59  0.113770      -2.17358      -52.6402       52.6402       158.974       211.614    
  60  0.335886      -1.09098      -26.4217       26.4217       160.258       186.679    
  61  0.733883     -0.309406      -7.49325       7.49325       156.387       163.880    
  62  0.127704      -2.05804      -49.8421       49.8421       163.057       212.899    
  63  0.205687      -1.58140      -38.2987       38.2987       162.401       200.699    
  64  0.315213      -1.15451      -27.9601       27.9601       155.759       183.719    
  65  0.329345      -1.11065      -26.8979       26.8979       164.970       191.868    
  66  0.193213      -1.64396      -39.8138       39.8138       163.578       203.392    
  67  0.593921     -0.521008      -12.6179       12.6179       158.647       171.265    
  68  0.128520      -2.05167      -49.6877       49.6877       162.643       212.331    
  69  0.201122      -1.60384      -38.8422       38.8422       170.733       209.575    
  70  0.699786E-01  -2.65957      -64.4099       64.4099       162.947       227.357    
  71  0.830255     -0.186022      -4.50512       4.50512       162.606       167.111    
  72  0.266599      -1.32201      -32.0166       32.0166       159.959       191.976    
  73  0.170782      -1.76737      -42.8025       42.8025       155.616       198.418    
  74  0.453561     -0.790625      -19.1475       19.1475       162.816       181.963    
  75  0.106539      -2.23924      -54.2304       54.2304       160.210       214.441    
loop,thermsimp(1:2)       73   7.22982       4.70391    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212        159.18          0.86          1.15         25.31          0.25          0.05         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    213        160.49          0.86          1.14         25.28          0.02          0.05         27.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    159.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       73
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       74
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      212     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -4.33929       4.33929       155.551       159.890    
   2  0.439366     -0.822423      -19.9176       19.9176       152.198       172.116    
   3  0.603094     -0.505682      -12.2467       12.2467       158.348       170.595    
   4  0.695854E-01  -2.66520      -64.5463       64.5463       158.419       222.965    
   5  0.273021      -1.29821      -31.4403       31.4403       159.760       191.200    
   6  0.418319     -0.871511      -21.1064       21.1064       161.480       182.586    
   7  0.688437     -0.373331      -9.04141       9.04141       160.107       169.149    
   8  0.400930     -0.913969      -22.1347       22.1347       161.212       183.346    
   9  0.569492     -0.563010      -13.6351       13.6351       158.097       171.732    
  10  0.812441     -0.207712      -5.03041       5.03041       161.050       166.080    
  11  0.222094      -1.50465      -36.4400       36.4400       161.455       197.895    
  12  0.695761     -0.362749      -8.78513       8.78513       158.507       167.292    
  13  0.909536E-01  -2.39741      -58.0608       58.0608       156.387       214.448    
  14  0.297191      -1.21338      -29.3858       29.3858       160.242       189.628    
  15  0.806729     -0.214767      -5.20127       5.20127       156.586       161.788    
  16  0.407021     -0.898891      -21.7695       21.7695       161.726       183.495    
  17  0.520426     -0.653107      -15.8171       15.8171       161.557       177.374    
  18  0.826852     -0.190129      -4.60458       4.60458       162.606       167.211    
  19  0.729268     -0.315714      -7.64602       7.64602       162.983       170.629    
  20  0.344086      -1.06687      -25.8375       25.8375       161.872       187.710    
  21  0.280849      -1.26994      -30.7556       30.7556       160.049       190.805    
  22  0.301244E-01  -3.50242      -84.8223       84.8223       163.364       248.187    
  23  0.503253     -0.686663      -16.6297       16.6297       158.647       175.277    
  24  0.549007     -0.599644      -14.5223       14.5223       161.892       176.414    
  25  0.814230     -0.205513      -4.97714       4.97714       161.330       166.307    
  26  0.641489     -0.443963      -10.7520       10.7520       160.681       171.433    
  27  0.248696      -1.39152      -33.7002       33.7002       167.774       201.474    
  28  0.684472     -0.379107      -9.18128       9.18128       162.571       171.752    
  29  0.815126     -0.204413      -4.95050       4.95050       157.199       162.150    
  30  0.388210     -0.946208      -22.9154       22.9154       161.413       184.328    
  31  0.670538     -0.399675      -9.67940       9.67940       164.985       174.665    
  32  0.851104     -0.161221      -3.90448       3.90448       165.090       168.994    
  33  0.381078     -0.964752      -23.3645       23.3645       164.566       187.931    
  34  0.776256     -0.253273      -6.13381       6.13381       160.814       166.948    
  35  0.168040      -1.78355      -43.1944       43.1944       162.816       206.010    
  36  0.229069      -1.47373      -35.6911       35.6911       158.335       194.026    
  37  0.917563     -0.860337E-01  -2.08358       2.08358       160.765       162.849    
  38  0.161815      -1.82130      -44.1087       44.1087       155.759       199.868    
  39  0.355170      -1.03516      -25.0697       25.0697       162.825       187.894    
  40  0.221709      -1.50639      -36.4820       36.4820       161.207       197.689    
  41  0.424436     -0.856993      -20.7548       20.7548       161.324       182.078    
  42  0.337698      -1.08560      -26.2913       26.2913       160.258       186.549    
  43  0.574481     -0.554289      -13.4239       13.4239       164.970       178.394    
  44  0.614536     -0.486888      -11.7915       11.7915       159.959       171.751    
  45  0.345602      -1.06247      -25.7311       25.7311       160.915       186.646    
  46  0.330006      -1.10864      -26.8494       26.8494       158.817       185.666    
  47  0.934389     -0.678626E-01  -1.64351       1.64351       161.525       163.168    
  48  0.884466     -0.122771      -2.97329       2.97329       155.616       158.589    
  49  0.928979     -0.736686E-01  -1.78412       1.78412       163.261       165.045    
  50  0.788461     -0.237672      -5.75598       5.75598       161.597       167.353    
  51  0.963462     -0.372219E-01 -0.901447      0.901447       162.401       163.302    
  52  0.630201     -0.461716      -11.1819       11.1819       159.061       170.243    
  53  0.797085     -0.226794      -5.49254       5.49254       161.237       166.730    
  54  0.389249     -0.943537      -22.8507       22.8507       154.957       177.807    
  55  0.660522     -0.414724      -10.0439       10.0439       163.578       173.622    
  56  0.520011     -0.653905      -15.8364       15.8364       154.726       170.563    
  57  0.270094      -1.30899      -31.7013       31.7013       159.627       191.329    
  58  0.218485      -1.52104      -36.8367       36.8367       156.791       193.628    
  59  0.391194     -0.938551      -22.7300       22.7300       161.736       184.466    
  60  0.740024     -0.301073      -7.29144       7.29144       156.242       163.533    
  61  0.184403      -1.69063      -40.9441       40.9441       170.733       211.677    
  62  0.309007E-01  -3.47698      -84.2061       84.2061       158.974       243.180    
  63  0.916682     -0.869952E-01  -2.10687       2.10687       162.484       164.591    
  64  0.268894      -1.31344      -31.8091       31.8091       162.643       194.452    
  65  0.705018     -0.349532      -8.46504       8.46504       163.057       171.522    
  66  0.748256     -0.290010      -7.02352       7.02352       160.210       167.234    
  67  0.828532     -0.188099      -4.55542       4.55542       165.069       169.624    
  68  0.336848      -1.08812      -26.3523       26.3523       161.444       187.797    
  69  0.686319     -0.376413      -9.11603       9.11603       161.952       171.068    
  70  0.731123     -0.313173      -7.58449       7.58449       161.455       169.039    
  71  0.793361     -0.231477      -5.60595       5.60595       161.708       167.314    
  72  0.755239     -0.280722      -6.79857       6.79857       162.947       169.746    
  73  0.962869     -0.378380E-01 -0.916369      0.916369       161.937       162.853    
  74  0.705811     -0.348407      -8.43779       8.43779       161.034       169.471    
  75  0.981446E-01  -2.32131      -56.2180       56.2180       159.182       215.400    
loop,thermsimp(1:2)       74   4.33929       19.9176    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214        155.19          0.83          1.14         25.30          0.14          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    215        153.69          0.86          1.14         25.32          0.26          0.05         27.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       74
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       75
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      214     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -23.7684       23.7684       155.616       179.384    
   2  0.269095      -1.31269      -31.7910       31.7910       155.551       187.342    
   3  0.301960      -1.19746      -29.0003       29.0003       156.586       185.587    
   4  0.927593     -0.751619E-01  -1.82029       1.82029       157.199       159.019    
   5  0.783450     -0.244048      -5.91040       5.91040       160.765       166.675    
   6  0.716705     -0.333091      -8.06687       8.06687       161.937       170.004    
   7  0.728578     -0.316661      -7.66896       7.66896       161.525       169.194    
   8  0.752541     -0.284300      -6.88522       6.88522       162.401       169.286    
   9  0.111710      -2.19185      -53.0826       53.0826       156.242       209.324    
  10  0.202752E-01  -3.89836      -94.4112       94.4112       162.484       256.895    
  11  0.967738     -0.327937E-01 -0.794204      0.794204       163.261       164.055    
  12  0.530869     -0.633240      -15.3359       15.3359       161.050       176.386    
  13  0.752699E-01  -2.58668      -62.6446       62.6446       161.330       223.974    
  14  0.658334     -0.418043      -10.1242       10.1242       161.237       171.362    
  15  0.383542     -0.958305      -23.2084       23.2084       160.814       184.023    
  16  0.280803      -1.27010      -30.7596       30.7596       162.606       193.366    
  17  0.976909     -0.233616E-01 -0.565775      0.565775       160.210       160.776    
  18  0.611898     -0.491189      -11.8957       11.8957       158.507       170.402    
  19  0.860469     -0.150278      -3.63947       3.63947       161.708       165.348    
  20  0.375446     -0.979641      -23.7251       23.7251       161.597       185.322    
  21  0.964573     -0.360702E-01 -0.873555      0.873555       165.090       165.963    
  22  0.865663     -0.144259      -3.49369       3.49369       161.455       164.948    
  23  0.498009     -0.697137      -16.8834       16.8834       160.107       176.991    
  24  0.732547     -0.311228      -7.53738       7.53738       161.034       168.571    
  25  0.293766      -1.22497      -29.6666       29.6666       165.069       194.735    
  26  0.805097     -0.216793      -5.25034       5.25034       162.947       168.197    
  27  0.236791      -1.44058      -34.8882       34.8882       159.061       193.949    
  28  0.759809     -0.274688      -6.65245       6.65245       154.726       161.379    
  29  0.279804      -1.27367      -30.8459       30.8459       158.348       189.194    
  30  0.862550     -0.147862      -3.58096       3.58096       162.983       166.564    
  31  0.784800     -0.242327      -5.86871       5.86871       161.952       167.821    
  32  0.231425      -1.46350      -35.4433       35.4433       160.681       196.124    
  33  0.839725     -0.174681      -4.23046       4.23046       163.057       167.287    
  34  0.204862      -1.58542      -38.3960       38.3960       158.097       196.493    
  35  0.741170     -0.299525      -7.25396       7.25396       159.959       167.213    
  36  0.838703     -0.175898      -4.25993       4.25993       162.571       166.831    
  37  0.287711      -1.24580      -30.1709       30.1709       152.198       182.369    
  38  0.937479     -0.645611E-01  -1.56355       1.56355       163.578       165.141    
  39  0.188655      -1.66783      -40.3919       40.3919       164.985       205.377    
  40  0.818317     -0.200505      -4.85587       4.85587       158.647       163.503    
  41  0.903487     -0.101493      -2.45798       2.45798       161.892       164.350    
  42  0.148828      -1.90496      -46.1348       46.1348       161.557       207.692    
  43  0.573616E-01  -2.85838      -69.2248       69.2248       154.957       224.181    
  44  0.792726E-01  -2.53486      -61.3898       61.3898       164.970       226.360    
  45  0.150401      -1.89445      -45.8802       45.8802       161.324       207.204    
  46  0.511444     -0.670518      -16.2387       16.2387       161.480       177.718    
  47  0.179810      -1.71585      -41.5549       41.5549       161.212       202.767    
  48  0.167282      -1.78808      -43.3040       43.3040       161.726       205.030    
  49  0.589016     -0.529302      -12.8187       12.8187       161.413       174.231    
  50  0.974997     -0.253206E-01 -0.613220      0.613220       161.736       162.350    
  51  0.750240     -0.287363      -6.95940       6.95940       158.817       165.776    
  52  0.695153     -0.363624      -8.80631       8.80631       160.258       169.064    
  53  0.166976      -1.78991      -43.3483       43.3483       160.915       204.263    
  54  0.228686      -1.47540      -35.7316       35.7316       161.872       197.604    
  55  0.728220     -0.317152      -7.68084       7.68084       161.444       169.125    
  56  0.321968      -1.13330      -27.4466       27.4466       162.825       190.271    
  57  0.494283     -0.704647      -17.0653       17.0653       164.566       181.631    
  58  0.398916     -0.919004      -22.2566       22.2566       160.242       182.499    
  59  0.130321      -2.03776      -49.3508       49.3508       160.049       209.400    
  60  0.131470E-01  -4.33156      -104.903       104.903       159.760       264.662    
  61  0.868361E-03  -7.04890      -170.712       170.712       159.627       330.339    
  62  0.572113     -0.558419      -13.5239       13.5239       156.791       170.315    
  63  0.201897      -1.60000      -38.7490       38.7490       158.335       197.084    
  64  0.795960     -0.228206      -5.52674       5.52674       162.643       168.170    
  65  0.904277E-01  -2.40321      -58.2013       58.2013       161.207       219.408    
  66  0.976775E-01  -2.32608      -56.3335       56.3335       161.455       217.788    
  67  0.231524      -1.46307      -35.4329       35.4329       155.759       191.192    
  68  0.542363     -0.611819      -14.8171       14.8171       167.774       182.591    
  69  0.332318      -1.10166      -26.6803       26.6803       162.816       189.496    
  70  0.840822     -0.173375      -4.19884       4.19884       170.733       174.932    
  71  0.528412E-01  -2.94046      -71.2127       71.2127       156.387       227.600    
  72  0.191882      -1.65087      -39.9812       39.9812       159.182       199.163    
  73  0.950825     -0.504248E-01  -1.22120       1.22120       158.419       159.640    
  74  0.619954     -0.478110      -11.5790       11.5790       158.974       170.553    
  75  0.675288     -0.392616      -9.50846       9.50846       153.690       163.199    
loop,thermsimp(1:2)       75   23.7684       31.7910    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216        206.70          0.86          1.15         25.39          0.28          0.06         27.74
Just calling func    0   0         27.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    206.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       75
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       76
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      215     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -72.6830       72.6830       157.199       229.882    
   2  0.604222     -0.503814      -12.2015       12.2015       158.419       170.620    
   3  0.106168      -2.24273      -54.3148       54.3148       160.210       214.525    
   4  0.342113      -1.07261      -25.9767       25.9767       154.726       180.703    
   5  0.473442     -0.747725      -18.1085       18.1085       161.736       179.845    
   6  0.100866E-01  -4.59655      -111.320       111.320       153.690       265.010    
   7  0.911848     -0.922817E-01  -2.23490       2.23490       158.647       160.882    
   8  0.633547     -0.456421      -11.0537       11.0537       163.261       174.315    
   9  0.729024     -0.316048      -7.65411       7.65411       161.892       169.546    
  10  0.620163     -0.477772      -11.5708       11.5708       161.455       173.025    
  11  0.867018     -0.142695      -3.45582       3.45582       163.578       167.034    
  12  0.969344E-01  -2.33372      -56.5185       56.5185       161.708       218.227    
  13  0.358466      -1.02592      -24.8460       24.8460       158.817       183.663    
  14  0.953168     -0.479638E-01  -1.16160       1.16160       165.090       166.251    
  15  0.684510     -0.379052      -9.17995       9.17995       162.983       172.163    
  16  0.482047     -0.729713      -17.6723       17.6723       160.765       178.437    
  17  0.974791     -0.255318E-01 -0.618335      0.618335       162.571       163.189    
  18  0.978669     -0.215619E-01 -0.522191      0.522191       159.959       160.481    
  19  0.929785     -0.728022E-01  -1.76314       1.76314       163.057       164.820    
  20  0.715020     -0.335444      -8.12385       8.12385       161.952       170.076    
  21  0.598247     -0.513752      -12.4421       12.4421       162.643       175.085    
  22  0.107080      -2.23418      -54.1078       54.1078       162.947       217.055    
  23  0.559093     -0.581439      -14.0814       14.0814       161.034       175.115    
  24  0.933094     -0.692491E-01  -1.67709       1.67709       160.258       161.935    
  25  0.470169E-01  -3.05725      -74.0410       74.0410       161.444       235.485    
  26  0.166768      -1.79115      -43.3785       43.3785       161.525       204.903    
  27  0.331277      -1.10480      -26.7563       26.7563       162.401       189.157    
  28  0.961755     -0.389952E-01 -0.944394      0.944394       161.937       162.881    
  29  0.464366E-01  -3.06967      -74.3418       74.3418       156.791       231.133    
  30  0.966136E-03  -6.94221      -168.128       168.128       158.507       326.634    
  31  0.941012     -0.607999E-01  -1.47246       1.47246       158.974       160.446    
  32  0.201947E-01  -3.90233      -94.5075       94.5075       161.237       255.745    
  33  0.679249     -0.386768      -9.36682       9.36682       161.413       170.779    
  34  0.318772      -1.14328      -27.6881       27.6881       170.733       198.421    
  35  0.388100     -0.946493      -22.9223       22.9223       161.050       183.972    
  36  0.658606     -0.417629      -10.1142       10.1142       160.107       170.222    
  37  0.774362     -0.255715      -6.19296       6.19296       161.480       167.673    
  38  0.704871     -0.349740      -8.47006       8.47006       155.616       164.086    
  39  0.274189      -1.29394      -31.3368       31.3368       164.566       195.903    
  40  0.881806     -0.125783      -3.04623       3.04623       152.198       155.244    
  41  0.198448      -1.61723      -39.1663       39.1663       160.242       199.408    
  42  0.342590      -1.07122      -25.9430       25.9430       167.774       193.717    
  43  0.603787     -0.504534      -12.2189       12.2189       160.814       173.033    
  44  0.667409     -0.404353      -9.79270       9.79270       161.597       171.390    
  45  0.317014      -1.14881      -27.8221       27.8221       156.586       184.409    
  46  0.368458     -0.998429      -24.1801       24.1801       155.551       179.731    
  47  0.139912      -1.96674      -47.6310       47.6310       158.348       205.979    
  48  0.537645     -0.620557      -15.0288       15.0288       162.816       177.845    
  49  0.159021      -1.83872      -44.5305       44.5305       162.825       207.355    
  50  0.729011     -0.316067      -7.65457       7.65457       155.759       163.414    
  51  0.802486     -0.220041      -5.32901       5.32901       162.606       167.935    
  52  0.249203      -1.38949      -33.6509       33.6509       159.061       192.712    
  53  0.282362      -1.26456      -30.6255       30.6255       165.069       195.694    
  54  0.803878     -0.218308      -5.28702       5.28702       160.681       165.968    
  55  0.183401      -1.69608      -41.0759       41.0759       158.097       199.173    
  56  0.144999      -1.93103      -46.7660       46.7660       158.335       205.101    
  57  0.821026     -0.197200      -4.77583       4.77583       161.872       166.648    
  58  0.391750     -0.937132      -22.6956       22.6956       159.182       181.878    
  59  0.605745     -0.501297      -12.1405       12.1405       161.212       173.352    
  60  0.759982E-01  -2.57705      -62.4114       62.4114       160.915       223.326    
  61  0.856619     -0.154762      -3.74805       3.74805       161.726       165.474    
  62  0.200085      -1.60901      -38.9674       38.9674       164.985       203.953    
  63  0.623969     -0.471654      -11.4226       11.4226       161.324       172.746    
  64  0.668527     -0.402679      -9.75216       9.75216       161.557       171.309    
  65  0.926898     -0.759121E-01  -1.83845       1.83845       156.242       158.080    
  66  0.972428     -0.279590E-01 -0.677116      0.677116       160.049       160.726    
  67  0.230218      -1.46873      -35.5699       35.5699       161.455       197.025    
  68  0.756442E-01  -2.58171      -62.5245       62.5245       161.207       223.731    
  69  0.209346      -1.56377      -37.8716       37.8716       161.330       199.201    
  70  0.198646      -1.61623      -39.1422       39.1422       154.957       194.099    
  71  0.196542E-01  -3.92947      -95.1645       95.1645       164.970       260.134    
  72  0.654679     -0.423610      -10.2591       10.2591       156.387       166.646    
  73  0.519808     -0.654295      -15.8458       15.8458       162.484       178.330    
  74  0.290149      -1.23736      -29.9666       29.9666       159.760       189.726    
  75  0.266623      -1.32192      -32.0145       32.0145       206.698       238.713    
loop,thermsimp(1:2)       76   72.6830       12.2015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217        164.03          0.86          1.15         25.33          0.13          0.06         27.54
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218        182.87          0.86          1.15         25.31          0.00          0.05         27.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       76
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       77
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      217     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -12.5024       12.5024       152.198       164.700    
   2  0.476930     -0.740385      -17.9308       17.9308       156.242       174.172    
   3  0.845382     -0.167966      -4.06783       4.06783       158.974       163.041    
   4  0.397814     -0.921770      -22.3236       22.3236       159.959       182.283    
   5  0.249923      -1.38660      -33.5810       33.5810       160.049       193.630    
   6  0.591552     -0.525005      -12.7147       12.7147       158.647       171.362    
   7  0.143111      -1.94414      -47.0835       47.0835       160.258       207.341    
   8  0.306099      -1.18385      -28.6706       28.6706       161.937       190.607    
   9  0.441827     -0.816836      -19.7823       19.7823       162.571       182.353    
  10  0.504521     -0.684146      -16.5688       16.5688       155.759       172.328    
  11  0.127660      -2.05839      -49.8504       49.8504       155.616       205.466    
  12  0.333524      -1.09804      -26.5926       26.5926       163.057       189.649    
  13  0.130890      -2.03340      -49.2452       49.2452       161.726       210.971    
  14  0.307732      -1.17853      -28.5417       28.5417       160.681       189.223    
  15  0.154434E-01  -4.17057      -101.004       101.004       165.090       266.093    
  16  0.357863      -1.02761      -24.8867       24.8867       156.387       181.274    
  17  0.271898      -1.30233      -31.5400       31.5400       161.872       193.412    
  18  0.906228E-01  -2.40105      -58.1491       58.1491       163.578       221.727    
  19  0.344142      -1.06670      -25.8336       25.8336       161.480       187.313    
  20  0.392886     -0.934237      -22.6255       22.6255       162.606       185.232    
  21  0.454318     -0.788958      -19.1071       19.1071       161.892       180.999    
  22  0.384129     -0.956778      -23.1714       23.1714       161.952       185.123    
  23  0.354037      -1.03835      -25.1470       25.1470       160.107       185.254    
  24  0.154212      -1.86943      -45.2742       45.2742       158.419       203.693    
  25  0.816320     -0.202949      -4.91506       4.91506       161.413       166.328    
  26  0.994970     -0.504291E-02 -0.122130      0.122130       161.557       161.679    
  27  0.374719E-01  -3.28416      -79.5365       79.5365       161.597       241.134    
  28  0.227113      -1.48231      -35.8988       35.8988       162.983       198.881    
  29  0.410587     -0.890167      -21.5582       21.5582       161.324       182.882    
  30  0.104540E-01  -4.56077      -110.454       110.454       161.455       271.908    
  31  0.994826     -0.518730E-02 -0.125627      0.125627       160.814       160.940    
  32  0.738930     -0.302553      -7.32728       7.32728       161.212       168.539    
  33  0.715904     -0.334209      -8.09393       8.09393       163.261       171.355    
  34  0.128324      -2.05320      -49.7247       49.7247       162.643       212.368    
  35  0.856095     -0.155374      -3.76286       3.76286       161.034       164.796    
  36  0.423967     -0.858099      -20.7816       20.7816       162.816       183.598    
  37  0.504650     -0.683890      -16.5626       16.5626       162.484       179.047    
  38  0.347036      -1.05833      -25.6308       25.6308       160.765       186.396    
  39  0.906779     -0.978566E-01  -2.36991       2.36991       155.551       157.921    
  40  0.616911     -0.483030      -11.6981       11.6981       161.736       173.434    
  41  0.540209     -0.615800      -14.9136       14.9136       154.726       169.640    
  42  0.772932     -0.257564      -6.23773       6.23773       159.182       165.420    
  43  0.544989     -0.606989      -14.7002       14.7002       158.817       173.517    
  44  0.951523     -0.496917E-01  -1.20344       1.20344       161.050       162.253    
  45  0.172505      -1.75733      -42.5594       42.5594       156.586       199.146    
  46  0.871391     -0.137665      -3.33399       3.33399       162.401       165.735    
  47  0.127604      -2.05882      -49.8609       49.8609       159.760       209.621    
  48  0.785934     -0.240882      -5.83374       5.83374       159.061       164.895    
  49  0.815977     -0.203369      -4.92523       4.92523       167.774       172.699    
  50  0.350587      -1.04815      -25.3842       25.3842       154.957       180.341    
  51  0.739645     -0.301584      -7.30383       7.30383       165.069       172.372    
  52  0.996274     -0.373345E-02 -0.904173E-01  0.904173E-01   164.566       164.657    
  53  0.303822      -1.19131      -28.8515       28.8515       161.455       190.306    
  54  0.708260     -0.344944      -8.35393       8.35393       170.733       179.087    
  55  0.646268     -0.436541      -10.5722       10.5722       158.097       168.669    
  56  0.696585     -0.361566      -8.75647       8.75647       161.330       170.086    
  57  0.439732     -0.821591      -19.8974       19.8974       160.242       180.139    
  58  0.791452     -0.233886      -5.66429       5.66429       164.985       170.650    
  59  0.202743      -1.59581      -38.6477       38.6477       161.525       200.172    
  60  0.547790E-01  -2.90445      -70.3405       70.3405       158.335       228.675    
  61  0.663631     -0.410029      -9.93015       9.93015       158.348       168.278    
  62  0.838292     -0.176388      -4.27181       4.27181       162.825       167.096    
  63  0.450238     -0.797979      -19.3256       19.3256       160.210       179.536    
  64  0.209610      -1.56251      -37.8411       37.8411       162.947       200.788    
  65  0.502241     -0.688676      -16.6785       16.6785       161.708       178.387    
  66  0.837306     -0.177566      -4.30033       4.30033       160.915       165.215    
  67  0.345973      -1.06139      -25.7050       25.7050       161.207       186.912    
  68  0.558861     -0.581855      -14.0915       14.0915       157.199       171.291    
  69  0.293365      -1.22634      -29.6997       29.6997       156.791       186.491    
  70  0.234701      -1.44944      -35.1029       35.1029       161.444       196.547    
  71  0.762859E-01  -2.57327      -62.3199       62.3199       206.698       269.018    
  72  0.994504     -0.551100E-02 -0.133466      0.133466       161.237       161.371    
  73  0.674972     -0.393084      -9.51979       9.51979       164.970       174.490    
  74  0.843847     -0.169784      -4.11186       4.11186       153.690       157.802    
  75  0.547053     -0.603209      -14.6086       14.6086       164.031       178.640    
loop,thermsimp(1:2)       77   12.5024       17.9308    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219        159.46          0.85          1.15         25.29          0.11          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    159.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       77
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       78
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      218     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -1.45003       1.45003       153.690       155.140    
   2  0.368209     -0.999105      -24.1965       24.1965       155.551       179.747    
   3  0.508630     -0.676034      -16.3723       16.3723       160.814       177.187    
   4  0.744324     -0.295279      -7.15113       7.15113       161.237       168.388    
   5  0.401586     -0.912333      -22.0950       22.0950       161.557       183.652    
   6  0.712794     -0.338563      -8.19939       8.19939       161.050       169.249    
   7  0.186976      -1.67678      -40.6085       40.6085       158.974       199.582    
   8  0.688451     -0.373311      -9.04093       9.04093       164.566       173.607    
   9  0.668652     -0.402492      -9.74762       9.74762       152.198       161.946    
  10  0.656767     -0.420426      -10.1820       10.1820       161.034       171.216    
  11  0.853336     -0.158602      -3.84106       3.84106       159.061       162.902    
  12  0.556440     -0.586195      -14.1966       14.1966       160.915       175.112    
  13  0.258558E-01  -3.65522      -88.5228       88.5228       159.182       247.705    
  14  0.121003E-01  -4.41452      -106.912       106.912       162.401       269.312    
  15  0.150890      -1.89120      -45.8015       45.8015       161.413       207.214    
  16  0.820074     -0.198360      -4.80393       4.80393       162.825       167.629    
  17  0.151452      -1.88748      -45.7114       45.7114       158.348       204.059    
  18  0.305465      -1.18592      -28.7209       28.7209       161.212       189.933    
  19  0.533202     -0.628854      -15.2297       15.2297       158.097       173.326    
  20  0.143416      -1.94201      -47.0319       47.0319       154.726       201.758    
  21  0.687081     -0.375303      -9.08915       9.08915       161.330       170.419    
  22  0.546247     -0.604685      -14.6444       14.6444       164.985       179.630    
  23  0.356987      -1.03006      -24.9461       24.9461       157.199       182.145    
  24  0.545718     -0.605653      -14.6678       14.6678       163.261       177.929    
  25  0.789688     -0.236117      -5.71832       5.71832       158.647       164.365    
  26  0.752086     -0.284904      -6.89987       6.89987       155.759       162.659    
  27  0.388816     -0.944650      -22.8777       22.8777       165.069       187.946    
  28  0.988428     -0.116395E-01 -0.281889      0.281889       167.774       168.056    
  29  0.124991      -2.07952      -50.3621       50.3621       161.736       212.098    
  30  0.568214     -0.565257      -13.6895       13.6895       158.817       172.506    
  31  0.551032     -0.595962      -14.4331       14.4331       156.242       170.675    
  32  0.423622     -0.858913      -20.8013       20.8013       164.970       185.771    
  33  0.647554     -0.434553      -10.5241       10.5241       161.708       172.232    
  34  0.686255     -0.376506      -9.11830       9.11830       164.031       173.149    
  35  0.548072     -0.601349      -14.5636       14.5636       162.484       177.048    
  36  0.880777     -0.126951      -3.07452       3.07452       170.733       173.808    
  37  0.894918     -0.111023      -2.68877       2.68877       160.210       162.899    
  38  0.241077      -1.42264      -34.4537       34.4537       160.242       194.696    
  39  0.546141     -0.604877      -14.6490       14.6490       154.957       169.606    
  40  0.266590      -1.32204      -32.0175       32.0175       161.892       193.909    
  41  0.575085     -0.553238      -13.3984       13.3984       156.387       169.786    
  42  0.907139     -0.974596E-01  -2.36030       2.36030       159.959       162.319    
  43  0.469109     -0.756920      -18.3312       18.3312       162.571       180.902    
  44  0.738008     -0.303801      -7.35751       7.35751       161.324       168.681    
  45  0.557598     -0.584116      -14.1462       14.1462       162.816       176.962    
  46  0.305677      -1.18523      -28.7040       28.7040       161.952       190.656    
  47  0.392927     -0.934131      -22.6230       22.6230       162.606       185.229    
  48  0.121997      -2.10376      -50.9491       50.9491       160.107       211.057    
  49  0.712082     -0.339563      -8.22359       8.22359       160.765       168.989    
  50  0.342132      -1.07256      -25.9754       25.9754       156.791       182.767    
  51  0.288307      -1.24373      -30.1209       30.1209       161.207       191.328    
  52  0.554777     -0.589188      -14.2691       14.2691       161.480       175.749    
  53  0.116597E-01  -4.45161      -107.810       107.810       160.681       268.491    
  54  0.844148     -0.169427      -4.10321       4.10321       163.057       167.160    
  55  0.910896     -0.933267E-01  -2.26020       2.26020       161.455       163.715    
  56  0.257100      -1.35829      -32.8954       32.8954       161.937       194.832    
  57  0.340199      -1.07823      -26.1127       26.1127       161.872       187.985    
  58  0.656010     -0.421580      -10.2099       10.2099       160.049       170.259    
  59  0.894739     -0.111224      -2.69364       2.69364       161.444       164.138    
  60  0.226933      -1.48310      -35.9180       35.9180       162.983       198.901    
  61  0.478182     -0.737763      -17.8673       17.8673       156.586       174.454    
  62  0.361863      -1.01649      -24.6176       24.6176       161.525       186.142    
  63  0.415757     -0.877654      -21.2552       21.2552       162.947       184.202    
  64  0.540919     -0.614487      -14.8818       14.8818       158.419       173.300    
  65  0.489341     -0.714697      -17.3087       17.3087       155.616       172.925    
  66  0.963632     -0.370456E-01 -0.897178      0.897178       160.258       161.155    
  67  0.312700      -1.16251      -28.1539       28.1539       159.760       187.914    
  68  0.145861      -1.92510      -46.6224       46.6224       161.726       208.348    
  69  0.960223     -0.405895E-01 -0.983004      0.983004       162.643       163.626    
  70  0.490262     -0.712815      -17.2631       17.2631       163.578       180.841    
  71  0.565539     -0.569975      -13.8038       13.8038       158.335       172.138    
  72  0.818412     -0.200389      -4.85305       4.85305       161.597       166.450    
  73  0.213411      -1.54453      -37.4058       37.4058       165.090       202.496    
  74  0.907759     -0.967768E-01  -2.34376       2.34376       206.698       209.042    
  75  0.761807E-01  -2.57465      -62.3533       62.3533       159.455       221.809    
loop,thermsimp(1:2)       78   1.45003       24.1965    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220        160.21          0.85          1.14         25.31          0.09          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221        173.60          0.87          1.15         25.30          0.13          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    173.60        1.084     -1.528      2.999     -102.6     0.9464    
                      0.3813      1.305     -99.70      3.494     0.4153    
                       1.559     -1.418      1.530      5110.      3663.    
                     -0.6434      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5055.     -43.92    
                     -0.5672     -6.048     -5.140     -8.414      5.958    
                      -14.87     -3.281      3774.      0.000      3264.    

                       3264.      3171.      4232.      3264.      2894.    
                       3731.     0.2876E-01 0.3712E-01  0.000     0.1738E-01
                     -0.1713    -0.1131     0.1026    -0.1453E-01-0.3607E-01

                     -0.2774    -0.8752      0.000    -0.6319E-01-0.1420E-01
                       0.000    -0.5227E-01-0.7526E-01 0.7364    -0.3687E-02
                     -0.5782E-01-0.8562E-01-0.4657     -1.124      5110.    

                     -0.7214    -0.9674     -2.489     -2.489    -0.3931    
                      0.6133      9.105      8.788    -0.1997E+05 -4.000    
                     -0.5611    -0.9276      9.254      8.783    -0.1785E+05

                      -4.000     0.1328E-01-0.4740      8.926      8.953    
                     -0.2170E+05 -7.000    -0.7150    -0.8198      9.149    
                       8.750    -0.2022E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       78
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       79
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      220     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -64.0990       64.0990       153.690       217.789    
   2  0.952063     -0.491245E-01  -1.18971       1.18971       160.258       161.447    
   3  0.207928      -1.57057      -38.0362       38.0362       152.198       190.234    
   4  0.564009     -0.572686      -13.8694       13.8694       159.959       173.829    
   5  0.461636     -0.772979      -18.7201       18.7201       155.759       174.480    
   6  0.683812     -0.380072      -9.20464       9.20464       160.210       169.415    
   7  0.153569      -1.87360      -45.3753       45.3753       159.061       204.436    
   8  0.605650     -0.501453      -12.1443       12.1443       162.643       174.787    
   9  0.257296      -1.35753      -32.8769       32.8769       161.455       194.331    
  10  0.517987     -0.657805      -15.9308       15.9308       161.444       177.375    
  11  0.571129     -0.560140      -13.5656       13.5656       158.647       172.213    
  12  0.735134     -0.307703      -7.45201       7.45201       161.597       169.049    
  13  0.766340E-02  -4.87130      -117.974       117.974       163.057       281.031    
  14  0.435932     -0.830269      -20.1076       20.1076       162.825       182.932    
  15  0.513945     -0.665639      -16.1206       16.1206       167.774       183.895    
  16  0.447046     -0.805095      -19.4979       19.4979       161.237       180.735    
  17  0.244813      -1.40726      -34.0813       34.0813       161.324       195.405    
  18  0.183933      -1.69318      -41.0058       41.0058       160.765       201.771    
  19  0.413164     -0.883910      -21.4067       21.4067       161.050       182.456    
  20  0.869613     -0.139707      -3.38346       3.38346       154.957       158.340    
  21  0.853260     -0.158691      -3.84320       3.84320       156.387       160.230    
  22  0.138067      -1.98001      -47.9523       47.9523       160.049       208.001    
  23  0.940528     -0.613134E-01  -1.48490       1.48490       161.330       162.815    
  24  0.694939     -0.363931      -8.81375       8.81375       156.242       165.055    
  25  0.962776     -0.379346E-01 -0.918708      0.918708       161.034       161.952    
  26  0.378266     -0.972158      -23.5439       23.5439       158.335       181.878    
  27  0.855922     -0.155576      -3.76777       3.76777       161.708       165.476    
  28  0.393452     -0.932797      -22.5906       22.5906       158.817       181.407    
  29  0.253590      -1.37204      -33.2283       33.2283       155.616       188.844    
  30  0.777948     -0.251096      -6.08109       6.08109       164.031       170.112    
  31  0.654890     -0.423288      -10.2513       10.2513       158.419       168.670    
  32  0.690016E-01  -2.67363      -64.7504       64.7504       158.097       222.847    
  33  0.101034      -2.29229      -55.5152       55.5152       164.566       220.081    
  34  0.684533     -0.379019      -9.17915       9.17915       170.733       179.912    
  35  0.592603     -0.523230      -12.6717       12.6717       156.586       169.258    
  36  0.904830     -0.100009      -2.42203       2.42203       160.915       163.337    
  37  0.400244     -0.915681      -22.1761       22.1761       161.480       183.656    
  38  0.698191     -0.359263      -8.70070       8.70070       162.816       171.517    
  39  0.551449E-01  -2.89779      -70.1793       70.1793       162.484       232.663    
  40  0.500493     -0.692161      -16.7629       16.7629       160.814       177.577    
  41  0.289592      -1.23928      -30.0132       30.0132       163.261       193.274    
  42  0.447163     -0.804833      -19.4916       19.4916       164.985       184.477    
  43  0.690940     -0.369702      -8.95350       8.95350       155.551       164.504    
  44  0.631068     -0.460341      -11.1486       11.1486       163.578       174.727    
  45  0.926041     -0.768363E-01  -1.86084       1.86084       162.571       164.432    
  46  0.436187     -0.829684      -20.0934       20.0934       157.199       177.293    
  47  0.314139      -1.15792      -28.0427       28.0427       156.791       184.834    
  48  0.363110      -1.01305      -24.5342       24.5342       161.557       186.091    
  49  0.446982     -0.805238      -19.5014       19.5014       162.947       182.448    
  50  0.541529     -0.613360      -14.8545       14.8545       162.606       177.461    
  51  0.415529     -0.878202      -21.2685       21.2685       164.970       186.238    
  52  0.559792     -0.580190      -14.0512       14.0512       161.525       175.576    
  53  0.931332     -0.711389E-01  -1.72286       1.72286       159.760       161.483    
  54  0.653342     -0.425655      -10.3086       10.3086       165.069       175.377    
  55  0.254324E-01  -3.67173      -88.9227       88.9227       161.872       250.795    
  56  0.365877      -1.00546      -24.3504       24.3504       161.212       185.562    
  57  0.187661      -1.67312      -40.5199       40.5199       161.952       202.472    
  58  0.592744     -0.522993      -12.6659       12.6659       161.207       173.873    
  59  0.211036      -1.55573      -37.6769       37.6769       161.892       199.569    
  60  0.718956     -0.329955      -7.99091       7.99091       160.242       168.233    
  61  0.170082      -1.77147      -42.9019       42.9019       161.937       204.839    
  62  0.190051      -1.66046      -40.2134       40.2134       162.983       203.196    
  63  0.275889      -1.28776      -31.1871       31.1871       158.974       190.161    
  64  0.670664     -0.399487      -9.67486       9.67486       154.726       164.401    
  65  0.294211      -1.22346      -29.6299       29.6299       165.090       194.720    
  66  0.710312     -0.342050      -8.28384       8.28384       158.348       166.632    
  67  0.432365     -0.838485      -20.3066       20.3066       161.413       181.719    
  68  0.488453     -0.716511      -17.3526       17.3526       161.726       179.078    
  69  0.250523      -1.38421      -33.5229       33.5229       206.698       240.221    
  70  0.842097     -0.171860      -4.16213       4.16213       160.107       164.270    
  71  0.403041     -0.908716      -22.0075       22.0075       161.736       183.744    
  72  0.576391     -0.550969      -13.3435       13.3435       159.455       172.799    
  73  0.577169     -0.549620      -13.3108       13.3108       159.182       172.493    
  74  0.275825      -1.28799      -31.1927       31.1927       160.681       191.874    
  75  0.999213     -0.787341E-03 -0.190680E-01  0.190680E-01   160.207       160.226    
loop,thermsimp(1:2)       79   64.0990       1.18971    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222        159.38          0.86          1.16         25.30          0.04          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223        160.26          0.86          1.15         25.31          0.05          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    159.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       79
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       80
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      223
neval,tstepnext:      222     223

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -9.75585       9.75585       154.957       164.712    
   2  0.238500      -1.43339      -34.7140       34.7140       160.207       194.921    
   3  0.689211     -0.372208      -9.01421       9.01421       156.387       165.401    
   4  0.540774     -0.614753      -14.8882       14.8882       160.258       175.146    
   5  0.178857      -1.72117      -41.6836       41.6836       159.760       201.443    
   6  0.884253     -0.123012      -2.97913       2.97913       161.034       164.013    
   7  0.755546     -0.280314      -6.78871       6.78871       161.330       168.118    
   8  0.654086E-01  -2.72710      -66.0454       66.0454       160.915       226.960    
   9  0.802958     -0.219452      -5.31474       5.31474       160.107       165.422    
  10  0.840665     -0.173562      -4.20335       4.20335       154.726       158.930    
  11  0.864930     -0.145107      -3.51422       3.51422       162.571       166.085    
  12  0.728243     -0.317120      -7.68008       7.68008       155.551       163.231    
  13  0.453086     -0.791672      -19.1729       19.1729       156.242       175.414    
  14  0.702549E-01  -2.65563      -64.3144       64.3144       161.708       226.023    
  15  0.610595     -0.493321      -11.9473       11.9473       158.348       170.295    
  16  0.728410E-02  -4.92206      -119.203       119.203       160.242       279.445    
  17  0.913763     -0.901841E-01  -2.18410       2.18410       158.419       160.603    
  18  0.165001      -1.80180      -43.6364       43.6364       161.597       205.234    
  19  0.917747E-01  -2.38842      -57.8432       57.8432       156.586       214.430    
  20  0.338507      -1.08321      -26.2334       26.2334       160.210       186.444    
  21  0.357666      -1.02815      -24.9000       24.9000       164.031       188.931    
  22  0.389441     -0.943044      -22.8388       22.8388       162.816       185.655    
  23  0.879897     -0.127950      -3.09872       3.09872       158.647       161.746    
  24  0.418897     -0.870129      -21.0729       21.0729       159.182       180.255    
  25  0.838426     -0.176230      -4.26796       4.26796       159.455       163.723    
  26  0.185169      -1.68649      -40.8436       40.8436       159.959       200.803    
  27  0.200952      -1.60469      -38.8626       38.8626       161.207       200.070    
  28  0.877256     -0.130957      -3.17153       3.17153       155.759       158.931    
  29  0.386592     -0.950385      -23.0166       23.0166       163.578       186.595    
  30  0.888706     -0.117988      -2.85746       2.85746       162.643       165.501    
  31  0.105408      -2.24991      -54.4889       54.4889       165.069       219.557    
  32  0.994268     -0.574873E-02 -0.139224      0.139224       161.525       161.664    
  33  0.764077     -0.269087      -6.51679       6.51679       157.199       163.716    
  34  0.812108     -0.208121      -5.04033       5.04033       161.444       166.485    
  35  0.121669      -2.10645      -51.0145       51.0145       162.606       213.621    
  36  0.637909     -0.449559      -10.8875       10.8875       160.814       171.702    
  37  0.316007E-02  -5.75716      -139.428       139.428       161.726       301.154    
  38  0.229677      -1.47108      -35.6269       35.6269       170.733       206.360    
  39  0.521374     -0.651288      -15.7730       15.7730       161.237       177.010    
  40  0.391402     -0.938019      -22.7171       22.7171       158.817       181.534    
  41  0.327357      -1.11670      -27.0445       27.0445       161.413       188.457    
  42  0.963139     -0.375576E-01 -0.909578      0.909578       158.335       159.244    
  43  0.174261      -1.74720      -42.3140       42.3140       162.947       205.261    
  44  0.331602      -1.10382      -26.7325       26.7325       161.050       187.782    
  45  0.526338     -0.641812      -15.5435       15.5435       162.825       178.368    
  46  0.413265     -0.883667      -21.4008       21.4008       161.480       182.880    
  47  0.541510E-02  -5.21856      -126.384       126.384       161.736       288.120    
  48  0.781613     -0.246396      -5.96725       5.96725       167.774       173.741    
  49  0.656825     -0.420337      -10.1798       10.1798       164.985       175.165    
  50  0.584791     -0.536501      -12.9931       12.9931       156.791       169.785    
  51  0.811204     -0.209236      -5.06731       5.06731       161.212       166.279    
  52  0.421027     -0.865059      -20.9502       20.9502       161.557       182.507    
  53  0.663739     -0.409866      -9.92622       9.92622       164.970       174.896    
  54  0.164765      -1.80323      -43.6711       43.6711       155.616       199.287    
  55  0.883187E-01  -2.42680      -58.7728       58.7728       158.974       217.746    
  56  0.825424     -0.191858      -4.64645       4.64645       152.198       156.845    
  57  0.201966E-01  -3.90224      -94.5052       94.5052       160.681       255.186    
  58  0.174898      -1.74355      -42.2256       42.2256       163.261       205.487    
  59  0.477008     -0.740222      -17.9268       17.9268       161.455       179.381    
  60  0.162167E-01  -4.12171      -99.8205       99.8205       165.090       264.910    
  61  0.378219     -0.972282      -23.5469       23.5469       161.324       184.871    
  62  0.980713     -0.194752E-01 -0.471655      0.471655       161.892       162.364    
  63  0.232487      -1.45892      -35.3324       35.3324       160.765       196.097    
  64  0.962055     -0.386832E-01 -0.936837      0.936837       161.952       162.889    
  65  0.761875     -0.271973      -6.58669       6.58669       162.983       169.569    
  66  0.673649     -0.395046      -9.56729       9.56729       159.061       168.628    
  67  0.979237     -0.209814E-01 -0.508132      0.508132       161.937       162.445    
  68  0.361942      -1.01627      -24.6123       24.6123       160.049       184.661    
  69  0.191552      -1.65259      -40.0228       40.0228       153.690       193.713    
  70  0.708040     -0.345254      -8.36143       8.36143       164.566       172.928    
  71  0.676759     -0.390440      -9.45576       9.45576       158.097       167.553    
  72  0.647357     -0.434857      -10.5314       10.5314       162.484       173.016    
  73  0.516122     -0.661412      -16.0182       16.0182       206.698       222.716    
  74  0.274129      -1.29416      -31.3421       31.3421       161.872       193.214    
  75  0.213094      -1.54602      -37.4418       37.4418       159.375       196.817    
loop,thermsimp(1:2)       80   9.75585       34.7140    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224        159.82          0.86          1.14         25.34          0.36          0.06         27.77
Just calling func    0   0         27.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    225        158.78          0.86          1.14         25.31          0.21          0.05         27.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.2182               223
loop is:       80
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    24.2182               223
loop is:       81
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    12.1091               297

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      224     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -15.8538       15.8538       152.198       168.052    
   2  0.879265     -0.128669      -1.55806       1.55806       154.726       156.284    
   3  0.684902     -0.378479      -4.58304       4.58304       155.759       160.342    
   4  0.893896     -0.112166      -1.35822       1.35822       158.335       159.693    
   5  0.476761     -0.740739      -8.96968       8.96968       158.419       167.388    
   6  0.755167     -0.280817      -3.40044       3.40044       161.525       164.925    
   7  0.452407     -0.793173      -9.60460       9.60460       158.647       168.252    
   8  0.723906     -0.323093      -3.91237       3.91237       161.892       165.804    
   9  0.451260     -0.795711      -9.63534       9.63534       161.937       171.572    
  10  0.668265     -0.403071      -4.88083       4.88083       161.952       166.833    
  11  0.777249     -0.251995      -3.05143       3.05143       155.551       158.602    
  12  0.342240      -1.07224      -12.9839       12.9839       157.199       170.183    
  13  0.639156     -0.447606      -5.42011       5.42011       159.455       164.876    
  14  0.166924      -1.79022      -21.6779       21.6779       161.034       182.711    
  15  0.375260     -0.980137      -11.8686       11.8686       154.957       166.825    
  16  0.299730      -1.20487      -14.5899       14.5899       156.387       170.977    
  17  0.407119     -0.898650      -10.8818       10.8818       160.107       170.989    
  18  0.762992E-01  -2.57309      -31.1578       31.1578       162.643       193.801    
  19  0.281066      -1.26917      -15.3684       15.3684       162.571       177.939    
  20  0.220512      -1.51180      -18.3065       18.3065       161.212       179.518    
  21  0.389846     -0.942004      -11.4068       11.4068       161.444       172.851    
  22  0.660048     -0.415443      -5.03064       5.03064       158.097       163.127    
  23  0.150026      -1.89695      -22.9703       22.9703       161.330       184.300    
  24  0.113767      -2.17360      -26.3203       26.3203       159.061       185.381    
  25  0.810589     -0.209994      -2.54284       2.54284       162.983       165.525    
  26  0.247911      -1.39468      -16.8884       16.8884       156.791       173.680    
  27  0.408875     -0.894345      -10.8297       10.8297       158.348       169.178    
  28  0.310528      -1.16948      -14.1614       14.1614       160.814       174.976    
  29  0.663027     -0.410939      -4.97610       4.97610       164.566       169.542    
  30  0.798362     -0.225193      -2.72688       2.72688       162.484       165.211    
  31  0.564885     -0.571133      -6.91591       6.91591       167.774       174.690    
  32  0.473510E-02  -5.35275      -64.8170       64.8170       164.970       229.787    
  33  0.933475E-01  -2.37143      -28.7158       28.7158       160.258       188.974    
  34  0.931702     -0.707423E-01 -0.856625      0.856625       164.985       165.842    
  35  0.341741      -1.07370      -13.0016       13.0016       156.242       169.243    
  36  0.171330      -1.76417      -21.3624       21.3624       161.237       182.600    
  37  0.355860      -1.03322      -12.5113       12.5113       162.825       175.336    
  38  0.469639     -0.755790      -9.15194       9.15194       161.455       170.607    
  39  0.805376     -0.216446      -2.62096       2.62096       159.182       161.803    
  40  0.651615     -0.428301      -5.18634       5.18634       158.817       164.003    
  41  0.126831      -2.06490      -25.0040       25.0040       161.557       186.561    
  42  0.715737     -0.334442      -4.04979       4.04979       161.480       165.529    
  43  0.444007     -0.811915      -9.83155       9.83155       160.049       169.881    
  44  0.887105     -0.119791      -1.45057       1.45057       161.324       162.774    
  45  0.492139     -0.708993      -8.58526       8.58526       162.816       171.401    
  46  0.590315     -0.527098      -6.38268       6.38268       160.210       166.593    
  47  0.313130      -1.16114      -14.0603       14.0603       163.578       177.638    
  48  0.824070     -0.193500      -2.34311       2.34311       161.050       163.393    
  49  0.785026     -0.242039      -2.93087       2.93087       161.413       164.343    
  50  0.105781      -2.24638      -27.2016       27.2016       164.031       191.233    
  51  0.644933     -0.438608      -5.31115       5.31115       161.872       167.183    
  52  0.656932     -0.420175      -5.08794       5.08794       153.690       158.778    
  53  0.418239     -0.871703      -10.5555       10.5555       160.207       170.762    
  54  0.191132      -1.65479      -20.0380       20.0380       160.765       180.803    
  55  0.493587     -0.706055      -8.54969       8.54969       159.375       167.925    
  56  0.490289     -0.712761      -8.63088       8.63088       155.616       164.247    
  57  0.703124     -0.352222      -4.26509       4.26509       161.207       165.472    
  58  0.514219E-01  -2.96769      -35.9360       35.9360       159.959       195.895    
  59  0.967122     -0.334307E-01 -0.404816      0.404816       159.760       160.164    
  60  0.164565      -1.80445      -21.8502       21.8502       161.597       183.448    
  61  0.787129     -0.239363      -2.89847       2.89847       162.947       165.846    
  62  0.877224     -0.130993      -1.58621       1.58621       163.261       164.847    
  63  0.826666     -0.190355      -2.30502       2.30502       170.733       173.038    
  64  0.478850     -0.736368      -8.91675       8.91675       162.606       171.523    
  65  0.850214E-01  -2.46485      -29.8471       29.8471       156.586       186.434    
  66  0.752587     -0.284239      -3.44188       3.44188       158.974       162.416    
  67  0.286540      -1.24988      -15.1349       15.1349       165.069       180.203    
  68  0.581717     -0.541771      -6.56035       6.56035       206.698       213.258    
  69  0.907599     -0.969526E-01  -1.17401       1.17401       161.708       162.882    
  70  0.159227      -1.83743      -22.2496       22.2496       160.915       183.164    
  71  0.740279     -0.300729      -3.64155       3.64155       160.681       164.322    
  72  0.899153     -0.106302      -1.28722       1.28722       165.090       166.377    
  73  0.456914     -0.783261      -9.48458       9.48458       160.242       169.726    
  74  0.448831     -0.801110      -9.70071       9.70071       161.736       171.437    
  75  0.433021     -0.836969      -10.1349       10.1349       158.785       168.920    
loop,thermsimp(1:2)       81   15.8538       1.55806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226        158.92          0.86          1.14         25.29          0.04          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    227        160.07          0.86          1.14         25.27          0.16          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       81
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       82
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      226     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -52.5861       52.5861       154.726       207.313    
   2  0.906957E-01  -2.40025      -29.0648       29.0648       155.551       184.616    
   3  0.973677     -0.266758E-01 -0.323020      0.323020       153.690       154.013    
   4  0.764409     -0.268653      -3.25314       3.25314       158.335       161.588    
   5  0.647718     -0.434300      -5.25898       5.25898       159.760       165.019    
   6  0.450945     -0.796410      -9.64380       9.64380       155.759       165.403    
   7  0.342138      -1.07254      -12.9875       12.9875       159.182       172.169    
   8  0.491560     -0.710170      -8.59952       8.59952       158.974       167.573    
   9  0.728901     -0.316218      -3.82911       3.82911       161.324       165.153    
  10  0.361124      -1.01853      -12.3335       12.3335       161.708       174.042    
  11  0.187026      -1.67651      -20.3010       20.3010       158.097       178.398    
  12  0.560514     -0.578901      -7.00997       7.00997       161.050       168.060    
  13  0.218776      -1.51971      -18.4023       18.4023       158.817       177.219    
  14  0.109271      -2.21392      -26.8086       26.8086       155.616       182.424    
  15  0.263420E-01  -3.63659      -44.0358       44.0358       160.681       204.717    
  16  0.654642     -0.423667      -5.13022       5.13022       161.413       166.543    
  17  0.975959     -0.243343E-01 -0.294666      0.294666       163.261       163.556    
  18  0.107212      -2.23295      -27.0390       27.0390       159.455       186.494    
  19  0.972340     -0.280494E-01 -0.339653      0.339653       161.525       161.864    
  20  0.259158      -1.35032      -16.3511       16.3511       162.484       178.835    
  21  0.889970     -0.116568      -1.41153       1.41153       161.207       162.619    
  22  0.956672     -0.442943E-01 -0.536364      0.536364       162.983       163.519    
  23  0.299261      -1.20644      -14.6089       14.6089       161.480       176.088    
  24  0.114836      -2.16425      -26.2071       26.2071       161.892       188.099    
  25  0.728848     -0.316291      -3.82999       3.82999       164.985       168.815    
  26  0.650336     -0.430267      -5.21014       5.21014       162.947       168.157    
  27  0.816983     -0.202137      -2.44770       2.44770       165.090       167.537    
  28  0.507860     -0.677550      -8.20451       8.20451       160.210       168.415    
  29  0.920661     -0.826634E-01  -1.00098       1.00098       154.957       155.958    
  30  0.253772      -1.37132      -16.6055       16.6055       161.952       178.557    
  31  0.667512     -0.404198      -4.89447       4.89447       161.872       166.766    
  32  0.772715     -0.257844      -3.12226       3.12226       158.419       161.541    
  33  0.757620     -0.277573      -3.36116       3.36116       159.375       162.737    
  34  0.776421     -0.253060      -3.06433       3.06433       152.198       155.262    
  35  0.886642     -0.120314      -1.45690       1.45690       158.647       160.104    
  36  0.238693E-01  -3.73516      -45.2294       45.2294       158.785       204.014    
  37  0.303957      -1.19087      -14.4204       14.4204       158.348       172.768    
  38  0.875267     -0.133226      -1.61325       1.61325       156.242       157.855    
  39  0.144246      -1.93624      -23.4461       23.4461       164.566       188.012    
  40  0.993963     -0.605564E-02 -0.733283E-01  0.733283E-01   160.242       160.315    
  41  0.172168      -1.75928      -21.3033       21.3033       160.049       181.352    
  42  0.979713     -0.204952E-01 -0.248179      0.248179       157.199       157.447    
  43  0.938694     -0.632658E-01 -0.766092      0.766092       161.455       162.221    
  44  0.716061     -0.333990      -4.04432       4.04432       160.207       164.251    
  45  0.764601     -0.268402      -3.25010       3.25010       156.387       159.637    
  46  0.546951     -0.603396      -7.30658       7.30658       160.107       167.414    
  47  0.104442      -2.25912      -27.3559       27.3559       162.816       190.172    
  48  0.669980     -0.400508      -4.84978       4.84978       161.736       166.586    
  49  0.255048      -1.36630      -16.5447       16.5447       162.606       179.151    
  50  0.761153     -0.272921      -3.30482       3.30482       161.937       165.241    
  51  0.273269      -1.29730      -15.7091       15.7091       161.444       177.153    
  52  0.789047E-01  -2.53951      -30.7512       30.7512       170.733       201.484    
  53  0.723703     -0.323374      -3.91577       3.91577       156.791       160.707    
  54  0.535422     -0.624699      -7.56454       7.56454       167.774       175.338    
  55  0.394266     -0.930730      -11.2703       11.2703       160.814       172.084    
  56  0.334209      -1.09599      -13.2714       13.2714       162.825       176.096    
  57  0.713084     -0.338156      -4.09476       4.09476       163.578       167.673    
  58  0.335811      -1.09121      -13.2135       13.2135       162.571       175.784    
  59  0.877329     -0.130873      -1.58476       1.58476       161.212       162.797    
  60  0.804760     -0.217212      -2.63024       2.63024       165.069       167.699    
  61  0.676806     -0.390371      -4.72704       4.72704       160.765       165.492    
  62  0.139025      -1.97310      -23.8925       23.8925       161.237       185.130    
  63  0.453238     -0.791339      -9.58239       9.58239       161.034       170.616    
  64  0.174629      -1.74509      -21.1315       21.1315       160.915       182.046    
  65  0.770625     -0.260553      -3.15506       3.15506       161.597       164.752    
  66  0.636484     -0.451797      -5.47085       5.47085       161.330       166.801    
  67  0.336462      -1.08927      -13.1901       13.1901       159.061       172.251    
  68  0.534955     -0.625573      -7.57512       7.57512       156.586       164.162    
  69  0.847446E-01  -2.46811      -29.8866       29.8866       161.557       191.444    
  70  0.917274     -0.863490E-01  -1.04561       1.04561       160.258       161.303    
  71  0.518675     -0.656478      -7.94935       7.94935       164.031       171.980    
  72  0.975471E-01  -2.32742      -28.1829       28.1829       162.643       190.826    
  73  0.863693     -0.146538      -1.77445       1.77445       159.959       161.734    
  74  0.475431     -0.743534      -9.00353       9.00353       206.698       215.702    
  75  0.189915      -1.66118      -20.1154       20.1154       158.917       179.032    
loop,thermsimp(1:2)       82   52.5861       29.0648    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228        159.34          0.85          1.13         25.04          0.40          0.05         27.47
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    229        161.34          0.85          1.13         25.18          0.38          0.06         27.60
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    159.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       82
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       83
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      228     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -6.00268       6.00268       153.690       159.693    
   2  0.266275      -1.32323      -16.0231       16.0231       152.198       168.221    
   3  0.545538     -0.605984      -7.33791       7.33791       154.957       162.294    
   4  0.196234      -1.62845      -19.7190       19.7190       157.199       176.918    
   5  0.786411     -0.240275      -2.90952       2.90952       156.242       159.151    
   6  0.453912     -0.789853      -9.56440       9.56440       156.387       165.952    
   7  0.900549     -0.104751      -1.26844       1.26844       158.647       159.916    
   8  0.339919      -1.07905      -13.0663       13.0663       160.242       173.308    
   9  0.511643     -0.670128      -8.11464       8.11464       156.791       164.906    
  10  0.628202     -0.464894      -5.62944       5.62944       160.258       165.887    
  11  0.672886E-01  -2.69876      -32.6796       32.6796       158.419       191.098    
  12  0.518493     -0.656829      -7.95361       7.95361       158.335       166.288    
  13  0.994926     -0.508642E-02 -0.615919E-01  0.615919E-01   159.959       160.021    
  14  0.733191     -0.310349      -3.75804       3.75804       161.525       165.283    
  15  0.952818     -0.483318E-01 -0.585255      0.585255       161.455       162.040    
  16  0.735955     -0.306586      -3.71248       3.71248       161.207       164.919    
  17  0.743149     -0.296859      -3.59469       3.59469       159.375       162.970    
  18  0.549375     -0.598975      -7.25304       7.25304       161.212       168.465    
  19  0.355140      -1.03524      -12.5359       12.5359       162.983       175.518    
  20  0.482165     -0.729469      -8.83320       8.83320       163.261       172.094    
  21  0.577197     -0.549571      -6.65481       6.65481       156.586       163.241    
  22  0.107316E-01  -4.53456      -54.9094       54.9094       160.207       215.116    
  23  0.923969     -0.790764E-01 -0.957543      0.957543       161.597       162.555    
  24  0.810451     -0.210164      -2.54490       2.54490       159.760       162.305    
  25  0.143346      -1.94249      -23.5218       23.5218       161.324       184.845    
  26  0.994184     -0.583318E-02 -0.706346E-01  0.706346E-01   161.937       162.007    
  27  0.870737     -0.138415      -1.67608       1.67608       155.759       157.435    
  28  0.970691     -0.297469E-01 -0.360208      0.360208       160.765       161.125    
  29  0.351269      -1.04620      -12.6686       12.6686       161.413       174.081    
  30  0.464982     -0.765756      -9.27261       9.27261       161.736       171.009    
  31  0.921785     -0.814432E-01 -0.986203      0.986203       161.872       162.858    
  32  0.110512      -2.20263      -26.6719       26.6719       161.330       188.002    
  33  0.261408      -1.34167      -16.2464       16.2464       160.107       176.354    
  34  0.908908     -0.955118E-01  -1.15656       1.15656       165.090       166.246    
  35  0.819412     -0.199168      -2.41174       2.41174       158.974       161.385    
  36  0.466482     -0.762536      -9.23361       9.23361       163.578       172.812    
  37  0.717237     -0.332349      -4.02444       4.02444       165.069       169.093    
  38  0.802331     -0.220234      -2.66683       2.66683       161.050       163.717    
  39  0.949390     -0.519355E-01 -0.628891      0.628891       162.947       163.576    
  40  0.258511      -1.35282      -16.3814       16.3814       160.210       176.592    
  41  0.270423      -1.30777      -15.8359       15.8359       164.985       180.821    
  42  0.366439      -1.00392      -12.1566       12.1566       161.034       173.190    
  43  0.934403     -0.678476E-01 -0.821573      0.821573       164.031       164.853    
  44  0.956654     -0.443133E-01 -0.536594      0.536594       160.814       161.351    
  45  0.377790     -0.973417      -11.7872       11.7872       159.182       170.969    
  46  0.203667      -1.59127      -19.2689       19.2689       159.061       178.330    
  47  0.673892     -0.394685      -4.77928       4.77928       158.348       163.127    
  48  0.347380      -1.05734      -12.8034       12.8034       161.708       174.511    
  49  0.144339      -1.93559      -23.4383       23.4383       167.774       191.212    
  50  0.728571     -0.316670      -3.83458       3.83458       162.571       166.406    
  51  0.243065      -1.41443      -17.1274       17.1274       161.480       178.607    
  52  0.686711     -0.375841      -4.55110       4.55110       162.825       167.376    
  53  0.159440      -1.83609      -22.2334       22.2334       161.444       183.678    
  54  0.426258     -0.852711      -10.3256       10.3256       158.817       169.142    
  55  0.929286     -0.733386E-01 -0.888064      0.888064       158.097       158.985    
  56  0.335987E-01  -3.39327      -41.0894       41.0894       161.952       203.041    
  57  0.539383     -0.617330      -7.47530       7.47530       162.484       169.959    
  58  0.384768     -0.955116      -11.5656       11.5656       158.917       170.482    
  59  0.267956      -1.31693      -15.9468       15.9468       162.606       178.553    
  60  0.116616      -2.14887      -26.0209       26.0209       160.049       186.070    
  61  0.852032     -0.160131      -1.93904       1.93904       160.915       162.854    
  62  0.456598     -0.783952      -9.49295       9.49295       155.616       165.109    
  63  0.157616      -1.84759      -22.3727       22.3727       155.551       177.923    
  64  0.928361     -0.743348E-01 -0.900127      0.900127       161.237       162.137    
  65  0.200440      -1.60724      -19.4622       19.4622       159.455       178.918    
  66  0.106743      -2.23733      -27.0920       27.0920       164.566       191.658    
  67  0.786346     -0.240359      -2.91053       2.91053       161.892       164.803    
  68  0.481815     -0.730195      -8.84200       8.84200       162.816       171.658    
  69  0.410111     -0.891327      -10.7932       10.7932       162.643       173.436    
  70  0.768538     -0.263265      -3.18790       3.18790       161.557       164.745    
  71  0.693325     -0.366257      -4.43504       4.43504       170.733       175.168    
  72  0.462914     -0.770214      -9.32659       9.32659       158.785       168.111    
  73  0.923938     -0.791099E-01 -0.957949      0.957949       160.681       161.639    
  74  0.548506     -0.600557      -7.27221       7.27221       154.726       161.999    
  75  0.146029      -1.92395      -23.2973       23.2973       159.336       182.634    
loop,thermsimp(1:2)       83   6.00268       16.0231    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230        162.08          0.85          1.13         25.08          0.32          0.06         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    162.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       83
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       84
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      229     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -6.75107       6.75107       155.759       162.510    
   2  0.468879     -0.757411      -9.17157       9.17157       158.097       167.268    
   3  0.886741E-01  -2.42279      -29.3378       29.3378       156.242       185.579    
   4  0.211783      -1.55219      -18.7956       18.7956       153.690       172.486    
   5  0.573306     -0.556336      -6.73672       6.73672       158.647       165.384    
   6  0.401711     -0.912021      -11.0437       11.0437       159.959       171.003    
   7  0.505706     -0.681800      -8.25598       8.25598       160.765       169.021    
   8  0.603045     -0.505763      -6.12434       6.12434       160.814       166.939    
   9  0.696575     -0.361580      -4.37841       4.37841       158.974       163.352    
  10  0.294614      -1.22209      -14.7984       14.7984       160.681       175.479    
  11  0.527550     -0.639511      -7.74390       7.74390       154.726       162.470    
  12  0.657157     -0.419832      -5.08379       5.08379       161.937       167.020    
  13  0.627866     -0.465428      -5.63591       5.63591       161.455       167.090    
  14  0.993353E-02  -4.61184      -55.8452       55.8452       161.237       217.082    
  15  0.885166E-01  -2.42456      -29.3593       29.3593       154.957       184.316    
  16  0.265764      -1.32515      -16.0463       16.0463       159.760       175.806    
  17  0.446403     -0.806534      -9.76639       9.76639       161.597       171.364    
  18  0.287864      -1.24527      -15.0791       15.0791       160.915       175.994    
  19  0.926928E-01  -2.37846      -28.8011       28.8011       161.872       190.673    
  20  0.394849     -0.929252      -11.2524       11.2524       159.375       170.628    
  21  0.540746     -0.614805      -7.44473       7.44473       158.348       165.793    
  22  0.846435     -0.166721      -2.01885       2.01885       156.586       158.605    
  23  0.417037     -0.874580      -10.5904       10.5904       162.947       173.537    
  24  0.210713      -1.55726      -18.8570       18.8570       161.050       179.907    
  25  0.764669     -0.268312      -3.24901       3.24901       161.557       164.806    
  26  0.219471E-01  -3.81912      -46.2461       46.2461       161.892       208.138    
  27  0.200728      -1.60581      -19.4449       19.4449       164.031       183.476    
  28  0.572660     -0.557463      -6.75037       6.75037       156.791       163.542    
  29  0.599083E-01  -2.81494      -34.0864       34.0864       161.207       195.293    
  30  0.214614      -1.53891      -18.6348       18.6348       155.616       174.251    
  31  0.489389     -0.714598      -8.65313       8.65313       161.525       170.178    
  32  0.162616      -1.81636      -21.9945       21.9945       160.258       182.252    
  33  0.710022     -0.342459      -4.14687       4.14687       156.387       160.534    
  34  0.753583     -0.282916      -3.42586       3.42586       165.090       168.516    
  35  0.743317     -0.296633      -3.59195       3.59195       158.335       161.926    
  36  0.155416      -1.86165      -22.5429       22.5429       162.571       185.114    
  37  0.643355     -0.441059      -5.34082       5.34082       162.825       168.165    
  38  0.656098     -0.421444      -5.10331       5.10331       158.785       163.888    
  39  0.327550      -1.11611      -13.5151       13.5151       152.198       165.713    
  40  0.192244      -1.64899      -19.9678       19.9678       161.212       181.180    
  41  0.433590     -0.835657      -10.1190       10.1190       165.069       175.188    
  42  0.788561     -0.237545      -2.87646       2.87646       158.817       161.693    
  43  0.978028     -0.222173E-01 -0.269032      0.269032       162.484       162.753    
  44  0.110322      -2.20435      -26.6927       26.6927       158.917       185.610    
  45  0.795332     -0.228995      -2.77293       2.77293       159.182       161.955    
  46  0.497518E-01  -3.00071      -36.3359       36.3359       161.736       198.072    
  47  0.852459     -0.159631      -1.93298       1.93298       162.816       164.749    
  48  0.133240      -2.01560      -24.4071       24.4071       163.261       187.668    
  49  0.671163     -0.398743      -4.82842       4.82842       163.578       168.406    
  50  0.245122      -1.40600      -17.0254       17.0254       161.034       178.059    
  51  0.820498     -0.197843      -2.39570       2.39570       160.242       162.638    
  52  0.422422     -0.861751      -10.4350       10.4350       162.643       173.078    
  53  0.946612E-01  -2.35745      -28.5466       28.5466       161.413       189.959    
  54  0.902486     -0.102603      -1.24242       1.24242       161.708       162.951    
  55  0.858585     -0.152469      -1.84626       1.84626       170.733       172.579    
  56  0.713346     -0.337789      -4.09031       4.09031       162.983       167.073    
  57  0.497785     -0.697587      -8.44715       8.44715       160.107       168.555    
  58  0.971461     -0.289536E-01 -0.350602      0.350602       160.210       160.561    
  59  0.714587     -0.336051      -4.06927       4.06927       157.199       161.268    
  60  0.194565E-01  -3.93958      -47.7047       47.7047       155.551       203.255    
  61  0.675786E-01  -2.69446      -32.6275       32.6275       159.061       191.689    
  62  0.924162     -0.788681E-01 -0.955021      0.955021       162.606       163.561    
  63  0.988536     -0.115299E-01 -0.139616      0.139616       161.480       161.619    
  64  0.136917      -1.98838      -24.0775       24.0775       159.455       183.533    
  65  0.529964     -0.634945      -7.68861       7.68861       164.985       172.674    
  66  0.369278     -0.996204      -12.0631       12.0631       159.336       171.400    
  67  0.186364      -1.68006      -20.3440       20.3440       161.444       181.788    
  68  0.314345      -1.15726      -14.0134       14.0134       161.324       175.337    
  69  0.451257     -0.795718      -9.63543       9.63543       160.049       169.684    
  70  0.194510      -1.63727      -19.8259       19.8259       161.330       181.156    
  71  0.690618     -0.370168      -4.48240       4.48240       158.419       162.901    
  72  0.828229     -0.188466      -2.28215       2.28215       167.774       170.056    
  73  0.161272      -1.82466      -22.0950       22.0950       164.566       186.661    
  74  0.425677E-01  -3.15666      -38.2243       38.2243       161.952       200.176    
  75  0.660692     -0.414467      -5.01882       5.01882       162.078       167.097    
loop,thermsimp(1:2)       84   6.75107       9.17157    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231        162.34          0.85          1.13         25.01          0.35          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    232        175.71          0.86          1.14         25.13          0.28          0.06         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       84
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       85
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      231     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -19.6412       19.6412       156.586       176.228    
   2  0.793097     -0.231809      -2.80700       2.80700       156.387       159.194    
   3  0.261081      -1.34293      -16.2616       16.2616       160.210       176.472    
   4  0.912198     -0.918984E-01  -1.11281       1.11281       157.199       158.312    
   5  0.493539     -0.706153      -8.55087       8.55087       161.480       170.030    
   6  0.721001     -0.327115      -3.96106       3.96106       158.817       162.778    
   7  0.578790     -0.546816      -6.62145       6.62145       158.335       164.956    
   8  0.684127     -0.379612      -4.59676       4.59676       159.182       163.779    
   9  0.627712     -0.465674      -5.63889       5.63889       154.726       160.365    
  10  0.858540     -0.152522      -1.84690       1.84690       155.759       157.606    
  11  0.712254E-01  -2.64191      -31.9911       31.9911       160.242       192.233    
  12  0.927250     -0.755316E-01 -0.914619      0.914619       162.484       163.399    
  13  0.458073     -0.780727      -9.45389       9.45389       158.419       167.873    
  14  0.940004     -0.618714E-01 -0.749206      0.749206       161.708       162.457    
  15  0.322549      -1.13150      -13.7014       13.7014       158.974       172.675    
  16  0.939473     -0.624358E-01 -0.756041      0.756041       156.791       157.547    
  17  0.726080     -0.320095      -3.87606       3.87606       162.606       166.482    
  18  0.602088E-02  -5.11252      -61.9080       61.9080       158.785       220.693    
  19  0.735289     -0.307492      -3.72345       3.72345       162.816       166.539    
  20  0.847617     -0.165326      -2.00195       2.00195       161.557       163.559    
  21  0.747190E-01  -2.59402      -31.4112       31.4112       158.647       190.058    
  22  0.248374      -1.39282      -16.8658       16.8658       152.198       169.064    
  23  0.350184      -1.04930      -12.7060       12.7060       158.348       171.054    
  24  0.327739E-03  -8.02329      -97.1548       97.1548       160.814       257.969    
  25  0.130012      -2.04013      -24.7041       24.7041       161.937       186.641    
  26  0.609791     -0.494639      -5.98963       5.98963       162.983       168.972    
  27  0.793414     -0.231410      -2.80217       2.80217       161.455       164.257    
  28  0.962567     -0.381519E-01 -0.461985      0.461985       162.078       162.540    
  29  0.499469     -0.694211      -8.40626       8.40626       158.097       166.503    
  30  0.887491     -0.119357      -1.44531       1.44531       162.825       164.270    
  31  0.136374      -1.99236      -24.1256       24.1256       163.578       187.704    
  32  0.292356      -1.22978      -14.8916       14.8916       165.090       179.981    
  33  0.301564      -1.19877      -14.5161       14.5161       160.107       174.624    
  34  0.352543      -1.04258      -12.6247       12.6247       160.765       173.390    
  35  0.483726     -0.726236      -8.79406       8.79406       160.049       168.843    
  36  0.410499     -0.890381      -10.7817       10.7817       167.774       178.556    
  37  0.458111     -0.780644      -9.45289       9.45289       161.525       170.977    
  38  0.670071     -0.400372      -4.84815       4.84815       159.375       164.224    
  39  0.175486      -1.74020      -21.0722       21.0722       159.959       181.031    
  40  0.798907     -0.224511      -2.71862       2.71862       161.597       164.316    
  41  0.270487      -1.30753      -15.8330       15.8330       159.336       175.170    
  42  0.480368     -0.733202      -8.87841       8.87841       153.690       162.569    
  43  0.658406     -0.417933      -5.06079       5.06079       170.733       175.794    
  44  0.937976     -0.640304E-01 -0.775350      0.775350       164.985       165.761    
  45  0.710083     -0.342373      -4.14583       4.14583       162.643       166.789    
  46  0.567340     -0.566797      -6.86340       6.86340       162.947       169.810    
  47  0.201426      -1.60233      -19.4028       19.4028       155.616       175.019    
  48  0.660313     -0.415042      -5.02578       5.02578       165.069       170.094    
  49  0.524008     -0.646249      -7.82549       7.82549       161.324       169.149    
  50  0.513616     -0.666280      -8.06805       8.06805       160.681       168.749    
  51  0.951218     -0.500122E-01 -0.605603      0.605603       159.760       160.365    
  52  0.703465     -0.351737      -4.25922       4.25922       160.915       165.174    
  53  0.702859     -0.352600      -4.26966       4.26966       161.034       165.303    
  54  0.453067     -0.791715      -9.58695       9.58695       161.050       170.637    
  55  0.202116      -1.59891      -19.3614       19.3614       161.330       180.691    
  56  0.491988     -0.709301      -8.58899       8.58899       161.212       169.801    
  57  0.632131     -0.458659      -5.55394       5.55394       161.444       166.998    
  58  0.911086     -0.931178E-01  -1.12757       1.12757       160.258       161.385    
  59  0.888750     -0.117939      -1.42814       1.42814       164.031       165.459    
  60  0.468235     -0.758785      -9.18820       9.18820       159.455       168.644    
  61  0.971366     -0.290520E-01 -0.351794      0.351794       154.957       155.308    
  62  0.622947     -0.473294      -5.73116       5.73116       162.571       168.302    
  63  0.837000     -0.177932      -2.15459       2.15459       156.242       158.396    
  64  0.495636     -0.701913      -8.49952       8.49952       158.917       167.416    
  65  0.251386      -1.38077      -16.7198       16.7198       164.566       181.286    
  66  0.580065E-01  -2.84720      -34.4770       34.4770       163.261       197.738    
  67  0.601569     -0.508214      -6.15401       6.15401       161.413       167.567    
  68  0.249260      -1.38926      -16.8227       16.8227       161.872       178.695    
  69  0.309647E-01  -3.47491      -42.0780       42.0780       159.061       201.139    
  70  0.653539     -0.425353      -5.15063       5.15063       161.207       166.358    
  71  0.987034     -0.130508E-01 -0.158033      0.158033       161.736       161.894    
  72  0.712168     -0.339441      -4.11033       4.11033       161.952       166.062    
  73  0.935651     -0.665123E-01 -0.805403      0.805403       155.551       156.356    
  74  0.269485      -1.31124      -15.8780       15.8780       161.892       177.770    
  75  0.296778      -1.21477      -14.7098       14.7098       162.340       177.050    
loop,thermsimp(1:2)       85   19.6412       2.80700    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233        163.44          0.85          1.14         25.26          0.08          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234        206.50          0.86          1.14         25.15          0.26          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    163.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       85
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       86
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      233     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -9.27525       9.27525       154.957       164.232    
   2  0.948887     -0.524654E-01 -0.635309      0.635309       155.551       156.186    
   3  0.532332     -0.630488      -7.63464       7.63464       156.791       164.426    
   4  0.374267     -0.982785      -11.9006       11.9006       155.759       167.660    
   5  0.694531     -0.364519      -4.41399       4.41399       157.199       161.613    
   6  0.414371     -0.880994      -10.6680       10.6680       156.242       166.910    
   7  0.208827E-01  -3.86883      -46.8480       46.8480       156.387       203.235    
   8  0.627187     -0.466511      -5.64902       5.64902       159.760       165.409    
   9  0.148799E-01  -4.20774      -50.9519       50.9519       154.726       205.678    
  10  0.809008     -0.211946      -2.56648       2.56648       160.258       162.824    
  11  0.647680     -0.434359      -5.25970       5.25970       161.736       166.996    
  12  0.289351      -1.24012      -15.0167       15.0167       161.708       176.725    
  13  0.222457      -1.50302      -18.2002       18.2002       162.078       180.278    
  14  0.374268     -0.982782      -11.9006       11.9006       153.690       165.591    
  15  0.785765     -0.241097      -2.91947       2.91947       158.817       161.736    
  16  0.298051      -1.21049      -14.6580       14.6580       162.484       177.142    
  17  0.725075     -0.321480      -3.89284       3.89284       161.557       165.450    
  18  0.386364     -0.950976      -11.5155       11.5155       159.182       170.697    
  19  0.631686     -0.459363      -5.56246       5.56246       159.375       164.938    
  20  0.688282     -0.373557      -4.52344       4.52344       161.455       165.978    
  21  0.373817     -0.983990      -11.9152       11.9152       162.825       174.740    
  22  0.219845      -1.51483      -18.3433       18.3433       161.597       179.941    
  23  0.926271     -0.765889E-01 -0.927422      0.927422       158.335       159.262    
  24  0.618127     -0.481061      -5.82522       5.82522       160.915       166.740    
  25  0.176216      -1.73604      -21.0219       21.0219       161.034       182.055    
  26  0.742943     -0.297136      -3.59805       3.59805       164.031       167.629    
  27  0.357690      -1.02809      -12.4492       12.4492       164.985       177.435    
  28  0.478359     -0.737394      -8.92917       8.92917       161.952       170.881    
  29  0.395976     -0.926401      -11.2179       11.2179       161.207       172.425    
  30  0.803186     -0.219169      -2.65394       2.65394       162.606       165.260    
  31  0.231845      -1.46168      -17.6997       17.6997       158.097       175.796    
  32  0.808968     -0.211996      -2.56708       2.56708       162.816       165.383    
  33  0.579217     -0.546078      -6.61251       6.61251       162.643       169.256    
  34  0.384357     -0.956183      -11.5785       11.5785       161.444       173.023    
  35  0.856367     -0.155057      -1.87760       1.87760       158.917       160.795    
  36  0.265661      -1.32553      -16.0510       16.0510       161.413       177.464    
  37  0.288915      -1.24162      -15.0349       15.0349       158.419       173.454    
  38  0.224915      -1.49203      -18.0672       18.0672       162.571       180.638    
  39  0.685944     -0.376959      -4.56464       4.56464       159.455       164.020    
  40  0.265936      -1.32450      -16.0385       16.0385       160.681       176.719    
  41  0.412966     -0.884389      -10.7091       10.7091       160.049       170.758    
  42  0.440796     -0.819173      -9.91944       9.91944       162.983       172.902    
  43  0.572522     -0.557705      -6.75330       6.75330       152.198       158.951    
  44  0.798412     -0.225131      -2.72613       2.72613       161.324       164.050    
  45  0.127097      -2.06281      -24.9787       24.9787       161.212       186.191    
  46  0.243397      -1.41306      -17.1109       17.1109       162.947       180.058    
  47  0.322195      -1.13260      -13.7147       13.7147       161.480       175.194    
  48  0.512728     -0.668011      -8.08900       8.08900       165.069       173.158    
  49  0.786191     -0.240556      -2.91291       2.91291       161.050       163.963    
  50  0.733079     -0.310501      -3.75989       3.75989       161.525       165.284    
  51  0.601364     -0.508554      -6.15813       6.15813       158.348       164.506    
  52  0.348529      -1.05403      -12.7634       12.7634       158.974       171.737    
  53  0.923986     -0.790584E-01 -0.957326      0.957326       160.765       161.722    
  54  0.843742     -0.169908      -2.05743       2.05743       160.107       162.165    
  55  0.723581     -0.323543      -3.91781       3.91781       155.616       159.534    
  56  0.378158     -0.972444      -11.7754       11.7754       159.336       171.112    
  57  0.463644     -0.768638      -9.30751       9.30751       170.733       180.041    
  58  0.427569     -0.849641      -10.2884       10.2884       156.586       166.875    
  59  0.235852      -1.44455      -17.4922       17.4922       160.210       177.703    
  60  0.203797      -1.59063      -19.2611       19.2611       162.340       181.601    
  61  0.146982E-02  -6.52261      -78.9829       78.9829       161.892       240.875    
  62  0.681525     -0.383422      -4.64290       4.64290       167.774       172.417    
  63  0.931276     -0.711992E-01 -0.862158      0.862158       161.872       162.734    
  64  0.581849     -0.541545      -6.55761       6.55761       165.090       171.647    
  65  0.652684     -0.426663      -5.16650       5.16650       161.330       166.496    
  66  0.388365     -0.945809      -11.4529       11.4529       159.959       171.412    
  67  0.216086      -1.53208      -18.5521       18.5521       164.566       183.118    
  68  0.409967     -0.891679      -10.7974       10.7974       161.937       172.734    
  69  0.440345     -0.820196      -9.93183       9.93183       163.578       173.510    
  70  0.507524E-01  -2.98080      -36.0947       36.0947       158.647       194.742    
  71  0.734141     -0.309054      -3.74236       3.74236       160.242       163.984    
  72  0.701795     -0.354114      -4.28799       4.28799       163.261       167.549    
  73  0.741735     -0.298763      -3.61775       3.61775       159.061       162.679    
  74  0.619311     -0.479148      -5.80205       5.80205       158.785       164.587    
  75  0.616117     -0.484318      -5.86465       5.86465       163.436       169.300    
loop,thermsimp(1:2)       86   9.27525      0.635309    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235        155.71          0.86          1.14         25.22          0.09          0.05         27.37
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    236        152.54          0.85          1.14         25.18          0.21          0.06         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       86
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       87
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      235     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -20.5665       20.5665       155.551       176.117    
   2  0.721345     -0.326637      -3.95528       3.95528       152.198       156.153    
   3  0.842493     -0.171390      -2.07537       2.07537       158.335       160.410    
   4  0.260540      -1.34500      -16.2867       16.2867       155.616       171.903    
   5  0.782605     -0.245127      -2.96827       2.96827       158.917       161.885    
   6  0.208492      -1.56785      -18.9853       18.9853       157.199       176.184    
   7  0.290568E-01  -3.53850      -42.8480       42.8480       160.765       203.613    
   8  0.673682     -0.394997      -4.78305       4.78305       158.817       163.600    
   9  0.399393     -0.917808      -11.1138       11.1138       160.107       171.221    
  10  0.966971     -0.335863E-01 -0.406700      0.406700       159.061       159.468    
  11  0.390645     -0.939956      -11.3820       11.3820       161.872       173.254    
  12  0.259548      -1.34881      -16.3329       16.3329       160.258       176.591    
  13  0.260765      -1.34413      -16.2763       16.2763       161.050       177.326    
  14  0.110601E-01  -4.50441      -54.5444       54.5444       160.242       214.786    
  15  0.727710     -0.317852      -3.84890       3.84890       159.455       163.304    
  16  0.717076     -0.332574      -4.02717       4.02717       161.324       165.351    
  17  0.612129     -0.490811      -5.94328       5.94328       154.957       160.900    
  18  0.589376     -0.528691      -6.40197       6.40197       156.791       163.193    
  19  0.541615     -0.613199      -7.42529       7.42529       158.348       165.773    
  20  0.330403      -1.10744      -13.4101       13.4101       158.785       172.195    
  21  0.229530      -1.47172      -17.8212       17.8212       159.375       177.197    
  22  0.564010     -0.572684      -6.93468       6.93468       162.606       169.541    
  23  0.454226     -0.789161      -9.55602       9.55602       161.525       171.081    
  24  0.579528     -0.545541      -6.60601       6.60601       162.816       169.422    
  25  0.245500      -1.40446      -17.0067       17.0067       159.760       176.766    
  26  0.708019     -0.345284      -4.18107       4.18107       161.557       165.738    
  27  0.300215      -1.20326      -14.5704       14.5704       153.690       168.261    
  28  0.721461     -0.326478      -3.95335       3.95335       161.455       165.408    
  29  0.326772      -1.11849      -13.5439       13.5439       161.330       174.874    
  30  0.580879     -0.543212      -6.57781       6.57781       160.915       167.493    
  31  0.963075     -0.376241E-01 -0.455594      0.455594       156.586       157.042    
  32  0.656935     -0.420170      -5.08787       5.08787       156.242       161.329    
  33  0.908335     -0.961416E-01  -1.16419       1.16419       161.736       162.901    
  34  0.765938     -0.266654      -3.22894       3.22894       163.261       166.490    
  35  0.497301     -0.698561      -8.45893       8.45893       164.031       172.490    
  36  0.833603     -0.181997      -2.20382       2.20382       155.759       157.963    
  37  0.433057     -0.836886      -10.1339       10.1339       162.643       172.777    
  38  0.349547      -1.05112      -12.7281       12.7281       163.436       176.164    
  39  0.142838      -1.94604      -23.5648       23.5648       159.182       182.747    
  40  0.326780      -1.11847      -13.5436       13.5436       160.049       173.593    
  41  0.707709     -0.345723      -4.18639       4.18639       161.952       166.138    
  42  0.914339     -0.895538E-01  -1.08441       1.08441       159.336       160.421    
  43  0.392800     -0.934454      -11.3154       11.3154       159.959       171.275    
  44  0.434772     -0.832933      -10.0861       10.0861       165.090       175.176    
  45  0.229545      -1.47165      -17.8204       17.8204       158.974       176.794    
  46  0.661281     -0.413577      -5.00804       5.00804       167.774       172.782    
  47  0.459966     -0.776602      -9.40395       9.40395       161.207       170.611    
  48  0.352439      -1.04288      -12.6283       12.6283       161.937       174.565    
  49  0.490345     -0.712647      -8.62951       8.62951       162.983       171.612    
  50  0.837788     -0.176990      -2.14319       2.14319       161.444       163.587    
  51  0.247493      -1.39637      -16.9088       16.9088       165.069       181.977    
  52  0.221382      -1.50787      -18.2589       18.2589       158.419       176.678    
  53  0.374412     -0.982399      -11.8960       11.8960       163.578       175.474    
  54  0.170580      -1.76855      -21.4155       21.4155       162.825       184.240    
  55  0.464054     -0.767755      -9.29681       9.29681       161.480       170.776    
  56  0.936961     -0.651140E-01 -0.788472      0.788472       158.097       158.885    
  57  0.302357      -1.19615      -14.4842       14.4842       160.681       175.165    
  58  0.572748E-01  -2.85990      -34.6307       34.6307       161.708       196.339    
  59  0.495156     -0.702883      -8.51128       8.51128       162.484       170.995    
  60  0.101162      -2.29104      -27.7424       27.7424       164.985       192.728    
  61  0.786435E-02  -4.84542      -58.6736       58.6736       161.413       220.086    
  62  0.960492     -0.403100E-01 -0.488117      0.488117       160.210       160.698    
  63  0.902616     -0.102458      -1.24068       1.24068       161.597       162.838    
  64  0.646986     -0.435430      -5.27266       5.27266       170.733       176.006    
  65  0.218936      -1.51897      -18.3934       18.3934       162.947       181.340    
  66  0.491829     -0.709625      -8.59292       8.59292       162.078       170.671    
  67  0.873324     -0.135448      -1.64016       1.64016       162.571       164.211    
  68  0.419066     -0.869727      -10.5316       10.5316       162.340       172.872    
  69  0.390022     -0.941553      -11.4013       11.4013       161.034       172.435    
  70  0.843189     -0.170564      -2.06537       2.06537       164.566       166.631    
  71  0.992789     -0.723678E-02 -0.876308E-01  0.876308E-01   161.212       161.299    
  72  0.694490     -0.364577      -4.41470       4.41470       158.647       163.062    
  73  0.329411      -1.11045      -13.4465       13.4465       156.387       169.834    
  74  0.445795     -0.807896      -9.78289       9.78289       154.726       164.509    
  75  0.668924     -0.402084      -4.86888       4.86888       152.539       157.407    
loop,thermsimp(1:2)       87   20.5665       3.95528    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237        158.81          0.85          1.15         25.17          0.16          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    238        163.63          0.84          1.13         25.28          0.20          0.06         27.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       87
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       88
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      237     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -18.3248       18.3248       152.198       170.523    
   2  0.246752E-01  -3.70196      -44.8274       44.8274       156.586       201.414    
   3  0.679039     -0.387076      -4.68714       4.68714       152.539       157.226    
   4  0.709027     -0.343862      -4.16385       4.16385       155.759       159.923    
   5  0.577754     -0.548608      -6.64314       6.64314       158.097       164.740    
   6  0.738694     -0.302871      -3.66750       3.66750       159.061       162.729    
   7  0.181723      -1.70527      -20.6493       20.6493       158.335       178.984    
   8  0.103748      -2.26579      -27.4367       27.4367       159.336       186.773    
   9  0.456811E-02  -5.38866      -65.2517       65.2517       160.210       225.462    
  10  0.303247      -1.19321      -14.4487       14.4487       154.957       169.405    
  11  0.284736      -1.25619      -15.2114       15.2114       161.212       176.423    
  12  0.900494     -0.104812      -1.26918       1.26918       156.242       157.511    
  13  0.691792     -0.368470      -4.46183       4.46183       158.917       163.379    
  14  0.502714     -0.687735      -8.32784       8.32784       161.597       169.925    
  15  0.305219      -1.18673      -14.3702       14.3702       161.736       176.107    
  16  0.412005     -0.886720      -10.7374       10.7374       158.647       169.384    
  17  0.412225     -0.886186      -10.7309       10.7309       156.791       167.522    
  18  0.121697      -2.10622      -25.5044       25.5044       159.455       184.960    
  19  0.465374     -0.764915      -9.26242       9.26242       161.444       170.707    
  20  0.273016      -1.29823      -15.7203       15.7203       158.817       174.537    
  21  0.502763     -0.687636      -8.32665       8.32665       162.571       170.898    
  22  0.516442     -0.660793      -8.00161       8.00161       154.726       162.728    
  23  0.554333     -0.589990      -7.14425       7.14425       161.324       168.468    
  24  0.192397E-01  -3.95078      -47.8404       47.8404       161.455       209.295    
  25  0.451279E-01  -3.09825      -37.5171       37.5171       161.557       199.074    
  26  0.457340     -0.782327      -9.47328       9.47328       158.348       167.821    
  27  0.325184      -1.12336      -13.6029       13.6029       161.952       175.555    
  28  0.700952     -0.355315      -4.30255       4.30255       163.261       167.564    
  29  0.961087     -0.396906E-01 -0.480617      0.480617       164.566       165.047    
  30  0.195966E-02  -6.23498      -75.5000       75.5000       160.915       236.415    
  31  0.766376     -0.266082      -3.22202       3.22202       153.690       156.912    
  32  0.398846     -0.919180      -11.1304       11.1304       162.816       173.946    
  33  0.675249     -0.392674      -4.75493       4.75493       162.606       167.361    
  34  0.189468      -1.66354      -20.1439       20.1439       156.387       176.531    
  35  0.444608     -0.810562      -9.81517       9.81517       161.207       171.022    
  36  0.514006     -0.665520      -8.05884       8.05884       162.078       170.137    
  37  0.575199     -0.553039      -6.69680       6.69680       161.480       168.176    
  38  0.121449      -2.10826      -25.5292       25.5292       162.484       188.013    
  39  0.209130      -1.56480      -18.9483       18.9483       161.525       180.473    
  40  0.466284E-01  -3.06555      -37.1210       37.1210       160.107       197.228    
  41  0.386630E-01  -3.25287      -39.3893       39.3893       159.959       199.348    
  42  0.335751E-01  -3.39397      -41.0979       41.0979       162.983       204.080    
  43  0.878126     -0.129965      -1.57376       1.57376       155.616       157.190    
  44  0.652938     -0.426273      -5.16177       5.16177       158.785       163.946    
  45  0.932456E-01  -2.37252      -28.7290       28.7290       161.034       189.763    
  46  0.662683     -0.411458      -4.98239       4.98239       164.031       169.013    
  47  0.204704      -1.58619      -19.2074       19.2074       162.643       181.850    
  48  0.985446     -0.146609E-01 -0.177530      0.177530       167.774       167.951    
  49  0.105847      -2.24576      -27.1941       27.1941       162.340       189.534    
  50  0.843201     -0.170550      -2.06520       2.06520       161.872       163.937    
  51  0.364087      -1.01036      -12.2346       12.2346       160.049       172.284    
  52  0.650651E-01  -2.73237      -33.0865       33.0865       161.937       195.023    
  53  0.968103     -0.324171E-01 -0.392541      0.392541       161.330       161.722    
  54  0.131933      -2.02546      -24.5265       24.5265       160.681       185.207    
  55  0.906847     -0.977815E-01  -1.18405       1.18405       165.090       166.274    
  56  0.443328E-01  -3.11603      -37.7323       37.7323       163.578       201.310    
  57  0.507045     -0.679156      -8.22397       8.22397       170.733       178.957    
  58  0.287709      -1.24581      -15.0856       15.0856       155.551       170.636    
  59  0.900299     -0.105028      -1.27180       1.27180       163.436       164.708    
  60  0.689829E-01  -2.67390      -32.3785       32.3785       157.199       189.578    
  61  0.876407     -0.131925      -1.59749       1.59749       160.258       161.855    
  62  0.718081     -0.331173      -4.01020       4.01020       158.419       162.429    
  63  0.177063      -1.73125      -20.9639       20.9639       159.760       180.724    
  64  0.749425E-01  -2.59103      -31.3751       31.3751       158.974       190.349    
  65  0.136072      -1.99457      -24.1524       24.1524       159.375       183.528    
  66  0.662610     -0.411569      -4.98373       4.98373       161.050       166.033    
  67  0.612646     -0.489969      -5.93308       5.93308       162.947       168.880    
  68  0.258380      -1.35332      -16.3875       16.3875       165.069       181.456    
  69  0.406590     -0.899949      -10.8976       10.8976       159.182       170.079    
  70  0.889463     -0.117137      -1.41843       1.41843       162.825       164.243    
  71  0.568198     -0.565286      -6.84510       6.84510       164.985       171.830    
  72  0.280610      -1.27079      -15.3881       15.3881       161.708       177.096    
  73  0.369152     -0.996547      -12.0673       12.0673       160.765       172.832    
  74  0.637974     -0.449458      -5.44253       5.44253       160.242       165.684    
  75  0.552740     -0.592868      -7.17909       7.17909       158.812       165.991    
loop,thermsimp(1:2)       88   18.3248       44.8274    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239        160.60          0.85          1.14         25.26          0.23          0.06         27.54
Just calling func    0   0         27.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    240        194.67          0.86          1.14         25.31          0.45          0.06         27.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       88
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       89
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      239     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -1.59260       1.59260       153.690       155.283    
   2  0.765270     -0.267527      -3.23951       3.23951       155.616       158.855    
   3  0.215687      -1.53393      -18.5745       18.5745       152.539       171.113    
   4  0.999601E-01  -2.30298      -27.8870       27.8870       156.242       184.129    
   5  0.706519     -0.347405      -4.20676       4.20676       155.759       159.966    
   6  0.201358      -1.60267      -19.4069       19.4069       161.330       180.737    
   7  0.450677     -0.797005      -9.65101       9.65101       160.258       169.909    
   8  0.897557     -0.108078      -1.30873       1.30873       158.419       159.727    
   9  0.161166      -1.82532      -22.1029       22.1029       154.726       176.829    
  10  0.972556E-01  -2.33041      -28.2192       28.2192       159.061       187.280    
  11  0.742112     -0.298255      -3.61159       3.61159       158.917       162.529    
  12  0.172377      -1.75807      -21.2886       21.2886       161.872       183.161    
  13  0.658751     -0.417410      -5.05445       5.05445       158.785       163.839    
  14  0.725340     -0.321114      -3.88840       3.88840       162.825       166.713    
  15  0.501488     -0.690175      -8.35739       8.35739       163.436       171.793    
  16  0.845372     -0.167978      -2.03407       2.03407       158.097       160.131    
  17  0.132369      -2.02216      -24.4865       24.4865       164.566       189.053    
  18  0.734515E-01  -2.61113      -31.6184       31.6184       160.242       191.860    
  19  0.391205     -0.938523      -11.3647       11.3647       158.812       170.176    
  20  0.376983     -0.975555      -11.8131       11.8131       161.050       172.863    
  21  0.315463      -1.15371      -13.9704       13.9704       165.090       179.060    
  22  0.267113      -1.32008      -15.9850       15.9850       162.606       178.591    
  23  0.965292     -0.353243E-01 -0.427746      0.427746       156.791       157.219    
  24  0.954592     -0.464714E-01 -0.562727      0.562727       163.261       163.824    
  25  0.992414     -0.761515E-02 -0.922126E-01  0.922126E-01   158.348       158.440    
  26  0.867953E-02  -4.74679      -57.4793       57.4793       167.774       225.253    
  27  0.829585     -0.186829      -2.26233       2.26233       161.480       163.742    
  28  0.349695      -1.05069      -12.7230       12.7230       161.324       174.047    
  29  0.673511     -0.395251      -4.78613       4.78613       162.947       167.733    
  30  0.340696      -1.07676      -13.0386       13.0386       164.031       177.070    
  31  0.558731     -0.582087      -7.04854       7.04854       158.647       165.696    
  32  0.747295     -0.291295      -3.52732       3.52732       154.957       158.484    
  33  0.123287      -2.09324      -25.3473       25.3473       161.597       186.945    
  34  0.355051      -1.03549      -12.5389       12.5389       159.182       171.721    
  35  0.511895     -0.669636      -8.10868       8.10868       162.078       170.187    
  36  0.571856E-01  -2.86145      -34.6496       34.6496       152.198       186.848    
  37  0.507517     -0.678226      -8.21270       8.21270       155.551       163.763    
  38  0.326770      -1.11850      -13.5440       13.5440       161.444       174.988    
  39  0.736001     -0.306523      -3.71172       3.71172       162.571       166.283    
  40  0.970046     -0.304120E-01 -0.368261      0.368261       161.207       161.575    
  41  0.673510     -0.395253      -4.78615       4.78615       164.985       169.772    
  42  0.335032      -1.09353      -13.2417       13.2417       160.049       173.291    
  43  0.872321E-01  -2.43918      -29.5363       29.5363       160.765       190.301    
  44  0.749956     -0.287741      -3.48428       3.48428       162.816       166.300    
  45  0.159001      -1.83884      -22.2667       22.2667       158.817       181.083    
  46  0.529687     -0.635468      -7.69494       7.69494       161.952       169.647    
  47  0.142415      -1.94901      -23.6007       23.6007       161.736       185.337    
  48  0.803387     -0.218919      -2.65090       2.65090       161.212       163.863    
  49  0.709133     -0.343713      -4.16205       4.16205       156.387       160.549    
  50  0.261172      -1.34258      -16.2574       16.2574       161.708       177.966    
  51  0.106599      -2.23868      -27.1084       27.1084       170.733       197.842    
  52  0.955666     -0.453468E-01 -0.549108      0.549108       158.335       158.884    
  53  0.376236     -0.977539      -11.8371       11.8371       161.525       173.362    
  54  0.890774     -0.115665      -1.40060       1.40060       159.760       161.160    
  55  0.554077     -0.590452      -7.14984       7.14984       165.069       172.218    
  56  0.892825E-01  -2.41595      -29.2550       29.2550       162.643       191.898    
  57  0.941033     -0.607774E-01 -0.735959      0.735959       159.375       160.111    
  58  0.209380E-01  -3.86619      -46.8160       46.8160       159.455       206.271    
  59  0.427794     -0.849113      -10.2820       10.2820       160.681       170.963    
  60  0.194887      -1.63533      -19.8024       19.8024       159.336       179.139    
  61  0.840289     -0.174009      -2.10709       2.10709       162.484       164.591    
  62  0.634527     -0.454875      -5.50813       5.50813       162.340       167.848    
  63  0.159135      -1.83800      -22.2565       22.2565       157.199       179.456    
  64  0.182987      -1.69834      -20.5653       20.5653       161.034       181.599    
  65  0.520726     -0.652532      -7.90157       7.90157       158.974       166.875    
  66  0.249623      -1.38781      -16.8051       16.8051       161.937       178.742    
  67  0.801631     -0.221107      -2.67740       2.67740       160.107       162.785    
  68  0.329011      -1.11166      -13.4612       13.4612       161.557       175.018    
  69  0.995152     -0.485930E-02 -0.588418E-01  0.588418E-01   159.959       160.018    
  70  0.187107      -1.67607      -20.2957       20.2957       163.578       183.874    
  71  0.122259      -2.10161      -25.4486       25.4486       156.586       182.035    
  72  0.311222      -1.16725      -14.1343       14.1343       162.983       177.117    
  73  0.953750     -0.473535E-01 -0.573408      0.573408       161.455       162.028    
  74  0.303762      -1.19151      -14.4281       14.4281       160.210       174.639    
  75  0.278797      -1.27727      -15.4666       15.4666       160.604       176.071    
loop,thermsimp(1:2)       89   1.59260       3.23951    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241        158.40          0.85          1.14         25.28          0.25          0.05         27.57
Just calling func    0   0         27.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    158.40       0.8730     -1.685      2.723     -102.6      1.034    
                      0.2267      1.484     -99.70      3.548     0.3278    
                       1.760     -1.330      1.530      5547.      4525.    
                     -0.5559      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5274.     -219.0    
                     -0.5672     -6.310     -4.965     -8.492      6.020    
                      -14.69     -3.084      2595.      0.000      4314.    

                       4314.      4254.      2994.      4314.      3825.    
                       4931.    -0.1350E-01 0.6363E-01  0.000     0.7986E-01
                     -0.1168    -0.6782E-01 0.1086     0.1658E-01-0.3182E-01

                     -0.2804    -0.9332      0.000    -0.3694E-01-0.3675E-01
                       0.000    -0.2387E-01-0.3829E-01-0.1385     0.2257E-01
                     -0.3156E-01-0.1274E-01-0.4963     -1.075      4970.    

                     -0.7249    -0.8242     -2.445     -2.445    -0.1852    
                     -0.6251E-01  8.824      8.762    -0.1915E+05 -4.000    
                     -0.4736    -0.7296      9.294      8.809    -0.1957E+05

                      -4.000     0.1078    -0.6482      8.934      8.963    
                     -0.2104E+05 -7.000    -0.5482    -0.6822      9.121    
                       8.794    -0.2109E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    158.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       89
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       90
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      240     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -22.3915       22.3915       153.690       176.082    
   2  0.894146     -0.111886      -1.35484       1.35484       156.791       158.146    
   3  0.721270     -0.326741      -3.95654       3.95654       158.348       162.304    
   4  0.536866     -0.622006      -7.53193       7.53193       154.957       162.488    
   5  0.418107     -0.872017      -10.5593       10.5593       155.616       166.175    
   6  0.391189     -0.938564      -11.3652       11.3652       158.335       169.700    
   7  0.799669     -0.223558      -2.70708       2.70708       158.419       161.126    
   8  0.595070     -0.519076      -6.28555       6.28555       155.759       162.045    
   9  0.384356E-03  -7.86394      -95.2252       95.2252       159.959       255.184    
  10  0.654302     -0.424187      -5.13652       5.13652       159.375       164.512    
  11  0.873355     -0.135413      -1.63973       1.63973       158.097       159.736    
  12  0.303212      -1.19332      -14.4500       14.4500       156.387       170.837    
  13  0.434159     -0.834344      -10.1032       10.1032       159.760       169.863    
  14  0.970825     -0.296089E-01 -0.358537      0.358537       161.207       161.566    
  15  0.405896     -0.901659      -10.9183       10.9183       161.455       172.373    
  16  0.250423      -1.38461      -16.7663       16.7663       158.917       175.683    
  17  0.517030     -0.659654      -7.98781       7.98781       160.107       168.095    
  18  0.165468      -1.79897      -21.7840       21.7840       161.480       183.264    
  19  0.679403     -0.386541      -4.68066       4.68066       155.551       160.231    
  20  0.554013     -0.590567      -7.15123       7.15123       163.261       170.412    
  21  0.211764E-01  -3.85487      -46.6790       46.6790       158.785       205.464    
  22  0.453828     -0.790038      -9.56664       9.56664       161.212       170.778    
  23  0.377409     -0.974426      -11.7994       11.7994       162.484       174.284    
  24  0.496879     -0.699408      -8.46920       8.46920       158.647       167.116    
  25  0.214619      -1.53889      -18.6345       18.6345       162.571       181.205    
  26  0.724154     -0.322751      -3.90822       3.90822       162.816       166.724    
  27  0.385609     -0.952932      -11.5391       11.5391       162.825       174.364    
  28  0.777864     -0.251204      -3.04185       3.04185       158.974       162.015    
  29  0.709283     -0.343500      -4.15947       4.15947       162.947       167.107    
  30  0.191760      -1.65151      -19.9983       19.9983       162.340       182.338    
  31  0.347616      -1.05666      -12.7952       12.7952       161.952       174.747    
  32  0.191581      -1.65244      -20.0096       20.0096       164.985       184.995    
  33  0.770989     -0.260081      -3.14935       3.14935       160.258       163.407    
  34  0.788566E-01  -2.54012      -30.7586       30.7586       158.812       189.570    
  35  0.229474      -1.47197      -17.8242       17.8242       162.078       179.902    
  36  0.339326      -1.08079      -13.0874       13.0874       160.681       173.768    
  37  0.220886      -1.51011      -18.2860       18.2860       152.539       170.825    
  38  0.223644      -1.49770      -18.1358       18.1358       159.182       177.318    
  39  0.138287      -1.97842      -23.9569       23.9569       163.436       187.393    
  40  0.796402     -0.227651      -2.75665       2.75665       165.069       167.825    
  41  0.104384      -2.25968      -27.3627       27.3627       161.050       188.412    
  42  0.919642     -0.837713E-01  -1.01439       1.01439       160.049       161.063    
  43  0.360767      -1.01952      -12.3455       12.3455       161.525       173.870    
  44  0.924300     -0.787181E-01 -0.953204      0.953204       161.324       162.277    
  45  0.561139     -0.577786      -6.99647       6.99647       160.210       167.207    
  46  0.509073E-01  -2.97775      -36.0578       36.0578       161.444       197.502    
  47  0.715469     -0.334817      -4.05434       4.05434       161.557       165.612    
  48  0.294040E-01  -3.52662      -42.7042       42.7042       160.604       203.308    
  49  0.264026E-02  -5.93688      -71.8902       71.8902       154.726       226.617    
  50  0.634029     -0.455661      -5.51764       5.51764       164.031       169.549    
  51  0.319148      -1.14210      -13.8298       13.8298       162.983       176.812    
  52  0.495674     -0.701836      -8.49860       8.49860       161.708       170.207    
  53  0.838343     -0.176328      -2.13518       2.13518       162.606       164.742    
  54  0.240556      -1.42480      -17.2531       17.2531       161.937       179.190    
  55  0.919800     -0.835990E-01  -1.01231       1.01231       165.090       166.102    
  56  0.652899     -0.426332      -5.16250       5.16250       159.336       164.499    
  57  0.777375     -0.251832      -3.04946       3.04946       157.199       160.249    
  58  0.988137     -0.119340E-01 -0.144510      0.144510       161.330       161.474    
  59  0.771111     -0.259922      -3.14743       3.14743       158.817       161.964    
  60  0.980963     -0.192203E-01 -0.232740      0.232740       161.034       161.266    
  61  0.358823      -1.02493      -12.4109       12.4109       156.586       168.997    
  62  0.398479     -0.920100      -11.1416       11.1416       161.872       173.014    
  63  0.524779     -0.644778      -7.80768       7.80768       163.578       171.386    
  64  0.391693E-01  -3.23986      -39.2318       39.2318       156.242       195.473    
  65  0.494448     -0.704313      -8.52859       8.52859       161.736       170.265    
  66  0.224697      -1.49300      -18.0789       18.0789       152.198       170.277    
  67  0.585684     -0.534974      -6.47806       6.47806       161.597       168.075    
  68  0.558887     -0.581807      -7.04516       7.04516       159.061       166.106    
  69  0.540529     -0.615206      -7.44959       7.44959       164.566       172.016    
  70  0.314620      -1.15639      -14.0028       14.0028       160.765       174.768    
  71  0.763547     -0.269781      -3.26680       3.26680       160.242       163.509    
  72  0.314721      -1.15607      -13.9990       13.9990       162.643       176.642    
  73  0.838345     -0.176326      -2.13515       2.13515       170.733       172.868    
  74  0.179413      -1.71806      -20.8042       20.8042       159.455       180.260    
  75  0.640584     -0.445375      -5.39309       5.39309       158.403       163.796    
loop,thermsimp(1:2)       90   22.3915       1.35484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242        161.41          0.85          1.14         25.25          0.10          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    243        210.63          0.86          1.14         25.26          0.16          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       90
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       91
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      242     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -27.5379       27.5379       156.791       184.329    
   2  0.846291     -0.166892      -2.02091       2.02091       158.097       160.118    
   3  0.167054      -1.78944      -21.6684       21.6684       155.551       177.219    
   4  0.786038     -0.240750      -2.91527       2.91527       157.199       160.114    
   5  0.680218     -0.385341      -4.66614       4.66614       160.049       164.715    
   6  0.843894     -0.169729      -2.05526       2.05526       158.419       160.474    
   7  0.295559      -1.21889      -14.7596       14.7596       161.034       175.793    
   8  0.383493     -0.958433      -11.6058       11.6058       161.330       172.935    
   9  0.867247     -0.142431      -1.72471       1.72471       161.207       162.932    
  10  0.241960      -1.41898      -17.1826       17.1826       158.817       175.999    
  11  0.486925     -0.719645      -8.71425       8.71425       158.974       167.688    
  12  0.750166     -0.287460      -3.48088       3.48088       155.759       159.240    
  13  0.507045     -0.679156      -8.22396       8.22396       161.324       169.548    
  14  0.237743      -1.43656      -17.3955       17.3955       158.348       175.743    
  15  0.256837E-01  -3.66190      -44.3423       44.3423       154.957       199.299    
  16  0.776460     -0.253010      -3.06372       3.06372       160.258       163.322    
  17  0.316300      -1.15106      -13.9383       13.9383       160.242       174.180    
  18  0.493161     -0.706919      -8.56015       8.56015       158.403       166.963    
  19  0.807271     -0.214096      -2.59251       2.59251       159.336       161.929    
  20  0.338915      -1.08201      -13.1021       13.1021       159.375       172.477    
  21  0.132986      -2.01751      -24.4302       24.4302       162.606       187.037    
  22  0.409975     -0.891659      -10.7972       10.7972       161.557       172.354    
  23  0.525021     -0.644317      -7.80210       7.80210       165.090       172.892    
  24  0.393064     -0.933783      -11.3073       11.3073       159.061       170.368    
  25  0.176068      -1.73689      -21.0321       21.0321       155.616       176.648    
  26  0.965490     -0.351191E-01 -0.425261      0.425261       162.816       163.241    
  27  0.387767     -0.947350      -11.4715       11.4715       162.947       174.419    
  28  0.936248     -0.658753E-01 -0.797690      0.797690       158.647       159.445    
  29  0.914720     -0.891370E-01  -1.07937       1.07937       160.210       161.290    
  30  0.332171      -1.10211      -13.3455       13.3455       165.069       178.414    
  31  0.845314E-01  -2.47063      -29.9171       29.9171       161.597       191.514    
  32  0.687741     -0.374343      -4.53296       4.53296       160.107       164.640    
  33  0.899776     -0.105610      -1.27884       1.27884       156.586       157.865    
  34  0.558791     -0.581980      -7.04725       7.04725       164.031       171.078    
  35  0.882799     -0.124658      -1.50950       1.50950       158.335       159.844    
  36  0.235569      -1.44575      -17.5067       17.5067       159.760       177.266    
  37  0.533400     -0.628484      -7.61037       7.61037       161.708       169.318    
  38  0.147169      -1.91617      -23.2031       23.2031       161.736       184.939    
  39  0.966208E-01  -2.33696      -28.2985       28.2985       152.198       180.497    
  40  0.952887     -0.482588E-01 -0.584370      0.584370       163.261       163.845    
  41  0.155551      -1.86078      -22.5323       22.5323       161.212       183.744    
  42  0.645067     -0.438401      -5.30864       5.30864       152.539       157.847    
  43  0.394254     -0.930759      -11.2706       11.2706       156.387       167.658    
  44  0.546893     -0.603501      -7.30786       7.30786       163.578       170.886    
  45  0.390314     -0.940803      -11.3923       11.3923       164.566       175.958    
  46  0.311561      -1.16616      -14.1212       14.1212       161.455       175.576    
  47  0.752427E-01  -2.58704      -31.3267       31.3267       170.733       202.060    
  48  0.144673      -1.93328      -23.4103       23.4103       161.872       185.282    
  49  0.297567      -1.21212      -14.6776       14.6776       160.681       175.358    
  50  0.544131     -0.608565      -7.36917       7.36917       161.525       168.894    
  51  0.750603E-01  -2.58946      -31.3560       31.3560       162.484       193.840    
  52  0.127547      -2.05927      -24.9359       24.9359       162.825       187.761    
  53  0.839209     -0.175296      -2.12267       2.12267       161.952       164.075    
  54  0.718305     -0.330861      -4.00643       4.00643       160.765       164.771    
  55  0.246952      -1.39856      -16.9353       16.9353       158.917       175.852    
  56  0.550710     -0.596548      -7.22365       7.22365       153.690       160.914    
  57  0.588510     -0.530162      -6.41978       6.41978       162.643       169.063    
  58  0.361548      -1.01736      -12.3193       12.3193       162.983       175.302    
  59  0.962524     -0.381965E-01 -0.462525      0.462525       159.182       159.644    
  60  0.510442     -0.672478      -8.14309       8.14309       161.937       170.080    
  61  0.177498      -1.72880      -20.9341       20.9341       162.078       183.012    
  62  0.775349     -0.254441      -3.08106       3.08106       159.455       162.536    
  63  0.313518E-01  -3.46248      -41.9275       41.9275       162.571       204.498    
  64  0.136553      -1.99105      -24.1098       24.1098       162.340       186.450    
  65  0.694627E-01  -2.66696      -32.2945       32.2945       161.480       193.774    
  66  0.784048     -0.243285      -2.94596       2.94596       164.985       167.931    
  67  0.561706     -0.576776      -6.98424       6.98424       163.436       170.420    
  68  0.992642E-01  -2.30997      -27.9716       27.9716       161.050       189.021    
  69  0.111580      -2.19301      -26.5554       26.5554       158.812       185.367    
  70  0.655988     -0.421613      -5.10535       5.10535       156.242       161.347    
  71  0.739953     -0.301169      -3.64688       3.64688       161.444       165.091    
  72  0.899949     -0.105417      -1.27650       1.27650       160.604       161.881    
  73  0.308570      -1.17581      -14.2380       14.2380       158.785       173.023    
  74  0.826728     -0.190280      -2.30411       2.30411       154.726       157.031    
  75  0.173576E-01  -4.05373      -49.0870       49.0870       161.413       210.500    
loop,thermsimp(1:2)       91   27.5379       2.02091    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244        159.96          0.86          1.14         25.22          0.11          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    245        164.83          0.86          1.14         25.21          0.16          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    159.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       91
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       92
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      244     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -18.4107       18.4107       154.726       173.137    
   2  0.389473     -0.942961      -11.4184       11.4184       152.539       163.957    
   3  0.919121     -0.843378E-01  -1.02125       1.02125       156.586       157.608    
   4  0.970518     -0.299250E-01 -0.362365      0.362365       155.759       156.122    
   5  0.713317     -0.337830      -4.09081       4.09081       158.647       162.738    
   6  0.639607     -0.446902      -5.41158       5.41158       159.182       164.593    
   7  0.712661     -0.338749      -4.10194       4.10194       158.335       162.436    
   8  0.212311      -1.54970      -18.7655       18.7655       157.199       175.965    
   9  0.831769     -0.184200      -2.23050       2.23050       158.097       160.327    
  10  0.794875     -0.229571      -2.77989       2.77989       158.419       161.199    
  11  0.909815     -0.945137E-01  -1.14448       1.14448       153.690       154.835    
  12  0.753651E-01  -2.58541      -31.3070       31.3070       160.210       191.517    
  13  0.676081     -0.391442      -4.74001       4.74001       156.242       160.982    
  14  0.597437     -0.515107      -6.23748       6.23748       160.604       166.842    
  15  0.146947      -1.91768      -23.2214       23.2214       159.336       182.558    
  16  0.854910     -0.156760      -1.89822       1.89822       159.455       161.354    
  17  0.984999     -0.151146E-01 -0.183024      0.183024       161.207       161.390    
  18  0.533419     -0.628448      -7.60993       7.60993       162.816       170.426    
  19  0.383774     -0.957703      -11.5969       11.5969       160.258       171.855    
  20  0.691729     -0.368561      -4.46294       4.46294       163.261       167.724    
  21  0.313732E-01  -3.46180      -41.9193       41.9193       161.952       203.871    
  22  0.415635     -0.877947      -10.6311       10.6311       160.107       170.739    
  23  0.288746      -1.24221      -15.0420       15.0420       160.049       175.091    
  24  0.176464      -1.73464      -21.0049       21.0049       160.765       181.770    
  25  0.881312     -0.126344      -1.52991       1.52991       161.444       162.974    
  26  0.962783     -0.379267E-01 -0.459258      0.459258       158.403       158.862    
  27  0.415450     -0.878393      -10.6365       10.6365       156.387       167.024    
  28  0.271836      -1.30256      -15.7728       15.7728       158.974       174.746    
  29  0.926655     -0.761736E-01 -0.922393      0.922393       164.985       165.908    
  30  0.277790      -1.28089      -15.5104       15.5104       161.525       177.035    
  31  0.189974      -1.66087      -20.1116       20.1116       162.643       182.755    
  32  0.410540     -0.890281      -10.7805       10.7805       161.708       172.489    
  33  0.952387     -0.487839E-01 -0.590729      0.590729       161.324       161.914    
  34  0.896015     -0.109798      -1.32955       1.32955       161.937       163.266    
  35  0.121549E-01  -4.41002      -53.4014       53.4014       159.061       212.463    
  36  0.723911     -0.323087      -3.91230       3.91230       163.436       167.348    
  37  0.759053     -0.275683      -3.33827       3.33827       163.578       166.916    
  38  0.969929     -0.305320E-01 -0.369715      0.369715       164.031       164.401    
  39  0.852636     -0.159422      -1.93046       1.93046       161.557       163.488    
  40  0.730471     -0.314065      -3.80305       3.80305       159.375       163.178    
  41  0.528358     -0.637981      -7.72537       7.72537       165.090       172.815    
  42  0.404403     -0.905344      -10.9629       10.9629       161.330       172.293    
  43  0.232822      -1.45748      -17.6488       17.6488       158.785       176.433    
  44  0.847643     -0.165296      -2.00158       2.00158       160.242       162.243    
  45  0.429393E-01  -3.14797      -38.1190       38.1190       162.947       201.066    
  46  0.673157     -0.395777      -4.79250       4.79250       162.983       167.775    
  47  0.806068E-01  -2.51817      -30.4928       30.4928       160.681       191.174    
  48  0.926018     -0.768619E-01 -0.930728      0.930728       161.455       162.385    
  49  0.167973      -1.78395      -21.6020       21.6020       158.348       179.950    
  50  0.780773     -0.247471      -2.99665       2.99665       161.034       164.030    
  51  0.565702E-01  -2.87227      -34.7806       34.7806       158.917       193.698    
  52  0.646011     -0.436939      -5.29094       5.29094       164.566       169.857    
  53  0.455316     -0.786763      -9.52699       9.52699       158.817       168.344    
  54  0.410066     -0.891437      -10.7945       10.7945       155.616       166.410    
  55  0.934064     -0.682104E-01 -0.825966      0.825966       155.551       156.377    
  56  0.511079     -0.671231      -8.12800       8.12800       159.760       167.888    
  57  0.578130     -0.547957      -6.63526       6.63526       165.069       171.704    
  58  0.458047     -0.780783      -9.45458       9.45458       152.198       161.653    
  59  0.223630      -1.49776      -18.1366       18.1366       162.078       180.215    
  60  0.952824E-01  -2.35091      -28.4674       28.4674       161.212       189.679    
  61  0.995385     -0.462583E-02 -0.560146E-01  0.560146E-01   156.791       156.847    
  62  0.675298     -0.392602      -4.75405       4.75405       161.736       166.490    
  63  0.728172     -0.317218      -3.84122       3.84122       161.872       165.713    
  64  0.240868      -1.42350      -17.2373       17.2373       158.812       176.049    
  65  0.188028      -1.67116      -20.2363       20.2363       162.340       182.576    
  66  0.645358     -0.437951      -5.30319       5.30319       162.606       167.910    
  67  0.170606      -1.76840      -21.4137       21.4137       162.825       184.238    
  68  0.827167     -0.189749      -2.29769       2.29769       161.050       163.347    
  69  0.457642     -0.781668      -9.46529       9.46529       161.597       171.063    
  70  0.819756E-01  -2.50133      -30.2889       30.2889       161.480       191.768    
  71  0.965811     -0.347876E-01 -0.421247      0.421247       162.484       162.905    
  72  0.806837     -0.214633      -2.59901       2.59901       154.957       157.556    
  73  0.556186     -0.586653      -7.10383       7.10383       170.733       177.837    
  74  0.506643     -0.679949      -8.23357       8.23357       162.571       170.804    
  75  0.296056E-01  -3.51979      -42.6215       42.6215       159.959       202.581    
loop,thermsimp(1:2)       92   18.4107       11.4184    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246        160.02          0.85          1.14         25.26          0.08          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    247        514.71          0.85          1.14         25.23          0.12          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       92
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       93
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      246     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -23.0864       23.0864       153.690       176.777    
   2  0.695074     -0.363738      -4.40453       4.40453       155.759       160.164    
   3  0.541180     -0.614003      -7.43502       7.43502       155.551       162.986    
   4  0.189791      -1.66183      -20.1233       20.1233       156.791       176.915    
   5  0.245553      -1.40424      -17.0041       17.0041       154.957       171.961    
   6  0.641474     -0.443986      -5.37627       5.37627       156.586       161.963    
   7  0.308462      -1.17616      -14.2422       14.2422       158.403       172.645    
   8  0.478005     -0.738133      -8.93812       8.93812       158.097       167.035    
   9  0.395759     -0.926951      -11.2245       11.2245       156.242       167.466    
  10  0.438776E-01  -3.12635      -37.8573       37.8573       158.419       196.276    
  11  0.294628E-01  -3.52463      -42.6801       42.6801       159.455       202.135    
  12  0.331052E-01  -3.40806      -41.2686       41.2686       161.207       202.476    
  13  0.916325E-01  -2.38997      -28.9404       28.9404       152.198       181.138    
  14  0.985908     -0.141919E-01 -0.171851      0.171851       161.324       161.495    
  15  0.511724     -0.669970      -8.11272       8.11272       160.242       168.355    
  16  0.185695      -1.68365      -20.3875       20.3875       161.455       181.842    
  17  0.830711     -0.185474      -2.24592       2.24592       158.335       160.580    
  18  0.765179E-04  -9.47799      -114.770       114.770       158.647       273.417    
  19  0.129365      -2.04512      -24.7645       24.7645       162.484       187.249    
  20  0.796363     -0.227700      -2.75724       2.75724       161.444       164.202    
  21  0.589256     -0.528895      -6.40444       6.40444       159.375       165.780    
  22  0.770995     -0.260073      -3.14925       3.14925       161.937       165.086    
  23  0.685430     -0.377709      -4.57372       4.57372       161.050       165.623    
  24  0.487688     -0.718080      -8.69530       8.69530       161.557       170.252    
  25  0.114898      -2.16371      -26.2006       26.2006       152.539       178.739    
  26  0.165093      -1.80124      -21.8114       21.8114       161.034       182.845    
  27  0.302275      -1.19642      -14.4876       14.4876       164.031       178.519    
  28  0.123669      -2.09014      -25.3097       25.3097       159.182       184.492    
  29  0.960526     -0.402739E-01 -0.487680      0.487680       161.872       162.360    
  30  0.744557     -0.294966      -3.57177       3.57177       164.985       168.557    
  31  0.418436     -0.871232      -10.5498       10.5498       155.616       166.166    
  32  0.624411     -0.470947      -5.70274       5.70274       161.736       167.439    
  33  0.920055     -0.833222E-01  -1.00896       1.00896       160.604       161.613    
  34  0.330507      -1.10713      -13.4063       13.4063       163.578       176.984    
  35  0.889566     -0.117022      -1.41703       1.41703       156.387       157.804    
  36  0.269410      -1.31152      -15.8813       15.8813       163.436       179.317    
  37  0.458780     -0.779184      -9.43521       9.43521       163.261       172.696    
  38  0.952588     -0.485730E-01 -0.588174      0.588174       162.983       163.571    
  39  0.213836      -1.54254      -18.6788       18.6788       159.760       178.438    
  40  0.460697     -0.775015      -9.38473       9.38473       162.606       171.991    
  41  0.571693     -0.559153      -6.77084       6.77084       158.817       165.587    
  42  0.201363      -1.60265      -19.4066       19.4066       164.566       183.973    
  43  0.707817     -0.345570      -4.18454       4.18454       162.816       167.000    
  44  0.927118     -0.756745E-01 -0.916350      0.916350       160.107       161.024    
  45  0.288916      -1.24162      -15.0349       15.0349       162.571       177.606    
  46  0.702737     -0.352773      -4.27176       4.27176       161.597       165.869    
  47  0.253190      -1.37362      -16.6333       16.6333       165.069       181.702    
  48  0.709086     -0.343779      -4.16285       4.16285       160.258       164.421    
  49  0.399421     -0.917738      -11.1130       11.1130       161.330       172.443    
  50  0.837301     -0.177572      -2.15024       2.15024       161.708       163.858    
  51  0.906694     -0.979507E-01  -1.18609       1.18609       165.090       166.276    
  52  0.479547     -0.734913      -8.89913       8.89913       154.726       163.626    
  53  0.573668     -0.555704      -6.72907       6.72907       158.974       165.703    
  54  0.616113     -0.484325      -5.86474       5.86474       160.049       165.914    
  55  0.899004     -0.106467      -1.28922       1.28922       157.199       158.488    
  56  0.668105     -0.403310      -4.88372       4.88372       158.812       163.695    
  57  0.464354     -0.767107      -9.28897       9.28897       158.785       168.074    
  58  0.298472E-01  -3.51166      -42.5231       42.5231       161.525       204.048    
  59  0.458507     -0.779779      -9.44242       9.44242       170.733       180.176    
  60  0.372295E-01  -3.29065      -39.8468       39.8468       158.348       198.195    
  61  0.349332      -1.05173      -12.7355       12.7355       162.078       174.814    
  62  0.396867     -0.924153      -11.1907       11.1907       160.765       171.956    
  63  0.599776     -0.511199      -6.19015       6.19015       159.336       165.527    
  64  0.175124      -1.74226      -21.0972       21.0972       162.340       183.437    
  65  0.723227     -0.324033      -3.92374       3.92374       162.643       166.567    
  66  0.738639     -0.302946      -3.66840       3.66840       162.825       166.493    
  67  0.691263     -0.369235      -4.47111       4.47111       161.212       165.683    
  68  0.575263     -0.552928      -6.69546       6.69546       160.681       167.376    
  69  0.312385      -1.16352      -14.0892       14.0892       160.210       174.300    
  70  0.708595     -0.344472      -4.17124       4.17124       161.480       165.651    
  71  0.674476     -0.393819      -4.76879       4.76879       158.917       163.686    
  72  0.196387      -1.62767      -19.7096       19.7096       162.947       182.657    
  73  0.800316     -0.222748      -2.69728       2.69728       159.959       162.656    
  74  0.992803     -0.722339E-02 -0.874688E-01  0.874688E-01   161.952       162.039    
  75  0.204374      -1.58780      -19.2269       19.2269       160.023       179.250    
loop,thermsimp(1:2)       93   23.0864       4.40453    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248        184.05          0.85          1.14         25.20          0.18          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       93
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       94
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      247     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -2.07838       2.07838       156.387       158.465    
   2  0.478368     -0.737375      -8.92895       8.92895       157.199       166.128    
   3  0.283498      -1.26055      -15.2641       15.2641       155.759       171.024    
   4  0.520516     -0.652935      -7.90645       7.90645       158.335       166.241    
   5  0.703282E-01  -2.65458      -32.1446       32.1446       160.107       192.252    
   6  0.914137     -0.897748E-01  -1.08709       1.08709       161.324       162.411    
   7  0.479535     -0.734938      -8.89944       8.89944       160.604       169.504    
   8  0.921875     -0.813456E-01 -0.985022      0.985022       156.586       157.571    
   9  0.739547     -0.301718      -3.65353       3.65353       161.952       165.605    
  10  0.790753     -0.234770      -2.84285       2.84285       161.872       164.715    
  11  0.212247E-01  -3.85259      -46.6513       46.6513       159.959       206.610    
  12  0.286971      -1.24837      -15.1167       15.1167       155.551       170.667    
  13  0.695666     -0.362886      -4.39422       4.39422       162.983       167.377    
  14  0.534590     -0.626255      -7.58338       7.58338       154.726       162.310    
  15  0.945577     -0.559603E-01 -0.677629      0.677629       158.917       159.595    
  16  0.619446     -0.478930      -5.79941       5.79941       158.812       164.611    
  17  0.291083E-01  -3.53673      -42.8266       42.8266       161.708       204.535    
  18  0.372584E-01  -3.28988      -39.8374       39.8374       161.444       201.282    
  19  0.713241     -0.337936      -4.09210       4.09210       160.258       164.350    
  20  0.280281      -1.27196      -15.4023       15.4023       161.937       177.339    
  21  0.254796      -1.36729      -16.5567       16.5567       159.336       175.893    
  22  0.498598     -0.695955      -8.42738       8.42738       158.817       167.244    
  23  0.515261E-01  -2.96567      -35.9115       35.9115       161.050       196.961    
  24  0.347627      -1.05662      -12.7948       12.7948       161.480       174.274    
  25  0.696212     -0.362102      -4.38472       4.38472       161.212       165.597    
  26  0.707749E-01  -2.64825      -32.0679       32.0679       158.974       191.042    
  27  0.364523E-01  -3.31175      -40.1023       40.1023       159.375       199.478    
  28  0.895087E-02  -4.71600      -57.1065       57.1065       161.597       218.704    
  29  0.333194      -1.09903      -13.3083       13.3083       160.049       173.357    
  30  0.451375     -0.795457      -9.63226       9.63226       155.616       165.248    
  31  0.849961E-01  -2.46515      -29.8507       29.8507       165.090       194.940    
  32  0.524791     -0.644756      -7.80741       7.80741       162.825       170.632    
  33  0.641068     -0.444619      -5.38394       5.38394       162.643       168.027    
  34  0.757376     -0.277895      -3.36506       3.36506       162.816       166.181    
  35  0.760597     -0.273651      -3.31367       3.31367       158.097       161.410    
  36  0.709070     -0.343801      -4.16312       4.16312       160.681       164.844    
  37  0.794718     -0.229768      -2.78228       2.78228       161.736       164.519    
  38  0.869679     -0.139632      -1.69081       1.69081       156.242       157.932    
  39  0.229100E-01  -3.77618      -45.7262       45.7262       158.785       204.511    
  40  0.935590     -0.665776E-01 -0.806194      0.806194       160.242       161.048    
  41  0.889453     -0.117149      -1.41856       1.41856       164.985       166.404    
  42  0.529054     -0.636665      -7.70944       7.70944       161.557       169.267    
  43  0.907902     -0.966186E-01  -1.16996       1.16996       160.765       161.935    
  44  0.693802     -0.365568      -4.42670       4.42670       154.957       159.383    
  45  0.883803     -0.123521      -1.49573       1.49573       162.606       164.102    
  46  0.275134E-01  -3.59308      -43.5089       43.5089       161.330       204.839    
  47  0.324767      -1.12465      -13.6185       13.6185       158.403       172.021    
  48  0.853326     -0.158614      -1.92067       1.92067       163.261       165.182    
  49  0.325639      -1.12197      -13.5860       13.5860       160.210       173.796    
  50  0.773280     -0.257115      -3.11343       3.11343       162.078       165.192    
  51  0.108890      -2.21741      -26.8509       26.8509       153.690       180.541    
  52  0.188532E-01  -3.97107      -48.0861       48.0861       156.791       204.878    
  53  0.970927     -0.295045E-01 -0.357273      0.357273       163.578       163.935    
  54  0.549714     -0.598357      -7.24556       7.24556       162.571       169.816    
  55  0.937888E-01  -2.36671      -28.6587       28.6587       159.760       188.418    
  56  0.293516      -1.22582      -14.8436       14.8436       164.031       178.875    
  57  0.598789     -0.512846      -6.21010       6.21010       152.539       158.749    
  58  0.173412      -1.75209      -21.2162       21.2162       160.023       181.239    
  59  0.552776     -0.592802      -7.17829       7.17829       163.436       170.614    
  60  0.586717     -0.533213      -6.45673       6.45673       170.733       177.190    
  61  0.902886     -0.102159      -1.23706       1.23706       152.198       153.435    
  62  0.423679     -0.858778      -10.3990       10.3990       165.069       175.468    
  63  0.796344E-01  -2.53031      -30.6397       30.6397       161.455       192.094    
  64  0.894023     -0.112024      -1.35651       1.35651       162.947       164.304    
  65  0.840662     -0.173566      -2.10173       2.10173       161.034       163.135    
  66  0.730459     -0.314083      -3.80325       3.80325       162.340       166.143    
  67  0.652850     -0.426409      -5.16342       5.16342       164.566       169.730    
  68  0.856696     -0.154672      -1.87294       1.87294       159.182       161.055    
  69  0.562214     -0.575873      -6.97330       6.97330       162.484       169.457    
  70  0.680885     -0.384362      -4.65428       4.65428       158.419       163.073    
  71  0.353093      -1.04102      -12.6058       12.6058       158.348       170.954    
  72  0.588480     -0.530213      -6.42040       6.42040       159.455       165.876    
  73  0.641636     -0.443734      -5.37322       5.37322       161.207       166.580    
  74  0.729310     -0.315656      -3.82231       3.82231       161.525       165.347    
  75  0.852439     -0.159654      -1.93326       1.93326       184.055       185.988    
loop,thermsimp(1:2)       94   2.07838       8.92895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249        158.20          0.85          1.14         25.26          0.21          0.05         27.52
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    158.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       94
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       95
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      248     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -3.57025       3.57025       152.198       155.768    
   2  0.739179     -0.302215      -3.65955       3.65955       156.586       160.246    
   3  0.131167      -2.03128      -24.5970       24.5970       156.242       180.838    
   4  0.523356     -0.647493      -7.84056       7.84056       156.387       164.228    
   5  0.660412     -0.414891      -5.02396       5.02396       152.539       157.563    
   6  0.433074E-01  -3.13943      -38.0157       38.0157       154.957       192.972    
   7  0.480352     -0.733236      -8.87883       8.87883       158.917       167.796    
   8  0.808114     -0.213053      -2.57987       2.57987       160.242       162.822    
   9  0.723804     -0.323235      -3.91408       3.91408       159.182       163.096    
  10  0.322682      -1.13109      -13.6964       13.6964       158.097       171.793    
  11  0.898907     -0.106576      -1.29054       1.29054       160.765       162.056    
  12  0.359972      -1.02173      -12.3722       12.3722       154.726       167.099    
  13  0.879118     -0.128836      -1.56009       1.56009       161.324       162.884    
  14  0.963559     -0.371220E-01 -0.449513      0.449513       158.419       158.868    
  15  0.662848     -0.411210      -4.97938       4.97938       161.034       166.013    
  16  0.648402     -0.433244      -5.24619       5.24619       163.578       168.824    
  17  0.375343     -0.979916      -11.8659       11.8659       162.606       174.472    
  18  0.812441     -0.207712      -2.51521       2.51521       162.947       165.462    
  19  0.248177E-01  -3.69620      -44.7576       44.7576       160.258       205.015    
  20  0.653530     -0.425366      -5.15080       5.15080       161.736       166.887    
  21  0.712244     -0.339334      -4.10903       4.10903       158.812       162.921    
  22  0.358229      -1.02658      -12.4310       12.4310       161.872       174.303    
  23  0.325518      -1.12234      -13.5905       13.5905       160.681       174.271    
  24  0.770349     -0.260912      -3.15940       3.15940       163.261       166.420    
  25  0.633518E-01  -2.75905      -33.4096       33.4096       162.078       195.488    
  26  0.168796      -1.77907      -21.5429       21.5429       155.616       177.159    
  27  0.562007     -0.576241      -6.97775       6.97775       161.525       168.502    
  28  0.156316      -1.85588      -22.4730       22.4730       161.212       183.685    
  29  0.967732     -0.328002E-01 -0.397181      0.397181       161.952       162.349    
  30  0.538071     -0.619766      -7.50480       7.50480       159.455       166.960    
  31  0.967495     -0.330453E-01 -0.400149      0.400149       157.199       157.599    
  32  0.771619     -0.259265      -3.13946       3.13946       162.340       165.480    
  33  0.246044      -1.40225      -16.9799       16.9799       162.816       179.796    
  34  0.700731     -0.355631      -4.30637       4.30637       158.335       162.641    
  35  0.382714     -0.960468      -11.6304       11.6304       164.985       176.616    
  36  0.580395     -0.544047      -6.58791       6.58791       161.207       167.795    
  37  0.305131      -1.18701      -14.3737       14.3737       158.817       173.190    
  38  0.624250     -0.471204      -5.70585       5.70585       162.983       168.688    
  39  0.575432     -0.552634      -6.69189       6.69189       162.643       169.335    
  40  0.701335     -0.354770      -4.29594       4.29594       161.557       165.853    
  41  0.290211      -1.23715      -14.9807       14.9807       162.484       177.465    
  42  0.140976      -1.95916      -23.7237       23.7237       160.604       184.328    
  43  0.275714      -1.28839      -15.6013       15.6013       164.566       180.167    
  44  0.856479     -0.154925      -1.87601       1.87601       162.571       164.447    
  45  0.994286     -0.573084E-02 -0.693952E-01  0.693952E-01   163.436       163.505    
  46  0.913008     -0.910102E-01  -1.10205       1.10205       162.825       163.927    
  47  0.204063      -1.58933      -19.2453       19.2453       155.551       174.796    
  48  0.388833     -0.944605      -11.4383       11.4383       158.348       169.786    
  49  0.781619     -0.246387      -2.98353       2.98353       155.759       158.743    
  50  0.373421     -0.985049      -11.9281       11.9281       158.403       170.331    
  51  0.834918     -0.180422      -2.18474       2.18474       160.049       162.234    
  52  0.174969      -1.74315      -21.1079       21.1079       160.210       181.318    
  53  0.531353     -0.632329      -7.65693       7.65693       161.480       169.137    
  54  0.339530      -1.08019      -13.0802       13.0802       165.069       178.149    
  55  0.929760     -0.728288E-01 -0.881891      0.881891       159.336       160.218    
  56  0.223523      -1.49824      -18.1423       18.1423       170.733       188.875    
  57  0.557869     -0.583631      -7.06724       7.06724       161.937       169.004    
  58  0.521577     -0.650898      -7.88179       7.88179       164.031       171.913    
  59  0.856336     -0.155092      -1.87803       1.87803       153.690       155.568    
  60  0.645536     -0.437674      -5.29984       5.29984       160.023       165.323    
  61  0.438677     -0.823992      -9.97780       9.97780       184.055       194.033    
  62  0.346732      -1.05920      -12.8260       12.8260       159.760       172.586    
  63  0.902848     -0.102201      -1.23756       1.23756       158.974       160.211    
  64  0.578219     -0.547803      -6.63339       6.63339       161.455       168.088    
  65  0.602211     -0.507147      -6.14109       6.14109       160.107       166.249    
  66  0.432652     -0.837821      -10.1453       10.1453       165.090       175.235    
  67  0.123601      -2.09070      -25.3164       25.3164       161.050       186.366    
  68  0.840915     -0.173264      -2.09808       2.09808       159.375       161.473    
  69  0.638713     -0.448300      -5.42850       5.42850       161.444       166.873    
  70  0.127935      -2.05623      -24.8991       24.8991       158.785       183.684    
  71  0.555419     -0.588033      -7.12054       7.12054       161.708       168.829    
  72  0.860781     -0.149915      -1.81534       1.81534       161.330       163.145    
  73  0.170020      -1.77184      -21.4554       21.4554       156.791       178.247    
  74  0.355131      -1.03527      -12.5362       12.5362       159.959       172.495    
  75  0.464062E-01  -3.07032      -37.1788       37.1788       158.205       195.384    
loop,thermsimp(1:2)       95   3.57025       3.65955    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250        158.66          0.85          1.15         25.28          0.34          0.06         27.68
Just calling func    0   0         27.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    251        162.01          0.85          1.14         25.22          0.52          0.05         27.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       95
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   4.13263    

hmean,hstd :    160.529       4.13263    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    160.529       4.13263    
h(1),h(best1),h(np1) :    153.690       152.198       158.663    
htherm(1),htherm(best1),htherm(np1) :    155.568       155.768       205.015    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    252        160.47          0.86          1.15         25.25          0.11          0.05         27.42

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
   0.82798      -1.6485       2.5404      -102.61      0.98147      0.22253    
    1.5027      -99.703       3.5099      0.38026       1.7965      -1.3825    
    1.5304       5285.0       4607.7     -0.60834       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       0.0000       0.0000       5142.5    

   -58.502     -0.56724      -6.3926      -5.0702      -8.4125       5.9643    
   -14.797      -3.0410       2116.2       0.0000       3684.1       3684.1    
    3650.5       3652.0       3684.1       3266.6       4211.4     -0.19006E-01
   0.48097E-01   0.0000      0.69696E-01 -0.11032     -0.67115E-01  0.10169    

   0.46640E-02 -0.37957E-01 -0.25900     -0.95220       0.0000     -0.52680E-01
  -0.33675E-01   0.0000     -0.37132E-01 -0.44368E-01 -0.12650      0.68280E-02
  -0.47304E-01 -0.11793E-01 -0.48309      -1.0730       4959.3     -0.68469    
  -0.75236      -2.4715      -2.4715     -0.13368      0.77370E-01   9.1069    

    8.7745      -19542.      -4.0000     -0.52607     -0.69503       9.2886    
    8.7933      -19709.      -4.0000      0.60308E-01 -0.81936       8.9379    
    8.9492      -20655.      -7.0000     -0.49214     -0.71094       9.1346    
    8.7937      -20570.      -7.0000    
 Function value at centroid =   160.472    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        1
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      251     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -47.1000       47.1000       153.690       200.790    
   2  0.977100     -0.231667E-01 -0.280527      0.280527       152.198       152.479    
   3  0.491467     -0.710361      -8.60182       8.60182       152.539       161.140    
   4  0.802113E-01  -2.52309      -30.5523       30.5523       157.199       187.752    
   5  0.891044     -0.115361      -1.39692       1.39692       155.759       157.156    
   6  0.397551     -0.922433      -11.1698       11.1698       158.419       169.589    
   7  0.121203      -2.11029      -25.5537       25.5537       158.974       184.527    
   8  0.789985E-01  -2.53833      -30.7368       30.7368       159.336       190.073    
   9  0.921855     -0.813679E-01 -0.985291      0.985291       156.586       157.572    
  10  0.252671      -1.37567      -16.6581       16.6581       159.375       176.033    
  11  0.787271     -0.239182      -2.89628       2.89628       160.765       163.661    
  12  0.634653     -0.454676      -5.50572       5.50572       160.049       165.555    
  13  0.706648     -0.347222      -4.20454       4.20454       161.952       166.156    
  14  0.349740E-01  -3.35315      -40.6036       40.6036       158.335       198.938    
  15  0.686787     -0.375731      -4.54976       4.54976       160.242       164.792    
  16  0.309348      -1.17329      -14.2075       14.2075       161.324       175.531    
  17  0.703748     -0.351336      -4.25436       4.25436       158.812       163.066    
  18  0.985092     -0.150207E-01 -0.181888      0.181888       159.182       159.364    
  19  0.440741     -0.819298      -9.92096       9.92096       161.330       171.251    
  20  0.796112     -0.228015      -2.76106       2.76106       163.436       166.197    
  21  0.451938     -0.794210      -9.61717       9.61717       162.825       172.442    
  22  0.230902      -1.46576      -17.7490       17.7490       156.387       174.136    
  23  0.760212     -0.274159      -3.31981       3.31981       162.571       165.891    
  24  0.250434E-02  -5.98973      -72.5302       72.5302       160.023       232.553    
  25  0.627913E-01  -2.76794      -33.5172       33.5172       162.947       196.464    
  26  0.263128      -1.33511      -16.1670       16.1670       162.340       178.507    
  27  0.177986      -1.72605      -20.9009       20.9009       161.557       182.458    
  28  0.919776     -0.836247E-01  -1.01262       1.01262       161.034       162.046    
  29  0.854272     -0.157506      -1.90726       1.90726       160.107       162.015    
  30  0.648187     -0.433576      -5.25021       5.25021       163.261       168.511    
  31  0.853797     -0.158061      -1.91398       1.91398       161.444       163.358    
  32  0.484551     -0.724533      -8.77344       8.77344       161.736       170.510    
  33  0.423817     -0.858454      -10.3951       10.3951       159.455       169.851    
  34  0.932015     -0.704065E-01 -0.852559      0.852559       154.726       155.579    
  35  0.161906      -1.82074      -22.0475       22.0475       161.207       183.255    
  36  0.812519     -0.207617      -2.51405       2.51405       158.917       161.431    
  37  0.346838      -1.05890      -12.8223       12.8223       161.455       174.277    
  38  0.477141     -0.739943      -8.96003       8.96003       161.525       170.485    
  39  0.931946     -0.704808E-01 -0.853459      0.853459       162.983       163.836    
  40  0.189794      -1.66182      -20.1231       20.1231       163.578       183.701    
  41  0.361902      -1.01638      -12.3075       12.3075       161.708       174.016    
  42  0.775630E-02  -4.85925      -58.8411       58.8411       161.937       220.778    
  43  0.292497      -1.22930      -14.8857       14.8857       161.480       176.365    
  44  0.264300      -1.33067      -16.1132       16.1132       162.643       178.756    
  45  0.529597     -0.635638      -7.69700       7.69700       158.348       166.045    
  46  0.163272      -1.81234      -21.9457       21.9457       158.403       180.348    
  47  0.212593      -1.54838      -18.7495       18.7495       158.097       176.846    
  48  0.359173      -1.02395      -12.3991       12.3991       164.031       176.430    
  49  0.993707     -0.631295E-02 -0.764441E-01  0.764441E-01   159.959       160.036    
  50  0.261479      -1.34140      -16.2432       16.2432       159.760       176.003    
  51  0.441392     -0.817822      -9.90308       9.90308       158.817       168.720    
  52  0.624656     -0.470554      -5.69798       5.69798       160.681       166.379    
  53  0.646784     -0.435743      -5.27645       5.27645       161.872       167.148    
  54  0.343734      -1.06789      -12.9312       12.9312       162.606       175.537    
  55  0.438651     -0.824052      -9.97852       9.97852       155.551       165.529    
  56  0.476250     -0.741811      -8.98266       8.98266       165.090       174.072    
  57  0.665451     -0.407291      -4.93192       4.93192       164.985       169.917    
  58  0.903561E-01  -2.40400      -29.1102       29.1102       155.616       184.726    
  59  0.899286     -0.106155      -1.28544       1.28544       162.484       163.770    
  60  0.822477     -0.195434      -2.36653       2.36653       165.069       167.435    
  61  0.824462E-01  -2.49561      -30.2196       30.2196       156.791       187.011    
  62  0.689460     -0.371846      -4.50272       4.50272       162.816       167.319    
  63  0.124471      -2.08368      -25.2315       25.2315       164.566       189.798    
  64  0.215598      -1.53434      -18.5794       18.5794       156.242       174.821    
  65  0.671537     -0.398187      -4.82168       4.82168       160.210       165.032    
  66  0.330886      -1.10598      -13.3924       13.3924       158.785       172.177    
  67  0.198204      -1.61846      -19.5981       19.5981       161.212       180.810    
  68  0.774065     -0.256099      -3.10113       3.10113       160.604       163.705    
  69  0.787755     -0.238568      -2.88885       2.88885       161.050       163.939    
  70  0.613901     -0.487921      -5.90829       5.90829       170.733       176.641    
  71  0.427667     -0.849410      -10.2856       10.2856       154.957       165.242    
  72  0.898090     -0.107485      -1.30155       1.30155       184.055       185.356    
  73  0.550021     -0.597800      -7.23881       7.23881       158.205       165.444    
  74  0.431420     -0.840672      -10.1798       10.1798       162.078       172.258    
  75  0.600871     -0.509376      -6.16808       6.16808       158.663       164.831    
loop,thermsimp(1:2)        1   47.1000      0.280527    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253        159.79          0.85          1.14         25.17          0.18          0.06         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    159.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        1
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        2
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      252     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -18.0265       18.0265       152.198       170.225    
   2  0.726663     -0.319292      -3.86634       3.86634       154.726       158.593    
   3  0.929061     -0.735808E-01 -0.890997      0.890997       155.759       156.650    
   4  0.764703     -0.268268      -3.24848       3.24848       156.586       159.835    
   5  0.119617      -2.12346      -25.7132       25.7132       159.182       184.895    
   6  0.369672     -0.995138      -12.0502       12.0502       159.959       172.009    
   7  0.875806     -0.132611      -1.60580       1.60580       152.539       154.144    
   8  0.657886     -0.418723      -5.07035       5.07035       158.917       163.987    
   9  0.387095E-01  -3.25167      -39.3748       39.3748       160.107       199.482    
  10  0.454078     -0.789485      -9.55995       9.55995       161.034       170.593    
  11  0.890470     -0.116006      -1.40472       1.40472       158.812       160.216    
  12  0.118445      -2.13331      -25.8324       25.8324       161.444       187.277    
  13  0.190238      -1.65948      -20.0948       20.0948       160.765       180.860    
  14  0.435624     -0.830976      -10.0624       10.0624       160.604       170.666    
  15  0.768655     -0.263114      -3.18607       3.18607       162.484       165.670    
  16  0.870896E-01  -2.44082      -29.5561       29.5561       162.983       192.539    
  17  0.936453     -0.656556E-01 -0.795029      0.795029       161.050       161.845    
  18  0.159312      -1.83689      -22.2431       22.2431       160.242       182.485    
  19  0.988165     -0.119051E-01 -0.144160      0.144160       158.663       158.807    
  20  0.713347     -0.337787      -4.09029       4.09029       160.210       164.301    
  21  0.417075     -0.874489      -10.5893       10.5893       154.957       165.546    
  22  0.719048     -0.329827      -3.99390       3.99390       158.205       162.199    
  23  0.785519     -0.241411      -2.92327       2.92327       155.551       158.474    
  24  0.356994      -1.03004      -12.4728       12.4728       160.049       172.522    
  25  0.357951      -1.02736      -12.4404       12.4404       162.571       175.011    
  26  0.154816      -1.86552      -22.5897       22.5897       158.348       180.938    
  27  0.246912      -1.39872      -16.9373       16.9373       161.952       178.889    
  28  0.553458     -0.591570      -7.16337       7.16337       163.436       170.599    
  29  0.729602     -0.315256      -3.81747       3.81747       160.681       164.498    
  30  0.605470     -0.501750      -6.07574       6.07574       161.872       167.948    
  31  0.278987E-01  -3.57918      -43.3406       43.3406       162.816       206.156    
  32  0.187991      -1.67136      -20.2387       20.2387       165.069       185.307    
  33  0.543158     -0.610355      -7.39085       7.39085       163.261       170.652    
  34  0.996749     -0.325625E-02 -0.394302E-01  0.394302E-01   158.817       158.856    
  35  0.540727     -0.614841      -7.44517       7.44517       158.419       165.864    
  36  0.833271E-01  -2.48498      -30.0909       30.0909       159.455       189.546    
  37  0.404538     -0.905011      -10.9589       10.9589       164.985       175.944    
  38  0.147302      -1.91527      -23.1922       23.1922       161.525       184.717    
  39  0.364226E-01  -3.31257      -40.1122       40.1122       161.736       201.849    
  40  0.381304     -0.964158      -11.6751       11.6751       161.330       173.005    
  41  0.737758     -0.304140      -3.68286       3.68286       158.785       162.467    
  42  0.179374      -1.71828      -20.8068       20.8068       162.078       182.885    
  43  0.281757      -1.26671      -15.3387       15.3387       162.825       178.163    
  44  0.192633      -1.64697      -19.9433       19.9433       161.708       181.651    
  45  0.954983     -0.460617E-01 -0.557765      0.557765       165.090       165.648    
  46  0.710258     -0.342127      -4.14285       4.14285       156.387       160.530    
  47  0.831769     -0.184201      -2.23051       2.23051       161.455       163.685    
  48  0.912541     -0.915218E-01  -1.10825       1.10825       156.242       157.350    
  49  0.221543      -1.50714      -18.2501       18.2501       161.324       179.574    
  50  0.690803E-02  -4.97507      -60.2436       60.2436       162.606       222.850    
  51  0.162616      -1.81637      -21.9945       21.9945       159.760       181.754    
  52  0.869433     -0.139913      -1.69423       1.69423       159.375       161.070    
  53  0.541563     -0.613295      -7.42645       7.42645       161.480       168.906    
  54  0.310811      -1.16857      -14.1503       14.1503       164.031       178.181    
  55  0.879573     -0.128319      -1.55383       1.55383       170.733       172.287    
  56  0.262339      -1.33812      -16.2034       16.2034       158.097       174.300    
  57  0.651476     -0.428515      -5.18892       5.18892       162.340       167.529    
  58  0.498193     -0.696767      -8.43722       8.43722       162.643       171.080    
  59  0.251241      -1.38134      -16.7268       16.7268       158.403       175.130    
  60  0.704518     -0.350242      -4.24111       4.24111       161.212       165.453    
  61  0.387431     -0.948219      -11.4821       11.4821       161.557       173.039    
  62  0.447312     -0.804500      -9.74176       9.74176       161.207       170.949    
  63  0.842599     -0.171264      -2.07385       2.07385       163.578       165.652    
  64  0.754683     -0.281457      -3.40819       3.40819       158.974       162.382    
  65  0.160341      -1.83045      -22.1651       22.1651       155.616       177.781    
  66  0.388561     -0.945304      -11.4468       11.4468       184.055       195.502    
  67  0.504240     -0.684704      -8.29114       8.29114       156.791       165.083    
  68  0.340326      -1.07785      -13.0518       13.0518       157.199       170.251    
  69  0.995948     -0.406008E-02 -0.491639E-01  0.491639E-01   164.566       164.615    
  70  0.822310     -0.195638      -2.36899       2.36899       159.336       161.705    
  71  0.584501     -0.536996      -6.50254       6.50254       162.947       169.450    
  72  0.953467     -0.476500E-01 -0.576999      0.576999       158.335       158.912    
  73  0.576559     -0.550677      -6.66820       6.66820       153.690       160.358    
  74  0.214918      -1.53750      -18.6177       18.6177       161.937       180.554    
  75  0.764849     -0.268076      -3.24616       3.24616       159.789       163.036    
loop,thermsimp(1:2)        2   18.0265       3.86634    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254        159.72          0.87          1.14         25.23          0.11          0.06         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    159.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        2
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        3
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      253     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -10.6341       10.6341       152.539       163.173    
   2  0.117190E-02  -6.74913      -81.7258       81.7258       155.759       237.485    
   3  0.432199     -0.838870      -10.1580       10.1580       156.242       166.399    
   4  0.466381     -0.762753      -9.23625       9.23625       155.551       164.787    
   5  0.696685     -0.361422      -4.37649       4.37649       154.726       159.103    
   6  0.193714      -1.64137      -19.8755       19.8755       158.663       178.538    
   7  0.535145     -0.625217      -7.57081       7.57081       158.817       166.387    
   8  0.812984     -0.207044      -2.50712       2.50712       158.335       160.842    
   9  0.956789     -0.441723E-01 -0.534887      0.534887       156.586       157.121    
  10  0.496711E-01  -3.00233      -36.3555       36.3555       158.812       195.167    
  11  0.206308E-01  -3.88097      -46.9951       46.9951       153.690       200.685    
  12  0.423434     -0.859358      -10.4061       10.4061       156.387       166.793    
  13  0.216826      -1.52866      -18.5107       18.5107       159.375       177.886    
  14  0.792422     -0.232661      -2.81732       2.81732       159.336       162.154    
  15  0.265940      -1.32449      -16.0383       16.0383       161.050       177.088    
  16  0.993400     -0.662201E-02 -0.801866E-01  0.801866E-01   158.205       158.285    
  17  0.645200E-01  -2.74078      -33.1884       33.1884       158.974       192.162    
  18  0.651527     -0.428436      -5.18797       5.18797       158.785       163.973    
  19  0.858875     -0.152131      -1.84217       1.84217       159.789       161.632    
  20  0.126056      -2.07103      -25.0782       25.0782       161.455       186.533    
  21  0.772661E-01  -2.56050      -31.0053       31.0053       158.917       189.922    
  22  0.441429     -0.817737      -9.90205       9.90205       160.210       170.112    
  23  0.166586      -1.79224      -21.7024       21.7024       160.681       182.383    
  24  0.217490      -1.52560      -18.4737       18.4737       164.566       183.040    
  25  0.632871     -0.457488      -5.53977       5.53977       156.791       162.331    
  26  0.201694      -1.60100      -19.3867       19.3867       161.212       180.599    
  27  0.282690      -1.26341      -15.2987       15.2987       154.957       170.255    
  28  0.255086E-01  -3.66874      -44.4251       44.4251       165.090       209.515    
  29  0.562308     -0.575706      -6.97127       6.97127       163.578       170.549    
  30  0.283366E-01  -3.56360      -43.1520       43.1520       162.484       205.636    
  31  0.404254E-01  -3.20830      -38.8496       38.8496       158.419       197.268    
  32  0.170475      -1.76917      -21.4230       21.4230       162.340       183.763    
  33  0.141712      -1.95396      -23.6606       23.6606       161.872       185.533    
  34  0.773173     -0.257253      -3.11510       3.11510       161.480       164.595    
  35  0.255978      -1.36266      -16.5006       16.5006       162.947       179.448    
  36  0.823739     -0.193902      -2.34797       2.34797       152.198       154.546    
  37  0.166307      -1.79392      -21.7227       21.7227       157.199       178.922    
  38  0.676319     -0.391090      -4.73574       4.73574       161.034       165.769    
  39  0.144546      -1.93416      -23.4209       23.4209       163.436       186.857    
  40  0.593436     -0.521826      -6.31885       6.31885       163.261       169.580    
  41  0.762921     -0.270600      -3.27672       3.27672       160.604       163.881    
  42  0.855796     -0.155724      -1.88567       1.88567       161.207       163.093    
  43  0.433555     -0.835737      -10.1200       10.1200       162.643       172.763    
  44  0.252891      -1.37480      -16.6475       16.6475       159.959       176.607    
  45  0.942909     -0.587850E-01 -0.711833      0.711833       170.733       171.445    
  46  0.432313     -0.838605      -10.1547       10.1547       160.049       170.204    
  47  0.975713     -0.245869E-01 -0.297725      0.297725       161.330       161.627    
  48  0.541226     -0.613919      -7.43400       7.43400       161.557       168.991    
  49  0.255057      -1.36627      -16.5443       16.5443       158.097       174.641    
  50  0.202141      -1.59879      -19.3599       19.3599       162.571       181.931    
  51  0.949562     -0.517549E-01 -0.626705      0.626705       158.403       159.029    
  52  0.255660E-01  -3.66649      -44.3979       44.3979       164.985       209.383    
  53  0.306802      -1.18155      -14.3075       14.3075       155.616       169.923    
  54  0.243277E-01  -3.71614      -44.9991       44.9991       162.825       207.824    
  55  0.466793     -0.761870      -9.22556       9.22556       164.031       173.257    
  56  0.200407      -1.60740      -19.4642       19.4642       161.952       181.416    
  57  0.282970      -1.26241      -15.2867       15.2867       161.324       176.610    
  58  0.214232      -1.54069      -18.6564       18.6564       161.937       180.593    
  59  0.326606      -1.11900      -13.5501       13.5501       160.765       174.315    
  60  0.997507     -0.249621E-02 -0.302268E-01  0.302268E-01   158.348       158.378    
  61  0.426725     -0.851615      -10.3123       10.3123       161.708       172.020    
  62  0.862854     -0.147510      -1.78622       1.78622       159.760       161.546    
  63  0.737079     -0.305061      -3.69401       3.69401       160.242       163.936    
  64  0.976691     -0.235846E-01 -0.285588      0.285588       162.078       162.364    
  65  0.191821      -1.65119      -19.9944       19.9944       161.525       181.519    
  66  0.743386     -0.296540      -3.59084       3.59084       159.182       162.773    
  67  0.683162     -0.381024      -4.61385       4.61385       165.069       169.682    
  68  0.789040     -0.236939      -2.86911       2.86911       161.444       164.313    
  69  0.908546     -0.959094E-01  -1.16138       1.16138       159.455       160.617    
  70  0.562283     -0.575750      -6.97181       6.97181       162.983       169.954    
  71  0.151982E-01  -4.18658      -50.6957       50.6957       184.055       234.751    
  72  0.478777     -0.736520      -8.91859       8.91859       160.107       169.026    
  73  0.226919E-01  -3.78575      -45.8420       45.8420       161.736       207.578    
  74  0.489970     -0.713411      -8.63876       8.63876       162.816       171.455    
  75  0.797004E-01  -2.52948      -30.6297       30.6297       159.717       190.347    
loop,thermsimp(1:2)        3   10.6341       81.7258    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255        154.15          0.87          1.15         25.17          0.14          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    256        152.27          0.87          1.14         25.21          0.18          0.06         27.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        3
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        4
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      255     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -5.09357       5.09357       152.198       157.292    
   2  0.880966     -0.126736      -1.53466       1.53466       156.586       158.121    
   3  0.854972     -0.156687      -1.89734       1.89734       158.205       160.102    
   4  0.797101     -0.226774      -2.74603       2.74603       158.348       161.094    
   5  0.158477      -1.84214      -22.3067       22.3067       158.403       180.709    
   6  0.593839     -0.521148      -6.31062       6.31062       154.726       161.037    
   7  0.817101     -0.201993      -2.44595       2.44595       159.455       161.901    
   8  0.997190     -0.281377E-02 -0.340722E-01  0.340722E-01   158.335       158.369    
   9  0.402857     -0.909174      -11.0093       11.0093       159.760       170.769    
  10  0.690455     -0.370405      -4.48527       4.48527       161.330       165.815    
  11  0.609635     -0.494895      -5.99273       5.99273       159.789       165.782    
  12  0.491117     -0.711073      -8.61045       8.61045       159.336       167.947    
  13  0.990676     -0.936814E-02 -0.113440      0.113440       156.791       156.905    
  14  0.976919     -0.233519E-01 -0.282770      0.282770       162.078       162.361    
  15  0.692556     -0.367366      -4.44847       4.44847       159.182       163.630    
  16  0.549694     -0.598394      -7.24601       7.24601       161.207       168.453    
  17  0.538267E-01  -2.92199      -35.3826       35.3826       152.539       187.921    
  18  0.602193     -0.507178      -6.14147       6.14147       160.604       166.746    
  19  0.537276     -0.621243      -7.52269       7.52269       160.242       167.765    
  20  0.338220      -1.08406      -13.1270       13.1270       158.785       171.912    
  21  0.306772      -1.18165      -14.3087       14.3087       161.444       175.753    
  22  0.895389     -0.110497      -1.33802       1.33802       161.480       162.818    
  23  0.120096      -2.11946      -25.6647       25.6647       155.551       181.216    
  24  0.680166     -0.385418      -4.66706       4.66706       161.034       165.701    
  25  0.369434     -0.995782      -12.0580       12.0580       158.817       170.875    
  26  0.235484      -1.44611      -17.5111       17.5111       156.242       173.753    
  27  0.260836      -1.34386      -16.2730       16.2730       156.387       172.660    
  28  0.720259     -0.328144      -3.97353       3.97353       161.557       165.531    
  29  0.695069     -0.363744      -4.40461       4.40461       160.107       164.512    
  30  0.105076      -2.25307      -27.2827       27.2827       163.261       190.544    
  31  0.968349     -0.321628E-01 -0.389462      0.389462       165.069       165.458    
  32  0.974131     -0.262091E-01 -0.317369      0.317369       155.616       155.933    
  33  0.647785E-01  -2.73678      -33.1399       33.1399       162.983       196.123    
  34  0.910402     -0.938690E-01  -1.13667       1.13667       160.210       161.347    
  35  0.488733     -0.715939      -8.66937       8.66937       160.049       168.718    
  36  0.377436E-01  -3.27694      -39.6808       39.6808       154.957       194.637    
  37  0.154608      -1.86686      -22.6060       22.6060       163.578       186.184    
  38  0.277804      -1.28084      -15.5098       15.5098       170.733       186.243    
  39  0.969547     -0.309263E-01 -0.374489      0.374489       162.816       163.190    
  40  0.380083     -0.967367      -11.7139       11.7139       161.708       173.422    
  41  0.751822     -0.285256      -3.45419       3.45419       162.643       166.097    
  42  0.137692      -1.98274      -24.0092       24.0092       164.031       188.040    
  43  0.293470      -1.22598      -14.8455       14.8455       160.765       175.611    
  44  0.433705     -0.835390      -10.1158       10.1158       158.097       168.213    
  45  0.418034     -0.872194      -10.5615       10.5615       159.959       170.521    
  46  0.166728      -1.79139      -21.6922       21.6922       161.324       183.016    
  47  0.921960     -0.812537E-01 -0.983909      0.983909       161.050       162.034    
  48  0.412601     -0.885275      -10.7199       10.7199       159.375       170.095    
  49  0.925181     -0.777655E-01 -0.941670      0.941670       158.663       159.604    
  50  0.687711     -0.374386      -4.53348       4.53348       157.199       161.733    
  51  0.729890     -0.314862      -3.81269       3.81269       162.947       166.760    
  52  0.355028      -1.03556      -12.5397       12.5397       161.937       174.476    
  53  0.123338      -2.09283      -25.3423       25.3423       161.212       186.554    
  54  0.638370E-01  -2.75142      -33.3172       33.3172       161.952       195.269    
  55  0.379414     -0.969128      -11.7353       11.7353       161.525       173.260    
  56  0.643705     -0.440515      -5.33424       5.33424       162.571       167.905    
  57  0.172292      -1.75856      -21.2946       21.2946       160.681       181.975    
  58  0.996763     -0.324212E-02 -0.392591E-01  0.392591E-01   164.566       164.605    
  59  0.606366     -0.500272      -6.05784       6.05784       162.340       168.398    
  60  0.299698      -1.20498      -14.5912       14.5912       161.872       176.463    
  61  0.723907E-02  -4.92826      -59.6768       59.6768       161.455       221.131    
  62  0.197118      -1.62395      -19.6646       19.6646       163.436       183.100    
  63  0.316130      -1.15160      -13.9449       13.9449       158.917       172.862    
  64  0.115913      -2.15492      -26.0941       26.0941       159.717       185.811    
  65  0.661756     -0.412859      -4.99935       4.99935       158.974       163.973    
  66  0.838437     -0.176215      -2.13381       2.13381       158.812       160.945    
  67  0.929092     -0.735473E-01 -0.890591      0.890591       158.419       159.309    
  68  0.167251      -1.78826      -21.6542       21.6542       153.690       175.345    
  69  0.174207      -1.74751      -21.1608       21.1608       162.484       183.645    
  70  0.506799     -0.679641      -8.22983       8.22983       161.736       169.966    
  71  0.209504      -1.56301      -18.9266       18.9266       162.825       181.751    
  72  0.709189E-01  -2.64622      -32.0433       32.0433       164.985       197.029    
  73  0.995856     -0.415281E-02 -0.502867E-01  0.502867E-01   165.090       165.140    
  74  0.699869     -0.356862      -4.32127       4.32127       184.055       188.376    
  75  0.557535     -0.584229      -7.07449       7.07449       152.271       159.346    
loop,thermsimp(1:2)        4   5.09357       1.53466    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257        157.20          0.87          1.14         25.21          0.13          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    258        153.62          0.86          1.14         25.27          0.11          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        4
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        5
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      257     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -5.59043       5.59043       155.616       161.206    
   2  0.876370     -0.131967      -1.59800       1.59800       156.791       158.389    
   3  0.840080     -0.174259      -2.11011       2.11011       152.198       154.308    
   4  0.608986E-01  -2.79854      -33.8878       33.8878       156.586       190.474    
   5  0.311901      -1.16507      -14.1079       14.1079       158.335       172.442    
   6  0.937552E-01  -2.36707      -28.6631       28.6631       158.419       187.082    
   7  0.608418     -0.496893      -6.01693       6.01693       152.271       158.288    
   8  0.297707      -1.21164      -14.6719       14.6719       158.663       173.334    
   9  0.365777      -1.00573      -12.1785       12.1785       158.205       170.383    
  10  0.194673      -1.63643      -19.8157       19.8157       158.812       178.627    
  11  0.941388     -0.604003E-01 -0.731393      0.731393       154.726       155.458    
  12  0.984881     -0.152343E-01 -0.184473      0.184473       158.348       158.532    
  13  0.750245     -0.287355      -3.47961       3.47961       160.210       163.690    
  14  0.437446     -0.826803      -10.0118       10.0118       157.199       167.211    
  15  0.174754      -1.74437      -21.1228       21.1228       159.455       180.578    
  16  0.300465E-01  -3.50501      -42.4425       42.4425       161.050       203.492    
  17  0.372924     -0.986380      -11.9442       11.9442       162.078       174.022    
  18  0.803506     -0.218771      -2.64912       2.64912       161.480       164.129    
  19  0.232583      -1.45851      -17.6612       17.6612       162.816       180.477    
  20  0.383368     -0.958759      -11.6097       11.6097       159.182       170.792    
  21  0.622786     -0.473552      -5.73429       5.73429       158.974       164.708    
  22  0.356422      -1.03164      -12.4922       12.4922       160.107       172.600    
  23  0.919964     -0.834212E-01  -1.01016       1.01016       164.566       165.576    
  24  0.550740     -0.596492      -7.22298       7.22298       165.090       172.313    
  25  0.402627     -0.909745      -11.0162       11.0162       165.069       176.085    
  26  0.256265      -1.36154      -16.4871       16.4871       161.557       178.044    
  27  0.763510     -0.269828      -3.26738       3.26738       161.034       164.301    
  28  0.388963     -0.944271      -11.4343       11.4343       159.789       171.224    
  29  0.981923     -0.182423E-01 -0.220898      0.220898       161.330       161.551    
  30  0.656629     -0.420635      -5.09351       5.09351       162.643       167.737    
  31  0.932472     -0.699161E-01 -0.846621      0.846621       160.604       161.451    
  32  0.336775      -1.08834      -13.1788       13.1788       162.947       176.126    
  33  0.810758     -0.209786      -2.54032       2.54032       160.242       162.782    
  34  0.557014     -0.585166      -7.08583       7.08583       162.571       169.657    
  35  0.652747     -0.426565      -5.16532       5.16532       159.336       164.502    
  36  0.890774     -0.115665      -1.40059       1.40059       158.097       159.497    
  37  0.703035     -0.352349      -4.26663       4.26663       162.340       166.607    
  38  0.534296     -0.626805      -7.59004       7.59004       161.207       168.797    
  39  0.604162     -0.503914      -6.10194       6.10194       160.049       166.151    
  40  0.545557     -0.605948      -7.33748       7.33748       161.736       169.074    
  41  0.371346     -0.990620      -11.9955       11.9955       159.375       171.371    
  42  0.491801     -0.709680      -8.59359       8.59359       159.959       168.553    
  43  0.879731     -0.128139      -1.55165       1.55165       159.760       161.311    
  44  0.995113     -0.489866E-02 -0.593183E-01  0.593183E-01   158.817       158.876    
  45  0.467927     -0.759444      -9.19618       9.19618       158.785       167.981    
  46  0.355083      -1.03540      -12.5378       12.5378       156.387       168.925    
  47  0.216960      -1.52804      -18.5032       18.5032       158.917       177.420    
  48  0.276988      -1.28378      -15.5454       15.5454       161.525       177.070    
  49  0.905458     -0.993144E-01  -1.20261       1.20261       161.708       162.911    
  50  0.704241     -0.350635      -4.24587       4.24587       156.242       160.487    
  51  0.784564     -0.242627      -2.93800       2.93800       161.937       164.875    
  52  0.329376      -1.11055      -13.4478       13.4478       153.690       167.138    
  53  0.845894     -0.167361      -2.02659       2.02659       160.765       162.792    
  54  0.645172     -0.438238      -5.30667       5.30667       161.444       166.751    
  55  0.279949      -1.27315      -15.4167       15.4167       161.872       177.289    
  56  0.149089      -1.90321      -23.0462       23.0462       158.403       181.449    
  57  0.887681     -0.119143      -1.44271       1.44271       155.551       156.993    
  58  0.582426     -0.540553      -6.54561       6.54561       162.825       169.370    
  59  0.221293      -1.50827      -18.2637       18.2637       160.681       178.945    
  60  0.839449     -0.175010      -2.11921       2.11921       161.324       163.443    
  61  0.383721     -0.957840      -11.5986       11.5986       163.436       175.034    
  62  0.933136     -0.692040E-01 -0.837997      0.837997       162.484       163.322    
  63  0.148663      -1.90607      -23.0808       23.0808       159.717       182.798    
  64  0.788780     -0.237267      -2.87309       2.87309       163.578       166.451    
  65  0.948785     -0.525734E-01 -0.636617      0.636617       170.733       171.370    
  66  0.246696      -1.39960      -16.9479       16.9479       161.212       178.160    
  67  0.297902      -1.21099      -14.6640       14.6640       152.539       167.203    
  68  0.402979     -0.908870      -11.0056       11.0056       164.031       175.037    
  69  0.946008     -0.555038E-01 -0.672100      0.672100       184.055       184.727    
  70  0.182802      -1.69935      -20.5776       20.5776       163.261       183.839    
  71  0.245157      -1.40586      -17.0237       17.0237       154.957       171.980    
  72  0.205669      -1.58149      -19.1504       19.1504       161.952       181.102    
  73  0.242147      -1.41821      -17.1732       17.1732       162.983       180.156    
  74  0.883444E-01  -2.42651      -29.3829       29.3829       164.985       194.368    
  75  0.657595E-02  -5.02434      -60.8402       60.8402       153.618       214.458    
loop,thermsimp(1:2)        5   5.59043       1.59800    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259        162.19          0.84          1.15         25.20          0.44          0.05         27.68
Just calling func    0   0         27.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    260        217.95          0.86          1.15         25.12          0.43          0.05         27.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    162.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        5
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        6
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      259     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -18.5582       18.5582       152.198       170.756    
   2  0.942431     -0.592928E-01 -0.717983      0.717983       154.726       155.444    
   3  0.193824      -1.64081      -19.8687       19.8687       155.551       175.419    
   4  0.162512      -1.81700      -22.0023       22.0023       152.271       174.273    
   5  0.625243     -0.469616      -5.68662       5.68662       156.791       162.478    
   6  0.499178     -0.694793      -8.41331       8.41331       158.348       166.761    
   7  0.706095     -0.348006      -4.21404       4.21404       158.817       163.031    
   8  0.527414     -0.639770      -7.74703       7.74703       158.097       165.844    
   9  0.575748     -0.552085      -6.68525       6.68525       156.242       162.927    
  10  0.490522     -0.712286      -8.62514       8.62514       155.616       164.241    
  11  0.306517      -1.18248      -14.3188       14.3188       159.760       174.078    
  12  0.798470     -0.225057      -2.72524       2.72524       160.604       163.329    
  13  0.333550      -1.09796      -13.2953       13.2953       161.330       174.625    
  14  0.166731      -1.79138      -21.6919       21.6919       160.242       181.934    
  15  0.443580     -0.812878      -9.84322       9.84322       160.765       170.608    
  16  0.669985     -0.400500      -4.84970       4.84970       161.708       166.558    
  17  0.339921      -1.07904      -13.0662       13.0662       162.484       175.550    
  18  0.201260      -1.60316      -19.4128       19.4128       161.324       180.736    
  19  0.772250     -0.258447      -3.12955       3.12955       160.210       163.340    
  20  0.401372E-01  -3.21545      -38.9362       38.9362       161.480       200.416    
  21  0.940962     -0.608526E-01 -0.736870      0.736870       161.034       161.770    
  22  0.115324      -2.16001      -26.1558       26.1558       159.336       185.492    
  23  0.939991E-01  -2.36447      -28.6316       28.6316       158.974       187.605    
  24  0.412221     -0.886196      -10.7310       10.7310       161.937       172.668    
  25  0.136462      -1.99171      -24.1178       24.1178       164.566       188.684    
  26  0.310095      -1.17088      -14.1782       14.1782       160.049       174.227    
  27  0.985727     -0.143755E-01 -0.174074      0.174074       163.578       163.752    
  28  0.900161     -0.105182      -1.27365       1.27365       162.340       163.614    
  29  0.250220      -1.38542      -16.7761       16.7761       161.444       178.220    
  30  0.780405     -0.247942      -3.00235       3.00235       153.690       156.693    
  31  0.228719      -1.47526      -17.8640       17.8640       152.539       170.403    
  32  0.407088     -0.898727      -10.8828       10.8828       157.199       168.082    
  33  0.975627     -0.246749E-01 -0.298791      0.298791       162.643       162.942    
  34  0.885140     -0.122009      -1.47742       1.47742       158.785       160.262    
  35  0.896135     -0.109664      -1.32793       1.32793       159.959       161.287    
  36  0.856661     -0.154713      -1.87344       1.87344       161.207       163.080    
  37  0.258643      -1.35231      -16.3752       16.3752       156.387       172.762    
  38  0.336283      -1.08980      -13.1965       13.1965       161.736       174.933    
  39  0.868205     -0.141327      -1.71134       1.71134       162.825       164.536    
  40  0.937935     -0.640747E-01 -0.775887      0.775887       162.571       163.347    
  41  0.418906     -0.870109      -10.5362       10.5362       158.205       168.741    
  42  0.351040      -1.04685      -12.6765       12.6765       159.182       171.858    
  43  0.611628E-01  -2.79422      -33.8354       33.8354       159.789       193.625    
  44  0.153518      -1.87394      -22.6917       22.6917       170.733       193.425    
  45  0.938341     -0.636423E-01 -0.770651      0.770651       159.375       160.146    
  46  0.598133     -0.513942      -6.22337       6.22337       154.957       161.180    
  47  0.795771     -0.228444      -2.76625       2.76625       165.090       167.856    
  48  0.295375      -1.21951      -14.7672       14.7672       158.335       173.102    
  49  0.804738     -0.217239      -2.63057       2.63057       160.107       162.738    
  50  0.260094      -1.34671      -16.3075       16.3075       158.663       174.970    
  51  0.640517     -0.445479      -5.39435       5.39435       162.078       167.473    
  52  0.221872      -1.50566      -18.2321       18.2321       163.436       181.668    
  53  0.837141     -0.177762      -2.15254       2.15254       164.031       166.184    
  54  0.212745      -1.54766      -18.7408       18.7408       165.069       183.809    
  55  0.162033      -1.81996      -22.0380       22.0380       162.947       184.985    
  56  0.631631     -0.459450      -5.56353       5.56353       161.525       167.088    
  57  0.816014E-01  -2.50591      -30.3443       30.3443       161.872       192.216    
  58  0.754954     -0.281099      -3.40385       3.40385       158.917       162.321    
  59  0.568761E-01  -2.86688      -34.7153       34.7153       161.557       196.273    
  60  0.610521     -0.493442      -5.97514       5.97514       161.212       167.187    
  61  0.691718     -0.368577      -4.46313       4.46313       158.812       163.275    
  62  0.330677      -1.10661      -13.4001       13.4001       160.681       174.081    
  63  0.669260     -0.401583      -4.86280       4.86280       162.983       167.845    
  64  0.677208     -0.389776      -4.71984       4.71984       162.816       167.536    
  65  0.440183     -0.820565      -9.93630       9.93630       159.455       169.392    
  66  0.258089      -1.35445      -16.4012       16.4012       161.952       178.353    
  67  0.109764      -2.20942      -26.7541       26.7541       158.403       185.157    
  68  0.440932     -0.818865      -9.91571       9.91571       159.717       169.633    
  69  0.361307      -1.01803      -12.3274       12.3274       163.261       175.588    
  70  0.304201      -1.19007      -14.4106       14.4106       184.055       198.466    
  71  0.279324      -1.27538      -15.4437       15.4437       158.419       173.862    
  72  0.833329     -0.182326      -2.20780       2.20780       156.586       158.794    
  73  0.703144     -0.352194      -4.26475       4.26475       164.985       169.250    
  74  0.890049     -0.116479      -1.41046       1.41046       161.050       162.460    
  75  0.345512      -1.06273      -12.8687       12.8687       162.195       175.063    
loop,thermsimp(1:2)        6   18.5582      0.717983    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261        166.81          0.87          1.15         25.24          0.13          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    166.81       0.8000     -1.736      2.669     -102.6     0.9916    
                      0.2797      1.482     -99.70      3.532     0.3702    
                       1.770     -1.372      1.530      5336.      4282.    
                     -0.5982      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5168.     -12.47    
                     -0.5672     -6.320     -5.050     -8.566      5.915    
                      -14.67     -3.165      2992.      0.000      3805.    

                       3805.      3735.      3384.      3805.      2240.    
                       4350.     0.6341E-03 0.5104E-01  0.000     0.6489E-01
                     -0.1385    -0.8720E-01 0.9225E-01 0.6130E-02-0.4842E-01

                     -0.2973    -0.9734      0.000    -0.4965E-01 0.2565    
                       0.000    -0.1749E-01-0.5492E-01-0.1461     0.9856E-02
                     -0.4428E-01-0.9314E-02-0.4860     -1.063      4655.    

                     -0.7589    -0.7343     -2.466     -2.466    -0.2697    
                     -0.6488E-01  9.100      8.771    -0.1942E+05 -4.000    
                     -0.5160    -0.8072      9.277      8.796    -0.1887E+05

                      -4.000     0.7793E-01-0.9161      8.926      8.956    
                     -0.2114E+05 -7.000    -0.5126    -0.5284      9.131    
                       8.775    -0.2067E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    166.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        6
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        7
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      260     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -16.1171       16.1171       154.726       170.844    
   2  0.401807     -0.911784      -11.0409       11.0409       153.690       164.731    
   3  0.418885     -0.870159      -10.5368       10.5368       156.586       167.123    
   4  0.753378     -0.283189      -3.42916       3.42916       159.375       162.805    
   5  0.792066     -0.233111      -2.82276       2.82276       158.785       161.607    
   6  0.868474     -0.141017      -1.70759       1.70759       154.957       156.664    
   7  0.318670      -1.14360      -13.8479       13.8479       159.959       173.807    
   8  0.863267     -0.147031      -1.78041       1.78041       161.034       162.814    
   9  0.589255     -0.528896      -6.40445       6.40445       158.917       165.321    
  10  0.632079E-01  -2.76133      -33.4372       33.4372       161.050       194.487    
  11  0.992270     -0.775975E-02 -0.939635E-01  0.939635E-01   156.791       156.885    
  12  0.466140     -0.763269      -9.24249       9.24249       160.107       169.350    
  13  0.177509      -1.72873      -20.9334       20.9334       156.242       177.175    
  14  0.933326     -0.690005E-01 -0.835534      0.835534       162.643       163.479    
  15  0.876357     -0.131982      -1.59818       1.59818       158.817       160.415    
  16  0.673496     -0.395274      -4.78641       4.78641       161.207       165.993    
  17  0.648708     -0.432773      -5.24049       5.24049       158.812       164.052    
  18  0.400813     -0.914259      -11.0709       11.0709       160.604       171.675    
  19  0.763164     -0.270282      -3.27287       3.27287       160.210       163.483    
  20  0.196240      -1.62842      -19.7187       19.7187       162.571       182.290    
  21  0.923666     -0.794046E-01 -0.961518      0.961518       162.340       163.302    
  22  0.999600     -0.400298E-03 -0.484724E-02  0.484724E-02   163.578       163.583    
  23  0.379715     -0.968335      -11.7257       11.7257       155.616       167.342    
  24  0.197375      -1.62265      -19.6488       19.6488       162.825       182.473    
  25  0.760736     -0.273468      -3.31146       3.31146       158.097       161.408    
  26  0.392182     -0.936030      -11.3345       11.3345       164.031       175.366    
  27  0.256208      -1.36177      -16.4898       16.4898       161.708       178.198    
  28  0.251796      -1.37914      -16.7001       16.7001       158.348       175.048    
  29  0.332089E-01  -3.40494      -41.2307       41.2307       161.525       202.755    
  30  0.970457     -0.299883E-01 -0.363131      0.363131       161.212       161.575    
  31  0.467370E-01  -3.06322      -37.0928       37.0928       162.078       199.171    
  32  0.716125     -0.333901      -4.04323       4.04323       162.816       166.859    
  33  0.757897     -0.277208      -3.35674       3.35674       162.983       166.339    
  34  0.765628     -0.267059      -3.23384       3.23384       165.090       168.324    
  35  0.323816      -1.12758      -13.6540       13.6540       157.199       170.853    
  36  0.909845     -0.944807E-01  -1.14408       1.14408       158.205       159.349    
  37  0.515782     -0.662071      -8.01708       8.01708       164.985       173.002    
  38  0.464370     -0.767074      -9.28857       9.28857       159.455       168.744    
  39  0.445707     -0.808094      -9.78529       9.78529       159.717       169.503    
  40  0.786320     -0.240391      -2.91092       2.91092       152.539       155.450    
  41  0.631860     -0.459087      -5.55912       5.55912       160.765       166.324    
  42  0.672488     -0.396772      -4.80454       4.80454       152.198       157.003    
  43  0.251717E-02  -5.98462      -72.4683       72.4683       159.182       231.650    
  44  0.245023      -1.40640      -17.0303       17.0303       161.937       178.967    
  45  0.252688      -1.37560      -16.6573       16.6573       156.387       173.044    
  46  0.268946      -1.31324      -15.9022       15.9022       158.335       174.237    
  47  0.550357     -0.597189      -7.23141       7.23141       158.419       165.650    
  48  0.826205     -0.190912      -2.31177       2.31177       159.760       162.071    
  49  0.964276     -0.363780E-01 -0.440505      0.440505       160.681       161.121    
  50  0.415479     -0.878324      -10.6357       10.6357       160.049       170.685    
  51  0.599143E-01  -2.81484      -34.0852       34.0852       152.271       186.356    
  52  0.348555      -1.05396      -12.7625       12.7625       161.330       174.092    
  53  0.243819      -1.41133      -17.0899       17.0899       161.736       178.826    
  54  0.233297      -1.45544      -17.6241       17.6241       158.663       176.287    
  55  0.705284     -0.349155      -4.22795       4.22795       162.195       166.423    
  56  0.258436      -1.35311      -16.3849       16.3849       155.551       171.936    
  57  0.328631      -1.11282      -13.4753       13.4753       162.484       175.959    
  58  0.676481     -0.390852      -4.73286       4.73286       163.261       167.994    
  59  0.784590     -0.242594      -2.93759       2.93759       161.444       164.382    
  60  0.546419E-01  -2.90695      -35.2006       35.2006       161.952       197.152    
  61  0.507256     -0.678740      -8.21892       8.21892       161.324       169.543    
  62  0.980797     -0.193899E-01 -0.234794      0.234794       163.436       163.671    
  63  0.193856      -1.64064      -19.8667       19.8667       160.242       180.109    
  64  0.101492      -2.28777      -27.7028       27.7028       165.069       192.771    
  65  0.245844E-01  -3.70564      -44.8720       44.8720       162.947       207.819    
  66  0.610050     -0.494214      -5.98448       5.98448       158.403       164.387    
  67  0.373100E-01  -3.28849      -39.8207       39.8207       159.336       199.157    
  68  0.476763     -0.740736      -8.96964       8.96964       158.974       167.943    
  69  0.412657     -0.885139      -10.7182       10.7182       164.566       175.284    
  70  0.580580     -0.543727      -6.58405       6.58405       161.872       168.456    
  71  0.241635      -1.42033      -17.1989       17.1989       170.733       187.932    
  72  0.463019     -0.769988      -9.32385       9.32385       159.789       169.113    
  73  0.389737     -0.942284      -11.4102       11.4102       161.557       172.967    
  74  0.661923     -0.412607      -4.99629       4.99629       184.055       189.051    
  75  0.112942      -2.18088      -26.4085       26.4085       166.809       193.217    
loop,thermsimp(1:2)        7   16.1171       11.0409    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262        162.94          0.86          1.14         25.20          0.35          0.06         27.60
Just calling func    0   0         27.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    162.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        7
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        8
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      261     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -27.1980       27.1980       152.539       179.737    
   2  0.476819     -0.740619      -8.96823       8.96823       154.957       163.925    
   3  0.564430     -0.571938      -6.92566       6.92566       156.791       163.717    
   4  0.211741      -1.55239      -18.7981       18.7981       152.198       170.996    
   5  0.154226E-01  -4.17192      -50.5181       50.5181       158.205       208.723    
   6  0.489577     -0.714213      -8.64847       8.64847       158.817       167.465    
   7  0.583965     -0.537914      -6.51365       6.51365       160.681       167.194    
   8  0.430258     -0.843370      -10.2124       10.2124       158.097       168.309    
   9  0.280982      -1.26946      -15.3721       15.3721       161.212       176.584    
  10  0.535183     -0.625146      -7.56996       7.56996       158.785       166.355    
  11  0.306750      -1.18172      -14.3096       14.3096       159.760       174.069    
  12  0.924930     -0.780370E-01 -0.944957      0.944957       159.375       160.320    
  13  0.829670E-01  -2.48931      -30.1433       30.1433       161.034       191.177    
  14  0.330275      -1.10783      -13.4148       13.4148       162.340       175.755    
  15  0.229751      -1.47076      -17.8096       17.8096       162.643       180.453    
  16  0.455737     -0.785839      -9.51580       9.51580       160.210       169.726    
  17  0.830949     -0.185187      -2.24245       2.24245       163.578       165.820    
  18  0.148624      -1.90634      -23.0840       23.0840       163.436       186.520    
  19  0.883001     -0.124429      -1.50673       1.50673       158.812       160.318    
  20  0.668001     -0.403466      -4.88560       4.88560       161.444       166.330    
  21  0.610583     -0.493341      -5.97392       5.97392       158.403       164.377    
  22  0.689050     -0.372441      -4.50992       4.50992       153.690       158.200    
  23  0.124417      -2.08412      -25.2368       25.2368       158.917       184.154    
  24  0.785584E-01  -2.54391      -30.8045       30.8045       158.419       189.223    
  25  0.936565     -0.655366E-01 -0.793588      0.793588       161.207       162.001    
  26  0.483719     -0.726252      -8.79425       8.79425       160.765       169.559    
  27  0.715685     -0.334515      -4.05068       4.05068       162.983       167.033    
  28  0.786437     -0.240243      -2.90912       2.90912       162.195       165.104    
  29  0.361023      -1.01881      -12.3369       12.3369       162.816       175.153    
  30  0.325559      -1.12221      -13.5889       13.5889       156.586       170.175    
  31  0.850460     -0.161978      -1.96141       1.96141       155.616       157.577    
  32  0.301358      -1.19946      -14.5243       14.5243       158.974       173.498    
  33  0.304725      -1.18834      -14.3898       14.3898       163.261       177.651    
  34  0.887065     -0.119838      -1.45112       1.45112       165.090       166.541    
  35  0.762822     -0.270730      -3.27830       3.27830       161.872       165.150    
  36  0.364130      -1.01024      -12.2332       12.2332       159.455       171.689    
  37  0.762041     -0.271754      -3.29070       3.29070       159.789       163.080    
  38  0.941180     -0.606207E-01 -0.734061      0.734061       160.107       160.842    
  39  0.449403     -0.799835      -9.68528       9.68528       159.717       169.403    
  40  0.743855     -0.295910      -3.58320       3.58320       161.324       164.907    
  41  0.743104     -0.296920      -3.59543       3.59543       160.049       163.644    
  42  0.350527      -1.04832      -12.6942       12.6942       154.726       167.421    
  43  0.607240     -0.498831      -6.04039       6.04039       157.199       163.240    
  44  0.557347     -0.584567      -7.07857       7.07857       160.604       167.683    
  45  0.217970      -1.52340      -18.4470       18.4470       155.551       173.998    
  46  0.364570      -1.00904      -12.2185       12.2185       161.557       173.776    
  47  0.330900      -1.10594      -13.3919       13.3919       164.985       178.377    
  48  0.861127     -0.149514      -1.81047       1.81047       156.387       158.198    
  49  0.710764E-01  -2.64400      -32.0164       32.0164       159.959       191.976    
  50  0.264543      -1.32975      -16.1021       16.1021       161.330       177.432    
  51  0.985836     -0.142654E-01 -0.172741      0.172741       158.335       158.507    
  52  0.296563      -1.21550      -14.7186       14.7186       158.348       173.066    
  53  0.875112     -0.133403      -1.61539       1.61539       164.566       166.181    
  54  0.808637     -0.212405      -2.57203       2.57203       164.031       166.603    
  55  0.394372     -0.930461      -11.2670       11.2670       162.484       173.751    
  56  0.209815      -1.56153      -18.9087       18.9087       158.663       177.571    
  57  0.154667      -1.86648      -22.6014       22.6014       156.242       178.843    
  58  0.741232     -0.299442      -3.62597       3.62597       161.708       165.334    
  59  0.386718E-01  -3.25265      -39.3866       39.3866       161.736       201.123    
  60  0.372867     -0.986533      -11.9460       11.9460       161.937       173.883    
  61  0.910828E-01  -2.39599      -29.0132       29.0132       160.242       189.255    
  62  0.660999     -0.414003      -5.01320       5.01320       162.571       167.584    
  63  0.631205E-01  -2.76271      -33.4539       33.4539       162.825       196.279    
  64  0.959104     -0.417554E-01 -0.505620      0.505620       152.271       152.777    
  65  0.132829      -2.01869      -24.4445       24.4445       170.733       195.178    
  66  0.162229      -1.81875      -22.0234       22.0234       184.055       206.078    
  67  0.155176      -1.86319      -22.5616       22.5616       165.069       187.630    
  68  0.950416E-01  -2.35344      -28.4980       28.4980       166.809       195.307    
  69  0.591456     -0.525169      -6.35932       6.35932       161.050       167.409    
  70  0.297427      -1.21259      -14.6833       14.6833       161.952       176.635    
  71  0.980650E-01  -2.32213      -28.1188       28.1188       159.336       187.455    
  72  0.795540     -0.228734      -2.76976       2.76976       162.078       164.848    
  73  0.949409     -0.519153E-01 -0.628648      0.628648       161.525       162.153    
  74  0.155806      -1.85914      -22.5125       22.5125       162.947       185.460    
  75  0.753816     -0.282607      -3.42212       3.42212       162.937       166.360    
loop,thermsimp(1:2)        8   27.1980       8.96823    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263        162.18          0.87          1.15         25.09          0.24          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    162.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        8
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:        9
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      262     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -5.37726       5.37726       152.271       157.648    
   2  0.805197     -0.216668      -2.62365       2.62365       155.616       158.240    
   3  0.976428     -0.238543E-01 -0.288854      0.288854       156.387       156.676    
   4  0.599028     -0.512447      -6.20527       6.20527       153.690       159.896    
   5  0.591081     -0.525802      -6.36699       6.36699       158.335       164.702    
   6  0.151500      -1.88717      -22.8519       22.8519       158.812       181.663    
   7  0.565682     -0.569723      -6.89882       6.89882       159.375       166.274    
   8  0.345258      -1.06346      -12.8776       12.8776       160.107       172.985    
   9  0.658101     -0.418397      -5.06641       5.06641       161.207       166.273    
  10  0.691977E-01  -2.67079      -32.3408       32.3408       161.525       193.865    
  11  0.289062      -1.24111      -15.0288       15.0288       159.789       174.818    
  12  0.949819     -0.514835E-01 -0.623419      0.623419       157.199       157.823    
  13  0.791632     -0.233658      -2.82939       2.82939       160.049       162.878    
  14  0.400532     -0.914962      -11.0794       11.0794       156.791       167.871    
  15  0.241886      -1.41929      -17.1863       17.1863       154.957       172.143    
  16  0.383016     -0.959678      -11.6208       11.6208       158.403       170.024    
  17  0.993978     -0.604041E-02 -0.731438E-01  0.731438E-01   162.078       162.151    
  18  0.807089     -0.214322      -2.59524       2.59524       161.324       163.919    
  19  0.732161     -0.311755      -3.77507       3.77507       162.195       165.970    
  20  0.176507      -1.73440      -21.0020       21.0020       161.872       182.874    
  21  0.628098     -0.465059      -5.63144       5.63144       161.708       167.340    
  22  0.383392     -0.958697      -11.6089       11.6089       163.578       175.187    
  23  0.906421     -0.982517E-01  -1.18974       1.18974       164.566       165.756    
  24  0.329288      -1.11082      -13.4511       13.4511       161.444       174.895    
  25  0.869436     -0.139911      -1.69419       1.69419       158.785       160.479    
  26  0.354994      -1.03565      -12.5408       12.5408       162.937       175.478    
  27  0.127935      -2.05623      -24.8991       24.8991       165.090       189.989    
  28  0.840123     -0.174207      -2.10949       2.10949       164.031       166.141    
  29  0.625861     -0.468627      -5.67465       5.67465       162.983       168.657    
  30  0.488384     -0.716653      -8.67801       8.67801       160.681       169.359    
  31  0.888226E-01  -2.42111      -29.3175       29.3175       161.050       190.367    
  32  0.262955      -1.33577      -16.1750       16.1750       154.726       170.901    
  33  0.153205E-01  -4.17856      -50.5986       50.5986       158.817       209.415    
  34  0.432355     -0.838509      -10.1536       10.1536       162.571       172.725    
  35  0.225273      -1.49044      -18.0479       18.0479       160.604       178.652    
  36  0.812147     -0.208074      -2.51959       2.51959       158.097       160.616    
  37  0.832805E-01  -2.48554      -30.0976       30.0976       159.717       189.815    
  38  0.442280     -0.815813      -9.87875       9.87875       160.765       170.644    
  39  0.106639      -2.23831      -27.1039       27.1039       160.210       187.314    
  40  0.143053      -1.94454      -23.5466       23.5466       156.586       180.133    
  41  0.871774     -0.137225      -1.66167       1.66167       152.198       153.860    
  42  0.137692      -1.98273      -24.0091       24.0091       159.455       183.465    
  43  0.366512      -1.00372      -12.1542       12.1542       158.348       170.502    
  44  0.617157     -0.482633      -5.84424       5.84424       158.974       164.818    
  45  0.420337     -0.866700      -10.4949       10.4949       162.484       172.979    
  46  0.935846     -0.663044E-01 -0.802886      0.802886       161.557       162.360    
  47  0.979912     -0.202925E-01 -0.245723      0.245723       161.937       162.182    
  48  0.692793     -0.367024      -4.44433       4.44433       155.551       159.995    
  49  0.155424      -1.86160      -22.5423       22.5423       159.760       182.302    
  50  0.703218     -0.352088      -4.26347       4.26347       162.816       167.079    
  51  0.396734     -0.924489      -11.1947       11.1947       162.340       173.535    
  52  0.247863      -1.39488      -16.8907       16.8907       161.212       178.103    
  53  0.176690      -1.73336      -20.9894       20.9894       161.952       182.941    
  54  0.832421     -0.183417      -2.22101       2.22101       161.330       163.551    
  55  0.598900     -0.512660      -6.20785       6.20785       158.663       164.870    
  56  0.940005     -0.618702E-01 -0.749192      0.749192       163.261       164.010    
  57  0.556954     -0.585272      -7.08712       7.08712       164.985       172.073    
  58  0.920495     -0.828436E-01  -1.00316       1.00316       156.242       157.245    
  59  0.896932     -0.108775      -1.31717       1.31717       152.539       153.856    
  60  0.200022      -1.60933      -19.4875       19.4875       162.643       182.131    
  61  0.667904E-01  -2.70620      -32.7696       32.7696       158.917       191.686    
  62  0.146707      -1.91932      -23.2412       23.2412       162.947       186.188    
  63  0.305705      -1.18513      -14.3509       14.3509       163.436       177.787    
  64  0.975058     -0.252587E-01 -0.305860      0.305860       159.336       159.642    
  65  0.229625      -1.47131      -17.8162       17.8162       165.069       182.885    
  66  0.477708     -0.738756      -8.94566       8.94566       158.419       167.364    
  67  0.443063     -0.814043      -9.85732       9.85732       160.242       170.099    
  68  0.988727     -0.113371E-01 -0.137282      0.137282       161.034       161.171    
  69  0.338863      -1.08216      -13.1040       13.1040       159.959       173.063    
  70  0.929830     -0.727534E-01 -0.880978      0.880978       170.733       171.614    
  71  0.537152     -0.621475      -7.52550       7.52550       166.809       174.334    
  72  0.626264E-01  -2.77057      -33.5491       33.5491       162.825       196.374    
  73  0.970389     -0.300585E-01 -0.363981      0.363981       161.736       162.100    
  74  0.902865     -0.102183      -1.23734       1.23734       184.055       185.292    
  75  0.488609     -0.716192      -8.67244       8.67244       162.178       170.850    
loop,thermsimp(1:2)        9   5.37726       2.62365    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264        164.80          0.87          1.16         25.17          0.16          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    164.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:        9
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       10
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      263     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -2.21022       2.21022       152.539       154.749    
   2  0.367543      -1.00091      -12.1202       12.1202       152.198       164.318    
   3  0.528755     -0.637231      -7.71629       7.71629       156.387       164.103    
   4  0.776829     -0.252535      -3.05797       3.05797       156.242       159.299    
   5  0.149594E-01  -4.20242      -50.8875       50.8875       152.271       203.159    
   6  0.892228     -0.114033      -1.38084       1.38084       157.199       158.580    
   7  0.191037      -1.65529      -20.0440       20.0440       155.616       175.660    
   8  0.516533     -0.660616      -7.99946       7.99946       159.336       167.336    
   9  0.273230      -1.29744      -15.7109       15.7109       153.690       169.401    
  10  0.822225     -0.195741      -2.37025       2.37025       155.551       157.921    
  11  0.359850      -1.02207      -12.3763       12.3763       158.785       171.161    
  12  0.611658     -0.491581      -5.95260       5.95260       158.097       164.049    
  13  0.249481      -1.38837      -16.8119       16.8119       161.034       177.845    
  14  0.441252     -0.818139      -9.90692       9.90692       161.736       171.643    
  15  0.910514E-01  -2.39633      -29.0174       29.0174       162.078       191.096    
  16  0.745146     -0.294175      -3.56219       3.56219       161.937       165.499    
  17  0.758301     -0.276675      -3.35029       3.35029       161.557       164.907    
  18  0.638521     -0.448601      -5.43215       5.43215       160.049       165.481    
  19  0.150180      -1.89592      -22.9579       22.9579       161.330       184.288    
  20  0.144147      -1.93692      -23.4544       23.4544       161.324       184.778    
  21  0.104928      -2.25448      -27.2997       27.2997       163.261       190.561    
  22  0.398120     -0.921002      -11.1525       11.1525       158.335       169.487    
  23  0.802258     -0.220325      -2.66794       2.66794       158.974       161.642    
  24  0.399299     -0.918044      -11.1167       11.1167       158.663       169.779    
  25  0.493060     -0.707124      -8.56263       8.56263       164.566       173.129    
  26  0.504407     -0.684372      -8.28713       8.28713       162.195       170.482    
  27  0.762058     -0.271733      -3.29044       3.29044       164.031       167.322    
  28  0.430267     -0.843350      -10.2122       10.2122       161.207       171.419    
  29  0.993832     -0.618725E-02 -0.749220E-01  0.749220E-01   159.375       159.450    
  30  0.705390     -0.349005      -4.22613       4.22613       162.816       167.042    
  31  0.969760     -0.307069E-01 -0.371832      0.371832       161.708       162.080    
  32  0.245618      -1.40398      -17.0009       17.0009       158.419       175.420    
  33  0.685790     -0.377184      -4.56736       4.56736       156.791       161.359    
  34  0.905089     -0.997222E-01  -1.20754       1.20754       162.983       164.190    
  35  0.414065     -0.881732      -10.6770       10.6770       160.681       171.358    
  36  0.714747E-01  -2.63841      -31.9488       31.9488       158.403       190.352    
  37  0.694510     -0.364548      -4.41435       4.41435       160.242       164.656    
  38  0.770213E-01  -2.56367      -31.0438       31.0438       158.348       189.392    
  39  0.846173     -0.167031      -2.02260       2.02260       160.765       162.788    
  40  0.485012     -0.723582      -8.76193       8.76193       162.178       170.940    
  41  0.345787      -1.06193      -12.8590       12.8590       154.726       167.585    
  42  0.851861     -0.160332      -1.94147       1.94147       170.733       172.675    
  43  0.774151     -0.255989      -3.09979       3.09979       164.985       168.085    
  44  0.512382     -0.668685      -8.09716       8.09716       154.957       163.054    
  45  0.839798     -0.174594      -2.11418       2.11418       162.571       164.685    
  46  0.430550     -0.842692      -10.2042       10.2042       162.484       172.688    
  47  0.988263     -0.118067E-01 -0.142968      0.142968       160.107       160.250    
  48  0.349495      -1.05127      -12.7299       12.7299       159.959       172.689    
  49  0.290701      -1.23546      -14.9603       14.9603       162.340       177.300    
  50  0.210466      -1.55843      -18.8712       18.8712       166.809       185.680    
  51  0.361038      -1.01877      -12.3364       12.3364       159.789       172.126    
  52  0.168890      -1.77851      -21.5361       21.5361       161.444       182.980    
  53  0.176000      -1.73727      -21.0368       21.0368       163.578       184.615    
  54  0.494423     -0.704364      -8.52921       8.52921       162.937       171.467    
  55  0.887313     -0.119558      -1.44774       1.44774       163.436       164.883    
  56  0.318781      -1.14325      -13.8437       13.8437       161.212       175.056    
  57  0.385435     -0.953382      -11.5446       11.5446       160.604       172.149    
  58  0.557906     -0.583564      -7.06644       7.06644       156.586       163.653    
  59  0.262507      -1.33748      -16.1956       16.1956       158.812       175.007    
  60  0.573408     -0.556157      -6.73456       6.73456       162.643       169.378    
  61  0.334195      -1.09603      -13.2719       13.2719       159.760       173.032    
  62  0.365463      -1.00659      -12.1889       12.1889       161.872       174.061    
  63  0.182452      -1.70127      -20.6008       20.6008       165.069       185.669    
  64  0.224434      -1.49418      -18.0931       18.0931       161.952       180.045    
  65  0.599163     -0.512222      -6.20254       6.20254       159.455       165.658    
  66  0.549089     -0.599495      -7.25935       7.25935       184.055       191.314    
  67  0.830082     -0.186231      -2.25508       2.25508       162.947       165.202    
  68  0.824393     -0.193108      -2.33837       2.33837       160.210       162.549    
  69  0.814179     -0.205575      -2.48933       2.48933       159.717       162.207    
  70  0.731713E-01  -2.61495      -31.6647       31.6647       165.090       196.754    
  71  0.588145     -0.530782      -6.42729       6.42729       161.050       167.477    
  72  0.777400     -0.251801      -3.04908       3.04908       158.917       161.966    
  73  0.497973     -0.697209      -8.44256       8.44256       161.525       169.967    
  74  0.692859     -0.366929      -4.44318       4.44318       162.825       167.268    
  75  0.688184     -0.373699      -4.52516       4.52516       164.796       169.321    
loop,thermsimp(1:2)       10   2.21022       12.1202    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265        161.32          0.86          1.15         25.25          0.10          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    266        180.37          0.85          1.15         25.21          0.15          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       10
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       11
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      265     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -1.01762       1.01762       152.539       153.556    
   2  0.309089      -1.17413      -14.2176       14.2176       155.551       169.768    
   3  0.237901      -1.43590      -17.3874       17.3874       157.199       174.587    
   4  0.542467     -0.611627      -7.40625       7.40625       156.242       163.648    
   5  0.523672     -0.646889      -7.83325       7.83325       159.375       167.209    
   6  0.850058     -0.162450      -1.96712       1.96712       160.107       162.075    
   7  0.589343     -0.528746      -6.40264       6.40264       156.791       163.194    
   8  0.979269     -0.209490E-01 -0.253673      0.253673       158.974       159.227    
   9  0.110419      -2.20347      -26.6821       26.6821       158.917       185.599    
  10  0.557914     -0.583550      -7.06626       7.06626       161.708       168.774    
  11  0.474464     -0.745569      -9.02816       9.02816       159.717       168.745    
  12  0.312482      -1.16321      -14.0854       14.0854       160.210       174.296    
  13  0.297011      -1.21399      -14.7003       14.7003       160.765       175.465    
  14  0.857571     -0.153651      -1.86058       1.86058       154.957       156.817    
  15  0.792567     -0.232479      -2.81511       2.81511       156.586       159.402    
  16  0.963006     -0.376958E-01 -0.456463      0.456463       158.097       158.553    
  17  0.294103      -1.22382      -14.8194       14.8194       156.387       171.207    
  18  0.403484     -0.907618      -10.9904       10.9904       162.983       173.973    
  19  0.449313     -0.800035      -9.68770       9.68770       152.198       161.886    
  20  0.721912     -0.325852      -3.94577       3.94577       160.242       164.188    
  21  0.512488     -0.668479      -8.09467       8.09467       162.571       170.666    
  22  0.885190     -0.121953      -1.47674       1.47674       163.436       164.912    
  23  0.694751E-01  -2.66679      -32.2924       32.2924       161.557       193.850    
  24  0.820879     -0.197380      -2.39009       2.39009       162.947       165.337    
  25  0.211527      -1.55340      -18.8103       18.8103       160.049       178.859    
  26  0.937420     -0.646236E-01 -0.782533      0.782533       161.937       162.719    
  27  0.515756E-01  -2.96471      -35.8999       35.8999       159.455       195.355    
  28  0.695222     -0.363525      -4.40195       4.40195       162.816       167.218    
  29  0.718776     -0.330205      -3.99849       3.99849       162.825       166.823    
  30  0.536080     -0.623471      -7.54967       7.54967       164.031       171.581    
  31  0.585855     -0.534682      -6.47452       6.47452       159.336       165.811    
  32  0.693572     -0.365900      -4.43072       4.43072       161.050       165.480    
  33  0.700823     -0.355500      -4.30478       4.30478       154.726       159.031    
  34  0.250985      -1.38236      -16.7391       16.7391       164.985       181.725    
  35  0.290600      -1.23581      -14.9645       14.9645       164.796       179.760    
  36  0.828609     -0.188007      -2.27660       2.27660       162.643       164.920    
  37  0.225820      -1.48802      -18.0185       18.0185       153.690       171.709    
  38  0.999674     -0.326354E-03 -0.395185E-02  0.395185E-02   158.335       158.338    
  39  0.878216     -0.129862      -1.57252       1.57252       158.663       160.235    
  40  0.685898E-01  -2.67961      -32.4477       32.4477       161.525       193.972    
  41  0.273860      -1.29514      -15.6829       15.6829       162.195       177.878    
  42  0.697655     -0.360030      -4.35964       4.35964       162.178       166.537    
  43  0.293168      -1.22701      -14.8580       14.8580       158.785       173.643    
  44  0.319476      -1.14107      -13.8174       13.8174       160.681       174.498    
  45  0.874681     -0.133896      -1.62136       1.62136       161.207       162.828    
  46  0.408697     -0.894781      -10.8350       10.8350       162.937       173.772    
  47  0.142130E-01  -4.25360      -51.5072       51.5072       161.736       213.244    
  48  0.164528      -1.80468      -21.8530       21.8530       159.789       181.642    
  49  0.652669     -0.426685      -5.16677       5.16677       160.604       165.771    
  50  0.492107     -0.709060      -8.58607       8.58607       170.733       179.319    
  51  0.542705     -0.611189      -7.40095       7.40095       162.484       169.885    
  52  0.798603     -0.224891      -2.72323       2.72323       159.959       162.682    
  53  0.474092E-01  -3.04894      -36.9199       36.9199       159.760       196.680    
  54  0.425084     -0.855468      -10.3589       10.3589       164.566       174.925    
  55  0.349722      -1.05062      -12.7220       12.7220       161.872       174.594    
  56  0.499235     -0.694678      -8.41193       8.41193       158.812       167.223    
  57  0.193091      -1.64459      -19.9145       19.9145       161.212       181.126    
  58  0.876894     -0.131369      -1.59076       1.59076       158.419       160.009    
  59  0.634591     -0.454774      -5.50690       5.50690       155.616       161.123    
  60  0.571394     -0.559676      -6.77718       6.77718       162.340       169.117    
  61  0.749680     -0.288108      -3.48873       3.48873       161.034       164.522    
  62  0.111050      -2.19777      -26.6131       26.6131       161.952       188.565    
  63  0.456811     -0.783485      -9.48729       9.48729       161.444       170.932    
  64  0.686362     -0.376350      -4.55726       4.55726       161.330       165.887    
  65  0.160608      -1.82879      -22.1450       22.1450       163.578       185.723    
  66  0.557454     -0.584375      -7.07625       7.07625       161.324       168.400    
  67  0.914976     -0.888571E-01  -1.07598       1.07598       165.069       166.144    
  68  0.203755      -1.59084      -19.2636       19.2636       166.809       186.072    
  69  0.851702     -0.160519      -1.94374       1.94374       158.348       160.292    
  70  0.770841     -0.260273      -3.15167       3.15167       158.403       161.554    
  71  0.137106      -1.98700      -24.0608       24.0608       163.261       187.322    
  72  0.142091      -1.95129      -23.6283       23.6283       162.078       185.707    
  73  0.833303E-01  -2.48494      -30.0904       30.0904       184.055       214.145    
  74  0.277948      -1.28032      -15.5035       15.5035       165.090       180.593    
  75  0.827288     -0.189602      -2.29591       2.29591       161.324       163.620    
loop,thermsimp(1:2)       11   1.01762       14.2176    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267        158.60          0.87          1.15         25.27          0.12          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    268        163.82          0.85          1.15         25.13          0.59          0.06         27.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       11
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       12
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      267     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -3.27758       3.27758       152.539       155.816    
   2  0.482922E-01  -3.03048      -36.6964       36.6964       154.957       191.653    
   3  0.612960     -0.489456      -5.92687       5.92687       158.335       164.261    
   4  0.910127     -0.941714E-01  -1.14033       1.14033       158.097       159.237    
   5  0.362433      -1.01492      -12.2897       12.2897       154.726       167.016    
   6  0.476779     -0.740702      -8.96924       8.96924       158.974       167.943    
   7  0.179006E-01  -4.02292      -48.7139       48.7139       156.586       205.300    
   8  0.589646     -0.528233      -6.39642       6.39642       158.419       164.815    
   9  0.926206     -0.766581E-01 -0.928261      0.928261       158.663       159.591    
  10  0.492629     -0.707999      -8.57323       8.57323       158.348       166.921    
  11  0.661123     -0.413815      -5.01092       5.01092       155.616       160.627    
  12  0.542248     -0.612032      -7.41115       7.41115       158.403       165.814    
  13  0.216527      -1.53004      -18.5274       18.5274       152.198       170.725    
  14  0.549832     -0.598143      -7.24297       7.24297       160.107       167.350    
  15  0.429556     -0.845003      -10.2322       10.2322       159.959       170.191    
  16  0.264838      -1.32864      -16.0886       16.0886       161.937       178.025    
  17  0.251706      -1.37949      -16.7044       16.7044       161.207       177.911    
  18  0.701724     -0.354215      -4.28922       4.28922       156.791       161.081    
  19  0.324289      -1.12612      -13.6363       13.6363       161.324       174.960    
  20  0.160749E-02  -6.43308      -77.8988       77.8988       156.242       234.140    
  21  0.533627     -0.628058      -7.60522       7.60522       160.242       167.847    
  22  0.883065     -0.124357      -1.50585       1.50585       161.034       162.539    
  23  0.484824     -0.723969      -8.76661       8.76661       163.436       172.202    
  24  0.724157     -0.322747      -3.90817       3.90817       162.643       166.551    
  25  0.847375     -0.165612      -2.00541       2.00541       162.947       164.952    
  26  0.167586      -1.78626      -21.6300       21.6300       161.050       182.680    
  27  0.890079     -0.116445      -1.41004       1.41004       160.604       162.014    
  28  0.235223      -1.44722      -17.5246       17.5246       159.336       176.861    
  29  0.206112      -1.57934      -19.1243       19.1243       161.330       180.454    
  30  0.463385     -0.769198      -9.31429       9.31429       165.069       174.383    
  31  0.487880E-01  -3.02027      -36.5727       36.5727       162.178       198.751    
  32  0.244157      -1.40994      -17.0731       17.0731       162.825       179.898    
  33  0.770602     -0.260583      -3.15542       3.15542       159.375       162.531    
  34  0.264159      -1.33120      -16.1197       16.1197       162.816       178.936    
  35  0.189030E-01  -3.96843      -48.0541       48.0541       158.812       206.866    
  36  0.635342     -0.453592      -5.49259       5.49259       161.324       166.816    
  37  0.139550      -1.96933      -23.8468       23.8468       159.717       183.564    
  38  0.561566     -0.577026      -6.98726       6.98726       161.708       168.695    
  39  0.951789     -0.494118E-01 -0.598332      0.598332       162.340       162.939    
  40  0.527693     -0.639242      -7.74064       7.74064       155.551       163.291    
  41  0.925337     -0.775972E-01 -0.939632      0.939632       162.484       163.424    
  42  0.795352     -0.228971      -2.77263       2.77263       162.571       165.344    
  43  0.530799     -0.633371      -7.66955       7.66955       161.444       169.114    
  44  0.642763     -0.441979      -5.35196       5.35196       156.387       161.739    
  45  0.485146     -0.723305      -8.75857       8.75857       164.031       172.790    
  46  0.795896     -0.228287      -2.76435       2.76435       153.690       156.455    
  47  0.519140     -0.655581      -7.93850       7.93850       158.785       166.723    
  48  0.694073E-01  -2.66776      -32.3042       32.3042       162.937       195.242    
  49  0.401486     -0.912583      -11.0506       11.0506       162.983       174.033    
  50  0.587982E-01  -2.83364      -34.3129       34.3129       160.210       194.523    
  51  0.752652     -0.284152      -3.44082       3.44082       160.681       164.122    
  52  0.139929      -1.96662      -23.8140       23.8140       157.199       181.013    
  53  0.136759      -1.98953      -24.0914       24.0914       161.872       185.963    
  54  0.690728     -0.370009      -4.48047       4.48047       164.566       169.047    
  55  0.409546     -0.892705      -10.8099       10.8099       160.765       171.575    
  56  0.422285     -0.862075      -10.4389       10.4389       162.195       172.634    
  57  0.160439      -1.82984      -22.1577       22.1577       160.049       182.207    
  58  0.230463      -1.46767      -17.7721       17.7721       170.733       188.505    
  59  0.836860     -0.178099      -2.15662       2.15662       164.796       166.952    
  60  0.635813     -0.452850      -5.48360       5.48360       165.090       170.573    
  61  0.464135     -0.767580      -9.29470       9.29470       161.212       170.507    
  62  0.999501     -0.498826E-03 -0.604033E-02  0.604033E-02   159.789       159.795    
  63  0.472031     -0.750710      -9.09041       9.09041       164.985       174.076    
  64  0.926290     -0.765681E-01 -0.927170      0.927170       158.917       159.844    
  65  0.825201E-01  -2.49471      -30.2087       30.2087       162.078       192.287    
  66  0.987125     -0.129587E-01 -0.156918      0.156918       163.578       163.735    
  67  0.902936     -0.102104      -1.23638       1.23638       166.809       168.045    
  68  0.269140E-01  -3.61511      -43.7757       43.7757       163.261       207.037    
  69  0.343181      -1.06950      -12.9506       12.9506       161.952       174.902    
  70  0.364015      -1.01056      -12.2370       12.2370       161.557       173.794    
  71  0.420237     -0.866937      -10.4978       10.4978       161.525       172.022    
  72  0.806946     -0.214499      -2.59738       2.59738       159.455       162.053    
  73  0.545083     -0.606816      -7.34800       7.34800       159.760       167.108    
  74  0.651758     -0.428082      -5.18368       5.18368       161.736       166.920    
  75  0.308338E-01  -3.47915      -42.1293       42.1293       158.595       200.724    
loop,thermsimp(1:2)       12   3.27758       36.6964    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269        164.92          0.85          1.12         25.19          0.49          0.05         27.70
Just calling func    0   0         27.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    270        166.01          0.86          1.11         25.19          0.27          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    164.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       12
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       13
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      269     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -6.33165       6.33165       152.539       158.870    
   2  0.691791     -0.368472      -4.46186       4.46186       153.690       158.152    
   3  0.688173     -0.373715      -4.52535       4.52535       158.097       162.622    
   4  0.439966     -0.821058      -9.94226       9.94226       158.663       168.605    
   5  0.945690     -0.558403E-01 -0.676175      0.676175       159.789       160.466    
   6  0.238956      -1.43147      -17.3339       17.3339       158.917       176.251    
   7  0.280830E-01  -3.57259      -43.2608       43.2608       155.616       198.877    
   8  0.902031E-01  -2.40569      -29.1307       29.1307       156.791       185.922    
   9  0.198361      -1.61767      -19.5885       19.5885       156.387       175.976    
  10  0.201288      -1.60302      -19.4111       19.4111       160.604       180.015    
  11  0.710033     -0.342444      -4.14669       4.14669       159.455       163.602    
  12  0.182913      -1.69874      -20.5703       20.5703       159.375       179.946    
  13  0.817316     -0.201730      -2.44276       2.44276       161.034       163.476    
  14  0.894732     -0.111231      -1.34690       1.34690       162.340       163.687    
  15  0.854000     -0.157824      -1.91111       1.91111       155.551       157.462    
  16  0.248066      -1.39406      -16.8808       16.8808       162.484       179.365    
  17  0.670877     -0.399170      -4.83358       4.83358       163.578       168.411    
  18  0.701473     -0.354573      -4.29356       4.29356       160.681       164.974    
  19  0.199467      -1.61210      -19.5211       19.5211       158.335       177.856    
  20  0.391533     -0.937685      -11.3545       11.3545       158.419       169.773    
  21  0.586761     -0.533138      -6.45581       6.45581       162.947       169.403    
  22  0.163799      -1.80912      -21.9067       21.9067       162.571       184.478    
  23  0.955964     -0.450353E-01 -0.545336      0.545336       158.403       158.948    
  24  0.365727      -1.00587      -12.1801       12.1801       162.643       174.823    
  25  0.733577     -0.309822      -3.75167       3.75167       158.785       162.536    
  26  0.111597      -2.19286      -26.5536       26.5536       161.324       187.877    
  27  0.714895     -0.335619      -4.06404       4.06404       161.736       165.800    
  28  0.816688     -0.202498      -2.45207       2.45207       158.348       160.800    
  29  0.480603     -0.732714      -8.87250       8.87250       164.796       173.668    
  30  0.573891     -0.555316      -6.72437       6.72437       154.726       161.451    
  31  0.204452      -1.58742      -19.2222       19.2222       159.760       178.982    
  32  0.845356E-01  -2.47058      -29.9165       29.9165       160.107       190.024    
  33  0.524789E-01  -2.94734      -35.6897       35.6897       160.242       195.932    
  34  0.631781     -0.459213      -5.56065       5.56065       158.974       164.534    
  35  0.620363     -0.477450      -5.78149       5.78149       166.809       172.590    
  36  0.553551     -0.591402      -7.16134       7.16134       161.708       168.869    
  37  0.546271     -0.604640      -7.32164       7.32164       164.566       171.888    
  38  0.402204     -0.910797      -11.0289       11.0289       161.444       172.473    
  39  0.735174     -0.307648      -3.72533       3.72533       159.959       163.684    
  40  0.359565      -1.02286      -12.3859       12.3859       161.212       173.598    
  41  0.564111     -0.572504      -6.93251       6.93251       165.090       172.022    
  42  0.412661     -0.885128      -10.7181       10.7181       152.198       162.916    
  43  0.795853     -0.228341      -2.76500       2.76500       160.765       163.530    
  44  0.909991E-01  -2.39691      -29.0244       29.0244       161.525       190.549    
  45  0.830687     -0.185502      -2.24626       2.24626       163.436       165.682    
  46  0.592588     -0.523256      -6.33615       6.33615       162.195       168.531    
  47  0.489472     -0.714427      -8.65107       8.65107       164.031       172.682    
  48  0.992056     -0.797586E-02 -0.965804E-01  0.965804E-01   161.557       161.654    
  49  0.808208     -0.212936      -2.57846       2.57846       162.983       165.561    
  50  0.212569      -1.54849      -18.7508       18.7508       164.985       183.736    
  51  0.214041      -1.54159      -18.6673       18.6673       165.069       183.736    
  52  0.586527     -0.533536      -6.46064       6.46064       161.952       168.412    
  53  0.603460     -0.505075      -6.11600       6.11600       161.324       167.440    
  54  0.819887     -0.198589      -2.40473       2.40473       159.336       161.741    
  55  0.204248      -1.58842      -19.2343       19.2343       161.207       180.441    
  56  0.540917     -0.614489      -7.44091       7.44091       161.937       169.378    
  57  0.430522     -0.842757      -10.2050       10.2050       162.816       173.021    
  58  0.637009E-01  -2.75356      -33.3431       33.3431       162.825       196.168    
  59  0.872387     -0.136522      -1.65316       1.65316       161.330       162.983    
  60  0.740351     -0.300631      -3.64037       3.64037       157.199       160.840    
  61  0.844085     -0.169502      -2.05252       2.05252       160.049       162.102    
  62  0.574613     -0.554058      -6.70914       6.70914       161.050       167.759    
  63  0.382052     -0.962198      -11.6513       11.6513       159.717       171.369    
  64  0.564583     -0.571667      -6.92237       6.92237       161.872       168.794    
  65  0.700807     -0.355522      -4.30505       4.30505       170.733       175.038    
  66  0.237235      -1.43870      -17.4214       17.4214       154.957       172.378    
  67  0.745904     -0.293158      -3.54988       3.54988       162.078       165.628    
  68  0.369081     -0.996740      -12.0696       12.0696       160.210       172.280    
  69  0.512148     -0.669141      -8.10269       8.10269       162.937       171.040    
  70  0.239900E-01  -3.73012      -45.1683       45.1683       162.178       207.346    
  71  0.364860E-01  -3.31083      -40.0911       40.0911       158.595       198.686    
  72  0.792805E-01  -2.53476      -30.6937       30.6937       156.586       187.280    
  73  0.400998     -0.913800      -11.0653       11.0653       158.812       169.877    
  74  0.784935     -0.242154      -2.93226       2.93226       163.261       166.193    
  75  0.306234      -1.18341      -14.3300       14.3300       164.924       179.254    
loop,thermsimp(1:2)       13   6.33165       4.46186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271        157.10          0.86          1.14         25.25          0.19          0.05         27.51
Just calling func    0   0         27.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272        152.04          0.86          1.14         25.22          0.16          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       13
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       14
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      271     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -13.0997       13.0997       155.551       168.650    
   2  0.649641     -0.431335      -5.22308       5.22308       153.690       158.913    
   3  0.930116     -0.724456E-01 -0.877251      0.877251       152.539       153.416    
   4  0.297326      -1.21293      -14.6874       14.6874       158.403       173.090    
   5  0.751734     -0.285373      -3.45560       3.45560       159.789       163.245    
   6  0.409056     -0.893902      -10.8243       10.8243       158.348       169.172    
   7  0.115094      -2.16201      -26.1799       26.1799       157.199       183.379    
   8  0.606681     -0.499753      -6.05155       6.05155       154.726       160.778    
   9  0.140571      -1.96204      -23.7586       23.7586       161.557       185.316    
  10  0.447669E-01  -3.10629      -37.6143       37.6143       159.336       196.951    
  11  0.517394     -0.658951      -7.97930       7.97930       160.049       168.028    
  12  0.587057     -0.532633      -6.44970       6.44970       158.785       165.234    
  13  0.384993E-01  -3.25712      -39.4407       39.4407       158.097       197.537    
  14  0.829105E-01  -2.48999      -30.1516       30.1516       152.198       182.350    
  15  0.382179     -0.961866      -11.6473       11.6473       161.330       172.977    
  16  0.269516      -1.31113      -15.8766       15.8766       161.034       176.910    
  17  0.879580     -0.128311      -1.55373       1.55373       160.765       162.319    
  18  0.760503E-01  -2.57636      -31.1974       31.1974       159.455       190.653    
  19  0.482544     -0.728684      -8.82370       8.82370       159.959       168.783    
  20  0.561499     -0.577145      -6.98871       6.98871       162.340       169.329    
  21  0.254621      -1.36798      -16.5650       16.5650       158.974       175.539    
  22  0.479261     -0.735511      -8.90637       8.90637       160.681       169.587    
  23  0.638455     -0.448704      -5.43340       5.43340       162.983       168.416    
  24  0.289082      -1.24105      -15.0279       15.0279       162.078       177.106    
  25  0.656024     -0.421558      -5.10469       5.10469       163.436       168.540    
  26  0.597431     -0.515117      -6.23760       6.23760       161.736       167.974    
  27  0.859562     -0.151333      -1.83250       1.83250       163.261       165.093    
  28  0.554826     -0.589100      -7.13347       7.13347       161.324       168.457    
  29  0.128413      -2.05250      -24.8540       24.8540       161.050       185.904    
  30  0.311170      -1.16742      -14.1364       14.1364       163.578       177.714    
  31  0.606679     -0.499755      -6.05158       6.05158       161.952       168.003    
  32  0.923238     -0.798686E-01 -0.967136      0.967136       162.195       163.162    
  33  0.734154     -0.309037      -3.74216       3.74216       158.663       162.405    
  34  0.988670     -0.113947E-01 -0.137980      0.137980       161.872       162.010    
  35  0.136308      -1.99284      -24.1315       24.1315       161.708       185.840    
  36  0.345839      -1.06178      -12.8572       12.8572       161.937       174.794    
  37  0.349440      -1.05142      -12.7318       12.7318       162.947       175.679    
  38  0.625658E-01  -2.77154      -33.5608       33.5608       158.419       191.979    
  39  0.394804     -0.929365      -11.2538       11.2538       158.812       170.065    
  40  0.899667E-02  -4.71090      -57.0447       57.0447       162.937       219.982    
  41  0.823946     -0.193651      -2.34493       2.34493       159.717       162.062    
  42  0.834235     -0.181240      -2.19466       2.19466       164.566       166.761    
  43  0.777534     -0.251627      -3.04698       3.04698       165.090       168.137    
  44  0.384993     -0.954531      -11.5585       11.5585       160.210       171.769    
  45  0.247443E-01  -3.69916      -44.7935       44.7935       154.957       199.750    
  46  0.810695     -0.209863      -2.54125       2.54125       161.444       163.986    
  47  0.893618     -0.112477      -1.36199       1.36199       166.809       168.171    
  48  0.545617     -0.605837      -7.33614       7.33614       164.031       171.367    
  49  0.587193     -0.532402      -6.44691       6.44691       162.816       169.263    
  50  0.991207     -0.883185E-02 -0.106946      0.106946       161.212       161.319    
  51  0.477440     -0.739316      -8.95245       8.95245       164.796       173.748    
  52  0.444858     -0.810000      -9.80836       9.80836       162.643       172.451    
  53  0.103440      -2.26876      -27.4727       27.4727       170.733       198.206    
  54  0.320718      -1.13719      -13.7704       13.7704       156.387       170.157    
  55  0.161721      -1.82188      -22.0614       22.0614       158.917       180.978    
  56  0.912244     -0.918481E-01  -1.11220       1.11220       158.335       159.447    
  57  0.358583      -1.02559      -12.4190       12.4190       159.760       172.179    
  58  0.263871      -1.33229      -16.1329       16.1329       164.924       181.056    
  59  0.782230     -0.245606      -2.97407       2.97407       162.484       165.458    
  60  0.592946     -0.522652      -6.32884       6.32884       159.375       165.704    
  61  0.652732     -0.426589      -5.16560       5.16560       160.604       165.770    
  62  0.817021     -0.202091      -2.44714       2.44714       161.207       163.654    
  63  0.177213      -1.73040      -20.9536       20.9536       165.069       186.022    
  64  0.263258      -1.33462      -16.1610       16.1610       164.985       181.146    
  65  0.856937     -0.154391      -1.86953       1.86953       162.571       164.440    
  66  0.541629E-01  -2.91576      -35.3072       35.3072       156.791       192.099    
  67  0.919404     -0.840293E-01  -1.01752       1.01752       156.586       157.604    
  68  0.996572     -0.343426E-02 -0.415858E-01  0.415858E-01   161.324       161.365    
  69  0.257654      -1.35614      -16.4216       16.4216       160.107       176.529    
  70  0.684182     -0.379532      -4.59579       4.59579       161.525       166.120    
  71  0.870041     -0.139215      -1.68576       1.68576       160.242       161.928    
  72  0.854707     -0.156997      -1.90109       1.90109       162.825       164.726    
  73  0.195719      -1.63108      -19.7509       19.7509       158.595       178.346    
  74  0.352846      -1.04172      -12.6143       12.6143       155.616       168.230    
  75  0.152754      -1.87893      -22.7521       22.7521       152.040       174.792    
loop,thermsimp(1:2)       14   13.0997       5.22308    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273        158.49          0.87          1.15         25.17          0.22          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    158.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       14
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       15
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      272     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -18.3499       18.3499       152.539       170.889    
   2  0.894567E-01  -2.41400      -29.2314       29.2314       156.586       185.818    
   3  0.863615     -0.146628      -1.77553       1.77553       153.690       155.466    
   4  0.807990     -0.213206      -2.58173       2.58173       158.335       160.916    
   5  0.318173      -1.14516      -13.8669       13.8669       154.726       168.593    
   6  0.464606     -0.766566      -9.28241       9.28241       161.212       170.494    
   7  0.574933     -0.553501      -6.70240       6.70240       161.324       168.026    
   8  0.974939     -0.253802E-01 -0.307331      0.307331       160.242       160.549    
   9  0.415757     -0.877653      -10.6276       10.6276       161.872       172.500    
  10  0.187109      -1.67606      -20.2956       20.2956       159.717       180.013    
  11  0.730515E-01  -2.61659      -31.6845       31.6845       160.765       192.450    
  12  0.209185      -1.56454      -18.9451       18.9451       158.663       177.608    
  13  0.496690     -0.699790      -8.47382       8.47382       162.195       170.668    
  14  0.862986     -0.147356      -1.78435       1.78435       159.789       161.574    
  15  0.888200     -0.118558      -1.43563       1.43563       161.207       162.643    
  16  0.380888     -0.965250      -11.6883       11.6883       161.444       173.133    
  17  0.135305      -2.00022      -24.2209       24.2209       162.571       186.792    
  18  0.927079     -0.757167E-01 -0.916860      0.916860       162.825       163.742    
  19  0.603067     -0.505727      -6.12389       6.12389       163.261       169.385    
  20  0.136202      -1.99362      -24.1409       24.1409       158.785       182.926    
  21  0.954653     -0.464076E-01 -0.561954      0.561954       162.484       163.046    
  22  0.151192      -1.88920      -22.8766       22.8766       159.375       182.252    
  23  0.449259     -0.800155      -9.68916       9.68916       160.604       170.293    
  24  0.780874     -0.247341      -2.99508       2.99508       161.525       164.520    
  25  0.456238     -0.784740      -9.50249       9.50249       164.566       174.069    
  26  0.163284      -1.81227      -21.9449       21.9449       161.736       183.681    
  27  0.821444     -0.196692      -2.38176       2.38176       161.952       164.334    
  28  0.861448     -0.149141      -1.80596       1.80596       160.049       161.855    
  29  0.924167     -0.788621E-01 -0.954948      0.954948       165.090       166.045    
  30  0.195059      -1.63445      -19.7918       19.7918       166.809       186.601    
  31  0.375134     -0.980472      -11.8726       11.8726       155.616       167.489    
  32  0.909862     -0.944628E-01  -1.14386       1.14386       162.983       164.126    
  33  0.831459     -0.184574      -2.23502       2.23502       161.324       163.559    
  34  0.627278     -0.466365      -5.64726       5.64726       163.436       169.083    
  35  0.918890     -0.845891E-01  -1.02430       1.02430       155.551       156.575    
  36  0.475784     -0.742791      -8.99452       8.99452       159.959       168.954    
  37  0.344524      -1.06559      -12.9034       12.9034       158.348       171.251    
  38  0.286778      -1.24905      -15.1248       15.1248       162.816       177.941    
  39  0.336148      -1.09020      -13.2014       13.2014       162.340       175.542    
  40  0.709840     -0.342716      -4.14998       4.14998       160.681       164.831    
  41  0.219827      -1.51491      -18.3442       18.3442       158.812       177.156    
  42  0.347594      -1.05672      -12.7959       12.7959       156.387       169.183    
  43  0.905734     -0.990099E-01  -1.19892       1.19892       164.031       165.230    
  44  0.826231     -0.190881      -2.31139       2.31139       160.210       162.522    
  45  0.400277     -0.915599      -11.0871       11.0871       159.760       170.847    
  46  0.555153     -0.588512      -7.12635       7.12635       162.643       169.769    
  47  0.864397     -0.145723      -1.76458       1.76458       161.330       163.094    
  48  0.277380E-01  -3.58495      -43.4105       43.4105       158.403       201.813    
  49  0.993968     -0.605015E-02 -0.732619E-01  0.732619E-01   164.796       164.869    
  50  0.717076     -0.332573      -4.02716       4.02716       152.040       156.067    
  51  0.736253     -0.306182      -3.70758       3.70758       161.937       165.644    
  52  0.278813      -1.27722      -15.4659       15.4659       158.974       174.440    
  53  0.646460     -0.436245      -5.28253       5.28253       162.947       168.230    
  54  0.600312     -0.510306      -6.17934       6.17934       160.107       166.287    
  55  0.295434      -1.21931      -14.7648       14.7648       161.034       175.798    
  56  0.946129     -0.553767E-01 -0.670561      0.670561       162.078       162.749    
  57  0.722008     -0.325719      -3.94416       3.94416       163.578       167.522    
  58  0.789514     -0.236338      -2.86184       2.86184       158.595       161.457    
  59  0.955429     -0.455949E-01 -0.552113      0.552113       158.917       159.469    
  60  0.693546     -0.365938      -4.43117       4.43117       164.924       169.355    
  61  0.979434     -0.207808E-01 -0.251637      0.251637       164.985       165.237    
  62  0.860966     -0.149700      -1.81273       1.81273       152.198       154.011    
  63  0.329063      -1.11151      -13.4593       13.4593       157.199       170.659    
  64  0.839540     -0.174902      -2.11790       2.11790       161.557       163.675    
  65  0.511945     -0.669538      -8.10750       8.10750       161.708       169.816    
  66  0.265617      -1.32570      -16.0530       16.0530       161.050       177.103    
  67  0.793213     -0.231663      -2.80523       2.80523       165.069       167.874    
  68  0.515723     -0.662186      -8.01848       8.01848       159.455       167.474    
  69  0.928816     -0.738450E-01 -0.894195      0.894195       158.419       159.313    
  70  0.936254     -0.658686E-01 -0.797609      0.797609       156.791       157.589    
  71  0.735848     -0.306732      -3.71425       3.71425       159.336       163.051    
  72  0.194591      -1.63686      -19.8208       19.8208       158.097       177.918    
  73  0.834124     -0.181373      -2.19626       2.19626       170.733       172.929    
  74  0.129274      -2.04582      -24.7730       24.7730       154.957       179.730    
  75  0.143380      -1.94226      -23.5190       23.5190       158.490       182.009    
loop,thermsimp(1:2)       15   18.3499       29.2314    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274        167.86          0.86          1.15         25.23          0.17          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    167.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       15
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       16
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      273     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -17.7060       17.7060       152.198       169.904    
   2  0.641193     -0.444425      -5.38158       5.38158       153.690       159.072    
   3  0.353033      -1.04119      -12.6079       12.6079       152.040       164.648    
   4  0.928955     -0.736953E-01 -0.892383      0.892383       155.551       156.443    
   5  0.350257      -1.04909      -12.7035       12.7035       156.791       169.495    
   6  0.682617     -0.381821      -4.62351       4.62351       158.419       163.042    
   7  0.162763      -1.81546      -21.9836       21.9836       158.917       180.900    
   8  0.874032     -0.134639      -1.63035       1.63035       160.242       161.872    
   9  0.518909     -0.656027      -7.94389       7.94389       158.335       166.278    
  10  0.461984     -0.772226      -9.35096       9.35096       158.595       167.946    
  11  0.449468     -0.799691      -9.68353       9.68353       159.789       169.473    
  12  0.523281     -0.647637      -7.84230       7.84230       160.049       167.891    
  13  0.637377     -0.450394      -5.45387       5.45387       160.210       165.664    
  14  0.596329     -0.516963      -6.25996       6.25996       161.207       167.467    
  15  0.286246      -1.25090      -15.1473       15.1473       162.078       177.226    
  16  0.590425     -0.526913      -6.38044       6.38044       162.484       168.865    
  17  0.853637     -0.158249      -1.91625       1.91625       159.336       161.253    
  18  0.245572      -1.40416      -17.0032       17.0032       161.330       178.333    
  19  0.375654     -0.979088      -11.8559       11.8559       161.324       173.180    
  20  0.281654      -1.26708      -15.3431       15.3431       161.557       176.900    
  21  0.443392     -0.813302      -9.84835       9.84835       162.825       172.673    
  22  0.442934     -0.814335      -9.86086       9.86086       162.983       172.843    
  23  0.171790      -1.76149      -21.3300       21.3300       161.952       183.282    
  24  0.802582     -0.219921      -2.66305       2.66305       161.525       164.188    
  25  0.162733      -1.81564      -21.9858       21.9858       160.681       182.667    
  26  0.838320     -0.176355      -2.13550       2.13550       164.796       166.931    
  27  0.210754      -1.55706      -18.8546       18.8546       164.031       182.886    
  28  0.240377      -1.42554      -17.2621       17.2621       164.985       182.247    
  29  0.173042E-01  -4.05680      -49.1242       49.1242       161.937       211.061    
  30  0.640146     -0.446059      -5.40137       5.40137       165.090       170.491    
  31  0.749210     -0.288736      -3.49633       3.49633       160.107       163.604    
  32  0.666162     -0.406222      -4.91898       4.91898       159.455       164.374    
  33  0.601746     -0.507920      -6.15045       6.15045       155.616       161.766    
  34  0.677044     -0.390020      -4.72278       4.72278       163.578       168.301    
  35  0.290379      -1.23657      -14.9737       14.9737       165.069       180.042    
  36  0.439723     -0.821610      -9.94896       9.94896       161.324       171.273    
  37  0.680091     -0.385528      -4.66840       4.66840       162.947       167.615    
  38  0.803784     -0.218425      -2.64493       2.64493       154.726       157.371    
  39  0.507823     -0.677622      -8.20539       8.20539       159.959       168.165    
  40  0.894573     -0.111408      -1.34905       1.34905       163.436       164.785    
  41  0.826908     -0.190062      -2.30148       2.30148       156.387       158.689    
  42  0.815562     -0.203878      -2.46878       2.46878       164.924       167.392    
  43  0.352457      -1.04283      -12.6277       12.6277       163.261       175.889    
  44  0.104059      -2.26279      -27.4004       27.4004       162.643       190.044    
  45  0.601892     -0.507677      -6.14751       6.14751       161.708       167.856    
  46  0.988184     -0.118862E-01 -0.143931      0.143931       160.604       160.748    
  47  0.733912     -0.309366      -3.74614       3.74614       161.212       164.958    
  48  0.107394      -2.23125      -27.0184       27.0184       157.199       184.218    
  49  0.592150     -0.523995      -6.34511       6.34511       162.195       168.540    
  50  0.821901     -0.196136      -2.37502       2.37502       159.760       162.135    
  51  0.400070E-01  -3.21870      -38.9756       38.9756       152.539       191.514    
  52  0.271211      -1.30486      -15.8007       15.8007       158.348       174.148    
  53  0.296309      -1.21635      -14.7289       14.7289       161.872       176.601    
  54  0.436334     -0.829346      -10.0426       10.0426       170.733       180.776    
  55  0.372372     -0.987863      -11.9621       11.9621       161.444       173.406    
  56  0.806182     -0.215446      -2.60885       2.60885       164.566       167.175    
  57  0.194087      -1.63945      -19.8522       19.8522       158.974       178.826    
  58  0.739876     -0.301273      -3.64814       3.64814       162.340       165.988    
  59  0.348380      -1.05446      -12.7686       12.7686       161.034       173.802    
  60  0.850149     -0.162343      -1.96583       1.96583       161.050       163.016    
  61  0.123296      -2.09317      -25.3463       25.3463       158.812       184.158    
  62  0.855160     -0.156467      -1.89467       1.89467       158.663       160.557    
  63  0.959969E-01  -2.34344      -28.3769       28.3769       158.097       186.474    
  64  0.739916     -0.301218      -3.64748       3.64748       162.816       166.463    
  65  0.470406     -0.754159      -9.13218       9.13218       154.957       164.089    
  66  0.559264     -0.581134      -7.03701       7.03701       159.717       166.754    
  67  0.935836     -0.663155E-01 -0.803021      0.803021       158.490       159.293    
  68  0.190508      -1.65806      -20.0776       20.0776       159.375       179.453    
  69  0.410140     -0.891256      -10.7923       10.7923       158.785       169.577    
  70  0.289980E-01  -3.54053      -42.8726       42.8726       161.736       204.609    
  71  0.401138     -0.913450      -11.0611       11.0611       156.586       167.648    
  72  0.695873     -0.362588      -4.39061       4.39061       166.809       171.199    
  73  0.405124     -0.903562      -10.9413       10.9413       162.571       173.512    
  74  0.584331     -0.537288      -6.50607       6.50607       160.765       167.271    
  75  0.518482     -0.656851      -7.95387       7.95387       167.860       175.814    
loop,thermsimp(1:2)       16   17.7060       5.38158    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275        157.69          0.86          1.16         25.21          0.35          0.05         27.63
Just calling func    0   0         27.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    157.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       16
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       17
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      274     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -3.05666       3.05666       155.551       158.607    
   2  0.350417      -1.04863      -12.6980       12.6980       154.726       167.424    
   3  0.533846     -0.627648      -7.60025       7.60025       156.387       163.987    
   4  0.622955     -0.473280      -5.73100       5.73100       153.690       159.421    
   5  0.661091E-01  -2.71645      -32.8937       32.8937       158.490       191.384    
   6  0.759206     -0.275482      -3.33584       3.33584       158.663       161.998    
   7  0.430535     -0.842727      -10.2047       10.2047       160.604       170.809    
   8  0.257678      -1.35604      -16.4205       16.4205       159.336       175.757    
   9  0.296561      -1.21550      -14.7186       14.7186       155.616       170.334    
  10  0.805929     -0.215760      -2.61265       2.61265       160.242       162.855    
  11  0.421616     -0.863661      -10.4581       10.4581       159.760       170.218    
  12  0.767803     -0.264223      -3.19950       3.19950       161.050       164.249    
  13  0.605260     -0.502097      -6.07994       6.07994       158.419       164.499    
  14  0.566784     -0.567776      -6.87526       6.87526       160.107       166.983    
  15  0.292740      -1.22847      -14.8757       14.8757       154.957       169.832    
  16  0.898463     -0.107069      -1.29651       1.29651       161.525       162.821    
  17  0.218067      -1.52295      -18.4416       18.4416       159.455       177.897    
  18  0.856756     -0.154603      -1.87210       1.87210       152.040       153.912    
  19  0.338883      -1.08210      -13.1033       13.1033       163.436       176.539    
  20  0.796034     -0.228113      -2.76225       2.76225       161.212       163.974    
  21  0.778636     -0.250212      -3.02984       3.02984       160.210       163.240    
  22  0.575989     -0.551667      -6.68019       6.68019       162.340       169.020    
  23  0.355531      -1.03414      -12.5225       12.5225       158.335       170.857    
  24  0.164949      -1.80212      -21.8221       21.8221       162.816       184.638    
  25  0.315998      -1.15202      -13.9499       13.9499       159.717       173.667    
  26  0.330933      -1.10584      -13.3907       13.3907       164.796       178.186    
  27  0.429436     -0.845283      -10.2356       10.2356       164.566       174.802    
  28  0.464808     -0.766130      -9.27714       9.27714       160.765       170.042    
  29  0.192211      -1.64916      -19.9699       19.9699       164.924       184.893    
  30  0.866849     -0.142891      -1.73027       1.73027       161.207       162.937    
  31  0.474973     -0.744498      -9.01520       9.01520       162.947       171.962    
  32  0.667713     -0.403897      -4.89082       4.89082       156.586       161.477    
  33  0.994155     -0.586200E-02 -0.709835E-01  0.709835E-01   161.708       161.779    
  34  0.577739     -0.548634      -6.64346       6.64346       160.049       166.692    
  35  0.381919     -0.962546      -11.6556       11.6556       158.595       170.251    
  36  0.733204     -0.310331      -3.75783       3.75783       159.959       163.717    
  37  0.492382     -0.708500      -8.57930       8.57930       163.578       172.157    
  38  0.188899E-01  -3.96913      -48.0626       48.0626       162.195       210.257    
  39  0.741920E-01  -2.60110      -31.4969       31.4969       162.484       193.981    
  40  0.210592      -1.55783      -18.8639       18.8639       159.789       178.653    
  41  0.682838     -0.381498      -4.61960       4.61960       156.791       161.411    
  42  0.656831     -0.420328      -5.08979       5.08979       158.785       163.874    
  43  0.444670     -0.810424      -9.81350       9.81350       152.198       162.012    
  44  0.872301     -0.136621      -1.65436       1.65436       165.090       166.744    
  45  0.932741     -0.696282E-01 -0.843134      0.843134       166.809       167.652    
  46  0.601727     -0.507951      -6.15083       6.15083       161.324       167.474    
  47  0.940344     -0.615097E-01 -0.744827      0.744827       162.825       163.569    
  48  0.208477E-01  -3.87051      -46.8684       46.8684       162.983       209.851    
  49  0.257831      -1.35545      -16.4133       16.4133       161.324       177.737    
  50  0.522803     -0.648550      -7.85335       7.85335       161.444       169.298    
  51  0.676437     -0.390915      -4.73363       4.73363       162.571       167.305    
  52  0.612346     -0.490458      -5.93900       5.93900       161.034       166.973    
  53  0.206854      -1.57574      -19.0808       19.0808       158.348       177.429    
  54  0.201156      -1.60367      -19.4190       19.4190       167.860       187.279    
  55  0.785118     -0.241921      -2.92944       2.92944       163.261       166.190    
  56  0.534951     -0.625580      -7.57521       7.57521       161.872       169.447    
  57  0.147432      -1.91439      -23.1815       23.1815       161.557       184.739    
  58  0.696605     -0.361537      -4.37789       4.37789       162.078       166.456    
  59  0.711810     -0.339944      -4.11641       4.11641       161.330       165.446    
  60  0.934269     -0.679906E-01 -0.823304      0.823304       158.974       159.797    
  61  0.821040     -0.197183      -2.38771       2.38771       159.375       161.763    
  62  0.682914     -0.381386      -4.61824       4.61824       165.069       169.687    
  63  0.660876     -0.414189      -5.01546       5.01546       170.733       175.749    
  64  0.653213     -0.425852      -5.15668       5.15668       158.917       164.074    
  65  0.327611      -1.11593      -13.5129       13.5129       164.985       178.498    
  66  0.191936      -1.65059      -19.9872       19.9872       160.681       180.668    
  67  0.417647E-01  -3.17570      -38.4549       38.4549       164.031       202.486    
  68  0.629872     -0.462239      -5.59730       5.59730       161.952       167.549    
  69  0.391125     -0.938727      -11.3671       11.3671       158.812       170.179    
  70  0.111121      -2.19714      -26.6054       26.6054       157.199       183.805    
  71  0.315632      -1.15318      -13.9639       13.9639       158.097       172.061    
  72  0.335886      -1.09098      -13.2108       13.2108       162.643       175.854    
  73  0.742251     -0.298067      -3.60932       3.60932       152.539       156.148    
  74  0.319217      -1.14188      -13.8272       13.8272       161.736       175.563    
  75  0.903047     -0.101981      -1.23490       1.23490       157.688       158.923    
loop,thermsimp(1:2)       17   3.05666       12.6980    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276        155.11          0.87          1.15         25.21          0.13          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    277        157.62          0.86          1.13         25.21          0.38          0.06         27.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    155.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       17
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       18
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      276     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -17.2612       17.2612       152.040       169.301    
   2  0.711556E-02  -4.94547      -59.8852       59.8852       152.539       212.424    
   3  0.909796     -0.945347E-01  -1.14473       1.14473       155.551       156.695    
   4  0.659218     -0.416702      -5.04588       5.04588       157.688       162.734    
   5  0.833482     -0.182144      -2.20559       2.20559       153.690       155.896    
   6  0.726295E-01  -2.62238      -31.7547       31.7547       158.974       190.728    
   7  0.687091     -0.375288      -4.54440       4.54440       156.791       161.336    
   8  0.860775     -0.149922      -1.81542       1.81542       156.586       158.402    
   9  0.846215     -0.166982      -2.02200       2.02200       159.375       161.397    
  10  0.398551     -0.919919      -11.1394       11.1394       161.708       172.848    
  11  0.416092     -0.876849      -10.6178       10.6178       158.663       169.280    
  12  0.463389     -0.769189      -9.31418       9.31418       152.198       161.512    
  13  0.207356      -1.57332      -19.0515       19.0515       161.525       180.576    
  14  0.133003      -2.01738      -24.4287       24.4287       160.242       184.671    
  15  0.464971     -0.765779      -9.27289       9.27289       161.207       170.480    
  16  0.568281     -0.565140      -6.84333       6.84333       160.210       167.054    
  17  0.638811     -0.448147      -5.42665       5.42665       162.825       168.251    
  18  0.865664     -0.144259      -1.74684       1.74684       159.959       161.706    
  19  0.475002     -0.744436      -9.01445       9.01445       158.785       167.799    
  20  0.537086     -0.621597      -7.52698       7.52698       161.212       168.739    
  21  0.782345     -0.245459      -2.97229       2.97229       156.387       159.359    
  22  0.725469     -0.320937      -3.88625       3.88625       158.917       162.803    
  23  0.701426E-01  -2.65723      -32.1766       32.1766       161.050       193.226    
  24  0.297043      -1.21388      -14.6990       14.6990       158.419       173.118    
  25  0.444870     -0.809973      -9.80804       9.80804       161.330       171.138    
  26  0.685684     -0.377338      -4.56922       4.56922       163.261       167.830    
  27  0.651244     -0.428871      -5.19324       5.19324       162.078       167.271    
  28  0.269082      -1.31274      -15.8961       15.8961       160.049       175.945    
  29  0.177107      -1.73100      -20.9609       20.9609       165.090       186.051    
  30  0.766464     -0.265968      -3.22063       3.22063       161.034       164.254    
  31  0.801833     -0.220855      -2.67435       2.67435       160.107       162.782    
  32  0.759414     -0.275209      -3.33253       3.33253       162.571       165.903    
  33  0.566307     -0.568618      -6.88545       6.88545       154.726       161.612    
  34  0.297948      -1.21084      -14.6621       14.6621       161.324       175.986    
  35  0.430097E-01  -3.14633      -38.0992       38.0992       161.952       200.051    
  36  0.529414     -0.635984      -7.70119       7.70119       166.809       174.510    
  37  0.717133     -0.332494      -4.02620       4.02620       162.340       166.366    
  38  0.209457      -1.56323      -18.9294       18.9294       161.444       180.374    
  39  0.732428     -0.311390      -3.77065       3.77065       161.872       165.643    
  40  0.697782     -0.359849      -4.35744       4.35744       165.069       169.426    
  41  0.977227     -0.230362E-01 -0.278947      0.278947       154.957       155.235    
  42  0.744700     -0.294773      -3.56944       3.56944       160.765       164.334    
  43  0.713341     -0.337796      -4.09041       4.09041       158.812       162.902    
  44  0.497823     -0.697510      -8.44622       8.44622       159.760       168.206    
  45  0.968758     -0.317404E-01 -0.384347      0.384347       158.595       158.979    
  46  0.287665      -1.24596      -15.0874       15.0874       155.616       170.703    
  47  0.964672     -0.359674E-01 -0.435532      0.435532       160.604       161.040    
  48  0.733769     -0.309561      -3.74851       3.74851       158.335       162.083    
  49  0.692680     -0.367187      -4.44631       4.44631       162.947       167.393    
  50  0.328873      -1.11208      -13.4663       13.4663       158.097       171.563    
  51  0.744920     -0.294478      -3.56587       3.56587       163.578       167.144    
  52  0.655188     -0.422834      -5.12013       5.12013       159.717       164.837    
  53  0.255467      -1.36466      -16.5248       16.5248       164.566       181.091    
  54  0.262199E-02  -5.94382      -71.9743       71.9743       161.736       233.711    
  55  0.538310     -0.619321      -7.49941       7.49941       170.733       178.233    
  56  0.456270     -0.784671      -9.50166       9.50166       159.336       168.838    
  57  0.990209     -0.983957E-02 -0.119148      0.119148       162.643       162.762    
  58  0.262373      -1.33799      -16.2018       16.2018       163.436       179.638    
  59  0.645275     -0.438079      -5.30474       5.30474       158.348       163.653    
  60  0.423351     -0.859554      -10.4084       10.4084       161.324       171.732    
  61  0.353204      -1.04071      -12.6020       12.6020       159.455       172.057    
  62  0.721881     -0.325895      -3.94629       3.94629       164.796       168.742    
  63  0.213966      -1.54194      -18.6715       18.6715       164.985       183.657    
  64  0.176516      -1.73434      -21.0013       21.0013       159.789       180.791    
  65  0.885542     -0.121555      -1.47192       1.47192       160.681       162.153    
  66  0.551521     -0.595076      -7.20583       7.20583       157.199       164.405    
  67  0.847646     -0.165292      -2.00153       2.00153       162.816       164.817    
  68  0.825749E-01  -2.49405      -30.2007       30.2007       161.557       191.758    
  69  0.123448      -2.09193      -25.3314       25.3314       164.924       190.255    
  70  0.384918     -0.954725      -11.5609       11.5609       167.860       179.421    
  71  0.991208     -0.883065E-02 -0.106931      0.106931       158.490       158.597    
  72  0.864006     -0.146175      -1.77005       1.77005       162.484       164.254    
  73  0.128713      -2.05017      -24.8257       24.8257       164.031       188.857    
  74  0.699101     -0.357960      -4.33457       4.33457       162.983       167.317    
  75  0.265982      -1.32433      -16.0364       16.0364       155.109       171.145    
loop,thermsimp(1:2)       18   17.2612       59.8852    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278        158.10          0.86          1.15         25.25          0.45          0.05         27.77
Just calling func    0   0         27.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    279        154.65          0.86          1.14         25.11          0.21          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    154.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       18
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       19
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      278     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -3.94094       3.94094       154.957       158.897    
   2  0.240049      -1.42691      -17.2786       17.2786       153.690       170.969    
   3  0.365543      -1.00637      -12.1862       12.1862       155.551       167.737    
   4  0.399010     -0.918769      -11.1255       11.1255       156.586       167.712    
   5  0.685268     -0.377945      -4.57657       4.57657       158.490       163.067    
   6  0.335805E-01  -3.39381      -41.0960       41.0960       158.595       199.691    
   7  0.820520     -0.197817      -2.39538       2.39538       156.387       158.782    
   8  0.756560     -0.278973      -3.37811       3.37811       160.604       163.982    
   9  0.869461     -0.139882      -1.69385       1.69385       156.791       158.485    
  10  0.787378     -0.239047      -2.89464       2.89464       159.375       162.270    
  11  0.330926      -1.10586      -13.3910       13.3910       152.198       165.589    
  12  0.339084E-01  -3.38409      -40.9783       40.9783       154.726       195.705    
  13  0.672805     -0.396300      -4.79883       4.79883       159.959       164.758    
  14  0.822413     -0.195513      -2.36748       2.36748       158.335       160.702    
  15  0.928870     -0.737865E-01 -0.893487      0.893487       160.681       161.574    
  16  0.778944     -0.249816      -3.02505       3.02505       157.688       160.714    
  17  0.301602E-01  -3.50123      -42.3968       42.3968       162.643       205.040    
  18  0.292626      -1.22886      -14.8804       14.8804       160.107       174.988    
  19  0.149515      -1.90036      -23.0116       23.0116       158.917       181.929    
  20  0.500330E-01  -2.99507      -36.2676       36.2676       158.812       195.079    
  21  0.759114E-01  -2.57819      -31.2195       31.2195       158.348       189.567    
  22  0.613440     -0.488673      -5.91738       5.91738       161.034       166.951    
  23  0.132502      -2.02116      -24.4744       24.4744       162.484       186.959    
  24  0.189750E-02  -6.26722      -75.8904       75.8904       160.765       236.655    
  25  0.507622     -0.678018      -8.21019       8.21019       157.199       165.409    
  26  0.378733     -0.970924      -11.7570       11.7570       162.816       174.573    
  27  0.139411      -1.97033      -23.8589       23.8589       159.717       183.576    
  28  0.298599      -1.20865      -14.6357       14.6357       161.872       176.508    
  29  0.767617     -0.264464      -3.20242       3.20242       162.571       165.773    
  30  0.656077     -0.421478      -5.10371       5.10371       162.340       167.444    
  31  0.701883     -0.353988      -4.28647       4.28647       160.210       164.497    
  32  0.940950     -0.608655E-01 -0.737026      0.737026       163.578       164.315    
  33  0.621043     -0.476355      -5.76823       5.76823       162.078       167.846    
  34  0.622910     -0.473353      -5.73187       5.73187       162.983       168.714    
  35  0.525019     -0.644320      -7.80213       7.80213       162.947       170.749    
  36  0.871126     -0.137969      -1.67068       1.67068       158.785       160.455    
  37  0.475532     -0.743322      -9.00095       9.00095       163.261       172.262    
  38  0.320094      -1.13914      -13.7940       13.7940       159.760       173.554    
  39  0.688986     -0.372534      -4.51105       4.51105       162.825       167.336    
  40  0.831218     -0.184863      -2.23852       2.23852       161.212       163.450    
  41  0.639633     -0.446861      -5.41108       5.41108       164.796       170.207    
  42  0.628257     -0.464807      -5.62839       5.62839       159.336       164.965    
  43  0.925835     -0.770596E-01 -0.933121      0.933121       158.663       159.596    
  44  0.611089     -0.492512      -5.96387       5.96387       152.040       158.004    
  45  0.423003E-01  -3.16296      -38.3006       38.3006       165.069       203.369    
  46  0.430763     -0.842198      -10.1983       10.1983       161.207       171.405    
  47  0.374764     -0.981459      -11.8846       11.8846       155.616       167.500    
  48  0.109336      -2.21333      -26.8014       26.8014       161.330       188.131    
  49  0.642636E-02  -5.04735      -61.1188       61.1188       155.109       216.227    
  50  0.232984      -1.45679      -17.6403       17.6403       158.097       175.737    
  51  0.169005E-01  -4.08041      -49.4101       49.4101       161.324       210.734    
  52  0.183441      -1.69586      -20.5353       20.5353       159.455       179.991    
  53  0.257429      -1.35701      -16.4322       16.4322       161.708       178.140    
  54  0.784332     -0.242922      -2.94157       2.94157       158.419       161.360    
  55  0.417881     -0.872558      -10.5659       10.5659       166.809       177.375    
  56  0.597408E-01  -2.81774      -34.1203       34.1203       160.049       194.169    
  57  0.854186E-01  -2.46019      -29.7907       29.7907       161.324       191.114    
  58  0.484163     -0.725335      -8.78314       8.78314       170.733       179.516    
  59  0.392210     -0.935958      -11.3336       11.3336       167.860       179.193    
  60  0.544229     -0.608385      -7.36699       7.36699       163.436       170.803    
  61  0.846696     -0.166413      -2.01511       2.01511       161.444       163.459    
  62  0.273327      -1.29709      -15.7066       15.7066       161.525       177.231    
  63  0.253790      -1.37125      -16.6046       16.6046       159.789       176.394    
  64  0.683640     -0.380324      -4.60538       4.60538       164.566       169.171    
  65  0.707324     -0.346266      -4.19297       4.19297       164.985       169.178    
  66  0.664908     -0.408107      -4.94180       4.94180       160.242       165.184    
  67  0.269947      -1.30953      -15.8572       15.8572       165.090       180.947    
  68  0.112661      -2.18338      -26.4387       26.4387       164.031       190.470    
  69  0.392076     -0.936299      -11.3377       11.3377       164.924       176.261    
  70  0.711292     -0.340672      -4.12523       4.12523       158.974       163.099    
  71  0.887428     -0.119427      -1.44616       1.44616       161.557       163.003    
  72  0.620380     -0.477423      -5.78116       5.78116       161.050       166.831    
  73  0.295869      -1.21784      -14.7469       14.7469       161.952       176.699    
  74  0.625911     -0.468547      -5.67368       5.67368       152.539       158.212    
  75  0.644390     -0.439451      -5.32136       5.32136       154.646       159.967    
loop,thermsimp(1:2)       19   3.94094       17.2786    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280        157.13          0.87          1.15         25.16          0.28          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    281        159.02          0.86          1.15         25.22          0.11          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    159.02       0.8881     -1.727      2.996     -102.6      1.086    
                      0.1626      1.362     -99.70      3.749     0.2759    
                       1.835     -1.278      1.530      5807.      2791.    
                     -0.5040      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5403.      204.5    
                     -0.5672     -6.938     -4.862     -9.032      5.932    
                      -15.01     -3.330      3507.      0.000      4936.    

                       4936.      4969.     -460.9      4936.      5958.    
                       5643.    -0.2065E-01 0.7896E-01  0.000     0.8390E-01
                     -0.1876    -0.1028     0.8952E-01 0.2753E-01-0.5371E-01

                     -0.3686    -0.9286      0.000    -0.2137E-01-0.4867E-01
                       0.000    -0.5838E-02-0.6044E-01-0.1797     0.3814E-01
                     -0.1599E-01-0.2452E-01 0.3808     -1.078      4245.    

                     -0.8954    -0.8144     -2.419     -2.419    -0.4527    
                     -0.5795      9.140      8.700    -0.1717E+05 -4.000    
                     -0.4217    -0.5672      9.272      8.825    -0.1749E+05

                      -4.000     0.1504    -0.8798      8.907      8.972    
                     -0.2246E+05 -7.000    -0.5701    -0.8695      9.058    
                       8.763    -0.2161E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    157.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       19
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       20
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      280     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -14.1096       14.1096       152.040       166.150    
   2  0.362384      -1.01505      -12.2913       12.2913       152.539       164.830    
   3  0.900627     -0.104664      -1.26739       1.26739       156.791       158.059    
   4  0.233893      -1.45289      -17.5932       17.5932       156.387       173.980    
   5  0.183338      -1.69642      -20.5422       20.5422       154.957       175.499    
   6  0.351708      -1.04495      -12.6534       12.6534       158.663       171.316    
   7  0.979617     -0.205938E-01 -0.249372      0.249372       154.646       154.895    
   8  0.801294     -0.221527      -2.68250       2.68250       158.785       161.467    
   9  0.423893     -0.858275      -10.3929       10.3929       158.335       168.727    
  10  0.486446     -0.720630      -8.72618       8.72618       157.688       166.415    
  11  0.430531     -0.842736      -10.2048       10.2048       158.419       168.623    
  12  0.214629      -1.53884      -18.6340       18.6340       160.681       179.315    
  13  0.860310     -0.150463      -1.82197       1.82197       159.375       161.197    
  14  0.450659     -0.797045      -9.65149       9.65149       161.557       171.209    
  15  0.867432     -0.142218      -1.72213       1.72213       158.490       160.212    
  16  0.850327     -0.162134      -1.96329       1.96329       158.974       160.937    
  17  0.914193     -0.897130E-01  -1.08634       1.08634       161.212       162.298    
  18  0.908448     -0.960172E-01  -1.16268       1.16268       161.444       162.607    
  19  0.349788E-01  -3.35301      -40.6019       40.6019       160.604       201.206    
  20  0.825048     -0.192314      -2.32875       2.32875       163.578       165.907    
  21  0.628933     -0.463730      -5.61535       5.61535       160.210       165.826    
  22  0.756366     -0.279229      -3.38121       3.38121       159.959       163.340    
  23  0.545707     -0.605674      -7.33416       7.33416       159.336       166.671    
  24  0.653619     -0.425231      -5.14916       5.14916       160.242       165.391    
  25  0.781643     -0.246357      -2.98316       2.98316       157.199       160.182    
  26  0.444411     -0.811005      -9.82053       9.82053       152.198       162.019    
  27  0.223111      -1.50008      -18.1647       18.1647       162.571       180.736    
  28  0.143901      -1.93863      -23.4751       23.4751       161.050       184.525    
  29  0.419282E-01  -3.17180      -38.4076       38.4076       161.034       199.441    
  30  0.407367     -0.898040      -10.8744       10.8744       162.825       173.699    
  31  0.722138     -0.325538      -3.94197       3.94197       162.340       166.282    
  32  0.290143      -1.23738      -14.9835       14.9835       155.616       170.599    
  33  0.236931E-01  -3.74257      -45.3191       45.3191       156.586       201.906    
  34  0.198981      -1.61454      -19.5507       19.5507       155.551       175.101    
  35  0.765966     -0.266617      -3.22849       3.22849       162.078       165.307    
  36  0.522733     -0.648684      -7.85498       7.85498       162.983       170.838    
  37  0.297579E-01  -3.51466      -42.5593       42.5593       164.566       207.125    
  38  0.175475      -1.74026      -21.0729       21.0729       164.985       186.058    
  39  0.311931      -1.16497      -14.1068       14.1068       164.796       178.902    
  40  0.310920      -1.16822      -14.1461       14.1461       162.947       177.093    
  41  0.122272      -2.10150      -25.4473       25.4473       163.436       188.883    
  42  0.949359     -0.519686E-01 -0.629292      0.629292       153.690       154.320    
  43  0.500750     -0.691648      -8.37523       8.37523       161.207       169.582    
  44  0.729401E-01  -2.61812      -31.7030       31.7030       163.261       194.964    
  45  0.952528     -0.486360E-01 -0.588938      0.588938       159.760       160.349    
  46  0.718842     -0.330114      -3.99738       3.99738       162.816       166.813    
  47  0.529396     -0.636019      -7.70161       7.70161       160.107       167.809    
  48  0.314661      -1.15626      -14.0012       14.0012       158.097       172.098    
  49  0.947465     -0.539649E-01 -0.653466      0.653466       164.924       165.577    
  50  0.613869     -0.487974      -5.90893       5.90893       159.789       165.698    
  51  0.303056      -1.19384      -14.4563       14.4563       161.872       176.328    
  52  0.749186     -0.288769      -3.49673       3.49673       161.952       165.449    
  53  0.671119E-01  -2.70139      -32.7114       32.7114       161.525       194.236    
  54  0.545553E-02  -5.21113      -63.1020       63.1020       166.809       229.911    
  55  0.866985     -0.142734      -1.72838       1.72838       161.708       163.436    
  56  0.622088     -0.474673      -5.74787       5.74787       167.860       173.608    
  57  0.471050     -0.752790      -9.11561       9.11561       170.733       179.849    
  58  0.433456     -0.835964      -10.1228       10.1228       159.455       169.578    
  59  0.946573     -0.549070E-01 -0.664874      0.664874       165.090       165.755    
  60  0.795665     -0.228577      -2.76786       2.76786       158.917       161.685    
  61  0.536872E-01  -2.92458      -35.4140       35.4140       159.717       195.131    
  62  0.761403     -0.272592      -3.30085       3.30085       162.484       165.785    
  63  0.615271     -0.485692      -5.88129       5.88129       161.330       167.211    
  64  0.585500     -0.535288      -6.48186       6.48186       158.348       164.830    
  65  0.649114     -0.432147      -5.23291       5.23291       164.031       169.264    
  66  0.550765     -0.596448      -7.22244       7.22244       161.324       168.546    
  67  0.495492     -0.702204      -8.50305       8.50305       160.049       168.552    
  68  0.303565      -1.19216      -14.4360       14.4360       158.812       173.248    
  69  0.645152     -0.438270      -5.30705       5.30705       154.726       160.033    
  70  0.582875     -0.539782      -6.53627       6.53627       158.595       165.131    
  71  0.720704     -0.327527      -3.96606       3.96606       165.069       169.035    
  72  0.129533      -2.04382      -24.7488       24.7488       162.643       187.392    
  73  0.998938     -0.106248E-02 -0.128657E-01  0.128657E-01   161.324       161.337    
  74  0.656875     -0.420261      -5.08898       5.08898       155.109       160.198    
  75  0.598422     -0.513459      -6.21752       6.21752       157.130       163.347    
loop,thermsimp(1:2)       20   14.1096       12.2913    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282        160.66          0.86          1.15         25.25          0.22          0.05         27.53
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    283        170.70          0.86          1.15         25.17          0.19          0.06         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       20
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       21
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      282     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -14.2921       14.2921       153.690       167.982    
   2  0.575213     -0.553015      -6.69650       6.69650       154.646       161.342    
   3  0.632244     -0.458480      -5.55178       5.55178       156.791       162.343    
   4  0.819203     -0.199424      -2.41484       2.41484       154.726       157.141    
   5  0.137693E-02  -6.58790      -79.7734       79.7734       157.199       236.973    
   6  0.367814      -1.00018      -12.1113       12.1113       155.109       167.220    
   7  0.452636     -0.792666      -9.59847       9.59847       158.490       168.089    
   8  0.278102      -1.27977      -15.4968       15.4968       159.760       175.256    
   9  0.417803     -0.872745      -10.5682       10.5682       158.974       169.542    
  10  0.682140     -0.382521      -4.63198       4.63198       159.375       164.007    
  11  0.204733      -1.58605      -19.2056       19.2056       161.324       180.530    
  12  0.637442     -0.450292      -5.45263       5.45263       158.785       164.237    
  13  0.114518      -2.16702      -26.2407       26.2407       158.917       185.158    
  14  0.724207     -0.322678      -3.90734       3.90734       152.198       156.105    
  15  0.461399     -0.773492      -9.36629       9.36629       161.212       170.578    
  16  0.731739     -0.312332      -3.78205       3.78205       161.444       165.226    
  17  0.773272     -0.257124      -3.11354       3.11354       159.959       163.073    
  18  0.789195     -0.236742      -2.86673       2.86673       157.130       159.997    
  19  0.762001     -0.271807      -3.29133       3.29133       161.708       164.999    
  20  0.933384     -0.689386E-01 -0.834784      0.834784       158.348       159.183    
  21  0.694037     -0.365230      -4.42261       4.42261       152.539       156.961    
  22  0.423570     -0.859038      -10.4022       10.4022       158.595       168.997    
  23  0.272919      -1.29858      -15.7246       15.7246       162.078       177.803    
  24  0.535843     -0.623914      -7.55504       7.55504       160.242       167.797    
  25  0.902288     -0.102822      -1.24508       1.24508       161.952       163.197    
  26  0.479374     -0.735275      -8.90351       8.90351       164.924       173.827    
  27  0.494900E-01  -3.00599      -36.3998       36.3998       159.789       196.189    
  28  0.921867     -0.813539E-01 -0.985122      0.985122       165.090       166.075    
  29  0.132425      -2.02174      -24.4814       24.4814       162.484       186.966    
  30  0.640539     -0.445446      -5.39394       5.39394       160.210       165.604    
  31  0.215363      -1.53543      -18.5927       18.5927       163.578       182.171    
  32  0.437204E-01  -3.12994      -37.9007       37.9007       152.040       189.941    
  33  0.166028      -1.79560      -21.7431       21.7431       162.340       184.083    
  34  0.425825     -0.853727      -10.3379       10.3379       157.688       168.026    
  35  0.810393     -0.210235      -2.54576       2.54576       159.336       161.882    
  36  0.855958     -0.155534      -1.88338       1.88338       162.816       164.699    
  37  0.830452     -0.185786      -2.24970       2.24970       161.330       163.579    
  38  0.658784     -0.417359      -5.05384       5.05384       160.107       165.161    
  39  0.910965     -0.932509E-01  -1.12918       1.12918       161.324       162.453    
  40  0.603480     -0.505043      -6.11561       6.11561       160.049       166.165    
  41  0.702610     -0.352953      -4.27395       4.27395       158.419       162.693    
  42  0.329065      -1.11150      -13.4592       13.4592       158.335       171.794    
  43  0.790497     -0.235094      -2.84677       2.84677       165.069       167.915    
  44  0.641572     -0.443834      -5.37442       5.37442       164.031       169.405    
  45  0.650683     -0.429733      -5.20368       5.20368       159.455       164.659    
  46  0.194049E-02  -6.24481      -75.6190       75.6190       161.207       236.826    
  47  0.662053     -0.412409      -4.99390       4.99390       155.616       160.610    
  48  0.294846      -1.22130      -14.7888       14.7888       162.983       177.771    
  49  0.709874     -0.342668      -4.14940       4.14940       161.557       165.707    
  50  0.700314     -0.356226      -4.31357       4.31357       158.663       162.976    
  51  0.639811E-01  -2.74917      -33.2899       33.2899       158.097       191.387    
  52  0.251451      -1.38051      -16.7167       16.7167       158.812       175.528    
  53  0.828691     -0.187907      -2.27539       2.27539       167.860       170.135    
  54  0.962710     -0.380034E-01 -0.460187      0.460187       162.825       163.285    
  55  0.429583     -0.844940      -10.2315       10.2315       156.387       166.619    
  56  0.871108     -0.137990      -1.67093       1.67093       155.551       157.222    
  57  0.328516      -1.11317      -13.4795       13.4795       154.957       168.436    
  58  0.401423     -0.912741      -11.0525       11.0525       161.872       172.924    
  59  0.671285     -0.398562      -4.82622       4.82622       162.947       167.773    
  60  0.919587     -0.838302E-01  -1.01511       1.01511       164.796       165.811    
  61  0.209634      -1.56239      -18.9192       18.9192       160.681       179.600    
  62  0.894137     -0.111896      -1.35496       1.35496       170.733       172.088    
  63  0.623590     -0.472262      -5.71867       5.71867       162.571       168.290    
  64  0.469722     -0.755615      -9.14981       9.14981       161.050       170.200    
  65  0.927315E-01  -2.37805      -28.7960       28.7960       164.985       193.781    
  66  0.663316     -0.410504      -4.97084       4.97084       162.643       167.614    
  67  0.972420     -0.279677E-01 -0.338664      0.338664       163.436       163.774    
  68  0.594470     -0.520086      -6.29776       6.29776       161.525       167.822    
  69  0.421560     -0.863793      -10.4598       10.4598       163.261       173.721    
  70  0.878821     -0.129174      -1.56418       1.56418       159.717       161.282    
  71  0.231393      -1.46364      -17.7233       17.7233       161.034       178.757    
  72  0.209055      -1.56516      -18.9527       18.9527       160.604       179.557    
  73  0.278482      -1.27840      -15.4803       15.4803       156.586       172.067    
  74  0.725973     -0.320242      -3.87784       3.87784       164.566       168.444    
  75  0.443109     -0.813940      -9.85608       9.85608       160.660       170.516    
loop,thermsimp(1:2)       21   14.2921       6.69650    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284        161.51          0.87          1.15         25.22          0.20          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       21
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       22
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      283     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -2.12715       2.12715       152.198       154.325    
   2  0.801853     -0.220830      -2.67405       2.67405       152.539       155.213    
   3  0.768645     -0.263126      -3.18621       3.18621       154.726       157.913    
   4  0.855557     -0.156003      -1.88905       1.88905       155.551       157.440    
   5  0.845591     -0.167720      -2.03093       2.03093       158.348       160.379    
   6  0.350050      -1.04968      -12.7107       12.7107       157.130       169.841    
   7  0.927608     -0.751463E-01 -0.909953      0.909953       155.616       156.526    
   8  0.655345E-01  -2.72518      -32.9994       32.9994       159.717       192.717    
   9  0.355481      -1.03428      -12.5242       12.5242       154.646       167.170    
  10  0.728523     -0.316737      -3.83540       3.83540       159.336       163.172    
  11  0.573220     -0.556486      -6.73854       6.73854       156.791       163.530    
  12  0.112478      -2.18499      -26.4583       26.4583       161.324       187.782    
  13  0.338739      -1.08253      -13.1084       13.1084       158.419       171.527    
  14  0.239648      -1.42858      -17.2988       17.2988       158.663       175.961    
  15  0.918959     -0.845134E-01  -1.02338       1.02338       159.959       160.983    
  16  0.283771      -1.25959      -15.2525       15.2525       161.952       177.204    
  17  0.414404     -0.880913      -10.6671       10.6671       162.825       173.492    
  18  0.716403     -0.333512      -4.03853       4.03853       161.330       165.368    
  19  0.317726      -1.14657      -13.8839       13.8839       163.436       177.320    
  20  0.339005      -1.08174      -13.0989       13.0989       159.375       172.474    
  21  0.163059      -1.81364      -21.9616       21.9616       158.785       180.746    
  22  0.477081     -0.740069      -8.96156       8.96156       159.455       168.417    
  23  0.105851      -2.24573      -27.1937       27.1937       162.816       190.010    
  24  0.840431     -0.173840      -2.10505       2.10505       161.708       163.813    
  25  0.235315      -1.44683      -17.5198       17.5198       160.107       177.627    
  26  0.865464     -0.144489      -1.74963       1.74963       161.444       163.194    
  27  0.909462     -0.949026E-01  -1.14918       1.14918       160.210       161.360    
  28  0.152105E-01  -4.18577      -50.6859       50.6859       161.557       212.243    
  29  0.962485     -0.382371E-01 -0.463017      0.463017       164.796       165.259    
  30  0.259410      -1.34934      -16.3393       16.3393       165.090       181.429    
  31  0.364880      -1.00819      -12.2082       12.2082       160.049       172.257    
  32  0.467235     -0.760923      -9.21408       9.21408       156.387       165.601    
  33  0.844908     -0.168527      -2.04071       2.04071       155.109       157.149    
  34  0.188232      -1.67008      -20.2232       20.2232       162.643       182.866    
  35  0.496585     -0.700000      -8.47637       8.47637       162.947       171.423    
  36  0.410505     -0.890367      -10.7815       10.7815       160.242       171.023    
  37  0.533875     -0.627594      -7.59959       7.59959       161.525       169.124    
  38  0.610668     -0.493202      -5.97223       5.97223       165.069       171.041    
  39  0.241933      -1.41910      -17.1840       17.1840       153.690       170.874    
  40  0.642629     -0.442188      -5.35449       5.35449       157.688       163.043    
  41  0.775072     -0.254799      -3.08539       3.08539       158.490       161.575    
  42  0.345343      -1.06322      -12.8746       12.8746       162.571       175.446    
  43  0.844097     -0.169488      -2.05234       2.05234       154.957       157.009    
  44  0.426886     -0.851239      -10.3077       10.3077       164.566       174.874    
  45  0.594109     -0.520693      -6.30512       6.30512       158.595       164.900    
  46  0.489527     -0.714316      -8.64972       8.64972       164.031       172.681    
  47  0.313882      -1.15874      -14.0313       14.0313       158.974       173.005    
  48  0.687066     -0.375325      -4.54485       4.54485       167.860       172.405    
  49  0.394505     -0.930124      -11.2630       11.2630       161.050       172.313    
  50  0.971200     -0.292233E-01 -0.353867      0.353867       160.660       161.014    
  51  0.916939     -0.867145E-01  -1.05003       1.05003       161.212       162.262    
  52  0.968457     -0.320511E-01 -0.388110      0.388110       158.335       158.723    
  53  0.437414     -0.826876      -10.0127       10.0127       156.586       166.599    
  54  0.647516     -0.434611      -5.26275       5.26275       170.733       175.996    
  55  0.181293      -1.70764      -20.6780       20.6780       161.872       182.550    
  56  0.836714     -0.178273      -2.15872       2.15872       163.261       165.420    
  57  0.940459     -0.613876E-01 -0.743348      0.743348       164.924       165.667    
  58  0.141896      -1.95266      -23.6449       23.6449       159.760       183.405    
  59  0.111323      -2.19532      -26.5833       26.5833       158.812       185.395    
  60  0.721494E-01  -2.62902      -31.8350       31.8350       162.983       194.818    
  61  0.618358     -0.480687      -5.82069       5.82069       162.078       167.899    
  62  0.825766     -0.191444      -2.31821       2.31821       161.034       163.352    
  63  0.438611     -0.824143      -9.97963       9.97963       160.604       170.584    
  64  0.158533      -1.84179      -22.3024       22.3024       160.681       182.983    
  65  0.750786     -0.286635      -3.47089       3.47089       161.324       164.795    
  66  0.936921     -0.651566E-01 -0.788988      0.788988       163.578       164.367    
  67  0.652715     -0.426615      -5.16593       5.16593       162.340       167.506    
  68  0.471604     -0.751616      -9.10138       9.10138       158.917       168.018    
  69  0.883538     -0.123821      -1.49936       1.49936       162.484       163.984    
  70  0.267870      -1.31725      -15.9507       15.9507       152.040       167.991    
  71  0.662224     -0.412151      -4.99078       4.99078       158.097       163.088    
  72  0.652465     -0.426998      -5.17056       5.17056       164.985       170.156    
  73  0.261718      -1.34049      -16.2321       16.2321       159.789       176.021    
  74  0.929393     -0.732233E-01 -0.886668      0.886668       161.207       162.094    
  75  0.809805     -0.210962      -2.55456       2.55456       161.505       164.060    
loop,thermsimp(1:2)       22   2.12715       2.67405    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285        158.53          0.86          1.15         25.23          0.12          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    158.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       22
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       23
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      284     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -1.99141       1.99141       152.198       154.190    
   2  0.848474     -0.164316      -1.98972       1.98972       152.539       154.528    
   3  0.146795      -1.91872      -23.2339       23.2339       155.616       178.850    
   4  0.398624     -0.919738      -11.1372       11.1372       154.957       166.094    
   5  0.888093     -0.118679      -1.43709       1.43709       155.109       156.546    
   6  0.475009     -0.744421      -9.01426       9.01426       155.551       164.565    
   7  0.120824      -2.11342      -25.5916       25.5916       154.726       180.318    
   8  0.270052      -1.30914      -15.8525       15.8525       158.335       174.187    
   9  0.201748E-01  -3.90332      -47.2657       47.2657       158.348       205.614    
  10  0.999386     -0.614559E-03 -0.744175E-02  0.744175E-02   159.959       159.967    
  11  0.212655      -1.54808      -18.7459       18.7459       160.660       179.406    
  12  0.197911      -1.61994      -19.6160       19.6160       160.210       179.826    
  13  0.786394     -0.240297      -2.90978       2.90978       158.490       161.400    
  14  0.781263     -0.246844      -2.98906       2.98906       161.207       164.196    
  15  0.788011     -0.238244      -2.88492       2.88492       161.212       164.097    
  16  0.956387     -0.445927E-01 -0.539977      0.539977       157.688       158.228    
  17  0.717415     -0.332100      -4.02143       4.02143       158.097       162.118    
  18  0.808756     -0.212258      -2.57025       2.57025       159.336       161.907    
  19  0.756838     -0.278606      -3.37367       3.37367       161.444       164.818    
  20  0.570684     -0.560919      -6.79222       6.79222       161.034       167.826    
  21  0.946031     -0.554796E-01 -0.671808      0.671808       156.791       157.463    
  22  0.678634E-01  -2.69026      -32.5766       32.5766       161.708       194.285    
  23  0.631502     -0.459654      -5.56599       5.56599       162.484       168.050    
  24  0.114784E-01  -4.46729      -54.0948       54.0948       161.505       215.600    
  25  0.549681     -0.598417      -7.24629       7.24629       163.578       170.824    
  26  0.846433     -0.166725      -2.01889       2.01889       161.324       163.343    
  27  0.441841     -0.816805      -9.89077       9.89077       158.595       168.486    
  28  0.299100      -1.20698      -14.6154       14.6154       164.796       179.411    
  29  0.378130     -0.972517      -11.7763       11.7763       161.330       173.106    
  30  0.830469     -0.185764      -2.24944       2.24944       163.261       165.510    
  31  0.675108     -0.392883      -4.75746       4.75746       156.387       161.145    
  32  0.997619     -0.238377E-02 -0.288652E-01  0.288652E-01   164.924       164.952    
  33  0.897623     -0.108005      -1.30784       1.30784       156.586       157.894    
  34  0.591811E-01  -2.82715      -34.2343       34.2343       154.646       188.880    
  35  0.229825      -1.47044      -17.8057       17.8057       162.340       180.146    
  36  0.654017     -0.424622      -5.14179       5.14179       162.078       167.220    
  37  0.305777      -1.18490      -14.3481       14.3481       152.040       166.388    
  38  0.936135     -0.659954E-01 -0.799145      0.799145       158.917       159.716    
  39  0.698153     -0.359317      -4.35100       4.35100       159.455       163.806    
  40  0.829975     -0.186360      -2.25665       2.25665       161.525       163.781    
  41  0.951351     -0.498721E-01 -0.603905      0.603905       157.130       157.734    
  42  0.883299     -0.124092      -1.50264       1.50264       164.985       166.488    
  43  0.910087     -0.942154E-01  -1.14086       1.14086       160.604       161.745    
  44  0.590840     -0.526210      -6.37193       6.37193       153.690       160.062    
  45  0.146785      -1.91879      -23.2348       23.2348       160.242       183.477    
  46  0.830381E-01  -2.48846      -30.1329       30.1329       165.069       195.201    
  47  0.289482      -1.23966      -15.0112       15.0112       162.947       177.958    
  48  0.594462     -0.520098      -6.29791       6.29791       158.419       164.717    
  49  0.241311      -1.42167      -17.2151       17.2151       160.049       177.264    
  50  0.612368     -0.490422      -5.93857       5.93857       161.050       166.988    
  51  0.952207     -0.489727E-01 -0.593015      0.593015       167.860       168.453    
  52  0.857144     -0.154149      -1.86661       1.86661       159.375       161.242    
  53  0.221746      -1.50622      -18.2390       18.2390       164.031       182.270    
  54  0.874757     -0.133809      -1.62031       1.62031       158.974       160.594    
  55  0.474241     -0.746040      -9.03386       9.03386       162.825       171.859    
  56  0.679995E-01  -2.68826      -32.5523       32.5523       164.566       197.118    
  57  0.276977      -1.28382      -15.5459       15.5459       162.571       178.117    
  58  0.308562      -1.17583      -14.2383       14.2383       158.663       172.901    
  59  0.910099     -0.942023E-01  -1.14070       1.14070       170.733       171.874    
  60  0.189281      -1.66452      -20.1559       20.1559       159.789       179.945    
  61  0.759386     -0.275245      -3.33297       3.33297       161.952       165.285    
  62  0.464823     -0.766099      -9.27677       9.27677       163.436       172.713    
  63  0.428490     -0.847488      -10.2623       10.2623       160.107       170.370    
  64  0.377334     -0.974624      -11.8018       11.8018       158.785       170.586    
  65  0.168846      -1.77877      -21.5393       21.5393       165.090       186.629    
  66  0.816398     -0.202853      -2.45636       2.45636       161.872       164.328    
  67  0.663000     -0.410981      -4.97661       4.97661       162.643       167.620    
  68  0.805080     -0.216814      -2.62542       2.62542       160.681       163.306    
  69  0.767976E-01  -2.56658      -31.0790       31.0790       159.760       190.839    
  70  0.646958     -0.435474      -5.27320       5.27320       158.812       164.085    
  71  0.988002E-01  -2.31466      -28.0284       28.0284       161.324       189.352    
  72  0.310465      -1.16968      -14.1638       14.1638       162.816       176.980    
  73  0.957874     -0.430393E-01 -0.521166      0.521166       159.717       160.238    
  74  0.155852E-01  -4.16143      -50.3912       50.3912       162.983       213.374    
  75  0.924638     -0.783527E-01 -0.948781      0.948781       158.526       159.474    
loop,thermsimp(1:2)       23   1.99141       1.98972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286        157.05          0.86          1.15         25.31          0.31          0.06         27.69
Just calling func    0   0         27.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    287        168.47          0.86          1.14         25.21          0.21          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    157.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       23
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       24
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      286     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -27.6394       27.6394       152.198       179.837    
   2  0.372115     -0.988552      -11.9705       11.9705       152.539       164.509    
   3  0.732875     -0.310780      -3.76327       3.76327       155.109       158.872    
   4  0.341646      -1.07398      -13.0049       13.0049       156.791       169.796    
   5  0.406512     -0.900141      -10.8999       10.8999       157.130       168.030    
   6  0.271848      -1.30251      -15.7722       15.7722       156.586       172.359    
   7  0.738418     -0.303245      -3.67202       3.67202       157.688       161.360    
   8  0.903199     -0.101813      -1.23286       1.23286       158.526       159.758    
   9  0.511789     -0.669842      -8.11118       8.11118       158.917       167.028    
  10  0.202674      -1.59616      -19.3280       19.3280       159.959       179.287    
  11  0.325695      -1.12179      -13.5839       13.5839       153.690       167.274    
  12  0.719720     -0.328893      -3.98260       3.98260       159.717       163.700    
  13  0.715609     -0.334622      -4.05197       4.05197       158.974       163.026    
  14  0.973328     -0.270339E-01 -0.327356      0.327356       156.387       156.714    
  15  0.373998     -0.983504      -11.9093       11.9093       159.375       171.285    
  16  0.977965     -0.222815E-01 -0.269809      0.269809       158.490       158.760    
  17  0.105495      -2.24909      -27.2345       27.2345       160.604       187.839    
  18  0.729809     -0.314973      -3.81404       3.81404       159.336       163.151    
  19  0.378008     -0.972839      -11.7802       11.7802       158.097       169.877    
  20  0.678326     -0.388127      -4.69986       4.69986       160.681       165.381    
  21  0.671993     -0.397507      -4.81346       4.81346       161.324       166.137    
  22  0.515926     -0.661792      -8.01371       8.01371       161.525       169.538    
  23  0.363490      -1.01200      -12.2544       12.2544       159.455       171.710    
  24  0.206319      -1.57833      -19.1121       19.1121       158.812       177.924    
  25  0.755157E-01  -2.58341      -31.2828       31.2828       161.212       192.495    
  26  0.413763     -0.882461      -10.6858       10.6858       161.207       171.893    
  27  0.279023      -1.27646      -15.4568       15.4568       161.872       177.329    
  28  0.506422     -0.680385      -8.23885       8.23885       155.551       163.790    
  29  0.643082E-02  -5.04665      -61.1104       61.1104       158.419       219.529    
  30  0.285888E-01  -3.55474      -43.0447       43.0447       161.444       204.489    
  31  0.660419     -0.414880      -5.02382       5.02382       164.924       169.947    
  32  0.739369     -0.301959      -3.65645       3.65645       161.952       165.608    
  33  0.270269      -1.30834      -15.8428       15.8428       163.261       179.104    
  34  0.663889     -0.409640      -4.96037       4.96037       154.957       159.917    
  35  0.898739E-01  -2.40935      -29.1750       29.1750       152.040       181.215    
  36  0.832427     -0.183410      -2.22093       2.22093       164.985       167.206    
  37  0.723106     -0.324200      -3.92577       3.92577       161.050       164.976    
  38  0.986274     -0.138207E-01 -0.167356      0.167356       162.078       162.246    
  39  0.812861     -0.207195      -2.50894       2.50894       162.643       165.152    
  40  0.553236     -0.591971      -7.16823       7.16823       161.034       168.202    
  41  0.693785E-01  -2.66818      -32.3092       32.3092       162.484       194.793    
  42  0.117256      -2.14340      -25.9546       25.9546       167.860       193.814    
  43  0.807809     -0.213430      -2.58444       2.58444       158.595       161.180    
  44  0.900249     -0.105084      -1.27247       1.27247       160.107       161.380    
  45  0.753470     -0.283066      -3.42767       3.42767       158.785       162.212    
  46  0.127159      -2.06232      -24.9728       24.9728       163.578       188.551    
  47  0.535389     -0.624762      -7.56530       7.56530       162.825       170.390    
  48  0.957281     -0.436582E-01 -0.528661      0.528661       170.733       171.262    
  49  0.227700      -1.47973      -17.9181       17.9181       163.436       181.354    
  50  0.636404     -0.451921      -5.47236       5.47236       158.663       164.135    
  51  0.905015     -0.998042E-01  -1.20854       1.20854       161.330       162.538    
  52  0.555191     -0.588444      -7.12552       7.12552       158.335       165.460    
  53  0.687780     -0.374286      -4.53227       4.53227       162.816       167.348    
  54  0.759422E-01  -2.57778      -31.2146       31.2146       160.049       191.264    
  55  0.374598     -0.981902      -11.8899       11.8899       162.947       174.837    
  56  0.399521     -0.917488      -11.1099       11.1099       162.571       173.681    
  57  0.997363     -0.264016E-02 -0.319699E-01  0.319699E-01   155.616       155.648    
  58  0.164658      -1.80389      -21.8434       21.8434       160.660       182.503    
  59  0.697359     -0.360454      -4.36478       4.36478       164.796       169.160    
  60  0.822795     -0.195048      -2.36185       2.36185       160.210       162.572    
  61  0.755086     -0.280923      -3.40173       3.40173       159.789       163.191    
  62  0.912857     -0.911765E-01  -1.10406       1.10406       162.340       163.444    
  63  0.891590     -0.114749      -1.38951       1.38951       154.726       156.116    
  64  0.461859     -0.772496      -9.35423       9.35423       164.031       173.385    
  65  0.695630     -0.362938      -4.39485       4.39485       160.242       164.637    
  66  0.168128      -1.78303      -21.5909       21.5909       165.090       186.681    
  67  0.552556     -0.593201      -7.18312       7.18312       154.646       161.829    
  68  0.450301E-01  -3.10043      -37.5433       37.5433       161.324       198.867    
  69  0.675538     -0.392246      -4.74974       4.74974       159.760       164.509    
  70  0.455839     -0.785615      -9.51309       9.51309       161.708       171.221    
  71  0.700226     -0.356352      -4.31510       4.31510       165.069       169.384    
  72  0.694116     -0.365117      -4.42123       4.42123       164.566       168.987    
  73  0.604722E-01  -2.80557      -33.9729       33.9729       158.348       192.321    
  74  0.194722      -1.63618      -19.8127       19.8127       162.983       182.795    
  75  0.132379      -2.02209      -24.4857       24.4857       157.046       181.532    
loop,thermsimp(1:2)       24   27.6394       11.9705    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288        156.31          0.86          1.15         25.22          0.52          0.05         27.81
Just calling func    0   0         27.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    289        153.76          0.86          1.14         25.25          0.29          0.05         27.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       24
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       25
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      288     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.459279      0.459279       155.616       156.075    
   2  0.355374      -1.03458      -12.5279       12.5279       154.726       167.254    
   3  0.294461      -1.22261      -14.8047       14.8047       156.387       171.192    
   4  0.644538     -0.439222      -5.31858       5.31858       158.490       163.809    
   5  0.741622     -0.298915      -3.61959       3.61959       155.109       158.728    
   6  0.805913E-01  -2.51837      -30.4951       30.4951       158.526       189.021    
   7  0.498180     -0.696794      -8.43754       8.43754       154.957       163.394    
   8  0.771004     -0.260061      -3.14910       3.14910       158.595       161.744    
   9  0.753480     -0.283053      -3.42751       3.42751       157.688       161.116    
  10  0.460525     -0.775387      -9.38924       9.38924       160.107       169.497    
  11  0.918626     -0.848759E-01  -1.02777       1.02777       154.646       155.673    
  12  0.355379      -1.03457      -12.5277       12.5277       158.785       171.312    
  13  0.664646     -0.408501      -4.94658       4.94658       162.078       167.025    
  14  0.328018      -1.11469      -13.4979       13.4979       161.330       174.828    
  15  0.529583     -0.635665      -7.69733       7.69733       160.210       167.908    
  16  0.259823      -1.34775      -16.3201       16.3201       158.974       175.294    
  17  0.463690E-01  -3.07112      -37.1885       37.1885       159.336       196.525    
  18  0.366509      -1.00373      -12.1543       12.1543       159.789       171.944    
  19  0.794534     -0.229999      -2.78508       2.78508       162.340       165.125    
  20  0.669373     -0.401413      -4.86075       4.86075       159.717       164.578    
  21  0.798901     -0.224518      -2.71872       2.71872       155.551       158.269    
  22  0.610403     -0.493636      -5.97749       5.97749       158.663       164.640    
  23  0.267818      -1.31745      -15.9531       15.9531       152.539       168.492    
  24  0.663049     -0.410906      -4.97570       4.97570       159.760       164.735    
  25  0.782871     -0.244788      -2.96416       2.96416       160.242       163.206    
  26  0.706545     -0.347368      -4.20631       4.20631       161.050       165.256    
  27  0.120119      -2.11927      -25.6624       25.6624       162.643       188.306    
  28  0.270575      -1.30721      -15.8291       15.8291       160.681       176.510    
  29  0.505391     -0.682422      -8.26351       8.26351       158.335       166.598    
  30  0.665734     -0.406865      -4.92676       4.92676       161.952       166.879    
  31  0.836788     -0.178185      -2.15766       2.15766       161.324       163.482    
  32  0.866983     -0.142736      -1.72841       1.72841       158.917       160.645    
  33  0.552904     -0.592571      -7.17549       7.17549       164.985       172.161    
  34  0.554153     -0.590314      -7.14817       7.14817       153.690       160.838    
  35  0.592407E-01  -2.82615      -34.2221       34.2221       162.816       197.038    
  36  0.902163     -0.102960      -1.24675       1.24675       157.130       158.377    
  37  0.266638E-01  -3.62445      -43.8888       43.8888       161.034       204.922    
  38  0.897053     -0.108640      -1.31553       1.31553       164.566       165.882    
  39  0.840496     -0.173763      -2.10411       2.10411       164.796       166.900    
  40  0.288358      -1.24355      -15.0583       15.0583       165.069       180.127    
  41  0.835972E-01  -2.48175      -30.0517       30.0517       161.525       191.576    
  42  0.412070     -0.886563      -10.7355       10.7355       156.791       167.527    
  43  0.725010     -0.321570      -3.89392       3.89392       158.097       161.991    
  44  0.316556      -1.15026      -13.9286       13.9286       164.924       178.852    
  45  0.486178     -0.721181      -8.73285       8.73285       162.825       171.557    
  46  0.143341      -1.94253      -23.5223       23.5223       161.708       185.230    
  47  0.956913     -0.440430E-01 -0.533321      0.533321       170.733       171.266    
  48  0.362697      -1.01419      -12.2809       12.2809       159.375       171.656    
  49  0.951746     -0.494572E-01 -0.598882      0.598882       159.455       160.054    
  50  0.511140     -0.671112      -8.12656       8.12656       161.207       169.334    
  51  0.364891E-01  -3.31074      -40.0901       40.0901       156.586       196.677    
  52  0.377076     -0.975308      -11.8101       11.8101       164.031       175.841    
  53  0.670030E-01  -2.70302      -32.7311       32.7311       162.571       195.302    
  54  0.448832     -0.801107      -9.70068       9.70068       162.947       172.648    
  55  0.252392      -1.37677      -16.6715       16.6715       161.872       178.543    
  56  0.910592     -0.936608E-01  -1.13415       1.13415       158.812       159.946    
  57  0.801917     -0.220751      -2.67309       2.67309       163.261       165.934    
  58  0.473432     -0.747746      -9.05453       9.05453       159.959       169.014    
  59  0.431618     -0.840214      -10.1742       10.1742       152.198       162.372    
  60  0.886774     -0.120166      -1.45510       1.45510       152.040       153.495    
  61  0.880132     -0.127683      -1.54613       1.54613       163.436       164.982    
  62  0.962190     -0.385439E-01 -0.466731      0.466731       157.046       157.513    
  63  0.618144     -0.481034      -5.82488       5.82488       160.660       166.485    
  64  0.169887      -1.77262      -21.4649       21.4649       162.983       184.447    
  65  0.384484E-01  -3.25844      -39.4567       39.4567       165.090       204.546    
  66  0.178067      -1.72560      -20.8954       20.8954       160.604       181.500    
  67  0.255365      -1.36506      -16.5297       16.5297       163.578       180.108    
  68  0.476812     -0.740633      -8.96839       8.96839       160.049       169.017    
  69  0.642499     -0.442391      -5.35695       5.35695       158.348       163.705    
  70  0.178007      -1.72593      -20.8995       20.8995       161.212       182.111    
  71  0.622345     -0.474260      -5.74286       5.74286       167.860       173.603    
  72  0.712002     -0.339675      -4.11315       4.11315       162.484       166.597    
  73  0.125902      -2.07225      -25.0931       25.0931       161.324       186.417    
  74  0.359449      -1.02318      -12.3898       12.3898       161.444       173.834    
  75  0.884894     -0.122288      -1.48079       1.48079       153.757       155.238    
loop,thermsimp(1:2)       25  0.459279       12.5279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290        158.19          0.85          1.14         25.23          0.10          0.06         27.37
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    158.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       25
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       26
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      289     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.152028      0.152028       152.040       152.192    
   2  0.516099     -0.661457      -8.00965       8.00965       153.757       161.767    
   3  0.202206      -1.59847      -19.3560       19.3560       154.646       174.002    
   4  0.240260      -1.42603      -17.2680       17.2680       155.616       172.884    
   5  0.717263E-01  -2.63490      -31.9062       31.9062       157.046       188.953    
   6  0.395382     -0.927902      -11.2361       11.2361       155.551       166.787    
   7  0.494348     -0.704516      -8.53105       8.53105       157.130       165.661    
   8  0.970815     -0.296196E-01 -0.358667      0.358667       155.109       155.467    
   9  0.992795     -0.723105E-02 -0.875615E-01  0.875615E-01   158.812       158.899    
  10  0.387320     -0.948503      -11.4855       11.4855       159.455       170.941    
  11  0.586568     -0.533466      -6.45979       6.45979       158.917       165.377    
  12  0.119144      -2.12742      -25.7612       25.7612       153.690       179.451    
  13  0.145144      -1.93003      -23.3709       23.3709       157.688       181.059    
  14  0.767931     -0.264056      -3.19747       3.19747       158.595       161.793    
  15  0.415014     -0.879442      -10.6492       10.6492       158.097       168.746    
  16  0.994477     -0.553801E-02 -0.670602E-01  0.670602E-01   152.198       152.265    
  17  0.757243     -0.278071      -3.36719       3.36719       160.242       163.609    
  18  0.669290     -0.401537      -4.86225       4.86225       154.957       159.819    
  19  0.112026      -2.18903      -26.5071       26.5071       161.324       187.831    
  20  0.434244     -0.834148      -10.1008       10.1008       158.348       168.449    
  21  0.491828     -0.709627      -8.59294       8.59294       158.490       167.083    
  22  0.517535     -0.658677      -7.97599       7.97599       159.717       167.693    
  23  0.411147     -0.888804      -10.7626       10.7626       158.663       169.425    
  24  0.250164      -1.38564      -16.7788       16.7788       159.760       176.538    
  25  0.109742E-01  -4.51221      -54.6388       54.6388       163.436       218.075    
  26  0.559459     -0.580786      -7.03279       7.03279       162.340       169.373    
  27  0.289677      -1.23899      -15.0030       15.0030       161.050       176.053    
  28  0.835809     -0.179356      -2.17184       2.17184       164.566       166.738    
  29  0.236182      -1.44315      -17.4753       17.4753       163.261       180.736    
  30  0.700988     -0.355264      -4.30193       4.30193       160.660       164.962    
  31  0.886914     -0.120007      -1.45318       1.45318       162.484       163.937    
  32  0.182911      -1.69875      -20.5704       20.5704       158.335       178.905    
  33  0.693089     -0.366597      -4.43916       4.43916       161.952       166.391    
  34  0.108523      -2.22079      -26.8917       26.8917       164.796       191.687    
  35  0.141600      -1.95475      -23.6702       23.6702       162.078       185.748    
  36  0.168348E-01  -4.08431      -49.4573       49.4573       154.726       204.184    
  37  0.419419E-01  -3.17147      -38.4036       38.4036       156.791       195.195    
  38  0.244896      -1.40692      -17.0366       17.0366       160.210       177.247    
  39  0.360662      -1.01981      -12.3490       12.3490       152.539       164.888    
  40  0.927013     -0.757879E-01 -0.917723      0.917723       159.959       160.877    
  41  0.869067     -0.140335      -1.69933       1.69933       160.049       161.748    
  42  0.827083     -0.189851      -2.29892       2.29892       161.207       163.506    
  43  0.928403     -0.742893E-01 -0.899576      0.899576       160.107       161.007    
  44  0.513193     -0.667103      -8.07802       8.07802       156.387       164.465    
  45  0.809080     -0.211858      -2.56541       2.56541       170.733       173.299    
  46  0.341224E-02  -5.68039      -68.7843       68.7843       158.785       227.569    
  47  0.734431     -0.308659      -3.73758       3.73758       162.825       166.562    
  48  0.688454     -0.373307      -4.52041       4.52041       159.375       163.896    
  49  0.990614     -0.943067E-02 -0.114197      0.114197       159.789       159.904    
  50  0.143408      -1.94206      -23.5166       23.5166       164.985       188.502    
  51  0.868596     -0.140878      -1.70590       1.70590       162.947       164.653    
  52  0.244103      -1.41016      -17.0758       17.0758       167.860       184.936    
  53  0.207986      -1.57029      -19.0147       19.0147       161.444       180.459    
  54  0.426578E-01  -3.15455      -38.1987       38.1987       161.330       199.528    
  55  0.111938      -2.18981      -26.5167       26.5167       158.974       185.490    
  56  0.304345      -1.18959      -14.4049       14.4049       164.031       178.436    
  57  0.911041     -0.931671E-01  -1.12817       1.12817       160.681       161.809    
  58  0.144299      -1.93587      -23.4416       23.4416       161.872       185.314    
  59  0.306010      -1.18414      -14.3388       14.3388       164.924       179.262    
  60  0.633032     -0.457234      -5.53669       5.53669       163.578       169.115    
  61  0.737469E-02  -4.90970      -59.4520       59.4520       165.069       224.521    
  62  0.794623     -0.229887      -2.78372       2.78372       160.604       163.388    
  63  0.200033      -1.60927      -19.4869       19.4869       161.212       180.699    
  64  0.543825     -0.609128      -7.37599       7.37599       162.983       170.359    
  65  0.719260     -0.329532      -3.99034       3.99034       161.708       165.698    
  66  0.200311      -1.60788      -19.4700       19.4700       161.324       180.794    
  67  0.778326     -0.250609      -3.03465       3.03465       162.643       165.678    
  68  0.932167     -0.702437E-01 -0.850587      0.850587       158.526       159.376    
  69  0.188590      -1.66818      -20.2001       20.2001       161.525       181.725    
  70  0.722923     -0.324453      -3.92883       3.92883       162.571       166.500    
  71  0.779142     -0.249562      -3.02197       3.02197       159.336       162.358    
  72  0.253373      -1.37289      -16.6245       16.6245       156.586       173.211    
  73  0.410592E-01  -3.19274      -38.6612       38.6612       162.816       201.477    
  74  0.622772     -0.473575      -5.73457       5.73457       165.090       170.824    
  75  0.596909     -0.515991      -6.24818       6.24818       158.186       164.434    
loop,thermsimp(1:2)       26  0.152028       8.00965    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291        160.72          0.87          1.15         25.24          0.16          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    292        202.41          0.85          1.17         25.17          0.19          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       26
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       27
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      291     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -19.5125       19.5125       152.040       171.553    
   2  0.983274     -0.168677E-01 -0.204252      0.204252       152.198       152.402    
   3  0.569108     -0.563685      -6.82571       6.82571       155.109       161.934    
   4  0.411179     -0.888728      -10.7617       10.7617       158.812       169.573    
   5  0.889241     -0.117387      -1.42144       1.42144       158.526       159.947    
   6  0.109537      -2.21149      -26.7792       26.7792       154.957       181.736    
   7  0.658027     -0.418509      -5.06777       5.06777       159.789       164.857    
   8  0.427534     -0.849722      -10.2894       10.2894       159.959       170.248    
   9  0.277803      -1.28084      -15.5098       15.5098       160.107       175.617    
  10  0.568421     -0.564892      -6.84034       6.84034       160.049       166.889    
  11  0.368489     -0.998346      -12.0891       12.0891       153.757       165.846    
  12  0.100945E-01  -4.59576      -55.6505       55.6505       158.595       214.246    
  13  0.811445     -0.208939      -2.53006       2.53006       160.681       163.211    
  14  0.135138      -2.00146      -24.2358       24.2358       159.336       183.572    
  15  0.600340     -0.510258      -6.17877       6.17877       160.604       166.783    
  16  0.537538     -0.620755      -7.51679       7.51679       161.207       168.724    
  17  0.923261     -0.798434E-01 -0.966831      0.966831       160.242       161.209    
  18  0.296505      -1.21569      -14.7209       14.7209       159.375       174.096    
  19  0.975666     -0.246348E-01 -0.298305      0.298305       162.484       162.782    
  20  0.102971      -2.27331      -27.5278       27.5278       158.186       185.714    
  21  0.110137      -2.20603      -26.7130       26.7130       156.387       183.100    
  22  0.874539     -0.134058      -1.62332       1.62332       162.947       164.570    
  23  0.887507     -0.119339      -1.44509       1.44509       152.539       153.984    
  24  0.811767     -0.208543      -2.52526       2.52526       160.660       163.185    
  25  0.304283      -1.18980      -14.4074       14.4074       158.917       173.324    
  26  0.304144      -1.19025      -14.4129       14.4129       157.130       171.543    
  27  0.854538     -0.157194      -1.90348       1.90348       162.643       164.547    
  28  0.543001     -0.610645      -7.39435       7.39435       161.708       169.102    
  29  0.808766     -0.212246      -2.57011       2.57011       161.952       164.522    
  30  0.286176      -1.25115      -15.1503       15.1503       162.571       177.721    
  31  0.328161      -1.11425      -13.4926       13.4926       162.825       176.317    
  32  0.563264     -0.574006      -6.95069       6.95069       164.566       171.517    
  33  0.180895      -1.70984      -20.7046       20.7046       155.551       176.255    
  34  0.977796     -0.224538E-01 -0.271895      0.271895       158.490       158.762    
  35  0.650784     -0.429577      -5.20179       5.20179       159.717       164.919    
  36  0.350586      -1.04815      -12.6921       12.6921       158.348       171.040    
  37  0.852996E-01  -2.46159      -29.8076       29.8076       158.097       187.904    
  38  0.363921      -1.01082      -12.2401       12.2401       163.578       175.818    
  39  0.715496E-01  -2.63737      -31.9361       31.9361       162.340       194.276    
  40  0.540542     -0.615184      -7.44932       7.44932       158.663       166.112    
  41  0.458744E-02  -5.38443      -65.2006       65.2006       162.983       228.183    
  42  0.684509     -0.379054      -4.59000       4.59000       165.090       169.680    
  43  0.827193     -0.189717      -2.29730       2.29730       159.455       161.753    
  44  0.430712     -0.842315      -10.1997       10.1997       155.616       165.816    
  45  0.925073     -0.778822E-01 -0.943083      0.943083       156.586       157.530    
  46  0.139567      -1.96921      -23.8454       23.8454       170.733       194.579    
  47  0.905138     -0.996680E-01  -1.20689       1.20689       154.646       155.852    
  48  0.230323      -1.46827      -17.7794       17.7794       161.050       178.829    
  49  0.854981     -0.156676      -1.89720       1.89720       159.760       161.657    
  50  0.526676     -0.641170      -7.76399       7.76399       160.210       167.974    
  51  0.425904     -0.853542      -10.3356       10.3356       164.031       174.367    
  52  0.770395     -0.260852      -3.15868       3.15868       158.335       161.493    
  53  0.222399      -1.50328      -18.2034       18.2034       164.924       183.127    
  54  0.849203     -0.163457      -1.97932       1.97932       153.690       155.670    
  55  0.409521     -0.892766      -10.8106       10.8106       161.444       172.255    
  56  0.526161     -0.642147      -7.77582       7.77582       161.212       168.988    
  57  0.705716     -0.348543      -4.22054       4.22054       163.261       167.482    
  58  0.548845E-03  -7.50769      -90.9114       90.9114       161.324       252.235    
  59  0.498314     -0.696524      -8.43428       8.43428       157.688       166.123    
  60  0.774749     -0.255216      -3.09044       3.09044       161.525       164.615    
  61  0.537402E-01  -2.92359      -35.4021       35.4021       167.860       203.262    
  62  0.708174     -0.345066      -4.17843       4.17843       161.872       166.050    
  63  0.272932      -1.29853      -15.7240       15.7240       158.974       174.698    
  64  0.701294     -0.354828      -4.29664       4.29664       162.078       166.375    
  65  0.309054      -1.17424      -14.2190       14.2190       161.324       175.543    
  66  0.911982     -0.921347E-01  -1.11567       1.11567       164.985       166.101    
  67  0.874613     -0.133974      -1.62231       1.62231       157.046       158.669    
  68  0.317616      -1.14691      -13.8881       13.8881       164.796       178.684    
  69  0.587945     -0.531123      -6.43141       6.43141       156.791       163.223    
  70  0.358507E-02  -5.63098      -68.1860       68.1860       161.330       229.516    
  71  0.802817     -0.219629      -2.65951       2.65951       162.816       165.475    
  72  0.559815     -0.580150      -7.02508       7.02508       154.726       161.751    
  73  0.303478      -1.19244      -14.4394       14.4394       163.436       177.875    
  74  0.226763      -1.48385      -17.9681       17.9681       165.069       183.037    
  75  0.934595     -0.676422E-01 -0.819086      0.819086       160.717       161.536    
loop,thermsimp(1:2)       27   19.5125      0.204252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293        159.66          0.87          1.15         25.24          0.21          0.06         27.53
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    159.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       27
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       28
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      292     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -17.7091       17.7091       152.198       169.907    
   2  0.922423     -0.807516E-01 -0.977829      0.977829       152.539       153.516    
   3  0.556007     -0.586974      -7.10772       7.10772       153.690       160.798    
   4  0.921345     -0.819211E-01 -0.991991      0.991991       154.646       155.638    
   5  0.623358     -0.472635      -5.72318       5.72318       156.586       162.310    
   6  0.967150     -0.334012E-01 -0.404458      0.404458       157.046       157.451    
   7  0.239844      -1.42777      -17.2890       17.2890       158.490       175.779    
   8  0.707370     -0.346201      -4.19218       4.19218       158.526       162.718    
   9  0.375591     -0.979256      -11.8579       11.8579       160.242       172.100    
  10  0.164915      -1.80233      -21.8245       21.8245       158.335       180.159    
  11  0.634729     -0.454558      -5.50428       5.50428       160.717       166.221    
  12  0.956585     -0.443852E-01 -0.537464      0.537464       159.760       160.297    
  13  0.281051      -1.26922      -15.3691       15.3691       154.726       170.095    
  14  0.332446      -1.10128      -13.3355       13.3355       159.455       172.791    
  15  0.417901     -0.872510      -10.5653       10.5653       155.109       165.674    
  16  0.454459     -0.788647      -9.54980       9.54980       162.484       172.034    
  17  0.163150      -1.81309      -21.9548       21.9548       160.660       182.615    
  18  0.412675     -0.885095      -10.7177       10.7177       160.681       171.399    
  19  0.510076     -0.673195      -8.15178       8.15178       156.791       164.943    
  20  0.159872E-02  -6.43855      -77.9650       77.9650       161.952       239.917    
  21  0.279094      -1.27620      -15.4537       15.4537       162.643       178.097    
  22  0.229843E-01  -3.77294      -45.6869       45.6869       162.947       208.634    
  23  0.829240E-02  -4.79242      -58.0318       58.0318       161.525       219.556    
  24  0.722732     -0.324717      -3.93203       3.93203       159.789       163.721    
  25  0.399402     -0.917787      -11.1136       11.1136       159.717       170.831    
  26  0.321457      -1.13489      -13.7425       13.7425       162.816       176.558    
  27  0.103147      -2.27160      -27.5070       27.5070       155.616       183.123    
  28  0.488570     -0.716273      -8.67342       8.67342       153.757       162.431    
  29  0.775391     -0.254388      -3.08041       3.08041       161.872       164.952    
  30  0.264831      -1.32866      -16.0889       16.0889       164.985       181.074    
  31  0.291634      -1.23225      -14.9215       14.9215       158.663       173.584    
  32  0.754799E-02  -4.88647      -59.1708       59.1708       157.688       216.859    
  33  0.403715     -0.907047      -10.9835       10.9835       162.078       173.062    
  34  0.794963     -0.229460      -2.77856       2.77856       160.604       163.383    
  35  0.482612E-01  -3.03113      -36.7042       36.7042       160.049       196.753    
  36  0.309506      -1.17278      -14.2013       14.2013       163.261       177.462    
  37  0.265676      -1.32548      -16.0503       16.0503       160.210       176.261    
  38  0.793358     -0.231480      -2.80301       2.80301       161.207       164.010    
  39  0.603192E-01  -2.80811      -34.0036       34.0036       161.212       195.215    
  40  0.516664     -0.660363      -7.99640       7.99640       161.708       169.705    
  41  0.524892E-01  -2.94715      -35.6873       35.6873       158.812       194.499    
  42  0.581500     -0.542144      -6.56488       6.56488       165.090       171.655    
  43  0.403805     -0.906823      -10.9808       10.9808       159.959       170.940    
  44  0.447829     -0.803344      -9.72776       9.72776       158.348       168.076    
  45  0.470604     -0.753737      -9.12708       9.12708       164.566       173.693    
  46  0.479088     -0.735871      -8.91073       8.91073       157.130       166.041    
  47  0.959223     -0.416322E-01 -0.504128      0.504128       152.040       152.544    
  48  0.527403     -0.639789      -7.74727       7.74727       161.444       169.192    
  49  0.731687     -0.312402      -3.78291       3.78291       158.917       162.700    
  50  0.682707     -0.381689      -4.62191       4.62191       159.375       163.997    
  51  0.386616     -0.950322      -11.5075       11.5075       164.031       175.539    
  52  0.120332      -2.11750      -25.6411       25.6411       158.974       184.615    
  53  0.285899      -1.25212      -15.1620       15.1620       161.324       176.486    
  54  0.798593     -0.224904      -2.72339       2.72339       160.107       162.831    
  55  0.305098      -1.18712      -14.3750       14.3750       163.578       177.953    
  56  0.274289      -1.29357      -15.6640       15.6640       155.551       171.215    
  57  0.805459     -0.216343      -2.61972       2.61972       162.825       165.444    
  58  0.665552     -0.407139      -4.93008       4.93008       162.571       167.501    
  59  0.721477     -0.326454      -3.95306       3.95306       163.436       167.389    
  60  0.563306     -0.573931      -6.94979       6.94979       164.796       171.746    
  61  0.253697      -1.37162      -16.6090       16.6090       161.050       177.659    
  62  0.714468     -0.336217      -4.07128       4.07128       154.957       159.028    
  63  0.106618      -2.23850      -27.1063       27.1063       165.069       192.175    
  64  0.116686      -2.14827      -26.0136       26.0136       156.387       182.401    
  65  0.856486     -0.154918      -1.87591       1.87591       164.924       166.800    
  66  0.895996     -0.109820      -1.32982       1.32982       159.336       160.666    
  67  0.112164      -2.18779      -26.4921       26.4921       158.186       184.678    
  68  0.573757     -0.555550      -6.72720       6.72720       158.097       164.824    
  69  0.376044     -0.978049      -11.8433       11.8433       162.340       174.183    
  70  0.779305     -0.249353      -3.01944       3.01944       170.733       173.753    
  71  0.815848E-01  -2.50611      -30.3467       30.3467       167.860       198.206    
  72  0.580028     -0.544678      -6.59556       6.59556       158.595       165.191    
  73  0.653056     -0.426093      -5.15960       5.15960       162.983       168.142    
  74  0.381298     -0.964173      -11.6753       11.6753       161.330       173.005    
  75  0.981759     -0.184090E-01 -0.222916      0.222916       159.658       159.880    
loop,thermsimp(1:2)       28   17.7091      0.977829    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294        159.48          0.87          1.15         25.26          0.12          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    159.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       28
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       29
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      293     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -13.3499       13.3499       152.040       165.390    
   2  0.991191     -0.884791E-02 -0.107140      0.107140       152.539       152.646    
   3  0.752830     -0.283916      -3.43797       3.43797       154.646       158.084    
   4  0.718872     -0.330071      -3.99687       3.99687       157.046       161.043    
   5  0.362244      -1.01544      -12.2960       12.2960       154.957       167.253    
   6  0.993342E-01  -2.30927      -27.9631       27.9631       159.658       187.621    
   7  0.734379     -0.308729      -3.73843       3.73843       159.760       163.498    
   8  0.190509      -1.65806      -20.0775       20.0775       159.336       179.414    
   9  0.113713      -2.17408      -26.3261       26.3261       153.690       180.016    
  10  0.582158     -0.541014      -6.55119       6.55119       156.586       163.138    
  11  0.100405E-01  -4.60113      -55.7155       55.7155       153.757       209.473    
  12  0.614877     -0.486333      -5.88905       5.88905       158.917       164.806    
  13  0.996806     -0.319890E-02 -0.387358E-01  0.387358E-01   158.526       158.564    
  14  0.439871E-01  -3.12386      -37.8271       37.8271       160.107       197.935    
  15  0.610456     -0.493549      -5.97643       5.97643       160.604       166.581    
  16  0.676471     -0.390866      -4.73303       4.73303       159.789       164.522    
  17  0.263829      -1.33246      -16.1348       16.1348       159.375       175.510    
  18  0.761962     -0.271858      -3.29195       3.29195       161.207       164.499    
  19  0.405295     -0.903140      -10.9362       10.9362       158.097       169.033    
  20  0.184680      -1.68913      -20.4539       20.4539       156.791       177.245    
  21  0.695434     -0.363219      -4.39826       4.39826       161.872       166.270    
  22  0.597154     -0.515580      -6.24321       6.24321       158.595       164.838    
  23  0.254276      -1.36933      -16.5814       16.5814       162.825       179.406    
  24  0.777974     -0.251062      -3.04014       3.04014       155.109       158.149    
  25  0.597236     -0.515443      -6.24155       6.24155       157.130       163.371    
  26  0.658168     -0.418295      -5.06517       5.06517       160.717       165.782    
  27  0.917953     -0.856086E-01  -1.03664       1.03664       164.924       165.960    
  28  0.167567      -1.78637      -21.6314       21.6314       163.436       185.067    
  29  0.867739E-02  -4.74703      -57.4823       57.4823       162.571       220.053    
  30  0.157469      -1.84853      -22.3840       22.3840       158.348       180.732    
  31  0.947458     -0.539724E-01 -0.653557      0.653557       162.983       163.636    
  32  0.883772     -0.123556      -1.49615       1.49615       161.444       162.940    
  33  0.873100     -0.135705      -1.64326       1.64326       161.708       163.351    
  34  0.138043      -1.98019      -23.9783       23.9783       152.198       176.176    
  35  0.833185     -0.182500      -2.20990       2.20990       154.726       156.936    
  36  0.907894     -0.966275E-01  -1.17007       1.17007       159.717       160.887    
  37  0.858432     -0.152648      -1.84843       1.84843       159.959       161.808    
  38  0.192050      -1.65000      -19.9800       19.9800       155.551       175.531    
  39  0.890666     -0.115786      -1.40206       1.40206       160.681       162.083    
  40  0.389935     -0.941775      -11.4040       11.4040       165.090       176.494    
  41  0.842362     -0.171545      -2.07726       2.07726       164.796       166.873    
  42  0.143912      -1.93855      -23.4741       23.4741       162.484       185.958    
  43  0.678545     -0.387804      -4.69596       4.69596       160.242       164.938    
  44  0.621021     -0.476390      -5.76866       5.76866       159.455       165.224    
  45  0.533199     -0.628861      -7.61494       7.61494       161.330       168.945    
  46  0.891703     -0.114623      -1.38798       1.38798       162.078       163.466    
  47  0.675469     -0.392349      -4.75099       4.75099       158.663       163.414    
  48  0.757471     -0.277770      -3.36354       3.36354       164.566       167.930    
  49  0.855441     -0.156139      -1.89070       1.89070       170.733       172.624    
  50  0.737982     -0.303836      -3.67918       3.67918       162.340       166.019    
  51  0.630328     -0.461515      -5.58853       5.58853       164.031       169.620    
  52  0.701612     -0.354375      -4.29116       4.29116       158.490       162.781    
  53  0.161537E-01  -4.12561      -49.9574       49.9574       160.210       210.168    
  54  0.716145     -0.333873      -4.04290       4.04290       161.324       165.367    
  55  0.644842     -0.438751      -5.31287       5.31287       162.816       168.129    
  56  0.465420E-01  -3.06740      -37.1434       37.1434       163.261       200.404    
  57  0.644178     -0.439780      -5.32534       5.32534       161.050       166.375    
  58  0.297766      -1.21145      -14.6695       14.6695       163.578       178.247    
  59  0.877956     -0.130159      -1.57610       1.57610       162.643       164.219    
  60  0.373410     -0.985078      -11.9284       11.9284       158.335       170.263    
  61  0.162588      -1.81653      -21.9966       21.9966       164.985       186.982    
  62  0.634599     -0.454761      -5.50675       5.50675       156.387       161.894    
  63  0.762468     -0.271195      -3.28392       3.28392       160.660       163.944    
  64  0.237905      -1.43588      -17.3873       17.3873       155.616       173.003    
  65  0.473101     -0.748446      -9.06301       9.06301       158.974       168.037    
  66  0.156066      -1.85747      -22.4923       22.4923       158.186       180.678    
  67  0.992592     -0.743581E-02 -0.900410E-01  0.900410E-01   165.069       165.159    
  68  0.568078     -0.565496      -6.84765       6.84765       158.812       165.659    
  69  0.918090     -0.854598E-01  -1.03484       1.03484       161.212       162.247    
  70  0.561720     -0.576753      -6.98395       6.98395       160.049       167.033    
  71  0.649692E-01  -2.73384      -33.1043       33.1043       167.860       200.964    
  72  0.757920     -0.277177      -3.35637       3.35637       162.947       166.303    
  73  0.182763      -1.69956      -20.5802       20.5802       157.688       178.269    
  74  0.281733      -1.26680      -15.3398       15.3398       161.525       176.864    
  75  0.901102     -0.104137      -1.26100       1.26100       159.481       160.742    
loop,thermsimp(1:2)       29   13.3499      0.107140    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295        156.58          0.86          1.15         25.27          0.45          0.06         27.78
Just calling func    0   0         27.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    296        161.06          0.86          1.14         25.22          0.27          0.05         27.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    156.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       29
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       30
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      295     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -22.3772       22.3772       152.539       174.916    
   2  0.553200     -0.592035      -7.16901       7.16901       154.726       161.895    
   3  0.825049     -0.192313      -2.32873       2.32873       154.646       156.974    
   4  0.767336     -0.264830      -3.20685       3.20685       155.109       158.315    
   5  0.966534     -0.340385E-01 -0.412175      0.412175       158.526       158.938    
   6  0.954430     -0.466410E-01 -0.564780      0.564780       159.481       160.045    
   7  0.780674     -0.247598      -2.99818       2.99818       159.717       162.716    
   8  0.312863      -1.16199      -14.0707       14.0707       157.046       171.117    
   9  0.990226     -0.982218E-02 -0.118938      0.118938       159.959       160.078    
  10  0.893872     -0.112193      -1.35855       1.35855       156.387       157.746    
  11  0.322320      -1.13221      -13.7100       13.7100       160.681       174.391    
  12  0.927465     -0.752997E-01 -0.911811      0.911811       161.212       162.124    
  13  0.539466     -0.617176      -7.47344       7.47344       158.490       165.964    
  14  0.461474     -0.773330      -9.36433       9.36433       161.444       170.809    
  15  0.745701     -0.293430      -3.55317       3.55317       156.586       160.140    
  16  0.703580     -0.351573      -4.25723       4.25723       161.708       165.965    
  17  0.917420E-01  -2.38878      -28.9259       28.9259       157.130       186.056    
  18  0.671661     -0.398001      -4.81944       4.81944       158.663       163.482    
  19  0.845179     -0.168207      -2.03684       2.03684       162.078       164.115    
  20  0.283605E-01  -3.56276      -43.1418       43.1418       159.760       202.901    
  21  0.108883E-01  -4.52006      -54.7339       54.7339       162.983       217.716    
  22  0.506006     -0.681208      -8.24881       8.24881       160.660       168.909    
  23  0.353918      -1.03869      -12.5776       12.5776       162.643       175.221    
  24  0.656862     -0.420282      -5.08923       5.08923       161.207       166.296    
  25  0.691560     -0.368806      -4.46590       4.46590       159.789       164.255    
  26  0.445402     -0.808779      -9.79358       9.79358       158.917       168.710    
  27  0.832700     -0.183081      -2.21695       2.21695       158.595       160.812    
  28  0.963063     -0.376360E-01 -0.455738      0.455738       160.242       160.698    
  29  0.422212     -0.862247      -10.4410       10.4410       165.069       175.510    
  30  0.917895     -0.856720E-01  -1.03741       1.03741       159.455       160.493    
  31  0.767210     -0.264994      -3.20884       3.20884       161.324       164.533    
  32  0.360836      -1.01933      -12.3432       12.3432       152.040       164.383    
  33  0.635930     -0.452667      -5.48138       5.48138       158.812       164.293    
  34  0.687292     -0.374995      -4.54085       4.54085       160.717       165.258    
  35  0.833832     -0.181724      -2.20051       2.20051       164.924       167.124    
  36  0.362075      -1.01590      -12.3017       12.3017       162.340       174.642    
  37  0.385764     -0.952530      -11.5343       11.5343       161.872       173.406    
  38  0.752556     -0.284279      -3.44236       3.44236       162.947       166.389    
  39  0.547433     -0.602515      -7.29591       7.29591       161.050       168.346    
  40  0.171004      -1.76607      -21.3855       21.3855       160.604       181.990    
  41  0.159022      -1.83871      -22.2651       22.2651       164.796       187.061    
  42  0.850806     -0.161571      -1.95647       1.95647       160.049       162.005    
  43  0.926075     -0.768001E-01 -0.929980      0.929980       154.957       155.887    
  44  0.584885     -0.536340      -6.49459       6.49459       164.566       171.061    
  45  0.547650     -0.602120      -7.29112       7.29112       158.974       166.265    
  46  0.864296     -0.145840      -1.76599       1.76599       162.816       164.582    
  47  0.384639     -0.955450      -11.5696       11.5696       161.330       172.899    
  48  0.359776      -1.02227      -12.3788       12.3788       158.097       170.476    
  49  0.147032      -1.91711      -23.2144       23.2144       164.031       187.246    
  50  0.649806     -0.431082      -5.22001       5.22001       158.335       163.555    
  51  0.909946     -0.943695E-01  -1.14273       1.14273       170.733       171.876    
  52  0.740699     -0.300161      -3.63468       3.63468       155.616       159.251    
  53  0.959446     -0.413992E-01 -0.501307      0.501307       159.375       159.877    
  54  0.993892     -0.612654E-02 -0.741868E-01  0.741868E-01   155.551       155.625    
  55  0.499875     -0.693397      -8.39641       8.39641       152.198       160.595    
  56  0.716813     -0.332941      -4.03161       4.03161       165.090       169.121    
  57  0.586555     -0.533488      -6.46006       6.46006       161.525       167.985    
  58  0.687999     -0.373968      -4.52841       4.52841       156.791       161.320    
  59  0.238056      -1.43525      -17.3796       17.3796       163.578       180.957    
  60  0.842319     -0.171596      -2.07788       2.07788       157.688       159.766    
  61  0.559244     -0.581169      -7.03743       7.03743       162.825       169.862    
  62  0.596920     -0.515973      -6.24796       6.24796       159.336       165.584    
  63  0.266753      -1.32143      -16.0014       16.0014       153.690       169.692    
  64  0.681727     -0.383126      -4.63931       4.63931       158.186       162.825    
  65  0.401206E-01  -3.21587      -38.9412       38.9412       158.348       197.289    
  66  0.275178      -1.29034      -15.6248       15.6248       163.436       179.061    
  67  0.830963     -0.185171      -2.24225       2.24225       162.484       164.726    
  68  0.802444     -0.220093      -2.66513       2.66513       164.985       167.651    
  69  0.661893E-01  -2.71524      -32.8790       32.8790       159.658       192.537    
  70  0.865761E-01  -2.44673      -29.6277       29.6277       160.107       189.735    
  71  0.778264     -0.250689      -3.03562       3.03562       163.261       166.297    
  72  0.386768     -0.949931      -11.5028       11.5028       167.860       179.363    
  73  0.506835     -0.679569      -8.22897       8.22897       153.757       161.986    
  74  0.564048     -0.572615      -6.93385       6.93385       160.210       167.144    
  75  0.423776     -0.858550      -10.3963       10.3963       156.578       166.974    
loop,thermsimp(1:2)       30   22.3772       7.16901    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297        157.65          0.87          1.15         25.14          0.27          0.05         27.47
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    157.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       30
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       31
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      297
neval,tstepnext:      296     297

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -15.5225       15.5225       155.551       171.073    
   2  0.202445      -1.59728      -19.3417       19.3417       154.957       174.298    
   3  0.927152     -0.756373E-01 -0.915900      0.915900       154.646       155.561    
   4  0.403144     -0.908460      -11.0006       11.0006       156.387       167.388    
   5  0.791838     -0.233398      -2.82624       2.82624       155.109       157.935    
   6  0.292576      -1.22903      -14.8824       14.8824       158.526       173.408    
   7  0.135578      -1.99821      -24.1965       24.1965       155.616       179.812    
   8  0.516570     -0.660545      -7.99861       7.99861       157.688       165.687    
   9  0.730579     -0.313918      -3.80126       3.80126       159.375       163.177    
  10  0.508248     -0.676786      -8.19527       8.19527       159.481       167.676    
  11  0.928455     -0.742338E-01 -0.898904      0.898904       159.959       160.858    
  12  0.696477     -0.361721      -4.38011       4.38011       156.586       160.967    
  13  0.465556     -0.764522      -9.25767       9.25767       159.455       168.713    
  14  0.194653      -1.63654      -19.8170       19.8170       152.198       172.015    
  15  0.650312     -0.430303      -5.21058       5.21058       160.242       165.452    
  16  0.555802     -0.587343      -7.11219       7.11219       158.595       165.707    
  17  0.985517     -0.145893E-01 -0.176663      0.176663       156.791       156.968    
  18  0.923066     -0.800544E-01 -0.969386      0.969386       154.726       155.696    
  19  0.658765     -0.417388      -5.05419       5.05419       153.757       158.812    
  20  0.197878      -1.62010      -19.6180       19.6180       160.049       179.667    
  21  0.449673     -0.799236      -9.67802       9.67802       161.212       170.890    
  22  0.208093      -1.56977      -19.0085       19.0085       159.717       178.726    
  23  0.102791      -2.27506      -27.5489       27.5489       158.186       185.735    
  24  0.650538     -0.429955      -5.20637       5.20637       158.663       163.869    
  25  0.223365      -1.49895      -18.1509       18.1509       158.335       176.485    
  26  0.520729     -0.652525      -7.90148       7.90148       162.078       169.980    
  27  0.919707E-01  -2.38629      -28.8958       28.8958       159.789       188.685    
  28  0.788427     -0.237716      -2.87852       2.87852       158.812       161.690    
  29  0.395754     -0.926961      -11.2247       11.2247       152.040       163.265    
  30  0.903388     -0.101603      -1.23032       1.23032       161.324       162.554    
  31  0.569415     -0.563145      -6.81918       6.81918       162.816       169.635    
  32  0.974677     -0.256496E-01 -0.310593      0.310593       162.484       162.795    
  33  0.376411     -0.977073      -11.8315       11.8315       160.717       172.549    
  34  0.309090      -1.17412      -14.2176       14.2176       159.336       173.554    
  35  0.248039      -1.39417      -16.8822       16.8822       158.490       175.372    
  36  0.941329     -0.604621E-01 -0.732142      0.732142       161.708       162.440    
  37  0.131879      -2.02587      -24.5315       24.5315       158.974       183.505    
  38  0.188022      -1.67120      -20.2367       20.2367       161.207       181.444    
  39  0.898649E-01  -2.40945      -29.1762       29.1762       163.261       192.437    
  40  0.853893     -0.157949      -1.91262       1.91262       162.947       164.860    
  41  0.643577     -0.440714      -5.33665       5.33665       156.578       161.914    
  42  0.664391     -0.408885      -4.95123       4.95123       164.924       169.875    
  43  0.825262     -0.192054      -2.32560       2.32560       160.210       162.536    
  44  0.611498     -0.491843      -5.95577       5.95577       164.985       170.941    
  45  0.284000      -1.25878      -15.2427       15.2427       161.525       176.767    
  46  0.108174      -2.22402      -26.9308       26.9308       161.050       187.981    
  47  0.293070      -1.22734      -14.8620       14.8620       158.917       173.779    
  48  0.412045     -0.886623      -10.7362       10.7362       160.660       171.396    
  49  0.464041     -0.767783      -9.29716       9.29716       165.090       174.387    
  50  0.711768     -0.340003      -4.11713       4.11713       153.690       157.807    
  51  0.919970     -0.834138E-01  -1.01007       1.01007       162.825       163.835    
  52  0.551321     -0.595437      -7.21021       7.21021       158.097       165.307    
  53  0.720690E-01  -2.63013      -31.8485       31.8485       161.444       193.293    
  54  0.788823     -0.237213      -2.87243       2.87243       164.566       167.439    
  55  0.339304      -1.08086      -13.0882       13.0882       157.046       170.135    
  56  0.824115     -0.193445      -2.34244       2.34244       170.733       173.076    
  57  0.564535     -0.571754      -6.92342       6.92342       161.330       168.253    
  58  0.608050     -0.497498      -6.02425       6.02425       161.872       167.896    
  59  0.696797     -0.361262      -4.37455       4.37455       160.681       165.055    
  60  0.287274      -1.24732      -15.1039       15.1039       162.340       177.444    
  61  0.302150E-01  -3.49942      -42.3748       42.3748       152.539       194.913    
  62  0.896370     -0.109402      -1.32476       1.32476       162.643       163.968    
  63  0.289059      -1.24112      -15.0289       15.0289       165.069       180.097    
  64  0.476596     -0.741086      -8.97388       8.97388       163.436       172.410    
  65  0.895851E-01  -2.41257      -29.2140       29.2140       167.860       197.074    
  66  0.864694     -0.145380      -1.76042       1.76042       163.578       165.338    
  67  0.222506      -1.50280      -18.1976       18.1976       160.604       178.802    
  68  0.800191     -0.222904      -2.69917       2.69917       157.130       159.829    
  69  0.332930      -1.09982      -13.3179       13.3179       164.796       178.114    
  70  0.616166     -0.484239      -5.86370       5.86370       164.031       169.895    
  71  0.560690E-01  -2.88117      -34.8884       34.8884       160.107       194.996    
  72  0.629756     -0.462422      -5.59951       5.59951       159.658       165.257    
  73  0.847024     -0.166026      -2.01043       2.01043       158.348       160.358    
  74  0.661200     -0.413699      -5.00952       5.00952       159.760       164.769    
  75  0.896150     -0.109647      -1.32772       1.32772       157.652       158.979    
loop,thermsimp(1:2)       31   15.5225       19.3417    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298        156.43          0.85          1.14         25.16          0.21          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    299        167.50          0.86          1.15         25.17          0.20          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    156.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.1091               297
loop is:       31
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    12.1091               297
loop is:       32
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    6.05455               371

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      298     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -2.14790       2.14790       154.646       156.793    
   2  0.779682     -0.248869      -1.50679       1.50679       154.726       156.233    
   3  0.611645     -0.491604      -2.97644       2.97644       156.791       159.768    
   4  0.380626     -0.965937      -5.84831       5.84831       153.690       159.539    
   5  0.986599     -0.134915E-01 -0.816848E-01  0.816848E-01   155.109       155.190    
   6  0.699021     -0.358075      -2.16798       2.16798       153.757       155.925    
   7  0.981217E-01  -2.32155      -14.0559       14.0559       157.652       171.707    
   8  0.221199      -1.50869      -9.13444       9.13444       157.130       166.264    
   9  0.802460     -0.220073      -1.33244       1.33244       158.348       159.680    
  10  0.623430     -0.472519      -2.86089       2.86089       159.959       162.820    
  11  0.669862     -0.400684      -2.42596       2.42596       156.586       159.012    
  12  0.957999     -0.429090E-01 -0.259794      0.259794       158.812       159.071    
  13  0.569879E-01  -2.86492      -17.3458       17.3458       156.578       173.924    
  14  0.245244      -1.40550      -8.50967       8.50967       161.708       170.218    
  15  0.870123     -0.139121     -0.842314      0.842314       160.210       161.053    
  16  0.429679     -0.844716      -5.11437       5.11437       161.324       166.438    
  17  0.369880     -0.994577      -6.02171       6.02171       162.484       168.506    
  18  0.964882     -0.357490E-01 -0.216444      0.216444       159.375       159.592    
  19  0.625983     -0.468432      -2.83614       2.83614       152.040       154.876    
  20  0.508652     -0.675991      -4.09282       4.09282       162.825       166.917    
  21  0.694697     -0.364279      -2.20554       2.20554       158.663       160.868    
  22  0.817819     -0.201114      -1.21765       1.21765       162.643       163.861    
  23  0.655732     -0.422003      -2.55504       2.55504       159.760       162.315    
  24  0.658757     -0.417401      -2.52717       2.52717       162.947       165.474    
  25  0.325934      -1.12106      -6.78751       6.78751       160.681       167.468    
  26  0.849137     -0.163535     -0.990129      0.990129       159.658       160.648    
  27  0.953435     -0.476843E-01 -0.288707      0.288707       158.097       158.385    
  28  0.435049     -0.832297      -5.03918       5.03918       163.578       168.617    
  29  0.155341E-01  -4.16472      -25.2155       25.2155       160.242       185.457    
  30  0.390095     -0.941364      -5.69953       5.69953       157.688       163.388    
  31  0.400867E-02  -5.51929      -33.4168       33.4168       158.595       192.012    
  32  0.989750     -0.103025E-01 -0.623770E-01  0.623770E-01   156.387       156.449    
  33  0.194149      -1.63913      -9.92418       9.92418       164.566       174.490    
  34  0.573547     -0.555915      -3.36581       3.36581       159.481       162.846    
  35  0.570216     -0.561740      -3.40108       3.40108       161.872       165.273    
  36  0.802122     -0.220494      -1.33499       1.33499       161.330       162.665    
  37  0.831214E-01  -2.48745      -15.0604       15.0604       159.455       174.516    
  38  0.280368      -1.27165      -7.69927       7.69927       162.816       170.515    
  39  0.568263     -0.565171      -3.42185       3.42185       164.924       168.345    
  40  0.570544     -0.561165      -3.39760       3.39760       164.031       167.429    
  41  0.524202     -0.645877      -3.91049       3.91049       162.078       165.989    
  42  0.625335E-01  -2.77205      -16.7835       16.7835       157.046       173.830    
  43  0.717146     -0.332476      -2.01299       2.01299       161.212       163.225    
  44  0.234175      -1.45169      -8.78931       8.78931       164.985       173.775    
  45  0.366320      -1.00425      -6.08027       6.08027       155.551       161.631    
  46  0.458915     -0.778891      -4.71583       4.71583       160.660       165.376    
  47  0.379536     -0.968806      -5.86568       5.86568       152.198       158.064    
  48  0.854466     -0.157278     -0.952250      0.952250       163.436       164.388    
  49  0.452738E-01  -3.09503      -18.7390       18.7390       160.717       179.456    
  50  0.966525     -0.340477E-01 -0.206143      0.206143       170.733       170.939    
  51  0.400949     -0.913920      -5.53337       5.53337       158.526       164.059    
  52  0.563096     -0.574305      -3.47716       3.47716       159.336       162.814    
  53  0.612298     -0.490536      -2.96997       2.96997       158.917       161.887    
  54  0.395518     -0.927559      -5.61595       5.61595       154.957       160.572    
  55  0.693522     -0.365972      -2.21579       2.21579       165.090       167.306    
  56  0.270894      -1.30603      -7.90741       7.90741       158.490       166.398    
  57  0.885600     -0.121490     -0.735566      0.735566       158.335       159.070    
  58  0.862297     -0.148155     -0.897012      0.897012       161.525       162.422    
  59  0.483017     -0.727702      -4.40591       4.40591       162.340       166.746    
  60  0.594400     -0.520203      -3.14959       3.14959       164.796       167.945    
  61  0.351664      -1.04508      -6.32748       6.32748       159.717       166.045    
  62  0.402505     -0.910048      -5.50993       5.50993       160.604       166.114    
  63  0.272240      -1.30107      -7.87740       7.87740       160.049       167.926    
  64  0.234792      -1.44906      -8.77338       8.77338       155.616       164.389    
  65  0.825709E-01  -2.49410      -15.1006       15.1006       165.069       180.169    
  66  0.636436     -0.451871      -2.73587       2.73587       161.207       163.943    
  67  0.942309     -0.594220E-01 -0.359773      0.359773       158.974       159.333    
  68  0.185829      -1.68293      -10.1894       10.1894       158.186       168.375    
  69  0.518004     -0.657773      -3.98251       3.98251       161.050       165.032    
  70  0.831797     -0.184167      -1.11505       1.11505       159.789       160.904    
  71  0.377117     -0.975199      -5.90439       5.90439       163.261       169.165    
  72  0.484710     -0.724205      -4.38474       4.38474       161.444       165.829    
  73  0.948059     -0.533383E-01 -0.322939      0.322939       152.539       152.862    
  74  0.325864      -1.12128      -6.78882       6.78882       160.107       166.896    
  75  0.519232     -0.655404      -3.96817       3.96817       156.426       160.394    
loop,thermsimp(1:2)       32   2.14790       1.50679    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300        178.28          0.87          1.15         25.20          0.18          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    178.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       32
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       33
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      299     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -5.48791       5.48791       152.539       158.027    
   2  0.598662     -0.513057      -3.10633       3.10633       152.040       155.146    
   3  0.165178      -1.80073      -10.9026       10.9026       155.109       166.011    
   4  0.785331     -0.241651      -1.46308       1.46308       153.757       155.220    
   5  0.422061     -0.862604      -5.22268       5.22268       154.726       159.949    
   6  0.343624      -1.06821      -6.46750       6.46750       156.387       162.855    
   7  0.988862     -0.112001E-01 -0.678115E-01  0.678115E-01   154.646       154.713    
   8  0.586093E-01  -2.83686      -17.1759       17.1759       152.198       169.374    
   9  0.324880      -1.12430      -6.80713       6.80713       158.097       164.904    
  10  0.869373     -0.139983     -0.847534      0.847534       156.586       157.434    
  11  0.314362      -1.15721      -7.00638       7.00638       158.335       165.341    
  12  0.635265     -0.453712      -2.74702       2.74702       158.812       161.559    
  13  0.800738     -0.222221      -1.34545       1.34545       158.974       160.319    
  14  0.234515      -1.45024      -8.78052       8.78052       153.690       162.471    
  15  0.818766     -0.199957      -1.21065       1.21065       159.375       160.586    
  16  0.480807     -0.732289      -4.43368       4.43368       158.348       162.782    
  17  0.173083      -1.75398      -10.6196       10.6196       156.791       167.411    
  18  0.544835     -0.607272      -3.67676       3.67676       156.426       160.103    
  19  0.955728     -0.452816E-01 -0.274159      0.274159       154.957       155.231    
  20  0.909631     -0.947157E-01 -0.573461      0.573461       159.658       160.231    
  21  0.538276     -0.619384      -3.75009       3.75009       158.663       162.413    
  22  0.640373     -0.445705      -2.69854       2.69854       159.789       162.488    
  23  0.588429     -0.530300      -3.21072       3.21072       160.210       163.421    
  24  0.954392     -0.466804E-01 -0.282628      0.282628       155.551       155.833    
  25  0.976738     -0.235363E-01 -0.142502      0.142502       158.917       159.059    
  26  0.801897     -0.220775      -1.33669       1.33669       159.760       161.096    
  27  0.679499     -0.386400      -2.33948       2.33948       161.525       163.864    
  28  0.303686      -1.19176      -7.21558       7.21558       161.330       168.545    
  29  0.907562     -0.969936E-01 -0.587252      0.587252       159.336       159.924    
  30  0.117971E-01  -4.43990      -26.8816       26.8816       159.959       186.841    
  31  0.324683      -1.12491      -6.81080       6.81080       159.481       166.291    
  32  0.662106     -0.412329      -2.49647       2.49647       161.212       163.708    
  33  0.334080      -1.09637      -6.63805       6.63805       157.688       164.327    
  34  0.307577      -1.17903      -7.13849       7.13849       162.643       169.782    
  35  0.539029     -0.617986      -3.74163       3.74163       161.207       164.949    
  36  0.822737     -0.195119      -1.18136       1.18136       158.526       159.707    
  37  0.973480     -0.268776E-01 -0.162732      0.162732       163.436       163.598    
  38  0.918970     -0.845018E-01 -0.511620      0.511620       155.616       156.127    
  39  0.203072      -1.59419      -9.65213       9.65213       161.050       170.702    
  40  0.467655     -0.760024      -4.60160       4.60160       161.872       166.474    
  41  0.323145      -1.12965      -6.83954       6.83954       160.660       167.499    
  42  0.505961     -0.681295      -4.12493       4.12493       162.947       167.072    
  43  0.699853E-01  -2.65947      -16.1019       16.1019       161.444       177.546    
  44  0.188263      -1.66991      -10.1106       10.1106       162.078       172.189    
  45  0.663178     -0.410711      -2.48667       2.48667       159.717       162.204    
  46  0.680233     -0.385320      -2.33294       2.33294       160.604       162.937    
  47  0.717812     -0.331548      -2.00737       2.00737       157.130       159.137    
  48  0.319374      -1.14139      -6.91062       6.91062       158.490       165.401    
  49  0.667076     -0.404851      -2.45119       2.45119       161.324       163.775    
  50  0.755360     -0.280560      -1.69867       1.69867       162.340       164.039    
  51  0.105804      -2.24617      -13.5995       13.5995       160.107       173.707    
  52  0.432752     -0.837590      -5.07123       5.07123       162.825       167.896    
  53  0.258710      -1.35205      -8.18603       8.18603       165.090       173.276    
  54  0.826410     -0.190665      -1.15439       1.15439       164.031       165.185    
  55  0.958430     -0.424590E-01 -0.257070      0.257070       160.681       160.938    
  56  0.898442     -0.107093     -0.648398      0.648398       160.049       160.697    
  57  0.794924     -0.229509      -1.38957       1.38957       164.796       166.185    
  58  0.191148      -1.65471      -10.0185       10.0185       164.924       174.942    
  59  0.920959     -0.823397E-01 -0.498530      0.498530       158.186       158.685    
  60  0.239714      -1.42831      -8.64776       8.64776       162.484       171.132    
  61  0.337561      -1.08601      -6.57529       6.57529       163.578       170.153    
  62  0.229537      -1.47169      -8.91043       8.91043       163.261       172.171    
  63  0.518941     -0.655965      -3.97157       3.97157       161.708       165.680    
  64  0.565096     -0.570759      -3.45569       3.45569       162.816       166.272    
  65  0.934648     -0.675849E-01 -0.409196      0.409196       170.733       171.142    
  66  0.699822     -0.356929      -2.16104       2.16104       157.652       159.813    
  67  0.614954     -0.486208      -2.94377       2.94377       164.985       167.929    
  68  0.137942      -1.98092      -11.9936       11.9936       157.046       169.040    
  69  0.565370     -0.570275      -3.45276       3.45276       156.578       160.031    
  70  0.290261E-01  -3.53956      -21.4304       21.4304       164.566       185.997    
  71  0.538956     -0.618121      -3.74244       3.74244       159.455       163.198    
  72  0.354440      -1.03722      -6.27988       6.27988       160.717       166.997    
  73  0.751241E-01  -2.58861      -15.6729       15.6729       165.069       180.741    
  74  0.811885     -0.208396      -1.26175       1.26175       160.242       161.504    
  75  0.820134     -0.198287      -1.20054       1.20054       178.276       179.476    
loop,thermsimp(1:2)       33   5.48791       3.10633    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301        161.55          0.87          1.14         25.26          0.56          0.06         27.89
Just calling func    0   0         27.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    161.55       0.5321     -1.563      2.346     -102.6      1.071    
                      0.7961E-01  1.672     -99.70      3.503     0.2903    
                       2.145     -1.293      1.530      5735.      2814.    
                     -0.5184      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5367.      57.20    
                     -0.5672     -6.546     -4.890     -9.067      6.004    
                      -14.93     -2.896      1025.      0.000      4764.    

                       3136.      4790.      2376.      4764.      5357.    
                       5445.    -0.7638E-01 0.7546E-01  0.000     0.1264    
                     -0.1415    -0.7436E-02 0.1033     0.3874E-01-0.3636E-01

                     -0.2445    -0.9848      0.000    -0.2569E-01-0.4801E-01
                       0.000    -0.2339E-01-0.4284E-01-0.6177E-01 0.3382E-01
                     -0.4234E-01 0.6151E-01-0.4921    -0.9826      4687.    

                     -0.6540    -0.6042     -2.427     -2.427     0.4106E-01
                     -0.2247E-01  9.122      8.747    -0.1867E+05 -4.000    
                     -0.4361    -0.3021      9.289      8.803    -0.1886E+05

                      -4.000     0.1539     -1.118      8.958      8.955    
                       7420.     -7.000    -0.3441    -0.7976      9.106    
                       8.833    -0.2147E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       33
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       34
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      300     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -8.92662       8.92662       154.646       163.572    
   2  0.299376      -1.20605      -7.30211       7.30211       152.040       159.342    
   3  0.220114      -1.51361      -9.16422       9.16422       153.757       162.922    
   4  0.229209      -1.47312      -8.91909       8.91909       154.957       163.876    
   5  0.902477     -0.102612     -0.621272      0.621272       155.551       156.172    
   6  0.659052     -0.416953      -2.52446       2.52446       155.616       158.140    
   7  0.100321E-01  -4.60197      -27.8628       27.8628       156.586       184.449    
   8  0.588837     -0.529606      -3.20652       3.20652       152.539       155.745    
   9  0.270943      -1.30585      -7.90632       7.90632       158.186       166.092    
  10  0.505518     -0.682171      -4.13024       4.13024       158.917       163.047    
  11  0.264565      -1.32967      -8.05055       8.05055       157.130       165.180    
  12  0.806386     -0.215193      -1.30290       1.30290       158.526       159.829    
  13  0.340560      -1.07716      -6.52174       6.52174       157.652       164.173    
  14  0.906186     -0.985106E-01 -0.596437      0.596437       159.336       159.933    
  15  0.786070     -0.240709      -1.45739       1.45739       154.726       156.184    
  16  0.540508     -0.615247      -3.72504       3.72504       156.578       160.303    
  17  0.935065     -0.671392E-01 -0.406497      0.406497       156.426       156.833    
  18  0.915359     -0.884391E-01 -0.535459      0.535459       159.658       160.193    
  19  0.958261     -0.426353E-01 -0.258137      0.258137       158.974       159.232    
  20  0.935110     -0.670907E-01 -0.406204      0.406204       159.375       159.782    
  21  0.637755     -0.449800      -2.72334       2.72334       160.049       162.772    
  22  0.975714     -0.245861E-01 -0.148858      0.148858       160.681       160.830    
  23  0.797424     -0.226369      -1.37056       1.37056       159.760       161.130    
  24  0.214179      -1.54094      -9.32972       9.32972       160.242       169.572    
  25  0.372145     -0.988472      -5.98475       5.98475       158.812       164.796    
  26  0.925208     -0.777367E-01 -0.470660      0.470660       159.717       160.188    
  27  0.175897      -1.73786      -10.5219       10.5219       158.663       169.184    
  28  0.952033     -0.491554E-01 -0.297614      0.297614       153.690       153.988    
  29  0.158274E-01  -4.14601      -25.1022       25.1022       159.789       184.892    
  30  0.799308     -0.224008      -1.35627       1.35627       158.348       159.704    
  31  0.248227      -1.39341      -8.43647       8.43647       156.387       164.824    
  32  0.244914      -1.40685      -8.51782       8.51782       160.604       169.122    
  33  0.390842     -0.939452      -5.68796       5.68796       159.455       165.143    
  34  0.146784      -1.91879      -11.6174       11.6174       160.210       171.828    
  35  0.500975     -0.691199      -4.18490       4.18490       163.436       167.621    
  36  0.480131E-01  -3.03628      -18.3833       18.3833       161.212       179.595    
  37  0.124503      -2.08343      -12.6142       12.6142       161.324       173.938    
  38  0.670304     -0.400024      -2.42197       2.42197       161.525       163.947    
  39  0.997449     -0.255468E-02 -0.154674E-01  0.154674E-01   162.340       162.356    
  40  0.681761     -0.383076      -2.31935       2.31935       157.688       160.008    
  41  0.440529     -0.819778      -4.96338       4.96338       158.097       163.060    
  42  0.342489      -1.07152      -6.48755       6.48755       161.207       167.695    
  43  0.735753     -0.306861      -1.85790       1.85790       164.031       165.889    
  44  0.614752     -0.486537      -2.94576       2.94576       158.335       161.280    
  45  0.351660      -1.04509      -6.32755       6.32755       158.490       164.818    
  46  0.777165     -0.252103      -1.52637       1.52637       161.708       163.234    
  47  0.392618     -0.934919      -5.66051       5.66051       155.109       160.769    
  48  0.385647     -0.952832      -5.76897       5.76897       164.796       170.565    
  49  0.834392     -0.181052      -1.09619       1.09619       162.816       163.912    
  50  0.469158     -0.756815      -4.58217       4.58217       159.481       164.063    
  51  0.697320     -0.360511      -2.18273       2.18273       161.872       164.055    
  52  0.987150     -0.129333E-01 -0.783051E-01  0.783051E-01   160.717       160.795    
  53  0.512413     -0.668624      -4.04822       4.04822       162.947       166.995    
  54  0.781282     -0.246819      -1.49438       1.49438       156.791       158.286    
  55  0.290579      -1.23588      -7.48270       7.48270       160.660       168.143    
  56  0.921499     -0.817534E-01 -0.494980      0.494980       162.825       163.320    
  57  0.198558      -1.61668      -9.78824       9.78824       164.985       174.774    
  58  0.488340     -0.716743      -4.33955       4.33955       161.330       165.669    
  59  0.874587     -0.134003     -0.811330      0.811330       157.046       157.858    
  60  0.165334      -1.79979      -10.8969       10.8969       152.198       163.095    
  61  0.712283     -0.339280      -2.05418       2.05418       162.643       164.697    
  62  0.578012E-01  -2.85075      -17.2600       17.2600       163.578       180.838    
  63  0.700556     -0.355880      -2.15469       2.15469       161.050       163.204    
  64  0.502101     -0.688954      -4.17130       4.17130       162.484       166.655    
  65  0.730977E-02  -4.91854      -29.7796       29.7796       170.733       200.513    
  66  0.986830     -0.132576E-01 -0.802685E-01  0.802685E-01   163.261       163.341    
  67  0.264041      -1.33165      -8.06253       8.06253       162.078       170.141    
  68  0.184096      -1.69230      -10.2461       10.2461       165.090       175.336    
  69  0.683389     -0.380691      -2.30491       2.30491       160.107       162.412    
  70  0.934635     -0.675991E-01 -0.409282      0.409282       164.924       165.333    
  71  0.974376     -0.259579E-01 -0.157163      0.157163       161.444       161.601    
  72  0.210957      -1.55610      -9.42150       9.42150       178.276       187.697    
  73  0.730997     -0.313347      -1.89717       1.89717       165.069       166.966    
  74  0.126848      -2.06477      -12.5012       12.5012       164.566       177.067    
  75  0.114031      -2.17129      -13.1462       13.1462       161.552       174.698    
loop,thermsimp(1:2)       34   8.92662       7.30211    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302        155.45          0.87          1.15         25.23          0.32          0.05         27.63
Just calling func    0   0         27.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    303        156.05          0.86          1.14         25.20          0.13          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    155.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       34
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       35
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      302     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -6.40419       6.40419       153.690       160.094    
   2  0.621479     -0.475653      -2.87987       2.87987       152.539       155.418    
   3  0.221273      -1.50836      -9.13243       9.13243       155.551       164.683    
   4  0.180626E-01  -4.01391      -24.3024       24.3024       154.726       179.029    
   5  0.216093      -1.53205      -9.27586       9.27586       156.426       165.702    
   6  0.351343      -1.04599      -6.33301       6.33301       157.046       163.379    
   7  0.360847      -1.01930      -6.17141       6.17141       155.616       161.787    
   8  0.439525     -0.822061      -4.97720       4.97720       156.791       161.769    
   9  0.910616E-01  -2.39622      -14.5080       14.5080       158.974       173.482    
  10  0.549745     -0.598300      -3.62244       3.62244       152.040       155.662    
  11  0.619825     -0.478318      -2.89600       2.89600       158.348       161.244    
  12  0.548169E-01  -2.90376      -17.5809       17.5809       159.375       176.956    
  13  0.947163     -0.542842E-01 -0.328666      0.328666       158.526       158.854    
  14  0.725459     -0.320951      -1.94321       1.94321       159.336       161.280    
  15  0.481613     -0.730615      -4.42354       4.42354       157.688       162.112    
  16  0.866286     -0.143540     -0.869072      0.869072       159.717       160.586    
  17  0.221988E-01  -3.80772      -23.0540       23.0540       159.658       182.712    
  18  0.980823     -0.193630E-01 -0.117234      0.117234       156.578       156.695    
  19  0.332549      -1.10097      -6.66586       6.66586       155.109       161.774    
  20  0.989035     -0.110256E-01 -0.667550E-01  0.667550E-01   160.717       160.784    
  21  0.364016      -1.01056      -6.11847       6.11847       160.681       166.799    
  22  0.861799     -0.148733     -0.900512      0.900512       159.760       160.660    
  23  0.622306     -0.474324      -2.87182       2.87182       158.335       161.206    
  24  0.575476     -0.552558      -3.34549       3.34549       161.444       164.790    
  25  0.205536      -1.58213      -9.57909       9.57909       162.340       171.919    
  26  0.124037      -2.08718      -12.6369       12.6369       160.107       172.744    
  27  0.467008     -0.761408      -4.60998       4.60998       160.049       164.659    
  28  0.273870      -1.29510      -7.84125       7.84125       153.757       161.599    
  29  0.842780     -0.171050      -1.03563       1.03563       158.917       159.953    
  30  0.709315     -0.343455      -2.07947       2.07947       158.097       160.176    
  31  0.677144     -0.389871      -2.36049       2.36049       152.198       154.559    
  32  0.656062     -0.421500      -2.55199       2.55199       161.050       163.602    
  33  0.721592     -0.326295      -1.97557       1.97557       161.708       163.684    
  34  0.120172      -2.11883      -12.8286       12.8286       162.825       175.653    
  35  0.832403     -0.183439      -1.11064       1.11064       163.261       164.372    
  36  0.607577     -0.498276      -3.01684       3.01684       154.646       157.662    
  37  0.169814      -1.77305      -10.7350       10.7350       154.957       165.692    
  38  0.578085     -0.548034      -3.31810       3.31810       162.816       166.134    
  39  0.201144      -1.60373      -9.70989       9.70989       161.525       171.234    
  40  0.922823     -0.803178E-01 -0.486288      0.486288       161.872       162.358    
  41  0.136644      -1.99038      -12.0508       12.0508       159.481       171.531    
  42  0.836366     -0.178689      -1.08188       1.08188       157.652       158.733    
  43  0.590669     -0.526499      -3.18771       3.18771       162.643       165.831    
  44  0.745946     -0.293102      -1.77460       1.77460       158.812       160.586    
  45  0.874736     -0.133833     -0.810298      0.810298       158.490       159.300    
  46  0.370232     -0.993625      -6.01595       6.01595       156.387       162.403    
  47  0.832293     -0.183570      -1.11144       1.11144       159.455       160.567    
  48  0.351566      -1.04536      -6.32917       6.32917       157.130       163.459    
  49  0.705870     -0.348324      -2.10894       2.10894       164.924       167.033    
  50  0.323816      -1.12758      -6.82699       6.82699       161.330       168.157    
  51  0.197269      -1.62319      -9.82767       9.82767       164.031       173.859    
  52  0.140686      -1.96123      -11.8743       11.8743       158.186       170.060    
  53  0.913651     -0.903067E-01 -0.546766      0.546766       162.484       163.031    
  54  0.515699     -0.662233      -4.00952       4.00952       165.069       169.078    
  55  0.217669      -1.52478      -9.23185       9.23185       162.947       172.179    
  56  0.234146      -1.45181      -8.79005       8.79005       163.436       172.226    
  57  0.948303     -0.530813E-01 -0.321383      0.321383       161.207       161.528    
  58  0.165683      -1.79768      -10.8841       10.8841       160.660       171.544    
  59  0.506186     -0.680851      -4.12224       4.12224       160.604       164.726    
  60  0.644381     -0.439466      -2.66077       2.66077       158.663       161.323    
  61  0.790610     -0.234950      -1.42251       1.42251       160.242       161.664    
  62  0.945427     -0.561185E-01 -0.339772      0.339772       162.078       162.418    
  63  0.195494      -1.63222      -9.88237       9.88237       164.796       174.678    
  64  0.478914     -0.736235      -4.45757       4.45757       160.210       164.668    
  65  0.926031     -0.768470E-01 -0.465274      0.465274       161.324       161.789    
  66  0.945712     -0.558175E-01 -0.337950      0.337950       161.552       161.890    
  67  0.892862     -0.113323     -0.686120      0.686120       164.985       165.672    
  68  0.766967     -0.265312      -1.60634       1.60634       165.090       166.696    
  69  0.720632     -0.327626      -1.98363       1.98363       164.566       166.550    
  70  0.404614     -0.904821      -5.47828       5.47828       161.212       166.690    
  71  0.799730     -0.223481      -1.35308       1.35308       163.578       164.931    
  72  0.442243     -0.815895      -4.93987       4.93987       156.586       161.526    
  73  0.662526     -0.411695      -2.49263       2.49263       159.789       162.282    
  74  0.720492     -0.327821      -1.98480       1.98480       178.276       180.261    
  75  0.368928     -0.997154      -6.03732       6.03732       155.446       161.483    
loop,thermsimp(1:2)       35   6.40419       2.87987    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304        160.97          0.86          1.15         25.23          0.25          0.05         27.54
Just calling func    0   0         27.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    305        164.57          0.87          1.15         25.19          0.20          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       35
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       36
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      304     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -8.80130       8.80130       152.198       160.999    
   2  0.607568     -0.498291      -3.01693       3.01693       152.539       155.556    
   3  0.905785     -0.989529E-01 -0.599115      0.599115       152.040       152.639    
   4  0.995938E-01  -2.30666      -13.9658       13.9658       156.578       170.544    
   5  0.851360     -0.160920     -0.974299      0.974299       154.646       155.620    
   6  0.730583     -0.313913      -1.90060       1.90060       157.652       159.552    
   7  0.426216     -0.852810      -5.16338       5.16338       158.526       163.689    
   8  0.285108      -1.25489      -7.59778       7.59778       158.490       166.088    
   9  0.839246     -0.175251      -1.06107       1.06107       158.917       159.978    
  10  0.217639      -1.52492      -9.23268       9.23268       153.690       162.923    
  11  0.183996E-02  -6.29801      -38.1316       38.1316       158.097       196.228    
  12  0.682631     -0.381801      -2.31163       2.31163       159.455       161.767    
  13  0.203596      -1.59162      -9.63653       9.63653       158.812       168.448    
  14  0.881164     -0.126512     -0.765973      0.765973       159.717       160.483    
  15  0.711431     -0.340477      -2.06143       2.06143       159.760       161.821    
  16  0.874326     -0.134302     -0.813137      0.813137       160.717       161.530    
  17  0.814222     -0.205523      -1.24435       1.24435       158.335       159.579    
  18  0.995668     -0.434126E-02 -0.262844E-01  0.262844E-01   158.348       158.374    
  19  0.693805     -0.365564      -2.21333       2.21333       159.336       161.550    
  20  0.958584     -0.422984E-01 -0.256098      0.256098       158.663       158.919    
  21  0.748022     -0.290323      -1.75778       1.75778       155.446       157.204    
  22  0.696703     -0.361396      -2.18809       2.18809       156.586       158.775    
  23  0.732990     -0.310623      -1.88068       1.88068       161.207       163.088    
  24  0.534749     -0.625958      -3.78989       3.78989       153.757       157.547    
  25  0.691641     -0.368688      -2.23224       2.23224       160.242       162.474    
  26  0.300458      -1.20245      -7.28027       7.28027       156.791       164.072    
  27  0.977116     -0.231502E-01 -0.140164      0.140164       155.109       155.249    
  28  0.542581     -0.611418      -3.70186       3.70186       155.616       159.318    
  29  0.266111      -1.32384      -8.01526       8.01526       161.324       169.339    
  30  0.692298     -0.367738      -2.22649       2.22649       161.552       163.778    
  31  0.664047     -0.409403      -2.47875       2.47875       157.688       160.167    
  32  0.542186     -0.612146      -3.70627       3.70627       159.789       163.496    
  33  0.362243      -1.01544      -6.14802       6.14802       161.872       168.020    
  34  0.578658     -0.547044      -3.31210       3.31210       156.387       159.699    
  35  0.489298     -0.714783      -4.32769       4.32769       162.078       166.406    
  36  0.617485     -0.482100      -2.91890       2.91890       162.484       165.403    
  37  0.368651     -0.997905      -6.04186       6.04186       157.046       163.088    
  38  0.198936      -1.61477      -9.77671       9.77671       157.130       166.907    
  39  0.505263     -0.682676      -4.13329       4.13329       161.050       165.183    
  40  0.983997     -0.161325E-01 -0.976749E-01  0.976749E-01   161.708       161.806    
  41  0.630553     -0.461159      -2.79211       2.79211       163.261       166.053    
  42  0.423821E-01  -3.16103      -19.1386       19.1386       160.049       179.188    
  43  0.488935     -0.715526      -4.33219       4.33219       160.210       164.543    
  44  0.402078     -0.911110      -5.51636       5.51636       155.551       161.067    
  45  0.380878     -0.965277      -5.84431       5.84431       160.604       166.448    
  46  0.260585E-01  -3.64741      -22.0834       22.0834       161.444       183.528    
  47  0.681660     -0.383224      -2.32025       2.32025       163.578       165.898    
  48  0.489074     -0.715241      -4.33046       4.33046       164.985       169.316    
  49  0.752363     -0.284536      -1.72274       1.72274       154.957       156.679    
  50  0.978934     -0.212911E-01 -0.128908      0.128908       156.426       156.555    
  51  0.297789      -1.21137      -7.33431       7.33431       162.643       169.977    
  52  0.551604     -0.594926      -3.60201       3.60201       162.816       166.418    
  53  0.546413     -0.604381      -3.65925       3.65925       164.566       168.225    
  54  0.831880     -0.184067      -1.11444       1.11444       161.212       162.326    
  55  0.873708     -0.135010     -0.817421      0.817421       165.090       165.907    
  56  0.169447      -1.77521      -10.7481       10.7481       160.681       171.429    
  57  0.434000     -0.834712      -5.05380       5.05380       164.924       169.977    
  58  0.506119     -0.680984      -4.12305       4.12305       161.330       165.453    
  59  0.168470      -1.78100      -10.7831       10.7831       165.069       175.852    
  60  0.820014     -0.198433      -1.20142       1.20142       158.186       159.388    
  61  0.973689     -0.266631E-01 -0.161433      0.161433       161.525       161.686    
  62  0.438579     -0.824215      -4.99025       4.99025       159.481       164.471    
  63  0.725095     -0.321452      -1.94625       1.94625       160.660       162.606    
  64  0.857338     -0.153923     -0.931935      0.931935       162.340       163.272    
  65  0.363865      -1.01097      -6.12097       6.12097       162.947       169.068    
  66  0.391136     -0.938701      -5.68341       5.68341       163.436       169.119    
  67  0.949080     -0.522625E-01 -0.316426      0.316426       160.107       160.424    
  68  0.791138     -0.234283      -1.41848       1.41848       158.974       160.392    
  69  0.675448     -0.392379      -2.37568       2.37568       164.031       166.407    
  70  0.955283     -0.457479E-01 -0.276983      0.276983       164.796       165.073    
  71  0.307295E-01  -3.48253      -21.0852       21.0852       162.825       183.910    
  72  0.581651E-01  -2.84447      -17.2220       17.2220       159.375       176.597    
  73  0.422976E-02  -5.46561      -33.0918       33.0918       154.726       187.818    
  74  0.221744      -1.50623      -9.11956       9.11956       178.276       187.395    
  75  0.118349E-01  -4.43670      -26.8622       26.8622       160.975       187.837    
loop,thermsimp(1:2)       36   8.80130       3.01693    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306        160.05          0.87          1.16         25.16          0.22          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    160.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       36
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       37
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      305     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -5.37906       5.37906       152.040       157.419    
   2  0.697205     -0.360676      -2.18373       2.18373       155.109       157.292    
   3  0.314648E-01  -3.45889      -20.9420       20.9420       152.539       173.481    
   4  0.857269     -0.154003     -0.932419      0.932419       154.646       155.578    
   5  0.652165     -0.427457      -2.58806       2.58806       156.426       159.014    
   6  0.510145     -0.673060      -4.07507       4.07507       154.957       159.032    
   7  0.175175      -1.74197      -10.5468       10.5468       155.446       165.993    
   8  0.373803     -0.984025      -5.95783       5.95783       153.757       159.715    
   9  0.514972     -0.663642      -4.01805       4.01805       158.348       162.366    
  10  0.548235     -0.601051      -3.63909       3.63909       156.586       160.226    
  11  0.541310     -0.613763      -3.71606       3.71606       158.663       162.379    
  12  0.734083     -0.309133      -1.87166       1.87166       155.616       157.488    
  13  0.422599     -0.861332      -5.21498       5.21498       158.186       163.401    
  14  0.287055      -1.24808      -7.55656       7.55656       157.652       165.208    
  15  0.885133     -0.122017     -0.738759      0.738759       158.335       159.073    
  16  0.391075     -0.938857      -5.68435       5.68435       156.387       162.071    
  17  0.473784     -0.747003      -4.52277       4.52277       158.917       163.440    
  18  0.691812     -0.368440      -2.23074       2.23074       157.688       159.919    
  19  0.644447     -0.439363      -2.66014       2.66014       158.974       161.634    
  20  0.805933     -0.215754      -1.30629       1.30629       160.107       161.414    
  21  0.393766     -0.931998      -5.64283       5.64283       159.717       165.360    
  22  0.907098E-01  -2.40009      -14.5315       14.5315       152.198       166.730    
  23  0.376515     -0.976796      -5.91406       5.91406       155.551       161.465    
  24  0.819190     -0.199439      -1.20752       1.20752       160.717       161.925    
  25  0.692438     -0.367536      -2.22526       2.22526       159.336       161.562    
  26  0.188370      -1.66935      -10.1071       10.1071       161.525       171.632    
  27  0.500532     -0.692083      -4.19025       4.19025       159.455       163.646    
  28  0.282311      -1.26475      -7.65747       7.65747       161.708       169.366    
  29  0.338061      -1.08453      -6.56633       6.56633       159.760       166.326    
  30  0.466208     -0.763123      -4.62037       4.62037       161.212       165.832    
  31  0.893084     -0.113075     -0.684617      0.684617       160.242       160.927    
  32  0.818806     -0.199908      -1.21036       1.21036       160.660       161.870    
  33  0.585066     -0.536031      -3.24543       3.24543       153.690       156.936    
  34  0.527412     -0.639774      -3.87354       3.87354       161.207       165.081    
  35  0.994295     -0.572143E-02 -0.346407E-01  0.346407E-01   157.046       157.081    
  36  0.739278     -0.302082      -1.82897       1.82897       162.340       164.169    
  37  0.230995      -1.46536      -8.87208       8.87208       159.789       168.661    
  38  0.414929     -0.879648      -5.32587       5.32587       158.526       163.852    
  39  0.378446     -0.971682      -5.88309       5.88309       161.552       167.435    
  40  0.368620     -0.997990      -6.04237       6.04237       156.791       162.834    
  41  0.301312      -1.19961      -7.26308       7.26308       159.481       166.744    
  42  0.105882E-01  -4.54801      -27.5362       27.5362       160.210       187.747    
  43  0.481885     -0.730049      -4.42012       4.42012       164.796       169.216    
  44  0.446716     -0.805833      -4.87895       4.87895       161.050       165.929    
  45  0.482098     -0.729608      -4.41745       4.41745       162.484       166.902    
  46  0.278892      -1.27693      -7.73124       7.73124       161.330       169.061    
  47  0.756484     -0.279074      -1.68967       1.68967       163.578       165.268    
  48  0.662766     -0.411334      -2.49044       2.49044       165.090       167.580    
  49  0.433861E-01  -3.13762      -18.9968       18.9968       163.261       182.258    
  50  0.825649E-02  -4.79676      -29.0422       29.0422       158.490       187.532    
  51  0.476679     -0.740911      -4.48588       4.48588       162.078       166.564    
  52  0.128614      -2.05094      -12.4175       12.4175       164.031       176.449    
  53  0.609086     -0.495797      -3.00182       3.00182       162.816       165.818    
  54  0.484878E-01  -3.02644      -18.3237       18.3237       160.604       178.928    
  55  0.287383E-02  -5.85211      -35.4319       35.4319       157.130       192.562    
  56  0.699724     -0.357070      -2.16190       2.16190       161.872       164.034    
  57  0.407524     -0.897655      -5.43489       5.43489       164.566       170.001    
  58  0.530107     -0.634677      -3.84268       3.84268       158.812       162.654    
  59  0.589469E-01  -2.83112      -17.1411       17.1411       162.947       180.088    
  60  0.357066E-01  -3.33242      -20.1763       20.1763       163.436       183.612    
  61  0.726760     -0.319159      -1.93236       1.93236       164.985       166.918    
  62  0.486103     -0.721334      -4.36735       4.36735       161.324       165.691    
  63  0.212811      -1.54735      -9.36851       9.36851       164.924       174.292    
  64  0.264725      -1.32906      -8.04688       8.04688       162.643       170.690    
  65  0.162129      -1.81936      -11.0154       11.0154       156.578       167.593    
  66  0.148935      -1.90425      -11.5293       11.5293       160.681       172.210    
  67  0.271622      -1.30334      -7.89116       7.89116       165.069       172.960    
  68  0.965736     -0.348643E-01 -0.211088      0.211088       159.375       159.586    
  69  0.659377     -0.416460      -2.52148       2.52148       160.049       162.570    
  70  0.569807     -0.562457      -3.40542       3.40542       161.444       164.850    
  71  0.294586      -1.22218      -7.39977       7.39977       162.825       170.224    
  72  0.404373     -0.905416      -5.48189       5.48189       178.276       183.758    
  73  0.725150     -0.321376      -1.94579       1.94579       154.726       156.672    
  74  0.192207      -1.64918      -9.98505       9.98505       160.975       170.960    
  75  0.799501     -0.223767      -1.35481       1.35481       160.047       161.402    
loop,thermsimp(1:2)       37   5.37906       2.18373    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307        160.32          0.86          1.15         25.17          0.16          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    160.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       37
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       38
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      306     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -5.41519       5.41519       154.646       160.061    
   2  0.259700      -1.34823      -8.16290       8.16290       154.726       162.889    
   3  0.681144E-01  -2.68657      -16.2659       16.2659       153.690       169.956    
   4  0.158140      -1.84427      -11.1662       11.1662       157.046       168.213    
   5  0.497681     -0.697796      -4.22484       4.22484       155.109       159.333    
   6  0.800218     -0.222871      -1.34938       1.34938       152.040       153.389    
   7  0.831967     -0.183962      -1.11381       1.11381       155.616       156.730    
   8  0.707345     -0.346237      -2.09631       2.09631       156.426       158.522    
   9  0.265927      -1.32454      -8.01946       8.01946       154.957       162.976    
  10  0.659046     -0.416962      -2.52451       2.52451       158.335       160.859    
  11  0.654587E-01  -2.72634      -16.5067       16.5067       159.375       175.882    
  12  0.223329      -1.49911      -9.07644       9.07644       153.757       162.834    
  13  0.996019     -0.398855E-02 -0.241489E-01  0.241489E-01   157.688       157.713    
  14  0.553910     -0.590753      -3.57674       3.57674       156.586       160.163    
  15  0.218863      -1.51931      -9.19873       9.19873       160.242       169.441    
  16  0.414020     -0.881841      -5.33915       5.33915       160.047       165.386    
  17  0.229117      -1.47352      -8.92151       8.92151       160.107       169.029    
  18  0.341764      -1.07363      -6.50037       6.50037       155.551       162.051    
  19  0.357052      -1.02987      -6.23541       6.23541       159.336       165.572    
  20  0.780779     -0.247463      -1.49828       1.49828       158.974       160.472    
  21  0.382234     -0.961721      -5.82279       5.82279       160.660       166.483    
  22  0.123899      -2.08829      -12.6437       12.6437       160.717       173.361    
  23  0.393312     -0.933152      -5.64981       5.64981       156.387       162.037    
  24  0.481741     -0.730349      -4.42193       4.42193       158.348       162.770    
  25  0.120001      -2.12026      -12.8372       12.8372       158.663       171.500    
  26  0.506023     -0.681173      -4.12419       4.12419       160.049       164.173    
  27  0.891157     -0.115235     -0.697697      0.697697       158.812       159.509    
  28  0.584674     -0.536701      -3.24948       3.24948       156.791       160.041    
  29  0.313196      -1.16093      -7.02888       7.02888       158.186       165.215    
  30  0.507340     -0.678574      -4.10846       4.10846       158.917       163.025    
  31  0.985030     -0.150835E-01 -0.913240E-01  0.913240E-01   159.455       159.547    
  32  0.186570      -1.67895      -10.1653       10.1653       158.526       168.691    
  33  0.992622     -0.740493E-02 -0.448335E-01  0.448335E-01   161.872       161.917    
  34  0.344152      -1.06667      -6.45821       6.45821       162.340       168.798    
  35  0.327214      -1.11714      -6.76379       6.76379       161.444       168.208    
  36  0.722008     -0.325719      -1.97208       1.97208       161.207       163.179    
  37  0.471441     -0.751960      -4.55278       4.55278       157.652       162.204    
  38  0.483594     -0.726510      -4.39869       4.39869       163.578       167.977    
  39  0.799410     -0.223881      -1.35550       1.35550       159.717       161.073    
  40  0.864070     -0.146101     -0.884577      0.884577       161.324       162.209    
  41  0.326419      -1.11957      -6.77852       6.77852       162.816       169.594    
  42  0.970166E-01  -2.33287      -14.1245       14.1245       161.212       175.336    
  43  0.822479     -0.195432      -1.18326       1.18326       161.050       162.233    
  44  0.719858     -0.328701      -1.99014       1.99014       155.446       157.436    
  45  0.359763      -1.02231      -6.18963       6.18963       159.760       165.949    
  46  0.879180     -0.128765     -0.779616      0.779616       162.078       162.858    
  47  0.152514      -1.88050      -11.3856       11.3856       152.198       163.584    
  48  0.379430     -0.969085      -5.86737       5.86737       159.481       165.348    
  49  0.444703     -0.810349      -4.90630       4.90630       162.484       167.390    
  50  0.240485      -1.42510      -8.62832       8.62832       164.985       173.614    
  51  0.682479     -0.382024      -2.31298       2.31298       161.552       163.865    
  52  0.989508     -0.105479E-01 -0.638627E-01  0.638627E-01   165.090       165.154    
  53  0.626329E-01  -2.77046      -16.7739       16.7739       156.578       173.352    
  54  0.217806      -1.52415      -9.22805       9.22805       159.789       169.017    
  55  0.297102      -1.21368      -7.34828       7.34828       161.330       168.678    
  56  0.447982     -0.803002      -4.86181       4.86181       164.796       169.658    
  57  0.343456      -1.06870      -6.47046       6.47046       161.708       168.179    
  58  0.737340     -0.304706      -1.84485       1.84485       164.566       166.411    
  59  0.863080     -0.147248     -0.891517      0.891517       162.825       163.716    
  60  0.463462     -0.769030      -4.65613       4.65613       162.643       167.299    
  61  0.120067      -2.11970      -12.8338       12.8338       160.975       173.809    
  62  0.758415     -0.276525      -1.67423       1.67423       161.525       163.199    
  63  0.356867      -1.03039      -6.23855       6.23855       160.681       166.919    
  64  0.811695     -0.208631      -1.26317       1.26317       165.069       166.332    
  65  0.712430     -0.339074      -2.05294       2.05294       152.539       154.592    
  66  0.343671      -1.06807      -6.46668       6.46668       164.924       171.390    
  67  0.455065     -0.787315      -4.76684       4.76684       164.031       168.798    
  68  0.462404     -0.771317      -4.66997       4.66997       160.604       165.274    
  69  0.197402      -1.62251      -9.82359       9.82359       162.947       172.771    
  70  0.870222     -0.139007     -0.841626      0.841626       163.261       164.103    
  71  0.938983     -0.629581E-01 -0.381182      0.381182       163.436       163.817    
  72  0.362909      -1.01360      -6.13691       6.13691       178.276       184.413    
  73  0.461338     -0.773624      -4.68394       4.68394       158.490       163.174    
  74  0.437927E-01  -3.12829      -18.9404       18.9404       160.210       179.151    
  75  0.538440     -0.619080      -3.74825       3.74825       160.315       164.063    
loop,thermsimp(1:2)       38   5.41519       8.16290    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308        158.18          0.87          1.15         25.15          0.46          0.05         27.69
Just calling func    0   0         27.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    309        161.84          0.83          1.15         25.19          0.57          0.05         27.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       38
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       39
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      308     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -12.5867       12.5867       152.040       164.627    
   2  0.274837      -1.29158      -7.81990       7.81990       152.539       160.359    
   3  0.305931E-01  -3.48698      -21.1121       21.1121       155.616       176.728    
   4  0.929157     -0.734779E-01 -0.444876      0.444876       155.446       155.891    
   5  0.995956     -0.405208E-02 -0.245335E-01  0.245335E-01   157.688       157.713    
   6  0.904971     -0.998521E-01 -0.604559      0.604559       156.426       157.031    
   7  0.189758      -1.66200      -10.0627       10.0627       155.109       165.171    
   8  0.134931      -2.00299      -12.1272       12.1272       158.812       170.939    
   9  0.302412      -1.19596      -7.24103       7.24103       159.455       166.696    
  10  0.389155     -0.943777      -5.71414       5.71414       156.791       162.506    
  11  0.947428     -0.540040E-01 -0.326970      0.326970       154.646       154.973    
  12  0.338357      -1.08365      -6.56103       6.56103       156.586       163.148    
  13  0.937476     -0.645645E-01 -0.390909      0.390909       158.974       159.365    
  14  0.399493     -0.917560      -5.55541       5.55541       158.335       163.890    
  15  0.527586     -0.639444      -3.87154       3.87154       159.717       163.589    
  16  0.297740      -1.21153      -7.33529       7.33529       161.872       169.207    
  17  0.557978     -0.583436      -3.53244       3.53244       156.387       159.920    
  18  0.267521      -1.31856      -7.98326       7.98326       155.551       163.534    
  19  0.637637     -0.449986      -2.72446       2.72446       157.652       160.376    
  20  0.838569     -0.176059      -1.06596       1.06596       161.324       162.390    
  21  0.132199E-01  -4.32603      -26.1922       26.1922       161.050       187.242    
  22  0.745606     -0.293557      -1.77736       1.77736       158.348       160.125    
  23  0.334504      -1.09511      -6.63037       6.63037       153.757       160.388    
  24  0.118852      -2.12987      -12.8954       12.8954       162.078       174.974    
  25  0.319911      -1.13971      -6.90045       6.90045       154.726       161.627    
  26  0.638302E-01  -2.75153      -16.6593       16.6593       154.957       171.616    
  27  0.173204      -1.75329      -10.6154       10.6154       158.917       169.532    
  28  0.885640     -0.121444     -0.735291      0.735291       158.490       159.225    
  29  0.710758     -0.341423      -2.06716       2.06716       161.207       163.274    
  30  0.938919     -0.630265E-01 -0.381597      0.381597       161.525       161.906    
  31  0.217740      -1.52445      -9.22986       9.22986       152.198       161.428    
  32  0.130036      -2.03994      -12.3509       12.3509       162.825       175.176    
  33  0.331090      -1.10537      -6.69249       6.69249       163.436       170.128    
  34  0.453525E-01  -3.09329      -18.7285       18.7285       161.552       180.280    
  35  0.494600     -0.704006      -4.26243       4.26243       160.315       164.577    
  36  0.488771E-01  -3.01845      -18.2753       18.2753       163.261       181.536    
  37  0.262916E-01  -3.63850      -22.0295       22.0295       160.049       182.079    
  38  0.975293     -0.250177E-01 -0.151471      0.151471       165.090       165.241    
  39  0.521026     -0.651955      -3.94729       3.94729       158.186       162.133    
  40  0.210960      -1.55609      -9.42140       9.42140       160.604       170.026    
  41  0.475166E-02  -5.34926      -32.3874       32.3874       159.481       191.868    
  42  0.675859     -0.391771      -2.37199       2.37199       160.047       162.419    
  43  0.691418     -0.369011      -2.23419       2.23419       159.336       161.571    
  44  0.425152     -0.855309      -5.17851       5.17851       159.760       164.938    
  45  0.141313      -1.95678      -11.8474       11.8474       165.069       176.916    
  46  0.902170     -0.102952     -0.623328      0.623328       164.566       165.189    
  47  0.794321     -0.230268      -1.39417       1.39417       160.660       162.054    
  48  0.685387     -0.377772      -2.28724       2.28724       160.681       162.968    
  49  0.273223      -1.29747      -7.85557       7.85557       162.643       170.499    
  50  0.784111     -0.243205      -1.47250       1.47250       162.484       163.957    
  51  0.824524     -0.192949      -1.16822       1.16822       163.578       164.746    
  52  0.855082     -0.156558     -0.947889      0.947889       161.708       162.656    
  53  0.744692E-01  -2.59737      -15.7259       15.7259       161.444       177.170    
  54  0.294857E-01  -3.52385      -21.3353       21.3353       157.046       178.382    
  55  0.225962      -1.48739      -9.00546       9.00546       161.330       170.335    
  56  0.211073      -1.55555      -9.41815       9.41815       158.526       167.944    
  57  0.525673E-01  -2.94566      -17.8346       17.8346       164.031       181.866    
  58  0.855455     -0.156122     -0.945248      0.945248       162.340       163.285    
  59  0.169262E-01  -4.07890      -24.6959       24.6959       159.789       184.485    
  60  0.578360     -0.547559      -3.31522       3.31522       160.107       163.423    
  61  0.753083     -0.283580      -1.71695       1.71695       160.242       161.959    
  62  0.942983     -0.587068E-01 -0.355443      0.355443       162.816       163.171    
  63  0.164299      -1.80607      -10.9349       10.9349       164.796       175.731    
  64  0.964876     -0.357557E-01 -0.216485      0.216485       153.690       153.907    
  65  0.905245E-01  -2.40213      -14.5438       14.5438       164.924       179.467    
  66  0.812887     -0.207163      -1.25428       1.25428       158.663       159.917    
  67  0.702547     -0.353043      -2.13751       2.13751       162.947       165.085    
  68  0.229959      -1.46986      -8.89931       8.89931       156.578       165.477    
  69  0.880507     -0.127257     -0.770483      0.770483       160.717       161.488    
  70  0.528445     -0.637816      -3.86169       3.86169       164.985       168.847    
  71  0.461632     -0.772988      -4.68009       4.68009       160.975       165.655    
  72  0.877049     -0.131193     -0.794313      0.794313       161.212       162.006    
  73  0.652452     -0.427017      -2.58539       2.58539       159.375       161.961    
  74  0.563656     -0.573311      -3.47114       3.47114       160.210       163.682    
  75  0.301756      -1.19814      -7.25418       7.25418       158.180       165.434    
loop,thermsimp(1:2)       39   12.5867       7.81990    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310        161.06          0.87          1.15         25.30          0.23          0.06         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    311        186.53          0.85          1.14         25.10          0.28          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    161.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       39
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       40
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      310     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -4.62800       4.62800       153.690       158.318    
   2  0.310178      -1.17061      -7.08750       7.08750       154.646       161.733    
   3  0.883713     -0.123623     -0.748482      0.748482       155.446       156.194    
   4  0.641465     -0.444001      -2.68823       2.68823       156.426       159.114    
   5  0.458576E-01  -3.08222      -18.6614       18.6614       157.688       176.350    
   6  0.611421     -0.491970      -2.97866       2.97866       158.490       161.469    
   7  0.292603      -1.22894      -7.44067       7.44067       158.974       166.414    
   8  0.180818      -1.71026      -10.3549       10.3549       158.663       169.017    
   9  0.490648     -0.712028      -4.31101       4.31101       156.387       160.698    
  10  0.538601     -0.618781      -3.74644       3.74644       158.348       162.094    
  11  0.451209     -0.795824      -4.81835       4.81835       152.539       157.357    
  12  0.610260     -0.493870      -2.99016       2.99016       157.652       160.642    
  13  0.425113     -0.855401      -5.17906       5.17906       153.757       158.936    
  14  0.647858     -0.434084      -2.62818       2.62818       152.198       154.826    
  15  0.394937     -0.929029      -5.62485       5.62485       160.717       166.342    
  16  0.452279E-01  -3.09604      -18.7451       18.7451       159.336       178.082    
  17  0.954905     -0.461437E-01 -0.279379      0.279379       154.726       155.006    
  18  0.362548      -1.01460      -6.14293       6.14293       161.525       167.667    
  19  0.808078     -0.213097      -1.29021       1.29021       160.242       161.532    
  20  0.219348      -1.51709      -9.18532       9.18532       159.375       168.561    
  21  0.206981      -1.57513      -9.53667       9.53667       161.212       170.748    
  22  0.719933     -0.328597      -1.98951       1.98951       160.660       162.649    
  23  0.950238     -0.510432E-01 -0.309043      0.309043       158.186       158.495    
  24  0.845993     -0.167244      -1.01259       1.01259       161.324       162.337    
  25  0.157926      -1.84563      -11.1745       11.1745       160.047       171.221    
  26  0.430020     -0.843924      -5.10958       5.10958       156.791       161.901    
  27  0.624159     -0.471350      -2.85381       2.85381       161.708       164.562    
  28  0.355386      -1.03455      -6.26374       6.26374       160.681       166.945    
  29  0.297353      -1.21284      -7.34317       7.34317       156.586       163.930    
  30  0.185476      -1.68483      -10.2009       10.2009       162.816       173.017    
  31  0.406569     -0.900002      -5.44910       5.44910       161.207       166.656    
  32  0.147052      -1.91697      -11.6064       11.6064       162.340       173.947    
  33  0.205955      -1.58010      -9.56676       9.56676       160.107       169.674    
  34  0.383503     -0.958409      -5.80273       5.80273       155.551       161.353    
  35  0.514677E-01  -2.96680      -17.9626       17.9626       159.717       177.680    
  36  0.499194     -0.694760      -4.20645       4.20645       160.210       164.417    
  37  0.103172E-01  -4.57394      -27.6931       27.6931       158.335       186.028    
  38  0.470163     -0.754676      -4.56922       4.56922       162.484       167.053    
  39  0.983694     -0.164404E-01 -0.995389E-01  0.995389E-01   160.315       160.415    
  40  0.880425     -0.127351     -0.771050      0.771050       152.040       152.811    
  41  0.969759     -0.307072E-01 -0.185918      0.185918       163.578       163.764    
  42  0.761826E-01  -2.57462      -15.5882       15.5882       159.760       175.348    
  43  0.124427      -2.08404      -12.6179       12.6179       162.947       175.565    
  44  0.997702     -0.230032E-02 -0.139274E-01  0.139274E-01   155.109       155.123    
  45  0.213939      -1.54206      -9.33650       9.33650       164.566       173.903    
  46  0.471369     -0.752113      -4.55370       4.55370       165.090       169.643    
  47  0.421561E-01  -3.16638      -19.1710       19.1710       158.180       177.351    
  48  0.693092     -0.366592      -2.21955       2.21955       156.578       158.797    
  49  0.375157     -0.980409      -5.93593       5.93593       160.975       166.911    
  50  0.285659      -1.25296      -7.58608       7.58608       159.455       167.042    
  51  0.338951      -1.08190      -6.55042       6.55042       158.526       165.076    
  52  0.930127E-01  -2.37502      -14.3797       14.3797       164.985       179.365    
  53  0.840878     -0.173309      -1.04931       1.04931       161.872       162.921    
  54  0.384591     -0.955575      -5.78558       5.78558       158.917       164.702    
  55  0.212856      -1.54714      -9.36722       9.36722       160.604       169.971    
  56  0.878356     -0.129704     -0.785298      0.785298       163.436       164.221    
  57  0.623236E-01  -2.77542      -16.8039       16.8039       161.330       178.134    
  58  0.374221E-02  -5.58808      -33.8333       33.8333       162.643       196.476    
  59  0.851985     -0.160186     -0.969856      0.969856       158.812       159.781    
  60  0.779613     -0.248958      -1.50733       1.50733       154.957       156.464    
  61  0.991658     -0.837700E-02 -0.507189E-01  0.507189E-01   162.078       162.129    
  62  0.425290     -0.854985      -5.17654       5.17654       162.825       168.001    
  63  0.613403     -0.488733      -2.95906       2.95906       164.796       167.755    
  64  0.487347E-01  -3.02136      -18.2930       18.2930       155.616       173.909    
  65  0.267732      -1.31777      -7.97850       7.97850       165.069       173.047    
  66  0.159530      -1.83552      -11.1133       11.1133       161.444       172.558    
  67  0.312803E-01  -3.46477      -20.9776       20.9776       157.046       178.024    
  68  0.956405     -0.445737E-01 -0.269873      0.269873       164.924       165.193    
  69  0.683324     -0.380786      -2.30549       2.30549       161.552       163.857    
  70  0.482307     -0.729174      -4.41482       4.41482       163.261       167.676    
  71  0.928745     -0.739216E-01 -0.447562      0.447562       164.031       164.479    
  72  0.483353     -0.727009      -4.40171       4.40171       160.049       164.451    
  73  0.313709      -1.15929      -7.01898       7.01898       159.789       166.808    
  74  0.609018     -0.495907      -3.00249       3.00249       161.050       164.052    
  75  0.252277E-01  -3.67981      -22.2796       22.2796       161.060       183.339    
loop,thermsimp(1:2)       40   4.62800       7.08750    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312        156.08          0.87          1.15         25.25          0.16          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    313        152.72          0.87          1.15         25.23          0.12          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       40
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       41
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      312     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -8.86998       8.86998       152.040       160.910    
   2  0.984723     -0.153953E-01 -0.932118E-01  0.932118E-01   152.198       152.291    
   3  0.689569     -0.371688      -2.25040       2.25040       154.726       156.977    
   4  0.539532     -0.617054      -3.73598       3.73598       155.109       158.845    
   5  0.103859      -2.26472      -13.7119       13.7119       155.446       169.158    
   6  0.403261     -0.908171      -5.49856       5.49856       154.957       160.455    
   7  0.545138     -0.606716      -3.67339       3.67339       152.539       156.212    
   8  0.211198      -1.55496      -9.41459       9.41459       153.690       163.105    
   9  0.533123     -0.629004      -3.80833       3.80833       158.186       161.994    
  10  0.891214     -0.115171     -0.697306      0.697306       156.578       157.275    
  11  0.604806     -0.502847      -3.04451       3.04451       153.757       156.802    
  12  0.176166      -1.73633      -10.5127       10.5127       156.426       166.939    
  13  0.733693     -0.309664      -1.87487       1.87487       158.812       160.686    
  14  0.248504      -1.39230      -8.42973       8.42973       160.315       168.745    
  15  0.183808      -1.69387      -10.2556       10.2556       157.652       167.907    
  16  0.308674E-02  -5.78064      -34.9992       34.9992       156.387       191.386    
  17  0.651025     -0.429207      -2.59865       2.59865       155.551       158.149    
  18  0.864353     -0.145775     -0.882599      0.882599       158.490       159.373    
  19  0.547352     -0.602664      -3.64885       3.64885       160.242       163.891    
  20  0.631248     -0.460057      -2.78544       2.78544       154.646       157.431    
  21  0.344368E-01  -3.36863      -20.3955       20.3955       156.791       177.187    
  22  0.876828     -0.131444     -0.795836      0.795836       158.348       159.144    
  23  0.884538     -0.122690     -0.742834      0.742834       162.078       162.821    
  24  0.926808     -0.760084E-01 -0.460196      0.460196       161.324       161.784    
  25  0.823462     -0.194237      -1.17602       1.17602       160.660       161.836    
  26  0.852580     -0.159489     -0.965632      0.965632       161.872       162.838    
  27  0.577707     -0.548689      -3.32206       3.32206       163.578       166.900    
  28  0.510093     -0.673163      -4.07570       4.07570       161.552       165.627    
  29  0.890288     -0.116210     -0.703598      0.703598       156.586       157.290    
  30  0.304875      -1.18785      -7.19191       7.19191       161.050       168.242    
  31  0.152164      -1.88279      -11.3995       11.3995       163.436       174.835    
  32  0.718687     -0.330329      -1.99999       1.99999       160.210       162.210    
  33  0.488128     -0.717177      -4.34218       4.34218       160.049       164.391    
  34  0.373052     -0.986038      -5.97001       5.97001       164.031       170.001    
  35  0.247351      -1.39695      -8.45788       8.45788       161.708       170.166    
  36  0.532108     -0.630909      -3.81987       3.81987       158.917       162.737    
  37  0.828879E-02  -4.79285      -29.0185       29.0185       158.526       187.544    
  38  0.168277      -1.78214      -10.7901       10.7901       164.924       175.714    
  39  0.253216      -1.37351      -8.31600       8.31600       160.717       169.033    
  40  0.458588     -0.779602      -4.72014       4.72014       158.974       163.694    
  41  0.725692     -0.320630      -1.94127       1.94127       161.207       163.148    
  42  0.283543      -1.26039      -7.63111       7.63111       159.789       167.421    
  43  0.798055     -0.225578      -1.36577       1.36577       160.975       162.341    
  44  0.805371     -0.216453      -1.31052       1.31052       160.681       161.991    
  45  0.580747     -0.543441      -3.29029       3.29029       159.455       162.746    
  46  0.581119     -0.542799      -3.28640       3.28640       162.484       165.771    
  47  0.305196      -1.18680      -7.18554       7.18554       161.525       168.710    
  48  0.905702     -0.990454E-01 -0.599675      0.599675       163.261       163.861    
  49  0.265633E-01  -3.62822      -21.9673       21.9673       164.796       186.763    
  50  0.114529E-01  -4.46951      -27.0609       27.0609       162.825       189.886    
  51  0.990634     -0.941033E-02 -0.569753E-01  0.569753E-01   159.375       159.432    
  52  0.609564     -0.495011      -2.99707       2.99707       158.663       161.660    
  53  0.380905     -0.965204      -5.84388       5.84388       165.090       170.934    
  54  0.902244     -0.102870     -0.622833      0.622833       160.107       160.730    
  55  0.841859     -0.172142      -1.04224       1.04224       160.604       161.646    
  56  0.954561     -0.465036E-01 -0.281558      0.281558       161.212       161.493    
  57  0.637314     -0.450492      -2.72753       2.72753       160.047       162.774    
  58  0.224695      -1.49301      -9.03950       9.03950       161.444       170.484    
  59  0.537548     -0.620738      -3.75829       3.75829       162.816       166.574    
  60  0.271295      -1.30455      -7.89846       7.89846       165.069       172.967    
  61  0.524725E-02  -5.25005      -31.7867       31.7867       164.566       196.353    
  62  0.194770      -1.63594      -9.90485       9.90485       155.616       165.521    
  63  0.833225E-01  -2.48504      -15.0458       15.0458       162.340       177.386    
  64  0.195984      -1.62972      -9.86722       9.86722       159.760       169.627    
  65  0.232752      -1.45778      -8.82621       8.82621       162.947       171.773    
  66  0.101893      -2.28383      -13.8276       13.8276       157.688       171.516    
  67  0.955311     -0.457184E-01 -0.276804      0.276804       158.180       158.457    
  68  0.791211     -0.234190      -1.41791       1.41791       159.717       161.135    
  69  0.617608     -0.481901      -2.91769       2.91769       157.046       159.964    
  70  0.792156     -0.232997      -1.41069       1.41069       159.336       160.747    
  71  0.195697      -1.63119      -9.87610       9.87610       161.330       171.206    
  72  0.174438      -1.74618      -10.5724       10.5724       164.985       175.558    
  73  0.966870     -0.336914E-01 -0.203986      0.203986       161.060       161.264    
  74  0.587560     -0.531777      -3.21967       3.21967       158.335       161.554    
  75  0.653196     -0.425878      -2.57850       2.57850       152.717       155.296    
loop,thermsimp(1:2)       41   8.86998      0.932118E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314        156.23          0.87          1.15         25.20          0.12          0.05         27.37
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    156.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       41
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       42
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      313     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -18.8712       18.8712       152.198       171.069    
   2  0.196215      -1.62854      -9.86009       9.86009       152.717       162.577    
   3  0.501152     -0.690846      -4.18276       4.18276       152.539       156.721    
   4  0.288339      -1.24362      -7.52955       7.52955       153.757       161.287    
   5  0.773132     -0.257306      -1.55787       1.55787       154.726       156.284    
   6  0.417683     -0.873033      -5.28582       5.28582       156.578       161.864    
   7  0.229479      -1.47195      -8.91196       8.91196       156.586       165.498    
   8  0.964123     -0.365367E-01 -0.221213      0.221213       154.646       154.867    
   9  0.263782      -1.33263      -8.06849       8.06849       155.551       163.619    
  10  0.102960      -2.27342      -13.7645       13.7645       158.180       171.944    
  11  0.828790     -0.187788      -1.13697       1.13697       155.109       156.246    
  12  0.738697     -0.302868      -1.83373       1.83373       158.348       160.182    
  13  0.458595     -0.779589      -4.72006       4.72006       158.490       163.210    
  14  0.905176     -0.996260E-01 -0.603190      0.603190       159.375       159.979    
  15  0.147067      -1.91687      -11.6058       11.6058       157.046       168.652    
  16  0.142365      -1.94936      -11.8025       11.8025       154.957       166.759    
  17  0.483147     -0.727435      -4.40429       4.40429       158.812       163.216    
  18  0.640417     -0.445636      -2.69812       2.69812       160.107       162.806    
  19  0.719349     -0.329408      -1.99442       1.99442       159.336       161.331    
  20  0.714234     -0.336545      -2.03763       2.03763       152.040       154.078    
  21  0.825507     -0.191757      -1.16100       1.16100       159.717       160.878    
  22  0.155188      -1.86312      -11.2803       11.2803       161.060       172.340    
  23  0.248874      -1.39081      -8.42072       8.42072       161.212       169.633    
  24  0.107953      -2.22606      -13.4778       13.4778       158.335       171.812    
  25  0.349169      -1.05220      -6.37059       6.37059       160.604       166.975    
  26  0.967311     -0.332356E-01 -0.201226      0.201226       158.663       158.864    
  27  0.519506     -0.654877      -3.96499       3.96499       161.324       165.289    
  28  0.462662     -0.770758      -4.66659       4.66659       160.660       165.327    
  29  0.811438     -0.208948      -1.26508       1.26508       160.681       161.946    
  30  0.394710E-01  -3.23219      -19.5694       19.5694       158.186       177.756    
  31  0.482930     -0.727884      -4.40701       4.40701       160.210       164.617    
  32  0.520883     -0.652231      -3.94896       3.94896       160.975       164.924    
  33  0.980978E-01  -2.32179      -14.0574       14.0574       158.917       172.974    
  34  0.626549     -0.467529      -2.83068       2.83068       159.455       162.286    
  35  0.618402     -0.480616      -2.90991       2.90991       160.047       162.957    
  36  0.681438     -0.383550      -2.32222       2.32222       162.078       164.400    
  37  0.816820     -0.202336      -1.22505       1.22505       161.872       163.097    
  38  0.578487     -0.547340      -3.31389       3.31389       153.690       157.004    
  39  0.349734      -1.05058      -6.36080       6.36080       161.207       167.568    
  40  0.945672     -0.558596E-01 -0.338204      0.338204       158.974       159.312    
  41  0.767680     -0.264382      -1.60071       1.60071       163.261       164.862    
  42  0.122064      -2.10321      -12.7340       12.7340       160.242       172.976    
  43  0.211623      -1.55295      -9.40239       9.40239       160.049       169.451    
  44  0.969992E-01  -2.33305      -14.1256       14.1256       155.616       169.741    
  45  0.877482     -0.130699     -0.791325      0.791325       161.552       162.343    
  46  0.448991     -0.800752      -4.84819       4.84819       162.484       167.332    
  47  0.833113     -0.182586      -1.10548       1.10548       162.816       163.921    
  48  0.691765     -0.368508      -2.23115       2.23115       163.578       165.809    
  49  0.310664      -1.16904      -7.07803       7.07803       156.426       163.504    
  50  0.422283     -0.862080      -5.21950       5.21950       159.789       165.009    
  51  0.382184E-01  -3.26444      -19.7647       19.7647       157.652       177.416    
  52  0.679614E-01  -2.68882      -16.2796       16.2796       161.050       177.329    
  53  0.580404     -0.544031      -3.29386       3.29386       161.525       164.818    
  54  0.887981     -0.118805     -0.719309      0.719309       160.315       161.034    
  55  0.540749     -0.614799      -3.72233       3.72233       160.717       164.439    
  56  0.749712     -0.288066      -1.74411       1.74411       155.446       157.190    
  57  0.428385     -0.847733      -5.13264       5.13264       159.760       164.892    
  58  0.271790      -1.30272      -7.88740       7.88740       164.031       171.918    
  59  0.317865      -1.14613      -6.93929       6.93929       161.708       168.647    
  60  0.855566     -0.155992     -0.944462      0.944462       161.444       162.389    
  61  0.153120      -1.87653      -11.3615       11.3615       165.090       176.451    
  62  0.507684     -0.677896      -4.10436       4.10436       161.330       165.434    
  63  0.270723      -1.30666      -7.91122       7.91122       157.688       165.600    
  64  0.721736     -0.326096      -1.97436       1.97436       162.947       164.921    
  65  0.707323     -0.346268      -2.09649       2.09649       165.069       167.165    
  66  0.420146     -0.867152      -5.25021       5.25021       163.436       168.686    
  67  0.782833     -0.244836      -1.48237       1.48237       164.985       166.468    
  68  0.835529     -0.179691      -1.08795       1.08795       164.924       166.012    
  69  0.267477      -1.31872      -7.98426       7.98426       156.791       164.776    
  70  0.512596     -0.668267      -4.04605       4.04605       162.340       166.386    
  71  0.967143     -0.334090E-01 -0.202276      0.202276       164.796       164.998    
  72  0.528135     -0.638402      -3.86524       3.86524       158.526       162.391    
  73  0.970249     -0.302028E-01 -0.182864      0.182864       162.825       163.008    
  74  0.262903      -1.33597      -8.08870       8.08870       156.387       164.476    
  75  0.845734     -0.167551      -1.01444       1.01444       156.234       157.249    
loop,thermsimp(1:2)       42   18.8712       9.86009    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315        159.75          0.86          1.15         25.25          0.13          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    159.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       42
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       43
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      314     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -7.31795       7.31795       152.040       159.358    
   2  0.383173     -0.959268      -5.80793       5.80793       154.646       160.453    
   3  0.386205     -0.951387      -5.76022       5.76022       155.109       160.869    
   4  0.362178      -1.01562      -6.14911       6.14911       154.726       160.876    
   5  0.394462     -0.930233      -5.63214       5.63214       152.539       158.171    
   6  0.883072     -0.124349     -0.752875      0.752875       153.690       154.443    
   7  0.571477     -0.559531      -3.38771       3.38771       155.446       158.834    
   8  0.944036     -0.575912E-01 -0.348689      0.348689       156.234       156.583    
   9  0.326573      -1.11910      -6.77566       6.77566       158.663       165.438    
  10  0.467297     -0.760791      -4.60624       4.60624       158.974       163.580    
  11  0.828365     -0.188301      -1.14008       1.14008       159.375       160.515    
  12  0.826991     -0.189962      -1.15013       1.15013       158.348       159.498    
  13  0.675447E-01  -2.69497      -16.3168       16.3168       159.717       176.034    
  14  0.924113     -0.789214E-01 -0.477833      0.477833       160.315       160.793    
  15  0.810131     -0.210560      -1.27484       1.27484       153.757       155.032    
  16  0.410286     -0.890900      -5.39400       5.39400       159.336       164.730    
  17  0.334977      -1.09369      -6.62182       6.62182       156.578       163.200    
  18  0.119017      -2.12849      -12.8870       12.8870       160.681       173.568    
  19  0.447328     -0.804463      -4.87066       4.87066       159.455       164.326    
  20  0.324388E-02  -5.73098      -34.6985       34.6985       161.552       196.250    
  21  0.158272      -1.84344      -11.1612       11.1612       161.444       172.606    
  22  0.241219      -1.42205      -8.60988       8.60988       158.526       167.136    
  23  0.259790      -1.34788      -8.16081       8.16081       152.717       160.878    
  24  0.521973     -0.650139      -3.93630       3.93630       160.107       164.044    
  25  0.336335      -1.08965      -6.59732       6.59732       160.047       166.644    
  26  0.642248     -0.442780      -2.68084       2.68084       162.825       165.505    
  27  0.984615     -0.155047E-01 -0.938739E-01  0.938739E-01   161.872       161.966    
  28  0.373782     -0.984082      -5.95817       5.95817       158.490       164.448    
  29  0.932479     -0.699087E-01 -0.423265      0.423265       158.812       159.235    
  30  0.711360     -0.340577      -2.06204       2.06204       156.426       158.488    
  31  0.315363      -1.15403      -6.98714       6.98714       155.551       162.538    
  32  0.528583     -0.637556      -3.86011       3.86011       162.816       166.676    
  33  0.622355E-01  -2.77683      -16.8124       16.8124       162.078       178.891    
  34  0.144849      -1.93206      -11.6978       11.6978       160.717       172.415    
  35  0.868928     -0.140495     -0.850631      0.850631       156.387       157.238    
  36  0.243398      -1.41306      -8.55542       8.55542       160.210       168.766    
  37  0.936928     -0.651491E-01 -0.394449      0.394449       156.791       157.186    
  38  0.979804E-01  -2.32299      -14.0646       14.0646       161.525       175.589    
  39  0.805773     -0.215953      -1.30750       1.30750       163.261       164.568    
  40  0.210751      -1.55708      -9.42741       9.42741       159.760       169.187    
  41  0.497104     -0.698956      -4.23186       4.23186       162.947       167.179    
  42  0.532106     -0.630913      -3.81989       3.81989       160.975       164.795    
  43  0.898420     -0.107117     -0.648546      0.648546       164.796       165.444    
  44  0.579370     -0.545814      -3.30465       3.30465       159.789       163.094    
  45  0.191213      -1.65437      -10.0164       10.0164       161.324       171.340    
  46  0.491633     -0.710023      -4.29887       4.29887       160.660       164.959    
  47  0.989123     -0.109370E-01 -0.662186E-01  0.662186E-01   161.330       161.396    
  48  0.576855     -0.550164      -3.33099       3.33099       156.586       159.917    
  49  0.133368      -2.01464      -12.1977       12.1977       157.688       169.886    
  50  0.708426     -0.344710      -2.08706       2.08706       163.578       165.665    
  51  0.183469      -1.69571      -10.2668       10.2668       164.924       175.190    
  52  0.951201     -0.500300E-01 -0.302909      0.302909       162.340       162.643    
  53  0.380646E-01  -3.26847      -19.7891       19.7891       164.985       184.774    
  54  0.575108     -0.553198      -3.34936       3.34936       154.957       158.306    
  55  0.136357E-01  -4.29506      -26.0047       26.0047       160.604       186.609    
  56  0.665821E-01  -2.70932      -16.4037       16.4037       165.069       181.472    
  57  0.885471     -0.121635     -0.736445      0.736445       162.484       163.221    
  58  0.213600E-01  -3.84624      -23.2872       23.2872       161.207       184.494    
  59  0.740349     -0.300634      -1.82020       1.82020       161.708       163.528    
  60  0.290679      -1.23553      -7.48060       7.48060       157.046       164.527    
  61  0.895680     -0.110173     -0.667045      0.667045       163.436       164.103    
  62  0.956670     -0.442971E-01 -0.268199      0.268199       160.049       160.317    
  63  0.196231      -1.62846      -9.85960       9.85960       161.212       171.071    
  64  0.279139      -1.27605      -7.72588       7.72588       155.616       163.342    
  65  0.686055     -0.376797      -2.28134       2.28134       152.198       154.479    
  66  0.798228     -0.225361      -1.36446       1.36446       158.335       159.699    
  67  0.898321     -0.107228     -0.649216      0.649216       164.031       164.680    
  68  0.764857     -0.268067      -1.62302       1.62302       158.180       159.803    
  69  0.330164      -1.10817      -6.70945       6.70945       161.060       167.769    
  70  0.598170     -0.513879      -3.11131       3.11131       158.917       162.028    
  71  0.810123     -0.210569      -1.27490       1.27490       160.242       161.517    
  72  0.351685      -1.04502      -6.32712       6.32712       165.090       171.417    
  73  0.586228     -0.534047      -3.23341       3.23341       161.050       164.283    
  74  0.215652      -1.53409      -9.28821       9.28821       157.652       166.940    
  75  0.253786      -1.37126      -8.30238       8.30238       159.745       168.048    
loop,thermsimp(1:2)       43   7.31795       5.80793    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316        160.06          0.87          1.15         25.22          0.14          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    317        165.61          0.86          1.15         25.25          0.36          0.06         27.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    160.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       43
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       44
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      316     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -7.55680       7.55680       153.690       161.247    
   2  0.260243      -1.34614      -8.15026       8.15026       152.198       160.348    
   3  0.646915     -0.435540      -2.63699       2.63699       153.757       156.394    
   4  0.572447     -0.557835      -3.37744       3.37744       156.234       159.612    
   5  0.105907      -2.24520      -13.5936       13.5936       156.791       170.385    
   6  0.693038     -0.366671      -2.22002       2.22002       156.387       158.607    
   7  0.329408      -1.11046      -6.72333       6.72333       152.539       159.262    
   8  0.187221      -1.67546      -10.1442       10.1442       154.957       165.101    
   9  0.545731     -0.605630      -3.66681       3.66681       156.426       160.093    
  10  0.752820     -0.283930      -1.71907       1.71907       155.446       157.165    
  11  0.153542      -1.87378      -11.3449       11.3449       158.812       170.156    
  12  0.400659     -0.914645      -5.53776       5.53776       152.040       157.578    
  13  0.306182      -1.18357      -7.16601       7.16601       158.348       165.514    
  14  0.270957E-01  -3.60838      -21.8471       21.8471       158.335       180.182    
  15  0.776765     -0.252618      -1.52949       1.52949       158.180       159.709    
  16  0.711945     -0.339755      -2.05706       2.05706       156.586       158.644    
  17  0.217190      -1.52698      -9.24519       9.24519       160.049       169.294    
  18  0.285226      -1.25447      -7.59528       7.59528       154.646       162.241    
  19  0.348904      -1.05296      -6.37519       6.37519       159.375       165.751    
  20  0.686414     -0.376275      -2.27817       2.27817       160.315       162.593    
  21  0.212825      -1.54729      -9.36812       9.36812       155.109       164.477    
  22  0.501697     -0.689760      -4.17618       4.17618       154.726       158.903    
  23  0.363771      -1.01123      -6.12254       6.12254       152.717       158.840    
  24  0.789273     -0.236642      -1.43276       1.43276       161.330       162.762    
  25  0.232884      -1.45721      -8.82276       8.82276       160.242       169.065    
  26  0.754896     -0.281175      -1.70239       1.70239       161.872       163.574    
  27  0.639358     -0.447290      -2.70814       2.70814       158.917       161.625    
  28  0.532505     -0.630163      -3.81535       3.81535       155.551       159.366    
  29  0.759813     -0.274683      -1.66308       1.66308       162.340       164.003    
  30  0.768360     -0.263497      -1.59536       1.59536       159.789       161.385    
  31  0.245116      -1.40602      -8.51283       8.51283       156.578       165.091    
  32  0.672517     -0.396727      -2.40200       2.40200       162.484       164.886    
  33  0.910675     -0.935691E-01 -0.566518      0.566518       155.616       156.182    
  34  0.441618     -0.817310      -4.94844       4.94844       161.708       166.657    
  35  0.212980      -1.54656      -9.36371       9.36371       158.974       168.337    
  36  0.471690     -0.751434      -4.54959       4.54959       160.107       164.657    
  37  0.968545     -0.319606E-01 -0.193507      0.193507       163.436       163.629    
  38  0.711169     -0.340845      -2.06366       2.06366       161.050       163.113    
  39  0.222170      -1.50431      -9.10794       9.10794       159.455       168.563    
  40  0.896100     -0.109703     -0.664204      0.664204       158.490       159.154    
  41  0.898054     -0.107525     -0.651015      0.651015       157.046       157.697    
  42  0.981364     -0.188122E-01 -0.113899      0.113899       163.261       163.375    
  43  0.238126      -1.43496      -8.68800       8.68800       164.031       172.719    
  44  0.884882     -0.122301     -0.740479      0.740479       159.336       160.077    
  45  0.206421      -1.57784      -9.55311       9.55311       160.975       170.528    
  46  0.421939     -0.862894      -5.22443       5.22443       160.660       165.884    
  47  0.334170E-01  -3.39869      -20.5775       20.5775       158.663       179.240    
  48  0.940374     -0.614772E-01 -0.372216      0.372216       164.796       165.168    
  49  0.119361      -2.12561      -12.8696       12.8696       162.825       175.694    
  50  0.493355     -0.706527      -4.27770       4.27770       163.578       167.856    
  51  0.239498      -1.42921      -8.65323       8.65323       160.047       168.700    
  52  0.779094     -0.249623      -1.51136       1.51136       162.816       164.327    
  53  0.993851     -0.616759E-02 -0.373420E-01  0.373420E-01   157.652       157.689    
  54  0.680666     -0.384683      -2.32908       2.32908       158.526       160.855    
  55  0.861145     -0.149492     -0.905106      0.905106       162.947       163.852    
  56  0.679030     -0.387090      -2.34365       2.34365       161.060       163.404    
  57  0.568731E-01  -2.86693      -17.3580       17.3580       159.745       177.103    
  58  0.342751      -1.07075      -6.48292       6.48292       160.210       166.693    
  59  0.929483     -0.731270E-01 -0.442751      0.442751       159.760       160.202    
  60  0.287616      -1.24613      -7.54475       7.54475       157.688       165.233    
  61  0.622582     -0.473881      -2.86913       2.86913       161.212       164.081    
  62  0.449193     -0.800303      -4.84547       4.84547       161.324       166.169    
  63  0.746100     -0.292896      -1.77335       1.77335       165.090       166.863    
  64  0.783595     -0.243863      -1.47648       1.47648       160.717       162.194    
  65  0.447963     -0.803044      -4.86207       4.86207       161.444       166.306    
  66  0.788663     -0.237416      -1.43745       1.43745       160.681       162.118    
  67  0.445514     -0.808528      -4.89527       4.89527       164.924       169.819    
  68  0.174611      -1.74519      -10.5664       10.5664       161.525       172.091    
  69  0.891268E-01  -2.41769      -14.6380       14.6380       159.717       174.355    
  70  0.279672      -1.27414      -7.71432       7.71432       162.078       169.793    
  71  0.700166     -0.356438      -2.15807       2.15807       165.069       167.227    
  72  0.269233      -1.31218      -7.94465       7.94465       161.207       169.152    
  73  0.631814     -0.459159      -2.78000       2.78000       164.985       167.765    
  74  0.785892     -0.240936      -1.45876       1.45876       160.604       162.063    
  75  0.947406     -0.540276E-01 -0.327113      0.327113       160.058       160.385    
loop,thermsimp(1:2)       44   7.55680       8.15026    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318        158.36          0.87          1.16         25.14          0.20          0.06         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    319        158.39          0.86          1.16         25.04          0.32          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       44
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       45
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      318     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -9.61558       9.61558       155.616       165.231    
   2  0.455846E-01  -3.08818      -18.6976       18.6976       153.757       172.455    
   3  0.655807     -0.421889      -2.55435       2.55435       155.446       158.000    
   4  0.902989     -0.102045     -0.617837      0.617837       152.040       152.658    
   5  0.826012     -0.191146      -1.15730       1.15730       157.652       158.809    
   6  0.160871      -1.82715      -11.0626       11.0626       157.046       168.109    
   7  0.516410     -0.660854      -4.00117       4.00117       156.387       160.388    
   8  0.506939     -0.679364      -4.11324       4.11324       156.586       160.700    
   9  0.728359     -0.316962      -1.91906       1.91906       152.717       154.636    
  10  0.453162     -0.791506      -4.79221       4.79221       154.726       159.519    
  11  0.837994     -0.176745      -1.07011       1.07011       158.490       159.560    
  12  0.118024      -2.13686      -12.9377       12.9377       152.539       165.476    
  13  0.274030      -1.29452      -7.83773       7.83773       155.551       163.388    
  14  0.402227     -0.910738      -5.51410       5.51410       156.234       161.748    
  15  0.444245     -0.811380      -4.91254       4.91254       158.180       163.092    
  16  0.594880     -0.519396      -3.14471       3.14471       159.336       162.481    
  17  0.548806     -0.600010      -3.63279       3.63279       156.426       160.059    
  18  0.222827      -1.50136      -9.09004       9.09004       159.760       168.850    
  19  0.152541      -1.88032      -11.3845       11.3845       152.198       163.583    
  20  0.816533     -0.202688      -1.22718       1.22718       160.058       161.285    
  21  0.525417     -0.643564      -3.89649       3.89649       158.526       162.422    
  22  0.661450     -0.413320      -2.50247       2.50247       153.690       156.193    
  23  0.437535     -0.826598      -5.00467       5.00467       159.789       164.794    
  24  0.464442     -0.766918      -4.64334       4.64334       158.917       163.560    
  25  0.683975     -0.379834      -2.29972       2.29972       160.604       162.904    
  26  0.407919     -0.896688      -5.42904       5.42904       160.681       166.110    
  27  0.934669     -0.675632E-01 -0.409064      0.409064       160.717       161.126    
  28  0.866891     -0.142842     -0.864841      0.864841       154.646       155.510    
  29  0.145435E-01  -4.23061      -25.6144       25.6144       160.315       185.929    
  30  0.514599     -0.664368      -4.02245       4.02245       161.330       165.352    
  31  0.370591     -0.992656      -6.01008       6.01008       161.050       167.060    
  32  0.251726      -1.37941      -8.35172       8.35172       163.261       171.613    
  33  0.959470     -0.413742E-01 -0.250502      0.250502       161.060       161.310    
  34  0.344885E-01  -3.36713      -20.3864       20.3864       161.872       182.258    
  35  0.348690      -1.05357      -6.37891       6.37891       163.436       169.815    
  36  0.610898     -0.492826      -2.98384       2.98384       162.947       165.931    
  37  0.440567     -0.819693      -4.96287       4.96287       162.340       167.303    
  38  0.340409      -1.07761      -6.52443       6.52443       161.212       167.736    
  39  0.345015E-01  -3.36675      -20.3842       20.3842       162.816       183.200    
  40  0.667224     -0.404630      -2.44985       2.44985       155.109       157.558    
  41  0.138336      -1.97807      -11.9763       11.9763       160.107       172.084    
  42  0.412023     -0.886676      -5.36842       5.36842       162.484       167.853    
  43  0.578410     -0.547473      -3.31470       3.31470       156.578       159.892    
  44  0.972817     -0.275594E-01 -0.166860      0.166860       154.957       155.123    
  45  0.152341      -1.88163      -11.3924       11.3924       164.796       176.188    
  46  0.764264     -0.268842      -1.62772       1.62772       157.688       159.316    
  47  0.898082E-01  -2.41008      -14.5919       14.5919       158.348       172.940    
  48  0.205097      -1.58427      -9.59204       9.59204       159.375       168.967    
  49  0.249611E-01  -3.69044      -22.3439       22.3439       160.660       183.004    
  50  0.999211     -0.789000E-03 -0.477704E-02  0.477704E-02   161.324       161.329    
  51  0.622898E-01  -2.77596      -16.8072       16.8072       161.444       178.251    
  52  0.588779     -0.529705      -3.20712       3.20712       161.708       164.915    
  53  0.395562     -0.927447      -5.61527       5.61527       160.210       165.826    
  54  0.213371      -1.54472      -9.35261       9.35261       165.090       174.442    
  55  0.801544     -0.221215      -1.33936       1.33936       165.069       166.408    
  56  0.392036     -0.936401      -5.66949       5.66949       164.985       170.655    
  57  0.504835     -0.683524      -4.13843       4.13843       163.578       167.716    
  58  0.389514     -0.942856      -5.70856       5.70856       158.974       164.682    
  59  0.694006     -0.365275      -2.21157       2.21157       159.455       161.667    
  60  0.220113      -1.51361      -9.16424       9.16424       160.047       169.211    
  61  0.548334     -0.600870      -3.63800       3.63800       160.242       163.880    
  62  0.490082     -0.713183      -4.31800       4.31800       161.207       165.525    
  63  0.315187      -1.15459      -6.99052       6.99052       160.049       167.040    
  64  0.454028     -0.789596      -4.78065       4.78065       162.078       166.859    
  65  0.617612     -0.481894      -2.91765       2.91765       164.924       167.841    
  66  0.446806     -0.805630      -4.87772       4.87772       158.812       163.689    
  67  0.907640     -0.969076E-01 -0.586732      0.586732       156.791       157.378    
  68  0.508446     -0.676396      -4.09527       4.09527       160.975       165.070    
  69  0.552574     -0.593168      -3.59136       3.59136       161.525       165.116    
  70  0.716954     -0.332744      -2.01461       2.01461       164.031       166.046    
  71  0.414283     -0.881205      -5.33530       5.33530       159.717       165.053    
  72  0.320057      -1.13926      -6.89768       6.89768       162.825       169.722    
  73  0.154914      -1.86488      -11.2910       11.2910       159.745       171.036    
  74  0.642674     -0.442117      -2.67682       2.67682       158.663       161.339    
  75  0.349350      -1.05168      -6.36745       6.36745       158.361       164.729    
loop,thermsimp(1:2)       45   9.61558       18.6976    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320        156.61          0.87          1.15         25.29          0.19          0.05         27.55
Just calling func    0   0         27.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    321        158.87          0.86          1.15         25.26          0.48          0.06         27.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    158.87       0.8998     -1.701      2.996     -102.6     0.9503    
                      0.1789      1.370     -99.70      3.909     0.2927    
                       1.790     -1.265      1.530      5723.      3162.    
                     -0.5208      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5361.      151.8    
                     -0.5672     -6.956     -4.895     -8.910      5.948    
                      -14.92     -3.402      3433.      0.000      4735.    

                       6351.      4765.     -222.4      4735.      5494.    
                       5412.     0.3391E-01 0.7390E-01  0.000     0.7516E-01
                     -0.1747    -0.1093     0.9345E-01 0.2241E-01-0.5094E-01

                     -0.3662    -0.9386      0.000    -0.2642E-01-0.2610E-01
                       0.000     0.4330E-02-0.5771E-01-0.1802     0.3309E-01
                      0.8335E-03-0.2938E-01 0.3745     -1.087      4417.    

                     -0.8911    -0.9735     -2.428     -2.428    -0.1120    
                     -0.9317      9.148      8.708    -0.1741E+05 -4.000    
                     -0.6823    -0.6253      9.278      8.834    -0.1785E+05

                      -4.000     0.1358    -0.8861      8.901      8.969    
                     -0.2635E+05 -7.000    -0.5645    -0.8213      9.066    
                       8.761    -0.2145E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    156.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       45
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       46
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      320     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -1.39264       1.39264       152.040       153.433    
   2  0.338444      -1.08340      -6.55947       6.55947       152.717       159.277    
   3  0.563800     -0.573055      -3.46959       3.46959       154.957       158.426    
   4  0.295284      -1.21982      -7.38544       7.38544       154.646       162.031    
   5  0.506481     -0.680269      -4.11872       4.11872       153.690       157.809    
   6  0.345803      -1.06189      -6.42924       6.42924       156.791       163.221    
   7  0.741641     -0.298890      -1.80964       1.80964       155.109       156.918    
   8  0.182310      -1.70204      -10.3051       10.3051       155.446       165.751    
   9  0.315187      -1.15459      -6.99051       6.99051       157.652       164.642    
  10  0.598844     -0.512755      -3.10450       3.10450       157.688       160.793    
  11  0.659119     -0.416852      -2.52385       2.52385       154.726       157.250    
  12  0.247481      -1.39642      -8.45471       8.45471       158.490       166.945    
  13  0.255298      -1.36532      -8.26641       8.26641       156.578       164.844    
  14  0.876488     -0.131833     -0.798187      0.798187       156.426       157.224    
  15  0.358010      -1.02719      -6.21920       6.21920       156.387       162.606    
  16  0.317480      -1.14734      -6.94663       6.94663       156.586       163.533    
  17  0.153422      -1.87456      -11.3496       11.3496       160.717       172.067    
  18  0.296162      -1.21685      -7.36747       7.36747       160.058       167.425    
  19  0.629760     -0.462417      -2.79972       2.79972       161.060       163.860    
  20  0.458345E-01  -3.08272      -18.6645       18.6645       161.324       179.988    
  21  0.209534      -1.56287      -9.46245       9.46245       158.663       168.125    
  22  0.490210E-01  -3.01551      -18.2575       18.2575       159.455       177.713    
  23  0.144817      -1.93229      -11.6991       11.6991       156.234       167.933    
  24  0.764061     -0.269107      -1.62932       1.62932       158.526       160.155    
  25  0.158664      -1.84097      -11.1462       11.1462       159.336       170.483    
  26  0.242818      -1.41544      -8.56986       8.56986       160.604       169.174    
  27  0.779950     -0.248525      -1.50471       1.50471       158.180       159.684    
  28  0.763580     -0.269737      -1.63314       1.63314       155.551       157.184    
  29  0.817639     -0.201335      -1.21899       1.21899       158.917       160.136    
  30  0.656802     -0.420373      -2.54517       2.54517       152.198       154.743    
  31  0.202192      -1.59854      -9.67843       9.67843       158.812       168.490    
  32  0.469647     -0.755773      -4.57587       4.57587       160.242       164.818    
  33  0.107456      -2.23067      -13.5057       13.5057       158.974       172.479    
  34  0.709118     -0.343734      -2.08115       2.08115       158.361       160.442    
  35  0.988480     -0.115868E-01 -0.701531E-01  0.701531E-01   159.789       159.860    
  36  0.645173     -0.438236      -2.65332       2.65332       161.708       164.361    
  37  0.583143     -0.539322      -3.26535       3.26535       159.717       162.983    
  38  0.276552E-01  -3.58794      -21.7234       21.7234       160.975       182.698    
  39  0.560517     -0.578896      -3.50495       3.50495       161.525       165.030    
  40  0.292779      -1.22834      -7.43702       7.43702       155.616       163.053    
  41  0.486207     -0.721121      -4.36606       4.36606       161.330       165.696    
  42  0.379142E-01  -3.27243      -19.8131       19.8131       152.539       172.352    
  43  0.459895     -0.776757      -4.70291       4.70291       161.207       165.910    
  44  0.810771     -0.209769      -1.27006       1.27006       160.210       161.480    
  45  0.189138      -1.66528      -10.0825       10.0825       162.947       173.030    
  46  0.509870     -0.673599      -4.07833       4.07833       164.031       168.109    
  47  0.468020E-01  -3.06183      -18.5380       18.5380       160.681       179.219    
  48  0.568404     -0.564922      -3.42035       3.42035       165.069       168.489    
  49  0.891250     -0.115130     -0.697062      0.697062       162.078       162.775    
  50  0.415261     -0.878849      -5.32103       5.32103       160.049       165.370    
  51  0.714019     -0.336846      -2.03945       2.03945       161.050       163.089    
  52  0.606207     -0.500534      -3.03050       3.03050       162.340       165.371    
  53  0.106011      -2.24421      -13.5877       13.5877       163.578       177.166    
  54  0.330348      -1.10761      -6.70608       6.70608       161.212       167.918    
  55  0.773475     -0.256862      -1.55519       1.55519       164.924       166.479    
  56  0.721841     -0.325951      -1.97349       1.97349       162.484       164.458    
  57  0.714980     -0.335501      -2.03131       2.03131       157.046       159.078    
  58  0.616486     -0.483719      -2.92870       2.92870       159.760       162.688    
  59  0.885098     -0.122057     -0.738997      0.738997       159.375       160.114    
  60  0.463686     -0.768549      -4.65321       4.65321       160.047       164.700    
  61  0.912951     -0.910727E-01 -0.551404      0.551404       162.825       163.376    
  62  0.819534     -0.199020      -1.20497       1.20497       163.436       164.641    
  63  0.771708     -0.259149      -1.56903       1.56903       164.985       166.554    
  64  0.812091E-03  -7.11590      -43.0835       43.0835       159.745       202.829    
  65  0.880919     -0.126790     -0.767653      0.767653       163.261       164.029    
  66  0.552031     -0.594151      -3.59731       3.59731       160.107       163.705    
  67  0.134353      -2.00729      -12.1532       12.1532       153.757       165.911    
  68  0.410649     -0.890016      -5.38864       5.38864       158.348       163.736    
  69  0.258019      -1.35472      -8.20223       8.20223       165.090       173.292    
  70  0.808143     -0.213016      -1.28972       1.28972       164.796       166.085    
  71  0.635973     -0.452599      -2.74028       2.74028       161.444       164.185    
  72  0.517431     -0.658879      -3.98921       3.98921       161.872       165.861    
  73  0.418067     -0.872114      -5.28026       5.28026       160.660       165.940    
  74  0.774048     -0.256121      -1.55070       1.55070       162.816       164.367    
  75  0.367912     -0.999912      -6.05401       6.05401       156.606       162.660    
loop,thermsimp(1:2)       46   1.39264       6.55947    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322        158.05          0.87          1.15         25.19          0.11          0.06         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    323        160.38          0.85          1.16         25.19          0.22          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    158.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       46
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       47
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      322     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -2.58484       2.58484       152.040       154.625    
   2  0.474910     -0.744630      -4.50840       4.50840       152.198       156.706    
   3  0.125725      -2.07366      -12.5551       12.5551       155.109       167.664    
   4  0.950967     -0.502756E-01 -0.304396      0.304396       155.551       155.855    
   5  0.562475     -0.575409      -3.48384       3.48384       156.426       159.910    
   6  0.728528     -0.316729      -1.91765       1.91765       154.726       156.644    
   7  0.326058      -1.12068      -6.78521       6.78521       153.690       160.475    
   8  0.460979     -0.774402      -4.68865       4.68865       154.957       159.645    
   9  0.186861      -1.67739      -10.1559       10.1559       157.046       167.202    
  10  0.737773     -0.304119      -1.84130       1.84130       152.717       154.559    
  11  0.254524      -1.36836      -8.28480       8.28480       158.180       166.465    
  12  0.475390     -0.743621      -4.50229       4.50229       159.789       164.292    
  13  0.783107     -0.244486      -1.48025       1.48025       159.375       160.856    
  14  0.615536     -0.485261      -2.93804       2.93804       158.917       161.855    
  15  0.600710E-01  -2.81223      -17.0268       17.0268       158.526       175.552    
  16  0.834417     -0.181022      -1.09601       1.09601       158.361       159.457    
  17  0.270355      -1.30802      -7.91947       7.91947       157.688       165.608    
  18  0.408387     -0.895540      -5.42209       5.42209       160.210       165.632    
  19  0.248286      -1.39318      -8.43505       8.43505       154.646       163.081    
  20  0.586808E-01  -2.83564      -17.1685       17.1685       156.387       173.556    
  21  0.747050     -0.291623      -1.76565       1.76565       156.606       158.372    
  22  0.261869E-01  -3.64250      -22.0537       22.0537       159.760       181.813    
  23  0.495813     -0.701557      -4.24761       4.24761       162.078       166.326    
  24  0.600032     -0.510772      -3.09249       3.09249       159.717       162.810    
  25  0.936456     -0.656531E-01 -0.397500      0.397500       155.616       156.013    
  26  0.583260     -0.539121      -3.26414       3.26414       161.050       164.314    
  27  0.994266     -0.575021E-02 -0.348149E-01  0.348149E-01   156.791       156.826    
  28  0.149755      -1.89876      -11.4961       11.4961       162.825       174.321    
  29  0.751239     -0.286032      -1.73179       1.73179       156.586       158.318    
  30  0.703931     -0.351075      -2.12560       2.12560       160.107       162.233    
  31  0.998476     -0.152564E-02 -0.923706E-02  0.923706E-02   158.348       158.357    
  32  0.501495     -0.690161      -4.17861       4.17861       161.060       165.238    
  33  0.446468     -0.806387      -4.88230       4.88230       163.261       168.143    
  34  0.321376      -1.13514      -6.87279       6.87279       161.444       168.317    
  35  0.850901     -0.161459     -0.977563      0.977563       161.708       162.686    
  36  0.975881     -0.244142E-01 -0.147817      0.147817       162.816       162.964    
  37  0.386316     -0.951100      -5.75848       5.75848       162.484       168.243    
  38  0.782734     -0.244962      -1.48313       1.48313       163.436       164.919    
  39  0.142678      -1.94716      -11.7892       11.7892       157.652       169.441    
  40  0.509914     -0.673514      -4.07782       4.07782       160.047       164.125    
  41  0.211111      -1.55537      -9.41706       9.41706       160.242       169.659    
  42  0.212538      -1.54864      -9.37629       9.37629       156.578       165.954    
  43  0.889982     -0.116555     -0.705685      0.705685       161.525       162.230    
  44  0.769070     -0.262573      -1.58976       1.58976       160.049       161.639    
  45  0.792434     -0.232646      -1.40857       1.40857       162.340       163.749    
  46  0.250220E-01  -3.68800      -22.3292       22.3292       161.330       183.659    
  47  0.190304      -1.65913      -10.0453       10.0453       155.446       165.491    
  48  0.579595     -0.545425      -3.30230       3.30230       161.872       165.174    
  49  0.373376     -0.985170      -5.96476       5.96476       161.207       167.172    
  50  0.933620E-01  -2.37127      -14.3570       14.3570       153.757       168.114    
  51  0.628243     -0.464828      -2.81432       2.81432       160.660       163.474    
  52  0.737857     -0.304005      -1.84061       1.84061       164.796       166.636    
  53  0.430189     -0.843530      -5.10719       5.10719       164.924       170.031    
  54  0.957397     -0.435375E-01 -0.263600      0.263600       164.985       165.249    
  55  0.388126     -0.946424      -5.73017       5.73017       158.490       164.220    
  56  0.989586     -0.104686E-01 -0.633829E-01  0.633829E-01   160.058       160.121    
  57  0.754642     -0.281511      -1.70442       1.70442       161.212       162.916    
  58  0.404023E-01  -3.20887      -19.4282       19.4282       156.234       175.662    
  59  0.298112      -1.21029      -7.32774       7.32774       164.031       171.359    
  60  0.915557     -0.882223E-01 -0.534146      0.534146       158.663       159.197    
  61  0.205580E-01  -3.88450      -23.5189       23.5189       165.069       188.587    
  62  0.883530     -0.123830     -0.749738      0.749738       158.812       159.561    
  63  0.776014     -0.253585      -1.53534       1.53534       160.604       162.139    
  64  0.755316     -0.280619      -1.69902       1.69902       159.336       161.035    
  65  0.912949     -0.910754E-01 -0.551420      0.551420       160.717       161.269    
  66  0.262008      -1.33938      -8.10933       8.10933       152.539       160.648    
  67  0.636818     -0.451272      -2.73224       2.73224       158.974       161.706    
  68  0.545112     -0.606763      -3.67368       3.67368       162.947       166.621    
  69  0.261545      -1.34115      -8.12005       8.12005       165.090       173.210    
  70  0.375676     -0.979027      -5.92757       5.92757       163.578       169.505    
  71  0.160262      -1.83095      -11.0856       11.0856       159.455       170.541    
  72  0.113292      -2.17779      -13.1855       13.1855       160.681       173.866    
  73  0.528621     -0.637484      -3.85968       3.85968       161.324       165.184    
  74  0.297593      -1.21203      -7.33828       7.33828       160.975       168.313    
  75  0.723555E-01  -2.62616      -15.9002       15.9002       158.046       173.947    
loop,thermsimp(1:2)       47   2.58484       4.50840    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324        161.09          0.87          1.15         25.23          0.13          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    161.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       47
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       48
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      323     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -6.97467       6.97467       152.717       159.692    
   2  0.452730     -0.792459      -4.79798       4.79798       152.040       156.838    
   3  0.463916     -0.768051      -4.65020       4.65020       155.551       160.201    
   4  0.531172E-01  -2.93526      -17.7716       17.7716       155.616       173.388    
   5  0.933113     -0.692290E-01 -0.419150      0.419150       154.726       155.146    
   6  0.107612      -2.22922      -13.4969       13.4969       152.198       165.695    
   7  0.228017      -1.47833      -8.95064       8.95064       156.791       165.742    
   8  0.766526     -0.265887      -1.60983       1.60983       156.586       158.196    
   9  0.676418     -0.390944      -2.36699       2.36699       158.348       160.715    
  10  0.220696      -1.51097      -9.14823       9.14823       156.606       165.755    
  11  0.959946E-01  -2.34346      -14.1886       14.1886       158.663       172.851    
  12  0.570655     -0.560971      -3.39643       3.39643       158.361       161.758    
  13  0.736426     -0.305947      -1.85237       1.85237       158.812       160.664    
  14  0.966377     -0.342013E-01 -0.207074      0.207074       154.957       155.164    
  15  0.797662     -0.226070      -1.36875       1.36875       156.426       157.795    
  16  0.413688     -0.882643      -5.34400       5.34400       160.058       165.402    
  17  0.200670      -1.60609      -9.72416       9.72416       153.690       163.414    
  18  0.843958E-01  -2.47224      -14.9683       14.9683       152.539       167.507    
  19  0.375580     -0.979284      -5.92912       5.92912       159.375       165.304    
  20  0.968669     -0.318322E-01 -0.192729      0.192729       159.336       159.529    
  21  0.379263     -0.969525      -5.87003       5.87003       160.717       166.587    
  22  0.421746     -0.863352      -5.22720       5.22720       160.049       165.276    
  23  0.639909     -0.446429      -2.70293       2.70293       158.974       161.677    
  24  0.549878     -0.598059      -3.62098       3.62098       158.917       162.538    
  25  0.226469      -1.48515      -8.99190       8.99190       160.604       169.596    
  26  0.547044E-02  -5.20840      -31.5345       31.5345       161.525       193.059    
  27  0.372808     -0.986692      -5.97397       5.97397       160.107       166.081    
  28  0.406819E-01  -3.20197      -19.3865       19.3865       161.708       181.095    
  29  0.664564     -0.408624      -2.47403       2.47403       159.717       162.191    
  30  0.708700     -0.344323      -2.08472       2.08472       161.212       163.297    
  31  0.863329     -0.146959     -0.889770      0.889770       162.816       163.706    
  32  0.406109     -0.901134      -5.45596       5.45596       154.646       160.102    
  33  0.101947      -2.28330      -13.8244       13.8244       160.660       174.484    
  34  0.660574     -0.414646      -2.51049       2.51049       162.340       164.851    
  35  0.839002     -0.175542      -1.06283       1.06283       160.047       161.110    
  36  0.735312E-01  -2.61005      -15.8026       15.8026       158.490       174.293    
  37  0.559917     -0.579967      -3.51144       3.51144       159.789       163.301    
  38  0.922004     -0.812055E-01 -0.491662      0.491662       161.050       161.541    
  39  0.891471     -0.114882     -0.695560      0.695560       163.436       164.131    
  40  0.489346     -0.714686      -4.32710       4.32710       161.872       166.199    
  41  0.583196     -0.539231      -3.26480       3.26480       161.324       164.589    
  42  0.989235     -0.108230E-01 -0.655286E-01  0.655286E-01   161.060       161.125    
  43  0.844741     -0.168725      -1.02156       1.02156       164.985       166.007    
  44  0.734982     -0.307909      -1.86425       1.86425       155.446       157.310    
  45  0.913246     -0.907495E-01 -0.549447      0.549447       157.688       158.238    
  46  0.605096     -0.502369      -3.04162       3.04162       160.210       163.252    
  47  0.623739     -0.472024      -2.85789       2.85789       156.578       159.436    
  48  0.780990     -0.247193      -1.49664       1.49664       162.078       163.575    
  49  0.615662E-01  -2.78764      -16.8779       16.8779       158.180       175.058    
  50  0.646443E-02  -5.04144      -30.5236       30.5236       162.947       193.471    
  51  0.848055     -0.164809     -0.997846      0.997846       164.796       165.794    
  52  0.740886     -0.299909      -1.81581       1.81581       161.207       163.023    
  53  0.350650      -1.04797      -6.34497       6.34497       157.046       163.391    
  54  0.873328     -0.135444     -0.820053      0.820053       155.109       155.929    
  55  0.353091      -1.04103      -6.30296       6.30296       153.757       160.060    
  56  0.867938     -0.141635     -0.857538      0.857538       163.261       164.119    
  57  0.746706     -0.292084      -1.76844       1.76844       162.484       164.253    
  58  0.701641     -0.354333      -2.14533       2.14533       160.975       163.120    
  59  0.454866     -0.787753      -4.76949       4.76949       161.444       166.214    
  60  0.172086      -1.75976      -10.6545       10.6545       157.652       168.306    
  61  0.633774     -0.456062      -2.76125       2.76125       163.578       166.339    
  62  0.321574      -1.13453      -6.86904       6.86904       160.242       167.111    
  63  0.171612      -1.76252      -10.6712       10.6712       164.924       175.595    
  64  0.417516     -0.873431      -5.28823       5.28823       159.455       164.744    
  65  0.735059     -0.307804      -1.86361       1.86361       164.031       165.895    
  66  0.259350      -1.34958      -8.17108       8.17108       165.090       173.261    
  67  0.498266     -0.696622      -4.21773       4.21773       156.387       160.605    
  68  0.309265      -1.17356      -7.10536       7.10536       160.681       167.786    
  69  0.612008     -0.491010      -2.97285       2.97285       158.046       161.019    
  70  0.624712E-01  -2.77305      -16.7896       16.7896       162.825       179.614    
  71  0.209490      -1.56308      -9.46373       9.46373       158.526       167.989    
  72  0.357768E-01  -3.33046      -20.1644       20.1644       156.234       176.398    
  73  0.669071     -0.401864      -2.43311       2.43311       159.760       162.193    
  74  0.513997     -0.665537      -4.02953       4.02953       161.330       165.359    
  75  0.768806     -0.262917      -1.59184       1.59184       161.091       162.683    
loop,thermsimp(1:2)       48   6.97467       4.79798    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325        157.60          0.87          1.15         25.23          0.12          0.06         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    326        179.31          0.86          1.15         25.18          0.19          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    157.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       48
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       49
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      325     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.514706E-01  0.514706E-01   154.726       154.778    
   2  0.120199      -2.11861      -12.8272       12.8272       154.957       167.784    
   3  0.825835     -0.191360      -1.15860       1.15860       155.109       156.267    
   4  0.769690     -0.261767      -1.58488       1.58488       152.040       153.625    
   5  0.206534      -1.57729      -9.54978       9.54978       155.446       164.996    
   6  0.435455     -0.831363      -5.03352       5.03352       156.426       161.460    
   7  0.408718     -0.894731      -5.41719       5.41719       156.586       162.004    
   8  0.504170E-01  -2.98743      -18.0875       18.0875       157.688       175.776    
   9  0.943874     -0.577631E-01 -0.349729      0.349729       156.578       156.928    
  10  0.161493      -1.82330      -11.0392       11.0392       159.336       170.376    
  11  0.248560      -1.39207      -8.42836       8.42836       152.717       161.146    
  12  0.952734     -0.484195E-01 -0.293158      0.293158       153.757       154.051    
  13  0.349224      -1.05204      -6.36964       6.36964       154.646       161.015    
  14  0.245013      -1.40644      -8.51537       8.51537       155.551       164.066    
  15  0.713805     -0.337146      -2.04126       2.04126       156.387       158.428    
  16  0.206995      -1.57506      -9.53628       9.53628       158.812       168.348    
  17  0.573984     -0.555154      -3.36121       3.36121       158.348       161.709    
  18  0.791297     -0.234082      -1.41726       1.41726       158.046       159.464    
  19  0.599323     -0.511955      -3.09966       3.09966       160.047       163.147    
  20  0.632893     -0.457454      -2.76968       2.76968       161.060       163.830    
  21  0.920472     -0.828688E-01 -0.501733      0.501733       161.050       161.551    
  22  0.650695     -0.429713      -2.60172       2.60172       158.974       161.575    
  23  0.759327     -0.275322      -1.66695       1.66695       158.361       160.028    
  24  0.547563     -0.602278      -3.64652       3.64652       159.717       163.364    
  25  0.375945     -0.978312      -5.92324       5.92324       159.760       165.683    
  26  0.436593     -0.828753      -5.01773       5.01773       158.917       163.935    
  27  0.226348      -1.48568      -8.99512       8.99512       161.091       170.087    
  28  0.889061     -0.117589     -0.711949      0.711949       161.207       161.919    
  29  0.294563      -1.22226      -7.40024       7.40024       160.975       168.375    
  30  0.760606     -0.273640      -1.65677       1.65677       160.210       161.867    
  31  0.131934      -2.02545      -12.2632       12.2632       161.212       173.475    
  32  0.150887      -1.89123      -11.4505       11.4505       159.789       171.240    
  33  0.108814      -2.21811      -13.4297       13.4297       157.046       170.476    
  34  0.392982     -0.933991      -5.65489       5.65489       153.690       159.345    
  35  0.524209     -0.645865      -3.91042       3.91042       162.078       165.989    
  36  0.779329     -0.249322      -1.50953       1.50953       162.816       164.325    
  37  0.684136     -0.379599      -2.29830       2.29830       163.261       165.559    
  38  0.898629     -0.106885     -0.647142      0.647142       163.436       164.083    
  39  0.885947E-01  -2.42368      -14.6743       14.6743       162.484       177.158    
  40  0.865042     -0.144977     -0.877772      0.877772       161.324       162.202    
  41  0.953799     -0.473027E-01 -0.286396      0.286396       159.455       159.742    
  42  0.264945      -1.32823      -8.04186       8.04186       162.340       170.382    
  43  0.931660     -0.707875E-01 -0.428586      0.428586       160.049       160.478    
  44  0.273150      -1.29773      -7.85718       7.85718       159.375       167.233    
  45  0.773196     -0.257223      -1.55737       1.55737       161.330       162.887    
  46  0.936342     -0.657743E-01 -0.398233      0.398233       160.058       160.456    
  47  0.367272      -1.00165      -6.06456       6.06456       152.198       158.263    
  48  0.970907     -0.295243E-01 -0.178756      0.178756       156.791       156.970    
  49  0.722669     -0.324804      -1.96654       1.96654       156.606       158.573    
  50  0.247966      -1.39446      -8.44285       8.44285       164.796       173.239    
  51  0.730821     -0.313587      -1.89862       1.89862       164.031       165.930    
  52  0.379134     -0.969864      -5.87209       5.87209       164.985       170.857    
  53  0.326173      -1.12033      -6.78308       6.78308       160.107       166.891    
  54  0.555872     -0.587218      -3.55534       3.55534       161.872       165.427    
  55  0.600838     -0.509431      -3.08437       3.08437       161.444       164.529    
  56  0.714504     -0.336167      -2.03534       2.03534       163.578       165.613    
  57  0.190775      -1.65666      -10.0303       10.0303       160.717       170.747    
  58  0.206210      -1.57886      -9.55927       9.55927       160.242       169.801    
  59  0.855348     -0.156247     -0.946006      0.946006       152.539       153.485    
  60  0.886753     -0.120189     -0.727688      0.727688       160.681       161.409    
  61  0.391830     -0.936926      -5.67266       5.67266       158.526       164.198    
  62  0.986898     -0.131885E-01 -0.798505E-01  0.798505E-01   157.652       157.731    
  63  0.153388      -1.87479      -11.3510       11.3510       160.604       171.955    
  64  0.416027     -0.877006      -5.30987       5.30987       158.663       163.972    
  65  0.815763     -0.203631      -1.23289       1.23289       165.090       166.323    
  66  0.196403      -1.62759      -9.85429       9.85429       155.616       165.470    
  67  0.751119E-01  -2.58878      -15.6739       15.6739       158.490       174.164    
  68  0.297288      -1.21305      -7.34448       7.34448       160.660       168.004    
  69  0.984987     -0.151265E-01 -0.915843E-01  0.915843E-01   158.180       158.271    
  70  0.142264      -1.95007      -11.8068       11.8068       164.924       176.730    
  71  0.506200     -0.680824      -4.12208       4.12208       156.234       160.356    
  72  0.681243     -0.383837      -2.32396       2.32396       162.825       165.149    
  73  0.526734     -0.641059      -3.88132       3.88132       161.708       165.589    
  74  0.953143     -0.479904E-01 -0.290560      0.290560       161.525       161.815    
  75  0.862698     -0.147691     -0.894203      0.894203       157.599       158.493    
loop,thermsimp(1:2)       49  0.514706E-01   12.8272    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327        156.02          0.87          1.15         25.24          0.17          0.06         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    328        155.84          0.86          1.14         25.24          0.54          0.05         27.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    155.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       49
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       50
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      327     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -28.3928       28.3928       152.539       180.931    
   2  0.902150     -0.102974     -0.623462      0.623462       152.040       152.664    
   3  0.375868     -0.978517      -5.92448       5.92448       153.757       159.682    
   4  0.136549E-01  -4.29366      -25.9962       25.9962       154.726       180.723    
   5  0.948329     -0.530533E-01 -0.321214      0.321214       155.109       155.430    
   6  0.489379E-01  -3.01720      -18.2678       18.2678       156.578       174.846    
   7  0.319400      -1.14131      -6.91012       6.91012       156.791       163.702    
   8  0.748008     -0.290342      -1.75789       1.75789       157.652       159.409    
   9  0.468015     -0.759255      -4.59694       4.59694       152.198       156.795    
  10  0.467420     -0.760527      -4.60465       4.60465       158.180       162.784    
  11  0.345085      -1.06396      -6.44182       6.44182       156.387       162.829    
  12  0.598981     -0.512526      -3.10311       3.10311       157.599       160.702    
  13  0.231496      -1.46319      -8.85896       8.85896       156.606       165.465    
  14  0.685496     -0.377613      -2.28627       2.28627       153.690       155.977    
  15  0.225803      -1.48809      -9.00971       9.00971       158.046       167.056    
  16  0.744991E-01  -2.59697      -15.7235       15.7235       159.455       175.179    
  17  0.436777     -0.828332      -5.01517       5.01517       158.361       163.376    
  18  0.241074      -1.42265      -8.61351       8.61351       156.234       164.848    
  19  0.728071     -0.317357      -1.92145       1.92145       160.058       161.979    
  20  0.228500      -1.47622      -8.93784       8.93784       160.049       168.987    
  21  0.423678     -0.858781      -5.19953       5.19953       154.646       159.845    
  22  0.812855     -0.207202      -1.25451       1.25451       152.717       153.972    
  23  0.810546     -0.210047      -1.27174       1.27174       160.681       161.953    
  24  0.113500      -2.17595      -13.1744       13.1744       156.426       169.601    
  25  0.197385      -1.62260      -9.82412       9.82412       161.050       170.874    
  26  0.101018      -2.29246      -13.8798       13.8798       158.974       172.853    
  27  0.857009E-01  -2.45689      -14.8754       14.8754       158.348       173.223    
  28  0.693668     -0.365762      -2.21452       2.21452       161.525       163.739    
  29  0.705918     -0.348256      -2.10853       2.10853       160.210       162.319    
  30  0.309793      -1.17185      -7.09503       7.09503       161.207       168.302    
  31  0.144843      -1.93210      -11.6980       11.6980       156.586       168.284    
  32  0.412916     -0.884511      -5.35531       5.35531       161.324       166.679    
  33  0.916661     -0.870180E-01 -0.526855      0.526855       161.330       161.857    
  34  0.933384E-01  -2.37152      -14.3585       14.3585       160.047       174.405    
  35  0.937330     -0.647200E-01 -0.391850      0.391850       159.717       160.109    
  36  0.958012     -0.428952E-01 -0.259711      0.259711       161.060       161.320    
  37  0.692877E-01  -2.66949      -16.1625       16.1625       158.917       175.079    
  38  0.228520E-01  -3.77872      -22.8784       22.8784       158.663       181.541    
  39  0.188135      -1.67060      -10.1147       10.1147       155.551       165.665    
  40  0.122595E-01  -4.40146      -26.6488       26.6488       163.436       190.085    
  41  0.776693     -0.252710      -1.53005       1.53005       158.526       160.056    
  42  0.571957     -0.558691      -3.38262       3.38262       162.816       166.199    
  43  0.313016      -1.16150      -7.03236       7.03236       161.444       168.477    
  44  0.512360     -0.668728      -4.04884       4.04884       155.446       159.495    
  45  0.874954     -0.133584     -0.808791      0.808791       162.825       163.633    
  46  0.617920     -0.481397      -2.91464       2.91464       161.872       164.787    
  47  0.529196     -0.636396      -3.85309       3.85309       155.616       159.469    
  48  0.389261E-02  -5.54867      -33.5947       33.5947       163.261       196.856    
  49  0.323386E-01  -3.43149      -20.7761       20.7761       161.708       182.484    
  50  0.900641     -0.104648     -0.633598      0.633598       163.578       164.211    
  51  0.872638     -0.136235     -0.824841      0.824841       159.760       160.584    
  52  0.965349     -0.352660E-01 -0.213520      0.213520       164.031       164.245    
  53  0.679490     -0.386413      -2.33956       2.33956       162.078       164.418    
  54  0.101129      -2.29136      -13.8732       13.8732       165.090       178.963    
  55  0.885746     -0.121326     -0.734571      0.734571       160.107       160.842    
  56  0.307763      -1.17843      -7.13484       7.13484       159.375       166.510    
  57  0.978164     -0.220781E-01 -0.133673      0.133673       154.957       155.090    
  58  0.678582     -0.387750      -2.34765       2.34765       160.660       163.008    
  59  0.573317     -0.556317      -3.36825       3.36825       158.812       162.180    
  60  0.541891     -0.612690      -3.70956       3.70956       160.975       164.684    
  61  0.110478      -2.20294      -13.3378       13.3378       160.242       173.580    
  62  0.125637      -2.07436      -12.5593       12.5593       161.091       173.651    
  63  0.580733     -0.543464      -3.29043       3.29043       159.336       162.627    
  64  0.261777      -1.34026      -8.11467       8.11467       162.340       170.455    
  65  0.500314     -0.692519      -4.19289       4.19289       157.046       161.239    
  66  0.810055     -0.210653      -1.27541       1.27541       160.717       161.992    
  67  0.548357     -0.600828      -3.63774       3.63774       164.985       168.623    
  68  0.260831      -1.34388      -8.13659       8.13659       159.789       167.926    
  69  0.276330      -1.28616      -7.78711       7.78711       160.604       168.391    
  70  0.637232     -0.450622      -2.72831       2.72831       164.796       167.524    
  71  0.324688      -1.12489      -6.81070       6.81070       161.212       168.022    
  72  0.157175      -1.85039      -11.2033       11.2033       158.490       169.693    
  73  0.960006     -0.408161E-01 -0.247123      0.247123       157.688       157.936    
  74  0.584715     -0.536631      -3.24906       3.24906       164.924       168.173    
  75  0.435443     -0.831392      -5.03370       5.03370       155.841       160.875    
loop,thermsimp(1:2)       50   28.3928      0.623462    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329        155.78          0.87          1.15         25.22          0.13          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    330        156.66          0.87          1.14         25.21          0.19          0.06         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    155.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       50
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       51
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      329     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577     -0.615001      0.615001       152.040       152.655    
   2  0.808902     -0.212077      -1.28403       1.28403       152.717       154.001    
   3  0.762147     -0.271616      -1.64451       1.64451       154.957       156.601    
   4  0.287851      -1.24531      -7.53980       7.53980       155.109       162.648    
   5  0.212418      -1.54920      -9.37971       9.37971       153.690       163.070    
   6  0.380717     -0.965699      -5.84687       5.84687       152.198       158.045    
   7  0.877795     -0.130342     -0.789161      0.789161       157.688       158.478    
   8  0.836834     -0.178130      -1.07849       1.07849       157.652       158.730    
   9  0.435183     -0.831988      -5.03731       5.03731       155.616       160.653    
  10  0.900166     -0.105177     -0.636796      0.636796       155.446       156.083    
  11  0.175095      -1.74242      -10.5496       10.5496       153.757       164.307    
  12  0.322232      -1.13248      -6.85667       6.85667       154.646       161.502    
  13  0.706662     -0.347203      -2.10216       2.10216       158.526       160.628    
  14  0.494297     -0.704618      -4.26614       4.26614       159.717       163.983    
  15  0.324383      -1.12583      -6.81639       6.81639       159.760       166.576    
  16  0.777122     -0.252157      -1.52670       1.52670       157.599       159.126    
  17  0.499054E-01  -2.99763      -18.1493       18.1493       160.107       178.257    
  18  0.489193E-01  -3.01758      -18.2701       18.2701       155.841       174.111    
  19  0.480140     -0.733678      -4.44209       4.44209       157.046       161.488    
  20  0.914126     -0.897865E-01 -0.543617      0.543617       161.060       161.603    
  21  0.613008     -0.489378      -2.96296       2.96296       161.330       164.293    
  22  0.470573     -0.753804      -4.56394       4.56394       160.681       165.245    
  23  0.614279     -0.487307      -2.95042       2.95042       160.058       163.008    
  24  0.410529     -0.890308      -5.39041       5.39041       160.717       166.107    
  25  0.582759     -0.539981      -3.26934       3.26934       158.812       162.081    
  26  0.422753E-01  -3.16355      -19.1539       19.1539       160.210       179.364    
  27  0.717044     -0.332618      -2.01385       2.01385       159.336       161.350    
  28  0.420765     -0.865682      -5.24131       5.24131       158.180       163.421    
  29  0.801392     -0.221405      -1.34051       1.34051       156.387       157.728    
  30  0.426188     -0.852875      -5.16377       5.16377       160.660       165.824    
  31  0.338881      -1.08211      -6.55167       6.55167       158.361       164.913    
  32  0.398160     -0.920902      -5.57565       5.57565       162.825       168.400    
  33  0.938837     -0.631132E-01 -0.382122      0.382122       156.791       157.174    
  34  0.411860E-01  -3.18966      -19.3119       19.3119       161.525       180.836    
  35  0.180703      -1.71090      -10.3587       10.3587       163.578       173.937    
  36  0.617012     -0.482867      -2.92354       2.92354       164.031       166.955    
  37  0.788612     -0.237480      -1.43784       1.43784       162.078       163.516    
  38  0.381719     -0.963071      -5.83096       5.83096       160.975       166.806    
  39  0.376038     -0.978064      -5.92174       5.92174       161.872       167.794    
  40  0.105996      -2.24435      -13.5885       13.5885       156.234       169.823    
  41  0.769932E-01  -2.56404      -15.5241       15.5241       156.606       172.130    
  42  0.365987      -1.00516      -6.08578       6.08578       155.551       161.637    
  43  0.731763     -0.312298      -1.89082       1.89082       162.816       164.707    
  44  0.447137     -0.804891      -4.87325       4.87325       159.375       164.249    
  45  0.273519      -1.29638      -7.84902       7.84902       161.324       169.173    
  46  0.870614     -0.138556     -0.838896      0.838896       158.046       158.885    
  47  0.822463     -0.195452      -1.18337       1.18337       164.796       165.979    
  48  0.456061     -0.785129      -4.75360       4.75360       159.789       164.543    
  49  0.603947     -0.504269      -3.05312       3.05312       161.212       164.265    
  50  0.342037      -1.07284      -6.49553       6.49553       164.924       171.419    
  51  0.693527     -0.365965      -2.21576       2.21576       156.586       158.802    
  52  0.958323     -0.425703E-01 -0.257744      0.257744       161.207       161.465    
  53  0.587360     -0.532117      -3.22173       3.22173       160.604       163.826    
  54  0.364787      -1.00844      -6.10566       6.10566       161.444       167.550    
  55  0.878785     -0.129215     -0.782339      0.782339       164.985       165.768    
  56  0.273053      -1.29809      -7.85935       7.85935       160.049       167.908    
  57  0.896174     -0.109620     -0.663701      0.663701       156.426       157.090    
  58  0.239994      -1.42714      -8.64068       8.64068       158.490       167.131    
  59  0.595505E-01  -2.82093      -17.0795       17.0795       162.340       179.420    
  60  0.353403      -1.04015      -6.29761       6.29761       161.050       167.347    
  61  0.729282     -0.315695      -1.91139       1.91139       158.974       160.885    
  62  0.231928      -1.46133      -8.84768       8.84768       158.348       167.196    
  63  0.107599      -2.22934      -13.4977       13.4977       160.242       173.740    
  64  0.641905     -0.443315      -2.68407       2.68407       161.091       163.776    
  65  0.701312     -0.354803      -2.14817       2.14817       160.047       162.195    
  66  0.245029      -1.40638      -8.51498       8.51498       156.578       165.093    
  67  0.223204      -1.49967      -9.07981       9.07981       158.917       167.997    
  68  0.335163      -1.09314      -6.61846       6.61846       159.455       166.074    
  69  0.921199     -0.820796E-01 -0.496955      0.496955       165.090       165.587    
  70  0.395288     -0.928141      -5.61947       5.61947       154.726       160.346    
  71  0.956072     -0.449224E-01 -0.271985      0.271985       152.539       152.811    
  72  0.734146     -0.309048      -1.87115       1.87115       158.663       160.534    
  73  0.113032      -2.18009      -13.1994       13.1994       161.708       174.908    
  74  0.726092     -0.320079      -1.93793       1.93793       163.436       165.374    
  75  0.741853     -0.298605      -1.80792       1.80792       155.776       157.584    
loop,thermsimp(1:2)       51  0.615001       1.28403    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331        156.87          0.87          1.15         25.12          0.18          0.06         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    156.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       51
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       52
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      330     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -5.23662       5.23662       152.040       157.277    
   2  0.315135      -1.15476      -6.99152       6.99152       152.539       159.530    
   3  0.696708     -0.361389      -2.18805       2.18805       152.717       154.905    
   4  0.922116     -0.810842E-01 -0.490928      0.490928       155.446       155.937    
   5  0.908133     -0.963648E-01 -0.583445      0.583445       154.957       155.540    
   6  0.174132      -1.74794      -10.5830       10.5830       156.426       167.009    
   7  0.490629     -0.712068      -4.31125       4.31125       156.791       161.103    
   8  0.382604     -0.960755      -5.81693       5.81693       155.776       161.593    
   9  0.985159     -0.149527E-01 -0.905319E-01  0.905319E-01   156.387       156.478    
  10  0.182634      -1.70027      -10.2944       10.2944       152.198       162.492    
  11  0.554568     -0.589565      -3.56955       3.56955       157.688       161.258    
  12  0.999791     -0.209153E-03 -0.126633E-02  0.126633E-02   157.652       157.653    
  13  0.284621      -1.25660      -7.60813       7.60813       156.586       164.195    
  14  0.920706E-01  -2.38520      -14.4413       14.4413       158.046       172.488    
  15  0.243911      -1.41095      -8.54268       8.54268       157.599       166.142    
  16  0.866829     -0.142914     -0.865277      0.865277       154.726       155.592    
  17  0.640039     -0.446225      -2.70169       2.70169       158.663       161.364    
  18  0.737488E-01  -2.60709      -15.7848       15.7848       158.526       174.310    
  19  0.511916     -0.669594      -4.05409       4.05409       155.616       159.670    
  20  0.870220     -0.139009     -0.841639      0.841639       158.974       159.815    
  21  0.594690     -0.519714      -3.14663       3.14663       159.336       162.483    
  22  0.659508     -0.416262      -2.52028       2.52028       161.207       163.727    
  23  0.702023     -0.353789      -2.14203       2.14203       157.046       159.188    
  24  0.178121      -1.72529      -10.4459       10.4459       154.646       165.091    
  25  0.622271     -0.474379      -2.87215       2.87215       161.060       163.932    
  26  0.877027     -0.131217     -0.794460      0.794460       155.551       156.345    
  27  0.206753      -1.57623      -9.54337       9.54337       158.812       168.355    
  28  0.927381     -0.753912E-01 -0.456460      0.456460       160.047       160.503    
  29  0.610274     -0.493848      -2.99002       2.99002       155.109       158.099    
  30  0.453676     -0.790373      -4.78535       4.78535       160.058       164.843    
  31  0.203335      -1.59290      -9.64429       9.64429       153.690       163.335    
  32  0.558786     -0.581989      -3.52368       3.52368       158.180       161.703    
  33  0.685013     -0.378317      -2.29054       2.29054       162.078       164.369    
  34  0.753574     -0.282929      -1.71301       1.71301       161.091       162.804    
  35  0.736990E-01  -2.60777      -15.7888       15.7888       160.604       176.393    
  36  0.719848     -0.328716      -1.99022       1.99022       159.717       161.708    
  37  0.177345E-01  -4.03224      -24.4134       24.4134       159.375       183.789    
  38  0.277334E-01  -3.58512      -21.7063       21.7063       161.212       182.918    
  39  0.228604      -1.47576      -8.93507       8.93507       161.330       170.265    
  40  0.874609     -0.133979     -0.811180      0.811180       153.757       154.569    
  41  0.875699     -0.132733     -0.803639      0.803639       159.789       160.593    
  42  0.540874     -0.614569      -3.72093       3.72093       162.816       166.537    
  43  0.343108E-01  -3.37230      -20.4177       20.4177       158.361       178.779    
  44  0.982551     -0.176027E-01 -0.106577      0.106577       156.578       156.684    
  45  0.201823      -1.60037      -9.68949       9.68949       160.681       170.370    
  46  0.116838      -2.14697      -12.9989       12.9989       163.436       176.435    
  47  0.520586     -0.652800      -3.95241       3.95241       165.090       169.042    
  48  0.515528     -0.662563      -4.01152       4.01152       164.985       168.997    
  49  0.814407     -0.205295      -1.24297       1.24297       160.660       161.903    
  50  0.436930     -0.827981      -5.01305       5.01305       164.796       169.809    
  51  0.802441     -0.220097      -1.33258       1.33258       159.455       160.788    
  52  0.366662      -1.00331      -6.07461       6.07461       160.717       166.792    
  53  0.915349     -0.884494E-01 -0.535521      0.535521       159.760       160.295    
  54  0.619345     -0.479093      -2.90069       2.90069       160.975       163.875    
  55  0.984856     -0.152594E-01 -0.923887E-01  0.923887E-01   164.031       164.123    
  56  0.594834     -0.519472      -3.14517       3.14517       158.490       161.635    
  57  0.295281      -1.21983      -7.38551       7.38551       158.348       165.733    
  58  0.363721      -1.01137      -6.12337       6.12337       161.050       167.173    
  59  0.113237      -2.17827      -13.1884       13.1884       161.444       174.633    
  60  0.684322     -0.379327      -2.29665       2.29665       161.872       164.169    
  61  0.172853E-01  -4.05790      -24.5687       24.5687       160.049       184.618    
  62  0.910904     -0.933174E-01 -0.564994      0.564994       158.917       159.482    
  63  0.792218     -0.232919      -1.41022       1.41022       162.825       164.235    
  64  0.644894E-02  -5.04384      -30.5382       30.5382       161.324       191.862    
  65  0.674921     -0.393160      -2.38041       2.38041       156.234       158.614    
  66  0.713821     -0.337122      -2.04112       2.04112       164.924       166.965    
  67  0.122871      -2.09662      -12.6941       12.6941       156.606       169.300    
  68  0.809527     -0.211305      -1.27936       1.27936       160.242       161.521    
  69  0.266630      -1.32189      -8.00347       8.00347       163.578       171.581    
  70  0.457713     -0.781513      -4.73171       4.73171       155.841       160.573    
  71  0.510631     -0.672109      -4.06931       4.06931       161.708       165.777    
  72  0.512413     -0.668624      -4.04821       4.04821       160.107       164.156    
  73  0.104223      -2.26122      -13.6907       13.6907       160.210       173.901    
  74  0.982940     -0.172071E-01 -0.104181      0.104181       162.340       162.444    
  75  0.737602     -0.304352      -1.84271       1.84271       156.868       158.711    
loop,thermsimp(1:2)       52   5.23662       6.99152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332        150.54          0.87          1.15         25.19          0.25          0.08         27.53
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    333        153.26          0.84          1.13         25.15          0.22          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       52
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       53
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      332     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -20.4574       20.4574       153.757       174.215    
   2  0.714674     -0.335928      -2.03389       2.03389       152.717       154.751    
   3  0.977792     -0.224587E-01 -0.135977      0.135977       154.957       155.093    
   4  0.771231     -0.259767      -1.57277       1.57277       154.726       156.299    
   5  0.265148      -1.32747      -8.03722       8.03722       155.446       163.483    
   6  0.559491     -0.580728      -3.51605       3.51605       155.551       159.067    
   7  0.934824E-01  -2.36998      -14.3492       14.3492       156.387       170.736    
   8  0.928182     -0.745278E-01 -0.451232      0.451232       156.578       157.029    
   9  0.464905     -0.765922      -4.63731       4.63731       152.040       156.677    
  10  0.871919     -0.137059     -0.829827      0.829827       157.652       158.481    
  11  0.982233     -0.179265E-01 -0.108537      0.108537       155.109       155.217    
  12  0.426376     -0.852433      -5.16109       5.16109       156.234       161.395    
  13  0.471128E-01  -3.05521      -18.4979       18.4979       156.868       175.366    
  14  0.686439     -0.376238      -2.27795       2.27795       157.046       159.324    
  15  0.117826      -2.13855      -12.9479       12.9479       158.917       171.865    
  16  0.756878E-01  -2.58114      -15.6276       15.6276       152.539       168.166    
  17  0.196211      -1.62856      -9.86022       9.86022       155.616       165.476    
  18  0.431930     -0.839491      -5.08274       5.08274       158.974       164.056    
  19  0.707794     -0.345602      -2.09247       2.09247       159.760       161.852    
  20  0.174358E-01  -4.04923      -24.5163       24.5163       160.047       184.563    
  21  0.267976      -1.31686      -7.97297       7.97297       155.841       163.814    
  22  0.793866     -0.230841      -1.39764       1.39764       159.789       161.187    
  23  0.135848      -1.99622      -12.0862       12.0862       159.455       171.542    
  24  0.663958     -0.409536      -2.47955       2.47955       156.791       159.271    
  25  0.281101      -1.26904      -7.68347       7.68347       157.688       165.372    
  26  0.606466     -0.500106      -3.02792       3.02792       158.663       161.690    
  27  0.940056     -0.618158E-01 -0.374267      0.374267       160.242       160.616    
  28  0.124106      -2.08662      -12.6335       12.6335       155.776       168.409    
  29  0.205090      -1.58431      -9.59226       9.59226       158.490       168.082    
  30  0.852960     -0.159043     -0.962933      0.962933       158.180       159.143    
  31  0.241701      -1.42005      -8.59777       8.59777       159.717       168.315    
  32  0.744368     -0.295220      -1.78742       1.78742       160.660       162.447    
  33  0.279909      -1.27329      -7.70921       7.70921       162.340       170.049    
  34  0.142971      -1.94511      -11.7768       11.7768       159.336       171.113    
  35  0.367233      -1.00176      -6.06519       6.06519       152.198       158.263    
  36  0.839044     -0.175493      -1.06253       1.06253       161.091       162.154    
  37  0.762369     -0.271325      -1.64275       1.64275       153.690       155.333    
  38  0.414704     -0.880189      -5.32915       5.32915       161.207       166.536    
  39  0.294445      -1.22266      -7.40267       7.40267       160.975       168.377    
  40  0.296874      -1.21445      -7.35292       7.35292       161.060       168.413    
  41  0.834777     -0.180590      -1.09339       1.09339       164.031       165.124    
  42  0.399354     -0.917907      -5.55751       5.55751       160.107       165.665    
  43  0.948666     -0.526981E-01 -0.319063      0.319063       161.872       162.191    
  44  0.306553E-01  -3.48495      -21.0998       21.0998       156.586       177.686    
  45  0.768324E-01  -2.56613      -15.5368       15.5368       162.825       178.361    
  46  0.723813     -0.323222      -1.95696       1.95696       162.078       164.035    
  47  0.912222     -0.918720E-01 -0.556243      0.556243       160.058       160.614    
  48  0.846322     -0.166855      -1.01023       1.01023       154.646       155.656    
  49  0.704090     -0.350850      -2.12424       2.12424       158.348       160.472    
  50  0.443839     -0.812294      -4.91807       4.91807       161.708       166.626    
  51  0.790462     -0.235137      -1.42365       1.42365       157.599       159.023    
  52  0.134239      -2.00813      -12.1583       12.1583       162.816       174.974    
  53  0.720618     -0.327646      -1.98375       1.98375       160.717       162.701    
  54  0.489652     -0.714061      -4.32331       4.32331       164.924       169.247    
  55  0.493891E-01  -3.00802      -18.2122       18.2122       156.426       174.638    
  56  0.524875     -0.644595      -3.90273       3.90273       161.050       164.952    
  57  0.919627     -0.837868E-01 -0.507291      0.507291       158.812       159.319    
  58  0.372709     -0.986956      -5.97557       5.97557       164.985       170.961    
  59  0.121203      -2.11029      -12.7768       12.7768       165.090       177.867    
  60  0.195183      -1.63382      -9.89203       9.89203       156.606       166.498    
  61  0.325168      -1.12341      -6.80176       6.80176       164.796       171.597    
  62  0.248863      -1.39085      -8.42099       8.42099       161.330       169.751    
  63  0.910643     -0.936046E-01 -0.566734      0.566734       160.681       161.248    
  64  0.131372E-01  -4.33230      -26.2301       26.2301       163.578       189.808    
  65  0.308708      -1.17536      -7.11626       7.11626       158.046       165.163    
  66  0.863163     -0.147151     -0.890936      0.890936       160.210       161.101    
  67  0.437001     -0.827819      -5.01207       5.01207       158.526       163.538    
  68  0.933437     -0.688822E-01 -0.417050      0.417050       161.444       161.861    
  69  0.595007     -0.519181      -3.14341       3.14341       160.604       163.748    
  70  0.184309      -1.69114      -10.2391       10.2391       163.436       173.675    
  71  0.340956      -1.07600      -6.51470       6.51470       158.361       164.876    
  72  0.582092     -0.541127      -3.27628       3.27628       161.212       164.488    
  73  0.451420     -0.795358      -4.81553       4.81553       159.375       164.191    
  74  0.721473E-01  -2.62905      -15.9177       15.9177       160.049       175.967    
  75  0.593162     -0.522287      -3.16221       3.16221       150.536       153.698    
loop,thermsimp(1:2)       53   20.4574       2.03389    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    334        197.79          0.87          1.15         25.27          0.29          0.06         27.63
Just calling func    0   0         27.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    335        169.69          0.84          1.14         25.22          0.12          0.05         27.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    169.69
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       53
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       54
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      334     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -2.94332       2.94332       150.536       153.479    
   2  0.438442     -0.824528      -4.99215       4.99215       152.717       157.709    
   3  0.666371     -0.405908      -2.45759       2.45759       154.957       157.414    
   4  0.419797     -0.867984      -5.25525       5.25525       155.109       160.364    
   5  0.662493     -0.411746      -2.49293       2.49293       153.690       156.183    
   6  0.261021      -1.34315      -8.13219       8.13219       154.646       162.778    
   7  0.451731     -0.794667      -4.81135       4.81135       154.726       159.538    
   8  0.858047     -0.153096     -0.926928      0.926928       152.040       152.967    
   9  0.678039     -0.388550      -2.35250       2.35250       156.578       158.930    
  10  0.257304      -1.35750      -8.21902       8.21902       152.198       160.417    
  11  0.379774     -0.968178      -5.86188       5.86188       157.652       163.513    
  12  0.200314      -1.60787      -9.73493       9.73493       157.599       167.334    
  13  0.702955E-01  -2.65505      -16.0751       16.0751       155.551       171.626    
  14  0.846007     -0.167228      -1.01249       1.01249       158.180       159.192    
  15  0.692217     -0.367856      -2.22720       2.22720       156.791       159.019    
  16  0.830541     -0.185678      -1.12420       1.12420       158.812       159.936    
  17  0.162133E-02  -6.42451      -38.8975       38.8975       157.046       195.944    
  18  0.829216     -0.187275      -1.13386       1.13386       158.348       159.482    
  19  0.464918     -0.765894      -4.63714       4.63714       160.058       164.695    
  20  0.204157      -1.58887      -9.61986       9.61986       160.242       169.862    
  21  0.203429      -1.59244      -9.64149       9.64149       160.210       169.852    
  22  0.403935     -0.906500      -5.48845       5.48845       159.789       165.278    
  23  0.508037     -0.677201      -4.10014       4.10014       160.681       164.781    
  24  0.337702      -1.08559      -6.57276       6.57276       156.234       162.807    
  25  0.375672     -0.979039      -5.92764       5.92764       158.663       164.590    
  26  0.218755      -1.51980      -9.20171       9.20171       159.760       168.961    
  27  0.803422     -0.218876      -1.32519       1.32519       161.444       162.770    
  28  0.324101      -1.12670      -6.82167       6.82167       161.091       167.913    
  29  0.804001     -0.218155      -1.32083       1.32083       161.872       163.193    
  30  0.727676     -0.317899      -1.92474       1.92474       160.660       162.585    
  31  0.769479     -0.262042      -1.58655       1.58655       160.717       162.304    
  32  0.632293     -0.458402      -2.77542       2.77542       155.446       158.221    
  33  0.300459      -1.20244      -7.28024       7.28024       158.526       165.806    
  34  0.567362     -0.566759      -3.43147       3.43147       160.604       164.036    
  35  0.803345     -0.218971      -1.32577       1.32577       155.841       157.167    
  36  0.764706     -0.268264      -1.62422       1.62422       162.078       163.702    
  37  0.159444      -1.83606      -11.1165       11.1165       158.974       170.090    
  38  0.951670     -0.495367E-01 -0.299922      0.299922       159.375       159.675    
  39  0.769198     -0.262407      -1.58875       1.58875       161.212       162.801    
  40  0.916532     -0.871588E-01 -0.527707      0.527707       158.361       158.889    
  41  0.146117E-01  -4.22593      -25.5861       25.5861       161.050       186.636    
  42  0.196164      -1.62880      -9.86167       9.86167       164.031       173.893    
  43  0.399482     -0.917586      -5.55556       5.55556       158.046       163.602    
  44  0.646732     -0.435823      -2.63871       2.63871       157.688       160.327    
  45  0.207790      -1.57122      -9.51306       9.51306       155.616       165.129    
  46  0.276388      -1.28595      -7.78584       7.78584       160.107       167.893    
  47  0.410494     -0.890394      -5.39093       5.39093       156.606       161.997    
  48  0.437747     -0.826115      -5.00175       5.00175       161.207       166.209    
  49  0.414886     -0.879752      -5.32650       5.32650       161.708       167.035    
  50  0.453890     -0.789901      -4.78249       4.78249       158.490       163.273    
  51  0.141383      -1.95628      -11.8444       11.8444       152.539       164.383    
  52  0.264375      -1.33039      -8.05490       8.05490       159.717       167.772    
  53  0.598599     -0.513163      -3.10697       3.10697       160.975       164.082    
  54  0.716868     -0.332864      -2.01534       2.01534       155.776       157.791    
  55  0.547773     -0.601894      -3.64420       3.64420       161.060       164.704    
  56  0.920744     -0.825729E-01 -0.499941      0.499941       164.924       165.424    
  57  0.394656     -0.929742      -5.62917       5.62917       161.330       166.959    
  58  0.439395     -0.822357      -4.97900       4.97900       162.340       167.319    
  59  0.890216     -0.116291     -0.704089      0.704089       156.387       157.091    
  60  0.693208     -0.366425      -2.21854       2.21854       164.985       167.204    
  61  0.747783     -0.290642      -1.75971       1.75971       159.336       161.096    
  62  0.408813     -0.894498      -5.41578       5.41578       159.455       164.871    
  63  0.175963E-03  -8.64523      -52.3430       52.3430       164.796       217.139    
  64  0.715035     -0.335424      -2.03084       2.03084       158.917       160.948    
  65  0.895535     -0.110334     -0.668025      0.668025       163.436       164.104    
  66  0.332554      -1.10095      -6.66578       6.66578       153.757       160.423    
  67  0.594595     -0.519874      -3.14760       3.14760       156.426       159.574    
  68  0.883454     -0.123916     -0.750258      0.750258       162.816       163.566    
  69  0.727087     -0.318709      -1.92964       1.92964       156.868       158.798    
  70  0.760468     -0.273821      -1.65786       1.65786       160.049       161.707    
  71  0.915560     -0.882188E-01 -0.534125      0.534125       156.586       157.121    
  72  0.479318     -0.735391      -4.45246       4.45246       165.090       169.542    
  73  0.820230     -0.198170      -1.19983       1.19983       162.825       164.024    
  74  0.214600      -1.53898      -9.31783       9.31783       160.047       169.365    
  75  0.356786      -1.03062      -6.23994       6.23994       169.692       175.932    
loop,thermsimp(1:2)       54   2.94332       4.99215    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336        157.12          0.86          1.15         25.22          0.21          0.06         27.49
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    157.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       54
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       55
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      335     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -2.83498       2.83498       152.040       154.875    
   2  0.909442     -0.949244E-01 -0.574724      0.574724       150.536       151.111    
   3  0.449837     -0.798870      -4.83680       4.83680       153.690       158.527    
   4  0.761598     -0.272336      -1.64887       1.64887       156.387       158.036    
   5  0.706800     -0.347007      -2.10097       2.10097       156.586       158.687    
   6  0.214343      -1.54018      -9.32508       9.32508       155.841       165.166    
   7  0.855661     -0.155881     -0.943787      0.943787       154.957       155.900    
   8  0.432924E-01  -3.13978      -19.0099       19.0099       152.717       171.727    
   9  0.902784     -0.102271     -0.619207      0.619207       155.776       156.395    
  10  0.706965     -0.346774      -2.09956       2.09956       155.446       157.545    
  11  0.826667     -0.190354      -1.15250       1.15250       156.868       158.021    
  12  0.824436     -0.193055      -1.16886       1.16886       158.361       159.530    
  13  0.442772     -0.814700      -4.93264       4.93264       156.578       161.510    
  14  0.416355     -0.876217      -5.30509       5.30509       156.791       162.097    
  15  0.268464      -1.31504      -7.96196       7.96196       158.180       166.142    
  16  0.779742     -0.248792      -1.50632       1.50632       158.348       159.854    
  17  0.406799E-01  -3.20202      -19.3868       19.3868       154.726       174.113    
  18  0.975397     -0.249106E-01 -0.150822      0.150822       156.426       156.577    
  19  0.425150E-01  -3.15790      -19.1196       19.1196       159.375       178.495    
  20  0.302481      -1.19574      -7.23964       7.23964       158.812       166.051    
  21  0.732033     -0.311930      -1.88859       1.88859       157.688       159.577    
  22  0.774561     -0.255459      -1.54669       1.54669       155.109       156.655    
  23  0.899897     -0.105475     -0.638603      0.638603       152.198       152.837    
  24  0.549624     -0.598520      -3.62377       3.62377       153.757       157.381    
  25  0.143543      -1.94112      -11.7526       11.7526       158.917       170.670    
  26  0.229055      -1.47379      -8.92316       8.92316       159.336       168.260    
  27  0.334206      -1.09600      -6.63577       6.63577       160.049       166.685    
  28  0.301620      -1.19859      -7.25691       7.25691       156.606       163.863    
  29  0.856030     -0.155449     -0.941176      0.941176       160.717       161.658    
  30  0.978878     -0.213482E-01 -0.129254      0.129254       160.660       160.789    
  31  0.890790E-01  -2.41823      -14.6413       14.6413       161.444       176.086    
  32  0.275076      -1.29071      -7.81464       7.81464       154.646       162.460    
  33  0.506865     -0.679511      -4.11413       4.11413       161.212       165.326    
  34  0.628553     -0.464334      -2.81133       2.81133       156.234       159.045    
  35  0.787972     -0.238293      -1.44276       1.44276       161.872       163.315    
  36  0.746168     -0.292804      -1.77280       1.77280       158.490       160.263    
  37  0.116954      -2.14598      -12.9929       12.9929       157.652       170.645    
  38  0.245368      -1.40500      -8.50662       8.50662       162.816       171.323    
  39  0.873952     -0.134729     -0.815725      0.815725       158.046       158.862    
  40  0.850596     -0.161818     -0.979734      0.979734       162.078       163.058    
  41  0.455763     -0.785783      -4.75756       4.75756       162.825       167.582    
  42  0.984333     -0.157910E-01 -0.956073E-01  0.956073E-01   160.604       160.700    
  43  0.956700     -0.442655E-01 -0.268008      0.268008       160.975       161.243    
  44  0.186161      -1.68114      -10.1786       10.1786       163.436       173.614    
  45  0.791379     -0.233979      -1.41663       1.41663       152.539       153.955    
  46  0.262937      -1.33584      -8.08792       8.08792       158.663       166.750    
  47  0.115228E-01  -4.46342      -27.0240       27.0240       160.058       187.082    
  48  0.324912      -1.12420      -6.80652       6.80652       161.060       167.866    
  49  0.164288      -1.80613      -10.9353       10.9353       160.681       171.616    
  50  0.334193E-02  -5.70121      -34.5182       34.5182       159.455       193.974    
  51  0.189130      -1.66532      -10.0828       10.0828       155.616       165.699    
  52  0.157956      -1.84544      -11.1733       11.1733       159.789       170.963    
  53  0.414399     -0.880925      -5.33360       5.33360       164.924       170.257    
  54  0.445375     -0.808838      -4.89715       4.89715       158.526       163.423    
  55  0.674924     -0.393155      -2.38038       2.38038       161.207       163.587    
  56  0.204431      -1.58752      -9.61174       9.61174       161.330       170.941    
  57  0.741769     -0.298718      -1.80860       1.80860       161.708       163.517    
  58  0.662845     -0.411215      -2.48972       2.48972       164.985       167.475    
  59  0.716249     -0.333728      -2.02057       2.02057       162.340       164.361    
  60  0.503649     -0.685876      -4.15267       4.15267       157.599       161.752    
  61  0.525560     -0.643292      -3.89484       3.89484       159.717       163.612    
  62  0.981258     -0.189199E-01 -0.114551      0.114551       160.107       160.222    
  63  0.892133     -0.114140     -0.691068      0.691068       161.091       161.783    
  64  0.239527E-01  -3.73167      -22.5936       22.5936       159.760       182.353    
  65  0.819895E-01  -2.50116      -15.1434       15.1434       160.047       175.190    
  66  0.567274     -0.566913      -3.43240       3.43240       165.090       168.522    
  67  0.543991     -0.608823      -3.68614       3.68614       160.210       163.897    
  68  0.962374     -0.383523E-01 -0.232206      0.232206       160.242       160.474    
  69  0.514511     -0.664538      -4.02348       4.02348       158.974       162.997    
  70  0.845541     -0.167779      -1.01583       1.01583       155.551       156.567    
  71  0.674893     -0.393201      -2.38065       2.38065       164.031       166.412    
  72  0.210589      -1.55785      -9.43206       9.43206       169.692       179.124    
  73  0.242462E-01  -3.71950      -22.5199       22.5199       161.050       183.570    
  74  0.672797     -0.396312      -2.39949       2.39949       157.046       159.446    
  75  0.585872     -0.534653      -3.23708       3.23708       157.121       160.358    
loop,thermsimp(1:2)       55   2.83498      0.574724    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337        157.17          0.87          1.15         25.21          0.34          0.06         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    338        155.18          0.85          1.15         25.15          0.56          0.06         27.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    155.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       55
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       56
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      337     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -8.49493       8.49493       150.536       159.031    
   2  0.963480     -0.372033E-01 -0.225249      0.225249       152.198       152.423    
   3  0.633143     -0.457059      -2.76728       2.76728       152.539       155.306    
   4  0.939850E-02  -4.66721      -28.2578       28.2578       152.040       180.298    
   5  0.796978     -0.226928      -1.37395       1.37395       154.957       156.330    
   6  0.229125      -1.47349      -8.92131       8.92131       155.776       164.697    
   7  0.926958     -0.758467E-01 -0.459218      0.459218       155.551       156.010    
   8  0.687512     -0.374676      -2.26849       2.26849       156.426       158.695    
   9  0.695030     -0.363800      -2.20264       2.20264       155.109       157.311    
  10  0.900736     -0.104543     -0.632958      0.632958       153.757       154.390    
  11  0.867179     -0.142510     -0.862832      0.862832       155.446       156.309    
  12  0.879271     -0.128662     -0.778989      0.778989       156.868       157.647    
  13  0.197557      -1.62173      -9.81883       9.81883       156.387       166.206    
  14  0.790701     -0.234835      -1.42182       1.42182       153.690       155.112    
  15  0.807456     -0.213867      -1.29487       1.29487       156.586       157.881    
  16  0.688117     -0.373796      -2.26317       2.26317       158.046       160.310    
  17  0.227000      -1.48280      -8.97771       8.97771       156.234       165.212    
  18  0.374715     -0.981589      -5.94308       5.94308       157.046       162.989    
  19  0.176077      -1.73683      -10.5157       10.5157       158.361       168.877    
  20  0.446126E-01  -3.10974      -18.8281       18.8281       157.688       176.517    
  21  0.997763E-01  -2.30482      -13.9547       13.9547       158.348       172.303    
  22  0.142978E-01  -4.24765      -25.7176       25.7176       160.107       185.825    
  23  0.652216     -0.427379      -2.58759       2.58759       158.490       161.078    
  24  0.909797     -0.945339E-01 -0.572360      0.572360       157.121       157.693    
  25  0.145015      -1.93092      -11.6908       11.6908       160.242       171.933    
  26  0.189723      -1.66219      -10.0638       10.0638       160.604       170.668    
  27  0.260997      -1.34324      -8.13274       8.13274       160.660       168.793    
  28  0.167755      -1.78525      -10.8089       10.8089       160.975       171.784    
  29  0.148939      -1.90422      -11.5292       11.5292       156.578       168.107    
  30  0.209474      -1.56315      -9.46419       9.46419       160.717       170.181    
  31  0.594522     -0.519998      -3.14835       3.14835       157.599       160.747    
  32  0.401703     -0.912043      -5.52201       5.52201       161.091       166.613    
  33  0.306469      -1.18264      -7.16035       7.16035       156.791       163.952    
  34  0.879335     -0.128589     -0.778548      0.778548       154.646       155.424    
  35  0.920707     -0.826134E-01 -0.500187      0.500187       158.974       159.474    
  36  0.215616      -1.53425      -9.28922       9.28922       162.078       171.367    
  37  0.821708     -0.196370      -1.18893       1.18893       161.872       163.061    
  38  0.935240     -0.669517E-01 -0.405362      0.405362       158.526       158.931    
  39  0.691932     -0.368268      -2.22969       2.22969       161.708       163.938    
  40  0.493152     -0.706938      -4.28019       4.28019       161.207       165.487    
  41  0.362160      -1.01567      -6.14941       6.14941       159.717       165.867    
  42  0.636318     -0.452056      -2.73699       2.73699       156.606       159.343    
  43  0.178369      -1.72390      -10.4374       10.4374       160.210       170.648    
  44  0.987372     -0.127089E-01 -0.769465E-01  0.769465E-01   162.340       162.417    
  45  0.557690     -0.583953      -3.53557       3.53557       155.841       159.377    
  46  0.434391     -0.833811      -5.04835       5.04835       161.212       166.260    
  47  0.759572     -0.275001      -1.66500       1.66500       155.616       157.281    
  48  0.578559     -0.547214      -3.31313       3.31313       158.812       162.125    
  49  0.262392      -1.33792      -8.10047       8.10047       158.180       166.280    
  50  0.615619     -0.485127      -2.93722       2.93722       164.031       166.968    
  51  0.580502     -0.543861      -3.29283       3.29283       160.049       163.342    
  52  0.434749     -0.832986      -5.04335       5.04335       158.663       163.706    
  53  0.741569     -0.298987      -1.81023       1.81023       164.985       166.796    
  54  0.207475      -1.57274      -9.52225       9.52225       162.825       172.347    
  55  0.610742     -0.493081      -2.98538       2.98538       161.060       164.045    
  56  0.746759     -0.292013      -1.76801       1.76801       159.336       161.104    
  57  0.846394     -0.166771      -1.00972       1.00972       165.090       166.099    
  58  0.114011      -2.17146      -13.1472       13.1472       164.924       178.071    
  59  0.148375      -1.90801      -11.5521       11.5521       157.652       169.204    
  60  0.610037     -0.494236      -2.99237       2.99237       158.917       161.909    
  61  0.104069      -2.26270      -13.6996       13.6996       161.330       175.029    
  62  0.570721     -0.560855      -3.39572       3.39572       159.789       163.185    
  63  0.154528      -1.86738      -11.3061       11.3061       162.816       174.122    
  64  0.365341      -1.00692      -6.09646       6.09646       160.681       166.777    
  65  0.856377     -0.155044     -0.938722      0.938722       152.717       153.656    
  66  0.758370     -0.276584      -1.67459       1.67459       163.436       165.110    
  67  0.641541     -0.443881      -2.68750       2.68750       154.726       157.414    
  68  0.744629E-01  -2.59745      -15.7264       15.7264       160.047       175.773    
  69  0.186851      -1.67744      -10.1562       10.1562       161.444       171.600    
  70  0.431508     -0.840469      -5.08866       5.08866       159.375       164.464    
  71  0.622787     -0.473551      -2.86713       2.86713       169.692       172.559    
  72  0.308057      -1.17747      -7.12906       7.12906       159.760       166.889    
  73  0.225569      -1.48913      -9.01600       9.01600       161.050       170.066    
  74  0.756713E-02  -4.88394      -29.5701       29.5701       160.058       189.628    
  75  0.429879     -0.844252      -5.11156       5.11156       155.176       160.287    
loop,thermsimp(1:2)       56   8.49493      0.225249    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339        160.48          0.87          1.15         25.24          0.24          0.05         27.56
Just calling func    0   0         27.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    160.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       56
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       57
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      338     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -7.21129       7.21129       152.198       159.409    
   2  0.729962     -0.314762      -1.90574       1.90574       152.717       154.623    
   3  0.788140     -0.238080      -1.44147       1.44147       153.757       155.199    
   4  0.718031     -0.331242      -2.00552       2.00552       153.690       155.696    
   5  0.603575     -0.504885      -3.05685       3.05685       152.539       155.595    
   6  0.287757      -1.24564      -7.54178       7.54178       154.646       162.187    
   7  0.690986     -0.369635      -2.23797       2.23797       155.551       157.789    
   8  0.976315     -0.239695E-01 -0.145124      0.145124       155.446       155.591    
   9  0.983892     -0.162393E-01 -0.983217E-01  0.983217E-01   154.957       155.055    
  10  0.858769     -0.152255     -0.921834      0.921834       155.616       156.538    
  11  0.968889     -0.316048E-01 -0.191353      0.191353       155.109       155.300    
  12  0.364921      -1.00807      -6.10343       6.10343       154.726       160.830    
  13  0.540930     -0.614466      -3.72031       3.72031       156.868       160.589    
  14  0.812278E-01  -2.51050      -15.1999       15.1999       157.121       172.321    
  15  0.919841     -0.835539E-01 -0.505881      0.505881       156.586       157.092    
  16  0.275462      -1.28930      -7.80615       7.80615       156.426       164.232    
  17  0.704362     -0.350463      -2.12190       2.12190       158.526       160.648    
  18  0.896809     -0.108913     -0.659418      0.659418       150.536       151.195    
  19  0.166873      -1.79052      -10.8408       10.8408       156.606       167.447    
  20  0.927791E-02  -4.68012      -28.3360       28.3360       155.841       184.177    
  21  0.906733     -0.979074E-01 -0.592785      0.592785       158.974       159.566    
  22  0.575421     -0.552654      -3.34607       3.34607       155.176       158.522    
  23  0.975069     -0.252469E-01 -0.152859      0.152859       158.046       158.199    
  24  0.610094     -0.494143      -2.99181       2.99181       157.599       160.591    
  25  0.823028     -0.194765      -1.17921       1.17921       158.490       159.669    
  26  0.709022     -0.343869      -2.08197       2.08197       159.336       161.418    
  27  0.956893     -0.440633E-01 -0.266784      0.266784       158.917       159.184    
  28  0.897850E-01  -2.41034      -14.5935       14.5935       158.812       173.405    
  29  0.836996     -0.177936      -1.07732       1.07732       162.340       163.418    
  30  0.688664     -0.373001      -2.25835       2.25835       157.046       159.305    
  31  0.587454     -0.531957      -3.22076       3.22076       161.872       165.093    
  32  0.880970     -0.126731     -0.767300      0.767300       159.789       160.557    
  33  0.506724     -0.679789      -4.11581       4.11581       160.049       164.165    
  34  0.802262     -0.220320      -1.33394       1.33394       158.663       159.996    
  35  0.764787E-01  -2.57074      -15.5647       15.5647       161.708       177.273    
  36  0.907101     -0.975014E-01 -0.590327      0.590327       156.791       157.382    
  37  0.797350     -0.226461      -1.37112       1.37112       161.060       162.431    
  38  0.257375      -1.35722      -8.21735       8.21735       159.375       167.593    
  39  0.643190     -0.441315      -2.67196       2.67196       155.776       158.448    
  40  0.513768     -0.665984      -4.03223       4.03223       163.436       167.468    
  41  0.850264     -0.162208     -0.982098      0.982098       156.234       157.216    
  42  0.200819      -1.60535      -9.71968       9.71968       161.207       170.927    
  43  0.331940      -1.10280      -6.67696       6.67696       159.717       166.394    
  44  0.900490     -0.104816     -0.634614      0.634614       165.090       165.724    
  45  0.618957     -0.479719      -2.90448       2.90448       156.387       159.292    
  46  0.395756     -0.926956      -5.61230       5.61230       161.212       166.824    
  47  0.528166     -0.638345      -3.86489       3.86489       158.180       162.045    
  48  0.586635     -0.533352      -3.22920       3.22920       161.091       164.321    
  49  0.705559     -0.348765      -2.11161       2.11161       160.681       162.792    
  50  0.191018      -1.65539      -10.0226       10.0226       164.985       175.008    
  51  0.581133     -0.542775      -3.28626       3.28626       159.760       163.046    
  52  0.297529      -1.21224      -7.33958       7.33958       164.031       171.371    
  53  0.532486     -0.630198      -3.81556       3.81556       156.578       160.393    
  54  0.396084     -0.926129      -5.60729       5.60729       160.660       166.267    
  55  0.209334      -1.56382      -9.46823       9.46823       158.361       167.829    
  56  0.632068     -0.458758      -2.77757       2.77757       157.652       160.429    
  57  0.941424     -0.603613E-01 -0.365460      0.365460       161.050       161.415    
  58  0.875379     -0.133099     -0.805852      0.805852       160.717       161.523    
  59  0.497903     -0.697350      -4.22214       4.22214       160.210       164.433    
  60  0.840483     -0.173779      -1.05215       1.05215       160.604       161.656    
  61  0.230101      -1.46924      -8.89557       8.89557       162.078       170.974    
  62  0.213210      -1.54548      -9.35717       9.35717       161.444       170.801    
  63  0.412073     -0.886554      -5.36768       5.36768       160.975       166.342    
  64  0.264912      -1.32836      -8.04260       8.04260       160.242       168.285    
  65  0.234943      -1.44841      -8.76947       8.76947       158.348       167.117    
  66  0.957879     -0.430340E-01 -0.260551      0.260551       162.825       163.085    
  67  0.458250     -0.780340      -4.72460       4.72460       169.692       174.417    
  68  0.218142E-01  -3.82520      -23.1598       23.1598       162.816       185.976    
  69  0.340067E-01  -3.38120      -20.4716       20.4716       161.330       181.801    
  70  0.897872     -0.107728     -0.652244      0.652244       160.047       160.699    
  71  0.530797     -0.633375      -3.83480       3.83480       157.688       161.523    
  72  0.993119     -0.690470E-02 -0.418049E-01  0.418049E-01   164.924       164.965    
  73  0.512816     -0.667838      -4.04346       4.04346       152.040       156.084    
  74  0.394920     -0.929072      -5.62511       5.62511       160.107       165.733    
  75  0.477550E-01  -3.04167      -18.4159       18.4159       160.478       178.894    
loop,thermsimp(1:2)       57   7.21129       1.90574    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340        152.84          0.86          1.15         25.18          0.13          0.05         27.37
Just calling func    0   0         27.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    341        152.37          0.85          1.14         25.19          0.28          0.05         27.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    152.37       0.8385     -2.099      3.268     -102.6      1.145    
                      0.3285      1.323     -99.70      3.591     0.5979E-01
                       2.018     -1.247      1.530      6887.      2367.    
                     -0.2879      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5944.      327.5    
                     -0.5672     -6.351     -4.429     -9.377      6.053    
                      -15.12     -3.005      5828.      0.000      7530.    

                       2592.      7459.     -845.9      7530.      6314.    
                       8608.     0.2542E-01 0.1414      0.000     0.1392    
                     -0.2391    -0.9407E-01 0.9797E-01 0.4749E-01-0.4349E-01

                     -0.4015    -0.8245      0.000     0.4346E-01-0.7993E-01
                       0.000    -0.2102E-02 0.1906E-01-0.2026     0.2219E-01
                     -0.1797E-01 0.4609E-02-0.5064     -1.047      3723.    

                     -0.8647     -1.029     -2.311     -2.311    -0.1715    
                      0.3561      9.144      8.735    -0.1692E+05 -4.000    
                     -0.5274    -0.3343      9.281      8.830    -0.1616E+05

                      -4.000     0.2137    -0.8506      8.942      8.996    
                     -0.2164E+05 -7.000    -0.8147     -1.033      9.049    
                       8.767      6766.     -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       57
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       58
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      340     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -3.84153       3.84153       150.536       154.378    
   2  0.175946E-01  -4.04016      -24.4614       24.4614       152.717       177.179    
   3  0.419998     -0.867504      -5.25235       5.25235       154.957       160.209    
   4  0.448197E-01  -3.10511      -18.8000       18.8000       153.757       172.557    
   5  0.501784     -0.689586      -4.17513       4.17513       155.109       159.284    
   6  0.858173     -0.152949     -0.926039      0.926039       155.446       156.372    
   7  0.101932      -2.28345      -13.8253       13.8253       152.539       166.364    
   8  0.453268     -0.791273      -4.79080       4.79080       153.690       158.481    
   9  0.128092      -2.05501      -12.4421       12.4421       152.040       164.482    
  10  0.779644     -0.248918      -1.50708       1.50708       155.616       157.123    
  11  0.769943E-01  -2.56402      -15.5240       15.5240       156.586       172.110    
  12  0.140214      -1.96458      -11.8947       11.8947       156.234       168.129    
  13  0.571588     -0.559337      -3.38653       3.38653       156.791       160.178    
  14  0.455096     -0.787247      -4.76642       4.76642       155.551       160.317    
  15  0.594240     -0.520471      -3.15122       3.15122       158.046       161.198    
  16  0.833288     -0.182376      -1.10420       1.10420       155.776       156.880    
  17  0.807090E-01  -2.51691      -15.2387       15.2387       155.176       170.414    
  18  0.430313     -0.843242      -5.10545       5.10545       158.917       164.022    
  19  0.990463     -0.958277E-02 -0.580193E-01  0.580193E-01   156.387       156.445    
  20  0.907906     -0.966144E-01 -0.584956      0.584956       157.046       157.631    
  21  0.607469     -0.498455      -3.01792       3.01792       152.198       155.216    
  22  0.927102     -0.756916E-01 -0.458278      0.458278       158.974       159.432    
  23  0.379122     -0.969896      -5.87228       5.87228       158.490       164.362    
  24  0.183121E-01  -4.00019      -24.2193       24.2193       158.663       182.882    
  25  0.561966     -0.576313      -3.48931       3.48931       156.578       160.067    
  26  0.638772     -0.448208      -2.71369       2.71369       157.652       160.365    
  27  0.234202      -1.45157      -8.78860       8.78860       159.789       168.578    
  28  0.257221      -1.35782      -8.22097       8.22097       156.868       165.089    
  29  0.688379     -0.373416      -2.26086       2.26086       157.599       159.860    
  30  0.360237E-01  -3.32358      -20.1228       20.1228       158.526       178.648    
  31  0.849177     -0.163487     -0.989841      0.989841       160.047       161.037    
  32  0.324868E-01  -3.42692      -20.7485       20.7485       154.726       175.475    
  33  0.216483E-01  -3.83283      -23.2060       23.2060       161.050       184.256    
  34  0.794095     -0.230552      -1.39589       1.39589       159.336       160.732    
  35  0.453180     -0.791465      -4.79196       4.79196       160.717       165.509    
  36  0.286278      -1.25079      -7.57298       7.57298       157.688       165.261    
  37  0.931500     -0.709590E-01 -0.429625      0.429625       160.604       161.034    
  38  0.483424     -0.726861      -4.40082       4.40082       158.180       162.581    
  39  0.782276     -0.245547      -1.48668       1.48668       154.646       156.132    
  40  0.976661     -0.236156E-01 -0.142982      0.142982       161.060       161.203    
  41  0.707981     -0.345338      -2.09086       2.09086       160.681       162.772    
  42  0.101993      -2.28285      -13.8216       13.8216       159.760       173.581    
  43  0.690974E-01  -2.67224      -16.1792       16.1792       162.825       179.004    
  44  0.767576E-01  -2.56710      -15.5426       15.5426       162.340       177.883    
  45  0.584825     -0.536443      -3.24792       3.24792       160.049       163.297    
  46  0.588828     -0.529621      -3.20662       3.20662       156.426       159.633    
  47  0.894562     -0.111421     -0.674603      0.674603       161.091       161.766    
  48  0.260723      -1.34430      -8.13911       8.13911       160.210       168.349    
  49  0.773456E-01  -2.55947      -15.4964       15.4964       164.924       180.420    
  50  0.848651E-01  -2.46669      -14.9347       14.9347       161.872       176.807    
  51  0.992803     -0.722305E-02 -0.437323E-01  0.437323E-01   165.090       165.133    
  52  0.529202     -0.636386      -3.85303       3.85303       160.107       163.960    
  53  0.540374     -0.615494      -3.72654       3.72654       160.660       164.386    
  54  0.185914      -1.68247      -10.1866       10.1866       160.975       171.161    
  55  0.764153     -0.268988      -1.62860       1.62860       159.717       161.346    
  56  0.931974E-01  -2.37304      -14.3677       14.3677       161.212       175.579    
  57  0.753946     -0.282434      -1.71001       1.71001       158.348       160.058    
  58  0.279731      -1.27393      -7.71304       7.71304       156.606       164.319    
  59  0.790083     -0.235617      -1.42656       1.42656       163.436       164.862    
  60  0.179541      -1.71735      -10.3978       10.3978       159.375       169.773    
  61  0.424504     -0.856835      -5.18775       5.18775       158.361       163.549    
  62  0.359861      -1.02204      -6.18797       6.18797       160.242       166.430    
  63  0.234475      -1.45041      -8.78156       8.78156       161.444       170.226    
  64  0.320303      -1.13849      -6.89303       6.89303       161.207       168.100    
  65  0.558182     -0.583071      -3.53023       3.53023       162.078       165.608    
  66  0.460702     -0.775003      -4.69229       4.69229       164.031       168.723    
  67  0.627136E-01  -2.76918      -16.7661       16.7661       157.121       173.887    
  68  0.673665     -0.395022      -2.39168       2.39168       158.812       161.203    
  69  0.540500     -0.615261      -3.72513       3.72513       169.692       173.417    
  70  0.277195      -1.28303      -7.76819       7.76819       164.985       172.754    
  71  0.248535      -1.39217      -8.42897       8.42897       161.708       170.137    
  72  0.493876     -0.705472      -4.27131       4.27131       160.478       164.749    
  73  0.539055     -0.617938      -3.74134       3.74134       161.330       165.071    
  74  0.434355     -0.833893      -5.04885       5.04885       155.841       160.890    
  75  0.221666      -1.50658      -9.12167       9.12167       152.374       161.496    
loop,thermsimp(1:2)       58   3.84153       24.4614    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342        154.73          0.87          1.15         25.19          0.13          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    343        154.06          0.84          1.13         25.26          0.41          0.05         27.70
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    154.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       58
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       59
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      342     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.330222      0.330222       150.536       150.866    
   2  0.224221      -1.49512      -9.05229       9.05229       152.198       161.250    
   3  0.699642     -0.357186      -2.16260       2.16260       154.646       156.808    
   4  0.490916     -0.711482      -4.30770       4.30770       155.446       159.754    
   5  0.204251      -1.58840      -9.61706       9.61706       156.387       166.004    
   6  0.356522      -1.03136      -6.24441       6.24441       155.776       162.020    
   7  0.745938     -0.293113      -1.77466       1.77466       155.616       157.391    
   8  0.451533     -0.795107      -4.81401       4.81401       157.046       161.860    
   9  0.101038      -2.29226      -13.8786       13.8786       153.690       167.569    
  10  0.826978     -0.189977      -1.15023       1.15023       155.109       156.259    
  11  0.212337      -1.54958      -9.38201       9.38201       158.974       168.356    
  12  0.490540     -0.712248      -4.31234       4.31234       156.426       160.739    
  13  0.672078     -0.397381      -2.40596       2.40596       157.599       160.005    
  14  0.690580     -0.370223      -2.24153       2.24153       158.348       160.589    
  15  0.513190     -0.667108      -4.03904       4.03904       156.578       160.617    
  16  0.268393      -1.31530      -7.96357       7.96357       156.791       164.755    
  17  0.896898     -0.108813     -0.658813      0.658813       154.957       155.615    
  18  0.911953     -0.921674E-01 -0.558032      0.558032       155.551       156.109    
  19  0.355703      -1.03366      -6.25833       6.25833       157.652       163.910    
  20  0.293818      -1.22479      -7.41557       7.41557       159.336       166.752    
  21  0.713392     -0.337724      -2.04477       2.04477       155.841       157.886    
  22  0.660627     -0.414565      -2.51000       2.51000       160.604       163.114    
  23  0.795097     -0.229291      -1.38825       1.38825       160.047       161.435    
  24  0.919484     -0.839428E-01 -0.508236      0.508236       158.046       158.555    
  25  0.976382     -0.239014E-01 -0.144712      0.144712       161.060       161.205    
  26  0.922195     -0.809991E-01 -0.490413      0.490413       158.812       159.302    
  27  0.436062     -0.829970      -5.02509       5.02509       159.717       164.742    
  28  0.271848      -1.30251      -7.88612       7.88612       152.374       160.260    
  29  0.389360     -0.943252      -5.71096       5.71096       161.091       166.802    
  30  0.314178E-01  -3.46038      -20.9510       20.9510       158.180       179.131    
  31  0.545460     -0.606126      -3.66982       3.66982       160.681       164.351    
  32  0.925479E-01  -2.38003      -14.4100       14.4100       160.049       174.459    
  33  0.971973     -0.284273E-01 -0.172114      0.172114       158.361       158.533    
  34  0.403500     -0.907578      -5.49497       5.49497       160.107       165.602    
  35  0.392926     -0.934133      -5.65575       5.65575       158.917       164.573    
  36  0.718758     -0.330230      -1.99939       1.99939       156.606       158.606    
  37  0.746082     -0.292920      -1.77350       1.77350       158.490       160.264    
  38  0.353478      -1.03993      -6.29633       6.29633       160.660       166.956    
  39  0.843229     -0.170517      -1.03240       1.03240       152.040       153.072    
  40  0.388011     -0.946720      -5.73196       5.73196       160.478       166.210    
  41  0.969569     -0.309034E-01 -0.187106      0.187106       163.436       163.623    
  42  0.441380E-01  -3.12043      -18.8928       18.8928       161.330       180.223    
  43  0.533000     -0.629233      -3.80972       3.80972       156.868       160.678    
  44  0.288396      -1.24342      -7.52835       7.52835       165.090       172.618    
  45  0.683115     -0.381092      -2.30734       2.30734       157.688       159.996    
  46  0.339511      -1.08025      -6.54043       6.54043       160.717       167.258    
  47  0.150420E-01  -4.19691      -25.4104       25.4104       162.078       187.489    
  48  0.141026      -1.95881      -11.8597       11.8597       152.539       164.398    
  49  0.421666     -0.863541      -5.22835       5.22835       160.242       165.470    
  50  0.953496     -0.476201E-01 -0.288318      0.288318       161.207       161.495    
  51  0.966647     -0.339215E-01 -0.205379      0.205379       156.234       156.439    
  52  0.365434      -1.00667      -6.09493       6.09493       160.210       166.305    
  53  0.314209      -1.15770      -7.00933       7.00933       159.789       166.799    
  54  0.612536     -0.490148      -2.96762       2.96762       164.031       166.999    
  55  0.962603     -0.381139E-01 -0.230762      0.230762       159.375       159.606    
  56  0.518973     -0.655904      -3.97120       3.97120       161.708       165.679    
  57  0.963657     -0.370202E-01 -0.224140      0.224140       161.444       161.668    
  58  0.423866     -0.858338      -5.19685       5.19685       155.176       160.372    
  59  0.195959      -1.62985      -9.86801       9.86801       160.975       170.843    
  60  0.108838      -2.21789      -13.4283       13.4283       156.586       170.015    
  61  0.196446      -1.62737      -9.85297       9.85297       153.757       163.610    
  62  0.950303     -0.509747E-01 -0.308629      0.308629       164.985       165.294    
  63  0.363538      -1.01187      -6.12643       6.12643       169.692       175.819    
  64  0.834223     -0.181254      -1.09741       1.09741       159.760       160.857    
  65  0.529644     -0.635549      -3.84796       3.84796       157.121       160.969    
  66  0.944564     -0.570321E-01 -0.345304      0.345304       154.726       155.072    
  67  0.534482     -0.626456      -3.79291       3.79291       161.212       165.005    
  68  0.238252      -1.43443      -8.68481       8.68481       161.872       170.557    
  69  0.335731      -1.09145      -6.60821       6.60821       152.717       159.325    
  70  0.396637     -0.924734      -5.59884       5.59884       162.340       167.939    
  71  0.766416     -0.266030      -1.61069       1.61069       158.526       160.136    
  72  0.667108     -0.404804      -2.45090       2.45090       162.825       165.276    
  73  0.745469     -0.293741      -1.77847       1.77847       164.924       166.702    
  74  0.934886     -0.673307E-01 -0.407657      0.407657       158.663       159.070    
  75  0.135548      -1.99843      -12.0996       12.0996       154.062       166.161    
loop,thermsimp(1:2)       59  0.330222       9.05229    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344        153.57          0.87          1.15         25.17          0.40          0.05         27.63
Just calling func    0   0         27.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    345        153.70          0.87          1.14         25.13          0.27          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       59
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       60
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      344     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -6.40619       6.40619       150.536       156.942    
   2  0.605757     -0.501276      -3.03500       3.03500       152.040       155.075    
   3  0.690633     -0.370146      -2.24107       2.24107       154.726       156.967    
   4  0.400665     -0.914628      -5.53766       5.53766       154.957       160.494    
   5  0.862165     -0.148309     -0.897943      0.897943       155.551       156.449    
   6  0.874011     -0.134662     -0.815318      0.815318       155.109       155.924    
   7  0.389525     -0.942826      -5.70839       5.70839       156.234       161.942    
   8  0.102225E-01  -4.58317      -27.7490       27.7490       154.646       182.395    
   9  0.102697      -2.27597      -13.7800       13.7800       155.616       169.396    
  10  0.818271     -0.200561      -1.21431       1.21431       155.841       157.056    
  11  0.888768     -0.117920     -0.713950      0.713950       158.361       159.075    
  12  0.539210     -0.617651      -3.73960       3.73960       158.046       161.786    
  13  0.317914      -1.14597      -6.93836       6.93836       156.606       163.545    
  14  0.437422     -0.826857      -5.00624       5.00624       158.663       163.669    
  15  0.925263     -0.776773E-01 -0.470301      0.470301       158.812       159.282    
  16  0.422436     -0.861717      -5.21731       5.21731       152.717       157.935    
  17  0.965248     -0.353697E-01 -0.214148      0.214148       159.375       159.590    
  18  0.771278     -0.259706      -1.57240       1.57240       155.446       157.018    
  19  0.902488     -0.102600     -0.621197      0.621197       157.688       158.310    
  20  0.512816     -0.667839      -4.04346       4.04346       157.599       161.642    
  21  0.915966     -0.877758E-01 -0.531442      0.531442       158.526       159.057    
  22  0.612605     -0.490035      -2.96694       2.96694       152.374       155.341    
  23  0.323528      -1.12847      -6.83237       6.83237       158.490       165.322    
  24  0.206646      -1.57675      -9.54650       9.54650       155.176       164.722    
  25  0.481057     -0.731769      -4.43053       4.43053       158.348       162.778    
  26  0.287887E-01  -3.54777      -21.4802       21.4802       156.578       178.058    
  27  0.996968     -0.303648E-02 -0.183845E-01  0.183845E-01   156.868       156.887    
  28  0.132770      -2.01914      -12.2250       12.2250       156.426       168.651    
  29  0.716038     -0.334023      -2.02235       2.02235       159.760       161.782    
  30  0.229552      -1.47162      -8.91002       8.91002       157.121       166.031    
  31  0.236358      -1.44241      -8.73312       8.73312       161.060       169.793    
  32  0.542780     -0.611051      -3.69963       3.69963       152.198       155.898    
  33  0.875156     -0.133353     -0.807390      0.807390       160.047       160.854    
  34  0.988730     -0.113343E-01 -0.686242E-01  0.686242E-01   161.207       161.276    
  35  0.244332      -1.40923      -8.53224       8.53224       161.444       169.977    
  36  0.659246     -0.416659      -2.52268       2.52268       157.046       159.569    
  37  0.457872     -0.781166      -4.72961       4.72961       155.776       160.505    
  38  0.380652E-01  -3.26846      -19.7890       19.7890       160.604       180.393    
  39  0.358843      -1.02487      -6.20512       6.20512       153.757       159.963    
  40  0.846233     -0.166960      -1.01087       1.01087       163.436       164.447    
  41  0.359308      -1.02358      -6.19729       6.19729       157.652       163.849    
  42  0.533329     -0.628617      -3.80599       3.80599       160.681       164.487    
  43  0.645289     -0.438058      -2.65224       2.65224       152.539       155.191    
  44  0.311850      -1.16523      -7.05495       7.05495       158.917       165.972    
  45  0.270084      -1.30902      -7.92553       7.92553       159.717       167.643    
  46  0.530313     -0.634287      -3.84032       3.84032       156.791       160.632    
  47  0.975874     -0.244213E-01 -0.147860      0.147860       161.212       161.360    
  48  0.313811      -1.15896      -7.01701       7.01701       162.825       169.842    
  49  0.932688     -0.696844E-01 -0.421907      0.421907       164.985       165.407    
  50  0.357359      -1.02901      -6.23022       6.23022       160.242       166.472    
  51  0.545837     -0.605435      -3.66563       3.66563       160.107       163.773    
  52  0.954982     -0.460626E-01 -0.278888      0.278888       161.708       161.987    
  53  0.470912     -0.753083      -4.55958       4.55958       156.387       160.947    
  54  0.719568     -0.329104      -1.99257       1.99257       154.062       156.054    
  55  0.859620     -0.151265     -0.915839      0.915839       160.478       161.394    
  56  0.544817     -0.607304      -3.67695       3.67695       160.210       163.887    
  57  0.505571E-02  -5.28724      -32.0118       32.0118       164.924       196.935    
  58  0.412350     -0.885884      -5.36362       5.36362       159.336       164.700    
  59  0.335424      -1.09236      -6.61375       6.61375       159.789       166.403    
  60  0.908603     -0.958472E-01 -0.580312      0.580312       161.091       161.672    
  61  0.434554     -0.833434      -5.04607       5.04607       160.660       165.706    
  62  0.801863     -0.220817      -1.33695       1.33695       164.031       165.368    
  63  0.567796     -0.565993      -3.42683       3.42683       160.717       164.144    
  64  0.818165     -0.200691      -1.21510       1.21510       153.690       154.905    
  65  0.490355     -0.712626      -4.31463       4.31463       162.340       166.655    
  66  0.971730     -0.286771E-01 -0.173627      0.173627       158.974       159.147    
  67  0.373659     -0.984411      -5.96016       5.96016       156.586       162.547    
  68  0.179333      -1.71851      -10.4048       10.4048       161.872       172.277    
  69  0.352089      -1.04387      -6.32017       6.32017       160.975       167.295    
  70  0.247178      -1.39765      -8.46212       8.46212       165.090       173.552    
  71  0.304805      -1.18808      -7.19330       7.19330       160.049       167.242    
  72  0.561911     -0.576412      -3.48991       3.48991       169.692       173.182    
  73  0.193340      -1.64331      -9.94947       9.94947       158.180       168.129    
  74  0.254418      -1.36878      -8.28732       8.28732       161.330       169.617    
  75  0.121007      -2.11191      -12.7866       12.7866       153.572       166.359    
loop,thermsimp(1:2)       60   6.40619       3.03500    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346        153.56          0.85          1.15         25.21          0.18          0.06         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    347        149.28          0.85          1.14         25.24          0.23          0.06         27.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       60
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       61
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      346     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -2.47993       2.47993       153.690       156.170    
   2  0.718953     -0.329960      -1.99776       1.99776       152.040       154.038    
   3  0.454275     -0.789053      -4.77736       4.77736       152.539       157.316    
   4  0.253407E-01  -3.67534      -22.2525       22.2525       152.374       174.626    
   5  0.611947     -0.491110      -2.97345       2.97345       152.198       155.172    
   6  0.234016      -1.45237      -8.79342       8.79342       155.109       163.902    
   7  0.359481E-01  -3.32568      -20.1355       20.1355       154.062       174.197    
   8  0.222118E-01  -3.80713      -23.0505       23.0505       155.551       178.601    
   9  0.905838E-01  -2.40148      -14.5399       14.5399       156.868       171.408    
  10  0.791683     -0.233594      -1.41431       1.41431       150.536       151.950    
  11  0.557734     -0.583873      -3.53509       3.53509       154.726       158.262    
  12  0.936048E-01  -2.36867      -14.3412       14.3412       155.446       169.787    
  13  0.431059     -0.841510      -5.09496       5.09496       155.841       160.936    
  14  0.225758      -1.48829      -9.01094       9.01094       152.717       161.728    
  15  0.275181E-01  -3.59291      -21.7535       21.7535       157.688       179.442    
  16  0.802517     -0.220002      -1.33201       1.33201       158.526       159.858    
  17  0.423872     -0.858323      -5.19676       5.19676       158.361       163.558    
  18  0.300971      -1.20074      -7.26995       7.26995       158.974       166.244    
  19  0.479556     -0.734895      -4.44946       4.44946       158.812       163.261    
  20  0.621838     -0.475076      -2.87637       2.87637       157.046       159.923    
  21  0.397654     -0.922172      -5.58333       5.58333       159.375       164.959    
  22  0.664976     -0.408004      -2.47028       2.47028       153.757       156.228    
  23  0.288358      -1.24355      -7.52914       7.52914       154.957       162.486    
  24  0.442017     -0.816406      -4.94297       4.94297       155.776       160.719    
  25  0.150763E-01  -4.19463      -25.3966       25.3966       156.791       182.188    
  26  0.600886     -0.509350      -3.08389       3.08389       160.047       163.131    
  27  0.162927      -1.81446      -10.9857       10.9857       156.387       167.373    
  28  0.932743     -0.696251E-01 -0.421549      0.421549       161.207       161.629    
  29  0.997186     -0.281799E-02 -0.170617E-01  0.170617E-01   161.212       161.229    
  30  0.418339     -0.871463      -5.27631       5.27631       160.478       165.754    
  31  0.694800     -0.364132      -2.20465       2.20465       157.599       159.804    
  32  0.852711     -0.159334     -0.964698      0.964698       161.091       162.056    
  33  0.624847     -0.470249      -2.84714       2.84714       159.760       162.607    
  34  0.427649     -0.849453      -5.14305       5.14305       158.046       163.189    
  35  0.149871      -1.89798      -11.4914       11.4914       156.234       167.725    
  36  0.563430     -0.573713      -3.47357       3.47357       161.708       165.182    
  37  0.860100     -0.150706     -0.912457      0.912457       156.586       157.499    
  38  0.867090E-01  -2.44520      -14.8046       14.8046       158.348       173.152    
  39  0.847848     -0.165054     -0.999325      0.999325       156.606       157.606    
  40  0.782599E-01  -2.54772      -15.4253       15.4253       158.663       174.088    
  41  0.697889E-01  -2.66228      -16.1189       16.1189       160.107       176.226    
  42  0.422765     -0.860939      -5.21259       5.21259       157.652       162.864    
  43  0.158365      -1.84286      -11.1577       11.1577       160.210       171.368    
  44  0.518935     -0.655976      -3.97164       3.97164       160.717       164.689    
  45  0.430406     -0.843027      -5.10415       5.10415       163.436       168.540    
  46  0.639805     -0.446592      -2.70391       2.70391       160.681       163.385    
  47  0.830453E-01  -2.48837      -15.0659       15.0659       159.336       174.402    
  48  0.639384     -0.447250      -2.70789       2.70789       155.176       157.883    
  49  0.833791     -0.181773      -1.10055       1.10055       158.490       159.591    
  50  0.453972     -0.789720      -4.78140       4.78140       164.031       168.812    
  51  0.542088     -0.612327      -3.70736       3.70736       164.985       168.693    
  52  0.271321      -1.30445      -7.89787       7.89787       160.660       168.558    
  53  0.176790      -1.73279      -10.4913       10.4913       158.917       169.408    
  54  0.511778     -0.669865      -4.05573       4.05573       157.121       161.177    
  55  0.632948     -0.457366      -2.76915       2.76915       153.572       156.341    
  56  0.252444      -1.37657      -8.33448       8.33448       159.789       168.124    
  57  0.726388     -0.319671      -1.93546       1.93546       160.242       162.177    
  58  0.483977     -0.725718      -4.39389       4.39389       162.340       166.734    
  59  0.497846     -0.697465      -4.22284       4.22284       160.049       164.272    
  60  0.369093     -0.996706      -6.03460       6.03460       160.975       167.009    
  61  0.225129      -1.49108      -9.02783       9.02783       159.717       168.745    
  62  0.908331E-01  -2.39873      -14.5232       14.5232       158.180       172.703    
  63  0.196370      -1.62776      -9.85533       9.85533       156.426       166.282    
  64  0.448748     -0.801293      -4.85146       4.85146       155.616       160.467    
  65  0.175426      -1.74054      -10.5382       10.5382       161.330       171.868    
  66  0.399277     -0.918099      -5.55868       5.55868       161.060       166.619    
  67  0.417464     -0.873557      -5.28899       5.28899       162.825       168.114    
  68  0.593993     -0.520889      -3.15374       3.15374       161.444       164.598    
  69  0.718485     -0.330610      -2.00170       2.00170       161.872       163.874    
  70  0.294519      -1.22241      -7.40115       7.40115       169.692       177.093    
  71  0.235197      -1.44733      -8.76295       8.76295       165.090       173.853    
  72  0.190064E-01  -3.96298      -23.9941       23.9941       156.578       180.572    
  73  0.295859      -1.21787      -7.37367       7.37367       160.604       167.978    
  74  0.325136      -1.12351      -6.80235       6.80235       154.646       161.448    
  75  0.384714     -0.955255      -5.78364       5.78364       149.281       155.064    
loop,thermsimp(1:2)       61   2.47993       1.99776    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348        157.85          0.87          1.15         25.17          0.15          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    157.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       61
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       62
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      347     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.857776E-01  0.857776E-01   150.536       150.622    
   2  0.420912     -0.865330      -5.23918       5.23918       152.040       157.279    
   3  0.617210     -0.482545      -2.92159       2.92159       149.281       152.202    
   4  0.787846     -0.238453      -1.44373       1.44373       152.198       153.642    
   5  0.608770     -0.496315      -3.00496       3.00496       153.690       156.695    
   6  0.925975     -0.769083E-01 -0.465645      0.465645       153.757       154.223    
   7  0.545822     -0.605462      -3.66580       3.66580       153.572       157.238    
   8  0.240142      -1.42653      -8.63697       8.63697       152.539       161.176    
   9  0.800257     -0.222822      -1.34909       1.34909       156.586       157.936    
  10  0.250149      -1.38570      -8.38978       8.38978       156.606       164.996    
  11  0.814044     -0.205741      -1.24567       1.24567       155.176       156.421    
  12  0.897552     -0.108084     -0.654399      0.654399       154.726       155.381    
  13  0.807530     -0.213775      -1.29431       1.29431       158.490       159.784    
  14  0.369031     -0.996874      -6.03562       6.03562       157.599       163.635    
  15  0.892620     -0.113594     -0.687761      0.687761       158.526       159.213    
  16  0.992736     -0.729054E-02 -0.441409E-01  0.441409E-01   157.046       157.090    
  17  0.264259      -1.33083      -8.05755       8.05755       155.616       163.673    
  18  0.164586      -1.80432      -10.9244       10.9244       155.776       166.700    
  19  0.594739     -0.519633      -3.14614       3.14614       155.841       158.987    
  20  0.766319     -0.266156      -1.61146       1.61146       157.121       158.732    
  21  0.392663     -0.934804      -5.65981       5.65981       161.212       166.872    
  22  0.900399     -0.104917     -0.635227      0.635227       154.646       155.281    
  23  0.853164E-01  -2.46139      -14.9026       14.9026       161.207       176.110    
  24  0.753181     -0.283450      -1.71616       1.71616       152.717       154.433    
  25  0.801958     -0.220699      -1.33623       1.33623       161.091       162.428    
  26  0.840206     -0.174108      -1.05415       1.05415       160.242       161.296    
  27  0.899787     -0.105597     -0.639344      0.639344       154.957       155.596    
  28  0.555629     -0.587654      -3.55798       3.55798       159.760       163.318    
  29  0.117481E-01  -4.44406      -26.9068       26.9068       157.652       184.558    
  30  0.228476      -1.47632      -8.93846       8.93846       160.047       168.985    
  31  0.121877      -2.10474      -12.7433       12.7433       158.046       170.790    
  32  0.475375     -0.743652      -4.50247       4.50247       158.812       163.314    
  33  0.208734      -1.56669      -9.48562       9.48562       160.681       170.166    
  34  0.680231     -0.385322      -2.33295       2.33295       158.361       160.694    
  35  0.211647      -1.55284      -9.40172       9.40172       161.872       171.274    
  36  0.982763     -0.173870E-01 -0.105271      0.105271       155.109       155.214    
  37  0.819904     -0.198568      -1.20224       1.20224       160.049       161.251    
  38  0.282339      -1.26465      -7.65687       7.65687       161.444       169.101    
  39  0.391986     -0.936529      -5.67026       5.67026       160.717       166.387    
  40  0.218050      -1.52303      -9.22127       9.22127       159.375       168.597    
  41  0.236244      -1.44289      -8.73605       8.73605       161.708       170.444    
  42  0.544673     -0.607570      -3.67856       3.67856       160.478       164.157    
  43  0.721937     -0.325818      -1.97268       1.97268       158.974       160.946    
  44  0.649728     -0.431202      -2.61073       2.61073       156.426       159.037    
  45  0.641823     -0.443443      -2.68484       2.68484       161.060       163.745    
  46  0.597293     -0.515347      -3.12019       3.12019       162.340       165.460    
  47  0.467405     -0.760558      -4.60483       4.60483       160.975       165.580    
  48  0.676900     -0.390232      -2.36268       2.36268       156.387       158.750    
  49  0.925913     -0.769750E-01 -0.466049      0.466049       156.234       156.700    
  50  0.692551     -0.367374      -2.22428       2.22428       160.604       162.828    
  51  0.161390      -1.82393      -11.0431       11.0431       162.825       173.868    
  52  0.513279     -0.666936      -4.03800       4.03800       159.789       163.827    
  53  0.379540     -0.968796      -5.86562       5.86562       163.436       169.301    
  54  0.557165     -0.584894      -3.54127       3.54127       160.660       164.201    
  55  0.459054     -0.778587      -4.71399       4.71399       164.985       169.699    
  56  0.466253     -0.763026      -4.61978       4.61978       159.717       164.337    
  57  0.635692E-01  -2.75563      -16.6841       16.6841       164.031       180.715    
  58  0.591279     -0.525467      -3.18146       3.18146       158.917       162.098    
  59  0.344168      -1.06663      -6.45794       6.45794       155.446       161.904    
  60  0.119291      -2.12619      -12.8731       12.8731       160.210       173.083    
  61  0.399057E-01  -3.22124      -19.5031       19.5031       156.868       176.371    
  62  0.737545     -0.304428      -1.84318       1.84318       161.330       163.173    
  63  0.855773     -0.155750     -0.942996      0.942996       158.180       159.123    
  64  0.604062E-01  -2.80666      -16.9931       16.9931       158.348       175.341    
  65  0.659236     -0.416674      -2.52277       2.52277       165.090       167.613    
  66  0.738818     -0.302704      -1.83273       1.83273       158.663       160.495    
  67  0.577372     -0.549268      -3.32557       3.32557       154.062       157.387    
  68  0.219220      -1.51768      -9.18886       9.18886       159.336       168.525    
  69  0.318915      -1.14283      -6.91933       6.91933       152.374       159.293    
  70  0.599810     -0.511142      -3.09473       3.09473       160.107       163.202    
  71  0.863673     -0.146561     -0.887363      0.887363       169.692       170.580    
  72  0.103344      -2.26969      -13.7419       13.7419       155.551       169.293    
  73  0.345925      -1.06153      -6.42711       6.42711       157.688       164.116    
  74  0.583617     -0.538510      -3.26044       3.26044       156.578       159.838    
  75  0.296210      -1.21669      -7.36648       7.36648       157.855       165.221    
loop,thermsimp(1:2)       62  0.857776E-01   5.23918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349        157.06          0.87          1.15         25.25          0.16          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    157.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       62
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       63
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      348     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.916144E-01  0.916144E-01   150.536       150.628    
   2  0.760415     -0.273890      -1.65828       1.65828       149.281       150.939    
   3  0.328612      -1.11288      -6.73796       6.73796       152.198       158.936    
   4  0.164880      -1.80254      -10.9136       10.9136       153.757       164.671    
   5  0.706606     -0.347282      -2.10263       2.10263       152.717       154.820    
   6  0.832070     -0.183839      -1.11306       1.11306       155.109       156.222    
   7  0.231505      -1.46315      -8.85873       8.85873       154.646       163.504    
   8  0.802671E-01  -2.52240      -15.2720       15.2720       154.726       169.998    
   9  0.116349      -2.15116      -13.0243       13.0243       154.957       167.981    
  10  0.874222     -0.134421     -0.813860      0.813860       155.176       155.989    
  11  0.729333     -0.315625      -1.91097       1.91097       153.690       155.601    
  12  0.301675      -1.19841      -7.25580       7.25580       156.234       163.490    
  13  0.496896     -0.699375      -4.23440       4.23440       157.046       161.281    
  14  0.692174     -0.367918      -2.22758       2.22758       153.572       155.800    
  15  0.717718     -0.331678      -2.00816       2.00816       152.040       154.048    
  16  0.867334E-01  -2.44492      -14.8029       14.8029       154.062       168.865    
  17  0.762934     -0.270584      -1.63826       1.63826       156.586       158.225    
  18  0.966741     -0.338246E-01 -0.204793      0.204793       157.121       157.326    
  19  0.375386     -0.979801      -5.93225       5.93225       156.387       162.319    
  20  0.878716     -0.129293     -0.782811      0.782811       155.841       156.624    
  21  0.238969      -1.43142      -8.66661       8.66661       156.426       165.093    
  22  0.939578     -0.623249E-01 -0.377349      0.377349       158.180       158.557    
  23  0.694828     -0.364091      -2.20440       2.20440       158.526       160.730    
  24  0.869149     -0.140241     -0.849093      0.849093       152.374       153.223    
  25  0.310010      -1.17115      -7.09079       7.09079       158.490       165.581    
  26  0.831753     -0.184219      -1.11537       1.11537       156.578       157.693    
  27  0.621050     -0.476344      -2.88405       2.88405       158.663       161.547    
  28  0.902274     -0.102837     -0.622633      0.622633       158.361       158.984    
  29  0.341345      -1.07486      -6.50781       6.50781       158.974       165.481    
  30  0.718647     -0.330385      -2.00033       2.00033       152.539       154.539    
  31  0.489532     -0.714305      -4.32479       4.32479       160.049       164.374    
  32  0.387793     -0.947282      -5.73537       5.73537       160.242       165.977    
  33  0.576785     -0.550285      -3.33173       3.33173       155.446       158.778    
  34  0.454048     -0.789552      -4.78038       4.78038       158.917       163.697    
  35  0.532728     -0.629744      -3.81282       3.81282       161.091       164.904    
  36  0.459832     -0.776895      -4.70375       4.70375       160.604       165.308    
  37  0.784910     -0.242187      -1.46633       1.46633       161.330       162.796    
  38  0.842297     -0.171622      -1.03909       1.03909       160.107       161.147    
  39  0.967556     -0.329823E-01 -0.199693      0.199693       158.812       159.011    
  40  0.126414      -2.06819      -12.5220       12.5220       159.760       172.282    
  41  0.407002     -0.898938      -5.44266       5.44266       157.599       163.042    
  42  0.903435     -0.101551     -0.614848      0.614848       155.616       156.231    
  43  0.430116     -0.843701      -5.10823       5.10823       161.060       166.168    
  44  0.675859     -0.391771      -2.37200       2.37200       159.789       162.161    
  45  0.444470     -0.810872      -4.90946       4.90946       157.688       162.598    
  46  0.728661     -0.316547      -1.91655       1.91655       160.478       162.395    
  47  0.143617      -1.94060      -11.7495       11.7495       160.660       172.409    
  48  0.729467E-01  -2.61803      -15.8510       15.8510       159.717       175.568    
  49  0.720547     -0.327745      -1.98435       1.98435       156.606       158.591    
  50  0.742905     -0.297187      -1.79933       1.79933       157.855       159.654    
  51  0.807330     -0.214023      -1.29581       1.29581       162.340       163.636    
  52  0.387442     -0.948190      -5.74086       5.74086       160.975       166.716    
  53  0.207045      -1.57482      -9.53482       9.53482       160.717       170.252    
  54  0.823983     -0.193606      -1.17220       1.17220       155.776       156.948    
  55  0.950173E-01  -2.35370      -14.2506       14.2506       161.212       175.462    
  56  0.662008     -0.412478      -2.49737       2.49737       165.090       167.587    
  57  0.640494E-01  -2.74810      -16.6385       16.6385       159.336       175.975    
  58  0.772515     -0.258104      -1.56271       1.56271       159.375       160.938    
  59  0.204175      -1.58878      -9.61934       9.61934       160.047       169.666    
  60  0.193223      -1.64391      -9.95312       9.95312       161.444       171.397    
  61  0.846602     -0.166525      -1.00823       1.00823       155.551       156.559    
  62  0.699262E-01  -2.66031      -16.1070       16.1070       163.436       179.543    
  63  0.581483     -0.542173      -3.28261       3.28261       164.985       168.268    
  64  0.497263     -0.698636      -4.22993       4.22993       160.681       164.911    
  65  0.912190     -0.919065E-01 -0.556452      0.556452       161.708       162.265    
  66  0.486665     -0.720179      -4.36036       4.36036       169.692       174.053    
  67  0.635633     -0.453135      -2.74352       2.74352       158.046       160.790    
  68  0.217422      -1.52591      -9.23872       9.23872       161.872       171.111    
  69  0.214720E-01  -3.84101      -23.2555       23.2555       160.210       183.466    
  70  0.256495      -1.36065      -8.23810       8.23810       162.825       171.063    
  71  0.838851     -0.175722      -1.06391       1.06391       158.348       159.412    
  72  0.319226      -1.14186      -6.91343       6.91343       161.207       168.120    
  73  0.779832     -0.248677      -1.50563       1.50563       156.868       158.374    
  74  0.133931      -2.01043      -12.1722       12.1722       164.031       176.203    
  75  0.761023     -0.273091      -1.65344       1.65344       157.065       158.718    
loop,thermsimp(1:2)       63  0.916144E-01   1.65828    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350        154.33          0.87          1.15         25.21          0.14          0.06         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    351        153.41          0.86          1.15         25.18          0.17          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       63
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       64
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      350     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.220032      0.220032       150.536       150.756    
   2  0.186231      -1.68077      -10.1763       10.1763       149.281       159.457    
   3  0.127308      -2.06115      -12.4793       12.4793       152.374       164.853    
   4  0.305661      -1.18528      -7.17633       7.17633       152.040       159.216    
   5  0.685804     -0.377164      -2.28356       2.28356       152.539       154.822    
   6  0.713250     -0.337923      -2.04597       2.04597       152.717       154.763    
   7  0.562604     -0.575180      -3.48245       3.48245       153.690       157.173    
   8  0.410540     -0.890283      -5.39026       5.39026       153.572       158.963    
   9  0.667633     -0.404017      -2.44614       2.44614       155.176       157.622    
  10  0.111237      -2.19609      -13.2963       13.2963       155.109       168.405    
  11  0.987129     -0.129550E-01 -0.784365E-01  0.784365E-01   155.616       155.694    
  12  0.525481     -0.643442      -3.89575       3.89575       155.551       159.447    
  13  0.740553     -0.300358      -1.81853       1.81853       155.841       157.660    
  14  0.456748E-01  -3.08621      -18.6856       18.6856       155.776       174.461    
  15  0.831796     -0.184168      -1.11506       1.11506       157.121       158.236    
  16  0.798422     -0.225118      -1.36299       1.36299       156.578       157.941    
  17  0.985535     -0.145708E-01 -0.882193E-01  0.882193E-01   156.586       156.675    
  18  0.323340      -1.12905      -6.83588       6.83588       156.868       163.704    
  19  0.745026     -0.294336      -1.78207       1.78207       158.180       159.962    
  20  0.711871     -0.339858      -2.05769       2.05769       156.606       158.664    
  21  0.232875      -1.45725      -8.82301       8.82301       157.065       165.888    
  22  0.118192      -2.13545      -12.9292       12.9292       155.446       168.375    
  23  0.310641      -1.16912      -7.07847       7.07847       152.198       159.277    
  24  0.220899      -1.51005      -9.14268       9.14268       158.361       167.504    
  25  0.487797     -0.717856      -4.34629       4.34629       158.812       163.158    
  26  0.278848      -1.27709      -7.73219       7.73219       158.348       166.080    
  27  0.159355      -1.83662      -11.1199       11.1199       157.855       168.975    
  28  0.473156     -0.748329      -4.53080       4.53080       158.526       163.056    
  29  0.358980      -1.02449      -6.20281       6.20281       158.046       164.249    
  30  0.873266     -0.135515     -0.820480      0.820480       159.375       160.196    
  31  0.168201      -1.78260      -10.7928       10.7928       160.107       170.900    
  32  0.492581     -0.708096      -4.28720       4.28720       157.046       161.333    
  33  0.878329     -0.129734     -0.785483      0.785483       158.663       159.448    
  34  0.266147      -1.32371      -8.01445       8.01445       159.789       167.804    
  35  0.510485     -0.672394      -4.07104       4.07104       161.708       165.779    
  36  0.810074     -0.210630      -1.27527       1.27527       156.387       157.662    
  37  0.950614     -0.506467E-01 -0.306643      0.306643       160.478       160.785    
  38  0.329006      -1.11168      -6.73072       6.73072       157.688       164.419    
  39  0.934893E-01  -2.36991      -14.3487       14.3487       161.330       175.678    
  40  0.686671     -0.375900      -2.27590       2.27590       157.599       159.875    
  41  0.888060     -0.118716     -0.718773      0.718773       156.234       156.953    
  42  0.749618     -0.288192      -1.74487       1.74487       154.646       156.390    
  43  0.433754     -0.835279      -5.05723       5.05723       162.340       167.397    
  44  0.630341     -0.461494      -2.79414       2.79414       158.917       161.711    
  45  0.569388     -0.563194      -3.40988       3.40988       160.049       163.459    
  46  0.965872     -0.347242E-01 -0.210239      0.210239       153.757       153.968    
  47  0.797995     -0.225653      -1.36623       1.36623       161.091       162.458    
  48  0.716091     -0.333948      -2.02190       2.02190       160.681       162.703    
  49  0.339849      -1.07925      -6.53439       6.53439       156.426       162.961    
  50  0.202757      -1.59575      -9.66153       9.66153       160.604       170.266    
  51  0.266068      -1.32400      -8.01624       8.01624       158.974       166.990    
  52  0.985546E-01  -2.31715      -14.0293       14.0293       158.490       172.519    
  53  0.751309     -0.285938      -1.73123       1.73123       160.242       161.973    
  54  0.846042     -0.167187      -1.01224       1.01224       161.060       162.072    
  55  0.714380     -0.336340      -2.03639       2.03639       160.975       163.011    
  56  0.873273     -0.135507     -0.820434      0.820434       165.090       165.910    
  57  0.373211     -0.985610      -5.96742       5.96742       154.957       160.924    
  58  0.618869     -0.479862      -2.90534       2.90534       161.207       164.112    
  59  0.529025     -0.636720      -3.85505       3.85505       164.985       168.840    
  60  0.659913E-01  -2.71823      -16.4577       16.4577       154.062       170.519    
  61  0.541361E-01  -2.91625      -17.6566       17.6566       160.047       177.704    
  62  0.785735E-01  -2.54372      -15.4011       15.4011       154.726       170.127    
  63  0.569382     -0.563203      -3.40994       3.40994       160.717       164.127    
  64  0.564569     -0.571693      -3.46134       3.46134       162.825       166.286    
  65  0.689424     -0.371899      -2.25168       2.25168       161.872       164.124    
  66  0.992491     -0.753783E-02 -0.456382E-01  0.456382E-01   161.444       161.490    
  67  0.922665     -0.804887E-01 -0.487323      0.487323       159.760       160.247    
  68  0.497573     -0.698012      -4.22615       4.22615       160.660       164.886    
  69  0.594717     -0.519669      -3.14636       3.14636       169.692       172.839    
  70  0.132266      -2.02294      -12.2480       12.2480       161.212       173.460    
  71  0.165174      -1.80075      -10.9028       10.9028       159.717       170.620    
  72  0.787265     -0.239190      -1.44819       1.44819       159.336       160.785    
  73  0.825773     -0.191435      -1.15905       1.15905       164.031       165.190    
  74  0.927368     -0.754049E-01 -0.456543      0.456543       163.436       163.892    
  75  0.366928      -1.00259      -6.07023       6.07023       153.409       159.480    
loop,thermsimp(1:2)       64  0.220032       10.1763    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352        155.21          0.87          1.15         25.20          0.18          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    155.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       64
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       65
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      351     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -5.18709       5.18709       150.536       155.723    
   2  0.350039      -1.04971      -6.35551       6.35551       153.757       160.113    
   3  0.872911     -0.135921     -0.822942      0.822942       152.717       153.540    
   4  0.829005     -0.187529      -1.13540       1.13540       152.539       153.674    
   5  0.201827      -1.60035      -9.68937       9.68937       155.616       165.305    
   6  0.735791     -0.306809      -1.85759       1.85759       154.646       156.503    
   7  0.985788     -0.143135E-01 -0.866616E-01  0.866616E-01   156.586       156.673    
   8  0.962727     -0.379858E-01 -0.229987      0.229987       156.234       156.464    
   9  0.796954     -0.226958      -1.37413       1.37413       153.690       155.064    
  10  0.563149     -0.574211      -3.47659       3.47659       155.176       158.652    
  11  0.776846     -0.252513      -1.52885       1.52885       155.841       157.370    
  12  0.921010     -0.822839E-01 -0.498192      0.498192       156.387       156.885    
  13  0.884938     -0.122238     -0.740097      0.740097       156.578       157.318    
  14  0.850974     -0.161373     -0.977041      0.977041       157.121       158.098    
  15  0.391065     -0.938882      -5.68450       5.68450       156.606       162.291    
  16  0.150921      -1.89100      -11.4491       11.4491       153.572       165.021    
  17  0.295162      -1.22023      -7.38794       7.38794       152.040       159.428    
  18  0.662567     -0.411634      -2.49226       2.49226       152.198       154.690    
  19  0.893994     -0.112056     -0.678448      0.678448       155.551       156.229    
  20  0.103282      -2.27029      -13.7456       13.7456       158.663       172.408    
  21  0.416341     -0.876251      -5.30530       5.30530       149.281       154.586    
  22  0.986101E-01  -2.31658      -14.0259       14.0259       153.409       167.435    
  23  0.617817E-01  -2.78415      -16.8568       16.8568       157.599       174.456    
  24  0.371945     -0.989010      -5.98801       5.98801       158.180       164.168    
  25  0.884755     -0.122444     -0.741345      0.741345       159.375       160.117    
  26  0.584237     -0.537449      -3.25401       3.25401       159.760       163.014    
  27  0.239981      -1.42719      -8.64102       8.64102       159.336       167.977    
  28  0.106477      -2.23982      -13.5611       13.5611       160.478       174.039    
  29  0.142954      -1.94523      -11.7775       11.7775       154.957       166.734    
  30  0.802284     -0.220292      -1.33377       1.33377       157.046       158.380    
  31  0.373571     -0.984648      -5.96160       5.96160       161.444       167.406    
  32  0.617091     -0.482739      -2.92277       2.92277       158.917       161.840    
  33  0.813617     -0.206266      -1.24885       1.24885       160.242       161.491    
  34  0.219787E-01  -3.81768      -23.1143       23.1143       161.060       184.174    
  35  0.398995     -0.918807      -5.56296       5.56296       161.091       166.654    
  36  0.906985     -0.976296E-01 -0.591103      0.591103       160.681       161.272    
  37  0.259146E-01  -3.65295      -22.1169       22.1169       156.426       178.543    
  38  0.347543      -1.05687      -6.39885       6.39885       160.975       167.374    
  39  0.879549     -0.128346     -0.777075      0.777075       158.526       159.303    
  40  0.618015     -0.481242      -2.91370       2.91370       158.812       161.725    
  41  0.173348      -1.75246      -10.6103       10.6103       160.049       170.659    
  42  0.324418      -1.12572      -6.81573       6.81573       156.868       163.684    
  43  0.426503     -0.852135      -5.15929       5.15929       163.436       168.595    
  44  0.672650     -0.396530      -2.40081       2.40081       161.207       163.608    
  45  0.500711     -0.691727      -4.18809       4.18809       161.872       166.060    
  46  0.457446     -0.782097      -4.73524       4.73524       160.717       165.452    
  47  0.408507     -0.895245      -5.42030       5.42030       158.046       163.467    
  48  0.649058     -0.432234      -2.61698       2.61698       157.688       160.305    
  49  0.275220      -1.29018      -7.81148       7.81148       152.374       160.185    
  50  0.706820     -0.346979      -2.10080       2.10080       160.660       162.761    
  51  0.596044     -0.517441      -3.13287       3.13287       164.031       167.164    
  52  0.362601      -1.01445      -6.14205       6.14205       161.708       167.850    
  53  0.934637     -0.675969E-01 -0.409268      0.409268       157.065       157.474    
  54  0.724055     -0.322888      -1.95494       1.95494       165.090       167.045    
  55  0.871040     -0.138067     -0.835932      0.835932       158.348       159.184    
  56  0.722457     -0.325097      -1.96831       1.96831       162.825       164.793    
  57  0.840721     -0.173495      -1.05043       1.05043       158.974       160.024    
  58  0.702714     -0.352805      -2.13607       2.13607       162.340       164.476    
  59  0.436737     -0.828424      -5.01573       5.01573       158.361       163.377    
  60  0.419753E-01  -3.17067      -19.1970       19.1970       159.789       178.986    
  61  0.588078     -0.530895      -3.21433       3.21433       155.446       158.660    
  62  0.762320     -0.271389      -1.64314       1.64314       155.109       156.752    
  63  0.646142     -0.436736      -2.64424       2.64424       164.985       167.630    
  64  0.940150     -0.617158E-01 -0.373661      0.373661       157.855       158.228    
  65  0.254129      -1.36991      -8.29421       8.29421       154.726       163.021    
  66  0.598588     -0.513182      -3.10709       3.10709       160.604       163.711    
  67  0.254926      -1.36678      -8.27525       8.27525       154.062       162.337    
  68  0.423512     -0.859172      -5.20190       5.20190       159.717       164.919    
  69  0.562567     -0.575245      -3.48285       3.48285       160.107       163.590    
  70  0.451860     -0.794383      -4.80963       4.80963       158.490       163.300    
  71  0.683714E-01  -2.68280      -16.2431       16.2431       169.692       185.935    
  72  0.301554E-01  -3.50139      -21.1993       21.1993       161.212       182.411    
  73  0.720678E-01  -2.63015      -15.9244       15.9244       155.776       171.700    
  74  0.298608      -1.20862      -7.31767       7.31767       161.330       168.647    
  75  0.727600     -0.318004      -1.92537       1.92537       155.207       157.133    
loop,thermsimp(1:2)       65   5.18709       6.35551    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353        156.66          0.86          1.15         25.22          0.13          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    354        162.94          0.86          1.15         25.21          0.19          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    156.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       65
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       66
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      353     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -4.51803       4.51803       152.717       157.235    
   2  0.162949E-01  -4.11691      -24.9260       24.9260       152.539       177.465    
   3  0.560104     -0.579632      -3.50941       3.50941       149.281       152.790    
   4  0.583629     -0.538490      -3.26031       3.26031       152.198       155.458    
   5  0.794243     -0.230366      -1.39476       1.39476       153.690       155.085    
   6  0.183626E-01  -3.99744      -24.2027       24.2027       150.536       174.739    
   7  0.642495     -0.442397      -2.67851       2.67851       155.551       158.229    
   8  0.611061E-02  -5.09773      -30.8644       30.8644       156.234       187.099    
   9  0.974115E-01  -2.32881      -14.0999       14.0999       154.646       168.745    
  10  0.817249E-01  -2.50440      -15.1630       15.1630       156.586       171.749    
  11  0.644422     -0.439401      -2.66037       2.66037       155.109       157.769    
  12  0.378181     -0.972383      -5.88734       5.88734       156.387       162.274    
  13  0.105422      -2.24978      -13.6214       13.6214       155.207       168.829    
  14  0.713647     -0.337367      -2.04260       2.04260       156.578       158.620    
  15  0.602100     -0.507333      -3.07167       3.07167       155.841       158.913    
  16  0.746624     -0.292194      -1.76910       1.76910       157.065       158.834    
  17  0.687673     -0.374442      -2.26708       2.26708       157.121       159.388    
  18  0.356323      -1.03192      -6.24780       6.24780       157.855       164.102    
  19  0.631203     -0.460128      -2.78587       2.78587       157.046       159.832    
  20  0.348432      -1.05431      -6.38339       6.38339       155.176       161.559    
  21  0.200848      -1.60521      -9.71880       9.71880       155.446       165.165    
  22  0.863860     -0.146345     -0.886050      0.886050       158.348       159.234    
  23  0.278415      -1.27864      -7.74160       7.74160       158.526       166.267    
  24  0.871038     -0.138069     -0.835948      0.835948       152.040       152.876    
  25  0.581010     -0.542987      -3.28754       3.28754       158.974       162.261    
  26  0.960519     -0.402815E-01 -0.243886      0.243886       153.757       154.001    
  27  0.104828      -2.25543      -13.6556       13.6556       159.375       173.031    
  28  0.907238     -0.973501E-01 -0.589411      0.589411       152.374       152.963    
  29  0.685005     -0.378330      -2.29061       2.29061       157.688       159.979    
  30  0.239566E-01  -3.73151      -22.5926       22.5926       160.681       183.273    
  31  0.643900     -0.440211      -2.66528       2.66528       160.242       162.907    
  32  0.526819     -0.640898      -3.88035       3.88035       158.812       162.692    
  33  0.463387     -0.769192      -4.65711       4.65711       158.917       163.574    
  34  0.847158E-01  -2.46845      -14.9454       14.9454       156.606       171.552    
  35  0.134368E-01  -4.30976      -26.0936       26.0936       154.062       180.155    
  36  0.141068      -1.95851      -11.8579       11.8579       160.660       172.518    
  37  0.239867      -1.42767      -8.64389       8.64389       159.760       168.404    
  38  0.317049      -1.14870      -6.95485       6.95485       154.726       161.681    
  39  0.925847     -0.770459E-01 -0.466478      0.466478       158.490       158.957    
  40  0.939258     -0.626649E-01 -0.379407      0.379407       158.361       158.741    
  41  0.111598      -2.19286      -13.2767       13.2767       158.046       171.323    
  42  0.357545      -1.02849      -6.22706       6.22706       160.107       166.335    
  43  0.902640     -0.102432     -0.620178      0.620178       161.207       161.827    
  44  0.914421     -0.894640E-01 -0.541664      0.541664       156.868       157.410    
  45  0.320420      -1.13812      -6.89081       6.89081       160.604       167.495    
  46  0.341333      -1.07490      -6.50801       6.50801       158.180       164.688    
  47  0.509727     -0.673879      -4.08003       4.08003       162.340       166.420    
  48  0.130581E-02  -6.64093      -40.2078       40.2078       162.825       203.032    
  49  0.105413      -2.24987      -13.6219       13.6219       159.717       173.339    
  50  0.743306     -0.296647      -1.79606       1.79606       153.572       155.368    
  51  0.114013      -2.17144      -13.1471       13.1471       155.616       168.763    
  52  0.225326      -1.49021      -9.02252       9.02252       160.717       169.740    
  53  0.131158      -2.03135      -12.2989       12.2989       161.872       174.171    
  54  0.886877     -0.120049     -0.726841      0.726841       161.091       161.818    
  55  0.202581      -1.59661      -9.66678       9.66678       154.957       164.623    
  56  0.890722     -0.115722     -0.700647      0.700647       165.090       165.790    
  57  0.154728      -1.86608      -11.2983       11.2983       164.031       175.329    
  58  0.246051      -1.40222      -8.48978       8.48978       160.975       169.465    
  59  0.936822     -0.652622E-01 -0.395133      0.395133       161.444       161.839    
  60  0.803405     -0.218896      -1.32532       1.32532       153.409       154.735    
  61  0.621921E-01  -2.77753      -16.8167       16.8167       164.985       181.802    
  62  0.114098      -2.17070      -13.1426       13.1426       161.708       174.851    
  63  0.750290     -0.287295      -1.73944       1.73944       159.336       161.076    
  64  0.946840     -0.546256E-01 -0.330733      0.330733       163.436       163.766    
  65  0.149613      -1.89970      -11.5018       11.5018       161.330       172.832    
  66  0.470076     -0.754861      -4.57034       4.57034       160.049       164.619    
  67  0.936184     -0.659437E-01 -0.399259      0.399259       155.776       156.175    
  68  0.136491      -1.99150      -12.0576       12.0576       158.663       170.720    
  69  0.660647     -0.414536      -2.50983       2.50983       160.478       162.988    
  70  0.438707     -0.823923      -4.98848       4.98848       157.599       162.587    
  71  0.641830     -0.443432      -2.68478       2.68478       156.426       159.111    
  72  0.841754E-01  -2.47485      -14.9841       14.9841       159.789       174.774    
  73  0.185718      -1.68352      -10.1930       10.1930       161.212       171.405    
  74  0.279686E-01  -3.57667      -21.6551       21.6551       161.060       182.715    
  75  0.937478     -0.645618E-01 -0.390892      0.390892       156.660       157.051    
loop,thermsimp(1:2)       66   4.51803       24.9260    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355        152.25          0.86          1.15         25.23          0.20          0.06         27.51
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    356        153.99          0.84          1.15         25.22          0.41          0.06         27.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       66
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       67
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      355     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -2.06327       2.06327       149.281       151.344    
   2  0.492413     -0.708438      -4.28927       4.28927       152.040       156.329    
   3  0.156563      -1.85430      -11.2269       11.2269       152.374       163.601    
   4  0.185270      -1.68594      -10.2076       10.2076       153.757       163.965    
   5  0.685983     -0.376903      -2.28198       2.28198       153.409       155.691    
   6  0.518581     -0.656659      -3.97577       3.97577       153.690       157.666    
   7  0.430667     -0.842421      -5.10048       5.10048       153.572       158.673    
   8  0.748228     -0.290047      -1.75611       1.75611       152.198       153.954    
   9  0.348167      -1.05507      -6.38799       6.38799       155.776       162.164    
  10  0.281980E-01  -3.56850      -21.6057       21.6057       156.660       178.265    
  11  0.670749     -0.399360      -2.41794       2.41794       152.717       155.135    
  12  0.225031      -1.49152      -9.03047       9.03047       156.868       165.899    
  13  0.258016      -1.35474      -8.20231       8.20231       155.109       163.311    
  14  0.122388      -2.10056      -12.7179       12.7179       155.551       168.269    
  15  0.556210     -0.586609      -3.55165       3.55165       156.578       160.129    
  16  0.938933     -0.630108E-01 -0.381502      0.381502       158.361       158.743    
  17  0.440352     -0.820180      -4.96582       4.96582       157.065       162.031    
  18  0.779048     -0.249683      -1.51172       1.51172       155.841       157.353    
  19  0.929725     -0.728667E-01 -0.441175      0.441175       158.490       158.931    
  20  0.330740      -1.10642      -6.69890       6.69890       156.426       163.125    
  21  0.214890      -1.53763      -9.30965       9.30965       158.348       167.657    
  22  0.363221      -1.01274      -6.13170       6.13170       157.121       163.252    
  23  0.681309     -0.383740      -2.32337       2.32337       157.046       159.370    
  24  0.107313      -2.23200      -13.5138       13.5138       157.688       171.202    
  25  0.622524     -0.473973      -2.86969       2.86969       159.336       162.206    
  26  0.532378     -0.630402      -3.81680       3.81680       155.176       158.992    
  27  0.298562      -1.20878      -7.31861       7.31861       154.726       162.045    
  28  0.432099     -0.839100      -5.08037       5.08037       161.091       166.172    
  29  0.243978      -1.41068      -8.54102       8.54102       161.207       169.748    
  30  0.581243     -0.542587      -3.28512       3.28512       161.444       164.729    
  31  0.897127E-01  -2.41114      -14.5984       14.5984       158.974       173.572    
  32  0.738124     -0.303644      -1.83843       1.83843       156.387       158.226    
  33  0.462727     -0.770619      -4.66575       4.66575       157.599       162.265    
  34  0.984641E-01  -2.31806      -14.0348       14.0348       158.812       172.846    
  35  0.641923     -0.443287      -2.68390       2.68390       160.242       162.926    
  36  0.334628      -1.09474      -6.62813       6.62813       160.478       167.106    
  37  0.482851     -0.728048      -4.40800       4.40800       158.917       163.325    
  38  0.826279     -0.190822      -1.15534       1.15534       163.436       164.591    
  39  0.966417     -0.341596E-01 -0.206821      0.206821       157.855       158.061    
  40  0.236833      -1.44040      -8.72097       8.72097       160.049       168.770    
  41  0.274744      -1.29192      -7.82196       7.82196       154.957       162.778    
  42  0.310307      -1.17019      -7.08498       7.08498       158.180       165.265    
  43  0.697298     -0.360543      -2.18292       2.18292       155.446       157.629    
  44  0.239072      -1.43099      -8.66400       8.66400       165.090       173.754    
  45  0.809729     -0.211055      -1.27784       1.27784       158.526       159.803    
  46  0.651880     -0.427895      -2.59071       2.59071       160.107       162.698    
  47  0.515020     -0.663550      -4.01749       4.01749       162.340       166.358    
  48  0.359059      -1.02427      -6.20148       6.20148       160.604       166.806    
  49  0.516010E-02  -5.26680      -31.8881       31.8881       159.760       191.648    
  50  0.321807      -1.13380      -6.86466       6.86466       154.646       161.510    
  51  0.787972     -0.238293      -1.44276       1.44276       155.616       157.059    
  52  0.842264     -0.171662      -1.03934       1.03934       155.207       156.247    
  53  0.201829      -1.60034      -9.68931       9.68931       160.975       170.664    
  54  0.650136     -0.430573      -2.60693       2.60693       160.717       163.324    
  55  0.498155     -0.696844      -4.21907       4.21907       158.663       162.882    
  56  0.780214E-01  -2.55077      -15.4438       15.4438       158.046       173.490    
  57  0.840777     -0.173429      -1.05003       1.05003       161.212       162.262    
  58  0.514128     -0.665282      -4.02798       4.02798       156.606       160.634    
  59  0.683522E-01  -2.68308      -16.2448       16.2448       156.586       172.831    
  60  0.376137E-01  -3.28039      -19.8613       19.8613       160.660       180.521    
  61  0.284022      -1.25870      -7.62088       7.62088       161.330       168.951    
  62  0.136027      -1.99490      -12.0782       12.0782       159.375       171.454    
  63  0.698137     -0.359341      -2.17564       2.17564       159.717       161.893    
  64  0.436751     -0.828392      -5.01554       5.01554       161.872       166.888    
  65  0.983110     -0.170340E-01 -0.103133      0.103133       150.536       150.639    
  66  0.807889E-01  -2.51592      -15.2327       15.2327       159.789       175.022    
  67  0.618306     -0.480773      -2.91086       2.91086       161.708       164.619    
  68  0.640808     -0.445025      -2.69442       2.69442       164.031       166.725    
  69  0.353445      -1.04003      -6.29690       6.29690       152.539       158.836    
  70  0.705613     -0.348688      -2.11115       2.11115       154.062       156.173    
  71  0.559094     -0.581438      -3.52035       3.52035       164.985       168.506    
  72  0.496930     -0.699307      -4.23398       4.23398       161.060       165.294    
  73  0.113595      -2.17512      -13.1693       13.1693       160.681       173.850    
  74  0.215620      -1.53424      -9.28911       9.28911       156.234       165.523    
  75  0.555044     -0.588708      -3.56436       3.56436       152.254       155.819    
loop,thermsimp(1:2)       67   2.06327       4.28927    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357        155.13          0.87          1.15         25.25          0.36          0.05         27.67
Just calling func    0   0         27.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    155.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       67
neval is:      356
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       68
neval is:      356


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      356     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -3.14285       3.14285       150.536       153.679    
   2  0.204294      -1.58819      -9.61580       9.61580       149.281       158.896    
   3  0.902141     -0.102985     -0.623525      0.623525       152.198       152.822    
   4  0.317306      -1.14789      -6.94995       6.94995       152.717       159.667    
   5  0.914914E-01  -2.39151      -14.4795       14.4795       153.409       167.889    
   6  0.362439      -1.01490      -6.14475       6.14475       152.254       158.399    
   7  0.284546      -1.25686      -7.60971       7.60971       154.062       161.671    
   8  0.752727     -0.284053      -1.71981       1.71981       155.207       156.927    
   9  0.972148     -0.282475E-01 -0.171026      0.171026       152.040       152.211    
  10  0.312417      -1.16342      -7.04395       7.04395       155.616       162.660    
  11  0.772549E-01  -2.56064      -15.5035       15.5035       155.841       171.345    
  12  0.190763      -1.65672      -10.0307       10.0307       155.446       165.477    
  13  0.829036     -0.187492      -1.13518       1.13518       153.690       154.825    
  14  0.309766      -1.17194      -7.09556       7.09556       157.855       164.950    
  15  0.691616     -0.368724      -2.23246       2.23246       156.387       158.620    
  16  0.177510      -1.72873      -10.4667       10.4667       153.572       164.039    
  17  0.848561     -0.164214     -0.994239      0.994239       158.361       159.355    
  18  0.464945     -0.765836      -4.63679       4.63679       152.539       157.175    
  19  0.626682     -0.467316      -2.82939       2.82939       158.490       161.319    
  20  0.451266     -0.795699      -4.81760       4.81760       155.176       159.993    
  21  0.161179E-01  -4.12783      -24.9921       24.9921       157.046       182.038    
  22  0.848853     -0.163869     -0.992155      0.992155       158.526       159.518    
  23  0.565946     -0.569256      -3.44659       3.44659       156.578       160.024    
  24  0.798567     -0.224937      -1.36189       1.36189       156.606       157.968    
  25  0.282371      -1.26453      -7.65618       7.65618       154.646       162.302    
  26  0.887219     -0.119663     -0.724508      0.724508       159.717       160.442    
  27  0.311981      -1.16481      -7.05241       7.05241       157.065       164.117    
  28  0.454937     -0.787596      -4.76854       4.76854       154.726       159.495    
  29  0.200774E-01  -3.90816      -23.6621       23.6621       155.776       179.438    
  30  0.549692     -0.598397      -3.62302       3.62302       159.336       162.959    
  31  0.928164     -0.745470E-01 -0.451348      0.451348       161.212       161.663    
  32  0.876026     -0.132360     -0.801378      0.801378       157.599       158.400    
  33  0.360538      -1.02016      -6.17659       6.17659       160.107       166.284    
  34  0.810484     -0.210124      -1.27220       1.27220       154.957       156.229    
  35  0.350387      -1.04872      -6.34951       6.34951       158.663       165.012    
  36  0.609257     -0.495514      -3.00011       3.00011       160.242       163.242    
  37  0.847473     -0.165497      -1.00201       1.00201       156.426       157.428    
  38  0.459433     -0.777763      -4.70900       4.70900       157.121       161.830    
  39  0.213778      -1.54282      -9.34107       9.34107       155.109       164.450    
  40  0.983077     -0.170677E-01 -0.103337      0.103337       160.717       160.820    
  41  0.719533     -0.329153      -1.99287       1.99287       158.917       160.910    
  42  0.317292      -1.14793      -6.95022       6.95022       152.374       159.324    
  43  0.300670      -1.20174      -7.27600       7.27600       153.757       161.033    
  44  0.486388     -0.720748      -4.36380       4.36380       163.436       167.800    
  45  0.309580      -1.17254      -7.09918       7.09918       161.708       168.807    
  46  0.111802      -2.19103      -13.2657       13.2657       161.444       174.710    
  47  0.913484     -0.904897E-01 -0.547874      0.547874       158.180       158.728    
  48  0.438377     -0.824676      -4.99304       4.99304       161.060       166.053    
  49  0.773114     -0.257329      -1.55801       1.55801       156.234       157.792    
  50  0.248259      -1.39328      -8.43571       8.43571       156.868       165.304    
  51  0.502855     -0.687454      -4.16222       4.16222       161.091       165.254    
  52  0.827610E-01  -2.49180      -15.0867       15.0867       162.340       177.427    
  53  0.528759     -0.637222      -3.85809       3.85809       164.031       167.889    
  54  0.711957     -0.339738      -2.05696       2.05696       160.604       162.661    
  55  0.703963     -0.351029      -2.12532       2.12532       161.872       163.997    
  56  0.419247     -0.869295      -5.26319       5.26319       160.478       165.741    
  57  0.939830     -0.620566E-01 -0.375724      0.375724       158.348       158.724    
  58  0.401337     -0.912955      -5.52753       5.52753       155.551       161.078    
  59  0.547477     -0.602435      -3.64747       3.64747       164.985       168.633    
  60  0.237364      -1.43816      -8.70742       8.70742       160.049       168.756    
  61  0.619970E-01  -2.78067      -16.8357       16.8357       161.330       178.165    
  62  0.662658     -0.411496      -2.49142       2.49142       161.207       163.698    
  63  0.891998     -0.114291     -0.691980      0.691980       160.975       161.667    
  64  0.830370     -0.185883      -1.12544       1.12544       157.688       158.814    
  65  0.900614     -0.104678     -0.633780      0.633780       159.375       160.009    
  66  0.258356      -1.35342      -8.19432       8.19432       156.586       164.781    
  67  0.946683E-01  -2.35738      -14.2728       14.2728       158.812       173.084    
  68  0.763751     -0.269514      -1.63178       1.63178       158.046       159.678    
  69  0.161805      -1.82136      -11.0275       11.0275       158.974       170.001    
  70  0.571882     -0.558823      -3.38342       3.38342       165.090       168.473    
  71  0.421732     -0.863386      -5.22741       5.22741       160.681       165.908    
  72  0.877271     -0.130939     -0.792779      0.792779       159.789       160.582    
  73  0.186780      -1.67783      -10.1585       10.1585       156.660       166.818    
  74  0.530698     -0.633563      -3.83594       3.83594       160.660       164.496    
  75  0.846791     -0.166301      -1.00688       1.00688       155.132       156.138    
loop,thermsimp(1:2)       68   3.14285       9.61580    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    358        155.80          0.87          1.16         25.13          0.31          0.05         27.53
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    359        156.34          0.84          1.15         25.18          0.39          0.05         27.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    155.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       68
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       69
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      358     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -4.96206       4.96206       152.040       157.002    
   2  0.752309     -0.284608      -1.72317       1.72317       152.198       153.921    
   3  0.209108      -1.56490      -9.47479       9.47479       150.536       160.011    
   4  0.842922     -0.170881      -1.03461       1.03461       153.690       154.725    
   5  0.161148      -1.82543      -11.0521       11.0521       155.132       166.184    
   6  0.601748     -0.507917      -3.07521       3.07521       154.957       158.032    
   7  0.890912     -0.115510     -0.699360      0.699360       155.207       155.907    
   8  0.631939     -0.458963      -2.77881       2.77881       152.539       155.317    
   9  0.144759E-01  -4.23527      -25.6426       25.6426       156.426       182.069    
  10  0.653698     -0.425110      -2.57385       2.57385       156.234       158.808    
  11  0.401463     -0.912639      -5.52562       5.52562       156.606       162.132    
  12  0.906126     -0.985765E-01 -0.596836      0.596836       152.254       152.851    
  13  0.480601E-01  -3.03530      -18.3774       18.3774       157.599       175.976    
  14  0.264260      -1.33082      -8.05752       8.05752       156.387       164.445    
  15  0.586033     -0.534379      -3.23542       3.23542       158.348       161.583    
  16  0.323072      -1.12988      -6.84090       6.84090       158.180       165.021    
  17  0.785147     -0.241884      -1.46450       1.46450       157.688       159.153    
  18  0.139165      -1.97210      -11.9402       11.9402       149.281       161.221    
  19  0.105818E-01  -4.54862      -27.5398       27.5398       152.374       179.914    
  20  0.896943     -0.108763     -0.658513      0.658513       158.361       159.020    
  21  0.854239     -0.157544     -0.953856      0.953856       154.726       155.680    
  22  0.566003     -0.569157      -3.44599       3.44599       158.526       161.972    
  23  0.566387     -0.568477      -3.44187       3.44187       152.717       156.159    
  24  0.414905     -0.879707      -5.32623       5.32623       158.046       163.373    
  25  0.173772      -1.75001      -10.5955       10.5955       155.176       165.771    
  26  0.884308E-01  -2.42554      -14.6855       14.6855       159.375       174.061    
  27  0.417457     -0.873573      -5.28909       5.28909       156.578       161.867    
  28  0.334615      -1.09477      -6.62836       6.62836       159.717       166.346    
  29  0.706024E-01  -2.65069      -16.0487       16.0487       159.789       175.838    
  30  0.996422     -0.358418E-02 -0.217006E-01  0.217006E-01   160.717       160.739    
  31  0.894500     -0.111491     -0.675026      0.675026       158.917       159.592    
  32  0.827855     -0.188917      -1.14381       1.14381       153.757       154.901    
  33  0.434964     -0.832492      -5.04036       5.04036       155.551       160.591    
  34  0.121450      -2.10825      -12.7645       12.7645       158.490       171.255    
  35  0.498977     -0.695195      -4.20909       4.20909       161.212       165.421    
  36  0.117961      -2.13740      -12.9410       12.9410       160.975       173.916    
  37  0.309211      -1.17373      -7.10640       7.10640       154.062       161.168    
  38  0.786265     -0.240461      -1.45589       1.45589       157.121       158.577    
  39  0.614330     -0.487222      -2.94991       2.94991       154.646       157.595    
  40  0.820857     -0.197407      -1.19521       1.19521       155.616       156.811    
  41  0.670448     -0.399809      -2.42066       2.42066       160.604       163.025    
  42  0.742403     -0.297863      -1.80343       1.80343       159.336       161.140    
  43  0.760912E-01  -2.57582      -15.5954       15.5954       160.242       175.837    
  44  0.709677     -0.342945      -2.07638       2.07638       161.207       163.283    
  45  0.943449     -0.582133E-01 -0.352455      0.352455       161.872       162.224    
  46  0.176370      -1.73517      -10.5057       10.5057       153.572       164.078    
  47  0.866890     -0.142843     -0.864851      0.864851       157.065       157.930    
  48  0.711056     -0.341004      -2.06463       2.06463       155.109       157.173    
  49  0.929667E-01  -2.37551      -14.3827       14.3827       160.660       175.043    
  50  0.960091     -0.407270E-01 -0.246583      0.246583       156.586       156.833    
  51  0.948380     -0.530000E-01 -0.320891      0.320891       157.855       158.176    
  52  0.257449      -1.35693      -8.21561       8.21561       158.663       166.878    
  53  0.117236      -2.14357      -12.9783       12.9783       161.091       174.070    
  54  0.218340E-01  -3.82429      -23.1543       23.1543       156.868       180.023    
  55  0.523421     -0.647370      -3.91953       3.91953       155.446       159.365    
  56  0.577211     -0.549547      -3.32726       3.32726       160.478       163.805    
  57  0.288682      -1.24243      -7.52235       7.52235       160.681       168.203    
  58  0.672927E-01  -2.69870      -16.3394       16.3394       161.060       177.399    
  59  0.530586     -0.633774      -3.83721       3.83721       160.107       163.945    
  60  0.511831     -0.669760      -4.05509       4.05509       156.660       160.715    
  61  0.658851     -0.417258      -2.52631       2.52631       163.436       165.962    
  62  0.108719E-01  -4.52157      -27.3761       27.3761       153.409       180.786    
  63  0.252985      -1.37443      -8.32153       8.32153       164.031       172.353    
  64  0.741974     -0.298440      -1.80692       1.80692       165.090       166.897    
  65  0.978889     -0.213374E-01 -0.129188      0.129188       164.985       165.115    
  66  0.482845     -0.728059      -4.40807       4.40807       160.049       164.457    
  67  0.701589     -0.354408      -2.14578       2.14578       161.708       163.854    
  68  0.323083      -1.12985      -6.84071       6.84071       158.974       165.814    
  69  0.960426     -0.403786E-01 -0.244474      0.244474       155.841       156.086    
  70  0.803478     -0.218806      -1.32477       1.32477       158.812       160.136    
  71  0.927800     -0.749395E-01 -0.453724      0.453724       161.444       161.898    
  72  0.414115     -0.881611      -5.33775       5.33775       162.340       167.678    
  73  0.510824     -0.671729      -4.06702       4.06702       161.330       165.397    
  74  0.687172     -0.375171      -2.27149       2.27149       155.776       158.047    
  75  0.330630      -1.10675      -6.70090       6.70090       155.803       162.504    
loop,thermsimp(1:2)       69   4.96206       1.72317    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    360        162.77          0.87          1.15         25.21          0.18          0.05         27.46
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    162.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       69
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       70
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      359     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.707058E-01  0.707058E-01   152.254       152.325    
   2  0.482301     -0.729186      -4.41489       4.41489       152.198       156.613    
   3  0.546964     -0.603372      -3.65315       3.65315       153.690       157.343    
   4  0.543918     -0.608957      -3.68696       3.68696       153.757       157.444    
   5  0.427641     -0.849472      -5.14317       5.14317       152.539       157.682    
   6  0.498345     -0.696462      -4.21676       4.21676       154.726       158.943    
   7  0.989308     -0.107494E-01 -0.650825E-01  0.650825E-01   155.207       155.272    
   8  0.658822     -0.417302      -2.52657       2.52657       155.841       158.368    
   9  0.917808     -0.857673E-01 -0.519282      0.519282       152.717       153.237    
  10  0.914490E-04  -9.29973      -56.3056       56.3056       155.616       211.922    
  11  0.989901     -0.101499E-01 -0.614530E-01  0.614530E-01   156.586       156.648    
  12  0.558183     -0.583069      -3.53022       3.53022       152.040       155.570    
  13  0.706994     -0.346733      -2.09931       2.09931       155.109       157.208    
  14  0.599152     -0.512240      -3.10138       3.10138       154.646       157.747    
  15  0.845909     -0.167343      -1.01319       1.01319       157.065       158.078    
  16  0.655384     -0.422534      -2.55825       2.55825       154.957       157.515    
  17  0.412232E-01  -3.18875      -19.3065       19.3065       155.776       175.082    
  18  0.495401     -0.702387      -4.25264       4.25264       157.855       162.107    
  19  0.378829     -0.970671      -5.87697       5.87697       157.121       162.998    
  20  0.653665E-02  -5.03033      -30.4564       30.4564       156.234       186.690    
  21  0.782670     -0.245045      -1.48363       1.48363       158.361       159.845    
  22  0.945547     -0.559921E-01 -0.339007      0.339007       157.688       158.027    
  23  0.969857     -0.306063E-01 -0.185308      0.185308       155.446       155.631    
  24  0.822249     -0.195712      -1.18495       1.18495       158.917       160.102    
  25  0.265012E-01  -3.63056      -21.9814       21.9814       150.536       172.517    
  26  0.360432E-01  -3.32304      -20.1195       20.1195       158.812       178.931    
  27  0.796418     -0.227631      -1.37820       1.37820       155.551       156.929    
  28  0.292313E-01  -3.53252      -21.3878       21.3878       156.660       178.048    
  29  0.227321      -1.48139      -8.96916       8.96916       160.717       169.686    
  30  0.812637     -0.207471      -1.25614       1.25614       159.336       160.593    
  31  0.930544     -0.719857E-01 -0.435841      0.435841       154.062       154.498    
  32  0.674873     -0.393231      -2.38084       2.38084       149.281       151.661    
  33  0.264030      -1.33169      -8.06279       8.06279       158.348       166.411    
  34  0.807464     -0.213856      -1.29480       1.29480       156.578       157.873    
  35  0.653731     -0.425060      -2.57355       2.57355       161.444       164.018    
  36  0.858536     -0.152527     -0.923482      0.923482       158.526       159.449    
  37  0.538887     -0.618250      -3.74322       3.74322       156.606       160.350    
  38  0.468049     -0.759182      -4.59650       4.59650       161.872       166.468    
  39  0.401324     -0.912987      -5.52772       5.52772       155.803       161.331    
  40  0.363356      -1.01237      -6.12946       6.12946       160.604       166.734    
  41  0.924933     -0.780342E-01 -0.472462      0.472462       161.207       161.679    
  42  0.797289     -0.226538      -1.37159       1.37159       158.046       159.418    
  43  0.200097      -1.60895      -9.74147       9.74147       160.478       170.219    
  44  0.686219     -0.376559      -2.27989       2.27989       161.708       163.988    
  45  0.895629     -0.110230     -0.667390      0.667390       160.107       160.775    
  46  0.331830      -1.10313      -6.67896       6.67896       153.572       160.251    
  47  0.967018     -0.335379E-01 -0.203056      0.203056       156.387       156.590    
  48  0.268282      -1.31572      -7.96607       7.96607       160.049       168.015    
  49  0.472399     -0.749931      -4.54049       4.54049       158.180       162.720    
  50  0.399276E-01  -3.22069      -19.4998       19.4998       164.985       184.485    
  51  0.956493     -0.444820E-01 -0.269319      0.269319       161.330       161.599    
  52  0.444161     -0.811569      -4.91368       4.91368       161.212       166.125    
  53  0.308942      -1.17460      -7.11168       7.11168       155.176       162.287    
  54  0.602319     -0.506968      -3.06946       3.06946       158.974       162.043    
  55  0.533797     -0.627740      -3.80068       3.80068       163.436       167.236    
  56  0.990519     -0.952607E-02 -0.576761E-01  0.576761E-01   155.132       155.189    
  57  0.931261     -0.712158E-01 -0.431179      0.431179       159.717       160.149    
  58  0.185125      -1.68672      -10.2123       10.2123       158.663       168.875    
  59  0.251659E-02  -5.98485      -36.2356       36.2356       165.090       201.325    
  60  0.706458     -0.347491      -2.10390       2.10390       162.340       164.444    
  61  0.555619     -0.587673      -3.55809       3.55809       160.681       164.239    
  62  0.798153     -0.225455      -1.36503       1.36503       158.490       159.855    
  63  0.951290     -0.499358E-01 -0.302339      0.302339       164.031       164.333    
  64  0.247755      -1.39532      -8.44801       8.44801       160.975       169.423    
  65  0.867838     -0.141750     -0.858233      0.858233       159.375       160.234    
  66  0.164123E-01  -4.10972      -24.8825       24.8825       161.091       185.974    
  67  0.443305     -0.813497      -4.92536       4.92536       160.660       165.585    
  68  0.390544     -0.940215      -5.69258       5.69258       160.242       165.934    
  69  0.854116     -0.157688     -0.954730      0.954730       159.789       160.744    
  70  0.873727     -0.134987     -0.817288      0.817288       157.599       158.416    
  71  0.656755E-01  -2.72303      -16.4867       16.4867       161.060       177.547    
  72  0.742002     -0.298403      -1.80669       1.80669       152.374       154.181    
  73  0.753201E-01  -2.58601      -15.6571       15.6571       156.868       172.525    
  74  0.804282     -0.217805      -1.31871       1.31871       153.409       154.728    
  75  0.661856     -0.412708      -2.49876       2.49876       162.767       165.266    
loop,thermsimp(1:2)       70  0.707058E-01   4.41489    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361        151.27          0.87          1.15         25.22          0.15          0.06         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    362        150.07          0.84          1.15         25.19          0.17          0.06         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    151.27       0.8160     -1.925      3.038     -102.6      1.066    
                      0.2937      1.385     -99.70      3.551     0.2335    
                       1.966     -1.316      1.530      6011.      3884.    
                     -0.4038      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5654.      251.0    
                     -0.5672     -6.406     -4.661     -9.007      6.020    
                      -15.08     -3.145      4501.      0.000      6139.    

                       2657.      6084.      746.0      6139.      4928.    
                      -7071.     0.1188E-01 0.1076      0.000     0.1144    
                     -0.1861    -0.8682E-01 0.1006     0.3041E-01-0.3972E-01

                     -0.3495    -0.8683      0.000     0.8689E-02-0.6807E-01
                       0.000     0.7715E-03 0.6858E-02-0.1528     0.6439E-02
                     -0.3213E-01-0.2427E-02-0.4944     -1.097      4169.    

                     -0.8167    -0.9370     -2.404     -2.369    -0.1055    
                      0.4068      9.147      8.754    -0.1785E+05 -4.000    
                     -0.5673    -0.8199      9.282      8.812    -0.1752E+05

                      -4.000     0.1499    -0.8348      8.939      8.976    
                     -0.2054E+05 -7.000    -0.6834    -0.9446      9.079    
                       8.776    -0.2098E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       70
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       71
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      361     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575     -0.911665      0.911665       149.281       150.192    
   2  0.573661     -0.555717      -3.36461       3.36461       152.254       155.619    
   3  0.499290     -0.694569      -4.20530       4.20530       152.717       156.923    
   4  0.677563     -0.389253      -2.35675       2.35675       152.374       154.731    
   5  0.476566     -0.741149      -4.48732       4.48732       154.062       158.549    
   6  0.153036      -1.87708      -11.3649       11.3649       153.409       164.774    
   7  0.626270     -0.467973      -2.83337       2.83337       155.132       157.965    
   8  0.794744     -0.229735      -1.39094       1.39094       155.207       156.598    
   9  0.111868E-01  -4.49302      -27.2032       27.2032       152.040       179.243    
  10  0.643880     -0.440243      -2.66547       2.66547       155.446       158.111    
  11  0.634705     -0.454595      -2.75237       2.75237       156.387       159.139    
  12  0.653568     -0.425308      -2.57505       2.57505       152.198       154.773    
  13  0.888231     -0.118524     -0.717608      0.717608       156.586       157.304    
  14  0.681775E-01  -2.68564      -16.2603       16.2603       155.551       171.811    
  15  0.241248      -1.42193      -8.60914       8.60914       155.109       163.718    
  16  0.208857      -1.56610      -9.48205       9.48205       153.690       163.172    
  17  0.652439     -0.427038      -2.58552       2.58552       153.757       156.343    
  18  0.489833     -0.713691      -4.32107       4.32107       154.957       159.278    
  19  0.719225     -0.329581      -1.99546       1.99546       152.539       154.534    
  20  0.924762     -0.782189E-01 -0.473580      0.473580       154.646       155.119    
  21  0.845502     -0.167825      -1.01610       1.01610       156.578       157.594    
  22  0.665989     -0.406482      -2.46107       2.46107       157.688       160.150    
  23  0.378562     -0.971376      -5.88124       5.88124       157.065       162.946    
  24  0.396889     -0.924098      -5.59500       5.59500       155.841       161.436    
  25  0.158089      -1.84460      -11.1682       11.1682       157.599       168.767    
  26  0.590577     -0.526655      -3.18866       3.18866       154.726       157.915    
  27  0.949513     -0.518061E-01 -0.313662      0.313662       158.046       158.360    
  28  0.518198     -0.657398      -3.98024       3.98024       158.526       162.506    
  29  0.551080     -0.595875      -3.60775       3.60775       158.361       161.969    
  30  0.986285     -0.138097E-01 -0.836118E-01  0.836118E-01   158.490       158.574    
  31  0.920142     -0.832276E-01 -0.503906      0.503906       158.917       159.421    
  32  0.133201      -2.01590      -12.2054       12.2054       159.717       171.923    
  33  0.584507     -0.536987      -3.25121       3.25121       159.375       162.627    
  34  0.790583     -0.234984      -1.42272       1.42272       153.572       154.995    
  35  0.702664     -0.352876      -2.13650       2.13650       156.606       158.743    
  36  0.148885      -1.90458      -11.5314       11.5314       159.336       170.868    
  37  0.290436      -1.23637      -7.48567       7.48567       159.789       167.275    
  38  0.638249     -0.449027      -2.71866       2.71866       160.107       162.826    
  39  0.381605     -0.963369      -5.83276       5.83276       155.803       161.636    
  40  0.823069     -0.194716      -1.17892       1.17892       161.330       162.509    
  41  0.492318     -0.708630      -4.29043       4.29043       161.207       165.497    
  42  0.773199     -0.257218      -1.55734       1.55734       158.974       160.531    
  43  0.289475E-01  -3.54227      -21.4468       21.4468       157.855       179.301    
  44  0.355683      -1.03371      -6.25867       6.25867       155.176       161.434    
  45  0.160396      -1.83011      -11.0805       11.0805       158.180       169.260    
  46  0.972861     -0.275140E-01 -0.166585      0.166585       157.121       157.287    
  47  0.781938E-02  -4.85115      -29.3715       29.3715       161.708       191.080    
  48  0.225299      -1.49033      -9.02327       9.02327       161.444       170.468    
  49  0.631686     -0.459363      -2.78123       2.78123       160.681       163.462    
  50  0.212316      -1.54968      -9.38260       9.38260       164.031       173.414    
  51  0.673664     -0.395024      -2.39169       2.39169       162.340       164.732    
  52  0.728322     -0.317012      -1.91937       1.91937       162.767       164.687    
  53  0.368576     -0.998108      -6.04309       6.04309       160.660       166.703    
  54  0.381088     -0.964725      -5.84097       5.84097       160.242       166.083    
  55  0.481283     -0.731301      -4.42769       4.42769       161.212       165.639    
  56  0.801664     -0.221066      -1.33845       1.33845       158.348       159.686    
  57  0.285936      -1.25199      -7.58022       7.58022       161.872       169.452    
  58  0.412374     -0.885823      -5.36326       5.36326       160.604       165.967    
  59  0.815685     -0.203727      -1.23347       1.23347       163.436       164.669    
  60  0.251414      -1.38065      -8.35923       8.35923       160.049       168.408    
  61  0.598278     -0.513699      -3.11022       3.11022       158.663       161.773    
  62  0.750137     -0.287499      -1.74068       1.74068       160.975       162.715    
  63  0.412907     -0.884533      -5.35545       5.35545       160.717       166.073    
  64  0.318297      -1.14477      -6.93107       6.93107       160.478       167.409    
  65  0.520766     -0.652454      -3.95032       3.95032       150.536       154.486    
  66  0.983801     -0.163320E-01 -0.988829E-01  0.988829E-01   156.868       156.967    
  67  0.897709     -0.107909     -0.653341      0.653341       155.776       156.429    
  68  0.645455     -0.437800      -2.65068       2.65068       161.060       163.711    
  69  0.995902     -0.410634E-02 -0.248620E-01  0.248620E-01   156.660       156.685    
  70  0.333624      -1.09774      -6.64632       6.64632       158.812       165.458    
  71  0.651980     -0.427742      -2.58978       2.58978       164.985       167.575    
  72  0.355582      -1.03400      -6.26040       6.26040       161.091       167.352    
  73  0.181298E-01  -4.01020      -24.2799       24.2799       156.234       180.514    
  74  0.259420      -1.34931      -8.16943       8.16943       165.090       173.259    
  75  0.175273      -1.74141      -10.5434       10.5434       150.072       160.615    
loop,thermsimp(1:2)       71  0.911665       3.36461    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363        153.70          0.87          1.14         25.22          0.15          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    364        158.58          0.84          1.12         25.01          0.40          0.06         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       71
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       72
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      363     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -4.96008       4.96008       149.281       154.241    
   2  0.202294      -1.59803      -9.67535       9.67535       150.536       160.211    
   3  0.873786     -0.134920     -0.816881      0.816881       152.539       153.355    
   4  0.262141      -1.33887      -8.10627       8.10627       152.374       160.480    
   5  0.342005      -1.07293      -6.49610       6.49610       152.198       158.694    
   6  0.421217     -0.864607      -5.23480       5.23480       153.572       158.807    
   7  0.618489     -0.480477      -2.90907       2.90907       154.646       157.555    
   8  0.412552     -0.885393      -5.36065       5.36065       152.254       157.615    
   9  0.951192     -0.500396E-01 -0.302967      0.302967       153.757       154.060    
  10  0.298546      -1.20883      -7.31893       7.31893       155.776       163.095    
  11  0.805120     -0.216763      -1.31240       1.31240       155.207       156.520    
  12  0.208146      -1.56951      -9.50269       9.50269       156.660       166.162    
  13  0.924021     -0.790209E-01 -0.478436      0.478436       152.717       153.196    
  14  0.447624     -0.803802      -4.86666       4.86666       156.868       161.735    
  15  0.667709     -0.403903      -2.44545       2.44545       157.121       159.566    
  16  0.767295E-01  -2.56747      -15.5449       15.5449       156.586       172.131    
  17  0.301582      -1.19871      -7.25766       7.25766       156.578       163.835    
  18  0.788580     -0.237522      -1.43809       1.43809       154.726       156.164    
  19  0.887020     -0.119888     -0.725866      0.725866       155.132       155.857    
  20  0.233035E-01  -3.75915      -22.7600       22.7600       155.446       178.206    
  21  0.899320     -0.106116     -0.642487      0.642487       158.046       158.689    
  22  0.144480      -1.93461      -11.7132       11.7132       154.062       165.775    
  23  0.274629      -1.29233      -7.82449       7.82449       158.490       166.315    
  24  0.831597     -0.184407      -1.11650       1.11650       156.606       157.723    
  25  0.388827     -0.944620      -5.71924       5.71924       156.387       162.106    
  26  0.257578      -1.35643      -8.21259       8.21259       154.957       163.169    
  27  0.427791     -0.849120      -5.14104       5.14104       158.917       164.058    
  28  0.837664E-01  -2.47972      -15.0136       15.0136       158.348       173.361    
  29  0.782727     -0.244972      -1.48319       1.48319       157.688       159.172    
  30  0.259676E-01  -3.65091      -22.1046       22.1046       158.974       181.078    
  31  0.166181      -1.79468      -10.8660       10.8660       150.072       160.938    
  32  0.360749      -1.01957      -6.17305       6.17305       155.176       161.349    
  33  0.369697     -0.995071      -6.02470       6.02470       155.841       161.866    
  34  0.959392     -0.414553E-01 -0.250993      0.250993       155.803       156.054    
  35  0.449170     -0.800353      -4.84578       4.84578       158.663       163.508    
  36  0.655790E-02  -5.02708      -30.4367       30.4367       158.361       188.798    
  37  0.133569      -2.01313      -12.1886       12.1886       158.526       170.714    
  38  0.282061      -1.26563      -7.66283       7.66283       161.330       168.993    
  39  0.431813     -0.839762      -5.08438       5.08438       159.375       164.460    
  40  0.713174     -0.338031      -2.04662       2.04662       160.975       163.021    
  41  0.511305     -0.670790      -4.06133       4.06133       160.107       164.169    
  42  0.264485      -1.32997      -8.05238       8.05238       157.065       165.117    
  43  0.779298     -0.249362      -1.50977       1.50977       153.690       155.200    
  44  0.709352E-02  -4.94857      -29.9614       29.9614       160.681       190.642    
  45  0.770402     -0.260843      -1.57928       1.57928       161.060       162.639    
  46  0.694393     -0.364718      -2.20820       2.20820       155.109       157.317    
  47  0.589268E-01  -2.83146      -17.1432       17.1432       163.436       180.579    
  48  0.817644     -0.201328      -1.21895       1.21895       162.767       163.986    
  49  0.990168     -0.988073E-02 -0.598233E-01  0.598233E-01   162.340       162.400    
  50  0.733536E-01  -2.61246      -15.8173       15.8173       153.409       169.227    
  51  0.781472     -0.246575      -1.49290       1.49290       158.812       160.304    
  52  0.582548     -0.540344      -3.27154       3.27154       161.207       164.479    
  53  0.644915     -0.438636      -2.65574       2.65574       161.212       163.868    
  54  0.726975     -0.318863      -1.93057       1.93057       160.604       162.535    
  55  0.562265     -0.575782      -3.48610       3.48610       160.717       164.203    
  56  0.166410      -1.79330      -10.8576       10.8576       160.242       171.100    
  57  0.847052     -0.165994      -1.00502       1.00502       160.660       161.665    
  58  0.437688     -0.826250      -5.00257       5.00257       159.789       164.792    
  59  0.408722     -0.894719      -5.41712       5.41712       161.091       166.509    
  60  0.794023     -0.230643      -1.39644       1.39644       160.478       161.874    
  61  0.259946      -1.34728      -8.15717       8.15717       164.985       173.143    
  62  0.700123     -0.356499      -2.15844       2.15844       160.049       162.207    
  63  0.564078E-01  -2.87515      -17.4077       17.4077       157.599       175.007    
  64  0.999061     -0.939094E-03 -0.568579E-02  0.568579E-02   158.180       158.185    
  65  0.555696     -0.587534      -3.55725       3.55725       161.872       165.429    
  66  0.103792      -2.26537      -13.7158       13.7158       161.444       175.160    
  67  0.318583      -1.14387      -6.92563       6.92563       159.336       166.262    
  68  0.321355      -1.13521      -6.87317       6.87317       155.551       162.424    
  69  0.350004      -1.04981      -6.35613       6.35613       159.717       166.073    
  70  0.786507     -0.240153      -1.45402       1.45402       165.090       166.544    
  71  0.267605E-01  -3.62083      -21.9225       21.9225       164.031       185.954    
  72  0.104251      -2.26095      -13.6890       13.6890       152.040       165.729    
  73  0.188491      -1.66871      -10.1033       10.1033       157.855       167.958    
  74  0.379358     -0.969275      -5.86852       5.86852       156.234       162.103    
  75  0.587324     -0.532178      -3.22210       3.22210       153.696       156.918    
loop,thermsimp(1:2)       72   4.96008       9.67535    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365        153.69          0.86          1.15         25.11          0.29          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    366        154.13          0.85          1.15         25.20          0.13          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       72
neval is:      365
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       73
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      365     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -1.29159       1.29159       152.717       154.009    
   2  0.554495     -0.589697      -3.57035       3.57035       152.539       156.109    
   3  0.997056     -0.294851E-02 -0.178519E-01  0.178519E-01   153.757       153.775    
   4  0.901183E-01  -2.40663      -14.5711       14.5711       149.281       163.852    
   5  0.296736      -1.21491      -7.35575       7.35575       153.690       161.046    
   6  0.907820     -0.967094E-01 -0.585532      0.585532       155.132       155.717    
   7  0.325542      -1.12226      -6.79479       6.79479       155.803       162.598    
   8  0.947537     -0.538896E-01 -0.326277      0.326277       154.726       155.053    
   9  0.378276     -0.972130      -5.88581       5.88581       155.207       161.093    
  10  0.985613     -0.144920E-01 -0.877422E-01  0.877422E-01   153.696       153.784    
  11  0.167434      -1.78717      -10.8205       10.8205       155.109       165.929    
  12  0.693849E-01  -2.66809      -16.1540       16.1540       154.646       170.800    
  13  0.434983     -0.832447      -5.04009       5.04009       152.254       157.295    
  14  0.998656     -0.134491E-02 -0.814282E-02  0.814282E-02   156.606       156.614    
  15  0.650302     -0.430318      -2.60538       2.60538       158.180       160.785    
  16  0.152610      -1.87987      -11.3818       11.3818       158.046       169.428    
  17  0.273947      -1.29482      -7.83955       7.83955       152.198       160.038    
  18  0.990471     -0.957469E-02 -0.579704E-01  0.579704E-01   153.572       153.630    
  19  0.684493     -0.379077      -2.29514       2.29514       157.688       159.984    
  20  0.864467E-01  -2.44823      -14.8229       14.8229       157.121       171.944    
  21  0.546085     -0.604980      -3.66288       3.66288       150.536       154.199    
  22  0.246642      -1.39982      -8.47525       8.47525       158.812       167.287    
  23  0.484505     -0.724627      -4.38729       4.38729       152.374       156.761    
  24  0.567359     -0.566763      -3.43149       3.43149       150.072       153.503    
  25  0.564371     -0.572043      -3.46346       3.46346       155.176       158.639    
  26  0.825604     -0.191640      -1.16030       1.16030       160.660       161.820    
  27  0.302493      -1.19570      -7.23941       7.23941       156.868       164.108    
  28  0.630396     -0.461407      -2.79361       2.79361       155.841       158.635    
  29  0.886734     -0.120210     -0.727819      0.727819       160.478       161.206    
  30  0.389345     -0.943288      -5.71118       5.71118       156.234       161.945    
  31  0.181391      -1.70710      -10.3357       10.3357       156.387       166.723    
  32  0.933221     -0.691132E-01 -0.418449      0.418449       160.049       160.467    
  33  0.169237E-01  -4.07904      -24.6968       24.6968       162.340       187.037    
  34  0.757788     -0.277351      -1.67924       1.67924       155.551       157.230    
  35  0.300993E-01  -3.50325      -21.2106       21.2106       160.604       181.815    
  36  0.395621     -0.927300      -5.61438       5.61438       161.060       166.674    
  37  0.459505     -0.777605      -4.70805       4.70805       160.975       165.683    
  38  0.733176     -0.310370      -1.87915       1.87915       155.776       157.655    
  39  0.575459     -0.552587      -3.34566       3.34566       154.957       158.302    
  40  0.560889     -0.578233      -3.50094       3.50094       158.663       162.163    
  41  0.428351     -0.847812      -5.13312       5.13312       156.578       161.711    
  42  0.553832     -0.590895      -3.57760       3.57760       161.212       164.789    
  43  0.581118     -0.542801      -3.28641       3.28641       162.767       166.054    
  44  0.319195E-01  -3.44454      -20.8551       20.8551       158.917       179.772    
  45  0.224512E-01  -3.79641      -22.9856       22.9856       160.107       183.093    
  46  0.113637E-01  -4.47733      -27.1082       27.1082       160.717       187.825    
  47  0.889134     -0.117508     -0.711457      0.711457       159.375       160.087    
  48  0.422937     -0.860531      -5.21013       5.21013       161.207       166.417    
  49  0.479928     -0.734119      -4.44476       4.44476       159.789       164.234    
  50  0.813133     -0.206861      -1.25245       1.25245       157.065       158.317    
  51  0.544683     -0.607551      -3.67845       3.67845       161.872       165.550    
  52  0.694184E-01  -2.66760      -16.1511       16.1511       152.040       168.191    
  53  0.656508     -0.420820      -2.54787       2.54787       154.062       156.610    
  54  0.532118     -0.630889      -3.81975       3.81975       159.717       163.537    
  55  0.485731E-01  -3.02468      -18.3131       18.3131       156.660       174.973    
  56  0.525424     -0.643549      -3.89640       3.89640       159.336       163.233    
  57  0.773368E-01  -2.55959      -15.4971       15.4971       158.490       173.987    
  58  0.741245     -0.299424      -1.81288       1.81288       161.091       162.904    
  59  0.286066      -1.25153      -7.57747       7.57747       165.090       172.667    
  60  0.327223      -1.11711      -6.76361       6.76361       157.855       164.618    
  61  0.124235      -2.08558      -12.6273       12.6273       161.330       173.957    
  62  0.599337     -0.511931      -3.09951       3.09951       153.409       156.509    
  63  0.666632     -0.405518      -2.45523       2.45523       158.526       160.981    
  64  0.810607     -0.209973      -1.27129       1.27129       160.242       161.513    
  65  0.104486      -2.25870      -13.6754       13.6754       156.586       170.262    
  66  0.516216     -0.661229      -4.00344       4.00344       164.985       168.989    
  67  0.671995     -0.397504      -2.40671       2.40671       158.348       160.755    
  68  0.343614      -1.06824      -6.46769       6.46769       157.599       164.067    
  69  0.423208     -0.859892      -5.20625       5.20625       161.444       166.651    
  70  0.301080E-01  -3.50297      -21.2089       21.2089       155.446       176.655    
  71  0.364244      -1.00993      -6.11468       6.11468       163.436       169.550    
  72  0.333024      -1.09954      -6.65721       6.65721       158.974       165.631    
  73  0.239626      -1.42868      -8.65000       8.65000       164.031       172.681    
  74  0.462380     -0.771368      -4.67028       4.67028       158.361       163.031    
  75  0.322505      -1.13164      -6.85155       6.85155       153.692       160.543    
loop,thermsimp(1:2)       73   1.29159       3.57035    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    367        154.19          0.87          1.14         25.21          0.20          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    368        177.71          0.86          1.11         25.05          0.34          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    154.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       73
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       74
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      367     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889     -0.707711      0.707711       150.072       150.779    
   2  0.480213     -0.733525      -4.44116       4.44116       153.572       158.013    
   3  0.226156      -1.48653      -9.00027       9.00027       153.757       162.758    
   4  0.633402     -0.456651      -2.76481       2.76481       153.696       156.461    
   5  0.925311     -0.776258E-01 -0.469989      0.469989       152.717       153.187    
   6  0.498405     -0.696343      -4.21604       4.21604       150.536       154.752    
   7  0.133283      -2.01528      -12.2016       12.2016       154.726       166.928    
   8  0.657074E-01  -2.72254      -16.4838       16.4838       155.132       171.615    
   9  0.726758     -0.319162      -1.93238       1.93238       152.539       154.471    
  10  0.398365     -0.920388      -5.57253       5.57253       153.409       158.982    
  11  0.321047E-01  -3.43875      -20.8201       20.8201       154.062       174.882    
  12  0.276307      -1.28624      -7.78762       7.78762       156.606       164.394    
  13  0.483740     -0.726208      -4.39686       4.39686       152.374       156.771    
  14  0.224589      -1.49348      -9.04236       9.04236       155.551       164.593    
  15  0.832041     -0.183874      -1.11327       1.11327       152.254       153.368    
  16  0.939301     -0.626192E-01 -0.379131      0.379131       155.776       156.155    
  17  0.624052     -0.471522      -2.85485       2.85485       154.957       157.811    
  18  0.172753      -1.75589      -10.6311       10.6311       157.065       167.696    
  19  0.468323     -0.758597      -4.59296       4.59296       155.841       160.434    
  20  0.963461     -0.372229E-01 -0.225368      0.225368       155.176       155.401    
  21  0.812092     -0.208142      -1.26021       1.26021       157.688       158.949    
  22  0.376764     -0.976137      -5.91007       5.91007       152.198       158.108    
  23  0.791872E-01  -2.53594      -15.3540       15.3540       159.375       174.729    
  24  0.237003      -1.43968      -8.71663       8.71663       160.049       168.766    
  25  0.320094      -1.13914      -6.89698       6.89698       153.692       160.589    
  26  0.821410E-01  -2.49932      -15.1322       15.1322       158.348       173.480    
  27  0.789147     -0.236802      -1.43373       1.43373       158.180       159.613    
  28  0.734353E-01  -2.61135      -15.8105       15.8105       158.526       174.336    
  29  0.226401      -1.48545      -8.99371       8.99371       153.690       162.684    
  30  0.380831     -0.965399      -5.84505       5.84505       155.207       161.052    
  31  0.264857      -1.32857      -8.04386       8.04386       160.478       168.522    
  32  0.246167      -1.40174      -8.48693       8.48693       160.242       168.729    
  33  0.142133      -1.95099      -11.8124       11.8124       156.578       168.390    
  34  0.123438E-01  -4.39460      -26.6073       26.6073       160.660       187.267    
  35  0.853289     -0.158657     -0.960594      0.960594       156.234       157.195    
  36  0.418603     -0.870831      -5.27249       5.27249       158.663       163.935    
  37  0.235242      -1.44714      -8.76178       8.76178       155.803       164.565    
  38  0.841712     -0.172317      -1.04330       1.04330       161.091       162.135    
  39  0.113373      -2.17707      -13.1812       13.1812       158.361       171.542    
  40  0.617966     -0.481322      -2.91419       2.91419       159.336       162.251    
  41  0.149268      -1.90202      -11.5158       11.5158       159.717       171.233    
  42  0.811010     -0.209475      -1.26828       1.26828       149.281       150.549    
  43  0.571477     -0.559531      -3.38771       3.38771       157.599       160.987    
  44  0.105494      -2.24911      -13.6173       13.6173       156.868       170.486    
  45  0.709548     -0.343127      -2.07748       2.07748       159.789       161.867    
  46  0.535895     -0.623816      -3.77692       3.77692       157.855       161.632    
  47  0.137736      -1.98242      -12.0026       12.0026       161.212       173.214    
  48  0.666779     -0.405297      -2.45389       2.45389       161.872       164.326    
  49  0.326487      -1.11936      -6.77724       6.77724       158.974       165.751    
  50  0.461090     -0.774162      -4.68720       4.68720       160.975       165.662    
  51  0.246088      -1.40207      -8.48888       8.48888       155.109       163.597    
  52  0.308348      -1.17653      -7.12333       7.12333       162.767       169.891    
  53  0.921161     -0.821209E-01 -0.497205      0.497205       161.207       161.704    
  54  0.361112      -1.01857      -6.16696       6.16696       161.444       167.611    
  55  0.853246     -0.158708     -0.960903      0.960903       161.060       162.021    
  56  0.535783     -0.624027      -3.77820       3.77820       156.387       160.165    
  57  0.347437      -1.05717      -6.40070       6.40070       158.812       165.212    
  58  0.722381     -0.325203      -1.96895       1.96895       152.040       154.009    
  59  0.134598      -2.00546      -12.1422       12.1422       164.985       177.128    
  60  0.521537     -0.650975      -3.94136       3.94136       158.046       161.988    
  61  0.713987     -0.336890      -2.03972       2.03972       163.436       165.475    
  62  0.202889      -1.59510      -9.65759       9.65759       156.586       166.244    
  63  0.973267     -0.270971E-01 -0.164060      0.164060       154.646       154.810    
  64  0.396441     -0.925228      -5.60183       5.60183       157.121       162.723    
  65  0.482421     -0.728937      -4.41339       4.41339       165.090       169.503    
  66  0.622991     -0.473223      -2.86515       2.86515       164.031       166.896    
  67  0.474966     -0.744512      -4.50768       4.50768       161.330       165.837    
  68  0.741916     -0.298520      -1.80740       1.80740       158.490       160.298    
  69  0.717884     -0.331448      -2.00677       2.00677       156.660       158.667    
  70  0.537648     -0.620551      -3.75715       3.75715       155.446       159.203    
  71  0.144246      -1.93623      -11.7230       11.7230       158.917       170.640    
  72  0.643241     -0.441236      -2.67149       2.67149       160.604       163.276    
  73  0.730372     -0.314201      -1.90234       1.90234       160.107       162.010    
  74  0.173998      -1.74871      -10.5876       10.5876       162.340       172.928    
  75  0.142681      -1.94715      -11.7891       11.7891       154.189       165.978    
loop,thermsimp(1:2)       74  0.707711       4.44116    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369        151.31          0.86          1.14         25.27          0.44          0.06         27.77
Just calling func    0   0         27.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    370        154.68          0.85          1.14         25.31          0.32          0.05         27.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       74
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       75
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      369     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -2.64743       2.64743       149.281       151.928    
   2  0.108032      -2.22533      -13.4733       13.4733       150.072       163.545    
   3  0.908790     -0.956413E-01 -0.579065      0.579065       152.717       153.296    
   4  0.987883     -0.121914E-01 -0.738131E-01  0.738131E-01   152.254       152.328    
   5  0.318380      -1.14451      -6.92949       6.92949       152.040       158.970    
   6  0.924426     -0.785824E-01 -0.475781      0.475781       152.539       153.014    
   7  0.965220     -0.353996E-01 -0.214328      0.214328       150.536       150.750    
   8  0.852248     -0.159878     -0.967990      0.967990       154.646       155.614    
   9  0.329186      -1.11113      -6.72741       6.72741       155.176       161.903    
  10  0.282479      -1.26415      -7.65387       7.65387       155.776       163.430    
  11  0.818943     -0.199740      -1.20934       1.20934       153.696       154.905    
  12  0.842569     -0.171300      -1.03714       1.03714       152.374       153.411    
  13  0.370966     -0.991644      -6.00396       6.00396       156.234       162.238    
  14  0.362233      -1.01547      -6.14819       6.14819       154.957       161.105    
  15  0.356944E-01  -3.33276      -20.1784       20.1784       153.572       173.751    
  16  0.149119      -1.90301      -11.5219       11.5219       152.198       163.720    
  17  0.127170      -2.06223      -12.4859       12.4859       156.660       169.146    
  18  0.589256     -0.528895      -3.20222       3.20222       157.688       160.891    
  19  0.702139     -0.353624      -2.14103       2.14103       153.409       155.551    
  20  0.713819     -0.337127      -2.04115       2.04115       155.446       157.487    
  21  0.121783      -2.10552      -12.7479       12.7479       158.180       170.928    
  22  0.992321     -0.770837E-02 -0.466707E-01  0.466707E-01   156.387       156.434    
  23  0.622746     -0.473616      -2.86753       2.86753       158.490       161.358    
  24  0.388486     -0.945499      -5.72457       5.72457       155.841       161.566    
  25  0.365204      -1.00730      -6.09875       6.09875       153.692       159.790    
  26  0.416566     -0.875710      -5.30203       5.30203       157.599       162.901    
  27  0.250735      -1.38336      -8.37560       8.37560       155.207       163.583    
  28  0.243824      -1.41131      -8.54484       8.54484       157.855       166.399    
  29  0.177195      -1.73050      -10.4774       10.4774       161.207       171.684    
  30  0.723685     -0.323399      -1.95803       1.95803       159.789       161.747    
  31  0.157256      -1.84988      -11.2002       11.2002       158.046       169.247    
  32  0.941988     -0.597623E-01 -0.361834      0.361834       160.107       160.469    
  33  0.110785      -2.20016      -13.3210       13.3210       161.060       174.381    
  34  0.200758      -1.60566      -9.72152       9.72152       161.091       170.813    
  35  0.873323     -0.135450     -0.820088      0.820088       159.336       160.157    
  36  0.842283     -0.171639      -1.03919       1.03919       153.690       154.729    
  37  0.326633      -1.11892      -6.77454       6.77454       157.121       163.895    
  38  0.648559     -0.433003      -2.62164       2.62164       153.757       156.379    
  39  0.460689E-01  -3.07762      -18.6336       18.6336       160.604       179.238    
  40  0.676614     -0.390654      -2.36523       2.36523       155.109       157.474    
  41  0.863029     -0.147307     -0.891877      0.891877       158.663       159.554    
  42  0.646727     -0.435831      -2.63876       2.63876       161.872       164.511    
  43  0.310616      -1.16920      -7.07896       7.07896       156.606       163.685    
  44  0.521840     -0.650394      -3.93784       3.93784       155.803       159.741    
  45  0.381245     -0.964312      -5.83847       5.83847       155.551       161.389    
  46  0.815908     -0.203453      -1.23182       1.23182       158.812       160.043    
  47  0.209395E-01  -3.86612      -23.4076       23.4076       163.436       186.843    
  48  0.800991E-01  -2.52449      -15.2846       15.2846       160.975       176.259    
  49  0.824204     -0.193337      -1.17057       1.17057       158.974       160.144    
  50  0.828636     -0.187975      -1.13810       1.13810       161.330       162.468    
  51  0.609810     -0.494608      -2.99463       2.99463       154.189       157.184    
  52  0.793631     -0.231137      -1.39943       1.39943       156.586       157.986    
  53  0.450040E-01  -3.10100      -18.7752       18.7752       164.031       182.806    
  54  0.758261     -0.276727      -1.67546       1.67546       154.726       156.402    
  55  0.450025     -0.798453      -4.83427       4.83427       161.444       166.279    
  56  0.687694     -0.374411      -2.26689       2.26689       157.065       159.332    
  57  0.851665     -0.160562     -0.972132      0.972132       156.578       157.550    
  58  0.964091     -0.365694E-01 -0.221411      0.221411       160.478       160.699    
  59  0.717554     -0.331907      -2.00955       2.00955       160.242       162.251    
  60  0.726427     -0.319617      -1.93514       1.93514       160.049       161.984    
  61  0.646354     -0.436408      -2.64225       2.64225       165.090       167.732    
  62  0.841481     -0.172592      -1.04497       1.04497       162.767       163.812    
  63  0.635881     -0.452744      -2.74116       2.74116       156.868       159.609    
  64  0.753792     -0.282639      -1.71125       1.71125       158.917       160.628    
  65  0.568235     -0.565221      -3.42215       3.42215       159.717       163.139    
  66  0.607832     -0.497856      -3.01430       3.01430       158.361       161.375    
  67  0.918682     -0.848156E-01 -0.513520      0.513520       155.132       155.645    
  68  0.783545     -0.243927      -1.47687       1.47687       162.340       163.817    
  69  0.741290     -0.299363      -1.81251       1.81251       161.212       163.024    
  70  0.965965     -0.346273E-01 -0.209653      0.209653       158.348       158.557    
  71  0.962055     -0.386840E-01 -0.234214      0.234214       158.526       158.760    
  72  0.820105     -0.198323      -1.20075       1.20075       159.375       160.576    
  73  0.379310     -0.969402      -5.86929       5.86929       154.062       159.931    
  74  0.283697      -1.25985      -7.62782       7.62782       164.985       172.613    
  75  0.783294E-02  -4.84942      -29.3610       29.3610       151.313       180.674    
loop,thermsimp(1:2)       75   2.64743       13.4733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371        153.05          0.87          1.15         25.19          0.20          0.06         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    372        155.34          0.86          1.15         25.20          0.13          0.05         27.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       75
neval is:      371
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       76
neval is:      371


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      371     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -9.67112       9.67112       150.536       160.207    
   2  0.337724      -1.08553      -6.57237       6.57237       149.281       155.853    
   3  0.870295     -0.138923     -0.841118      0.841118       152.254       153.096    
   4  0.837087     -0.177827      -1.07666       1.07666       152.539       153.615    
   5  0.512110     -0.669215      -4.05180       4.05180       152.717       156.769    
   6  0.998742     -0.125879E-02 -0.762141E-02  0.762141E-02   152.374       152.382    
   7  0.203490      -1.59214      -9.63968       9.63968       153.690       163.330    
   8  0.525951E-01  -2.94513      -17.8314       17.8314       153.696       171.527    
   9  0.474810     -0.744841      -4.50968       4.50968       153.409       157.919    
  10  0.440755     -0.819266      -4.96029       4.96029       154.646       159.606    
  11  0.225689      -1.48860      -9.01279       9.01279       155.132       164.144    
  12  0.902704     -0.102360     -0.619744      0.619744       153.757       154.377    
  13  0.663331     -0.410481      -2.48527       2.48527       154.726       157.212    
  14  0.511480     -0.670447      -4.05925       4.05925       156.387       160.446    
  15  0.625297     -0.469528      -2.84278       2.84278       154.189       157.032    
  16  0.812907     -0.207139      -1.25413       1.25413       155.109       156.363    
  17  0.979453     -0.207607E-01 -0.125696      0.125696       155.446       155.572    
  18  0.255329      -1.36520      -8.26569       8.26569       156.578       164.843    
  19  0.856654     -0.154722     -0.936769      0.936769       156.586       157.523    
  20  0.610394     -0.493650      -2.98883       2.98883       158.348       161.337    
  21  0.703614     -0.351525      -2.12832       2.12832       158.526       160.654    
  22  0.623403     -0.472562      -2.86115       2.86115       152.040       154.901    
  23  0.375727     -0.978893      -5.92675       5.92675       157.065       162.992    
  24  0.870528     -0.138656     -0.839497      0.839497       158.663       159.502    
  25  0.175838E-01  -4.04078      -24.4651       24.4651       156.868       181.333    
  26  0.237914      -1.43585      -8.69339       8.69339       155.803       164.497    
  27  0.464352     -0.767112      -4.64451       4.64451       153.692       158.336    
  28  0.776873     -0.252478      -1.52864       1.52864       154.062       155.590    
  29  0.380679     -0.965800      -5.84748       5.84748       158.812       164.659    
  30  0.391295     -0.938295      -5.68095       5.68095       158.974       164.655    
  31  0.369488     -0.995636      -6.02813       6.02813       159.336       165.365    
  32  0.302398      -1.19601      -7.24130       7.24130       160.107       167.349    
  33  0.809138     -0.211786      -1.28227       1.28227       159.375       160.658    
  34  0.675473     -0.392342      -2.37545       2.37545       158.917       161.292    
  35  0.486217     -0.721100      -4.36594       4.36594       160.478       164.844    
  36  0.937468     -0.645730E-01 -0.390960      0.390960       157.688       158.079    
  37  0.741025     -0.299721      -1.81467       1.81467       154.957       156.771    
  38  0.155236      -1.86281      -11.2785       11.2785       158.490       169.769    
  39  0.407249     -0.898331      -5.43899       5.43899       158.361       163.800    
  40  0.348550E-01  -3.35656      -20.3224       20.3224       155.551       175.873    
  41  0.178548      -1.72290      -10.4314       10.4314       155.841       166.273    
  42  0.127429      -2.06020      -12.4736       12.4736       159.789       172.263    
  43  0.919888     -0.835037E-01 -0.505577      0.505577       155.176       155.681    
  44  0.520080     -0.653772      -3.95829       3.95829       160.049       164.007    
  45  0.574092     -0.554965      -3.36006       3.36006       156.234       159.594    
  46  0.893427     -0.112690     -0.682289      0.682289       160.242       160.924    
  47  0.658991     -0.417045      -2.52502       2.52502       161.330       163.855    
  48  0.803744     -0.218475      -1.32277       1.32277       157.599       158.922    
  49  0.499877     -0.693392      -4.19818       4.19818       161.212       165.410    
  50  0.723109     -0.324195      -1.96285       1.96285       159.717       161.680    
  51  0.477842     -0.738475      -4.47113       4.47113       155.776       160.247    
  52  0.946108     -0.553980E-01 -0.335410      0.335410       150.072       150.407    
  53  0.296943      -1.21422      -7.35153       7.35153       155.207       162.559    
  54  0.702733     -0.352778      -2.13591       2.13591       156.606       158.742    
  55  0.644709     -0.438956      -2.65768       2.65768       152.198       154.856    
  56  0.687506     -0.374685      -2.26855       2.26855       162.767       165.036    
  57  0.682968     -0.381308      -2.30865       2.30865       162.340       164.649    
  58  0.695030     -0.363801      -2.20265       2.20265       157.121       159.323    
  59  0.134664      -2.00497      -12.1392       12.1392       161.872       174.011    
  60  0.789098     -0.236865      -1.43411       1.43411       161.444       162.878    
  61  0.495959     -0.701262      -4.24582       4.24582       157.855       162.100    
  62  0.932440     -0.699500E-01 -0.423516      0.423516       165.090       165.513    
  63  0.390950     -0.939176      -5.68629       5.68629       156.660       162.346    
  64  0.209807      -1.56156      -9.45457       9.45457       158.046       167.501    
  65  0.727082     -0.318716      -1.92968       1.92968       161.091       163.021    
  66  0.622701     -0.473688      -2.86797       2.86797       158.180       161.048    
  67  0.468739     -0.757708      -4.58758       4.58758       161.207       165.795    
  68  0.253730      -1.37148      -8.30372       8.30372       164.985       173.289    
  69  0.200081      -1.60903      -9.74196       9.74196       153.572       163.314    
  70  0.737960     -0.303866      -1.83977       1.83977       161.060       162.900    
  71  0.466976     -0.761477      -4.61040       4.61040       160.975       165.585    
  72  0.396485     -0.925118      -5.60117       5.60117       160.604       166.205    
  73  0.141388      -1.95625      -11.8442       11.8442       151.313       163.157    
  74  0.262925      -1.33589      -8.08819       8.08819       164.031       172.119    
  75  0.604998     -0.502530      -3.04259       3.04259       153.051       156.093    
loop,thermsimp(1:2)       76   9.67112       6.57237    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    373        154.49          0.87          1.14         25.16          0.21          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.05455               371
loop is:       76
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    6.05455               371
loop is:       77
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    3.02727               445

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      372     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -1.50208       1.50208       150.072       151.574    
   2  0.437836     -0.825911      -2.50026       2.50026       152.374       154.874    
   3  0.123560      -2.09103      -6.33013       6.33013       152.254       158.585    
   4  0.943438     -0.582242E-01 -0.176261      0.176261       152.539       152.715    
   5  0.215054      -1.53686      -4.65251       4.65251       153.757       158.410    
   6  0.984763     -0.153546E-01 -0.464825E-01  0.464825E-01   152.198       152.245    
   7  0.154160E-01  -4.17235      -12.6308       12.6308       152.040       164.671    
   8  0.231957      -1.46120      -4.42346       4.42346       155.446       159.869    
   9  0.476349     -0.741605      -2.24504       2.24504       154.062       156.307    
  10  0.620436     -0.477333      -1.44502       1.44502       155.176       156.621    
  11  0.456145     -0.784945      -2.37624       2.37624       149.281       151.657    
  12  0.507296     -0.678660      -2.05449       2.05449       153.051       155.105    
  13  0.910123     -0.941755E-01 -0.285095      0.285095       155.109       155.394    
  14  0.323556      -1.12838      -3.41592       3.41592       152.717       156.133    
  15  0.666279     -0.406046      -1.22921       1.22921       154.957       156.186    
  16  0.781920     -0.246002     -0.744716      0.744716       154.189       154.934    
  17  0.921689     -0.815478E-01 -0.246867      0.246867       154.726       154.973    
  18  0.152544      -1.88030      -5.69219       5.69219       156.586       162.279    
  19  0.265926      -1.32454      -4.00974       4.00974       153.409       157.419    
  20  0.812409     -0.207751     -0.628919      0.628919       157.688       158.317    
  21  0.517560E-01  -2.96121      -8.96441       8.96441       153.692       162.656    
  22  0.559187     -0.581271      -1.75967       1.75967       156.606       158.366    
  23  0.708792     -0.344194      -1.04197       1.04197       157.599       158.641    
  24  0.287762      -1.24562      -3.77084       3.77084       157.121       160.892    
  25  0.896953     -0.108752     -0.329223      0.329223       158.663       158.992    
  26  0.305048      -1.18729      -3.59424       3.59424       156.234       159.828    
  27  0.752428     -0.284450     -0.861107      0.861107       154.646       155.507    
  28  0.248159      -1.39369      -4.21907       4.21907       150.536       154.755    
  29  0.997822     -0.217989E-02 -0.659913E-02  0.659913E-02   155.776       155.782    
  30  0.706427     -0.347535      -1.05208       1.05208       156.387       157.439    
  31  0.885217     -0.121923     -0.369094      0.369094       158.526       158.895    
  32  0.448301     -0.802290      -2.42875       2.42875       159.375       161.804    
  33  0.316275      -1.15114      -3.48483       3.48483       160.242       163.727    
  34  0.682241     -0.382372      -1.15754       1.15754       158.180       159.337    
  35  0.655896     -0.421752      -1.27676       1.27676       158.917       160.194    
  36  0.129575      -2.04350      -6.18623       6.18623       158.348       164.534    
  37  0.236133      -1.44336      -4.36945       4.36945       159.717       164.087    
  38  0.481338     -0.731186      -2.21350       2.21350       157.855       160.068    
  39  0.825902     -0.191279     -0.579053      0.579053       156.660       157.239    
  40  0.818029     -0.200857     -0.608049      0.608049       155.207       155.815    
  41  0.135951E-01  -4.29805      -13.0114       13.0114       161.444       174.456    
  42  0.535484     -0.624585      -1.89079       1.89079       161.060       162.951    
  43  0.451882     -0.794334      -2.40466       2.40466       157.065       159.470    
  44  0.591282     -0.525463      -1.59072       1.59072       161.091       162.682    
  45  0.220584      -1.51148      -4.57565       4.57565       151.313       155.888    
  46  0.217569      -1.52524      -4.61731       4.61731       153.572       158.190    
  47  0.541669     -0.613101      -1.85602       1.85602       153.690       155.546    
  48  0.927891     -0.748411E-01 -0.226565      0.226565       158.361       158.588    
  49  0.888902     -0.117768     -0.356515      0.356515       161.330       161.686    
  50  0.391529     -0.937694      -2.83866       2.83866       160.049       162.888    
  51  0.611187     -0.492353      -1.49049       1.49049       155.132       156.622    
  52  0.475002     -0.744437      -2.25361       2.25361       155.803       158.057    
  53  0.504237     -0.684709      -2.07280       2.07280       162.340       164.413    
  54  0.605691     -0.501385      -1.51783       1.51783       158.974       160.491    
  55  0.476618     -0.741039      -2.24333       2.24333       158.812       161.055    
  56  0.128287      -2.05348      -6.21645       6.21645       156.578       162.794    
  57  0.164258      -1.80632      -5.46822       5.46822       160.478       165.946    
  58  0.381764     -0.962954      -2.91512       2.91512       162.767       165.683    
  59  0.824295     -0.193227     -0.584950      0.584950       159.336       159.921    
  60  0.170823      -1.76713      -5.34957       5.34957       161.212       166.561    
  61  0.258309      -1.35360      -4.09772       4.09772       165.090       169.187    
  62  0.470573     -0.753804      -2.28197       2.28197       160.975       163.257    
  63  0.939649     -0.622488E-01 -0.188444      0.188444       161.207       161.395    
  64  0.323567      -1.12835      -3.41582       3.41582       160.604       164.020    
  65  0.192095      -1.64976      -4.99429       4.99429       155.841       160.836    
  66  0.739439     -0.301863     -0.913823      0.913823       160.107       161.021    
  67  0.259637      -1.34847      -4.08219       4.08219       158.046       162.129    
  68  0.478982     -0.736093      -2.22836       2.22836       158.490       160.718    
  69  0.980393     -0.198018E-01 -0.599455E-01  0.599455E-01   153.696       153.756    
  70  0.792065     -0.233112     -0.705694      0.705694       164.031       164.737    
  71  0.446480     -0.806361      -2.44108       2.44108       159.789       162.230    
  72  0.680447     -0.385005      -1.16552       1.16552       164.985       166.151    
  73  0.926728     -0.760949E-01 -0.230360      0.230360       161.872       162.102    
  74  0.523602     -0.647023      -1.95872       1.95872       155.551       157.509    
  75  0.347314E-01  -3.36011      -10.1720       10.1720       154.494       164.666    
loop,thermsimp(1:2)       77   1.50208       2.50026    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374        151.85          0.85          1.14         25.25          0.15          0.04         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    375        151.88          0.85          1.14         25.21          0.18          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       77
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       78
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      374     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -7.03108       7.03108       150.072       157.103    
   2  0.700279     -0.356277      -1.07855       1.07855       149.281       150.359    
   3  0.681564     -0.383366      -1.16055       1.16055       152.198       153.359    
   4  0.838213E-01  -2.47907      -7.50482       7.50482       152.539       160.043    
   5  0.708687     -0.344341      -1.04241       1.04241       153.696       154.738    
   6  0.253966      -1.37055      -4.14904       4.14904       150.536       154.685    
   7  0.210796      -1.55686      -4.71305       4.71305       152.374       157.087    
   8  0.967741     -0.327906E-01 -0.992661E-01  0.992661E-01   154.189       154.289    
   9  0.901331     -0.103882     -0.314480      0.314480       154.726       155.041    
  10  0.985067     -0.150452E-01 -0.455458E-01  0.455458E-01   153.051       153.096    
  11  0.153899      -1.87146      -5.66542       5.66542       155.109       160.774    
  12  0.297572      -1.21210      -3.66935       3.66935       154.646       158.315    
  13  0.111036      -2.19790      -6.65364       6.65364       153.690       160.344    
  14  0.489011     -0.715370      -2.16562       2.16562       155.776       157.941    
  15  0.970731     -0.297058E-01 -0.899277E-01  0.899277E-01   155.207       155.297    
  16  0.246322      -1.40112      -4.24156       4.24156       151.313       155.554    
  17  0.293332      -1.22645      -3.71280       3.71280       152.717       156.430    
  18  0.545752     -0.605591      -1.83329       1.83329       154.957       156.790    
  19  0.455999     -0.785265      -2.37721       2.37721       154.062       156.439    
  20  0.427211     -0.850477      -2.57463       2.57463       155.176       157.750    
  21  0.185046E-01  -3.98974      -12.0780       12.0780       155.132       167.210    
  22  0.768936     -0.262748     -0.795409      0.795409       156.660       157.455    
  23  0.870591     -0.138583     -0.419530      0.419530       153.409       153.829    
  24  0.563023     -0.574436      -1.73897       1.73897       156.387       158.126    
  25  0.132150E-01  -4.32640      -13.0972       13.0972       155.551       168.648    
  26  0.890415     -0.116068     -0.351369      0.351369       155.803       156.155    
  27  0.163417      -1.81145      -5.48376       5.48376       153.572       159.056    
  28  0.360288      -1.02085      -3.09040       3.09040       157.688       160.779    
  29  0.622131     -0.474604      -1.43676       1.43676       156.606       158.043    
  30  0.942630     -0.590811E-01 -0.178855      0.178855       153.757       153.936    
  31  0.135626      -1.99785      -6.04805       6.04805       152.254       158.303    
  32  0.369646     -0.995208      -3.01277       3.01277       158.361       161.374    
  33  0.501457     -0.690237      -2.08954       2.08954       157.599       159.688    
  34  0.459762     -0.777047      -2.35233       2.35233       158.526       160.878    
  35  0.489970     -0.713411      -2.15969       2.15969       158.663       160.822    
  36  0.504194     -0.684794      -2.07306       2.07306       158.180       160.253    
  37  0.543102E-01  -2.91304      -8.81858       8.81858       157.065       165.884    
  38  0.873609     -0.135122     -0.409051      0.409051       156.234       156.643    
  39  0.425787     -0.853816      -2.58473       2.58473       155.446       158.031    
  40  0.792406     -0.232682     -0.704391      0.704391       159.336       160.041    
  41  0.691102     -0.369469      -1.11848       1.11848       157.855       158.973    
  42  0.752290     -0.284633     -0.861663      0.861663       158.917       159.779    
  43  0.279962      -1.27310      -3.85402       3.85402       158.974       162.828    
  44  0.315915E-01  -3.45487      -10.4588       10.4588       158.490       168.949    
  45  0.266419      -1.32269      -4.00413       4.00413       155.841       159.845    
  46  0.949868     -0.514319E-01 -0.155698      0.155698       157.121       157.276    
  47  0.520560     -0.652850      -1.97636       1.97636       160.107       162.084    
  48  0.805351     -0.216477     -0.655336      0.655336       158.812       159.467    
  49  0.281582      -1.26733      -3.83656       3.83656       161.207       165.044    
  50  0.365228      -1.00723      -3.04917       3.04917       161.330       164.379    
  51  0.961426     -0.393382E-01 -0.119087      0.119087       159.375       159.494    
  52  0.176024      -1.73713      -5.25877       5.25877       161.872       167.131    
  53  0.722488     -0.325055     -0.984030      0.984030       158.046       159.030    
  54  0.543981     -0.608841      -1.84313       1.84313       159.789       161.633    
  55  0.810204     -0.210469     -0.637148      0.637148       156.586       157.224    
  56  0.839414     -0.175052     -0.529929      0.529929       153.692       154.222    
  57  0.890272     -0.116228     -0.351854      0.351854       161.091       161.443    
  58  0.370000     -0.994252      -3.00987       3.00987       156.578       159.588    
  59  0.528163     -0.638351      -1.93246       1.93246       160.049       161.981    
  60  0.215496      -1.53481      -4.64630       4.64630       161.060       165.706    
  61  0.907335E-01  -2.39983      -7.26494       7.26494       160.975       168.240    
  62  0.853602     -0.158290     -0.479187      0.479187       160.242       160.721    
  63  0.625306     -0.469515      -1.42135       1.42135       160.604       162.025    
  64  0.267902      -1.31713      -3.98733       3.98733       159.717       163.705    
  65  0.932632E-01  -2.37233      -7.18169       7.18169       162.340       169.522    
  66  0.154744      -1.86598      -5.64884       5.64884       158.348       163.997    
  67  0.478208     -0.737710      -2.23325       2.23325       154.494       156.728    
  68  0.869735     -0.139567     -0.422508      0.422508       152.040       152.463    
  69  0.702209     -0.353524      -1.07021       1.07021       164.031       165.101    
  70  0.374797     -0.981372      -2.97088       2.97088       162.767       165.738    
  71  0.814761     -0.204861     -0.620170      0.620170       160.478       161.098    
  72  0.619425     -0.478964      -1.44995       1.44995       164.985       166.435    
  73  0.158848E-01  -4.14239      -12.5402       12.5402       161.212       173.752    
  74  0.309846      -1.17168      -3.54699       3.54699       165.090       168.637    
  75  0.170575      -1.76858      -5.35398       5.35398       151.846       157.200    
loop,thermsimp(1:2)       78   7.03108       1.07855    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    376        152.60          0.87          1.15         25.23          0.18          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    377        153.45          0.86          1.14         25.18          0.19          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       78
neval is:      376
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       79
neval is:      376


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      376     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -5.02406       5.02406       149.281       154.305    
   2  0.812983     -0.207045     -0.626782      0.626782       152.040       152.667    
   3  0.820046E-01  -2.50098      -7.57115       7.57115       153.051       160.622    
   4  0.863006     -0.147333     -0.446018      0.446018       152.198       152.644    
   5  0.647901     -0.434017      -1.31389       1.31389       153.409       154.723    
   6  0.650063E-01  -2.73327      -8.27436       8.27436       153.757       162.032    
   7  0.407685E-02  -5.50243      -16.6574       16.6574       153.692       170.349    
   8  0.935930     -0.662149E-01 -0.200451      0.200451       154.189       154.390    
   9  0.158531      -1.84180      -5.57565       5.57565       150.536       156.112    
  10  0.846482     -0.166666     -0.504544      0.504544       153.696       154.200    
  11  0.252208      -1.37750      -4.17008       4.17008       154.726       158.896    
  12  0.781651E-02  -4.85152      -14.6869       14.6869       155.207       169.894    
  13  0.990286     -0.976134E-02 -0.295503E-01  0.295503E-01   151.313       151.342    
  14  0.550116     -0.597625      -1.80918       1.80918       155.803       157.613    
  15  0.483066     -0.727601      -2.20265       2.20265       152.717       154.920    
  16  0.196160      -1.62883      -4.93090       4.93090       154.062       158.993    
  17  0.469455     -0.756184      -2.28917       2.28917       156.234       158.523    
  18  0.624392     -0.470977      -1.42578       1.42578       154.494       155.920    
  19  0.743593     -0.296262     -0.896865      0.896865       154.957       155.853    
  20  0.348439      -1.05429      -3.19163       3.19163       152.374       155.566    
  21  0.779083     -0.249637     -0.755720      0.755720       150.072       150.827    
  22  0.989010     -0.110506E-01 -0.334532E-01  0.334532E-01   151.846       151.879    
  23  0.655432E-01  -2.72505      -8.24946       8.24946       156.586       164.836    
  24  0.470908     -0.753092      -2.27982       2.27982       157.121       159.401    
  25  0.685537     -0.377553      -1.14295       1.14295       156.660       157.803    
  26  0.863060E-02  -4.75244      -14.3869       14.3869       155.176       169.563    
  27  0.526195     -0.642084      -1.94376       1.94376       155.776       157.720    
  28  0.767692     -0.264367     -0.800310      0.800310       155.446       156.246    
  29  0.380048     -0.967459      -2.92876       2.92876       156.606       159.535    
  30  0.337508E-01  -3.38875      -10.2587       10.2587       156.387       166.646    
  31  0.683667     -0.380285      -1.15123       1.15123       152.254       153.406    
  32  0.245511      -1.40441      -4.25155       4.25155       154.646       158.897    
  33  0.294388      -1.22286      -3.70192       3.70192       157.855       161.557    
  34  0.159040      -1.83860      -5.56594       5.56594       158.046       163.612    
  35  0.613798     -0.488089      -1.47758       1.47758       153.572       155.050    
  36  0.863839E-01  -2.44895      -7.41365       7.41365       158.812       166.225    
  37  0.118930      -2.12922      -6.44573       6.44573       159.375       165.821    
  38  0.961460     -0.393026E-01 -0.118980      0.118980       156.578       156.697    
  39  0.457884     -0.781140      -2.36473       2.36473       157.599       159.964    
  40  0.312963      -1.16167      -3.51669       3.51669       158.917       162.434    
  41  0.892553     -0.113669     -0.344107      0.344107       155.841       156.185    
  42  0.448774     -0.801235      -2.42556       2.42556       159.336       161.762    
  43  0.942987E-01  -2.36129      -7.14826       7.14826       152.539       159.687    
  44  0.848599     -0.164169     -0.496983      0.496983       158.180       158.677    
  45  0.665342     -0.407455      -1.23348       1.23348       153.690       154.924    
  46  0.894010     -0.112039     -0.339171      0.339171       160.242       160.581    
  47  0.403928     -0.906518      -2.74428       2.74428       155.109       157.853    
  48  0.612812     -0.489696      -1.48244       1.48244       157.688       159.171    
  49  0.726279     -0.319821     -0.968186      0.968186       158.663       159.631    
  50  0.694767     -0.364179      -1.10247       1.10247       158.526       159.628    
  51  0.849471     -0.163141     -0.493873      0.493873       160.478       160.972    
  52  0.615908     -0.484657      -1.46719       1.46719       158.361       159.828    
  53  0.256250      -1.36160      -4.12194       4.12194       161.091       165.213    
  54  0.124633      -2.08238      -6.30393       6.30393       159.789       166.093    
  55  0.629294E-01  -2.76574      -8.37266       8.37266       160.049       168.422    
  56  0.127527      -2.05943      -6.23445       6.23445       160.604       166.839    
  57  0.721510     -0.326409     -0.988130      0.988130       160.107       161.096    
  58  0.664696     -0.408425      -1.23641       1.23641       158.974       160.210    
  59  0.562617     -0.575156      -1.74115       1.74115       159.717       161.458    
  60  0.413984     -0.881928      -2.66984       2.66984       158.348       161.018    
  61  0.656751     -0.420450      -1.27282       1.27282       161.330       162.603    
  62  0.642415     -0.442520      -1.33963       1.33963       161.207       162.547    
  63  0.136182      -1.99376      -6.03566       6.03566       164.031       170.067    
  64  0.481125     -0.731629      -2.21484       2.21484       161.060       163.275    
  65  0.147280      -1.91542      -5.79850       5.79850       162.767       168.566    
  66  0.162546      -1.81680      -5.49994       5.49994       157.065       162.565    
  67  0.200903      -1.60493      -4.85858       4.85858       164.985       169.844    
  68  0.444300     -0.811254      -2.45589       2.45589       161.872       164.328    
  69  0.799825     -0.223363     -0.676180      0.676180       155.132       155.808    
  70  0.622561     -0.473914      -1.43467       1.43467       160.975       162.409    
  71  0.468358     -0.758522      -2.29625       2.29625       165.090       167.386    
  72  0.155577      -1.86061      -5.63259       5.63259       155.551       161.183    
  73  0.445431     -0.808713      -2.44819       2.44819       158.490       160.938    
  74  0.707826     -0.345557      -1.04610       1.04610       162.340       163.386    
  75  0.641411     -0.444085      -1.34437       1.34437       152.603       153.948    
loop,thermsimp(1:2)       79   5.02406      0.626782    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    378        160.28          0.86          1.15         25.21          0.21          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    160.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       79
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       80
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      377     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -3.29165       3.29165       150.072       153.363    
   2  0.744737     -0.294724     -0.892210      0.892210       151.313       152.205    
   3  0.361564E-01  -3.31990      -10.0502       10.0502       151.846       161.896    
   4  0.312099      -1.16444      -3.52507       3.52507       152.198       155.723    
   5  0.119132      -2.12752      -6.44060       6.44060       152.040       158.481    
   6  0.617735     -0.481696      -1.45822       1.45822       152.254       153.713    
   7  0.117626      -2.14025      -6.47911       6.47911       152.603       159.083    
   8  0.258570      -1.35259      -4.09466       4.09466       153.696       157.790    
   9  0.851854E-01  -2.46293      -7.45595       7.45595       149.281       156.737    
  10  0.220620      -1.51131      -4.57516       4.57516       154.189       158.764    
  11  0.648876     -0.432513      -1.30934       1.30934       153.409       154.719    
  12  0.958689     -0.421884E-01 -0.127716      0.127716       152.717       152.845    
  13  0.240652      -1.42440      -4.31205       4.31205       153.690       158.002    
  14  0.975871     -0.244252E-01 -0.739418E-01  0.739418E-01   153.572       153.646    
  15  0.467835     -0.759639      -2.29963       2.29963       152.374       154.674    
  16  0.398205     -0.920788      -2.78748       2.78748       155.132       157.919    
  17  0.757338E-01  -2.58053      -7.81197       7.81197       154.957       162.768    
  18  0.654643     -0.423666      -1.28255       1.28255       154.494       155.777    
  19  0.305298      -1.18647      -3.59176       3.59176       150.536       154.128    
  20  0.435768     -0.830645      -2.51459       2.51459       155.841       158.356    
  21  0.689410     -0.371920      -1.12590       1.12590       155.446       156.572    
  22  0.267500      -1.31864      -3.99187       3.99187       156.578       160.570    
  23  0.590747     -0.526367      -1.59346       1.59346       155.803       157.397    
  24  0.108947E-01  -4.51948      -13.6817       13.6817       155.776       169.457    
  25  0.236025      -1.44382      -4.37083       4.37083       156.660       161.031    
  26  0.590760     -0.526345      -1.59339       1.59339       155.109       156.702    
  27  0.782443     -0.245334     -0.742693      0.742693       156.234       156.977    
  28  0.702257     -0.353456      -1.07001       1.07001       158.180       159.250    
  29  0.764991     -0.267891     -0.810981      0.810981       154.726       155.537    
  30  0.753362     -0.283210     -0.857353      0.857353       154.646       155.503    
  31  0.961949E-01  -2.34138      -7.08799       7.08799       154.062       161.150    
  32  0.541564     -0.613294      -1.85661       1.85661       157.688       159.545    
  33  0.474786     -0.744891      -2.25499       2.25499       157.121       159.376    
  34  0.242842      -1.41534      -4.28463       4.28463       156.606       160.891    
  35  0.495414     -0.702361      -2.12624       2.12624       158.526       160.652    
  36  0.636645     -0.451543      -1.36695       1.36695       158.663       160.029    
  37  0.758087     -0.276957     -0.838425      0.838425       152.539       153.377    
  38  0.209321      -1.56389      -4.73432       4.73432       158.361       163.095    
  39  0.484343     -0.724961      -2.19466       2.19466       157.599       159.794    
  40  0.499790     -0.693567      -2.09962       2.09962       158.974       161.073    
  41  0.316628      -1.15003      -3.48145       3.48145       160.242       163.723    
  42  0.705469     -0.348892      -1.05619       1.05619       153.051       154.107    
  43  0.514591     -0.664383      -2.01127       2.01127       158.490       160.501    
  44  0.869006     -0.140406     -0.425047      0.425047       160.478       160.903    
  45  0.112600      -2.18392      -6.61131       6.61131       158.348       164.959    
  46  0.511991     -0.669449      -2.02661       2.02661       160.107       162.134    
  47  0.477456     -0.739283      -2.23801       2.23801       155.551       157.789    
  48  0.494460     -0.704290      -2.13208       2.13208       159.717       161.849    
  49  0.698938     -0.358193      -1.08435       1.08435       157.855       158.939    
  50  0.430212     -0.843478      -2.55344       2.55344       159.336       161.890    
  51  0.474243E-01  -3.04862      -9.22901       9.22901       153.757       162.986    
  52  0.167497      -1.78679      -5.40910       5.40910       160.975       166.384    
  53  0.233811      -1.45324      -4.39936       4.39936       158.917       163.316    
  54  0.760101     -0.274304     -0.830393      0.830393       161.207       162.037    
  55  0.195143      -1.63402      -4.94664       4.94664       157.065       162.012    
  56  0.822875     -0.194951     -0.590170      0.590170       161.330       161.920    
  57  0.332571      -1.10090      -3.33273       3.33273       161.060       164.393    
  58  0.682214     -0.382412      -1.15767       1.15767       162.340       163.498    
  59  0.560875E-01  -2.88084      -8.72110       8.72110       158.046       166.767    
  60  0.407464     -0.897802      -2.71789       2.71789       161.872       164.590    
  61  0.650997     -0.429250      -1.29946       1.29946       156.586       157.886    
  62  0.426312E-01  -3.15517      -9.55156       9.55156       161.091       170.643    
  63  0.556139E-01  -2.88932      -8.74677       8.74677       159.375       168.122    
  64  0.837058     -0.177861     -0.538435      0.538435       159.789       160.328    
  65  0.655823     -0.421864      -1.27710       1.27710       158.812       160.089    
  66  0.846314E-02  -4.77204      -14.4463       14.4463       156.387       170.833    
  67  0.227818E-01  -3.78179      -11.4485       11.4485       160.604       172.053    
  68  0.401219     -0.913248      -2.76465       2.76465       165.090       167.854    
  69  0.663900     -0.409624      -1.24004       1.24004       160.049       161.289    
  70  0.660940     -0.414092      -1.25357       1.25357       162.767       164.021    
  71  0.106131      -2.24308      -6.79042       6.79042       155.176       161.966    
  72  0.609372     -0.495326      -1.49949       1.49949       164.985       166.485    
  73  0.705689     -0.348581      -1.05525       1.05525       155.207       156.263    
  74  0.612419     -0.490339      -1.48439       1.48439       164.031       165.515    
  75  0.190203      -1.65966      -5.02425       5.02425       160.278       165.302    
loop,thermsimp(1:2)       80   3.29165      0.892210    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    379        153.75          0.87          1.15         25.23          0.12          0.05         27.42
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    380        155.74          0.86          1.16         25.22          0.38          0.05         27.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       80
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       81
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      379     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -3.23109       3.23109       151.313       154.544    
   2  0.822787     -0.195058     -0.590493      0.590493       152.717       153.308    
   3  0.320831E-01  -3.43942      -10.4121       10.4121       150.072       160.484    
   4  0.224034      -1.49596      -4.52867       4.52867       152.539       157.067    
   5  0.200770      -1.60559      -4.86057       4.86057       153.572       158.433    
   6  0.983846     -0.162863E-01 -0.493030E-01  0.493030E-01   152.254       152.304    
   7  0.762274     -0.271449     -0.821751      0.821751       153.051       153.872    
   8  0.872649     -0.136221     -0.412380      0.412380       150.536       150.948    
   9  0.366891      -1.00269      -3.03542       3.03542       152.374       155.409    
  10  0.800852     -0.222079     -0.672295      0.672295       153.409       154.082    
  11  0.755695     -0.280117     -0.847990      0.847990       154.646       155.494    
  12  0.595174     -0.518902      -1.57086       1.57086       154.726       156.297    
  13  0.316509      -1.15040      -3.48259       3.48259       152.198       155.681    
  14  0.847901     -0.164991     -0.499472      0.499472       154.494       154.994    
  15  0.116195      -2.15248      -6.51615       6.51615       155.207       161.723    
  16  0.121963      -2.10403      -6.36949       6.36949       155.446       161.815    
  17  0.298485      -1.20903      -3.66008       3.66008       155.109       158.769    
  18  0.698751     -0.358461      -1.08516       1.08516       149.281       150.366    
  19  0.248186      -1.39358      -4.21873       4.21873       156.234       160.453    
  20  0.717251     -0.332329      -1.00605       1.00605       155.803       156.809    
  21  0.591856     -0.524491      -1.58778       1.58778       155.551       157.139    
  22  0.780177E-01  -2.55082      -7.72203       7.72203       153.696       161.418    
  23  0.314281      -1.15747      -3.50397       3.50397       156.586       160.090    
  24  0.565423E-01  -2.87277      -8.69665       8.69665       155.132       163.828    
  25  0.964829     -0.358044E-01 -0.108390      0.108390       153.690       153.799    
  26  0.900157     -0.105186     -0.318428      0.318428       155.841       156.160    
  27  0.656998     -0.420074      -1.27168       1.27168       152.040       153.312    
  28  0.888436E-01  -2.42088      -7.32866       7.32866       154.189       161.518    
  29  0.853838     -0.158014     -0.478352      0.478352       157.855       158.333    
  30  0.704842     -0.349782      -1.05889       1.05889       152.603       153.662    
  31  0.890111     -0.116409     -0.352401      0.352401       158.180       158.532    
  32  0.424397     -0.857087      -2.59464       2.59464       157.121       159.715    
  33  0.959371     -0.414778E-01 -0.125565      0.125565       157.688       157.814    
  34  0.323832      -1.12753      -3.41335       3.41335       157.599       161.012    
  35  0.943913     -0.577217E-01 -0.174739      0.174739       158.663       158.837    
  36  0.119048      -2.12823      -6.44272       6.44272       158.812       165.254    
  37  0.427842E-01  -3.15159      -9.54071       9.54071       159.789       169.330    
  38  0.433544     -0.835761      -2.53008       2.53008       158.490       161.020    
  39  0.773173     -0.257253     -0.778775      0.778775       156.578       157.357    
  40  0.455657     -0.786014      -2.37948       2.37948       158.526       160.905    
  41  0.362132      -1.01575      -3.07494       3.07494       156.606       159.681    
  42  0.775394     -0.254384     -0.770089      0.770089       160.478       161.248    
  43  0.889906     -0.116639     -0.353099      0.353099       156.660       157.013    
  44  0.415923     -0.877255      -2.65569       2.65569       158.974       161.629    
  45  0.374532E-01  -3.28466      -9.94358       9.94358       154.062       164.005    
  46  0.904805     -0.100036     -0.302836      0.302836       160.049       160.352    
  47  0.130905      -2.03328      -6.15530       6.15530       159.717       165.873    
  48  0.951733     -0.494710E-01 -0.149762      0.149762       159.336       159.486    
  49  0.720673     -0.327570     -0.991643      0.991643       151.846       152.838    
  50  0.425150     -0.855314      -2.58927       2.58927       161.330       163.919    
  51  0.464059     -0.767744      -2.32417       2.32417       155.176       157.500    
  52  0.822031     -0.195978     -0.593278      0.593278       157.065       157.658    
  53  0.325542      -1.12226      -3.39740       3.39740       161.207       164.604    
  54  0.701043     -0.355186      -1.07524       1.07524       160.107       161.183    
  55  0.135013      -2.00239      -6.06177       6.06177       154.957       161.018    
  56  0.911632     -0.925193E-01 -0.280081      0.280081       153.757       154.037    
  57  0.172993      -1.75450      -5.31136       5.31136       158.361       163.673    
  58  0.401556     -0.912409      -2.76211       2.76211       158.917       161.679    
  59  0.906091     -0.986152E-01 -0.298535      0.298535       162.340       162.639    
  60  0.322588      -1.13138      -3.42500       3.42500       160.242       163.667    
  61  0.779620     -0.248949     -0.753637      0.753637       162.767       163.521    
  62  0.886087     -0.120940     -0.366119      0.366119       161.060       161.426    
  63  0.841445     -0.172634     -0.522611      0.522611       161.872       162.395    
  64  0.960060E-01  -2.34334      -7.09394       7.09394       158.348       165.442    
  65  0.198159      -1.61868      -4.90020       4.90020       160.278       165.178    
  66  0.762088E-01  -2.57428      -7.79304       7.79304       164.031       171.824    
  67  0.829173     -0.187327     -0.567089      0.567089       160.975       161.542    
  68  0.725953     -0.320270     -0.969544      0.969544       164.985       165.955    
  69  0.881009     -0.126687     -0.383517      0.383517       158.046       158.430    
  70  0.964096     -0.365643E-01 -0.110690      0.110690       165.090       165.200    
  71  0.602895     -0.506013      -1.53184       1.53184       159.375       160.907    
  72  0.402816     -0.909276      -2.75263       2.75263       155.776       158.528    
  73  0.114891      -2.16377      -6.55033       6.55033       161.091       167.642    
  74  0.501101     -0.690948      -2.09169       2.09169       156.387       158.479    
  75  0.102063E-01  -4.58475      -13.8793       13.8793       153.750       167.630    
loop,thermsimp(1:2)       81   3.23109      0.590493    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381        152.12          0.87          1.15         25.19          0.51          0.05         27.78
Just calling func    0   0         27.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    382        155.33          0.86          1.16         25.23          0.18          0.06         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    152.12       0.9360     -2.024      3.297     -102.6      1.028    
                      0.4129      1.250     -99.70      3.535     0.2567    
                       1.885     -1.359      1.530      5893.      4538.    
                     -0.4087      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5493.      448.7    
                     -0.5672     -6.894     -4.671     -3.189      5.913    
                      -15.25     -3.104      5934.      0.000      6079.    

                       1715.      6043.      680.9      6079.      4431.    
                       5074.     0.4747E-01 0.1065      0.000     0.1100    
                     -0.1891    -0.1237     0.8306E-01 0.1660E-01-0.5950E-01

                     -0.4496    -0.8968      0.000    -0.1013E-01-0.5171E-01
                       0.000    -0.6478E-02 0.3680E-02-0.1928    -0.1246E-01
                     -0.4527E-01-0.4792E-01-0.4805     -1.157      3646.    

                     -0.9994     -1.042     -2.417     -2.372    -0.2393    
                     -0.1657      9.136      8.764    -0.1788E+05 -4.000    
                     -0.6412    -0.8214      9.279      8.799    -0.1739E+05

                      -4.000     0.1749    -0.9107      8.939      8.977    
                     -0.1785E+05 -7.000    -0.7481     -1.022      9.084    
                       8.740    -0.2042E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       81
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       82
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      381     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -1.77454       1.77454       149.281       151.055    
   2  0.926592     -0.762421E-01 -0.230806      0.230806       150.536       150.767    
   3  0.766762     -0.265579     -0.803981      0.803981       152.254       153.058    
   4  0.627980     -0.465247      -1.40843       1.40843       151.846       153.254    
   5  0.647527     -0.434594      -1.31564       1.31564       152.717       154.033    
   6  0.639464     -0.447125      -1.35357       1.35357       152.040       153.394    
   7  0.168437      -1.78119      -5.39216       5.39216       152.603       157.996    
   8  0.725133     -0.321400     -0.972966      0.972966       153.690       154.663    
   9  0.620073     -0.477917      -1.44679       1.44679       153.051       154.497    
  10  0.837394     -0.177461     -0.537222      0.537222       153.757       154.295    
  11  0.763326     -0.270070     -0.817575      0.817575       153.409       154.227    
  12  0.216703      -1.52923      -4.62939       4.62939       151.313       155.942    
  13  0.846730     -0.166373     -0.503657      0.503657       154.494       154.998    
  14  0.712127     -0.339499      -1.02776       1.02776       152.374       153.402    
  15  0.731222     -0.313039     -0.947654      0.947654       154.646       155.593    
  16  0.131329      -2.03005      -6.14552       6.14552       152.198       158.344    
  17  0.946517     -0.549662E-01 -0.166398      0.166398       155.841       156.008    
  18  0.303743      -1.19157      -3.60722       3.60722       154.726       158.334    
  19  0.452199     -0.793633      -2.40254       2.40254       155.803       158.206    
  20  0.176302      -1.73556      -5.25400       5.25400       156.660       161.914    
  21  0.569871     -0.562345      -1.70237       1.70237       152.539       154.241    
  22  0.267873      -1.31724      -3.98765       3.98765       155.551       159.538    
  23  0.295877      -1.21781      -3.68664       3.68664       156.578       160.264    
  24  0.658567     -0.417689      -1.26446       1.26446       155.176       156.440    
  25  0.633120     -0.457096      -1.38375       1.38375       157.065       158.449    
  26  0.655522     -0.422324      -1.27849       1.27849       157.688       158.967    
  27  0.532295     -0.630558      -1.90887       1.90887       157.855       159.763    
  28  0.611209     -0.492317      -1.49038       1.49038       158.046       159.537    
  29  0.768812E-01  -2.56549      -7.76645       7.76645       153.572       161.339    
  30  0.845132     -0.168262     -0.509375      0.509375       156.387       156.896    
  31  0.133696      -2.01219      -6.09144       6.09144       155.776       161.867    
  32  0.850522E-01  -2.46449      -7.46068       7.46068       158.180       165.640    
  33  0.901960     -0.103185     -0.312369      0.312369       155.109       155.421    
  34  0.394454E-01  -3.23284      -9.78668       9.78668       158.663       168.449    
  35  0.152819      -1.87850      -5.68673       5.68673       159.336       165.023    
  36  0.951369     -0.498538E-01 -0.150921      0.150921       156.606       156.757    
  37  0.909075     -0.953273E-01 -0.288582      0.288582       157.121       157.409    
  38  0.552964     -0.592462      -1.79355       1.79355       156.586       158.380    
  39  0.904748     -0.100099     -0.303027      0.303027       160.049       160.352    
  40  0.434860     -0.832731      -2.52090       2.52090       156.234       158.755    
  41  0.807557E-01  -2.51633      -7.61761       7.61761       150.072       157.689    
  42  0.245089      -1.40614      -4.25676       4.25676       158.526       162.782    
  43  0.566857     -0.567648      -1.71842       1.71842       159.375       161.094    
  44  0.154441      -1.86794      -5.65477       5.65477       157.599       163.254    
  45  0.961849     -0.388974E-01 -0.117753      0.117753       154.957       155.074    
  46  0.267234      -1.31963      -3.99489       3.99489       158.490       162.485    
  47  0.170042      -1.77171      -5.36345       5.36345       160.107       165.471    
  48  0.796608     -0.227393     -0.688381      0.688381       160.478       161.166    
  49  0.474137     -0.746260      -2.25913       2.25913       153.696       155.955    
  50  0.164737      -1.80340      -5.45940       5.45940       161.060       166.519    
  51  0.728428     -0.316867     -0.959243      0.959243       154.189       155.149    
  52  0.259284      -1.34983      -4.08631       4.08631       160.975       165.061    
  53  0.932415     -0.699773E-01 -0.211840      0.211840       158.974       159.185    
  54  0.905731     -0.990126E-01 -0.299738      0.299738       158.917       159.217    
  55  0.975166     -0.251472E-01 -0.761273E-01  0.761273E-01   155.207       155.283    
  56  0.312519      -1.16309      -3.52099       3.52099       155.446       158.967    
  57  0.363326      -1.01246      -3.06498       3.06498       161.872       164.937    
  58  0.633693     -0.456191      -1.38102       1.38102       162.340       163.721    
  59  0.765432     -0.267315     -0.809235      0.809235       162.767       163.577    
  60  0.197736      -1.62082      -4.90667       4.90667       160.242       165.149    
  61  0.825376     -0.191916     -0.580983      0.580983       158.361       158.942    
  62  0.401700     -0.912049      -2.76102       2.76102       155.132       157.893    
  63  0.637472     -0.450245      -1.36301       1.36301       161.330       162.693    
  64  0.989702     -0.103516E-01 -0.313372E-01  0.313372E-01   154.062       154.093    
  65  0.980344     -0.198515E-01 -0.600960E-01  0.600960E-01   161.207       161.267    
  66  0.719848     -0.328715     -0.995109      0.995109       160.278       161.273    
  67  0.779598     -0.248976     -0.753719      0.753719       165.090       165.843    
  68  0.979665     -0.205443E-01 -0.621931E-01  0.621931E-01   158.812       158.874    
  69  0.904051E-01  -2.40345      -7.27591       7.27591       158.348       165.624    
  70  0.484052     -0.725563      -2.19648       2.19648       159.717       161.914    
  71  0.487443     -0.718583      -2.17535       2.17535       164.985       167.161    
  72  0.132340      -2.02238      -6.12230       6.12230       153.750       159.873    
  73  0.629957E-01  -2.76469      -8.36947       8.36947       161.091       169.461    
  74  0.841050     -0.173104     -0.524032      0.524032       159.789       160.313    
  75  0.258481      -1.35293      -4.09569       4.09569       152.119       156.215    
loop,thermsimp(1:2)       82   1.77454      0.230806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383        156.42          0.87          1.15         25.20          0.21          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    156.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       82
neval is:      382
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       83
neval is:      382


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      382     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -1.44440       1.44440       150.536       151.980    
   2  0.835522     -0.179699     -0.543998      0.543998       149.281       149.825    
   3  0.626661     -0.467350      -1.41480       1.41480       152.254       153.669    
   4  0.197939      -1.61980      -4.90356       4.90356       151.846       156.749    
   5  0.842637     -0.171219     -0.518326      0.518326       152.040       152.558    
   6  0.873669     -0.135053     -0.408844      0.408844       152.374       152.783    
   7  0.298180E-01  -3.51264      -10.6337       10.6337       152.717       163.351    
   8  0.548374     -0.600797      -1.81878       1.81878       154.062       155.880    
   9  0.407469E-01  -3.20037      -9.68841       9.68841       153.409       163.098    
  10  0.210105E-02  -6.16532      -18.6641       18.6641       152.539       171.203    
  11  0.631577     -0.459536      -1.39114       1.39114       153.757       155.149    
  12  0.944026     -0.576013E-01 -0.174375      0.174375       153.051       153.225    
  13  0.492775     -0.707703      -2.14241       2.14241       153.690       155.833    
  14  0.195107      -1.63421      -4.94719       4.94719       154.494       159.442    
  15  0.775688     -0.254005     -0.768941      0.768941       154.957       155.725    
  16  0.763907     -0.269310     -0.815274      0.815274       154.189       155.005    
  17  0.797499     -0.226275     -0.684996      0.684996       155.207       155.892    
  18  0.639217     -0.447511      -1.35474       1.35474       155.109       156.463    
  19  0.775225     -0.254602     -0.770750      0.770750       154.646       155.416    
  20  0.680633     -0.384733      -1.16469       1.16469       151.313       152.477    
  21  0.532184     -0.630766      -1.90950       1.90950       153.696       155.605    
  22  0.843009     -0.170778     -0.516992      0.516992       155.841       156.358    
  23  0.943186     -0.584913E-01 -0.177069      0.177069       152.119       152.297    
  24  0.601611     -0.508143      -1.53829       1.53829       155.176       156.714    
  25  0.259021      -1.35084      -4.08938       4.08938       156.606       160.696    
  26  0.855132     -0.156500     -0.473768      0.473768       156.387       156.861    
  27  0.351229      -1.04632      -3.16749       3.16749       157.121       160.288    
  28  0.950362     -0.509122E-01 -0.154125      0.154125       150.072       150.226    
  29  0.447301     -0.804524      -2.43552       2.43552       155.132       157.567    
  30  0.325509      -1.12237      -3.39771       3.39771       152.603       156.001    
  31  0.717010     -0.332666      -1.00707       1.00707       155.803       156.810    
  32  0.676718     -0.390500      -1.18215       1.18215       154.726       155.909    
  33  0.493623     -0.705983      -2.13720       2.13720       152.198       154.335    
  34  0.155805E-01  -4.16174      -12.5987       12.5987       156.586       169.185    
  35  0.417708     -0.872973      -2.64273       2.64273       157.065       159.708    
  36  0.395067     -0.928699      -2.81143       2.81143       156.234       159.046    
  37  0.977835     -0.224139E-01 -0.678530E-01  0.678530E-01   158.812       158.879    
  38  0.603414     -0.505151      -1.52923       1.52923       158.361       159.890    
  39  0.173810      -1.74979      -5.29710       5.29710       155.446       160.743    
  40  0.979719     -0.204895E-01 -0.620272E-01  0.620272E-01   157.688       157.750    
  41  0.234071      -1.45213      -4.39599       4.39599       158.974       163.370    
  42  0.264051      -1.33161      -4.03116       4.03116       158.917       162.948    
  43  0.756353     -0.279247     -0.845358      0.845358       158.046       158.892    
  44  0.980782     -0.194046E-01 -0.587430E-01  0.587430E-01   155.551       155.609    
  45  0.444591E-01  -3.11319      -9.42447       9.42447       157.855       167.279    
  46  0.276895      -1.28412      -3.88737       3.88737       153.750       157.638    
  47  0.754338     -0.281915     -0.853435      0.853435       156.578       157.431    
  48  0.288496      -1.24308      -3.76313       3.76313       159.789       163.553    
  49  0.945547     -0.559915E-01 -0.169502      0.169502       160.049       160.219    
  50  0.698722     -0.358502      -1.08528       1.08528       159.375       160.461    
  51  0.586821     -0.533035      -1.61364       1.61364       160.478       162.092    
  52  0.173241      -1.75307      -5.30703       5.30703       161.207       166.514    
  53  0.157974      -1.84532      -5.58630       5.58630       160.278       165.864    
  54  0.789304     -0.236604     -0.716265      0.716265       153.572       154.289    
  55  0.351815      -1.04465      -3.16244       3.16244       155.776       158.938    
  56  0.109517      -2.21167      -6.69534       6.69534       159.717       166.413    
  57  0.884115     -0.123168     -0.372864      0.372864       156.660       157.033    
  58  0.590256     -0.527198      -1.59597       1.59597       158.490       160.086    
  59  0.720991     -0.327128     -0.990306      0.990306       161.330       162.320    
  60  0.584697     -0.536661      -1.62462       1.62462       158.526       160.150    
  61  0.798909E-01  -2.52709      -7.65020       7.65020       157.599       165.249    
  62  0.476858     -0.740537      -2.24181       2.24181       162.767       165.009    
  63  0.366415      -1.00399      -3.03935       3.03935       162.340       165.380    
  64  0.579292     -0.545948      -1.65273       1.65273       161.872       163.525    
  65  0.859086     -0.151886     -0.459799      0.459799       159.336       159.796    
  66  0.178211      -1.72479      -5.22141       5.22141       160.975       166.196    
  67  0.372347     -0.987929      -2.99073       2.99073       160.242       163.233    
  68  0.132090      -2.02427      -6.12801       6.12801       160.107       166.235    
  69  0.292834      -1.22815      -3.71795       3.71795       158.348       162.066    
  70  0.788579     -0.237522     -0.719045      0.719045       158.180       158.899    
  71  0.555831     -0.587292      -1.77789       1.77789       165.090       166.868    
  72  0.621814     -0.475115      -1.43830       1.43830       161.060       162.498    
  73  0.801237     -0.221598     -0.670839      0.670839       164.985       165.656    
  74  0.570173     -0.561816      -1.70077       1.70077       158.663       160.363    
  75  0.711172E-01  -2.64343      -8.00237       8.00237       156.420       164.422    
loop,thermsimp(1:2)       83   1.44440      0.543998    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    384        155.27          0.87          1.15         25.21          0.25          0.05         27.53
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    155.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       83
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       84
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      383     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -1.68187       1.68187       149.281       150.963    
   2  0.583943E-01  -2.84054      -8.59908       8.59908       150.072       158.671    
   3  0.377108     -0.975224      -2.95227       2.95227       150.536       153.488    
   4  0.117758      -2.13912      -6.47571       6.47571       152.119       158.595    
   5  0.531627     -0.631812      -1.91267       1.91267       151.313       153.225    
   6  0.348101      -1.05526      -3.19457       3.19457       152.040       155.235    
   7  0.713050     -0.338204      -1.02384       1.02384       152.374       153.398    
   8  0.895286     -0.110612     -0.334853      0.334853       153.051       153.385    
   9  0.873863     -0.134831     -0.408171      0.408171       152.254       152.663    
  10  0.225074      -1.49132      -4.51465       4.51465       153.572       158.087    
  11  0.542220     -0.612083      -1.85294       1.85294       152.198       154.051    
  12  0.262707      -1.33672      -4.04661       4.04661       154.189       158.236    
  13  0.864358E-01  -2.44835      -7.41183       7.41183       153.757       161.169    
  14  0.468331     -0.758581      -2.29643       2.29643       154.646       156.942    
  15  0.896509     -0.109247     -0.330721      0.330721       153.696       154.027    
  16  0.169842E-01  -4.07547      -12.3376       12.3376       155.551       167.888    
  17  0.980158     -0.200410E-01 -0.606696E-01  0.606696E-01   154.957       155.017    
  18  0.252821      -1.37507      -4.16272       4.16272       153.690       157.853    
  19  0.556823     -0.585507      -1.77249       1.77249       154.062       155.834    
  20  0.520304     -0.653342      -1.97784       1.97784       155.207       157.185    
  21  0.956705E-01  -2.34685      -7.10454       7.10454       154.726       161.831    
  22  0.458762     -0.779224      -2.35892       2.35892       152.603       154.962    
  23  0.684654     -0.378842      -1.14686       1.14686       155.841       156.988    
  24  0.749393     -0.288492     -0.873344      0.873344       155.109       155.982    
  25  0.112724      -2.18282      -6.60798       6.60798       155.176       161.784    
  26  0.642114     -0.442989      -1.34105       1.34105       151.846       153.187    
  27  0.881888     -0.125691     -0.380500      0.380500       155.803       156.184    
  28  0.933845     -0.684452E-01 -0.207202      0.207202       156.387       156.594    
  29  0.124482      -2.08359      -6.30760       6.30760       156.660       162.967    
  30  0.189487      -1.66344      -5.03568       5.03568       156.578       161.613    
  31  0.526869     -0.640804      -1.93989       1.93989       155.132       157.071    
  32  0.490162     -0.713020      -2.15851       2.15851       153.750       155.909    
  33  0.292049      -1.23083      -3.72607       3.72607       157.688       161.415    
  34  0.646685     -0.435896      -1.31958       1.31958       158.812       160.131    
  35  0.738289     -0.303420     -0.918536      0.918536       158.046       158.965    
  36  0.379268     -0.969513      -2.93498       2.93498       158.180       161.115    
  37  0.691037     -0.369562      -1.11877       1.11877       155.776       156.895    
  38  0.566288     -0.568653      -1.72147       1.72147       156.234       157.956    
  39  0.130734      -2.03459      -6.15926       6.15926       154.494       160.654    
  40  0.298876      -1.20773      -3.65612       3.65612       157.065       160.721    
  41  0.369194     -0.996434      -3.01648       3.01648       159.336       162.353    
  42  0.291325      -1.23331      -3.73358       3.73358       158.361       162.095    
  43  0.828296     -0.188384     -0.570291      0.570291       158.490       159.060    
  44  0.540492E-01  -2.91786      -8.83316       8.83316       158.526       167.359    
  45  0.979889     -0.203162E-01 -0.615028E-01  0.615028E-01   160.049       160.111    
  46  0.411533     -0.887866      -2.68781       2.68781       157.121       159.809    
  47  0.430635     -0.842495      -2.55046       2.55046       158.663       161.213    
  48  0.948338     -0.530447E-01 -0.160581      0.160581       159.375       159.536    
  49  0.400713E-02  -5.51968      -16.7096       16.7096       156.606       173.316    
  50  0.963092     -0.376065E-01 -0.113845      0.113845       155.446       155.560    
  51  0.101802      -2.28472      -6.91648       6.91648       158.348       165.264    
  52  0.161305      -1.82446      -5.52314       5.52314       160.478       166.001    
  53  0.579295     -0.545944      -1.65272       1.65272       161.330       162.982    
  54  0.246178      -1.40170      -4.24334       4.24334       161.060       165.303    
  55  0.783155     -0.244425     -0.739940      0.739940       158.917       159.657    
  56  0.643375     -0.441028      -1.33511       1.33511       153.409       154.745    
  57  0.440007     -0.820964      -2.48528       2.48528       160.242       162.727    
  58  0.478097     -0.737941      -2.23395       2.23395       152.717       154.951    
  59  0.174252      -1.74725      -5.28941       5.28941       158.974       164.263    
  60  0.947266E-01  -2.35676      -7.13456       7.13456       161.872       169.007    
  61  0.115878      -2.15522      -6.52444       6.52444       159.789       166.314    
  62  0.523006     -0.648162      -1.96216       1.96216       156.420       158.382    
  63  0.114447      -2.16765      -6.56206       6.56206       162.767       169.329    
  64  0.694365     -0.364757      -1.10422       1.10422       157.599       158.703    
  65  0.551880     -0.594425      -1.79949       1.79949       162.340       164.140    
  66  0.558116     -0.583189      -1.76547       1.76547       164.985       166.751    
  67  0.160284      -1.83081      -5.54236       5.54236       160.278       165.820    
  68  0.786878     -0.239682     -0.725584      0.725584       160.975       161.700    
  69  0.450862     -0.796593      -2.41151       2.41151       160.107       162.519    
  70  0.857757     -0.153434     -0.464488      0.464488       159.717       160.182    
  71  0.789461     -0.236405     -0.715663      0.715663       161.207       161.923    
  72  0.507184     -0.678881      -2.05516       2.05516       165.090       167.145    
  73  0.853230     -0.158726     -0.480508      0.480508       157.855       158.335    
  74  0.879150     -0.128800     -0.389913      0.389913       156.586       156.976    
  75  0.380509     -0.966245      -2.92509       2.92509       155.270       158.195    
loop,thermsimp(1:2)       84   1.68187       8.59908    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    385        153.01          0.86          1.15         25.22          0.10          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    386        152.87          0.85          1.15         25.21          0.14          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       84
neval is:      385
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       85
neval is:      385


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      385     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.197958      0.197958       149.281       149.479    
   2  0.765516     -0.267206     -0.808904      0.808904       152.254       153.063    
   3  0.899266     -0.106176     -0.321424      0.321424       151.846       152.167    
   4  0.953341     -0.477822E-01 -0.144650      0.144650       151.313       151.457    
   5  0.642356     -0.442612      -1.33991       1.33991       153.051       154.390    
   6  0.265713      -1.32534      -4.01217       4.01217       152.374       156.386    
   7  0.379937     -0.967749      -2.92964       2.92964       150.536       153.466    
   8  0.449606     -0.799384      -2.41995       2.41995       153.696       156.116    
   9  0.810725     -0.209826     -0.635202      0.635202       152.198       152.833    
  10  0.218977      -1.51879      -4.59779       4.59779       153.409       158.007    
  11  0.456613     -0.783919      -2.37314       2.37314       152.717       155.090    
  12  0.439289E-02  -5.42777      -16.4313       16.4313       152.603       169.035    
  13  0.710409     -0.341914      -1.03507       1.03507       154.957       155.992    
  14  0.385315     -0.953695      -2.88710       2.88710       152.040       154.927    
  15  0.116701      -2.14814      -6.50302       6.50302       155.446       161.949    
  16  0.985237     -0.148728E-01 -0.450239E-01  0.450239E-01   154.062       154.107    
  17  0.856588     -0.154798     -0.468615      0.468615       153.750       154.219    
  18  0.155419      -1.86163      -5.63566       5.63566       155.109       160.744    
  19  0.257525      -1.35664      -4.10692       4.10692       155.803       159.910    
  20  0.548716     -0.600174      -1.81689       1.81689       156.387       158.204    
  21  0.589698     -0.528145      -1.59884       1.59884       155.776       157.375    
  22  0.884364     -0.122887     -0.372011      0.372011       154.646       155.018    
  23  0.871018E-01  -2.44068      -7.38860       7.38860       156.586       163.975    
  24  0.486795     -0.719912      -2.17937       2.17937       155.841       158.021    
  25  0.161417      -1.82376      -5.52103       5.52103       155.132       160.653    
  26  0.598774     -0.512871      -1.55260       1.55260       155.207       156.760    
  27  0.483527     -0.726647      -2.19976       2.19976       153.690       155.890    
  28  0.715961     -0.334130      -1.01150       1.01150       156.234       157.246    
  29  0.771801     -0.259029     -0.784150      0.784150       153.572       154.356    
  30  0.458713     -0.779330      -2.35924       2.35924       155.270       157.629    
  31  0.235181      -1.44740      -4.38168       4.38168       154.189       158.571    
  32  0.488220     -0.716988      -2.17052       2.17052       157.855       160.025    
  33  0.365473      -1.00656      -3.04714       3.04714       156.420       159.467    
  34  0.191311      -1.65386      -5.00668       5.00668       152.119       157.126    
  35  0.484999     -0.723609      -2.19056       2.19056       150.072       152.262    
  36  0.799086     -0.224286     -0.678975      0.678975       157.599       158.278    
  37  0.811458     -0.208923     -0.632467      0.632467       158.046       158.679    
  38  0.829885E-01  -2.48905      -7.53504       7.53504       158.490       166.025    
  39  0.731085     -0.313226     -0.948221      0.948221       159.375       160.324    
  40  0.854012     -0.157810     -0.477733      0.477733       158.917       159.395    
  41  0.699629     -0.357205      -1.08136       1.08136       157.121       158.202    
  42  0.918965     -0.845069E-01 -0.255825      0.255825       160.049       160.305    
  43  0.463498     -0.768952      -2.32783       2.32783       158.812       161.139    
  44  0.758690E-01  -2.57875      -7.80657       7.80657       159.717       167.524    
  45  0.577757     -0.548602      -1.66077       1.66077       154.494       156.155    
  46  0.897332     -0.108329     -0.327942      0.327942       157.065       157.393    
  47  0.522547     -0.649040      -1.96482       1.96482       158.180       160.145    
  48  0.408730E-01  -3.19729      -9.67906       9.67906       153.757       163.436    
  49  0.244793      -1.40734      -4.26041       4.26041       158.663       162.923    
  50  0.503867     -0.685443      -2.07502       2.07502       157.688       159.763    
  51  0.268075      -1.31649      -3.98537       3.98537       156.578       160.563    
  52  0.502965     -0.687236      -2.08045       2.08045       160.975       163.055    
  53  0.204120      -1.58905      -4.81049       4.81049       155.176       159.986    
  54  0.815323     -0.204171     -0.618080      0.618080       154.726       155.344    
  55  0.197358      -1.62274      -4.91247       4.91247       161.207       166.119    
  56  0.754254     -0.282026     -0.853770      0.853770       158.361       159.215    
  57  0.693043E-01  -2.66925      -8.08055       8.08055       159.336       167.417    
  58  0.913327     -0.906616E-01 -0.274457      0.274457       160.107       160.382    
  59  0.921558     -0.816897E-01 -0.247297      0.247297       160.242       160.489    
  60  0.383396     -0.958686      -2.90220       2.90220       156.660       159.562    
  61  0.641735     -0.443580      -1.34284       1.34284       161.330       162.673    
  62  0.380707     -0.965725      -2.92351       2.92351       162.340       165.264    
  63  0.877180E-01  -2.43363      -7.36726       7.36726       158.974       166.341    
  64  0.768830     -0.262886     -0.795828      0.795828       158.348       159.144    
  65  0.998270     -0.173121E-02 -0.524084E-02  0.524084E-02   161.060       161.065    
  66  0.504375     -0.684435      -2.07197       2.07197       160.278       162.350    
  67  0.789522     -0.236327     -0.715427      0.715427       160.478       161.193    
  68  0.182758E-01  -4.00218      -12.1157       12.1157       159.789       171.905    
  69  0.828868     -0.187695     -0.568203      0.568203       164.985       165.554    
  70  0.147499      -1.91393      -5.79400       5.79400       165.090       170.884    
  71  0.928056     -0.746629E-01 -0.226025      0.226025       158.526       158.752    
  72  0.575315     -0.552838      -1.67359       1.67359       155.551       157.224    
  73  0.634329     -0.455188      -1.37798       1.37798       161.872       163.250    
  74  0.245936      -1.40268      -4.24631       4.24631       162.767       167.014    
  75  0.812773     -0.207304     -0.627565      0.627565       152.866       153.493    
loop,thermsimp(1:2)       85  0.197958      0.808904    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    387        152.33          0.87          1.15         25.17          0.16          0.06         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    388        511.18          0.85          1.14         25.15          0.23          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       85
neval is:      387
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       86
neval is:      387


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      387     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -3.31614       3.31614       149.281       152.597    
   2  0.140144      -1.96508      -5.94885       5.94885       151.313       157.262    
   3  0.520913     -0.652172      -1.97430       1.97430       151.846       153.820    
   4  0.628337     -0.464678      -1.40671       1.40671       150.072       151.478    
   5  0.203324      -1.59296      -4.82231       4.82231       152.198       157.020    
   6  0.481205     -0.731462      -2.21433       2.21433       152.254       154.469    
   7  0.948759     -0.526009E-01 -0.159237      0.159237       150.536       150.695    
   8  0.251825      -1.37902      -4.17467       4.17467       152.866       157.041    
   9  0.363806      -1.01114      -3.06098       3.06098       154.062       157.123    
  10  0.465077     -0.765552      -2.31753       2.31753       153.750       156.068    
  11  0.580920     -0.543143      -1.64424       1.64424       153.572       155.217    
  12  0.957129     -0.438167E-01 -0.132645      0.132645       153.051       153.183    
  13  0.345007      -1.06419      -3.22159       3.22159       152.040       155.262    
  14  0.177852E-01  -4.02939      -12.1981       12.1981       154.646       166.844    
  15  0.843779     -0.169864     -0.514225      0.514225       152.717       153.231    
  16  0.765452     -0.267288     -0.809154      0.809154       154.726       155.536    
  17  0.453925     -0.789824      -2.39101       2.39101       153.690       156.081    
  18  0.378234     -0.972243      -2.94324       2.94324       154.957       157.900    
  19  0.167312      -1.78790      -5.41245       5.41245       153.696       159.108    
  20  0.240345      -1.42568      -4.31592       4.31592       154.494       158.810    
  21  0.868226     -0.141303     -0.427763      0.427763       152.374       152.802    
  22  0.907002     -0.976102E-01 -0.295493      0.295493       155.207       155.503    
  23  0.433040     -0.836925      -2.53360       2.53360       152.119       154.653    
  24  0.291080      -1.23416      -3.73613       3.73613       155.551       159.287    
  25  0.391091     -0.938815      -2.84205       2.84205       156.234       159.076    
  26  0.541803     -0.612853      -1.85527       1.85527       155.776       157.631    
  27  0.494251     -0.704711      -2.13335       2.13335       157.065       159.198    
  28  0.617376     -0.482277      -1.45998       1.45998       155.270       156.730    
  29  0.919515     -0.839094E-01 -0.254017      0.254017       153.409       153.663    
  30  0.836216     -0.178868     -0.541483      0.541483       155.841       156.383    
  31  0.436173     -0.829716      -2.51178       2.51178       157.121       159.633    
  32  0.175211      -1.74176      -5.27279       5.27279       156.387       161.660    
  33  0.304297      -1.18975      -3.60170       3.60170       157.599       161.201    
  34  0.996125     -0.388259E-02 -0.117537E-01  0.117537E-01   154.189       154.201    
  35  0.146253      -1.92242      -5.81968       5.81968       158.046       163.866    
  36  0.110666      -2.20124      -6.66374       6.66374       158.526       165.189    
  37  0.481190E-01  -3.03408      -9.18499       9.18499       158.348       167.533    
  38  0.342728      -1.07082      -3.24166       3.24166       158.361       161.603    
  39  0.998409E-01  -2.30418      -6.97537       6.97537       158.917       165.892    
  40  0.509248     -0.674821      -2.04287       2.04287       156.420       158.462    
  41  0.974159     -0.261804E-01 -0.792554E-01  0.792554E-01   156.660       156.739    
  42  0.950347     -0.509279E-01 -0.154173      0.154173       157.688       157.843    
  43  0.333494      -1.09813      -3.32434       3.32434       155.803       159.128    
  44  0.914660     -0.892024E-01 -0.270040      0.270040       155.176       155.446    
  45  0.249678      -1.38758      -4.20060       4.20060       157.855       162.055    
  46  0.512508     -0.668440      -2.02355       2.02355       158.180       160.203    
  47  0.592185     -0.523937      -1.58610       1.58610       160.049       161.635    
  48  0.931089     -0.714008E-01 -0.216150      0.216150       159.375       159.592    
  49  0.638700     -0.448321      -1.35719       1.35719       160.107       161.465    
  50  0.563786     -0.573081      -1.73487       1.73487       160.242       161.977    
  51  0.136824      -1.98906      -6.02143       6.02143       156.578       162.599    
  52  0.806361     -0.215224     -0.651541      0.651541       155.132       155.783    
  53  0.106433      -2.24024      -6.78182       6.78182       155.109       161.890    
  54  0.637638     -0.449985      -1.36223       1.36223       161.060       162.422    
  55  0.677480     -0.389375      -1.17874       1.17874       158.812       159.990    
  56  0.533764     -0.627801      -1.90053       1.90053       160.478       162.379    
  57  0.879213     -0.128728     -0.389696      0.389696       155.446       155.836    
  58  0.260545E-01  -3.64756      -11.0422       11.0422       160.278       171.320    
  59  0.249338      -1.38895      -4.20472       4.20472       161.330       165.534    
  60  0.101288      -2.28979      -6.93181       6.93181       158.663       165.594    
  61  0.563390     -0.573782      -1.73700       1.73700       160.975       162.712    
  62  0.735149     -0.307682     -0.931439      0.931439       161.872       162.803    
  63  0.720819     -0.327367     -0.991028      0.991028       153.757       154.748    
  64  0.493868     -0.705487      -2.13570       2.13570       156.586       158.722    
  65  0.417909     -0.872492      -2.64127       2.64127       162.340       164.981    
  66  0.529854     -0.635153      -1.92278       1.92278       164.985       166.908    
  67  0.732047     -0.311910     -0.944237      0.944237       158.490       159.434    
  68  0.926465     -0.763785E-01 -0.231219      0.231219       161.207       161.438    
  69  0.948726     -0.526350E-01 -0.159341      0.159341       158.974       159.133    
  70  0.433699     -0.835404      -2.52900       2.52900       162.767       165.296    
  71  0.901840     -0.103319     -0.312774      0.312774       159.336       159.649    
  72  0.804136     -0.217987     -0.659907      0.659907       159.717       160.377    
  73  0.347489      -1.05702      -3.19990       3.19990       152.603       155.803    
  74  0.971723     -0.286843E-01 -0.868353E-01  0.868353E-01   165.090       165.177    
  75  0.387000E-02  -5.55450      -16.8150       16.8150       152.325       169.140    
loop,thermsimp(1:2)       86   3.31614       5.94885    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    389        153.31          0.87          1.15         25.23          0.21          0.05         27.51
Just calling func    0   0         27.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    153.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       86
neval is:      388
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       87
neval is:      388


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      388     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -9.40725       9.40725       150.536       159.943    
   2  0.682805     -0.381545      -1.15504       1.15504       150.072       151.227    
   3  0.699780     -0.356989      -1.08070       1.08070       149.281       150.361    
   4  0.515086     -0.663422      -2.00836       2.00836       152.374       154.382    
   5  0.402461     -0.910157      -2.75529       2.75529       153.051       155.806    
   6  0.652803     -0.426480      -1.29107       1.29107       152.717       154.008    
   7  0.483213     -0.727297      -2.20173       2.20173       153.409       155.611    
   8  0.873684     -0.135037     -0.408793      0.408793       151.846       152.255    
   9  0.142648      -1.94738      -5.89525       5.89525       154.189       160.085    
  10  0.844357     -0.169180     -0.512155      0.512155       152.254       152.767    
  11  0.154187      -1.86959      -5.65975       5.65975       152.119       157.779    
  12  0.437314E-01  -3.12969      -9.47442       9.47442       153.757       163.232    
  13  0.455393E-02  -5.39176      -16.3223       16.3223       153.572       169.895    
  14  0.236800      -1.44054      -4.36091       4.36091       152.040       156.401    
  15  0.660181     -0.415241      -1.25705       1.25705       155.176       156.433    
  16  0.652586     -0.426813      -1.29208       1.29208       155.207       156.499    
  17  0.153101      -1.87666      -5.68116       5.68116       154.726       160.408    
  18  0.753412     -0.283143     -0.857150      0.857150       155.132       155.989    
  19  0.240839      -1.42363      -4.30970       4.30970       152.603       156.913    
  20  0.684622     -0.378888      -1.14700       1.14700       155.446       156.593    
  21  0.243018      -1.41462      -4.28244       4.28244       153.750       158.033    
  22  0.815539     -0.203906     -0.617279      0.617279       153.690       154.308    
  23  0.589355     -0.528726      -1.60060       1.60060       155.841       157.442    
  24  0.243009      -1.41466      -4.28255       4.28255       155.270       159.552    
  25  0.821886     -0.196154     -0.593812      0.593812       156.660       157.254    
  26  0.261401      -1.34170      -4.06170       4.06170       152.198       156.260    
  27  0.571134     -0.560131      -1.69567       1.69567       152.866       154.562    
  28  0.406429E-01  -3.20293      -9.69615       9.69615       154.062       163.758    
  29  0.341463      -1.07451      -3.25285       3.25285       151.313       154.566    
  30  0.252643      -1.37578      -4.16486       4.16486       155.776       159.941    
  31  0.503366     -0.686439      -2.07804       2.07804       157.688       159.766    
  32  0.247804      -1.39512      -4.22340       4.22340       154.957       159.180    
  33  0.902392     -0.102706     -0.310919      0.310919       156.420       156.730    
  34  0.198330E-01  -3.92041      -11.8681       11.8681       156.586       168.455    
  35  0.695627     -0.362942      -1.09872       1.09872       154.494       155.593    
  36  0.833441     -0.182192     -0.551546      0.551546       156.234       156.786    
  37  0.720954     -0.327181     -0.990465      0.990465       153.696       154.686    
  38  0.155604      -1.86044      -5.63207       5.63207       155.803       161.435    
  39  0.496580E-01  -3.00260      -9.08968       9.08968       158.974       168.063    
  40  0.804644     -0.217356     -0.657995      0.657995       157.065       157.723    
  41  0.329241      -1.11097      -3.36320       3.36320       155.551       158.914    
  42  0.889596     -0.116988     -0.354155      0.354155       158.490       158.844    
  43  0.857341     -0.153920     -0.465957      0.465957       159.375       159.841    
  44  0.238258      -1.43440      -4.34232       4.34232       157.121       161.463    
  45  0.998437     -0.156448E-02 -0.473610E-02  0.473610E-02   159.336       159.341    
  46  0.280889      -1.26979      -3.84402       3.84402       158.812       162.656    
  47  0.518450     -0.656912      -1.98865       1.98865       158.180       160.168    
  48  0.348786      -1.05330      -3.18862       3.18862       159.717       162.906    
  49  0.250207      -1.38547      -4.19419       4.19419       157.599       161.793    
  50  0.442136     -0.816138      -2.47067       2.47067       161.207       163.678    
  51  0.881002     -0.126696     -0.383543      0.383543       160.107       160.491    
  52  0.903963     -0.100967     -0.305654      0.305654       158.361       158.667    
  53  0.227541      -1.48043      -4.48165       4.48165       160.049       164.531    
  54  0.468734     -0.757719      -2.29382       2.29382       156.387       158.681    
  55  0.622565E-01  -2.77649      -8.40520       8.40520       155.109       163.514    
  56  0.650607     -0.429850      -1.30127       1.30127       160.242       161.543    
  57  0.947139     -0.543094E-01 -0.164409      0.164409       157.855       158.019    
  58  0.942852     -0.588460E-01 -0.178143      0.178143       160.478       160.656    
  59  0.204603      -1.58668      -4.80332       4.80332       161.060       165.863    
  60  0.781809     -0.246145     -0.745148      0.745148       156.578       157.323    
  61  0.543108     -0.610447      -1.84799       1.84799       160.975       162.823    
  62  0.199157E-02  -6.21883      -18.8261       18.8261       161.872       180.698    
  63  0.867255     -0.142422     -0.431151      0.431151       158.046       158.478    
  64  0.846580     -0.166550     -0.504193      0.504193       162.340       162.844    
  65  0.267681      -1.31796      -3.98982       3.98982       165.090       169.080    
  66  0.656550E-01  -2.72334      -8.24430       8.24430       158.526       166.770    
  67  0.914706     -0.891526E-01 -0.269889      0.269889       162.767       163.037    
  68  0.177217      -1.73038      -5.23833       5.23833       161.330       166.568    
  69  0.973717     -0.266348E-01 -0.806309E-01  0.806309E-01   158.663       158.743    
  70  0.329699E-01  -3.41216      -10.3295       10.3295       158.917       169.246    
  71  0.242441E-01  -3.71958      -11.2602       11.2602       154.646       165.906    
  72  0.884493     -0.122740     -0.371568      0.371568       164.985       165.357    
  73  0.927939     -0.747892E-01 -0.226407      0.226407       158.348       158.574    
  74  0.378336E-01  -3.27456      -9.91298       9.91298       152.325       162.238    
  75  0.502319     -0.688520      -2.08434       2.08434       153.309       155.394    
loop,thermsimp(1:2)       87   9.40725       1.15504    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    390        151.78          0.84          1.14         25.20          0.16          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       87
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       88
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      389     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -2.27879       2.27879       149.281       151.559    
   2  0.531040     -0.632917      -1.91601       1.91601       150.072       151.988    
   3  0.592986E-01  -2.82517      -8.55256       8.55256       151.846       160.398    
   4  0.247694      -1.39556      -4.22475       4.22475       152.254       156.479    
   5  0.131832      -2.02623      -6.13394       6.13394       152.717       158.851    
   6  0.928797E-01  -2.37645      -7.19416       7.19416       153.690       160.884    
   7  0.638590     -0.448492      -1.35771       1.35771       152.374       153.732    
   8  0.220145      -1.51347      -4.58169       4.58169       152.866       157.448    
   9  0.764323     -0.268765     -0.813625      0.813625       151.313       152.126    
  10  0.223429      -1.49866      -4.53685       4.53685       153.696       158.233    
  11  0.705665     -0.348615      -1.05535       1.05535       153.309       154.365    
  12  0.812667     -0.207434     -0.627960      0.627960       154.494       155.122    
  13  0.344167      -1.06663      -3.22898       3.22898       153.409       156.638    
  14  0.691720     -0.368573      -1.11577       1.11577       153.051       154.166    
  15  0.601584     -0.508189      -1.53843       1.53843       155.132       156.670    
  16  0.323598      -1.12825      -3.41553       3.41553       152.198       155.614    
  17  0.536181     -0.623284      -1.88685       1.88685       152.040       153.927    
  18  0.224445      -1.49412      -4.52312       4.52312       155.176       159.699    
  19  0.967837     -0.326916E-01 -0.989663E-01  0.989663E-01   155.207       155.306    
  20  0.982234     -0.179257E-01 -0.542661E-01  0.542661E-01   155.446       155.500    
  21  0.656459     -0.420894      -1.27416       1.27416       156.420       157.694    
  22  0.138036      -1.98024      -5.99472       5.99472       156.234       162.229    
  23  0.698821     -0.358360      -1.08485       1.08485       152.603       153.688    
  24  0.603237     -0.505446      -1.53012       1.53012       156.660       158.190    
  25  0.253585      -1.37205      -4.15359       4.15359       156.578       160.731    
  26  0.404885     -0.904153      -2.73712       2.73712       155.841       158.578    
  27  0.802083     -0.220543     -0.667643      0.667643       157.065       157.733    
  28  0.756447     -0.279123     -0.844981      0.844981       152.119       152.964    
  29  0.390929     -0.939231      -2.84331       2.84331       157.855       160.698    
  30  0.260757      -1.34417      -4.06916       4.06916       153.750       157.819    
  31  0.177681      -1.72776      -5.23042       5.23042       158.046       163.277    
  32  0.806362     -0.215223     -0.651538      0.651538       158.348       158.999    
  33  0.222380      -1.50337      -4.55110       4.55110       158.361       162.912    
  34  0.969986     -0.304736E-01 -0.922519E-01  0.922519E-01   156.387       156.479    
  35  0.417166     -0.874272      -2.64666       2.64666       158.663       161.309    
  36  0.212672      -1.54800      -4.68623       4.68623       158.490       163.176    
  37  0.141187      -1.95767      -5.92640       5.92640       155.551       161.477    
  38  0.750343     -0.287224     -0.869506      0.869506       154.957       155.826    
  39  0.628172     -0.464941      -1.40750       1.40750       159.336       160.744    
  40  0.466629     -0.762221      -2.30745       2.30745       155.270       157.577    
  41  0.120425      -2.11672      -6.40790       6.40790       157.688       164.096    
  42  0.179567      -1.71721      -5.19846       5.19846       159.375       164.574    
  43  0.209268      -1.56414      -4.73508       4.73508       155.776       160.511    
  44  0.730304E-01  -2.61688      -7.92201       7.92201       150.536       158.458    
  45  0.985392     -0.147157E-01 -0.445485E-01  0.445485E-01   154.189       154.234    
  46  0.726759E-01  -2.62175      -7.93674       7.93674       158.180       166.116    
  47  0.205943      -1.58016      -4.78357       4.78357       154.726       159.510    
  48  0.198791      -1.61550      -4.89056       4.89056       160.107       164.998    
  49  0.320500      -1.13787      -3.44466       3.44466       160.478       163.923    
  50  0.911267     -0.929191E-01 -0.281292      0.281292       155.803       156.085    
  51  0.153842      -1.87183      -5.66655       5.66655       157.121       162.787    
  52  0.152265      -1.88213      -5.69773       5.69773       160.242       165.940    
  53  0.396303     -0.925575      -2.80197       2.80197       157.599       160.401    
  54  0.964537     -0.361075E-01 -0.109307      0.109307       152.325       152.435    
  55  0.259986      -1.34713      -4.07812       4.07812       158.812       162.890    
  56  0.710828     -0.341325      -1.03328       1.03328       160.975       162.008    
  57  0.189878E-01  -3.96396      -12.0000       12.0000       162.340       174.340    
  58  0.960744     -0.400468E-01 -0.121233      0.121233       159.717       159.839    
  59  0.514017     -0.665499      -2.01465       2.01465       162.767       164.782    
  60  0.507688     -0.677888      -2.05215       2.05215       153.757       155.810    
  61  0.915765     -0.879957E-01 -0.266387      0.266387       155.109       155.375    
  62  0.648043     -0.433798      -1.31323       1.31323       161.207       162.520    
  63  0.395249     -0.928240      -2.81004       2.81004       154.062       156.872    
  64  0.604600     -0.503188      -1.52329       1.52329       160.049       161.572    
  65  0.348789      -1.05329      -3.18859       3.18859       164.985       168.174    
  66  0.497548     -0.698064      -2.11323       2.11323       161.060       163.173    
  67  0.240711E-01  -3.72675      -11.2819       11.2819       154.646       165.927    
  68  0.745753     -0.293361     -0.888083      0.888083       161.330       162.218    
  69  0.195047      -1.63452      -4.94813       4.94813       158.526       163.474    
  70  0.792585     -0.232456     -0.703707      0.703707       158.974       159.677    
  71  0.411313     -0.888400      -2.68943       2.68943       156.586       159.276    
  72  0.574995     -0.553393      -1.67527       1.67527       165.090       166.765    
  73  0.631639     -0.459437      -1.39084       1.39084       158.917       160.308    
  74  0.528323     -0.638048      -1.93154       1.93154       153.572       155.504    
  75  0.403878     -0.906643      -2.74466       2.74466       151.784       154.529    
loop,thermsimp(1:2)       88   2.27879       1.91601    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    391        153.42          0.83          1.13         25.20          0.32          0.06         27.54
Just calling func    0   0         27.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    153.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       88
neval is:      390
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       89
neval is:      390


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      390     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -3.17491       3.17491       149.281       152.456    
   2  0.650675     -0.429745      -1.30096       1.30096       150.072       151.373    
   3  0.849247     -0.163405     -0.494672      0.494672       151.313       151.807    
   4  0.910703     -0.935381E-01 -0.283165      0.283165       152.325       152.608    
   5  0.188892      -1.66658      -5.04519       5.04519       152.119       157.165    
   6  0.256564      -1.36038      -4.11823       4.11823       152.603       156.722    
   7  0.465488E-01  -3.06725      -9.28541       9.28541       152.374       161.659    
   8  0.824855     -0.192548     -0.582896      0.582896       152.040       152.623    
   9  0.730565     -0.313937     -0.950372      0.950372       153.051       154.001    
  10  0.888077     -0.118697     -0.359327      0.359327       154.189       154.549    
  11  0.898172     -0.107394     -0.325111      0.325111       153.309       153.635    
  12  0.314974      -1.15527      -3.49731       3.49731       151.784       155.281    
  13  0.247979      -1.39441      -4.22126       4.22126       154.494       158.716    
  14  0.330032E-01  -3.41115      -10.3265       10.3265       155.207       165.534    
  15  0.570783E-01  -2.86333      -8.66809       8.66809       155.109       163.777    
  16  0.694187     -0.365014      -1.10500       1.10500       155.446       156.551    
  17  0.314834      -1.15571      -3.49865       3.49865       153.572       157.071    
  18  0.917621     -0.859711E-01 -0.260258      0.260258       152.198       152.458    
  19  0.613858     -0.487991      -1.47728       1.47728       153.757       155.235    
  20  0.744084E-01  -2.59819      -7.86542       7.86542       154.957       162.822    
  21  0.454198     -0.789221      -2.38919       2.38919       155.803       158.193    
  22  0.118203E-01  -4.43793      -13.4348       13.4348       152.254       165.689    
  23  0.746996     -0.291695     -0.883040      0.883040       156.387       157.270    
  24  0.416160     -0.876686      -2.65397       2.65397       153.409       156.063    
  25  0.339178E-01  -3.38381      -10.2437       10.2437       155.132       165.375    
  26  0.824080     -0.193487     -0.585738      0.585738       154.062       154.647    
  27  0.589652     -0.528223      -1.59908       1.59908       152.866       154.465    
  28  0.680293     -0.385231      -1.16620       1.16620       155.270       156.436    
  29  0.864872E-01  -2.44776      -7.41004       7.41004       156.420       163.830    
  30  0.672988     -0.396027      -1.19888       1.19888       157.065       158.264    
  31  0.797049E-01  -2.52942      -7.65726       7.65726       153.750       161.408    
  32  0.831708     -0.184273     -0.557846      0.557846       156.660       157.218    
  33  0.280253E-01  -3.57465      -10.8214       10.8214       153.696       164.517    
  34  0.131717      -2.02710      -6.13658       6.13658       150.536       156.673    
  35  0.343675      -1.06806      -3.23331       3.23331       155.841       159.075    
  36  0.280745      -1.27031      -3.84558       3.84558       152.717       156.563    
  37  0.322275      -1.13235      -3.42794       3.42794       158.348       161.776    
  38  0.769830E-01  -2.56417      -7.76245       7.76245       156.586       164.349    
  39  0.851798     -0.160406     -0.485591      0.485591       154.726       155.212    
  40  0.864683     -0.145392     -0.440141      0.440141       158.974       159.414    
  41  0.157880      -1.84592      -5.58810       5.58810       155.176       160.764    
  42  0.371895     -0.989143      -2.99440       2.99440       159.717       162.712    
  43  0.861425     -0.149167     -0.451570      0.451570       158.917       159.368    
  44  0.778275E-01  -2.55326      -7.72942       7.72942       151.846       159.575    
  45  0.450106     -0.798272      -2.41659       2.41659       157.599       160.016    
  46  0.188928      -1.66639      -5.04462       5.04462       155.776       160.820    
  47  0.225391      -1.48992      -4.51039       4.51039       157.855       162.365    
  48  0.814689     -0.204949     -0.620435      0.620435       156.578       157.198    
  49  0.556109     -0.586791      -1.77638       1.77638       159.336       161.113    
  50  0.860351     -0.150415     -0.455348      0.455348       153.690       154.146    
  51  0.124594      -2.08269      -6.30487       6.30487       158.663       164.967    
  52  0.924630     -0.783615E-01 -0.237222      0.237222       155.551       155.788    
  53  0.463685     -0.768549      -2.32661       2.32661       160.049       162.376    
  54  0.719654     -0.328985     -0.995927      0.995927       160.975       161.971    
  55  0.740445     -0.300503     -0.909706      0.909706       161.330       162.239    
  56  0.948188     -0.532020E-01 -0.161057      0.161057       156.234       156.395    
  57  0.174315      -1.74689      -5.28832       5.28832       161.207       166.495    
  58  0.436138     -0.829795      -2.51202       2.51202       157.121       159.633    
  59  0.442627     -0.815027      -2.46731       2.46731       158.812       161.279    
  60  0.781531     -0.246500     -0.746223      0.746223       158.361       159.107    
  61  0.233219E-01  -3.75836      -11.3776       11.3776       161.060       172.437    
  62  0.529855     -0.635152      -1.92278       1.92278       158.490       160.413    
  63  0.415693     -0.877807      -2.65736       2.65736       158.046       160.704    
  64  0.655864     -0.421801      -1.27691       1.27691       158.526       159.803    
  65  0.932327     -0.700720E-01 -0.212127      0.212127       160.478       160.690    
  66  0.570322     -0.561554      -1.69998       1.69998       157.688       159.388    
  67  0.969693     -0.307757E-01 -0.931666E-01  0.931666E-01   159.375       159.469    
  68  0.707842     -0.345534      -1.04603       1.04603       162.767       163.813    
  69  0.971476E-01  -2.33152      -7.05816       7.05816       160.107       167.166    
  70  0.807879     -0.213342     -0.645846      0.645846       154.646       155.291    
  71  0.261134      -1.34272      -4.06479       4.06479       160.242       164.307    
  72  0.395767     -0.926929      -2.80607       2.80607       158.180       160.986    
  73  0.641665     -0.443688      -1.34317       1.34317       165.090       166.433    
  74  0.581613     -0.541950      -1.64063       1.64063       164.985       166.626    
  75  0.395656E-01  -3.22980      -9.77748       9.77748       153.419       163.197    
loop,thermsimp(1:2)       89   3.17491       1.30096    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    392        151.68          0.87          1.15         25.17          0.20          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    393        152.56          0.88          1.15         25.21          0.19          0.06         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       89
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       90
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      392     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -6.13888       6.13888       150.072       156.211    
   2  0.314760      -1.15594      -3.49936       3.49936       151.313       154.812    
   3  0.748375     -0.289851     -0.877458      0.877458       149.281       150.158    
   4  0.632472     -0.458119      -1.38685       1.38685       152.198       153.585    
   5  0.677472     -0.389387      -1.17878       1.17878       152.325       153.504    
   6  0.433475     -0.835921      -2.53056       2.53056       152.040       154.571    
   7  0.458976     -0.778758      -2.35751       2.35751       153.309       155.667    
   8  0.411427E-02  -5.49329      -16.6297       16.6297       153.051       169.680    
   9  0.904989     -0.998322E-01 -0.302219      0.302219       153.690       153.993    
  10  0.480311     -0.733322      -2.21997       2.21997       152.866       155.086    
  11  0.277870      -1.28060      -3.87673       3.87673       154.189       158.066    
  12  0.958372     -0.425196E-01 -0.128719      0.128719       154.062       154.190    
  13  0.321639      -1.13432      -3.43391       3.43391       154.726       158.160    
  14  0.562333     -0.575660      -1.74268       1.74268       153.757       155.500    
  15  0.665565     -0.407119      -1.23246       1.23246       151.784       153.016    
  16  0.307614      -1.17891      -3.56888       3.56888       154.646       158.214    
  17  0.504790E-01  -2.98620      -9.04004       9.04004       155.551       164.591    
  18  0.361959      -1.01622      -3.07639       3.07639       153.409       156.486    
  19  0.470787     -0.753350      -2.28060       2.28060       156.234       158.515    
  20  0.312221      -1.16404      -3.52387       3.52387       155.270       158.794    
  21  0.156792      -1.85283      -5.60904       5.60904       155.446       161.055    
  22  0.445216     -0.809196      -2.44966       2.44966       152.717       155.167    
  23  0.999492     -0.508321E-03 -0.153883E-02  0.153883E-02   150.536       150.538    
  24  0.167067      -1.78936      -5.41688       5.41688       152.603       158.020    
  25  0.435083     -0.832219      -2.51935       2.51935       153.572       156.092    
  26  0.110403      -2.20362      -6.67095       6.67095       152.119       158.790    
  27  0.704194     -0.350701      -1.06167       1.06167       156.578       157.639    
  28  0.767816     -0.264205     -0.799822      0.799822       156.660       157.460    
  29  0.231293      -1.46407      -4.43214       4.43214       156.387       160.819    
  30  0.965513     -0.350953E-01 -0.106243      0.106243       155.803       155.910    
  31  0.674440     -0.393873      -1.19236       1.19236       157.065       158.257    
  32  0.248626      -1.39181      -4.21338       4.21338       154.494       158.708    
  33  0.461218     -0.773884      -2.34276       2.34276       155.841       158.184    
  34  0.778910     -0.249859     -0.756393      0.756393       158.361       159.118    
  35  0.665530     -0.407172      -1.23262       1.23262       158.917       160.150    
  36  0.383296     -0.958947      -2.90299       2.90299       157.688       160.591    
  37  0.492311     -0.708645      -2.14526       2.14526       158.974       161.119    
  38  0.631911     -0.459006      -1.38954       1.38954       159.375       160.765    
  39  0.150454E-01  -4.19668      -12.7045       12.7045       151.846       164.550    
  40  0.958677     -0.422006E-01 -0.127753      0.127753       157.121       157.249    
  41  0.411899     -0.886977      -2.68512       2.68512       158.526       161.211    
  42  0.466999     -0.761428      -2.30505       2.30505       157.599       159.904    
  43  0.622674     -0.473731      -1.43411       1.43411       158.490       159.924    
  44  0.497710     -0.697737      -2.11224       2.11224       160.478       162.590    
  45  0.763352E-01  -2.57262      -7.78803       7.78803       158.046       165.834    
  46  0.192360      -1.64839      -4.99011       4.99011       155.176       160.166    
  47  0.444368     -0.811101      -2.45542       2.45542       155.776       158.231    
  48  0.617268     -0.482452      -1.46051       1.46051       158.180       159.640    
  49  0.898554     -0.106968     -0.323821      0.323821       159.336       159.660    
  50  0.382850     -0.960111      -2.90652       2.90652       158.812       161.718    
  51  0.769319     -0.262250     -0.793901      0.793901       153.750       154.544    
  52  0.356805      -1.03057      -3.11981       3.11981       152.374       155.494    
  53  0.159449E-01  -4.13862      -12.5287       12.5287       158.348       170.877    
  54  0.879661     -0.128218     -0.388152      0.388152       160.975       161.363    
  55  0.413677     -0.882671      -2.67209       2.67209       161.330       164.002    
  56  0.332125      -1.10224      -3.33679       3.33679       157.855       161.191    
  57  0.963873     -0.367956E-01 -0.111390      0.111390       160.049       160.160    
  58  0.440660     -0.819481      -2.48079       2.48079       159.717       162.198    
  59  0.968287     -0.322271E-01 -0.975601E-01  0.975601E-01   154.957       155.054    
  60  0.174603      -1.74524      -5.28332       5.28332       153.419       158.703    
  61  0.915676E-01  -2.39068      -7.23724       7.23724       155.109       162.346    
  62  0.882563     -0.124926     -0.378184      0.378184       162.767       163.146    
  63  0.504296     -0.684592      -2.07245       2.07245       156.420       158.492    
  64  0.877119     -0.131112     -0.396912      0.396912       160.242       160.639    
  65  0.703997     -0.350981      -1.06252       1.06252       156.586       157.649    
  66  0.349323      -1.05176      -3.18396       3.18396       153.696       156.880    
  67  0.417707     -0.872976      -2.64274       2.64274       158.663       161.305    
  68  0.442862E-01  -3.11708      -9.43626       9.43626       155.132       164.568    
  69  0.135627      -1.99785      -6.04803       6.04803       155.207       161.255    
  70  0.684853     -0.378551      -1.14598       1.14598       152.254       153.400    
  71  0.191848      -1.65105      -4.99819       4.99819       165.090       170.088    
  72  0.273174      -1.29765      -3.92833       3.92833       161.207       165.135    
  73  0.153744      -1.87246      -5.66846       5.66846       164.985       170.654    
  74  0.204708      -1.58617      -4.80178       4.80178       160.107       164.909    
  75  0.177922      -1.72641      -5.22631       5.22631       151.679       156.905    
loop,thermsimp(1:2)       90   6.13888       3.49936    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    394        152.12          0.87          1.15         25.20          0.18          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    152.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       90
neval is:      393
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       91
neval is:      393


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      393     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.251178      0.251178       149.281       149.532    
   2  0.393393     -0.932946      -2.82428       2.82428       150.536       153.360    
   3  0.317218      -1.14817      -3.47581       3.47581       151.784       155.260    
   4  0.324247      -1.12625      -3.40946       3.40946       152.254       155.664    
   5  0.515746E-01  -2.96473      -8.97504       8.97504       152.325       161.300    
   6  0.143224      -1.94335      -5.88304       5.88304       152.198       158.081    
   7  0.512136     -0.669164      -2.02574       2.02574       153.690       155.716    
   8  0.993896     -0.612239E-02 -0.185341E-01  0.185341E-01   154.062       154.080    
   9  0.440900     -0.818937      -2.47915       2.47915       153.750       156.229    
  10  0.861233     -0.149390     -0.452245      0.452245       152.040       152.492    
  11  0.690005     -0.371056      -1.12329       1.12329       151.313       152.436    
  12  0.192792      -1.64614      -4.98332       4.98332       154.957       159.940    
  13  0.975175     -0.251388E-01 -0.761019E-01  0.761019E-01   152.866       152.942    
  14  0.595327E-01  -2.82123      -8.54063       8.54063       152.717       161.258    
  15  0.142661      -1.94729      -5.89496       5.89496       152.374       158.269    
  16  0.141610      -1.95468      -5.91734       5.91734       153.757       159.675    
  17  0.976591     -0.236872E-01 -0.717077E-01  0.717077E-01   153.309       153.381    
  18  0.894748     -0.111213     -0.336674      0.336674       155.803       156.140    
  19  0.747310     -0.291275     -0.881769      0.881769       153.572       154.454    
  20  0.434887     -0.832670      -2.52072       2.52072       150.072       152.592    
  21  0.673581     -0.395146      -1.19622       1.19622       153.409       154.606    
  22  0.624944     -0.470094      -1.42310       1.42310       153.696       155.119    
  23  0.617967     -0.481321      -1.45709       1.45709       151.679       153.136    
  24  0.659853     -0.415739      -1.25855       1.25855       157.121       158.379    
  25  0.963159E-01  -2.34012      -7.08419       7.08419       156.660       163.744    
  26  0.179190      -1.71931      -5.20482       5.20482       156.578       161.783    
  27  0.251042      -1.38213      -4.18410       4.18410       156.586       160.771    
  28  0.116711      -2.14806      -6.50276       6.50276       152.603       159.106    
  29  0.890376     -0.116112     -0.351502      0.351502       154.189       154.541    
  30  0.880065E-02  -4.73293      -14.3279       14.3279       154.726       169.054    
  31  0.613810     -0.488070      -1.47752       1.47752       155.841       157.319    
  32  0.960436E-01  -2.34295      -7.09276       7.09276       154.646       161.738    
  33  0.768907E-02  -4.86796      -14.7366       14.7366       155.776       170.512    
  34  0.316163      -1.15150      -3.48589       3.48589       157.065       160.551    
  35  0.195769      -1.63082      -4.93693       4.93693       156.420       161.356    
  36  0.813020     -0.207000     -0.626644      0.626644       156.234       156.861    
  37  0.578245     -0.547758      -1.65821       1.65821       153.419       155.077    
  38  0.711511     -0.340365      -1.03038       1.03038       154.494       155.525    
  39  0.565886     -0.569362      -1.72361       1.72361       152.119       153.843    
  40  0.874556     -0.134039     -0.405773      0.405773       155.270       155.676    
  41  0.335685      -1.09158      -3.30451       3.30451       158.361       161.666    
  42  0.861776     -0.148759     -0.450336      0.450336       158.180       158.630    
  43  0.634500     -0.454918      -1.37716       1.37716       159.336       160.714    
  44  0.211879      -1.55174      -4.69754       4.69754       157.599       162.296    
  45  0.789454     -0.236414     -0.715691      0.715691       158.490       159.206    
  46  0.726316E-01  -2.62235      -7.93859       7.93859       158.917       166.855    
  47  0.344022      -1.06705      -3.23025       3.23025       160.049       163.279    
  48  0.367544      -1.00091      -3.03003       3.03003       155.176       158.206    
  49  0.634223     -0.455355      -1.37848       1.37848       157.688       159.067    
  50  0.462643     -0.770799      -2.33342       2.33342       160.242       162.575    
  51  0.904061     -0.100859     -0.305327      0.305327       159.375       159.681    
  52  0.183754      -1.69416      -5.12868       5.12868       156.387       161.516    
  53  0.214369      -1.54005      -4.66217       4.66217       155.446       160.108    
  54  0.515075     -0.663442      -2.00842       2.00842       158.974       160.982    
  55  0.173268      -1.75291      -5.30655       5.30655       157.855       163.161    
  56  0.788225     -0.237971     -0.720404      0.720404       158.526       159.246    
  57  0.657874     -0.418741      -1.26764       1.26764       155.207       156.475    
  58  0.262790      -1.33640      -4.04564       4.04564       158.663       162.708    
  59  0.806843     -0.214626     -0.649731      0.649731       160.975       161.625    
  60  0.121073      -2.11136      -6.39167       6.39167       158.812       165.203    
  61  0.928422     -0.742690E-01 -0.224833      0.224833       159.717       159.942    
  62  0.971911     -0.284914E-01 -0.862513E-01  0.862513E-01   155.109       155.195    
  63  0.167455      -1.78704      -5.40986       5.40986       160.478       165.888    
  64  0.280629E-01  -3.57331      -10.8174       10.8174       162.767       173.585    
  65  0.668523E-01  -2.70527      -8.18959       8.18959       161.330       169.519    
  66  0.714939     -0.335559      -1.01583       1.01583       151.846       152.862    
  67  0.990226     -0.982180E-02 -0.297333E-01  0.297333E-01   155.132       155.161    
  68  0.229020      -1.47395      -4.46204       4.46204       155.551       160.013    
  69  0.130543      -2.03605      -6.16368       6.16368       160.107       166.271    
  70  0.520653     -0.652672      -1.97582       1.97582       161.207       163.183    
  71  0.338340      -1.08370      -3.28067       3.28067       158.046       161.327    
  72  0.518446     -0.656920      -1.98868       1.98868       153.051       155.039    
  73  0.307066      -1.18069      -3.57428       3.57428       165.090       168.664    
  74  0.724459     -0.322330     -0.975782      0.975782       164.985       165.961    
  75  0.188788E-01  -3.96971      -12.0174       12.0174       152.116       164.133    
loop,thermsimp(1:2)       91  0.251178       2.82428    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    395        153.53          0.87          1.15         25.17          0.23          0.05         27.46
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    396        164.33          0.86          1.14         25.24          0.58          0.06         27.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    153.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       91
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       92
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      395     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -3.50733       3.50733       149.281       152.788    
   2  0.484866     -0.723883      -2.19139       2.19139       151.313       153.504    
   3  0.743257     -0.296713     -0.898232      0.898232       152.040       152.938    
   4  0.476659     -0.740953      -2.24307       2.24307       150.072       152.315    
   5  0.895662E-01  -2.41278      -7.30414       7.30414       151.846       159.150    
   6  0.100541      -2.29719      -6.95421       6.95421       152.866       159.820    
   7  0.394309     -0.930621      -2.81724       2.81724       151.679       154.496    
   8  0.856201     -0.155250     -0.469984      0.469984       150.536       151.006    
   9  0.903325     -0.101673     -0.307792      0.307792       153.309       153.617    
  10  0.849389     -0.163238     -0.494165      0.494165       152.119       152.614    
  11  0.245876      -1.40293      -4.24705       4.24705       154.062       158.309    
  12  0.535664     -0.624247      -1.88977       1.88977       153.572       155.462    
  13  0.509317     -0.674685      -2.04245       2.04245       154.189       156.232    
  14  0.103141      -2.27166      -6.87694       6.87694       153.409       160.286    
  15  0.822327     -0.195617     -0.592186      0.592186       153.051       153.643    
  16  0.293454      -1.22603      -3.71154       3.71154       153.419       157.131    
  17  0.610098E-01  -2.79672      -8.46644       8.46644       153.696       162.162    
  18  0.467864E-01  -3.06216      -9.27000       9.27000       155.132       164.402    
  19  0.888641     -0.118062     -0.357405      0.357405       155.109       155.466    
  20  0.371769     -0.989482      -2.99543       2.99543       151.784       154.779    
  21  0.770202     -0.261103     -0.790429      0.790429       154.494       155.285    
  22  0.752967E-01  -2.58632      -7.82949       7.82949       152.254       160.084    
  23  0.787365E-01  -2.54165      -7.69426       7.69426       155.270       162.964    
  24  0.516026     -0.661597      -2.00284       2.00284       153.690       155.693    
  25  0.133613      -2.01281      -6.09333       6.09333       155.803       161.897    
  26  0.705575     -0.348742      -1.05574       1.05574       153.750       154.806    
  27  0.747326     -0.291254     -0.881706      0.881706       155.207       156.089    
  28  0.941066E-01  -2.36333      -7.15444       7.15444       156.234       163.389    
  29  0.243001      -1.41469      -4.28265       4.28265       155.841       160.124    
  30  0.186020      -1.68190      -5.09157       5.09157       152.198       157.290    
  31  0.707073     -0.346621      -1.04932       1.04932       155.176       156.225    
  32  0.820399     -0.197964     -0.599291      0.599291       152.374       152.973    
  33  0.169787E-01  -4.07580      -12.3386       12.3386       157.121       169.459    
  34  0.196118      -1.62904      -4.93155       4.93155       158.180       163.111    
  35  0.910420E-01  -2.39643      -7.25466       7.25466       157.688       164.943    
  36  0.101963      -2.28314      -6.91170       6.91170       152.603       159.515    
  37  0.816143     -0.203166     -0.615038      0.615038       158.490       159.105    
  38  0.921931     -0.812847E-01 -0.246071      0.246071       158.526       158.772    
  39  0.867385     -0.142273     -0.430698      0.430698       153.757       154.188    
  40  0.534867     -0.625737      -1.89428       1.89428       159.375       161.270    
  41  0.354961      -1.03575      -3.13549       3.13549       154.957       158.092    
  42  0.707205     -0.346435      -1.04875       1.04875       159.717       160.766    
  43  0.341296      -1.07501      -3.25434       3.25434       155.551       158.805    
  44  0.615332     -0.485594      -1.47003       1.47003       155.446       156.916    
  45  0.100325      -2.29934      -6.96073       6.96073       157.065       164.026    
  46  0.218012      -1.52321      -4.61116       4.61116       159.336       163.948    
  47  0.346044      -1.06119      -3.21251       3.21251       156.586       159.799    
  48  0.313706      -1.15930      -3.50952       3.50952       158.974       162.483    
  49  0.884226     -0.123043     -0.372484      0.372484       152.717       153.090    
  50  0.562231     -0.575842      -1.74323       1.74323       152.325       154.069    
  51  0.208749      -1.56662      -4.74259       4.74259       158.046       162.789    
  52  0.553752     -0.591038      -1.78923       1.78923       156.420       158.209    
  53  0.389358     -0.943257      -2.85550       2.85550       156.387       159.243    
  54  0.290822      -1.23504      -3.73881       3.73881       160.975       164.714    
  55  0.592574     -0.523280      -1.58411       1.58411       158.361       159.945    
  56  0.816972     -0.202151     -0.611965      0.611965       154.646       155.258    
  57  0.674491     -0.393797      -1.19213       1.19213       156.578       157.770    
  58  0.136892      -1.98856      -6.01993       6.01993       157.599       163.619    
  59  0.783273     -0.244273     -0.739482      0.739482       160.242       160.981    
  60  0.896165     -0.109631     -0.331882      0.331882       158.663       158.994    
  61  0.268163      -1.31616      -3.98438       3.98438       157.855       161.839    
  62  0.773898     -0.256315     -0.775935      0.775935       161.207       161.983    
  63  0.929489     -0.731207E-01 -0.221356      0.221356       160.049       160.270    
  64  0.588680     -0.529872      -1.60407       1.60407       156.660       158.264    
  65  0.234390      -1.45077      -4.39187       4.39187       152.116       156.508    
  66  0.471928     -0.750929      -2.27327       2.27327       158.812       161.085    
  67  0.487657     -0.718143      -2.17401       2.17401       160.478       162.652    
  68  0.669180     -0.401702      -1.21606       1.21606       164.985       166.201    
  69  0.781256     -0.246852     -0.747289      0.747289       160.107       160.855    
  70  0.781840     -0.246106     -0.745029      0.745029       158.917       159.662    
  71  0.688901     -0.372658      -1.12814       1.12814       165.090       166.218    
  72  0.204580      -1.58679      -4.80366       4.80366       154.726       159.530    
  73  0.384240     -0.956488      -2.89555       2.89555       161.330       164.225    
  74  0.583463     -0.538775      -1.63102       1.63102       155.776       157.407    
  75  0.913981     -0.899454E-01 -0.272289      0.272289       153.535       153.807    
loop,thermsimp(1:2)       92   3.50733       2.19139    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    397        155.18          0.86          1.14         25.18          0.27          0.05         27.51
Just calling func    0   0         27.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    155.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       92
neval is:      396
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       93
neval is:      396


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      396     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -15.2814       15.2814       150.536       165.817    
   2  0.977343     -0.229176E-01 -0.693780E-01  0.693780E-01   150.072       150.141    
   3  0.515611     -0.662402      -2.00527       2.00527       152.119       154.125    
   4  0.985018     -0.150949E-01 -0.456965E-01  0.456965E-01   149.281       149.326    
   5  0.909744E-01  -2.39718      -7.25691       7.25691       152.040       159.297    
   6  0.163485      -1.81103      -5.48249       5.48249       152.374       157.856    
   7  0.709610     -0.343039      -1.03847       1.03847       152.717       153.756    
   8  0.639309     -0.447368      -1.35430       1.35430       151.313       152.667    
   9  0.500633     -0.691882      -2.09452       2.09452       153.309       155.404    
  10  0.623218     -0.472859      -1.43147       1.43147       153.051       154.482    
  11  0.974620     -0.257075E-01 -0.778235E-01  0.778235E-01   153.535       153.613    
  12  0.940866     -0.609540E-01 -0.184525      0.184525       152.325       152.510    
  13  0.268848      -1.31361      -3.97665       3.97665       153.757       157.734    
  14  0.131404      -2.02948      -6.14378       6.14378       151.679       157.822    
  15  0.242045      -1.41863      -4.29459       4.29459       151.784       156.078    
  16  0.333489      -1.09815      -3.32439       3.32439       153.750       157.075    
  17  0.540917     -0.614489      -1.86023       1.86023       154.646       156.506    
  18  0.935945     -0.661981E-01 -0.200400      0.200400       154.494       154.695    
  19  0.948265     -0.531218E-01 -0.160814      0.160814       153.572       153.733    
  20  0.306672      -1.18198      -3.57817       3.57817       155.109       158.687    
  21  0.674766E-01  -2.69597      -8.16145       8.16145       153.690       161.852    
  22  0.304885      -1.18782      -3.59586       3.59586       155.207       158.803    
  23  0.987276     -0.128055E-01 -0.387656E-01  0.387656E-01   155.176       155.214    
  24  0.866309     -0.143514     -0.434456      0.434456       154.189       154.624    
  25  0.325072      -1.12371      -3.40177       3.40177       152.116       155.518    
  26  0.882651     -0.124826     -0.377882      0.377882       155.446       155.824    
  27  0.608994E-02  -5.10112      -15.4425       15.4425       153.419       168.862    
  28  0.956776     -0.441859E-01 -0.133763      0.133763       152.198       152.332    
  29  0.680690E-01  -2.68723      -8.13499       8.13499       155.776       163.911    
  30  0.870194     -0.139039     -0.420909      0.420909       156.578       156.999    
  31  0.154954      -1.86463      -5.64473       5.64473       154.957       160.601    
  32  0.533144     -0.628963      -1.90404       1.90404       156.420       158.324    
  33  0.848128     -0.164724     -0.498664      0.498664       156.660       157.158    
  34  0.302343E-01  -3.49878      -10.5918       10.5918       154.062       164.653    
  35  0.670768     -0.399332      -1.20889       1.20889       158.526       159.735    
  36  0.575709     -0.552152      -1.67152       1.67152       155.551       157.222    
  37  0.961243     -0.395278E-01 -0.119662      0.119662       158.663       158.782    
  38  0.174287      -1.74705      -5.28881       5.28881       158.490       163.779    
  39  0.450902     -0.796506      -2.41124       2.41124       151.846       154.257    
  40  0.807155     -0.214240     -0.648563      0.648563       156.387       157.036    
  41  0.245094E-01  -3.70870      -11.2272       11.2272       152.603       163.831    
  42  0.840819     -0.173379     -0.524864      0.524864       154.726       155.251    
  43  0.418157     -0.871899      -2.63948       2.63948       158.917       161.556    
  44  0.795491     -0.228796     -0.692627      0.692627       156.586       157.279    
  45  0.675445E-01  -2.69497      -8.15841       8.15841       152.866       161.024    
  46  0.158617      -1.84126      -5.57401       5.57401       158.361       163.935    
  47  0.538475     -0.619015      -1.87393       1.87393       152.254       154.128    
  48  0.318292      -1.14479      -3.46559       3.46559       155.841       159.307    
  49  0.427160     -0.850596      -2.57499       2.57499       160.049       162.624    
  50  0.485422     -0.722737      -2.18792       2.18792       153.409       155.597    
  51  0.603579     -0.504879      -1.52841       1.52841       159.717       161.246    
  52  0.151674      -1.88602      -5.70951       5.70951       160.107       165.817    
  53  0.216599      -1.52971      -4.63085       4.63085       160.242       164.873    
  54  0.838062     -0.176664     -0.534809      0.534809       158.812       159.346    
  55  0.728698     -0.316496     -0.958120      0.958120       159.375       160.333    
  56  0.866837     -0.142904     -0.432610      0.432610       157.855       158.287    
  57  0.921748     -0.814837E-01 -0.246674      0.246674       155.803       156.050    
  58  0.325236      -1.12320      -3.40024       3.40024       161.207       164.607    
  59  0.316044      -1.15187      -3.48704       3.48704       153.696       157.183    
  60  0.163050      -1.81370      -5.49057       5.49057       158.974       164.464    
  61  0.940520     -0.613225E-01 -0.185640      0.185640       160.478       160.664    
  62  0.439004     -0.823246      -2.49219       2.49219       158.046       160.539    
  63  0.209586      -1.56262      -4.73048       4.73048       155.270       160.000    
  64  0.521405     -0.651229      -1.97145       1.97145       158.180       160.151    
  65  0.397376     -0.922872      -2.79379       2.79379       156.234       159.028    
  66  0.398167     -0.920883      -2.78776       2.78776       157.599       160.387    
  67  0.821539     -0.196576     -0.595089      0.595089       159.336       159.932    
  68  0.652451     -0.427020      -1.29271       1.29271       157.065       158.358    
  69  0.412127     -0.886423      -2.68344       2.68344       161.330       164.013    
  70  0.748303E-02  -4.89512      -14.8189       14.8189       155.132       169.950    
  71  0.287259      -1.24737      -3.77613       3.77613       160.975       164.751    
  72  0.813902     -0.205915     -0.623362      0.623362       157.688       158.312    
  73  0.173180      -1.75343      -5.30810       5.30810       164.985       170.293    
  74  0.424113     -0.857755      -2.59666       2.59666       165.090       167.686    
  75  0.285321E-01  -3.55672      -10.7672       10.7672       155.177       165.945    
loop,thermsimp(1:2)       93   15.2814      0.693780E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    398        150.89          0.87          1.15         25.24          0.15          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    399        153.82          0.86          1.15         25.19          0.22          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       93
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       94
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      398     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -2.65744       2.65744       149.281       151.938    
   2  0.262668E-01  -3.63945      -11.0176       11.0176       150.072       161.089    
   3  0.620248     -0.477636      -1.44594       1.44594       152.198       153.644    
   4  0.249183      -1.38957      -4.20660       4.20660       152.325       156.532    
   5  0.999872     -0.128438E-03 -0.388816E-03  0.388816E-03   151.313       151.313    
   6  0.933252     -0.690802E-01 -0.209125      0.209125       153.535       153.744    
   7  0.857047     -0.154263     -0.466996      0.466996       153.572       154.039    
   8  0.365787      -1.00570      -3.04454       3.04454       152.717       155.762    
   9  0.499682     -0.693784      -2.10027       2.10027       152.119       154.220    
  10  0.761560     -0.272387     -0.824589      0.824589       152.254       153.079    
  11  0.793904E-01  -2.53338      -7.66923       7.66923       151.846       159.515    
  12  0.514449     -0.664659      -2.01210       2.01210       153.051       155.063    
  13  0.678176     -0.388349      -1.17564       1.17564       154.189       155.365    
  14  0.257558      -1.35651      -4.10653       4.10653       154.494       158.601    
  15  0.832067E-01  -2.48643      -7.52710       7.52710       155.176       162.703    
  16  0.272851      -1.29883      -3.93191       3.93191       154.726       158.658    
  17  0.255245      -1.36553      -4.13384       4.13384       153.309       157.443    
  18  0.419883     -0.867779      -2.62700       2.62700       152.116       154.743    
  19  0.870346     -0.138865     -0.420382      0.420382       153.409       153.830    
  20  0.814510E-01  -2.50775      -7.59166       7.59166       155.446       163.037    
  21  0.560000     -0.579819      -1.75527       1.75527       155.803       157.559    
  22  0.860285     -0.150492     -0.455580      0.455580       151.784       152.239    
  23  0.538601     -0.618780      -1.87322       1.87322       154.646       156.519    
  24  0.542321     -0.611898      -1.85238       1.85238       156.578       158.430    
  25  0.836575     -0.178440     -0.540185      0.540185       156.387       156.927    
  26  0.705694     -0.348574      -1.05523       1.05523       153.750       154.806    
  27  0.301063      -1.20043      -3.63404       3.63404       156.660       160.294    
  28  0.125899      -2.07227      -6.27333       6.27333       153.696       159.969    
  29  0.476747     -0.740770      -2.24251       2.24251       155.551       157.793    
  30  0.676103     -0.391410      -1.18490       1.18490       156.586       157.771    
  31  0.385349     -0.953606      -2.88683       2.88683       153.757       156.644    
  32  0.141470      -1.95567      -5.92034       5.92034       151.679       157.599    
  33  0.146971      -1.91752      -5.80486       5.80486       152.374       158.179    
  34  0.616396     -0.483866      -1.46479       1.46479       157.855       159.319    
  35  0.962361     -0.383659E-01 -0.116144      0.116144       157.688       157.805    
  36  0.618266     -0.480836      -1.45562       1.45562       156.420       157.875    
  37  0.369072     -0.996763      -3.01747       3.01747       157.065       160.082    
  38  0.312675      -1.16259      -3.51948       3.51948       155.109       158.628    
  39  0.367326      -1.00150      -3.03183       3.03183       158.663       161.694    
  40  0.184422      -1.69053      -5.11770       5.11770       155.207       160.325    
  41  0.113088      -2.17959      -6.59822       6.59822       156.234       162.832    
  42  0.333487      -1.09815      -3.32441       3.32441       152.040       155.364    
  43  0.407562     -0.897562      -2.71716       2.71716       155.841       158.558    
  44  0.443434     -0.813206      -2.46180       2.46180       158.812       161.273    
  45  0.265046      -1.32785      -4.01977       4.01977       158.526       162.545    
  46  0.444603     -0.810573      -2.45382       2.45382       159.336       161.790    
  47  0.689395E-01  -2.67453      -8.09652       8.09652       155.270       163.366    
  48  0.862417     -0.148017     -0.448087      0.448087       158.180       158.628    
  49  0.541063     -0.614219      -1.85941       1.85941       159.375       161.235    
  50  0.885208     -0.121933     -0.369124      0.369124       157.599       157.968    
  51  0.808718     -0.212305     -0.642705      0.642705       158.046       158.689    
  52  0.238877E-01  -3.73439      -11.3050       11.3050       154.957       166.262    
  53  0.428951     -0.846414      -2.56233       2.56233       160.478       163.040    
  54  0.860433     -0.150319     -0.455058      0.455058       152.866       153.321    
  55  0.367713      -1.00045      -3.02865       3.02865       159.717       162.746    
  56  0.782210     -0.245632     -0.743596      0.743596       158.917       159.661    
  57  0.916512E-01  -2.38976      -7.23447       7.23447       153.690       160.925    
  58  0.230050      -1.46946      -4.44846       4.44846       160.049       164.497    
  59  0.715909     -0.334202      -1.01172       1.01172       158.490       159.502    
  60  0.992857E-01  -2.30975      -6.99225       6.99225       152.603       159.596    
  61  0.697124     -0.360791      -1.09221       1.09221       155.776       156.868    
  62  0.232699      -1.45801      -4.41380       4.41380       158.361       162.775    
  63  0.134492      -2.00625      -6.07348       6.07348       161.330       167.403    
  64  0.778931     -0.249833     -0.756312      0.756312       158.974       159.730    
  65  0.248765      -1.39125      -4.21168       4.21168       161.207       165.419    
  66  0.317309      -1.14788      -3.47495       3.47495       154.062       157.537    
  67  0.555562     -0.587775      -1.77935       1.77935       160.975       162.754    
  68  0.924692     -0.782950E-01 -0.237020      0.237020       160.242       160.479    
  69  0.930266     -0.722849E-01 -0.218826      0.218826       160.107       160.326    
  70  0.839348     -0.175130     -0.530165      0.530165       150.536       151.066    
  71  0.555632     -0.587650      -1.77898       1.77898       155.177       156.956    
  72  0.717506     -0.331974      -1.00498       1.00498       165.090       166.095    
  73  0.526364     -0.641761      -1.94279       1.94279       153.419       155.362    
  74  0.978948E-01  -2.32386      -7.03497       7.03497       155.132       162.167    
  75  0.813939     -0.205870     -0.623225      0.623225       150.890       151.513    
loop,thermsimp(1:2)       94   2.65744       11.0176    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    400        152.29          0.86          1.15         25.25          0.20          0.05         27.51
Just calling func    0   0         27.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    401        150.80          0.85          1.14         25.21          0.29          0.05         27.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    150.80       0.7980     -2.630      3.656     -102.6      1.333    
                      0.4847      1.222     -99.70      3.691    -0.1537    
                       2.335     -1.097      1.530      7926.      1065.    
                      0.9710E-02  0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      6597.      892.3    
                     -0.5672     -6.642     -3.577     -9.537      6.163    
                      -15.56     -3.527     0.1094E+05  0.000     0.1264E+05

                       826.0     0.1257E+05 -7129.     0.1264E+05  8015.    
                       9045.     0.5249E-01 0.2357      0.000     0.1792    
                     -0.3747    -0.1405     0.1071     0.1045    -0.4109E-01

                     -0.5833    -0.6652      0.000     0.1231    -0.1240    
                       0.000     0.1147     0.1472    -0.1946     0.1332E-01
                      0.2017E-01-0.7435E-02-0.6240     -1.144      4287.    

                      -1.158     -1.305     -2.226     -3.625    -0.1782    
                     -0.3749      9.204      8.691    -0.1320E+05 -4.000    
                     -0.5910     -1.379      9.271      8.874    -0.1208E+05

                      -4.000     0.5879    -0.8823      8.902      9.091    
                     -0.2041E+05 -7.000    -0.9560     -1.192      8.977    
                       8.723    -0.2203E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       94
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       95
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      400     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -3.71740       3.71740       150.536       154.253    
   2  0.225242      -1.49058      -4.51239       4.51239       151.313       155.825    
   3  0.946430E-01  -2.35764      -7.13723       7.13723       150.890       158.027    
   4  0.371694     -0.989684      -2.99604       2.99604       149.281       152.277    
   5  0.933291     -0.690381E-01 -0.208997      0.208997       151.784       151.993    
   6  0.926571     -0.762651E-01 -0.230875      0.230875       152.254       152.485    
   7  0.138048      -1.98015      -5.99447       5.99447       152.866       158.860    
   8  0.113008E-01  -4.48288      -13.5709       13.5709       152.198       165.769    
   9  0.405736     -0.902053      -2.73076       2.73076       153.535       156.265    
  10  0.390885     -0.939341      -2.84364       2.84364       153.409       156.253    
  11  0.873008     -0.135810     -0.411134      0.411134       153.572       153.983    
  12  0.945037     -0.565316E-01 -0.171137      0.171137       152.119       152.291    
  13  0.642194E-01  -2.74545      -8.31123       8.31123       152.116       160.427    
  14  0.322052E-01  -3.43563      -10.4006       10.4006       153.750       164.151    
  15  0.521559     -0.650933      -1.97055       1.97055       153.051       155.021    
  16  0.271788      -1.30273      -3.94373       3.94373       153.419       157.363    
  17  0.153503      -1.87403      -5.67321       5.67321       152.040       157.713    
  18  0.219303      -1.51730      -4.59328       4.59328       154.189       158.783    
  19  0.476616     -0.741044      -2.24334       2.24334       152.717       154.961    
  20  0.510024     -0.673297      -2.03825       2.03825       154.646       156.684    
  21  0.393388     -0.932959      -2.82432       2.82432       152.325       155.150    
  22  0.947927     -0.534776E-01 -0.161891      0.161891       153.757       153.919    
  23  0.472009     -0.750758      -2.27275       2.27275       155.776       158.048    
  24  0.678717     -0.387551      -1.17322       1.17322       156.387       157.560    
  25  0.617620     -0.481882      -1.45879       1.45879       155.177       156.636    
  26  0.138594E-01  -4.27879      -12.9531       12.9531       153.309       166.262    
  27  0.588445     -0.530273      -1.60528       1.60528       154.062       155.667    
  28  0.950805     -0.504465E-01 -0.152715      0.152715       155.803       155.956    
  29  0.444108     -0.811687      -2.45720       2.45720       151.679       154.136    
  30  0.299195      -1.20666      -3.65289       3.65289       156.586       160.239    
  31  0.808517E-01  -2.51514      -7.61401       7.61401       155.551       163.165    
  32  0.493903     -0.705415      -2.13549       2.13549       157.688       159.824    
  33  0.973584     -0.267710E-01 -0.810430E-01  0.810430E-01   156.420       156.501    
  34  0.219889      -1.51463      -4.58521       4.58521       157.599       162.184    
  35  0.872114     -0.136835     -0.414238      0.414238       152.374       152.788    
  36  0.413991     -0.881912      -2.66979       2.66979       156.578       159.248    
  37  0.155656      -1.86011      -5.63106       5.63106       155.841       161.472    
  38  0.744603     -0.294905     -0.892757      0.892757       154.494       155.387    
  39  0.627736     -0.465635      -1.40960       1.40960       158.180       159.589    
  40  0.137880      -1.98137      -5.99815       5.99815       155.109       161.107    
  41  0.270817      -1.30631      -3.95456       3.95456       154.726       158.681    
  42  0.271872      -1.30243      -3.94280       3.94280       158.046       161.989    
  43  0.988104     -0.119670E-01 -0.362273E-01  0.362273E-01   157.855       157.891    
  44  0.837729E-01  -2.47965      -7.50657       7.50657       158.490       165.997    
  45  0.731806     -0.312240     -0.945237      0.945237       151.846       152.791    
  46  0.520356     -0.653242      -1.97754       1.97754       152.603       154.581    
  47  0.158934      -1.83927      -5.56797       5.56797       158.917       164.485    
  48  0.724534     -0.322226     -0.975467      0.975467       158.974       159.949    
  49  0.895315     -0.110580     -0.334755      0.334755       153.696       154.031    
  50  0.850194     -0.162291     -0.491298      0.491298       157.065       157.556    
  51  0.428755     -0.846869      -2.56370       2.56370       156.660       159.224    
  52  0.523907     -0.646440      -1.95695       1.95695       155.207       157.164    
  53  0.358551      -1.02568      -3.10503       3.10503       160.107       163.212    
  54  0.680509     -0.384914      -1.16524       1.16524       160.242       161.407    
  55  0.607274     -0.498775      -1.50993       1.50993       153.690       155.200    
  56  0.591502     -0.525090      -1.58959       1.58959       150.072       151.661    
  57  0.121812      -2.10527      -6.37324       6.37324       159.375       165.749    
  58  0.812950     -0.207086     -0.626905      0.626905       158.812       159.438    
  59  0.915745     -0.880175E-01 -0.266453      0.266453       158.663       158.929    
  60  0.596748     -0.516260      -1.56286       1.56286       159.336       160.899    
  61  0.229246      -1.47296      -4.45905       4.45905       155.132       159.591    
  62  0.706979     -0.346754      -1.04972       1.04972       158.526       159.575    
  63  0.879114     -0.128841     -0.390036      0.390036       155.176       155.566    
  64  0.529368     -0.636072      -1.92556       1.92556       159.717       161.643    
  65  0.193084      -1.64463      -4.97875       4.97875       160.975       165.954    
  66  0.179439      -1.71792      -5.20061       5.20061       158.361       163.562    
  67  0.945530     -0.560096E-01 -0.169556      0.169556       156.234       156.404    
  68  0.486508     -0.720502      -2.18116       2.18116       155.446       157.627    
  69  0.131906      -2.02566      -6.13224       6.13224       160.478       166.610    
  70  0.203721      -1.59100      -4.81640       4.81640       155.270       160.086    
  71  0.493535     -0.706161      -2.13774       2.13774       160.049       162.187    
  72  0.501297     -0.690556      -2.09050       2.09050       161.207       163.297    
  73  0.507567E-01  -2.98071      -9.02343       9.02343       165.090       174.113    
  74  0.981329     -0.188472E-01 -0.570558E-01  0.570558E-01   154.957       155.014    
  75  0.849390     -0.163237     -0.494162      0.494162       150.797       151.291    
loop,thermsimp(1:2)       95   3.71740       4.51239    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    402        150.50          0.87          1.15         25.24          0.47          0.05         27.78
Just calling func    0   0         27.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    403        158.31          0.86          1.14         25.16          0.26          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       95
neval is:      402
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   2.98401    

hmean,hstd :    155.221       2.98401    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    155.221       2.98401    
h(1),h(best1),h(np1) :    150.797       149.281       150.503    
htherm(1),htherm(best1),htherm(np1) :    151.291       152.277       174.113    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    404        154.01          0.87          1.15         25.25          0.15          0.06         27.48

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
   0.78430      -1.8700       2.8182      -102.61       1.0331      0.28469    
    1.4477      -99.703       3.5236      0.27987       1.9695      -1.3486    
    1.5304       5779.3       3924.6     -0.48549       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       0.0000       0.0000       5425.4    

    239.09     -0.56724      -6.5485      -4.7559      -8.6490       5.9795    
   -15.087      -3.1227       4006.5       0.0000       5570.2       2414.6    
    5551.8       1351.7       5570.2       4085.6       4923.3     -0.59559E-02
   0.85687E-01   0.0000      0.91549E-01 -0.17252     -0.83800E-01  0.98879E-01

   0.21707E-01 -0.42358E-01 -0.32748     -0.90427       0.0000     -0.18386E-01
  -0.51951E-01   0.0000     -0.83832E-02  0.32887E-02 -0.13595     -0.40952E-02
  -0.41942E-01 -0.10761E-01 -0.50936      -1.0923       4807.5     -0.77686    
  -0.88501      -2.4271      -2.4207     -0.89267E-01  0.61448E-01   9.1268    

    8.7628      -18185.      -4.0000     -0.58560     -0.83730       9.2812    
    8.8022      -17880.      -4.0000      0.16203     -0.86688       8.9305    
    8.9759      -20126.      -7.0000     -0.57122     -0.88876       9.1039    
    8.7766      -20539.      -7.0000    
 Function value at centroid =   154.010    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        1
neval is:      403


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      403     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -4.94125       4.94125       150.797       155.738    
   2  0.313379      -1.16034      -3.51267       3.51267       150.072       153.584    
   3  0.769177     -0.262434     -0.794460      0.794460       151.784       152.578    
   4  0.884560E-01  -2.42525      -7.34190       7.34190       149.281       156.623    
   5  0.890596     -0.115865     -0.350755      0.350755       152.119       152.470    
   6  0.657268     -0.419664      -1.27044       1.27044       152.254       153.525    
   7  0.960898     -0.398874E-01 -0.120750      0.120750       152.374       152.495    
   8  0.613422E-01  -2.79129      -8.44999       8.44999       151.846       160.296    
   9  0.264483E-01  -3.63256      -10.9968       10.9968       153.757       164.754    
  10  0.304822      -1.18803      -3.59649       3.59649       153.572       157.169    
  11  0.977907     -0.223409E-01 -0.676319E-01  0.676319E-01   153.696       153.763    
  12  0.746737     -0.292042     -0.884092      0.884092       151.679       152.563    
  13  0.450918E-01  -3.09905      -9.38168       9.38168       150.536       159.918    
  14  0.625433     -0.469311      -1.42073       1.42073       152.603       154.024    
  15  0.990029     -0.100208E-01 -0.303356E-01  0.303356E-01   152.717       152.748    
  16  0.985060     -0.150527E-01 -0.455686E-01  0.455686E-01   154.957       155.002    
  17  0.691362     -0.369092      -1.11734       1.11734       153.051       154.168    
  18  0.864323E-02  -4.75098      -14.3825       14.3825       152.325       166.708    
  19  0.908027E-01  -2.39907      -7.26263       7.26263       153.690       160.953    
  20  0.500093     -0.692962      -2.09778       2.09778       154.494       156.592    
  21  0.806913     -0.214539     -0.649469      0.649469       155.176       155.825    
  22  0.317749      -1.14649      -3.47075       3.47075       154.062       157.532    
  23  0.753050     -0.283623     -0.858605      0.858605       151.313       152.171    
  24  0.850048     -0.162463     -0.491819      0.491819       155.803       156.295    
  25  0.346718      -1.05924      -3.20662       3.20662       153.409       156.616    
  26  0.731558     -0.312579     -0.946261      0.946261       153.535       154.481    
  27  0.226645      -1.48437      -4.49360       4.49360       156.234       160.728    
  28  0.887805     -0.119003     -0.360254      0.360254       156.420       156.780    
  29  0.277731      -1.28110      -3.87825       3.87825       155.177       159.056    
  30  0.914814     -0.890349E-01 -0.269533      0.269533       154.646       154.915    
  31  0.298911      -1.20761      -3.65577       3.65577       155.207       158.863    
  32  0.469757     -0.755540      -2.28723       2.28723       153.419       155.706    
  33  0.217087      -1.52746      -4.62404       4.62404       157.065       161.689    
  34  0.143996      -1.93797      -5.86677       5.86677       156.387       162.254    
  35  0.873815     -0.134887     -0.408338      0.408338       155.446       155.854    
  36  0.102289      -2.27995      -6.90203       6.90203       152.040       158.942    
  37  0.583483     -0.538740      -1.63091       1.63091       157.855       159.486    
  38  0.308185      -1.17705      -3.56327       3.56327       150.890       154.453    
  39  0.129509      -2.04400      -6.18776       6.18776       155.776       161.964    
  40  0.858329     -0.152767     -0.462469      0.462469       154.726       155.189    
  41  0.247121      -1.39788      -4.23175       4.23175       154.189       158.421    
  42  0.672462     -0.396810      -1.20125       1.20125       152.866       154.067    
  43  0.978226     -0.220145E-01 -0.666438E-01  0.666438E-01   158.663       158.729    
  44  0.571205     -0.560006      -1.69529       1.69529       156.660       158.355    
  45  0.390724E-01  -3.24234      -9.81545       9.81545       156.578       166.393    
  46  0.773307     -0.257080     -0.778250      0.778250       158.812       159.590    
  47  0.860034     -0.150783     -0.456462      0.456462       158.526       158.982    
  48  0.521048     -0.651913      -1.97352       1.97352       158.180       160.153    
  49  0.577715     -0.548675      -1.66099       1.66099       155.132       156.793    
  50  0.449025     -0.800676      -2.42387       2.42387       157.688       160.112    
  51  0.879701     -0.128173     -0.388015      0.388015       158.974       159.362    
  52  0.553161     -0.592107      -1.79247       1.79247       155.270       157.062    
  53  0.501250E-01  -2.99324      -9.06134       9.06134       156.586       165.648    
  54  0.600542     -0.509923      -1.54367       1.54367       152.116       153.660    
  55  0.268895      -1.31343      -3.97612       3.97612       159.336       163.313    
  56  0.966550     -0.340228E-01 -0.102996      0.102996       155.109       155.212    
  57  0.223816      -1.49693      -4.53162       4.53162       160.242       164.774    
  58  0.422624     -0.861271      -2.60730       2.60730       155.841       158.449    
  59  0.664887     -0.408138      -1.23554       1.23554       159.717       160.953    
  60  0.710934     -0.341176      -1.03283       1.03283       158.046       159.079    
  61  0.476264     -0.741782      -2.24558       2.24558       157.599       159.845    
  62  0.736919     -0.305278     -0.924159      0.924159       160.049       160.973    
  63  0.124855      -2.08060      -6.29855       6.29855       155.551       161.849    
  64  0.440629     -0.819552      -2.48101       2.48101       160.107       162.588    
  65  0.901765E-01  -2.40599      -7.28358       7.28358       161.207       168.491    
  66  0.344754      -1.06492      -3.22382       3.22382       158.361       161.585    
  67  0.618647     -0.480221      -1.45376       1.45376       153.750       155.204    
  68  0.550827     -0.596334      -1.80526       1.80526       158.917       160.722    
  69  0.555162     -0.588495      -1.78153       1.78153       159.375       161.157    
  70  0.295668      -1.21852      -3.68879       3.68879       152.198       155.887    
  71  0.901940     -0.103207     -0.312435      0.312435       160.975       161.287    
  72  0.497126     -0.698911      -2.11579       2.11579       158.490       160.606    
  73  0.550369     -0.597167      -1.80779       1.80779       153.309       155.117    
  74  0.209155      -1.56468      -4.73671       4.73671       160.478       165.215    
  75  0.276161      -1.28677      -3.89541       3.89541       150.503       154.398    
loop,thermsimp(1:2)        1   4.94125       3.51267    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    405        149.82          0.86          1.14         25.19          0.34          0.05         27.59
Just calling func    0   0         27.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    406        150.12          0.86          1.14         25.17          0.21          0.06         27.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        1
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        2
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      405     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -4.40281       4.40281       151.313       155.716    
   2  0.293881      -1.22458      -3.70714       3.70714       152.119       155.827    
   3  0.833435     -0.182199     -0.551567      0.551567       152.374       152.926    
   4  0.931284     -0.711905E-01 -0.215513      0.215513       151.679       151.894    
   5  0.965536     -0.350722E-01 -0.106173      0.106173       151.784       151.890    
   6  0.534034     -0.627296      -1.89900       1.89900       152.717       154.616    
   7  0.975689     -0.246118E-01 -0.745065E-01  0.745065E-01   152.254       152.329    
   8  0.958131     -0.427704E-01 -0.129478      0.129478       150.072       150.201    
   9  0.487835     -0.717779      -2.17291       2.17291       152.116       154.289    
  10  0.941751     -0.600144E-01 -0.181680      0.181680       153.696       153.877    
  11  0.764698     -0.268274     -0.812139      0.812139       152.603       153.416    
  12  0.282403      -1.26442      -3.82774       3.82774       152.866       156.694    
  13  0.694349     -0.364781      -1.10429       1.10429       153.051       154.155    
  14  0.257622      -1.35626      -4.10577       4.10577       150.503       154.608    
  15  0.401572     -0.912369      -2.76199       2.76199       150.890       153.652    
  16  0.828654     -0.187952     -0.568982      0.568982       153.535       154.104    
  17  0.113844      -2.17292      -6.57803       6.57803       154.646       161.224    
  18  0.383967     -0.957199      -2.89770       2.89770       154.957       157.854    
  19  0.767294     -0.264886     -0.801881      0.801881       153.309       154.111    
  20  0.230085      -1.46930      -4.44799       4.44799       154.726       159.174    
  21  0.248551      -1.39211      -4.21429       4.21429       153.750       157.965    
  22  0.739043     -0.302399     -0.915443      0.915443       155.109       156.024    
  23  0.427702     -0.849328      -2.57115       2.57115       153.419       155.990    
  24  0.217549      -1.52533      -4.61759       4.61759       150.797       155.415    
  25  0.126759      -2.06546      -6.25272       6.25272       155.176       161.428    
  26  0.278624      -1.27789      -3.86853       3.86853       155.446       159.314    
  27  0.736668     -0.305618     -0.925188      0.925188       152.198       153.123    
  28  0.183809      -1.69386      -5.12777       5.12777       155.803       160.931    
  29  0.915242     -0.885666E-01 -0.268115      0.268115       154.494       154.762    
  30  0.864610     -0.145477     -0.440398      0.440398       153.409       153.850    
  31  0.996457     -0.354911E-02 -0.107441E-01  0.107441E-01   149.281       149.291    
  32  0.937047     -0.650222E-01 -0.196840      0.196840       156.420       156.616    
  33  0.664908     -0.408106      -1.23545       1.23545       155.132       156.367    
  34  0.409422     -0.893009      -2.70338       2.70338       155.270       157.973    
  35  0.293825E-01  -3.52736      -10.6783       10.6783       153.572       164.251    
  36  0.528099     -0.638471      -1.93283       1.93283       154.062       155.995    
  37  0.582244E-01  -2.84345      -8.60790       8.60790       156.660       165.268    
  38  0.394879     -0.929175      -2.81287       2.81287       154.189       157.002    
  39  0.619316     -0.479139      -1.45049       1.45049       155.841       157.292    
  40  0.760056     -0.274363     -0.830572      0.830572       158.663       159.493    
  41  0.322606      -1.13132      -3.42483       3.42483       155.207       158.632    
  42  0.806034     -0.215629     -0.652769      0.652769       152.040       152.693    
  43  0.158197      -1.84391      -5.58203       5.58203       158.526       164.108    
  44  0.964399     -0.362497E-01 -0.109738      0.109738       155.177       155.287    
  45  0.891984     -0.114307     -0.346038      0.346038       158.046       158.392    
  46  0.896576E-01  -2.41176      -7.30105       7.30105       158.974       166.275    
  47  0.976522     -0.237576E-01 -0.719206E-01  0.719206E-01   157.855       157.927    
  48  0.145640      -1.92662      -5.83239       5.83239       158.812       164.644    
  49  0.580689E-01  -2.84612      -8.61600       8.61600       157.599       166.215    
  50  0.154224      -1.86935      -5.65904       5.65904       150.536       156.195    
  51  0.623776     -0.471964      -1.42877       1.42877       157.688       159.117    
  52  0.949887     -0.514119E-01 -0.155638      0.155638       158.180       158.335    
  53  0.681810     -0.383005      -1.15946       1.15946       151.846       153.005    
  54  0.377382     -0.974497      -2.95007       2.95007       158.490       161.440    
  55  0.928894     -0.737604E-01 -0.223293      0.223293       158.917       159.140    
  56  0.484665     -0.724298      -2.19265       2.19265       156.234       158.427    
  57  0.499587     -0.693974      -2.10085       2.10085       159.717       161.818    
  58  0.478934     -0.736193      -2.22866       2.22866       153.690       155.919    
  59  0.520581     -0.652809      -1.97623       1.97623       160.049       162.025    
  60  0.320323E-01  -3.44101      -10.4169       10.4169       159.375       169.792    
  61  0.157322      -1.84946      -5.59883       5.59883       160.975       166.574    
  62  0.590227     -0.527248      -1.59612       1.59612       158.361       159.957    
  63  0.686824     -0.375677      -1.13728       1.13728       157.065       158.202    
  64  0.423825     -0.858435      -2.59872       2.59872       155.551       158.149    
  65  0.503291     -0.686586      -2.07848       2.07848       155.776       157.854    
  66  0.902595E-01  -2.40507      -7.28079       7.28079       156.387       163.668    
  67  0.952906     -0.482388E-01 -0.146032      0.146032       160.107       160.253    
  68  0.798848     -0.224585     -0.679879      0.679879       159.336       160.016    
  69  0.403317     -0.908033      -2.74886       2.74886       153.757       156.506    
  70  0.988352     -0.117167E-01 -0.354696E-01  0.354696E-01   160.242       160.277    
  71  0.360626      -1.01992      -3.08756       3.08756       160.478       163.566    
  72  0.885151     -0.121997     -0.369317      0.369317       156.586       156.956    
  73  0.130879      -2.03348      -6.15591       6.15591       156.578       162.734    
  74  0.133436E-01  -4.31672      -13.0679       13.0679       152.325       165.393    
  75  0.472164     -0.750430      -2.27176       2.27176       149.818       152.090    
loop,thermsimp(1:2)        2   4.40281       3.70714    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    407        151.69          0.87          1.15         25.21          0.11          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        2
neval is:      406
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        3
neval is:      406


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      406     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -2.75161       2.75161       149.281       152.032    
   2  0.995767     -0.424237E-02 -0.128428E-01  0.128428E-01   150.072       150.085    
   3  0.232708      -1.45797      -4.41368       4.41368       151.784       156.198    
   4  0.844104     -0.169480     -0.513062      0.513062       151.679       152.192    
   5  0.835080     -0.180228     -0.545598      0.545598       149.818       150.364    
   6  0.492927     -0.707395      -2.14148       2.14148       152.254       154.396    
   7  0.669838     -0.400719      -1.21308       1.21308       152.040       153.253    
   8  0.161727      -1.82184      -5.51522       5.51522       152.374       157.889    
   9  0.712877     -0.338447      -1.02457       1.02457       151.846       152.870    
  10  0.187101      -1.67610      -5.07403       5.07403       152.198       157.272    
  11  0.152475      -1.88075      -5.69355       5.69355       152.603       158.297    
  12  0.299805      -1.20462      -3.64672       3.64672       150.890       154.537    
  13  0.388928     -0.944360      -2.85884       2.85884       153.409       156.268    
  14  0.396030     -0.926264      -2.80406       2.80406       153.696       156.500    
  15  0.795332     -0.228996     -0.693234      0.693234       153.535       154.228    
  16  0.209301      -1.56398      -4.73460       4.73460       153.309       158.044    
  17  0.292717      -1.22855      -3.71916       3.71916       153.051       156.770    
  18  0.128603E-01  -4.35361      -13.1796       13.1796       152.116       165.295    
  19  0.386579E-01  -3.25301      -9.84774       9.84774       150.503       160.350    
  20  0.284417      -1.25731      -3.80623       3.80623       152.717       156.523    
  21  0.962037     -0.387027E-01 -0.117164      0.117164       154.494       154.612    
  22  0.340824      -1.07639      -3.25852       3.25852       155.177       158.436    
  23  0.463892     -0.768103      -2.32526       2.32526       150.797       153.122    
  24  0.772349     -0.258319     -0.782003      0.782003       151.313       152.095    
  25  0.580884     -0.543204      -1.64443       1.64443       152.119       153.764    
  26  0.519264     -0.655343      -1.98390       1.98390       153.690       155.674    
  27  0.336321      -1.08969      -3.29879       3.29879       153.419       156.718    
  28  0.975360     -0.249491E-01 -0.755276E-01  0.755276E-01   154.062       154.137    
  29  0.768530     -0.263276     -0.797008      0.797008       155.109       155.906    
  30  0.536540     -0.622614      -1.88482       1.88482       150.536       152.421    
  31  0.922732     -0.804161E-01 -0.243441      0.243441       155.132       155.375    
  32  0.603353     -0.505252      -1.52954       1.52954       153.757       155.287    
  33  0.927279E-01  -2.37809      -7.19912       7.19912       156.420       163.619    
  34  0.180890      -1.70987      -5.17623       5.17623       152.866       158.042    
  35  0.933825E-01  -2.37105      -7.17782       7.17782       156.586       163.764    
  36  0.343444      -1.06873      -3.23534       3.23534       154.189       157.425    
  37  0.102193      -2.28089      -6.90487       6.90487       155.841       162.746    
  38  0.397576     -0.922370      -2.79227       2.79227       155.776       158.568    
  39  0.455007     -0.787443      -2.38381       2.38381       154.957       157.340    
  40  0.559910     -0.579979      -1.75575       1.75575       157.855       159.610    
  41  0.901058     -0.104186     -0.315399      0.315399       153.750       154.066    
  42  0.849435     -0.163184     -0.494002      0.494002       155.270       155.764    
  43  0.231812      -1.46183      -4.42535       4.42535       155.551       159.976    
  44  0.119620      -2.12344      -6.42823       6.42823       157.065       163.493    
  45  0.885994     -0.121045     -0.366436      0.366436       158.180       158.546    
  46  0.166933      -1.79016      -5.41931       5.41931       158.046       163.466    
  47  0.284605      -1.25665      -3.80423       3.80423       156.234       160.038    
  48  0.392630     -0.934887      -2.83016       2.83016       155.207       158.037    
  49  0.275341      -1.28974      -3.90441       3.90441       157.688       161.593    
  50  0.808723     -0.212299     -0.642687      0.642687       158.917       159.560    
  51  0.544552     -0.607792      -1.83995       1.83995       154.726       156.566    
  52  0.729547     -0.315331     -0.954594      0.954594       155.446       156.400    
  53  0.986801     -0.132865E-01 -0.402219E-01  0.402219E-01   158.663       158.703    
  54  0.814160     -0.205599     -0.622404      0.622404       158.361       158.984    
  55  0.847794     -0.165117     -0.499855      0.499855       159.336       159.836    
  56  0.248789      -1.39115      -4.21139       4.21139       160.107       164.319    
  57  0.294277      -1.22323      -3.70307       3.70307       160.242       163.945    
  58  0.747234     -0.291377     -0.882078      0.882078       155.803       156.685    
  59  0.517211     -0.659304      -1.99589       1.99589       154.646       156.641    
  60  0.362192      -1.01558      -3.07444       3.07444       155.176       158.250    
  61  0.495572     -0.702043      -2.12528       2.12528       158.490       160.615    
  62  0.742180     -0.298163     -0.902622      0.902622       159.717       160.620    
  63  0.464476     -0.766845      -2.32145       2.32145       160.049       162.370    
  64  0.179754      -1.71616      -5.19530       5.19530       156.578       161.773    
  65  0.696938     -0.361059      -1.09303       1.09303       160.478       161.571    
  66  0.688154E-01  -2.67633      -8.10198       8.10198       156.387       164.489    
  67  0.592601     -0.523233      -1.58397       1.58397       158.526       160.110    
  68  0.399987E-01  -3.21891      -9.74451       9.74451       153.572       163.317    
  69  0.425783     -0.853826      -2.58476       2.58476       158.812       161.396    
  70  0.843399     -0.170315     -0.515591      0.515591       156.660       157.175    
  71  0.114575      -2.16653      -6.55867       6.55867       152.325       158.884    
  72  0.666802     -0.405262      -1.22684       1.22684       157.599       158.826    
  73  0.650497     -0.430018      -1.30178       1.30178       158.974       160.275    
  74  0.906339     -0.983422E-01 -0.297709      0.297709       160.975       161.272    
  75  0.382486     -0.961063      -2.90940       2.90940       151.692       154.602    
loop,thermsimp(1:2)        3   2.75161      0.128428E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    408        158.15          0.87          1.15         25.26          0.16          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    158.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        3
neval is:      407
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        4
neval is:      407


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      407     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -3.22415       3.22415       150.072       153.296    
   2  0.337825      -1.08523      -3.28528       3.28528       149.818       153.104    
   3  0.129257      -2.04595      -6.19366       6.19366       149.281       155.474    
   4  0.218013      -1.52320      -4.61115       4.61115       151.313       155.924    
   5  0.764988     -0.267896     -0.810993      0.810993       151.679       152.490    
   6  0.134235      -2.00816      -6.07925       6.07925       150.536       156.615    
   7  0.921891     -0.813288E-01 -0.246204      0.246204       151.846       152.092    
   8  0.879140E-01  -2.43140      -7.36050       7.36050       150.797       158.157    
   9  0.853506     -0.158403     -0.479528      0.479528       152.040       152.520    
  10  0.781888     -0.246043     -0.744840      0.744840       152.119       152.864    
  11  0.572060     -0.558512      -1.69077       1.69077       153.750       155.441    
  12  0.370929     -0.991745      -3.00228       3.00228       154.062       157.064    
  13  0.659208     -0.416716      -1.26151       1.26151       153.535       154.796    
  14  0.192080      -1.64984      -4.99452       4.99452       152.254       157.249    
  15  0.834249     -0.181224     -0.548614      0.548614       150.890       151.438    
  16  0.275735      -1.28831      -3.90008       3.90008       151.692       155.592    
  17  0.899896     -0.105476     -0.319304      0.319304       154.494       154.814    
  18  0.263842      -1.33241      -4.03356       4.03356       153.757       157.791    
  19  0.542051     -0.612396      -1.85389       1.85389       155.132       156.985    
  20  0.883103     -0.124314     -0.376331      0.376331       153.690       154.067    
  21  0.603547     -0.504931      -1.52856       1.52856       155.270       156.798    
  22  0.461006     -0.774344      -2.34415       2.34415       155.109       157.453    
  23  0.640920     -0.444850      -1.34668       1.34668       151.784       153.131    
  24  0.787319     -0.239122     -0.723888      0.723888       153.409       154.133    
  25  0.258775E-01  -3.65438      -11.0628       11.0628       155.446       166.509    
  26  0.838926     -0.175633     -0.531689      0.531689       153.696       154.227    
  27  0.184807      -1.68845      -5.11139       5.11139       152.717       157.829    
  28  0.642750     -0.441999      -1.33805       1.33805       154.726       156.064    
  29  0.962815     -0.378938E-01 -0.114715      0.114715       154.646       154.760    
  30  0.866393     -0.143417     -0.434161      0.434161       155.803       156.238    
  31  0.652626     -0.426751      -1.29189       1.29189       153.419       154.711    
  32  0.170956      -1.76635      -5.34722       5.34722       153.051       158.398    
  33  0.769008     -0.262654     -0.795125      0.795125       156.660       157.455    
  34  0.156770      -1.85298      -5.60947       5.60947       152.198       157.808    
  35  0.256549E-01  -3.66302      -11.0890       11.0890       154.957       166.045    
  36  0.726661     -0.319295     -0.966593      0.966593       154.189       155.156    
  37  0.556665     -0.585792      -1.77335       1.77335       152.374       154.147    
  38  0.381201     -0.964427      -2.91959       2.91959       155.207       158.127    
  39  0.312648      -1.16268      -3.51974       3.51974       152.866       156.386    
  40  0.523641     -0.646949      -1.95849       1.95849       153.309       155.268    
  41  0.525107     -0.644154      -1.95003       1.95003       155.176       157.126    
  42  0.577096     -0.549746      -1.66423       1.66423       152.603       154.268    
  43  0.218919      -1.51905      -4.59859       4.59859       155.177       159.776    
  44  0.406968     -0.899021      -2.72158       2.72158       158.180       160.901    
  45  0.269244      -1.31214      -3.97219       3.97219       155.776       159.748    
  46  0.150666      -1.89269      -5.72968       5.72968       158.663       164.392    
  47  0.619490     -0.478859      -1.44964       1.44964       157.599       159.049    
  48  0.204317      -1.58808      -4.80756       4.80756       152.325       157.133    
  49  0.924766     -0.782150E-01 -0.236778      0.236778       158.361       158.598    
  50  0.897527E-01  -2.41070      -7.29784       7.29784       158.917       166.215    
  51  0.938635     -0.633286E-01 -0.191713      0.191713       157.855       158.046    
  52  0.265009      -1.32799      -4.02020       4.02020       159.336       163.357    
  53  0.914538     -0.893366E-01 -0.270446      0.270446       155.551       155.821    
  54  0.369988     -0.994284      -3.00997       3.00997       156.234       159.244    
  55  0.670325     -0.399992      -1.21089       1.21089       158.526       159.737    
  56  0.580716     -0.543494      -1.64531       1.64531       158.974       160.619    
  57  0.640472     -0.445550      -1.34880       1.34880       150.503       151.851    
  58  0.711348E-01  -2.64318      -8.00163       8.00163       158.490       166.492    
  59  0.377254E-01  -3.27742      -9.92165       9.92165       159.717       169.639    
  60  0.712296     -0.339261      -1.02704       1.02704       160.975       162.002    
  61  0.628609     -0.464246      -1.40540       1.40540       158.812       160.217    
  62  0.729486     -0.315415     -0.954847      0.954847       160.478       161.433    
  63  0.851489     -0.160769     -0.486692      0.486692       157.688       158.175    
  64  0.728439     -0.316851     -0.959195      0.959195       156.578       157.537    
  65  0.813668     -0.206203     -0.624234      0.624234       160.049       160.673    
  66  0.176154      -1.73639      -5.25654       5.25654       155.841       161.098    
  67  0.803356     -0.218957     -0.662843      0.662843       153.572       154.235    
  68  0.842930     -0.170871     -0.517273      0.517273       158.046       158.564    
  69  0.585957     -0.534508      -1.61810       1.61810       157.065       158.683    
  70  0.108696      -2.21920      -6.71812       6.71812       156.420       163.138    
  71  0.440194     -0.820540      -2.48400       2.48400       156.586       159.070    
  72  0.425757     -0.853886      -2.58495       2.58495       160.242       162.827    
  73  0.627385     -0.466195      -1.41130       1.41130       160.107       161.519    
  74  0.298261      -1.20979      -3.66236       3.66236       156.387       160.049    
  75  0.256299      -1.36141      -4.12136       4.12136       158.148       162.269    
loop,thermsimp(1:2)        4   3.22415       3.28528    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    409        151.41          0.87          1.15         25.20          0.13          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    410        149.13          0.86          1.16         25.22          0.14          0.06         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        4
neval is:      409
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        5
neval is:      409


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      409     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.185829E-01  0.185829E-01   150.890       150.908    
   2  0.544036     -0.608740      -1.84282       1.84282       150.503       152.345    
   3  0.752151     -0.284818     -0.862222      0.862222       151.846       152.708    
   4  0.128894      -2.04876      -6.20217       6.20217       151.679       157.881    
   5  0.954586     -0.464781E-01 -0.140702      0.140702       152.040       152.181    
   6  0.699109     -0.357949      -1.08361       1.08361       152.119       153.203    
   7  0.158831      -1.83992      -5.56993       5.56993       149.818       155.388    
   8  0.317803      -1.14632      -3.47023       3.47023       151.784       155.254    
   9  0.533633     -0.628047      -1.90127       1.90127       150.072       151.973    
  10  0.232061      -1.46076      -4.42211       4.42211       153.690       158.112    
  11  0.798671     -0.224806     -0.680549      0.680549       153.409       154.090    
  12  0.629719     -0.462482      -1.40006       1.40006       152.374       153.774    
  13  0.285415      -1.25381      -3.79563       3.79563       153.696       157.491    
  14  0.101345      -2.28923      -6.93011       6.93011       153.572       160.502    
  15  0.523846     -0.646557      -1.95731       1.95731       152.603       154.561    
  16  0.570798     -0.560721      -1.69745       1.69745       153.419       155.117    
  17  0.471006     -0.752884      -2.27918       2.27918       154.646       156.925    
  18  0.439034     -0.823179      -2.49199       2.49199       153.535       156.027    
  19  0.755118     -0.280881     -0.850305      0.850305       154.494       155.345    
  20  0.987033     -0.130515E-01 -0.395104E-01  0.395104E-01   154.189       154.229    
  21  0.800390E-01  -2.52524      -7.64459       7.64459       153.309       160.954    
  22  0.739282     -0.302075     -0.914464      0.914464       153.750       154.665    
  23  0.367536      -1.00093      -3.03010       3.03010       149.281       152.311    
  24  0.397431     -0.922735      -2.79337       2.79337       151.692       154.486    
  25  0.338773      -1.08242      -3.27679       3.27679       155.551       158.828    
  26  0.388721     -0.944893      -2.86045       2.86045       151.313       154.173    
  27  0.298998      -1.20732      -3.65488       3.65488       154.726       158.381    
  28  0.668470     -0.402763      -1.21927       1.21927       155.803       157.023    
  29  0.604587     -0.503210      -1.52335       1.52335       152.866       154.389    
  30  0.455577     -0.786190      -2.38001       2.38001       150.536       152.916    
  31  0.842360     -0.171548     -0.519324      0.519324       155.270       155.789    
  32  0.452047     -0.793969      -2.40356       2.40356       155.132       157.535    
  33  0.994488     -0.552709E-02 -0.167320E-01  0.167320E-01   154.062       154.078    
  34  0.309000E-02  -5.77958      -17.4964       17.4964       155.176       172.672    
  35  0.171789      -1.76149      -5.33250       5.33250       152.325       157.658    
  36  0.567417     -0.566661      -1.71544       1.71544       152.254       153.970    
  37  0.885121     -0.122031     -0.369421      0.369421       155.109       155.478    
  38  0.342608      -1.07117      -3.24272       3.24272       156.660       159.903    
  39  0.954017     -0.470733E-01 -0.142504      0.142504       156.578       156.720    
  40  0.439346     -0.822467      -2.48983       2.48983       153.757       156.247    
  41  0.237365E-01  -3.74074      -11.3243       11.3243       152.198       163.522    
  42  0.100236      -2.30023      -6.96342       6.96342       152.717       159.681    
  43  0.539338     -0.617412      -1.86908       1.86908       157.855       159.724    
  44  0.825393     -0.191896     -0.580922      0.580922       155.207       155.788    
  45  0.252744      -1.37538      -4.16364       4.16364       150.797       154.961    
  46  0.676050     -0.391488      -1.18514       1.18514       157.688       158.874    
  47  0.621378     -0.475815      -1.44042       1.44042       153.051       154.491    
  48  0.375614     -0.979194      -2.96429       2.96429       158.046       161.011    
  49  0.638637     -0.448418      -1.35748       1.35748       158.361       159.719    
  50  0.540154     -0.615902      -1.86450       1.86450       157.065       158.929    
  51  0.295099      -1.22045      -3.69462       3.69462       157.599       161.294    
  52  0.195781      -1.63076      -4.93675       4.93675       156.586       161.523    
  53  0.430058     -0.843836      -2.55452       2.55452       156.234       158.789    
  54  0.686512E-01  -2.67872      -8.10921       8.10921       158.526       166.635    
  55  0.689090     -0.372384      -1.12731       1.12731       155.776       156.903    
  56  0.737045     -0.305106     -0.923640      0.923640       155.177       156.101    
  57  0.303800      -1.19139      -3.60665       3.60665       156.387       159.994    
  58  0.709025     -0.343864      -1.04097       1.04097       158.812       159.852    
  59  0.754321     -0.281937     -0.853500      0.853500       158.974       159.827    
  60  0.917745E-01  -2.38842      -7.23040       7.23040       160.049       167.279    
  61  0.600903     -0.509321      -1.54186       1.54186       158.180       159.722    
  62  0.880182     -0.127627     -0.386360      0.386360       155.841       156.228    
  63  0.318171      -1.14517      -3.46674       3.46674       160.478       163.945    
  64  0.625153     -0.469759      -1.42209       1.42209       160.107       161.530    
  65  0.956330     -0.446527E-01 -0.135176      0.135176       160.975       161.110    
  66  0.152880      -1.87810      -5.68553       5.68553       158.148       163.834    
  67  0.933903     -0.683823E-01 -0.207012      0.207012       160.242       160.449    
  68  0.875511     -0.132948     -0.402469      0.402469       156.420       156.822    
  69  0.929728E-02  -4.67803      -14.1617       14.1617       159.336       173.498    
  70  0.554939     -0.588896      -1.78275       1.78275       158.663       160.445    
  71  0.630856     -0.460677      -1.39460       1.39460       154.957       156.351    
  72  0.152909      -1.87791      -5.68496       5.68496       158.917       164.602    
  73  0.197011      -1.62450      -4.91780       4.91780       158.490       163.408    
  74  0.166504      -1.79274      -5.42710       5.42710       155.446       160.873    
  75  0.934940     -0.672732E-01 -0.203654      0.203654       149.129       149.333    
loop,thermsimp(1:2)        5  0.185829E-01   1.84282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    411        180.02          0.87          1.15         25.25          0.13          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    412        154.47          0.86          1.15         25.26          0.29          0.06         27.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    154.47
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        5
neval is:      411
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        6
neval is:      411


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      411     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -3.24389       3.24389       149.129       152.373    
   2  0.738210     -0.303527     -0.918860      0.918860       150.890       151.809    
   3  0.254388      -1.36889      -4.14402       4.14402       150.072       154.216    
   4  0.184184      -1.69182      -5.12160       5.12160       152.040       157.162    
   5  0.467311     -0.760760      -2.30303       2.30303       149.281       151.584    
   6  0.718957     -0.329953     -0.998859      0.998859       150.503       151.501    
   7  0.233172      -1.45598      -4.40764       4.40764       151.846       156.254    
   8  0.855319     -0.156281     -0.473104      0.473104       150.536       151.009    
   9  0.331323      -1.10466      -3.34411       3.34411       152.119       155.464    
  10  0.737635E-01  -2.60689      -7.89177       7.89177       152.374       160.266    
  11  0.960656     -0.401393E-01 -0.121513      0.121513       152.254       152.376    
  12  0.312287      -1.16383      -3.52324       3.52324       154.062       157.585    
  13  0.252190      -1.37757      -4.17028       4.17028       153.409       157.580    
  14  0.775876     -0.253763     -0.768209      0.768209       151.313       152.081    
  15  0.397248     -0.923194      -2.79476       2.79476       154.189       156.984    
  16  0.587084E-01  -2.83517      -8.58284       8.58284       152.866       161.449    
  17  0.923214     -0.798941E-01 -0.241861      0.241861       151.692       151.934    
  18  0.147001      -1.91731      -5.80423       5.80423       153.051       158.855    
  19  0.275551      -1.28898      -3.90211       3.90211       152.603       156.506    
  20  0.157032      -1.85131      -5.60442       5.60442       153.750       159.355    
  21  0.468534     -0.758146      -2.29512       2.29512       150.797       153.092    
  22  0.101055      -2.29209      -6.93878       6.93878       153.419       160.358    
  23  0.891765     -0.114553     -0.346782      0.346782       151.784       152.131    
  24  0.756241     -0.279395     -0.845804      0.845804       154.494       155.340    
  25  0.212181E-01  -3.85290      -11.6638       11.6638       149.818       161.482    
  26  0.807607     -0.213679     -0.646866      0.646866       155.109       155.755    
  27  0.233854      -1.45306      -4.39881       4.39881       155.207       159.606    
  28  0.622600     -0.473852      -1.43448       1.43448       155.270       156.704    
  29  0.188561      -1.66833      -5.05050       5.05050       153.535       158.585    
  30  0.938432E-01  -2.36613      -7.16292       7.16292       155.177       162.340    
  31  0.846333     -0.166843     -0.505078      0.505078       155.841       156.346    
  32  0.258796      -1.35172      -4.09202       4.09202       153.757       157.849    
  33  0.503854     -0.685469      -2.07510       2.07510       154.957       157.032    
  34  0.577410     -0.549202      -1.66258       1.66258       156.578       158.240    
  35  0.282259E-01  -3.56751      -10.7998       10.7998       156.420       167.219    
  36  0.618901     -0.479811      -1.45252       1.45252       155.776       157.228    
  37  0.563982     -0.572733      -1.73382       1.73382       154.646       156.379    
  38  0.290650      -1.23563      -3.74060       3.74060       155.803       159.544    
  39  0.165662      -1.79781      -5.44245       5.44245       153.696       159.138    
  40  0.871949E-01  -2.43961      -7.38536       7.38536       155.132       162.517    
  41  0.494744     -0.703714      -2.13034       2.13034       152.325       154.456    
  42  0.156326      -1.85581      -5.61804       5.61804       151.679       157.297    
  43  0.558357     -0.582757      -1.76416       1.76416       153.690       155.454    
  44  0.974745     -0.255792E-01 -0.774352E-01  0.774352E-01   154.726       154.804    
  45  0.399321     -0.917991      -2.77901       2.77901       156.234       159.013    
  46  0.649792     -0.431103      -1.30507       1.30507       155.551       156.856    
  47  0.210634      -1.55763      -4.71538       4.71538       157.688       162.404    
  48  0.939937     -0.619427E-01 -0.187518      0.187518       157.065       157.252    
  49  0.617394     -0.482248      -1.45990       1.45990       152.717       154.177    
  50  0.435355     -0.831593      -2.51746       2.51746       158.361       160.879    
  51  0.423449     -0.859323      -2.60141       2.60141       158.180       160.781    
  52  0.922974     -0.801543E-01 -0.242649      0.242649       157.855       158.097    
  53  0.877321     -0.130883     -0.396218      0.396218       158.974       159.370    
  54  0.757805     -0.277329     -0.839552      0.839552       158.812       159.651    
  55  0.972356     -0.280336E-01 -0.848652E-01  0.848652E-01   156.660       156.745    
  56  0.535145     -0.625217      -1.89270       1.89270       156.387       158.280    
  57  0.654598     -0.423734      -1.28276       1.28276       158.663       159.945    
  58  0.131676E-01  -4.32999      -13.1081       13.1081       160.242       173.350    
  59  0.835144     -0.180151     -0.545366      0.545366       153.572       154.118    
  60  0.965311E-01  -2.33789      -7.07743       7.07743       155.446       162.523    
  61  0.955098     -0.459413E-01 -0.139077      0.139077       153.309       153.448    
  62  0.807730     -0.213527     -0.646405      0.646405       158.046       158.693    
  63  0.312538      -1.16303      -3.52081       3.52081       160.975       164.496    
  64  0.757580     -0.277626     -0.840449      0.840449       157.599       158.439    
  65  0.852108     -0.160043     -0.484493      0.484493       156.586       157.071    
  66  0.893102E-01  -2.41564      -7.31280       7.31280       160.107       167.420    
  67  0.973210     -0.271549E-01 -0.822053E-01  0.822053E-01   158.490       158.572    
  68  0.126785      -2.06527      -6.25212       6.25212       152.198       158.450    
  69  0.765960     -0.266625     -0.807148      0.807148       158.148       158.955    
  70  0.768352     -0.263507     -0.797709      0.797709       160.478       161.276    
  71  0.771160     -0.259860     -0.786667      0.786667       158.917       159.704    
  72  0.771741     -0.259106     -0.784384      0.784384       158.526       159.310    
  73  0.234032      -1.45230      -4.39650       4.39650       160.049       164.446    
  74  0.868804     -0.140638     -0.425749      0.425749       155.176       155.601    
  75  0.107696E-02  -6.83361      -20.6872       20.6872       154.474       175.161    
loop,thermsimp(1:2)        6   3.24389      0.918860    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    413        157.09          0.87          1.16         25.25          0.51          0.05         27.84
Just calling func    0   0         27.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    157.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        6
neval is:      412
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        7
neval is:      412


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      412     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -1.22405       1.22405       150.536       151.760    
   2  0.361364E-01  -3.32046      -10.0519       10.0519       150.503       160.554    
   3  0.167171      -1.78874      -5.41499       5.41499       149.281       154.696    
   4  0.268590E-01  -3.61716      -10.9501       10.9501       150.890       161.840    
   5  0.979339     -0.208774E-01 -0.632016E-01  0.632016E-01   151.692       151.755    
   6  0.285956E-01  -3.55450      -10.7604       10.7604       151.313       162.073    
   7  0.614036     -0.487701      -1.47641       1.47641       151.784       153.260    
   8  0.291622      -1.23230      -3.73049       3.73049       149.129       152.860    
   9  0.495778     -0.701626      -2.12401       2.12401       152.254       154.378    
  10  0.289385      -1.24000      -3.75381       3.75381       150.797       154.551    
  11  0.601390     -0.508511      -1.53940       1.53940       153.309       154.849    
  12  0.868837     -0.140599     -0.425632      0.425632       153.572       153.998    
  13  0.289097E-01  -3.54358      -10.7274       10.7274       152.717       163.445    
  14  0.999895     -0.104574E-03 -0.316575E-03  0.316575E-03   150.072       150.072    
  15  0.547924     -0.601620      -1.82127       1.82127       152.325       154.147    
  16  0.562607     -0.575175      -1.74121       1.74121       154.726       156.468    
  17  0.422387     -0.861832      -2.60900       2.60900       154.494       157.103    
  18  0.934703     -0.675264E-01 -0.204421      0.204421       153.690       153.895    
  19  0.484044     -0.725579      -2.19653       2.19653       152.119       154.316    
  20  0.362136      -1.01574      -3.07491       3.07491       155.176       158.251    
  21  0.826677     -0.190341     -0.576213      0.576213       155.109       155.685    
  22  0.383965     -0.957204      -2.89772       2.89772       151.846       154.744    
  23  0.403854     -0.906702      -2.74484       2.74484       155.841       158.586    
  24  0.375365     -0.979857      -2.96629       2.96629       154.646       157.612    
  25  0.335540      -1.09201      -3.30582       3.30582       152.603       155.909    
  26  0.744256     -0.295370     -0.894165      0.894165       155.270       156.164    
  27  0.611040     -0.492593      -1.49121       1.49121       156.660       158.151    
  28  0.361728      -1.01686      -3.07832       3.07832       155.551       158.629    
  29  0.381582     -0.963430      -2.91657       2.91657       154.189       157.106    
  30  0.738884E-01  -2.60520      -7.88665       7.88665       154.957       162.843    
  31  0.185722E-01  -3.98609      -12.0670       12.0670       156.586       168.653    
  32  0.470279     -0.754429      -2.28386       2.28386       152.040       154.324    
  33  0.499505     -0.694139      -2.10135       2.10135       155.776       157.877    
  34  0.641578     -0.443824      -1.34358       1.34358       157.065       158.409    
  35  0.462400     -0.771325      -2.33501       2.33501       151.679       154.014    
  36  0.953656     -0.474527E-01 -0.143652      0.143652       153.409       153.553    
  37  0.305321E-01  -3.48898      -10.5621       10.5621       154.062       164.624    
  38  0.281396      -1.26799      -3.83856       3.83856       153.757       157.596    
  39  0.642231     -0.442807      -1.34050       1.34050       157.855       159.195    
  40  0.506226     -0.680772      -2.06088       2.06088       156.578       158.639    
  41  0.152451      -1.88091      -5.69404       5.69404       156.387       162.081    
  42  0.825356     -0.191941     -0.581056      0.581056       157.599       158.180    
  43  0.895901     -0.109926     -0.332775      0.332775       152.198       152.531    
  44  0.706880     -0.346894      -1.05014       1.05014       158.490       159.540    
  45  0.810453     -0.210162     -0.636219      0.636219       153.535       154.171    
  46  0.463153     -0.769698      -2.33009       2.33009       158.046       160.376    
  47  0.333587      -1.09785      -3.32349       3.32349       153.051       156.374    
  48  0.588678     -0.529875      -1.60408       1.60408       158.148       159.752    
  49  0.724542E-01  -2.62480      -7.94599       7.94599       156.234       164.180    
  50  0.550549     -0.596839      -1.80680       1.80680       153.696       155.503    
  51  0.945764     -0.557622E-01 -0.168807      0.168807       158.526       158.694    
  52  0.903703E-01  -2.40384      -7.27708       7.27708       153.750       161.027    
  53  0.435583     -0.831070      -2.51588       2.51588       158.974       161.490    
  54  0.364079E-01  -3.31297      -10.0293       10.0293       155.803       165.833    
  55  0.801026     -0.221862     -0.671638      0.671638       155.207       155.879    
  56  0.440703     -0.819384      -2.48050       2.48050       158.812       161.292    
  57  0.585820     -0.534743      -1.61881       1.61881       158.917       160.536    
  58  0.874676     -0.133902     -0.405358      0.405358       158.663       159.068    
  59  0.709061     -0.343814      -1.04082       1.04082       152.374       153.415    
  60  0.937361     -0.646865E-01 -0.195824      0.195824       153.419       153.615    
  61  0.775497     -0.254252     -0.769689      0.769689       158.180       158.949    
  62  0.966192     -0.343929E-01 -0.104117      0.104117       158.361       158.465    
  63  0.521378     -0.651281      -1.97160       1.97160       160.478       162.450    
  64  0.162994      -1.81404      -5.49160       5.49160       152.866       158.358    
  65  0.732373     -0.311466     -0.942892      0.942892       149.818       150.761    
  66  0.845693     -0.167599     -0.507367      0.507367       155.177       155.685    
  67  0.227566      -1.48031      -4.48131       4.48131       157.688       162.170    
  68  0.985726     -0.143764E-01 -0.435214E-01  0.435214E-01   155.132       155.175    
  69  0.841574     -0.172481     -0.522147      0.522147       155.446       155.968    
  70  0.408663     -0.894863      -2.70900       2.70900       160.049       162.758    
  71  0.740436     -0.300516     -0.909744      0.909744       160.975       161.885    
  72  0.969580     -0.308926E-01 -0.935202E-01  0.935202E-01   156.420       156.513    
  73  0.345718      -1.06213      -3.21537       3.21537       160.107       163.323    
  74  0.145004      -1.93099      -5.84564       5.84564       160.242       166.088    
  75  0.644970     -0.438552      -1.32762       1.32762       157.088       158.415    
loop,thermsimp(1:2)        7   1.22405       10.0519    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    414        149.77          0.87          1.15         25.20          0.16          0.05         27.42
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    415        151.55          0.85          1.15         25.21          0.21          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        7
neval is:      414
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        8
neval is:      414


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      414     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891     -0.553663      0.553663       150.072       150.625    
   2  0.610299     -0.493806      -1.49489       1.49489       149.818       151.313    
   3  0.652915     -0.426308      -1.29055       1.29055       151.692       152.983    
   4  0.273016      -1.29823      -3.93008       3.93008       150.536       154.466    
   5  0.570853     -0.560623      -1.69716       1.69716       152.198       153.895    
   6  0.107477E-01  -4.53306      -13.7228       13.7228       149.129       162.852    
   7  0.651717     -0.428145      -1.29611       1.29611       151.784       153.080    
   8  0.214404      -1.53989      -4.66168       4.66168       152.374       157.036    
   9  0.132680      -2.01982      -6.11454       6.11454       153.409       159.524    
  10  0.370727     -0.992290      -3.00393       3.00393       153.419       156.423    
  11  0.330444      -1.10732      -3.35215       3.35215       153.690       157.042    
  12  0.462713     -0.770647      -2.33296       2.33296       153.572       155.905    
  13  0.514022     -0.665489      -2.01462       2.01462       151.679       153.693    
  14  0.644984     -0.438530      -1.32755       1.32755       152.325       153.653    
  15  0.813975     -0.205826     -0.623092      0.623092       153.535       154.158    
  16  0.434803     -0.832863      -2.52130       2.52130       152.119       154.641    
  17  0.212985      -1.54653      -4.68178       4.68178       152.040       156.722    
  18  0.796179     -0.227931     -0.690009      0.690009       152.254       152.944    
  19  0.259948      -1.34727      -4.07856       4.07856       150.797       154.876    
  20  0.526723     -0.641081      -1.94073       1.94073       149.281       151.221    
  21  0.392691     -0.934731      -2.82969       2.82969       151.846       154.676    
  22  0.949472     -0.518494E-01 -0.156962      0.156962       153.309       153.466    
  23  0.665479E-01  -2.70983      -8.20341       8.20341       155.132       163.335    
  24  0.927466E-01  -2.37788      -7.19851       7.19851       153.696       160.894    
  25  0.630503     -0.461237      -1.39629       1.39629       155.177       156.574    
  26  0.714749     -0.335823      -1.01663       1.01663       155.109       156.125    
  27  0.450999     -0.796290      -2.41059       2.41059       155.207       157.618    
  28  0.184997      -1.68742      -5.10828       5.10828       152.603       157.712    
  29  0.989607     -0.104473E-01 -0.316269E-01  0.316269E-01   155.446       155.477    
  30  0.530766     -0.633434      -1.91758       1.91758       155.270       157.187    
  31  0.495227     -0.702738      -2.12738       2.12738       153.051       155.178    
  32  0.787696     -0.238642     -0.722436      0.722436       154.726       155.449    
  33  0.168123      -1.78306      -5.39781       5.39781       156.420       161.817    
  34  0.205580      -1.58192      -4.78891       4.78891       154.494       159.283    
  35  0.182087      -1.70327      -5.15627       5.15627       154.189       159.346    
  36  0.320489      -1.13791      -3.44476       3.44476       153.757       157.202    
  37  0.591526     -0.525050      -1.58947       1.58947       154.646       156.235    
  38  0.374258     -0.982811      -2.97524       2.97524       155.776       158.751    
  39  0.578871     -0.546675      -1.65493       1.65493       156.660       158.315    
  40  0.542113     -0.612280      -1.85354       1.85354       157.599       159.452    
  41  0.123399      -2.09233      -6.33407       6.33407       155.176       161.510    
  42  0.874747     -0.133820     -0.405111      0.405111       152.866       153.271    
  43  0.521146     -0.651725      -1.97295       1.97295       157.065       159.038    
  44  0.160493      -1.82950      -5.53840       5.53840       157.088       162.626    
  45  0.606451     -0.500131      -1.51403       1.51403       158.361       159.875    
  46  0.947463     -0.539676E-01 -0.163375      0.163375       155.841       156.005    
  47  0.187698      -1.67292      -5.06439       5.06439       155.551       160.615    
  48  0.157453      -1.84863      -5.59631       5.59631       156.578       162.174    
  49  0.411413     -0.888157      -2.68869       2.68869       158.526       161.214    
  50  0.399256     -0.918152      -2.77950       2.77950       158.180       160.959    
  51  0.629238     -0.463246      -1.40237       1.40237       158.663       160.065    
  52  0.831952     -0.183980     -0.556958      0.556958       157.855       158.412    
  53  0.677270     -0.389686      -1.17969       1.17969       158.490       159.670    
  54  0.937557     -0.644782E-01 -0.195193      0.195193       158.148       158.343    
  55  0.410617     -0.890095      -2.69456       2.69456       158.046       160.741    
  56  0.896761E-01  -2.41155      -7.30042       7.30042       158.917       166.217    
  57  0.757537     -0.277683     -0.840623      0.840623       150.503       151.343    
  58  0.893032     -0.113133     -0.342483      0.342483       153.750       154.093    
  59  0.689367E-02  -4.97715      -15.0672       15.0672       158.812       173.879    
  60  0.315133      -1.15476      -3.49578       3.49578       158.974       162.469    
  61  0.206555      -1.57719      -4.77458       4.77458       150.890       155.664    
  62  0.577131     -0.549685      -1.66405       1.66405       160.975       162.639    
  63  0.796209     -0.227894     -0.689897      0.689897       151.313       152.003    
  64  0.519424     -0.655035      -1.98297       1.98297       156.387       158.370    
  65  0.906043     -0.986690E-01 -0.298698      0.298698       157.688       157.987    
  66  0.112560      -2.18427      -6.61239       6.61239       160.478       167.090    
  67  0.104180      -2.26164      -6.84659       6.84659       160.049       166.896    
  68  0.972264     -0.281281E-01 -0.851513E-01  0.851513E-01   154.957       155.042    
  69  0.824404     -0.193095     -0.584552      0.584552       160.107       160.692    
  70  0.337178      -1.08714      -3.29108       3.29108       152.717       156.008    
  71  0.283334      -1.26113      -3.81778       3.81778       156.234       160.052    
  72  0.837969     -0.176774     -0.535142      0.535142       154.062       154.597    
  73  0.320393      -1.13821      -3.44566       3.44566       155.803       159.249    
  74  0.268462      -1.31505      -3.98100       3.98100       160.242       164.223    
  75  0.807962     -0.213241     -0.645537      0.645537       149.772       150.418    
loop,thermsimp(1:2)        8  0.553663       1.49489    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    416        150.15          0.87          1.15         25.25          0.09          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    417        150.22          0.85          1.15         25.28          0.32          0.05         27.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        8
neval is:      416
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:        9
neval is:      416


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      416     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -4.97883       4.97883       149.772       154.751    
   2  0.822950     -0.194860     -0.589895      0.589895       150.072       150.662    
   3  0.396787     -0.924357      -2.79828       2.79828       149.281       152.079    
   4  0.141060      -1.95857      -5.92912       5.92912       149.818       155.748    
   5  0.673747     -0.394901      -1.19547       1.19547       150.503       151.698    
   6  0.142835      -1.94606      -5.89126       5.89126       151.313       157.204    
   7  0.707555     -0.345940      -1.04725       1.04725       152.254       153.302    
   8  0.957483     -0.434474E-01 -0.131527      0.131527       151.692       151.824    
   9  0.524586     -0.645145      -1.95303       1.95303       151.784       153.737    
  10  0.692024     -0.368135      -1.11444       1.11444       152.866       153.980    
  11  0.936675E-01  -2.36800      -7.16859       7.16859       153.309       160.478    
  12  0.216270      -1.53123      -4.63544       4.63544       152.325       156.961    
  13  0.329369      -1.11058      -3.36202       3.36202       151.679       155.041    
  14  0.670774     -0.399323      -1.20886       1.20886       152.198       153.407    
  15  0.263445      -1.33391      -4.03811       4.03811       153.750       157.788    
  16  0.150248      -1.89547      -5.73810       5.73810       153.535       159.273    
  17  0.357034      -1.02992      -3.11786       3.11786       150.536       153.654    
  18  0.833286E-01  -2.48496      -7.52266       7.52266       154.062       161.584    
  19  0.431395     -0.840731      -2.54512       2.54512       152.119       154.665    
  20  0.304550      -1.18892      -3.59919       3.59919       151.846       155.445    
  21  0.930203     -0.723520E-01 -0.219029      0.219029       150.797       151.016    
  22  0.443091     -0.813979      -2.46414       2.46414       154.957       157.421    
  23  0.361548      -1.01736      -3.07983       3.07983       153.051       156.130    
  24  0.603851     -0.504427      -1.52704       1.52704       154.726       156.253    
  25  0.825014     -0.192355     -0.582310      0.582310       155.446       156.028    
  26  0.658742     -0.417424      -1.26366       1.26366       150.890       152.153    
  27  0.938632     -0.633319E-01 -0.191723      0.191723       153.572       153.764    
  28  0.264383E-01  -3.63294      -10.9979       10.9979       155.841       166.839    
  29  0.770543     -0.260660     -0.789090      0.789090       152.717       153.506    
  30  0.536385     -0.622903      -1.88570       1.88570       155.109       156.994    
  31  0.173997      -1.74872      -5.29385       5.29385       154.646       159.939    
  32  0.876286     -0.132063     -0.399790      0.399790       153.419       153.819    
  33  0.447573     -0.803915      -2.43367       2.43367       155.177       157.611    
  34  0.521740E-01  -2.95317      -8.94005       8.94005       152.040       160.980    
  35  0.509285     -0.674747      -2.04264       2.04264       152.374       154.417    
  36  0.135259      -2.00056      -6.05625       6.05625       153.690       159.747    
  37  0.238321      -1.43414      -4.34152       4.34152       155.270       159.611    
  38  0.146995      -1.91735      -5.80436       5.80436       153.757       159.562    
  39  0.166047      -1.79549      -5.43543       5.43543       155.207       160.643    
  40  0.830113     -0.186194     -0.563659      0.563659       152.603       153.167    
  41  0.638960     -0.447914      -1.35596       1.35596       157.688       159.044    
  42  0.156696      -1.85345      -5.61090       5.61090       156.660       162.271    
  43  0.956507     -0.444668E-01 -0.134613      0.134613       158.148       158.283    
  44  0.313979      -1.15843      -3.50689       3.50689       156.387       159.894    
  45  0.185265      -1.68597      -5.10388       5.10388       157.855       162.958    
  46  0.952300     -0.488757E-01 -0.147960      0.147960       155.776       155.924    
  47  0.181060      -1.70892      -5.17338       5.17338       157.065       162.238    
  48  0.969330     -0.311499E-01 -0.942991E-01  0.942991E-01   155.803       155.898    
  49  0.832772     -0.182996     -0.553978      0.553978       154.494       155.048    
  50  0.733500     -0.309927     -0.938235      0.938235       154.189       155.128    
  51  0.901211     -0.104016     -0.314884      0.314884       157.599       157.914    
  52  0.598700     -0.512995      -1.55298       1.55298       153.409       154.962    
  53  0.982368     -0.177897E-01 -0.538544E-01  0.538544E-01   158.490       158.544    
  54  0.244719      -1.40764      -4.26132       4.26132       158.361       162.622    
  55  0.824383     -0.193120     -0.584626      0.584626       156.234       156.819    
  56  0.755417     -0.280485     -0.849104      0.849104       158.663       159.512    
  57  0.548139     -0.601226      -1.82007       1.82007       155.551       157.371    
  58  0.886061     -0.120970     -0.366209      0.366209       160.107       160.474    
  59  0.678820     -0.387400      -1.17277       1.17277       158.046       159.219    
  60  0.435343     -0.831622      -2.51755       2.51755       153.696       156.213    
  61  0.917598     -0.859955E-01 -0.260332      0.260332       158.180       158.440    
  62  0.356725      -1.03079      -3.12049       3.12049       158.526       161.646    
  63  0.731877     -0.312142     -0.944940      0.944940       155.176       156.121    
  64  0.509090     -0.675130      -2.04380       2.04380       156.420       158.463    
  65  0.576928     -0.550038      -1.66511       1.66511       156.578       158.243    
  66  0.854239     -0.157545     -0.476931      0.476931       158.974       159.451    
  67  0.572427E-01  -2.86046      -8.65938       8.65938       157.088       165.747    
  68  0.975343     -0.249660E-01 -0.755789E-01  0.755789E-01   160.975       161.050    
  69  0.671870E-01  -2.70028      -8.17447       8.17447       149.129       157.304    
  70  0.154919      -1.86485      -5.64542       5.64542       155.132       160.777    
  71  0.805966     -0.215714     -0.653024      0.653024       160.242       160.895    
  72  0.906586     -0.980697E-01 -0.296884      0.296884       158.917       159.214    
  73  0.497247E-01  -3.00125      -9.08562       9.08562       160.049       169.135    
  74  0.366111      -1.00482      -3.04186       3.04186       160.478       163.520    
  75  0.456114     -0.785012      -2.37644       2.37644       150.154       152.530    
loop,thermsimp(1:2)        9   4.97883      0.589895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    418        151.56          0.87          1.15         25.24          0.13          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    419        153.74          0.86          1.15         25.19          0.21          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:        9
neval is:      418
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       10
neval is:      418


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      418     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -2.00227       2.00227       150.072       152.074    
   2  0.677402     -0.389491      -1.17909       1.17909       150.797       151.976    
   3  0.899541     -0.105871     -0.320500      0.320500       150.503       150.823    
   4  0.235706      -1.44517      -4.37492       4.37492       151.692       156.067    
   5  0.194769      -1.63594      -4.95245       4.95245       149.281       154.233    
   6  0.814930     -0.204653     -0.619541      0.619541       150.890       151.509    
   7  0.727423E-01  -2.62083      -7.93398       7.93398       150.154       158.088    
   8  0.126759      -2.06547      -6.25274       6.25274       152.603       158.856    
   9  0.592876     -0.522770      -1.58257       1.58257       152.254       153.837    
  10  0.131380      -2.02966      -6.14435       6.14435       152.198       158.342    
  11  0.394760E-01  -3.23206      -9.78433       9.78433       152.717       162.502    
  12  0.539964     -0.616252      -1.86556       1.86556       150.536       152.402    
  13  0.127256      -2.06155      -6.24089       6.24089       151.784       158.025    
  14  0.245583      -1.40412      -4.25065       4.25065       153.572       157.823    
  15  0.236145E-01  -3.74590      -11.3398       11.3398       153.419       164.759    
  16  0.791943     -0.233266     -0.706159      0.706159       152.866       153.572    
  17  0.223014      -1.50052      -4.54249       4.54249       152.374       156.916    
  18  0.943370     -0.582970E-01 -0.176481      0.176481       152.119       152.296    
  19  0.844237     -0.169322     -0.512584      0.512584       149.772       150.285    
  20  0.600301     -0.510323      -1.54489       1.54489       153.409       154.954    
  21  0.742625E-01  -2.60015      -7.87136       7.87136       151.679       159.550    
  22  0.288925E-01  -3.54417      -10.7292       10.7292       154.494       165.224    
  23  0.325834      -1.12137      -3.39469       3.39469       154.189       157.584    
  24  0.317147      -1.14839      -3.47649       3.47649       151.846       155.322    
  25  0.655873     -0.421788      -1.27687       1.27687       149.818       151.095    
  26  0.259034      -1.35080      -4.08923       4.08923       155.803       159.893    
  27  0.639742E-01  -2.74927      -8.32281       8.32281       155.776       164.099    
  28  0.110416E-01  -4.50609      -13.6412       13.6412       155.446       169.087    
  29  0.768965E-01  -2.56529      -7.76585       7.76585       155.176       162.941    
  30  0.757182     -0.278151     -0.842040      0.842040       153.051       153.893    
  31  0.788615     -0.237477     -0.718907      0.718907       153.696       154.415    
  32  0.724297     -0.322554     -0.976458      0.976458       154.726       155.703    
  33  0.807261     -0.214109     -0.648166      0.648166       156.234       156.882    
  34  0.356497      -1.03143      -3.12242       3.12242       152.325       155.448    
  35  0.685602     -0.377458      -1.14267       1.14267       155.109       156.251    
  36  0.681617     -0.383288      -1.16032       1.16032       151.313       152.473    
  37  0.323748      -1.12779      -3.41413       3.41413       149.129       152.544    
  38  0.622817     -0.473503      -1.43342       1.43342       155.551       156.984    
  39  0.534584     -0.626266      -1.89588       1.89588       154.957       156.852    
  40  0.130255E-02  -6.64343      -20.1115       20.1115       155.177       175.289    
  41  0.357398      -1.02891      -3.11478       3.11478       153.750       156.865    
  42  0.290986      -1.23448      -3.73711       3.73711       157.599       161.336    
  43  0.182566      -1.70064      -5.14832       5.14832       156.578       161.726    
  44  0.695597     -0.362984      -1.09885       1.09885       158.148       159.247    
  45  0.612287     -0.490555      -1.48504       1.48504       158.180       159.665    
  46  0.845780     -0.167496     -0.507056      0.507056       156.420       156.927    
  47  0.628042     -0.465149      -1.40813       1.40813       158.490       159.898    
  48  0.830233     -0.186049     -0.563222      0.563222       157.688       158.252    
  49  0.373260     -0.985481      -2.98332       2.98332       158.917       161.900    
  50  0.711640     -0.340183      -1.02983       1.02983       158.046       159.076    
  51  0.449400     -0.799842      -2.42134       2.42134       153.535       155.956    
  52  0.253029      -1.37425      -4.16023       4.16023       158.974       163.134    
  53  0.956034     -0.449619E-01 -0.136112      0.136112       158.663       158.799    
  54  0.544467     -0.607949      -1.84043       1.84043       153.757       155.598    
  55  0.419963     -0.867588      -2.62643       2.62643       155.270       157.896    
  56  0.372696E-02  -5.59216      -16.9290       16.9290       153.690       170.619    
  57  0.519921     -0.654079      -1.98007       1.98007       156.387       158.367    
  58  0.563761     -0.573124      -1.73500       1.73500       154.646       156.381    
  59  0.231567      -1.46289      -4.42856       4.42856       160.107       164.536    
  60  0.736257     -0.306176     -0.926878      0.926878       153.309       154.236    
  61  0.408436E-01  -3.19801      -9.68124       9.68124       155.207       164.889    
  62  0.111120      -2.19714      -6.65134       6.65134       155.132       161.783    
  63  0.988251     -0.118183E-01 -0.357773E-01  0.357773E-01   160.242       160.278    
  64  0.107317E-01  -4.53455      -13.7273       13.7273       152.040       165.767    
  65  0.896884E-01  -2.41141      -7.30001       7.30001       160.975       168.275    
  66  0.190396      -1.65865      -5.02119       5.02119       154.062       159.083    
  67  0.978391     -0.218460E-01 -0.661337E-01  0.661337E-01   158.526       158.592    
  68  0.471431     -0.751983      -2.27646       2.27646       157.065       159.341    
  69  0.642804     -0.441915      -1.33780       1.33780       156.660       157.998    
  70  0.227213      -1.48187      -4.48601       4.48601       158.361       162.847    
  71  0.348332      -1.05460      -3.19256       3.19256       157.855       161.047    
  72  0.793152E-01  -2.53433      -7.67209       7.67209       160.478       168.150    
  73  0.602438E-01  -2.80936      -8.50469       8.50469       157.088       165.592    
  74  0.865494E-01  -2.44704      -7.40786       7.40786       155.841       163.249    
  75  0.165128      -1.80103      -5.45222       5.45222       151.560       157.012    
loop,thermsimp(1:2)       10   2.00227       1.17909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    420        155.23          0.86          1.15         25.17          0.21          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    155.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       10
neval is:      419
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       11
neval is:      419


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      419     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811     -0.922746      0.922746       149.772       150.695    
   2  0.372515     -0.987477      -2.98936       2.98936       150.503       153.492    
   3  0.197611E-01  -3.92404      -11.8791       11.8791       149.818       161.698    
   4  0.939239     -0.626858E-01 -0.189767      0.189767       150.890       151.080    
   5  0.212506      -1.54879      -4.68860       4.68860       150.797       155.486    
   6  0.141762      -1.95360      -5.91409       5.91409       150.072       155.986    
   7  0.183632      -1.69482      -5.13070       5.13070       152.119       157.250    
   8  0.479067     -0.735915      -2.22781       2.22781       150.536       152.764    
   9  0.113189      -2.17870      -6.59551       6.59551       151.313       157.908    
  10  0.314091      -1.15807      -3.50580       3.50580       149.129       152.635    
  11  0.457761     -0.781409      -2.36554       2.36554       152.866       155.231    
  12  0.923744     -0.793200E-01 -0.240123      0.240123       152.254       152.495    
  13  0.805387     -0.216433     -0.655201      0.655201       153.051       153.706    
  14  0.979257     -0.209609E-01 -0.634543E-01  0.634543E-01   149.281       149.344    
  15  0.634716E-01  -2.75716      -8.34668       8.34668       153.309       161.656    
  16  0.502866     -0.687432      -2.08104       2.08104       153.696       155.777    
  17  0.844986     -0.168435     -0.509899      0.509899       153.409       153.919    
  18  0.548347     -0.600848      -1.81893       1.81893       151.846       153.665    
  19  0.825472     -0.191800     -0.580631      0.580631       152.325       152.906    
  20  0.806424     -0.215145     -0.651303      0.651303       153.757       154.409    
  21  0.497450E-01  -3.00085      -9.08438       9.08438       154.726       163.811    
  22  0.407289     -0.898233      -2.71920       2.71920       153.535       156.254    
  23  0.522833     -0.648493      -1.96316       1.96316       151.692       153.655    
  24  0.763038     -0.270448     -0.818720      0.818720       155.109       155.927    
  25  0.706120     -0.347970      -1.05340       1.05340       154.646       155.699    
  26  0.540862     -0.614591      -1.86054       1.86054       154.957       156.817    
  27  0.807340E-01  -2.51660      -7.61842       7.61842       153.750       161.369    
  28  0.310756      -1.16875      -3.53812       3.53812       156.234       159.772    
  29  0.689192     -0.372235      -1.12686       1.12686       152.374       153.501    
  30  0.634973     -0.454174      -1.37491       1.37491       156.420       157.794    
  31  0.598432     -0.513442      -1.55433       1.55433       155.551       157.105    
  32  0.393639     -0.932321      -2.82239       2.82239       151.560       154.382    
  33  0.369460     -0.995714      -3.01430       3.01430       154.189       157.204    
  34  0.129274      -2.04582      -6.19325       6.19325       153.572       159.766    
  35  0.250376      -1.38479      -4.19215       4.19215       155.270       159.462    
  36  0.536641     -0.622425      -1.88425       1.88425       156.660       158.544    
  37  0.495942     -0.701296      -2.12301       2.12301       151.784       153.907    
  38  0.650684     -0.429731      -1.30091       1.30091       150.154       151.455    
  39  0.889212     -0.117420     -0.355462      0.355462       157.688       158.044    
  40  0.314936      -1.15539      -3.49767       3.49767       152.198       155.696    
  41  0.943567     -0.580875E-01 -0.175847      0.175847       156.387       156.563    
  42  0.672016     -0.397473      -1.20326       1.20326       158.526       159.729    
  43  0.133907      -2.01061      -6.08667       6.08667       158.663       164.749    
  44  0.259017      -1.35086      -4.08942       4.08942       152.603       156.693    
  45  0.112444      -2.18530      -6.61549       6.61549       158.046       164.662    
  46  0.235994      -1.44395      -4.37122       4.37122       154.062       158.433    
  47  0.879651     -0.128231     -0.388189      0.388189       158.148       158.536    
  48  0.750555     -0.286942     -0.868651      0.868651       157.065       157.934    
  49  0.996491E-01  -2.30610      -6.98120       6.98120       151.679       158.660    
  50  0.100853      -2.29409      -6.94485       6.94485       158.180       165.125    
  51  0.520543     -0.652882      -1.97645       1.97645       155.803       157.780    
  52  0.886361E-01  -2.42322      -7.33574       7.33574       158.490       165.826    
  53  0.152463      -1.88083      -5.69379       5.69379       160.242       165.936    
  54  0.286446E-03  -8.15796      -24.6964       24.6964       157.855       182.551    
  55  0.472863     -0.748950      -2.26728       2.26728       157.599       159.866    
  56  0.907202     -0.973898E-01 -0.294826      0.294826       156.578       156.873    
  57  0.194253      -1.63859      -4.96047       4.96047       155.132       160.092    
  58  0.560994     -0.578045      -1.74990       1.74990       158.917       160.667    
  59  0.316514      -1.15039      -3.48254       3.48254       152.717       156.200    
  60  0.538541E-02  -5.22406      -15.8147       15.8147       158.361       174.176    
  61  0.414112     -0.881619      -2.66890       2.66890       155.176       157.845    
  62  0.281101      -1.26904      -3.84173       3.84173       158.974       162.815    
  63  0.550613     -0.596724      -1.80645       1.80645       155.841       157.648    
  64  0.236016      -1.44386      -4.37095       4.37095       155.776       160.147    
  65  0.330497E-01  -3.40974      -10.3222       10.3222       160.107       170.430    
  66  0.353510      -1.03984      -3.14789       3.14789       153.419       156.567    
  67  0.379763E-01  -3.27079      -9.90159       9.90159       155.207       165.109    
  68  0.431178     -0.841233      -2.54664       2.54664       154.494       157.041    
  69  0.345799      -1.06190      -3.21466       3.21466       157.088       160.302    
  70  0.244727      -1.40761      -4.26123       4.26123       152.040       156.301    
  71  0.755301     -0.280639     -0.849570      0.849570       160.478       161.328    
  72  0.229081      -1.47368      -4.46124       4.46124       160.975       165.436    
  73  0.697452     -0.360322      -1.09079       1.09079       155.446       156.537    
  74  0.948225     -0.531635E-01 -0.160940      0.160940       153.690       153.851    
  75  0.830801     -0.185365     -0.561149      0.561149       155.228       155.789    
loop,thermsimp(1:2)       11  0.922746       2.98936    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    421        151.18          0.87          1.15         25.28          0.23          0.06         27.59
Just calling func    0   0         27.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  420    151.18       0.8544     -1.898      2.729     -102.6      1.030    
                      0.2507      1.415     -99.70      3.513     0.3091    
                       2.075     -1.360      1.530      5623.      4377.    
                     -0.4838      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5396.      405.2    
                     -0.5672     -6.462     -4.794     -8.469      6.069    
                      -15.24     -3.276      4564.      0.000      6162.    

                       1576.      6113.      522.1      6162.      3761.    
                       3597.    -0.1379E-01 0.8695E-01  0.000     0.8669E-01
                     -0.1890    -0.9013E-01 0.9667E-01 0.2353E-01-0.2583E-01

                     -0.3520    -0.9201      0.000    -0.2142E-01-0.4795E-01
                       0.000     0.1740E-01 0.3078E-01-0.1279    -0.2154E-01
                     -0.4525E-01-0.1320E-01-0.5384     -1.133      5261.    

                     -0.8250    -0.8972     -1.922     -2.440    -0.2146E-01
                     -0.2763      9.132      8.765    -0.1829E+05 -4.000    
                     -0.6447    -0.9385      9.277      8.799    -0.1727E+05

                      -4.000     0.2188    -0.9511      8.919      8.991    
                     -0.1929E+05 -7.000    -0.5037    -0.9386      9.107    
                       8.770    -0.2010E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       11
neval is:      420
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       12
neval is:      420


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      420     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995     -0.738640      0.738640       149.281       150.019    
   2  0.973841     -0.265069E-01 -0.802436E-01  0.802436E-01   149.772       149.853    
   3  0.294662      -1.22193      -3.69910       3.69910       150.890       154.589    
   4  0.702628     -0.352928      -1.06841       1.06841       150.154       151.222    
   5  0.763280     -0.270131     -0.817759      0.817759       152.254       153.072    
   6  0.578080E-01  -2.85063      -8.62963       8.62963       149.129       157.759    
   7  0.834037     -0.181478     -0.549384      0.549384       150.536       151.085    
   8  0.976312     -0.239730E-01 -0.725729E-01  0.725729E-01   152.325       152.398    
   9  0.603670     -0.504728      -1.52795       1.52795       150.503       152.030    
  10  0.458546     -0.779695      -2.36035       2.36035       152.374       154.734    
  11  0.201917      -1.59990      -4.84333       4.84333       151.692       156.535    
  12  0.362727      -1.01411      -3.06997       3.06997       151.846       154.916    
  13  0.466909E-01  -3.06421      -9.27619       9.27619       153.051       162.327    
  14  0.602192     -0.507180      -1.53537       1.53537       153.690       155.226    
  15  0.332545      -1.10098      -3.33297       3.33297       151.784       155.117    
  16  0.758378     -0.276574     -0.837264      0.837264       153.409       154.247    
  17  0.834950     -0.180384     -0.546071      0.546071       151.560       152.106    
  18  0.910410     -0.938599E-01 -0.284140      0.284140       153.757       154.042    
  19  0.825418E-01  -2.49445      -7.55139       7.55139       152.866       160.417    
  20  0.639611     -0.446894      -1.35287       1.35287       150.797       152.150    
  21  0.345418      -1.06300      -3.21799       3.21799       152.198       155.416    
  22  0.961674     -0.390802E-01 -0.118306      0.118306       154.646       154.764    
  23  0.274135      -1.29413      -3.91770       3.91770       153.696       157.614    
  24  0.275236      -1.29013      -3.90556       3.90556       155.228       159.134    
  25  0.373550     -0.984704      -2.98097       2.98097       155.109       158.090    
  26  0.407178     -0.898505      -2.72002       2.72002       150.072       152.792    
  27  0.908773     -0.956602E-01 -0.289590      0.289590       152.717       153.007    
  28  0.578518     -0.547286      -1.65678       1.65678       153.535       155.191    
  29  0.674288     -0.394098      -1.19304       1.19304       152.040       153.233    
  30  0.758166     -0.276853     -0.838110      0.838110       155.446       156.284    
  31  0.764349E-01  -2.57132      -7.78408       7.78408       156.387       164.171    
  32  0.962342     -0.383853E-01 -0.116203      0.116203       153.419       153.535    
  33  0.918960     -0.845125E-01 -0.255842      0.255842       152.603       152.859    
  34  0.617888     -0.481448      -1.45747       1.45747       154.957       156.414    
  35  0.227646      -1.47996      -4.48025       4.48025       156.578       161.058    
  36  0.262001      -1.33941      -4.05475       4.05475       154.494       158.549    
  37  0.589438     -0.528586      -1.60018       1.60018       155.551       157.151    
  38  0.201352      -1.60270      -4.85181       4.85181       154.189       159.041    
  39  0.350279      -1.04903      -3.17569       3.17569       152.119       155.295    
  40  0.647374     -0.434831      -1.31635       1.31635       155.841       157.158    
  41  0.604508     -0.503341      -1.52375       1.52375       155.803       157.327    
  42  0.700946     -0.355325      -1.07567       1.07567       156.420       157.495    
  43  0.575270     -0.552915      -1.67383       1.67383       155.176       156.849    
  44  0.554419     -0.589835      -1.78559       1.78559       151.313       153.098    
  45  0.375300     -0.980029      -2.96682       2.96682       157.065       160.032    
  46  0.605541     -0.501632      -1.51858       1.51858       157.688       159.207    
  47  0.109847      -2.20867      -6.68623       6.68623       154.062       160.748    
  48  0.553505     -0.591485      -1.79059       1.79059       158.148       159.939    
  49  0.412268     -0.886082      -2.68241       2.68241       156.660       159.342    
  50  0.664246     -0.409102      -1.23846       1.23846       151.679       152.917    
  51  0.707719     -0.345708      -1.04655       1.04655       155.270       156.316    
  52  0.750886     -0.286501     -0.867318      0.867318       158.526       159.393    
  53  0.339698      -1.07970      -3.26854       3.26854       153.572       156.841    
  54  0.849457     -0.163157     -0.493922      0.493922       156.234       156.728    
  55  0.206681E-02  -6.18175      -18.7138       18.7138       157.599       176.313    
  56  0.251051      -1.38210      -4.18399       4.18399       155.132       159.316    
  57  0.224827      -1.49242      -4.51798       4.51798       155.776       160.294    
  58  0.335724      -1.09147      -3.30417       3.30417       157.088       160.392    
  59  0.157522      -1.84819      -5.59497       5.59497       158.917       164.512    
  60  0.630796E-01  -2.76336      -8.36544       8.36544       160.478       168.843    
  61  0.383657     -0.958005      -2.90014       2.90014       153.750       156.650    
  62  0.777557     -0.251598     -0.761657      0.761657       153.309       154.071    
  63  0.370382     -0.993221      -3.00675       3.00675       149.818       152.825    
  64  0.459130     -0.778421      -2.35649       2.35649       158.974       161.330    
  65  0.763871     -0.269356     -0.815415      0.815415       154.726       155.542    
  66  0.649642     -0.431333      -1.30576       1.30576       158.046       159.352    
  67  0.834635     -0.180761     -0.547212      0.547212       158.663       159.210    
  68  0.119884      -2.12123      -6.42155       6.42155       155.207       161.629    
  69  0.434414     -0.833757      -2.52401       2.52401       158.180       160.704    
  70  0.237182      -1.43893      -4.35603       4.35603       160.975       165.331    
  71  0.926856     -0.759573E-01 -0.229944      0.229944       158.490       158.720    
  72  0.857919     -0.153246     -0.463918      0.463918       160.242       160.706    
  73  0.274941      -1.29120      -3.90881       3.90881       160.107       164.016    
  74  0.858875     -0.152131     -0.460543      0.460543       158.361       158.822    
  75  0.590669     -0.526499      -1.59386       1.59386       151.177       152.771    
loop,thermsimp(1:2)       12  0.738640      0.802436E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    422        152.72          0.87          1.15         25.24          0.50          0.06         27.82
Just calling func    0   0         27.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    152.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       12
neval is:      421
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       13
neval is:      421


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      421     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01 -0.110055      0.110055       149.772       149.882    
   2  0.963371     -0.373169E-01 -0.112968      0.112968       149.281       149.394    
   3  0.851172E-02  -4.76631      -14.4289       14.4289       150.536       164.965    
   4  0.731929E-01  -2.61466      -7.91528       7.91528       150.154       158.069    
   5  0.491869     -0.709543      -2.14798       2.14798       150.503       152.650    
   6  0.625436     -0.469306      -1.42072       1.42072       151.560       152.981    
   7  0.139469      -1.96991      -5.96347       5.96347       150.797       156.760    
   8  0.464987     -0.765746      -2.31812       2.31812       152.325       154.643    
   9  0.192956      -1.64529      -4.98075       4.98075       151.177       156.158    
  10  0.184589E-01  -3.99221      -12.0855       12.0855       150.072       162.157    
  11  0.327387      -1.11661      -3.38029       3.38029       149.818       153.199    
  12  0.447570     -0.803921      -2.43369       2.43369       152.603       155.037    
  13  0.282132      -1.26538      -3.83065       3.83065       151.679       155.509    
  14  0.991234     -0.880510E-02 -0.266555E-01  0.266555E-01   152.717       152.744    
  15  0.574009     -0.555110      -1.68047       1.68047       152.254       153.935    
  16  0.884017     -0.123279     -0.373198      0.373198       151.313       151.686    
  17  0.332578      -1.10088      -3.33267       3.33267       152.040       155.373    
  18  0.294524      -1.22240      -3.70053       3.70053       153.419       157.120    
  19  0.865605     -0.144326     -0.436915      0.436915       153.757       154.194    
  20  0.441883E-01  -3.11930      -9.44296       9.44296       153.309       162.752    
  21  0.652915     -0.426309      -1.29055       1.29055       153.409       154.700    
  22  0.712636E-01  -2.64137      -7.99615       7.99615       150.890       158.886    
  23  0.211397      -1.55402      -4.70443       4.70443       152.374       157.078    
  24  0.836672E-01  -2.48091      -7.51039       7.51039       154.646       162.156    
  25  0.397953     -0.921422      -2.78939       2.78939       151.846       154.635    
  26  0.545442     -0.606159      -1.83501       1.83501       151.784       153.619    
  27  0.628874     -0.463825      -1.40413       1.40413       153.535       154.939    
  28  0.243035      -1.41455      -4.28223       4.28223       153.690       157.973    
  29  0.700237     -0.356336      -1.07873       1.07873       152.119       153.198    
  30  0.887974     -0.118813     -0.359680      0.359680       152.198       152.558    
  31  0.354481      -1.03710      -3.13959       3.13959       154.726       157.866    
  32  0.579479     -0.545626      -1.65176       1.65176       155.446       157.098    
  33  0.873601E-01  -2.43772      -7.37963       7.37963       155.270       162.649    
  34  0.414510     -0.880658      -2.66599       2.66599       154.957       157.623    
  35  0.263485      -1.33376      -4.03765       4.03765       151.692       155.730    
  36  0.174560E-01  -4.04807      -12.2546       12.2546       153.750       166.005    
  37  0.461287     -0.773735      -2.34231       2.34231       156.234       158.576    
  38  0.914554     -0.893185E-01 -0.270391      0.270391       153.572       153.843    
  39  0.551497     -0.595119      -1.80159       1.80159       155.176       156.977    
  40  0.751145     -0.286157     -0.866275      0.866275       155.551       156.417    
  41  0.838814     -0.175766     -0.532091      0.532091       155.841       156.373    
  42  0.494321     -0.704571      -2.13293       2.13293       155.803       157.936    
  43  0.878137     -0.129953     -0.393402      0.393402       156.420       156.813    
  44  0.249667      -1.38763      -4.20073       4.20073       153.696       157.897    
  45  0.569995     -0.562128      -1.70172       1.70172       149.129       150.831    
  46  0.338221      -1.08406      -3.28174       3.28174       155.109       158.390    
  47  0.536421     -0.622836      -1.88549       1.88549       154.494       156.380    
  48  0.482027     -0.729755      -2.20917       2.20917       158.490       160.699    
  49  0.436505     -0.828955      -2.50947       2.50947       158.361       160.871    
  50  0.225116      -1.49114      -4.51409       4.51409       154.189       158.703    
  51  0.126546      -2.06715      -6.25784       6.25784       155.228       161.486    
  52  0.182898      -1.69882      -5.14281       5.14281       157.688       162.831    
  53  0.114159      -2.17017      -6.56969       6.56969       158.663       165.232    
  54  0.582926     -0.539695      -1.63380       1.63380       155.132       156.765    
  55  0.583079     -0.539432      -1.63301       1.63301       156.660       158.293    
  56  0.430119     -0.843693      -2.55409       2.55409       158.046       160.600    
  57  0.468275     -0.758699      -2.29679       2.29679       158.526       160.822    
  58  0.323186      -1.12953      -3.41938       3.41938       158.148       161.567    
  59  0.999190E-01  -2.30340      -6.97301       6.97301       157.065       164.038    
  60  0.710279     -0.342098      -1.03562       1.03562       155.776       156.811    
  61  0.316311      -1.15103      -3.48448       3.48448       157.088       160.572    
  62  0.972639     -0.277425E-01 -0.839842E-01  0.839842E-01   152.866       152.950    
  63  0.547984E-01  -2.90409      -8.79149       8.79149       158.180       166.971    
  64  0.658251     -0.418168      -1.26591       1.26591       160.242       161.508    
  65  0.364963      -1.00796      -3.05137       3.05137       154.062       157.113    
  66  0.517613     -0.658528      -1.99355       1.99355       156.578       158.571    
  67  0.888720     -0.117973     -0.357138      0.357138       158.974       159.331    
  68  0.957228     -0.437139E-01 -0.132334      0.132334       155.207       155.340    
  69  0.307204E-01  -3.48283      -10.5435       10.5435       153.051       163.594    
  70  0.800807     -0.222136     -0.672466      0.672466       160.107       160.780    
  71  0.167412      -1.78730      -5.41065       5.41065       156.387       161.798    
  72  0.128048      -2.05535      -6.22212       6.22212       158.917       165.139    
  73  0.122242      -2.10175      -6.36258       6.36258       160.975       167.337    
  74  0.701370     -0.354720      -1.07384       1.07384       160.478       161.552    
  75  0.606351     -0.500297      -1.51454       1.51454       152.720       154.235    
loop,thermsimp(1:2)       13  0.110055      0.112968    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    423        149.13          0.87          1.15         25.20          0.18          0.07         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    424        151.64          0.84          1.15         25.26          0.38          0.05         27.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       13
neval is:      423
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       14
neval is:      423


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      423     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -1.88718       1.88718       149.281       151.168    
   2  0.902010     -0.103129     -0.312201      0.312201       149.772       150.084    
   3  0.918906     -0.845717E-01 -0.256022      0.256022       149.129       149.385    
   4  0.300977E-01  -3.50330      -10.6055       10.6055       151.313       161.918    
   5  0.180939      -1.70960      -5.17542       5.17542       152.198       157.374    
   6  0.996736     -0.326981E-02 -0.989860E-02  0.989860E-02   150.503       150.512    
   7  0.974749     -0.255749E-01 -0.774221E-01  0.774221E-01   152.717       152.795    
   8  0.259085      -1.35060      -4.08863       4.08863       152.866       156.955    
   9  0.237439      -1.43784      -4.35275       4.35275       151.560       155.913    
  10  0.733816     -0.309497     -0.936932      0.936932       152.119       153.056    
  11  0.458028     -0.780824      -2.36377       2.36377       149.818       152.182    
  12  0.623300     -0.472727      -1.43107       1.43107       151.784       153.215    
  13  0.789074     -0.236895     -0.717147      0.717147       153.572       154.289    
  14  0.718847     -0.330107     -0.999323      0.999323       152.254       153.254    
  15  0.414258     -0.881266      -2.66783       2.66783       153.757       156.425    
  16  0.121880E-01  -4.40730      -13.3421       13.3421       152.720       166.062    
  17  0.976927     -0.233433E-01 -0.706664E-01  0.706664E-01   151.846       151.917    
  18  0.998133     -0.186873E-02 -0.565716E-02  0.565716E-02   152.325       152.331    
  19  0.582806     -0.539901      -1.63443       1.63443       153.409       155.044    
  20  0.461010     -0.774335      -2.34413       2.34413       153.535       155.879    
  21  0.748404     -0.289812     -0.877339      0.877339       152.603       153.481    
  22  0.627394     -0.466180      -1.41125       1.41125       155.207       156.619    
  23  0.823247     -0.194499     -0.588803      0.588803       152.040       152.629    
  24  0.696302     -0.361971      -1.09579       1.09579       151.679       152.774    
  25  0.571207     -0.560004      -1.69529       1.69529       151.692       153.387    
  26  0.189272      -1.66457      -5.03911       5.03911       151.177       156.216    
  27  0.534816     -0.625833      -1.89457       1.89457       155.841       157.736    
  28  0.846241     -0.166951     -0.505407      0.505407       154.494       155.000    
  29  0.157466      -1.84855      -5.59605       5.59605       155.551       161.147    
  30  0.123756      -2.08945      -6.32532       6.32532       150.797       157.122    
  31  0.458067     -0.780739      -2.36351       2.36351       155.132       157.495    
  32  0.989772     -0.102804E-01 -0.311215E-01  0.311215E-01   155.776       155.807    
  33  0.292614      -1.22890      -3.72022       3.72022       156.420       160.140    
  34  0.707885     -0.345474      -1.04584       1.04584       155.176       156.221    
  35  0.686290     -0.376455      -1.13963       1.13963       152.374       153.514    
  36  0.752747     -0.284026     -0.859825      0.859825       155.446       156.306    
  37  0.577950E-01  -2.85085      -8.63031       8.63031       154.062       162.692    
  38  0.496568E-02  -5.30521      -16.0603       16.0603       153.419       169.480    
  39  0.632817     -0.457575      -1.38520       1.38520       154.957       156.342    
  40  0.306568      -1.18232      -3.57919       3.57919       154.726       158.306    
  41  0.800757     -0.222198     -0.672653      0.672653       153.696       154.368    
  42  0.754206     -0.282090     -0.853963      0.853963       155.803       156.657    
  43  0.875958     -0.132437     -0.400924      0.400924       153.690       154.091    
  44  0.411581     -0.887750      -2.68746       2.68746       150.154       152.841    
  45  0.784837     -0.242279     -0.733446      0.733446       156.660       157.393    
  46  0.615964     -0.484567      -1.46692       1.46692       155.109       156.576    
  47  0.427318     -0.850227      -2.57387       2.57387       156.578       159.152    
  48  0.373288     -0.985405      -2.98309       2.98309       156.234       159.217    
  49  0.118712      -2.13106      -6.45129       6.45129       154.189       160.641    
  50  0.465204     -0.765279      -2.31671       2.31671       150.890       153.207    
  51  0.361628      -1.01714      -3.07916       3.07916       158.974       162.053    
  52  0.625886     -0.468587      -1.41854       1.41854       157.088       158.506    
  53  0.164441      -1.80521      -5.46485       5.46485       158.046       163.511    
  54  0.311940      -1.16494      -3.52660       3.52660       158.490       162.017    
  55  0.269725E-01  -3.61294      -10.9374       10.9374       160.107       171.045    
  56  0.242465      -1.41690      -4.28934       4.28934       158.526       162.815    
  57  0.263333      -1.33434      -4.03940       4.03940       158.361       162.401    
  58  0.214624E-02  -6.14404      -18.5997       18.5997       155.228       173.828    
  59  0.932315     -0.700843E-01 -0.212164      0.212164       160.242       160.454    
  60  0.622961     -0.473272      -1.43272       1.43272       160.478       161.911    
  61  0.269930      -1.30959      -3.96450       3.96450       158.148       162.113    
  62  0.298039      -1.21053      -3.66461       3.66461       156.387       160.052    
  63  0.327337      -1.11676      -3.38075       3.38075       154.646       158.026    
  64  0.789470     -0.236394     -0.715629      0.715629       150.072       150.787    
  65  0.239818      -1.42788      -4.32257       4.32257       155.270       159.592    
  66  0.753924     -0.282464     -0.855096      0.855096       153.309       154.165    
  67  0.407638     -0.897375      -2.71660       2.71660       157.688       160.405    
  68  0.465961     -0.763653      -2.31179       2.31179       153.051       155.362    
  69  0.191020      -1.65538      -5.01128       5.01128       157.065       162.076    
  70  0.586001     -0.534433      -1.61788       1.61788       150.536       152.154    
  71  0.255262      -1.36546      -4.13363       4.13363       158.917       163.051    
  72  0.944354     -0.572545E-01 -0.173325      0.173325       158.663       158.836    
  73  0.911456     -0.927122E-01 -0.280665      0.280665       153.750       154.031    
  74  0.579605     -0.545408      -1.65110       1.65110       158.180       159.831    
  75  0.719386     -0.329358     -0.997056      0.997056       149.126       150.123    
loop,thermsimp(1:2)       14   1.88718      0.312201    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    425        154.19          0.86          1.14         25.21          0.15          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    426        171.87          0.86          1.14         25.27          0.12          0.05         27.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    154.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       14
neval is:      425
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       15
neval is:      425


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      425     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -4.72327       4.72327       149.129       153.853    
   2  0.682169     -0.382478      -1.15786       1.15786       149.772       150.930    
   3  0.831163     -0.184930     -0.559833      0.559833       149.126       149.685    
   4  0.625179     -0.469718      -1.42196       1.42196       150.503       151.924    
   5  0.907522     -0.970376E-01 -0.293759      0.293759       150.072       150.365    
   6  0.406703     -0.899672      -2.72355       2.72355       149.281       152.004    
   7  0.463060     -0.769899      -2.33069       2.33069       151.846       154.177    
   8  0.206056      -1.57961      -4.78190       4.78190       150.536       155.318    
   9  0.303716      -1.19166      -3.60749       3.60749       149.818       153.426    
  10  0.843889     -0.169734     -0.513833      0.513833       152.325       152.839    
  11  0.273678      -1.29580      -3.92275       3.92275       152.040       155.963    
  12  0.571842     -0.558892      -1.69192       1.69192       151.679       153.371    
  13  0.803131     -0.219238     -0.663693      0.663693       152.717       153.381    
  14  0.330375      -1.10753      -3.35279       3.35279       150.154       153.506    
  15  0.155557      -1.86074      -5.63298       5.63298       152.119       157.752    
  16  0.878823     -0.129172     -0.391039      0.391039       150.890       151.281    
  17  0.781654     -0.246343     -0.745747      0.745747       151.784       152.530    
  18  0.782655     -0.245064     -0.741874      0.741874       152.254       152.996    
  19  0.682155     -0.382499      -1.15793       1.15793       151.692       152.850    
  20  0.899702     -0.105691     -0.319957      0.319957       152.603       152.923    
  21  0.444808     -0.810113      -2.45243       2.45243       152.374       154.826    
  22  0.495252     -0.702688      -2.12723       2.12723       153.750       155.878    
  23  0.640834     -0.444984      -1.34709       1.34709       153.690       155.037    
  24  0.314465      -1.15688      -3.50220       3.50220       153.309       156.812    
  25  0.368564     -0.998140      -3.02164       3.02164       153.572       156.594    
  26  0.572254E-02  -5.16334      -15.6309       15.6309       153.696       169.327    
  27  0.468080E-01  -3.06170      -9.26861       9.26861       154.494       163.763    
  28  0.598693E-01  -2.81559      -8.52357       8.52357       153.409       161.933    
  29  0.658687     -0.417508      -1.26391       1.26391       153.051       154.314    
  30  0.449565     -0.799475      -2.42023       2.42023       155.776       158.196    
  31  0.799405     -0.223887     -0.677767      0.677767       153.535       154.212    
  32  0.414416     -0.880885      -2.66668       2.66668       151.560       154.227    
  33  0.395703E-01  -3.22968      -9.77711       9.77711       151.177       160.954    
  34  0.704129E-01  -2.65338      -8.03250       8.03250       155.176       163.208    
  35  0.336217      -1.09000      -3.29973       3.29973       155.446       158.746    
  36  0.169926      -1.77239      -5.36551       5.36551       154.957       160.322    
  37  0.846601E-01  -2.46911      -7.47468       7.47468       153.757       161.232    
  38  0.798628     -0.224860     -0.680713      0.680713       155.109       155.789    
  39  0.377891     -0.973150      -2.94599       2.94599       155.207       158.153    
  40  0.183739      -1.69424      -5.12892       5.12892       155.803       160.932    
  41  0.930280     -0.722695E-01 -0.218780      0.218780       152.866       153.085    
  42  0.280682      -1.27053      -3.84625       3.84625       150.797       154.643    
  43  0.475397     -0.743606      -2.25110       2.25110       152.198       154.449    
  44  0.705714     -0.348545      -1.05514       1.05514       156.660       157.715    
  45  0.307479      -1.17935      -3.57021       3.57021       155.132       158.702    
  46  0.408291     -0.895776      -2.71176       2.71176       155.841       158.553    
  47  0.174897      -1.74356      -5.27823       5.27823       154.646       159.924    
  48  0.462267     -0.771612      -2.33588       2.33588       154.726       157.062    
  49  0.805682E-01  -2.51865      -7.62464       7.62464       157.088       164.712    
  50  0.276714      -1.28477      -3.88935       3.88935       158.663       162.552    
  51  0.914639     -0.892253E-01 -0.270109      0.270109       156.578       156.848    
  52  0.575354     -0.552769      -1.67338       1.67338       156.234       157.907    
  53  0.537577     -0.620684      -1.87898       1.87898       155.270       157.149    
  54  0.209256      -1.56420      -4.73526       4.73526       158.180       162.915    
  55  0.778351     -0.250578     -0.758567      0.758567       156.387       157.146    
  56  0.903762E-01  -2.40377      -7.27688       7.27688       156.420       163.696    
  57  0.758334E-01  -2.57922      -7.80799       7.80799       157.688       165.496    
  58  0.588112     -0.530837      -1.60699       1.60699       160.242       161.849    
  59  0.846166     -0.167040     -0.505676      0.505676       154.189       154.695    
  60  0.275383      -1.28959      -3.90395       3.90395       155.551       159.455    
  61  0.949019     -0.523265E-01 -0.158407      0.158407       160.478       160.636    
  62  0.207077      -1.57466      -4.76694       4.76694       151.313       156.080    
  63  0.623950     -0.471685      -1.42792       1.42792       158.490       159.918    
  64  0.681742E-01  -2.68569      -8.13031       8.13031       158.974       167.104    
  65  0.157941      -1.84553      -5.58694       5.58694       157.065       162.652    
  66  0.460122     -0.776264      -2.34996       2.34996       158.148       160.498    
  67  0.861850     -0.148675     -0.450079      0.450079       158.361       158.811    
  68  0.933782     -0.685126E-01 -0.207406      0.207406       154.062       154.269    
  69  0.238289      -1.43427      -4.34192       4.34192       158.526       162.868    
  70  0.206985      -1.57511      -4.76829       4.76829       158.917       163.685    
  71  0.921058E-01  -2.38482      -7.21950       7.21950       158.046       165.266    
  72  0.912587     -0.914718E-01 -0.276910      0.276910       152.720       152.997    
  73  0.763509     -0.269830     -0.816851      0.816851       153.419       154.236    
  74  0.167122      -1.78903      -5.41589       5.41589       160.107       165.523    
  75  0.382879     -0.960037      -2.90629       2.90629       154.187       157.093    
loop,thermsimp(1:2)       15   4.72327       1.15786    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    427        152.98          0.87          1.16         25.20          0.25          0.05         27.53
Just calling func    0   0         27.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    428        159.08          0.86          1.16         25.21          0.20          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       15
neval is:      427
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       16
neval is:      427


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      427     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -8.26149       8.26149       149.126       157.387    
   2  0.388935     -0.944342      -2.85878       2.85878       150.072       152.930    
   3  0.716732     -0.333053      -1.00824       1.00824       149.772       150.781    
   4  0.375936     -0.978336      -2.96169       2.96169       150.890       153.851    
   5  0.518505E-01  -2.95939      -8.95888       8.95888       150.503       159.461    
   6  0.892279     -0.113976     -0.345037      0.345037       149.281       149.626    
   7  0.145412      -1.92818      -5.83714       5.83714       151.784       157.621    
   8  0.759376E-01  -2.57784      -7.80384       7.80384       152.325       160.129    
   9  0.799111     -0.224255     -0.678881      0.678881       151.692       152.371    
  10  0.566636     -0.568038      -1.71961       1.71961       152.603       154.323    
  11  0.957834     -0.430803E-01 -0.130416      0.130416       152.254       152.385    
  12  0.421133     -0.864808      -2.61801       2.61801       152.720       155.338    
  13  0.965171     -0.354495E-01 -0.107315      0.107315       152.866       152.973    
  14  0.527073     -0.640416      -1.93871       1.93871       151.679       153.617    
  15  0.221584      -1.50695      -4.56196       4.56196       152.717       157.279    
  16  0.675180     -0.392776      -1.18904       1.18904       149.818       151.007    
  17  0.462159     -0.771846      -2.33659       2.33659       150.154       152.490    
  18  0.134826      -2.00377      -6.06595       6.06595       149.129       155.195    
  19  0.869165     -0.140222     -0.424490      0.424490       151.846       152.270    
  20  0.898965     -0.106511     -0.322437      0.322437       153.535       153.857    
  21  0.174160      -1.74778      -5.29101       5.29101       151.560       156.851    
  22  0.463810     -0.768281      -2.32580       2.32580       153.419       155.745    
  23  0.145870      -1.92504      -5.82762       5.82762       154.062       159.889    
  24  0.525172     -0.644029      -1.94965       1.94965       153.051       155.000    
  25  0.667609     -0.404052      -1.22318       1.22318       152.198       153.421    
  26  0.964408     -0.362405E-01 -0.109710      0.109710       150.797       150.907    
  27  0.981636     -0.185350E-01 -0.561104E-01  0.561104E-01   154.189       154.245    
  28  0.585742     -0.534875      -1.61921       1.61921       152.374       153.993    
  29  0.956106     -0.448864E-01 -0.135883      0.135883       153.690       153.826    
  30  0.153686      -1.87284      -5.66961       5.66961       150.536       156.206    
  31  0.937356     -0.646920E-01 -0.195840      0.195840       155.109       155.304    
  32  0.821414     -0.196728     -0.595550      0.595550       153.750       154.346    
  33  0.901583     -0.103603     -0.313635      0.313635       152.040       152.354    
  34  0.145469      -1.92779      -5.83595       5.83595       151.313       157.149    
  35  0.944310     -0.573011E-01 -0.173466      0.173466       153.572       153.746    
  36  0.639748     -0.446680      -1.35222       1.35222       153.309       154.662    
  37  0.533071     -0.629101      -1.90446       1.90446       156.578       158.482    
  38  0.708805     -0.344175      -1.04191       1.04191       154.726       155.768    
  39  0.953023     -0.481167E-01 -0.145662      0.145662       154.187       154.333    
  40  0.606832     -0.499502      -1.51213       1.51213       156.387       157.899    
  41  0.791257     -0.234132     -0.708782      0.708782       155.270       155.979    
  42  0.203064      -1.59423      -4.82618       4.82618       156.660       161.486    
  43  0.168642      -1.77998      -5.38848       5.38848       152.119       157.508    
  44  0.718173     -0.331045      -1.00216       1.00216       156.234       157.236    
  45  0.976939E-02  -4.62850      -14.0117       14.0117       155.207       169.219    
  46  0.211685      -1.55265      -4.70031       4.70031       155.776       160.476    
  47  0.624191     -0.471298      -1.42675       1.42675       155.841       157.268    
  48  0.749801     -0.287948     -0.871696      0.871696       155.132       156.003    
  49  0.710340     -0.342011      -1.03536       1.03536       155.446       156.481    
  50  0.447179     -0.804797      -2.43634       2.43634       158.361       160.797    
  51  0.567779     -0.566023      -1.71351       1.71351       155.551       157.264    
  52  0.262390      -1.33792      -4.05026       4.05026       158.490       162.540    
  53  0.907024     -0.975861E-01 -0.295420      0.295420       154.646       154.941    
  54  0.621682E-01  -2.77791      -8.40950       8.40950       154.957       163.366    
  55  0.667173     -0.404707      -1.22516       1.22516       158.148       159.373    
  56  0.429586     -0.844932      -2.55784       2.55784       160.478       163.036    
  57  0.758744     -0.276091     -0.835803      0.835803       155.803       156.639    
  58  0.890716     -0.115730     -0.350346      0.350346       151.177       151.527    
  59  0.101520E-01  -4.59008      -13.8954       13.8954       153.757       167.653    
  60  0.302396      -1.19602      -3.62067       3.62067       160.242       163.863    
  61  0.618723     -0.480097      -1.45338       1.45338       153.409       154.863    
  62  0.323728      -1.12785      -3.41432       3.41432       158.663       162.077    
  63  0.667954     -0.403536      -1.22161       1.22161       157.065       158.287    
  64  0.870722     -0.138433     -0.419074      0.419074       158.526       158.945    
  65  0.471572     -0.751683      -2.27555       2.27555       158.180       160.455    
  66  0.139523      -1.96953      -5.96229       5.96229       155.176       161.138    
  67  0.322617      -1.13129      -3.42472       3.42472       158.917       162.342    
  68  0.916959     -0.866922E-01 -0.262441      0.262441       156.420       156.682    
  69  0.598403E-02  -5.11866      -15.4956       15.4956       154.494       169.990    
  70  0.869598     -0.139724     -0.422983      0.422983       157.088       157.511    
  71  0.151888      -1.88461      -5.70524       5.70524       158.046       163.752    
  72  0.642634     -0.442179      -1.33860       1.33860       157.688       159.027    
  73  0.974865E-01  -2.32804      -7.04762       7.04762       160.107       167.155    
  74  0.194827      -1.63564      -4.95154       4.95154       158.974       163.925    
  75  0.930728     -0.717884E-01 -0.217323      0.217323       152.976       153.193    
loop,thermsimp(1:2)       16   8.26149       2.85878    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    429        152.39          0.87          1.16         25.14          0.21          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    430        153.47          0.86          1.16         25.07          0.28          0.05         27.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       16
neval is:      429
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       17
neval is:      429


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      429     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -2.16586       2.16586       149.281       151.447    
   2  0.243137      -1.41413      -4.28095       4.28095       149.772       154.053    
   3  0.530653     -0.633646      -1.91822       1.91822       150.797       152.715    
   4  0.926282     -0.765763E-01 -0.231817      0.231817       149.818       150.050    
   5  0.374288     -0.982729      -2.97499       2.97499       151.177       154.152    
   6  0.675293     -0.392608      -1.18853       1.18853       151.846       153.034    
   7  0.605942     -0.500970      -1.51657       1.51657       152.040       153.557    
   8  0.280229      -1.27215      -3.85114       3.85114       151.692       155.543    
   9  0.297259      -1.21315      -3.67254       3.67254       152.254       155.927    
  10  0.697504E-01  -2.66283      -8.06112       8.06112       150.154       158.215    
  11  0.824348     -0.193163     -0.584757      0.584757       150.072       150.656    
  12  0.750452     -0.287080     -0.869069      0.869069       152.866       153.735    
  13  0.120595      -2.11532      -6.40365       6.40365       152.976       159.380    
  14  0.935324     -0.668625E-01 -0.202411      0.202411       152.198       152.401    
  15  0.215551      -1.53456      -4.64553       4.64553       151.679       156.324    
  16  0.708821     -0.344153      -1.04184       1.04184       153.572       154.614    
  17  0.402499     -0.910063      -2.75501       2.75501       153.690       156.445    
  18  0.836443     -0.178597     -0.540662      0.540662       150.890       151.430    
  19  0.969979E-01  -2.33307      -7.06283       7.06283       153.535       160.598    
  20  0.178795      -1.72152      -5.21150       5.21150       152.374       157.585    
  21  0.140077      -1.96556      -5.95029       5.95029       154.189       160.140    
  22  0.375507     -0.979479      -2.96515       2.96515       152.603       155.569    
  23  0.831487     -0.184540     -0.558652      0.558652       154.187       154.746    
  24  0.815951     -0.203401     -0.615750      0.615750       153.750       154.366    
  25  0.468603     -0.757998      -2.29467       2.29467       153.309       155.604    
  26  0.677551     -0.389270      -1.17843       1.17843       153.409       154.588    
  27  0.169538      -1.77468      -5.37243       5.37243       154.646       160.018    
  28  0.950448     -0.508223E-01 -0.153853      0.153853       153.051       153.204    
  29  0.981726     -0.184427E-01 -0.558312E-01  0.558312E-01   149.129       149.185    
  30  0.442406     -0.815527      -2.46882       2.46882       155.109       157.577    
  31  0.531953     -0.631200      -1.91082       1.91082       152.720       154.631    
  32  0.363692      -1.01145      -3.06193       3.06193       153.419       156.481    
  33  0.144511E-01  -4.23698      -12.8265       12.8265       154.726       167.553    
  34  0.748780     -0.289310     -0.875820      0.875820       155.270       156.146    
  35  0.195075      -1.63437      -4.94769       4.94769       155.132       160.079    
  36  0.440325     -0.820241      -2.48309       2.48309       150.536       153.019    
  37  0.805864     -0.215841     -0.653409      0.653409       155.446       156.099    
  38  0.921415     -0.818451E-01 -0.247767      0.247767       155.803       156.051    
  39  0.296293      -1.21641      -3.68239       3.68239       156.420       160.102    
  40  0.645874E-01  -2.73974      -8.29393       8.29393       151.560       159.854    
  41  0.488279     -0.716868      -2.17016       2.17016       151.313       153.483    
  42  0.573105     -0.556686      -1.68524       1.68524       156.234       157.919    
  43  0.967891     -0.326356E-01 -0.987967E-01  0.987967E-01   155.551       155.650    
  44  0.780434E-01  -2.55049      -7.72103       7.72103       155.841       163.562    
  45  0.968859     -0.316363E-01 -0.957718E-01  0.957718E-01   152.717       152.813    
  46  0.858835     -0.152178     -0.460685      0.460685       149.126       149.586    
  47  0.968806     -0.316911E-01 -0.959377E-01  0.959377E-01   152.119       152.215    
  48  0.134500      -2.00619      -6.07328       6.07328       157.088       163.161    
  49  0.993707     -0.631323E-02 -0.191119E-01  0.191119E-01   151.784       151.803    
  50  0.300401      -1.20264      -3.64071       3.64071       156.387       160.028    
  51  0.166933      -1.79016      -5.41932       5.41932       157.065       162.484    
  52  0.917937     -0.856264E-01 -0.259215      0.259215       156.578       156.837    
  53  0.587259     -0.532289      -1.61139       1.61139       158.526       160.137    
  54  0.470076     -0.754861      -2.28517       2.28517       157.688       159.974    
  55  0.256936      -1.35893      -4.11385       4.11385       158.148       162.262    
  56  0.723917     -0.323079     -0.978048      0.978048       150.503       151.481    
  57  0.294593      -1.22216      -3.69981       3.69981       154.062       157.761    
  58  0.700842     -0.355473      -1.07611       1.07611       152.325       153.401    
  59  0.845975     -0.167265     -0.506357      0.506357       158.180       158.686    
  60  0.690580     -0.370224      -1.12077       1.12077       155.776       156.897    
  61  0.413361     -0.883435      -2.67440       2.67440       158.361       161.036    
  62  0.950705     -0.505510E-01 -0.153032      0.153032       155.176       155.329    
  63  0.455802     -0.785697      -2.37852       2.37852       156.660       159.038    
  64  0.937099     -0.649663E-01 -0.196671      0.196671       158.663       158.859    
  65  0.872489     -0.136405     -0.412935      0.412935       158.917       159.330    
  66  0.159694      -1.83449      -5.55351       5.55351       158.490       164.044    
  67  0.518082E-01  -2.96021      -8.96135       8.96135       160.478       169.439    
  68  0.786285     -0.240436     -0.727866      0.727866       154.957       155.684    
  69  0.564461     -0.571885      -1.73125       1.73125       158.046       159.778    
  70  0.593490     -0.521735      -1.57944       1.57944       160.242       161.821    
  71  0.627696     -0.465699      -1.40980       1.40980       158.974       160.383    
  72  0.333151      -1.09916      -3.32746       3.32746       160.107       163.435    
  73  0.448676     -0.801454      -2.42622       2.42622       153.757       156.184    
  74  0.628673     -0.464143      -1.40509       1.40509       155.207       156.612    
  75  0.134846      -2.00362      -6.06552       6.06552       152.390       158.456    
loop,thermsimp(1:2)       17   2.16586       4.28095    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    431        152.48          0.87          1.15         25.23          0.12          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    152.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       17
neval is:      430
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       18
neval is:      430


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      430     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -2.15569       2.15569       149.129       151.285    
   2  0.486668     -0.720173      -2.18016       2.18016       149.126       151.306    
   3  0.319995E-01  -3.44203      -10.4200       10.4200       149.818       160.238    
   4  0.957863     -0.430503E-01 -0.130325      0.130325       150.072       150.202    
   5  0.713202E-01  -2.64058      -7.99374       7.99374       150.890       158.884    
   6  0.677570     -0.389242      -1.17834       1.17834       149.281       150.459    
   7  0.533853     -0.627634      -1.90002       1.90002       150.503       152.403    
   8  0.963967     -0.366984E-01 -0.111096      0.111096       151.784       151.895    
   9  0.590118     -0.527432      -1.59668       1.59668       152.119       153.716    
  10  0.102350      -2.27936      -6.90024       6.90024       152.198       159.098    
  11  0.313487      -1.16000      -3.51163       3.51163       150.797       154.309    
  12  0.876181     -0.132183     -0.400153      0.400153       152.717       153.117    
  13  0.780541     -0.247768     -0.750061      0.750061       150.536       151.286    
  14  0.222922      -1.50093      -4.54373       4.54373       151.846       156.390    
  15  0.913991     -0.899351E-01 -0.272258      0.272258       153.051       153.323    
  16  0.493176     -0.706888      -2.13994       2.13994       152.325       154.465    
  17  0.884766     -0.122432     -0.370635      0.370635       151.313       151.683    
  18  0.576549E-01  -2.85328      -8.63766       8.63766       152.040       160.678    
  19  0.398597     -0.919804      -2.78450       2.78450       152.866       155.650    
  20  0.980633     -0.195573E-01 -0.592053E-01  0.592053E-01   149.772       149.832    
  21  0.304985      -1.18749      -3.59486       3.59486       151.177       154.772    
  22  0.628666     -0.464156      -1.40513       1.40513       153.750       155.155    
  23  0.367895     -0.999957      -3.02714       3.02714       153.409       156.437    
  24  0.442302     -0.815762      -2.46954       2.46954       153.572       156.042    
  25  0.656121     -0.421410      -1.27572       1.27572       152.720       153.996    
  26  0.229893      -1.47014      -4.45051       4.45051       154.187       158.638    
  27  0.475469     -0.743453      -2.25064       2.25064       155.176       157.426    
  28  0.801985     -0.220665     -0.668014      0.668014       151.692       152.360    
  29  0.454630     -0.788272      -2.38631       2.38631       152.603       154.990    
  30  0.858022     -0.153126     -0.463553      0.463553       153.309       153.773    
  31  0.692704     -0.367153      -1.11147       1.11147       155.551       156.662    
  32  0.466274     -0.762981      -2.30975       2.30975       154.957       157.266    
  33  0.682446     -0.382072      -1.15664       1.15664       152.254       153.411    
  34  0.660760     -0.414365      -1.25440       1.25440       155.803       157.058    
  35  0.957519     -0.434092E-01 -0.131412      0.131412       155.446       155.577    
  36  0.108167      -2.22408      -6.73289       6.73289       155.270       162.003    
  37  0.846378     -0.166789     -0.504917      0.504917       153.757       154.262    
  38  0.621158E-01  -2.77876      -8.41205       8.41205       151.679       160.091    
  39  0.988945E-01  -2.31370      -7.00421       7.00421       153.690       160.694    
  40  0.253472      -1.37250      -4.15494       4.15494       153.419       157.574    
  41  0.915015     -0.888152E-01 -0.268868      0.268868       155.207       155.476    
  42  0.662342     -0.411973      -1.24715       1.24715       156.578       157.825    
  43  0.210223      -1.55959      -4.72130       4.72130       155.776       160.497    
  44  0.141043      -1.95869      -5.92950       5.92950       155.109       161.038    
  45  0.839834     -0.174551     -0.528415      0.528415       152.374       152.902    
  46  0.132358      -2.02225      -6.12189       6.12189       154.062       160.184    
  47  0.129895E-01  -4.34361      -13.1493       13.1493       156.234       169.383    
  48  0.795497     -0.228788     -0.692603      0.692603       150.154       150.846    
  49  0.547485     -0.602421      -1.82369       1.82369       152.390       154.214    
  50  0.137643      -1.98309      -6.00336       6.00336       158.180       164.183    
  51  0.603188     -0.505526      -1.53037       1.53037       158.663       160.193    
  52  0.394039     -0.931305      -2.81931       2.81931       156.660       159.479    
  53  0.777307     -0.251920     -0.762630      0.762630       158.917       159.680    
  54  0.946969     -0.544893E-01 -0.164954      0.164954       152.976       153.141    
  55  0.137504      -1.98410      -6.00641       6.00641       158.046       164.053    
  56  0.712611     -0.338820      -1.02570       1.02570       151.560       152.586    
  57  0.274991      -1.29102      -3.90826       3.90826       157.688       161.597    
  58  0.847791     -0.165121     -0.499867      0.499867       154.646       155.145    
  59  0.107545      -2.22984      -6.75035       6.75035       156.387       163.137    
  60  0.224670      -1.49312      -4.52009       4.52009       155.132       159.652    
  61  0.827554E-01  -2.49187      -7.54356       7.54356       156.420       163.963    
  62  0.467473     -0.760413      -2.30198       2.30198       158.526       160.828    
  63  0.746927     -0.291788     -0.883321      0.883321       154.189       155.073    
  64  0.346805E-01  -3.36158      -10.1764       10.1764       158.974       169.150    
  65  0.900153     -0.105190     -0.318439      0.318439       153.535       153.853    
  66  0.136291      -1.99296      -6.03324       6.03324       158.361       164.394    
  67  0.971712     -0.286957E-01 -0.868696E-01  0.868696E-01   160.242       160.329    
  68  0.116648      -2.14860      -6.50439       6.50439       158.148       164.652    
  69  0.675516E-01  -2.69486      -8.15809       8.15809       157.065       165.223    
  70  0.354044      -1.03833      -3.14332       3.14332       157.088       160.231    
  71  0.480723     -0.732464      -2.21737       2.21737       160.107       162.325    
  72  0.814966     -0.204609     -0.619408      0.619408       155.841       156.461    
  73  0.716699     -0.333099      -1.00838       1.00838       158.490       159.498    
  74  0.136292      -1.99295      -6.03322       6.03322       154.726       160.760    
  75  0.968742     -0.317570E-01 -0.961373E-01  0.961373E-01   152.477       152.573    
loop,thermsimp(1:2)       18   2.15569       2.18016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    432        151.06          0.87          1.15         25.20          0.17          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       18
neval is:      431
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       19
neval is:      431


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      431     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -5.64108       5.64108       149.772       155.413    
   2  0.881882     -0.125697     -0.380521      0.380521       150.072       150.452    
   3  0.908319     -0.961592E-01 -0.291100      0.291100       149.281       149.572    
   4  0.732380     -0.311455     -0.942860      0.942860       150.154       151.096    
   5  0.367412      -1.00127      -3.03112       3.03112       149.129       152.161    
   6  0.624330     -0.471077      -1.42608       1.42608       150.536       151.962    
   7  0.833858     -0.181693     -0.550033      0.550033       149.126       149.676    
   8  0.194603E-02  -6.24197      -18.8961       18.8961       151.313       170.209    
   9  0.995416     -0.459497E-02 -0.139102E-01  0.139102E-01   151.784       151.798    
  10  0.665599     -0.407068      -1.23231       1.23231       151.692       152.924    
  11  0.747574     -0.290922     -0.880701      0.880701       150.503       151.383    
  12  0.539692     -0.616756      -1.86709       1.86709       152.477       154.344    
  13  0.958323     -0.425700E-01 -0.128871      0.128871       151.560       151.689    
  14  0.111027      -2.19798      -6.65390       6.65390       152.374       159.028    
  15  0.520965     -0.652072      -1.97400       1.97400       152.717       154.691    
  16  0.177207E-01  -4.03302      -12.2091       12.2091       152.976       165.185    
  17  0.860365     -0.150398     -0.455297      0.455297       153.051       153.506    
  18  0.383700     -0.957895      -2.89981       2.89981       152.254       155.154    
  19  0.524904     -0.644539      -1.95120       1.95120       152.119       154.071    
  20  0.589629     -0.528262      -1.59919       1.59919       153.309       154.909    
  21  0.125125      -2.07844      -6.29201       6.29201       153.535       159.827    
  22  0.154207      -1.86946      -5.65937       5.65937       152.720       158.380    
  23  0.752747     -0.284026     -0.859825      0.859825       152.390       153.250    
  24  0.551286     -0.595501      -1.80275       1.80275       153.757       155.560    
  25  0.733343     -0.310142     -0.938884      0.938884       150.797       151.736    
  26  0.904985     -0.998368E-01 -0.302233      0.302233       152.325       152.628    
  27  0.987632     -0.124455E-01 -0.376760E-01  0.376760E-01   151.177       151.215    
  28  0.228587      -1.47584      -4.46776       4.46776       152.603       157.071    
  29  0.384883     -0.954815      -2.89049       2.89049       154.189       157.080    
  30  0.781910     -0.246015     -0.744756      0.744756       154.646       155.390    
  31  0.402051E-02  -5.51635      -16.6995       16.6995       153.750       170.450    
  32  0.880575     -0.127180     -0.385010      0.385010       155.207       155.592    
  33  0.427180     -0.850550      -2.57485       2.57485       155.446       158.021    
  34  0.613064     -0.489286      -1.48120       1.48120       152.866       154.347    
  35  0.529053     -0.636668      -1.92737       1.92737       153.572       155.500    
  36  0.973505     -0.268519E-01 -0.812882E-01  0.812882E-01   151.846       151.927    
  37  0.889868     -0.116682     -0.353229      0.353229       153.409       153.763    
  38  0.133989      -2.01000      -6.08481       6.08481       155.841       161.926    
  39  0.289828      -1.23847      -3.74918       3.74918       155.551       159.300    
  40  0.724995     -0.321591     -0.973543      0.973543       155.803       156.777    
  41  0.547932     -0.601605      -1.82122       1.82122       154.957       156.778    
  42  0.608240E-01  -2.79977      -8.47567       8.47567       155.176       163.651    
  43  0.481259E-01  -3.03393      -9.18455       9.18455       153.419       162.604    
  44  0.356843      -1.03046      -3.11948       3.11948       156.578       159.697    
  45  0.417411     -0.873685      -2.64488       2.64488       154.187       156.832    
  46  0.918903     -0.845742E-01 -0.256029      0.256029       150.890       151.146    
  47  0.852285     -0.159834     -0.483862      0.483862       152.198       152.682    
  48  0.744864     -0.294553     -0.891694      0.891694       156.660       157.551    
  49  0.128521      -2.05166      -6.21095       6.21095       158.490       164.701    
  50  0.484639     -0.724351      -2.19281       2.19281       155.132       157.324    
  51  0.478847     -0.736375      -2.22921       2.22921       158.917       161.146    
  52  0.557656     -0.584013      -1.76797       1.76797       151.679       153.447    
  53  0.799673     -0.223552     -0.676752      0.676752       154.062       154.738    
  54  0.734793     -0.308167     -0.932906      0.932906       158.663       159.595    
  55  0.306231      -1.18342      -3.58252       3.58252       157.088       160.670    
  56  0.286852      -1.24879      -3.78043       3.78043       149.818       153.599    
  57  0.731298     -0.312934     -0.947337      0.947337       160.242       161.189    
  58  0.681466     -0.383509      -1.16099       1.16099       155.776       156.937    
  59  0.246139      -1.40186      -4.24381       4.24381       152.040       156.284    
  60  0.339728      -1.07961      -3.26827       3.26827       153.690       156.959    
  61  0.740009     -0.301093     -0.911490      0.911490       154.726       155.638    
  62  0.923584     -0.794938E-01 -0.240649      0.240649       158.526       158.766    
  63  0.108454      -2.22143      -6.72488       6.72488       155.109       161.833    
  64  0.658643     -0.417574      -1.26411       1.26411       157.688       158.953    
  65  0.399262     -0.918138      -2.77945       2.77945       155.270       158.049    
  66  0.826271     -0.190833     -0.577702      0.577702       160.107       160.685    
  67  0.162727      -1.81568      -5.49657       5.49657       156.387       161.884    
  68  0.597317     -0.515307      -1.55997       1.55997       156.420       157.980    
  69  0.441859     -0.816765      -2.47257       2.47257       158.046       160.519    
  70  0.733350     -0.310132     -0.938856      0.938856       158.180       159.119    
  71  0.897038     -0.108657     -0.328934      0.328934       158.361       158.690    
  72  0.575144     -0.553135      -1.67449       1.67449       158.148       159.823    
  73  0.339845      -1.07927      -3.26723       3.26723       157.065       160.332    
  74  0.643529     -0.440788      -1.33438       1.33438       158.974       160.308    
  75  0.846436     -0.166721     -0.504710      0.504710       151.062       151.567    
loop,thermsimp(1:2)       19   5.64108      0.380521    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    433        153.17          0.86          1.15         25.25          0.11          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    153.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       19
neval is:      432
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       20
neval is:      432


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      432     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -3.93262       3.93262       149.281       153.213    
   2  0.284829      -1.25587      -3.80185       3.80185       149.126       152.927    
   3  0.422534E-01  -3.16407      -9.57851       9.57851       150.072       159.650    
   4  0.788018E-01  -2.54082      -7.69176       7.69176       150.154       157.845    
   5  0.396626E-01  -3.22735      -9.77006       9.77006       150.890       160.660    
   6  0.412432     -0.885684      -2.68121       2.68121       151.177       153.858    
   7  0.390866     -0.939390      -2.84379       2.84379       150.503       153.346    
   8  0.853334     -0.158604     -0.480137      0.480137       151.062       151.542    
   9  0.506127     -0.680968      -2.06148       2.06148       151.560       153.621    
  10  0.254200      -1.36963      -4.14626       4.14626       150.797       154.943    
  11  0.643116     -0.441430      -1.33633       1.33633       151.784       153.120    
  12  0.897721     -0.107896     -0.326632      0.326632       151.846       152.173    
  13  0.830899     -0.185247     -0.560794      0.560794       150.536       151.097    
  14  0.357312      -1.02915      -3.11551       3.11551       149.129       152.245    
  15  0.525942     -0.642564      -1.94522       1.94522       152.325       154.270    
  16  0.742929     -0.297155     -0.899568      0.899568       152.198       153.098    
  17  0.970959     -0.294711E-01 -0.892172E-01  0.892172E-01   151.692       151.781    
  18  0.235894      -1.44437      -4.37251       4.37251       152.390       156.763    
  19  0.723381E-01  -2.62640      -7.95084       7.95084       151.679       159.629    
  20  0.190915      -1.65593      -5.01294       5.01294       153.051       158.064    
  21  0.524670     -0.644986      -1.95255       1.95255       149.818       151.771    
  22  0.536043     -0.623540      -1.88763       1.88763       153.409       155.297    
  23  0.281730      -1.26681      -3.83497       3.83497       152.119       155.954    
  24  0.747791     -0.290632     -0.879822      0.879822       152.477       153.357    
  25  0.255771      -1.36347      -4.12760       4.12760       152.866       156.994    
  26  0.194866      -1.63544      -4.95093       4.95093       152.717       157.668    
  27  0.639630     -0.446865      -1.35278       1.35278       154.062       155.414    
  28  0.485808     -0.721941      -2.18551       2.18551       153.309       155.495    
  29  0.659147     -0.416809      -1.26180       1.26180       152.254       153.516    
  30  0.196308      -1.62807      -4.92861       4.92861       154.646       159.574    
  31  0.308964      -1.17453      -3.55562       3.55562       149.772       153.328    
  32  0.181287      -1.70768      -5.16960       5.16960       153.572       158.742    
  33  0.386667     -0.950191      -2.87649       2.87649       153.757       156.634    
  34  0.947825     -0.535853E-01 -0.162217      0.162217       155.207       155.370    
  35  0.699942     -0.356758      -1.08000       1.08000       154.726       155.806    
  36  0.208747      -1.56663      -4.74262       4.74262       152.040       156.783    
  37  0.717648     -0.331775      -1.00437       1.00437       155.803       156.808    
  38  0.734922     -0.307991     -0.932372      0.932372       154.957       155.889    
  39  0.862816     -0.147554     -0.446686      0.446686       154.187       154.634    
  40  0.677494     -0.389354      -1.17868       1.17868       155.776       156.954    
  41  0.829375     -0.187082     -0.566349      0.566349       153.690       154.257    
  42  0.393856     -0.931770      -2.82072       2.82072       152.603       155.424    
  43  0.447370     -0.804370      -2.43505       2.43505       154.189       156.624    
  44  0.485389     -0.722806      -2.18813       2.18813       155.132       157.320    
  45  0.522363     -0.649392      -1.96589       1.96589       156.660       158.626    
  46  0.740056E-01  -2.60361      -7.88185       7.88185       156.420       164.301    
  47  0.396252     -0.925705      -2.80236       2.80236       155.446       158.248    
  48  0.429395     -0.845378      -2.55919       2.55919       155.270       157.829    
  49  0.865472     -0.144480     -0.437381      0.437381       152.720       153.158    
  50  0.103085      -2.27220      -6.87858       6.87858       158.361       165.240    
  51  0.257437      -1.35698      -4.10795       4.10795       158.526       162.634    
  52  0.136338      -1.99262      -6.03220       6.03220       157.688       163.721    
  53  0.153596      -1.87343      -5.67139       5.67139       152.374       158.045    
  54  0.305406      -1.18611      -3.59069       3.59069       158.180       161.770    
  55  0.473340     -0.747942      -2.26422       2.26422       155.551       157.815    
  56  0.475010     -0.744419      -2.25356       2.25356       158.663       160.916    
  57  0.779699     -0.248847     -0.753329      0.753329       156.578       157.331    
  58  0.143364      -1.94237      -5.88007       5.88007       158.148       164.028    
  59  0.739804     -0.301371     -0.912331      0.912331       153.535       154.447    
  60  0.571699     -0.559143      -1.69268       1.69268       158.974       160.666    
  61  0.641967     -0.443219      -1.34175       1.34175       157.065       158.407    
  62  0.339882      -1.07916      -3.26691       3.26691       158.046       161.313    
  63  0.658898E-01  -2.71977      -8.23349       8.23349       157.088       165.321    
  64  0.441939     -0.816583      -2.47202       2.47202       160.107       162.579    
  65  0.470437     -0.754093      -2.28284       2.28284       158.917       161.200    
  66  0.190313      -1.65908      -5.02250       5.02250       160.242       165.264    
  67  0.901027     -0.104220     -0.315502      0.315502       155.109       155.424    
  68  0.860734     -0.149970     -0.454000      0.454000       156.387       156.841    
  69  0.456875     -0.783344      -2.37140       2.37140       155.841       158.213    
  70  0.846393     -0.166772     -0.504864      0.504864       153.419       153.924    
  71  0.697782E-01  -2.66243      -8.05991       8.05991       155.176       163.236    
  72  0.304557      -1.18890      -3.59911       3.59911       158.490       162.089    
  73  0.892496     -0.113733     -0.344301      0.344301       152.976       153.320    
  74  0.589330     -0.528769      -1.60073       1.60073       151.313       152.913    
  75  0.265231      -1.32716      -4.01766       4.01766       153.169       157.186    
loop,thermsimp(1:2)       20   3.93262       3.80185    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    434        152.64          0.87          1.15         25.18          0.24          0.05         27.50
Just calling func    0   0         27.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    435        228.27          0.87          1.15         25.25          0.52          0.06         27.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    152.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       20
neval is:      434
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       21
neval is:      434


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      434     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -8.35073       8.35073       150.536       158.887    
   2  0.713782     -0.337177      -1.02073       1.02073       151.062       152.083    
   3  0.851614     -0.160622     -0.486247      0.486247       149.818       150.305    
   4  0.721769     -0.326050     -0.987042      0.987042       151.692       152.679    
   5  0.954937     -0.461102E-01 -0.139588      0.139588       151.846       151.985    
   6  0.302532E-01  -3.49815      -10.5899       10.5899       149.129       159.719    
   7  0.942920E-01  -2.36136      -7.14848       7.14848       151.313       158.461    
   8  0.515750E-01  -2.96472      -8.97501       8.97501       149.126       158.101    
   9  0.612753     -0.489794      -1.48274       1.48274       152.198       153.681    
  10  0.758041     -0.277018     -0.838608      0.838608       151.784       152.622    
  11  0.530485E-01  -2.93655      -8.88974       8.88974       152.720       161.610    
  12  0.941175     -0.606258E-01 -0.183531      0.183531       149.281       149.464    
  13  0.167539      -1.78654      -5.40835       5.40835       152.976       158.384    
  14  0.738662E-01  -2.60550      -7.88756       7.88756       149.772       157.660    
  15  0.822155     -0.195827     -0.592822      0.592822       150.503       151.095    
  16  0.578765     -0.546859      -1.65549       1.65549       152.477       154.133    
  17  0.912739E-01  -2.39389      -7.24696       7.24696       152.254       159.501    
  18  0.949215     -0.521197E-01 -0.157781      0.157781       151.560       151.718    
  19  0.485124     -0.723351      -2.18978       2.18978       151.177       153.367    
  20  0.359009      -1.02441      -3.10116       3.10116       153.419       156.520    
  21  0.747559     -0.290942     -0.880762      0.880762       153.690       154.571    
  22  0.482847     -0.728056      -2.20403       2.20403       152.325       154.529    
  23  0.994301     -0.571526E-02 -0.173017E-01  0.173017E-01   153.535       153.552    
  24  0.937801     -0.642177E-01 -0.194404      0.194404       154.187       154.381    
  25  0.699033     -0.358058      -1.08394       1.08394       150.797       151.881    
  26  0.358162      -1.02677      -3.10832       3.10832       153.409       156.518    
  27  0.746418     -0.292470     -0.885385      0.885385       155.207       156.093    
  28  0.532195     -0.630744      -1.90944       1.90944       154.062       155.971    
  29  0.727066     -0.318738     -0.964908      0.964908       155.109       156.073    
  30  0.461510     -0.773252      -2.34084       2.34084       152.603       154.944    
  31  0.285112      -1.25487      -3.79884       3.79884       153.309       157.108    
  32  0.316830      -1.14939      -3.47952       3.47952       154.726       158.206    
  33  0.835731     -0.179448     -0.543239      0.543239       154.957       155.500    
  34  0.516269E-02  -5.26630      -15.9425       15.9425       152.119       168.062    
  35  0.309002      -1.17441      -3.55526       3.55526       154.189       157.745    
  36  0.770766     -0.260370     -0.788211      0.788211       153.757       154.546    
  37  0.878913     -0.129069     -0.390727      0.390727       152.390       152.781    
  38  0.981341E-01  -2.32142      -7.02757       7.02757       152.040       159.068    
  39  0.634060     -0.455612      -1.37926       1.37926       155.803       157.183    
  40  0.359967      -1.02174      -3.09310       3.09310       156.387       159.480    
  41  0.480002     -0.733964      -2.22191       2.22191       155.776       157.998    
  42  0.706923     -0.346834      -1.04996       1.04996       152.866       153.916    
  43  0.497828     -0.697501      -2.11153       2.11153       153.169       155.280    
  44  0.885038     -0.122125     -0.369704      0.369704       155.132       155.501    
  45  0.504752     -0.683689      -2.06971       2.06971       156.578       158.647    
  46  0.719262     -0.329529     -0.997576      0.997576       152.717       153.715    
  47  0.516359     -0.660954      -2.00089       2.00089       155.551       157.552    
  48  0.584389E-01  -2.83977      -8.59677       8.59677       155.270       163.867    
  49  0.768960E-01  -2.56530      -7.76587       7.76587       150.154       157.919    
  50  0.253658      -1.37177      -4.15271       4.15271       152.374       156.527    
  51  0.451822     -0.794468      -2.40507       2.40507       153.051       155.456    
  52  0.816822     -0.202334     -0.612520      0.612520       155.841       156.454    
  53  0.774668     -0.255321     -0.772926      0.772926       155.446       156.219    
  54  0.528070     -0.638526      -1.93299       1.93299       157.065       158.998    
  55  0.367170      -1.00193      -3.03311       3.03311       156.660       159.693    
  56  0.960919E-01  -2.34245      -7.09124       7.09124       153.572       160.664    
  57  0.621616     -0.475432      -1.43926       1.43926       154.646       156.085    
  58  0.678193     -0.388324      -1.17556       1.17556       151.679       152.854    
  59  0.400445E-01  -3.21776      -9.74105       9.74105       150.072       159.813    
  60  0.643930     -0.440165      -1.33250       1.33250       150.890       152.222    
  61  0.695390     -0.363282      -1.09975       1.09975       158.974       160.073    
  62  0.669334E-01  -2.70406      -8.18592       8.18592       158.663       166.848    
  63  0.850395E-01  -2.46464      -7.46114       7.46114       158.917       166.378    
  64  0.972359     -0.280307E-01 -0.848566E-01  0.848566E-01   158.046       158.131    
  65  0.994658     -0.535647E-02 -0.162155E-01  0.162155E-01   158.180       158.196    
  66  0.881217     -0.126451     -0.382803      0.382803       158.490       158.873    
  67  0.460812     -0.774766      -2.34543       2.34543       160.107       162.453    
  68  0.579353     -0.545843      -1.65242       1.65242       158.526       160.178    
  69  0.189905      -1.66123      -5.02901       5.02901       155.176       160.205    
  70  0.963487     -0.371960E-01 -0.112603      0.112603       157.688       157.801    
  71  0.281063      -1.26917      -3.84214       3.84214       158.148       161.990    
  72  0.113474      -2.17618      -6.58789       6.58789       156.420       163.007    
  73  0.267299      -1.31939      -3.99415       3.99415       158.361       162.355    
  74  0.726533E-01  -2.62206      -7.93768       7.93768       160.242       168.180    
  75  0.562505     -0.575355      -1.74176       1.74176       152.640       154.382    
loop,thermsimp(1:2)       21   8.35073       1.02073    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    436        148.63          0.87          1.16         25.21          0.15          0.07         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    437        152.49          0.85          1.16         25.22          0.19          0.06         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       21
neval is:      436
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       22
neval is:      436


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      436     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -2.52092       2.52092       149.281       151.802    
   2  0.380177E-01  -3.26970      -9.89829       9.89829       149.818       159.717    
   3  0.198795      -1.61548      -4.89050       4.89050       150.503       155.393    
   4  0.880944E-01  -2.42935      -7.35430       7.35430       151.560       158.914    
   5  0.279105      -1.27617      -3.86331       3.86331       150.797       154.660    
   6  0.379482     -0.968948      -2.93327       2.93327       151.846       154.779    
   7  0.510142     -0.673065      -2.03755       2.03755       151.062       153.100    
   8  0.869007     -0.140404     -0.425041      0.425041       150.890       151.315    
   9  0.905256     -0.995378E-01 -0.301328      0.301328       151.784       152.085    
  10  0.587200     -0.532390      -1.61169       1.61169       151.692       153.304    
  11  0.309008      -1.17439      -3.55520       3.55520       152.390       155.946    
  12  0.210718      -1.55723      -4.71417       4.71417       151.679       156.393    
  13  0.362152      -1.01569      -3.07478       3.07478       151.177       154.252    
  14  0.465452     -0.764747      -2.31510       2.31510       153.535       155.850    
  15  0.155270E-01  -4.16518      -12.6091       12.6091       152.198       164.807    
  16  0.632166     -0.458603      -1.38832       1.38832       152.717       154.106    
  17  0.171028      -1.76593      -5.34595       5.34595       152.866       158.212    
  18  0.926401     -0.764482E-01 -0.231430      0.231430       152.477       152.709    
  19  0.130449      -2.03678      -6.16588       6.16588       154.187       160.353    
  20  0.536069     -0.623492      -1.88748       1.88748       152.640       154.528    
  21  0.128128      -2.05472      -6.22021       6.22021       152.325       158.545    
  22  0.729730     -0.315081     -0.953836      0.953836       153.757       154.711    
  23  0.982387     -0.177702E-01 -0.537952E-01  0.537952E-01   153.690       153.744    
  24  0.707707     -0.345726      -1.04661       1.04661       152.603       153.650    
  25  0.643878     -0.440245      -1.33274       1.33274       153.169       154.501    
  26  0.136721      -1.98982      -6.02371       6.02371       153.051       159.074    
  27  0.146320      -1.92196      -5.81830       5.81830       154.957       160.775    
  28  0.214169      -1.54099      -4.66500       4.66500       155.132       159.797    
  29  0.774008     -0.256172     -0.775504      0.775504       154.062       154.837    
  30  0.487333     -0.718808      -2.17603       2.17603       155.109       157.285    
  31  0.594481E-01  -2.82265      -8.54494       8.54494       154.646       163.191    
  32  0.305368      -1.18624      -3.59106       3.59106       155.207       158.798    
  33  0.206200      -1.57891      -4.77979       4.77979       155.446       160.226    
  34  0.185235      -1.68613      -5.10437       5.10437       155.841       160.946    
  35  0.945154     -0.564077E-01 -0.170762      0.170762       153.409       153.580    
  36  0.657328     -0.419572      -1.27016       1.27016       153.419       154.689    
  37  0.932191     -0.702171E-01 -0.212566      0.212566       152.374       152.587    
  38  0.258055      -1.35458      -4.10069       4.10069       153.309       157.410    
  39  0.525568E-01  -2.94586      -8.91793       8.91793       155.803       164.721    
  40  0.692807     -0.367004      -1.11102       1.11102       155.551       156.662    
  41  0.691658     -0.368664      -1.11605       1.11605       149.772       150.888    
  42  0.163447      -1.81127      -5.48320       5.48320       154.189       159.672    
  43  0.462923     -0.770194      -2.33159       2.33159       157.688       160.020    
  44  0.758611     -0.276266     -0.836332      0.836332       150.154       150.990    
  45  0.278938      -1.27677      -3.86512       3.86512       155.776       159.641    
  46  0.726655     -0.319304     -0.966621      0.966621       149.126       150.092    
  47  0.288418      -1.24334      -3.76394       3.76394       158.046       161.810    
  48  0.640221     -0.445941      -1.34999       1.34999       158.180       159.530    
  49  0.531981     -0.631147      -1.91065       1.91065       154.726       156.637    
  50  0.494380     -0.704450      -2.13256       2.13256       152.976       155.109    
  51  0.765719     -0.266940     -0.808102      0.808102       151.313       152.121    
  52  0.274236      -1.29377      -3.91658       3.91658       156.578       160.494    
  53  0.946599     -0.548792E-01 -0.166134      0.166134       158.490       158.656    
  54  0.264711      -1.32912      -4.02360       4.02360       150.536       154.560    
  55  0.129097      -2.04719      -6.19741       6.19741       157.065       163.262    
  56  0.217636      -1.52493      -4.61638       4.61638       152.040       156.656    
  57  0.430633     -0.842500      -2.55048       2.55048       156.387       158.938    
  58  0.307617      -1.17890      -3.56885       3.56885       152.254       155.823    
  59  0.137533      -1.98389      -6.00577       6.00577       156.660       162.666    
  60  0.560294     -0.579293      -1.75368       1.75368       149.129       150.883    
  61  0.531695     -0.631686      -1.91229       1.91229       150.072       151.984    
  62  0.259312      -1.34972      -4.08598       4.08598       158.974       163.060    
  63  0.928174     -0.745366E-01 -0.225643      0.225643       158.526       158.751    
  64  0.501730     -0.689694      -2.08789       2.08789       155.176       157.263    
  65  0.978765     -0.214635E-01 -0.649760E-01  0.649760E-01   153.572       153.637    
  66  0.977551     -0.227050E-01 -0.687343E-01  0.687343E-01   152.720       152.789    
  67  0.298331      -1.20955      -3.66164       3.66164       158.148       161.810    
  68  0.958356     -0.425363E-01 -0.128769      0.128769       158.361       158.490    
  69  0.140025      -1.96594      -5.95143       5.95143       160.107       166.059    
  70  0.204883      -1.58531      -4.79918       4.79918       156.420       161.219    
  71  0.408241     -0.895898      -2.71213       2.71213       155.270       157.982    
  72  0.552023     -0.594165      -1.79870       1.79870       158.917       160.716    
  73  0.123070      -2.09500      -6.34214       6.34214       158.663       165.005    
  74  0.509442E-01  -2.97702      -9.01227       9.01227       152.119       161.132    
  75  0.106482      -2.23978      -6.78044       6.78044       148.625       155.406    
loop,thermsimp(1:2)       22   2.52092       9.89829    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    438        150.50          0.87          1.15         25.23          0.13          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    439        158.53          0.84          1.15         25.25          0.18          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       22
neval is:      438
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       23
neval is:      438


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      438     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -4.04497       4.04497       149.126       153.170    
   2  0.388449     -0.945595      -2.86257       2.86257       149.129       151.992    
   3  0.827051     -0.189889     -0.574847      0.574847       149.772       150.347    
   4  0.958395     -0.424951E-01 -0.128644      0.128644       150.154       150.282    
   5  0.125400      -2.07625      -6.28537       6.28537       150.890       157.175    
   6  0.524174     -0.645931      -1.95541       1.95541       149.281       151.236    
   7  0.783721     -0.243702     -0.737753      0.737753       150.072       150.809    
   8  0.183361      -1.69630      -5.13517       5.13517       151.784       156.919    
   9  0.122208      -2.10203      -6.36341       6.36341       151.313       157.676    
  10  0.913915     -0.900182E-01 -0.272510      0.272510       152.374       152.646    
  11  0.273776      -1.29545      -3.92167       3.92167       152.477       156.399    
  12  0.779874     -0.248622     -0.752648      0.752648       152.720       153.473    
  13  0.305314      -1.18641      -3.59160       3.59160       151.062       154.654    
  14  0.720732     -0.327488     -0.991397      0.991397       151.692       152.684    
  15  0.222329      -1.50360      -4.55180       4.55180       153.409       157.961    
  16  0.826299     -0.190798     -0.577598      0.577598       153.572       154.150    
  17  0.581574     -0.542017      -1.64083       1.64083       152.603       154.244    
  18  0.616258     -0.484089      -1.46547       1.46547       153.690       155.156    
  19  0.604230     -0.503801      -1.52514       1.52514       152.717       154.242    
  20  0.333333      -1.09861      -3.32581       3.32581       151.177       154.503    
  21  0.289888E-01  -3.54085      -10.7191       10.7191       153.169       163.888    
  22  0.396892     -0.924091      -2.79748       2.79748       152.640       155.438    
  23  0.910378     -0.938957E-01 -0.284248      0.284248       150.536       150.820    
  24  0.998355     -0.164683E-02 -0.498539E-02  0.498539E-02   150.797       150.802    
  25  0.735990     -0.306539     -0.927977      0.927977       153.419       154.347    
  26  0.779044     -0.249688     -0.755874      0.755874       153.757       154.513    
  27  0.498268     -0.696618      -2.10885       2.10885       151.846       153.955    
  28  0.693129     -0.366539      -1.10961       1.10961       154.062       155.171    
  29  0.691370     -0.369080      -1.11731       1.11731       152.976       154.093    
  30  0.519398     -0.655086      -1.98312       1.98312       150.503       152.486    
  31  0.365801      -1.00567      -3.04442       3.04442       148.625       151.670    
  32  0.352392      -1.04301      -3.15748       3.15748       152.254       155.412    
  33  0.176642      -1.73363      -5.24817       5.24817       153.535       158.783    
  34  0.982977     -0.171697E-01 -0.519773E-01  0.519773E-01   152.390       152.442    
  35  0.466781     -0.761894      -2.30646       2.30646       151.679       153.985    
  36  0.481130     -0.731617      -2.21481       2.21481       154.726       156.941    
  37  0.238852      -1.43191      -4.33479       4.33479       152.040       156.375    
  38  0.453247     -0.791318      -2.39554       2.39554       155.551       157.946    
  39  0.579188     -0.546129      -1.65328       1.65328       155.176       156.829    
  40  0.802776E-01  -2.52226      -7.63558       7.63558       155.109       162.744    
  41  0.819632     -0.198900     -0.602126      0.602126       153.309       153.912    
  42  0.917023     -0.866231E-01 -0.262232      0.262232       155.270       155.532    
  43  0.328296      -1.11384      -3.37190       3.37190       152.866       156.238    
  44  0.751681     -0.285443     -0.864113      0.864113       158.361       159.225    
  45  0.760454     -0.273840     -0.828988      0.828988       152.325       153.154    
  46  0.655053     -0.423039      -1.28066       1.28066       158.490       159.771    
  47  0.438192     -0.825097      -2.49779       2.49779       158.526       161.023    
  48  0.615984E-01  -2.78712      -8.43737       8.43737       155.207       163.645    
  49  0.373345     -0.985252      -2.98263       2.98263       151.560       154.543    
  50  0.173578      -1.75113      -5.30114       5.30114       156.387       161.688    
  51  0.787098     -0.239402     -0.724736      0.724736       153.051       153.775    
  52  0.476899     -0.740450      -2.24154       2.24154       158.180       160.421    
  53  0.267079      -1.32021      -3.99663       3.99663       155.776       159.772    
  54  0.328534E-01  -3.41570      -10.3403       10.3403       154.189       164.530    
  55  0.223376      -1.49890      -4.53757       4.53757       149.818       154.356    
  56  0.950133     -0.511529E-01 -0.154854      0.154854       155.132       155.286    
  57  0.802688     -0.219789     -0.665361      0.665361       157.688       158.354    
  58  0.687564     -0.374601      -1.13402       1.13402       155.446       156.580    
  59  0.389763     -0.942217      -2.85235       2.85235       154.187       157.039    
  60  0.828122     -0.188595     -0.570928      0.570928       156.578       157.149    
  61  0.447451     -0.804188      -2.43450       2.43450       158.917       161.351    
  62  0.132831      -2.01868      -6.11109       6.11109       154.957       161.068    
  63  0.217304E-01  -3.82904      -11.5916       11.5916       155.841       167.433    
  64  0.466508     -0.762480      -2.30824       2.30824       152.119       154.428    
  65  0.713806     -0.337144      -1.02063       1.02063       156.420       157.440    
  66  0.198949E-01  -3.91729      -11.8587       11.8587       158.148       170.007    
  67  0.532640     -0.629910      -1.90691       1.90691       158.046       159.953    
  68  0.788490     -0.237636     -0.719389      0.719389       156.660       157.379    
  69  0.603947     -0.504269      -1.52656       1.52656       158.974       160.500    
  70  0.150417      -1.89434      -5.73470       5.73470       154.646       160.380    
  71  0.504457     -0.684273      -2.07148       2.07148       157.065       159.136    
  72  0.893450     -0.112665     -0.341069      0.341069       155.803       156.144    
  73  0.245208      -1.40565      -4.25528       4.25528       152.198       156.453    
  74  0.648805     -0.432623      -1.30967       1.30967       158.663       159.972    
  75  0.710713     -0.341486      -1.03377       1.03377       150.497       151.531    
loop,thermsimp(1:2)       23   4.04497       2.86257    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    440        150.16          0.87          1.16         25.21          0.19          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    441        153.10          0.86          1.16         25.20          0.32          0.05         27.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  440    153.10        1.079     -2.687      3.613     -102.6      1.253    
                      0.6099      3.961     -99.70      3.559     0.4218E-02
                       2.476     -1.307      1.530      7128.     -94.78    
                     -0.1331      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      6222.      1627.    
                     -0.5672     -5.723     -3.775     -9.200      6.035    
                      -16.25     -3.818     0.1323E+05  0.000     0.1152E+05

                      -2979.     0.1127E+05 -6132.     0.1152E+05  6021.    
                       6327.     0.1114     0.2361      0.000     0.1196    
                     -0.4814    -0.1812     0.4318E-01 0.5221E-01-0.1047    

                     -0.5443    -0.6756      0.000     0.7864E-01-0.1596    
                       0.000     0.7877E-01 0.1310    -0.1962    -0.7818E-01
                     -0.4317E-01 0.1429E-01-0.5944     -1.176      3467.    

                      -1.159     -1.354     -2.236     -2.151    -0.2997    
                     -0.1001      9.198      8.705    -0.1551E+05 -4.000    
                     -0.9007     -1.794      9.200      8.815     -8653.    

                      -4.000     0.3165    -0.9019      8.927      9.071    
                     -0.2399E+05 -7.000     -1.040     -1.145      9.019    
                       8.677    -0.1947E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       23
neval is:      440
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       24
neval is:      440


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      440     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -1.74207       1.74207       150.154       151.896    
   2  0.429755     -0.844539      -2.55665       2.55665       149.772       152.329    
   3  0.598807     -0.512815      -1.55243       1.55243       150.797       152.349    
   4  0.757798     -0.277339     -0.839580      0.839580       150.072       150.911    
   5  0.954130E-01  -2.34954      -7.11270       7.11270       150.536       157.649    
   6  0.968708E-01  -2.33438      -7.06680       7.06680       149.281       156.347    
   7  0.196924      -1.62494      -4.91913       4.91913       150.497       155.416    
   8  0.616654     -0.483447      -1.46353       1.46353       148.625       150.089    
   9  0.181969      -1.70392      -5.15823       5.15823       149.129       154.288    
  10  0.383918     -0.957326      -2.89809       2.89809       152.390       155.288    
  11  0.377012     -0.975478      -2.95304       2.95304       150.503       153.456    
  12  0.899192     -0.106259     -0.321674      0.321674       152.374       152.696    
  13  0.409833     -0.892005      -2.70034       2.70034       151.692       154.392    
  14  0.728621     -0.316601     -0.958438      0.958438       152.325       153.284    
  15  0.568233     -0.565224      -1.71109       1.71109       149.126       150.837    
  16  0.647091     -0.435269      -1.31768       1.31768       152.720       154.038    
  17  0.118896      -2.12951      -6.44660       6.44660       153.051       159.497    
  18  0.910801     -0.934313E-01 -0.282842      0.282842       153.309       153.592    
  19  0.484176     -0.725308      -2.19570       2.19570       151.846       154.042    
  20  0.327343      -1.11675      -3.38070       3.38070       151.679       155.059    
  21  0.674995     -0.393050      -1.18987       1.18987       152.976       154.166    
  22  0.234857      -1.44878      -4.38585       4.38585       153.572       157.958    
  23  0.800837     -0.222098     -0.672351      0.672351       152.717       153.390    
  24  0.619975     -0.478077      -1.44727       1.44727       152.603       154.051    
  25  0.578519     -0.547284      -1.65678       1.65678       153.419       155.076    
  26  0.837214     -0.177675     -0.537872      0.537872       149.818       150.356    
  27  0.935915     -0.662302E-01 -0.200497      0.200497       152.119       152.320    
  28  0.779751     -0.248781     -0.753127      0.753127       151.177       151.930    
  29  0.801557     -0.221199     -0.669630      0.669630       153.757       154.427    
  30  0.827533E-01  -2.49189      -7.54364       7.54364       151.560       159.104    
  31  0.640581     -0.445379      -1.34828       1.34828       151.062       152.410    
  32  0.226382      -1.48553      -4.49711       4.49711       153.690       158.187    
  33  0.198814E-01  -3.91797      -11.8608       11.8608       154.062       165.922    
  34  0.147003      -1.91730      -5.80419       5.80419       155.132       160.936    
  35  0.568592     -0.564592      -1.70917       1.70917       152.254       153.964    
  36  0.650717     -0.429680      -1.30076       1.30076       152.640       153.941    
  37  0.259092      -1.35057      -4.08855       4.08855       155.270       159.358    
  38  0.935898     -0.662490E-01 -0.200554      0.200554       155.803       156.004    
  39  0.702433     -0.353205      -1.06925       1.06925       152.866       153.935    
  40  0.622661     -0.473753      -1.43418       1.43418       152.040       153.474    
  41  0.546960     -0.603380      -1.82660       1.82660       152.477       154.304    
  42  0.883578     -0.123775     -0.374702      0.374702       152.198       152.573    
  43  0.728206E-02  -4.92234      -14.9013       14.9013       155.446       170.347    
  44  0.112001      -2.18925      -6.62745       6.62745       155.176       161.803    
  45  0.689494     -0.371797      -1.12553       1.12553       151.784       152.909    
  46  0.872629     -0.136244     -0.412449      0.412449       154.726       155.139    
  47  0.688489     -0.373256      -1.12995       1.12995       154.187       155.317    
  48  0.947843     -0.535662E-01 -0.162160      0.162160       156.578       156.740    
  49  0.294529      -1.22238      -3.70047       3.70047       150.890       154.590    
  50  0.717675E-01  -2.63432      -7.97482       7.97482       156.660       164.635    
  51  0.738094     -0.303684     -0.919336      0.919336       156.420       157.339    
  52  0.237514      -1.43753      -4.35179       4.35179       151.313       155.664    
  53  0.932770     -0.695962E-01 -0.210687      0.210687       155.551       155.761    
  54  0.973437     -0.269222E-01 -0.815008E-01  0.815008E-01   153.409       153.491    
  55  0.216069      -1.53216      -4.63826       4.63826       157.688       162.327    
  56  0.927621     -0.751319E-01 -0.227445      0.227445       153.535       153.762    
  57  0.882551     -0.124939     -0.378225      0.378225       157.065       157.443    
  58  0.958611     -0.422698E-01 -0.127962      0.127962       158.361       158.489    
  59  0.174241      -1.74732      -5.28961       5.28961       158.490       163.780    
  60  0.165969      -1.79595      -5.43684       5.43684       155.776       161.213    
  61  0.449805     -0.798942      -2.41862       2.41862       158.046       160.465    
  62  0.749166     -0.288795     -0.874262      0.874262       158.663       159.537    
  63  0.564353     -0.572075      -1.73183       1.73183       154.646       156.377    
  64  0.721233     -0.326792     -0.989290      0.989290       158.180       159.169    
  65  0.160496      -1.82949      -5.53835       5.53835       158.974       164.512    
  66  0.951367     -0.498557E-01 -0.150927      0.150927       158.526       158.677    
  67  0.392818     -0.934408      -2.82871       2.82871       154.957       157.785    
  68  0.502077     -0.689002      -2.08580       2.08580       158.917       161.003    
  69  0.414837     -0.879871      -2.66361       2.66361       156.387       159.051    
  70  0.954606     -0.464567E-01 -0.140637      0.140637       155.109       155.249    
  71  0.444045     -0.811830      -2.45763       2.45763       155.207       157.665    
  72  0.420207     -0.867007      -2.62467       2.62467       153.169       155.793    
  73  0.743114     -0.296906     -0.898816      0.898816       154.189       155.088    
  74  0.602838     -0.506107      -1.53212       1.53212       155.841       157.373    
  75  0.142940      -1.94533      -5.88905       5.88905       150.157       156.046    
loop,thermsimp(1:2)       24   1.74207       2.55665    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    442        151.34          0.86          1.15         25.25          0.12          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    443        159.09          0.87          1.15         25.23          0.19          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       24
neval is:      442
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       25
neval is:      442


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      442     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553     -0.846284      0.846284       148.625       149.471    
   2  0.693006     -0.366716      -1.11015       1.11015       149.818       150.929    
   3  0.647780     -0.434203      -1.31445       1.31445       149.126       150.440    
   4  0.895769     -0.110072     -0.333219      0.333219       150.072       150.405    
   5  0.775956     -0.253659     -0.767895      0.767895       150.154       150.922    
   6  0.891264     -0.115114     -0.348482      0.348482       151.177       151.526    
   7  0.553736     -0.591068      -1.78932       1.78932       152.119       153.909    
   8  0.646797     -0.435723      -1.31905       1.31905       149.772       151.091    
   9  0.646048     -0.436881      -1.32256       1.32256       150.797       152.120    
  10  0.160937      -1.82675      -5.53006       5.53006       151.062       156.592    
  11  0.840732     -0.173482     -0.525177      0.525177       152.198       152.723    
  12  0.377447     -0.974325      -2.94955       2.94955       152.374       155.323    
  13  0.214649      -1.53875      -4.65822       4.65822       151.784       156.442    
  14  0.424093     -0.857804      -2.59681       2.59681       152.325       154.922    
  15  0.693510     -0.365990      -1.10795       1.10795       152.717       153.825    
  16  0.252894      -1.37478      -4.16185       4.16185       150.503       154.664    
  17  0.765441     -0.267303     -0.809200      0.809200       152.040       152.849    
  18  0.481029     -0.731828      -2.21544       2.21544       153.409       155.625    
  19  0.211808      -1.55207      -4.69855       4.69855       153.309       158.008    
  20  0.616599E-01  -2.78612      -8.43435       8.43435       153.535       161.969    
  21  0.110259      -2.20492      -6.67490       6.67490       152.866       159.541    
  22  0.475319     -0.743769      -2.25159       2.25159       152.640       154.892    
  23  0.500411E-01  -2.99491      -9.06641       9.06641       152.254       161.321    
  24  0.126445      -2.06795      -6.26024       6.26024       152.720       158.981    
  25  0.693760     -0.365629      -1.10686       1.10686       151.846       152.953    
  26  0.876607E-01  -2.43428      -7.36924       7.36924       152.603       159.973    
  27  0.564718     -0.571429      -1.72987       1.72987       152.976       154.706    
  28  0.572706     -0.557383      -1.68735       1.68735       149.129       150.817    
  29  0.739618     -0.301621     -0.913091      0.913091       152.477       153.390    
  30  0.428028     -0.848566      -2.56884       2.56884       151.692       154.261    
  31  0.864224     -0.145923     -0.441749      0.441749       153.757       154.199    
  32  0.326884      -1.11815      -3.38495       3.38495       150.890       154.275    
  33  0.626295     -0.467933      -1.41656       1.41656       151.679       153.095    
  34  0.576680     -0.550467      -1.66642       1.66642       153.419       155.086    
  35  0.988375     -0.116929E-01 -0.353977E-01  0.353977E-01   154.189       154.225    
  36  0.834431     -0.181006     -0.547954      0.547954       154.726       155.274    
  37  0.944839     -0.567403E-01 -0.171768      0.171768       155.109       155.280    
  38  0.182182      -1.70275      -5.15469       5.15469       152.390       157.545    
  39  0.882984     -0.124449     -0.376740      0.376740       154.187       154.564    
  40  0.756839     -0.278604     -0.843412      0.843412       150.497       151.341    
  41  0.530350     -0.634218      -1.91995       1.91995       151.313       153.233    
  42  0.257866      -1.35531      -4.10290       4.10290       155.551       159.654    
  43  0.575794     -0.552006      -1.67107       1.67107       153.169       154.840    
  44  0.907029     -0.975811E-01 -0.295405      0.295405       155.803       156.099    
  45  0.385513     -0.953180      -2.88554       2.88554       150.157       153.043    
  46  0.352081      -1.04389      -3.16015       3.16015       149.281       152.441    
  47  0.587153     -0.532470      -1.61193       1.61193       154.646       156.257    
  48  0.748916     -0.289129     -0.875273      0.875273       156.578       157.453    
  49  0.152024      -1.88371      -5.70252       5.70252       156.420       162.122    
  50  0.501193     -0.690765      -2.09113       2.09113       155.841       157.932    
  51  0.743551     -0.296318     -0.897034      0.897034       157.065       157.962    
  52  0.336569      -1.08895      -3.29656       3.29656       150.536       153.833    
  53  0.523746     -0.646748      -1.95788       1.95788       155.207       157.165    
  54  0.471323     -0.752211      -2.27715       2.27715       154.957       157.234    
  55  0.131680E-01  -4.32996      -13.1080       13.1080       153.572       166.680    
  56  0.410982     -0.889205      -2.69187       2.69187       153.690       156.382    
  57  0.476445E-01  -3.04399      -9.21499       9.21499       158.361       167.576    
  58  0.734680     -0.308321     -0.933371      0.933371       158.526       159.459    
  59  0.426979     -0.851021      -2.57627       2.57627       156.387       158.963    
  60  0.196810      -1.62552      -4.92089       4.92089       151.560       156.481    
  61  0.317540      -1.14715      -3.47274       3.47274       158.180       161.652    
  62  0.616579     -0.483568      -1.46389       1.46389       155.270       156.734    
  63  0.828245     -0.188447     -0.570479      0.570479       153.051       153.621    
  64  0.996165     -0.384219E-02 -0.116314E-01  0.116314E-01   158.663       158.674    
  65  0.804642     -0.217357     -0.658000      0.658000       158.046       158.704    
  66  0.407370     -0.898034      -2.71860       2.71860       155.132       157.850    
  67  0.192241      -1.64900      -4.99199       4.99199       158.917       163.909    
  68  0.393311     -0.933154      -2.82491       2.82491       155.776       158.601    
  69  0.393016     -0.933905      -2.82718       2.82718       155.176       158.003    
  70  0.593931     -0.520992      -1.57719       1.57719       157.688       159.266    
  71  0.307970      -1.17775      -3.56538       3.56538       158.490       162.055    
  72  0.858655E-02  -4.75756      -14.4024       14.4024       158.974       173.376    
  73  0.430345     -0.843167      -2.55250       2.55250       156.660       159.212    
  74  0.365091      -1.00761      -3.05030       3.05030       154.062       157.112    
  75  0.789215     -0.236716     -0.716605      0.716605       151.337       152.054    
loop,thermsimp(1:2)       25  0.846284       1.11015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    444        149.27          0.84          1.14         25.26          0.38          0.06         27.68
Just calling func    0   0         27.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    445        174.85          0.86          1.15         25.22          0.45          0.06         27.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       25
neval is:      444
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       26
neval is:      444


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      444     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -2.69992       2.69992       148.625       151.325    
   2  0.389332     -0.943323      -2.85570       2.85570       150.072       152.927    
   3  0.765657     -0.267021     -0.808346      0.808346       149.126       149.934    
   4  0.505025     -0.683148      -2.06808       2.06808       149.129       151.198    
   5  0.681598     -0.383316      -1.16040       1.16040       150.154       151.314    
   6  0.895525     -0.110345     -0.334044      0.334044       149.818       150.152    
   7  0.540074     -0.616050      -1.86495       1.86495       149.772       151.637    
   8  0.125370      -2.07648      -6.28608       6.28608       150.497       156.783    
   9  0.306095      -1.18386      -3.58387       3.58387       151.177       154.761    
  10  0.898677     -0.106831     -0.323408      0.323408       151.337       151.661    
  11  0.355276      -1.03486      -3.13281       3.13281       150.797       153.930    
  12  0.855641     -0.155905     -0.471966      0.471966       149.281       149.753    
  13  0.894333E-01  -2.41426      -7.30863       7.30863       152.198       159.507    
  14  0.291038      -1.23430      -3.73657       3.73657       152.040       155.777    
  15  0.848476E-01  -2.46690      -7.46798       7.46798       151.846       159.314    
  16  0.655469     -0.422404      -1.27873       1.27873       150.157       151.436    
  17  0.181028      -1.70910      -5.17392       5.17392       151.679       156.853    
  18  0.801189     -0.221659     -0.671022      0.671022       151.313       151.984    
  19  0.659702     -0.415967      -1.25925       1.25925       152.477       153.736    
  20  0.500397     -0.692354      -2.09594       2.09594       153.051       155.147    
  21  0.901964     -0.103181     -0.312357      0.312357       152.717       153.030    
  22  0.331186      -1.10508      -3.34536       3.34536       150.536       153.881    
  23  0.572805E-01  -2.85979      -8.65738       8.65738       152.119       160.777    
  24  0.511624     -0.670164      -2.02877       2.02877       153.757       155.786    
  25  0.953295     -0.478312E-01 -0.144798      0.144798       154.189       154.334    
  26  0.454382     -0.788818      -2.38797       2.38797       151.692       154.080    
  27  0.697217E-01  -2.66324      -8.06237       8.06237       150.890       158.952    
  28  0.269239      -1.31216      -3.97226       3.97226       154.187       158.159    
  29  0.855725     -0.155806     -0.471668      0.471668       150.503       150.974    
  30  0.408332E-02  -5.50085      -16.6526       16.6526       152.976       169.629    
  31  0.926366     -0.764862E-01 -0.231545      0.231545       153.169       153.400    
  32  0.356547      -1.03129      -3.12199       3.12199       152.640       155.762    
  33  0.550351     -0.597200      -1.80789       1.80789       152.325       154.133    
  34  0.475063     -0.744308      -2.25322       2.25322       153.419       155.672    
  35  0.420107     -0.867246      -2.62539       2.62539       154.726       157.352    
  36  0.521034     -0.651939      -1.97360       1.97360       155.109       157.082    
  37  0.979034     -0.211889E-01 -0.641446E-01  0.641446E-01   152.374       152.438    
  38  0.599858     -0.511062      -1.54712       1.54712       153.409       154.957    
  39  0.800850     -0.222082     -0.672302      0.672302       155.803       156.476    
  40  0.823189     -0.194570     -0.589016      0.589016       154.646       155.235    
  41  0.709226E-01  -2.64617      -8.01067       8.01067       153.690       161.701    
  42  0.555654     -0.587609      -1.77885       1.77885       151.784       153.563    
  43  0.920379     -0.829696E-01 -0.251172      0.251172       151.560       151.811    
  44  0.904537     -0.100332     -0.303732      0.303732       151.062       151.366    
  45  0.990568     -0.947695E-02 -0.286893E-01  0.286893E-01   155.270       155.298    
  46  0.647203     -0.435096      -1.31715       1.31715       154.062       155.379    
  47  0.634714     -0.454580      -1.37614       1.37614       155.207       156.583    
  48  0.771196     -0.259812     -0.786523      0.786523       154.957       155.743    
  49  0.857464     -0.153776     -0.465523      0.465523       156.578       157.043    
  50  0.816462     -0.202774     -0.613854      0.613854       152.390       153.004    
  51  0.233603      -1.45413      -4.40205       4.40205       155.132       159.534    
  52  0.554523     -0.589647      -1.78502       1.78502       155.841       157.626    
  53  0.217770      -1.52432      -4.61452       4.61452       157.065       161.679    
  54  0.795785     -0.228426     -0.691507      0.691507       155.176       155.867    
  55  0.458481     -0.779836      -2.36078       2.36078       153.309       155.670    
  56  0.725204     -0.321302     -0.972668      0.972668       155.776       156.748    
  57  0.962495     -0.382260E-01 -0.115720      0.115720       158.663       158.778    
  58  0.652668     -0.426687      -1.29170       1.29170       158.046       159.338    
  59  0.562055     -0.576156      -1.74418       1.74418       156.387       158.131    
  60  0.620063     -0.477935      -1.44684       1.44684       152.720       154.167    
  61  0.487741     -0.717971      -2.17349       2.17349       156.660       158.833    
  62  0.561234     -0.577617      -1.74861       1.74861       157.688       159.437    
  63  0.758662     -0.276198     -0.836128      0.836128       158.526       159.362    
  64  0.144869      -1.93192      -5.84846       5.84846       152.866       158.714    
  65  0.572142     -0.558368      -1.69033       1.69033       155.551       157.241    
  66  0.105888      -2.24537      -6.79736       6.79736       152.603       159.401    
  67  0.469880     -0.755279      -2.28643       2.28643       152.254       154.541    
  68  0.268533      -1.31478      -3.98020       3.98020       158.180       162.160    
  69  0.807102     -0.214305     -0.648761      0.648761       153.535       154.183    
  70  0.522324     -0.649467      -1.96611       1.96611       158.490       160.456    
  71  0.732040     -0.311921     -0.944269      0.944269       156.420       157.364    
  72  0.136731      -1.98974      -6.02348       6.02348       158.917       164.940    
  73  0.230040E-01  -3.77209      -11.4191       11.4191       153.572       164.991    
  74  0.928666     -0.740060E-01 -0.224036      0.224036       158.361       158.585    
  75  0.296345      -1.21623      -3.68187       3.68187       149.272       152.954    
loop,thermsimp(1:2)       26   2.69992       2.85570    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    446        152.50          0.87          1.14         25.22          0.12          0.06         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    152.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       26
neval is:      445
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       27
neval is:      445


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      445
neval,tstepnext:      445     445

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -2.22938       2.22938       149.281       151.510    
   2  0.431280     -0.840999      -2.54593       2.54593       149.126       151.671    
   3  0.231120      -1.46482      -4.43441       4.43441       149.818       154.253    
   4  0.306155      -1.18366      -3.58327       3.58327       150.503       154.086    
   5  0.514107     -0.665324      -2.01412       2.01412       149.129       151.144    
   6  0.784944E-01  -2.54473      -7.70359       7.70359       150.154       157.857    
   7  0.767893     -0.264105     -0.799518      0.799518       148.625       149.425    
   8  0.240450E-02  -6.03041      -18.2557       18.2557       151.062       169.318    
   9  0.185505      -1.68467      -5.09996       5.09996       150.157       155.257    
  10  0.405909     -0.901627      -2.72947       2.72947       149.772       152.502    
  11  0.681143     -0.383983      -1.16242       1.16242       151.337       152.500    
  12  0.529175     -0.636436      -1.92667       1.92667       151.560       153.487    
  13  0.873060     -0.135751     -0.410956      0.410956       151.313       151.724    
  14  0.457661     -0.781625      -2.36619       2.36619       152.374       154.740    
  15  0.564230     -0.572293      -1.73249       1.73249       150.072       151.804    
  16  0.949800     -0.515039E-01 -0.155916      0.155916       149.272       149.428    
  17  0.581003E-01  -2.84558      -8.61436       8.61436       152.390       161.005    
  18  0.180069      -1.71442      -5.19001       5.19001       152.717       157.907    
  19  0.222412      -1.50322      -4.55066       4.55066       153.169       157.719    
  20  0.821703     -0.196377     -0.594486      0.594486       151.784       152.378    
  21  0.948363     -0.530176E-01 -0.160499      0.160499       152.477       152.638    
  22  0.796186     -0.227922     -0.689982      0.689982       150.536       151.226    
  23  0.881546     -0.126078     -0.381672      0.381672       150.797       151.179    
  24  0.702001     -0.353821      -1.07111       1.07111       151.692       152.763    
  25  0.878483     -0.129559     -0.392211      0.392211       152.325       152.717    
  26  0.158251      -1.84358      -5.58101       5.58101       152.720       158.301    
  27  0.759310E-02  -4.88052      -14.7747       14.7747       153.535       168.309    
  28  0.549090     -0.599492      -1.81483       1.81483       154.189       156.004    
  29  0.294083      -1.22389      -3.70506       3.70506       152.254       155.960    
  30  0.358851      -1.02485      -3.10249       3.10249       151.177       154.280    
  31  0.591031E-01  -2.82847      -8.56256       8.56256       153.409       161.972    
  32  0.413139     -0.883972      -2.67603       2.67603       153.051       155.727    
  33  0.564800     -0.571284      -1.72943       1.72943       154.646       156.375    
  34  0.472034     -0.750704      -2.27259       2.27259       155.270       157.542    
  35  0.270343      -1.30806      -3.95986       3.95986       154.062       158.022    
  36  0.704266     -0.350600      -1.06136       1.06136       153.309       154.371    
  37  0.317895E-01  -3.44862      -10.4399       10.4399       153.419       163.859    
  38  0.489641     -0.714083      -2.16173       2.16173       154.957       157.118    
  39  0.558309     -0.582843      -1.76443       1.76443       152.640       154.405    
  40  0.239099      -1.43088      -4.33165       4.33165       152.040       156.372    
  41  0.387399     -0.948301      -2.87077       2.87077       153.757       156.628    
  42  0.434686     -0.833131      -2.52211       2.52211       155.176       157.698    
  43  0.713921     -0.336983      -1.02014       1.02014       155.803       156.824    
  44  0.655374     -0.422550      -1.27917       1.27917       155.207       156.486    
  45  0.739749     -0.301444     -0.912554      0.912554       155.776       156.688    
  46  0.758411     -0.276530     -0.837131      0.837131       150.497       151.334    
  47  0.750796     -0.286621     -0.867680      0.867680       151.679       152.546    
  48  0.557150E-01  -2.88751      -8.74127       8.74127       156.578       165.319    
  49  0.438885     -0.823518      -2.49301       2.49301       155.109       157.602    
  50  0.384409     -0.956048      -2.89422       2.89422       155.551       158.445    
  51  0.163955E-01  -4.11075      -12.4444       12.4444       154.726       167.171    
  52  0.493958     -0.705305      -2.13515       2.13515       156.420       158.555    
  53  0.654549     -0.423809      -1.28299       1.28299       155.841       157.124    
  54  0.779913     -0.248573     -0.752498      0.752498       156.387       157.140    
  55  0.173265      -1.75293      -5.30660       5.30660       154.187       159.494    
  56  0.179445      -1.71789      -5.20051       5.20051       158.361       163.562    
  57  0.278651      -1.27780      -3.86824       3.86824       152.866       156.734    
  58  0.413230E-01  -3.18634      -9.64591       9.64591       158.663       168.308    
  59  0.406979     -0.898993      -2.72150       2.72150       156.660       159.381    
  60  0.860177     -0.150617     -0.455958      0.455958       150.890       151.346    
  61  0.199311      -1.61289      -4.88265       4.88265       151.846       156.729    
  62  0.896296     -0.109485     -0.331441      0.331441       158.046       158.378    
  63  0.893483E-01  -2.41521      -7.31151       7.31151       158.526       165.837    
  64  0.456564     -0.784026      -2.37346       2.37346       152.603       154.977    
  65  0.382288     -0.961582      -2.91097       2.91097       157.688       160.599    
  66  0.840946     -0.173227     -0.524407      0.524407       152.198       152.723    
  67  0.853937     -0.157898     -0.478000      0.478000       155.132       155.610    
  68  0.684923     -0.378448      -1.14567       1.14567       158.490       159.636    
  69  0.744622     -0.294878     -0.892677      0.892677       152.119       153.012    
  70  0.535942     -0.623729      -1.88820       1.88820       157.065       158.953    
  71  0.730934     -0.313432     -0.948843      0.948843       153.690       154.639    
  72  0.303021      -1.19395      -3.61442       3.61442       158.180       161.794    
  73  0.638654     -0.448392      -1.35741       1.35741       158.917       160.274    
  74  0.218314      -1.52182      -4.60696       4.60696       153.572       158.179    
  75  0.958955     -0.419107E-01 -0.126875      0.126875       152.501       152.628    
loop,thermsimp(1:2)       27   2.22938       2.54593    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    447        154.89          0.87          1.15         25.18          0.12          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.02727               445
loop is:       27
neval is:      446
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    3.02727               445
loop is:       28
neval is:      446


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.51364               519

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      446     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -1.45433       1.45433       148.625       150.080    
   2  0.718155     -0.331070     -0.501120      0.501120       149.272       149.773    
   3  0.581515     -0.542118     -0.820569      0.820569       149.129       149.950    
   4  0.230175E-01  -3.77150      -5.70868       5.70868       150.797       156.506    
   5  0.506601     -0.680031      -1.02932       1.02932       150.536       151.565    
   6  0.209297      -1.56400      -2.36733       2.36733       150.497       152.864    
   7  0.757725     -0.277434     -0.419935      0.419935       150.890       151.310    
   8  0.230972      -1.46546      -2.21817       2.21817       149.281       151.499    
   9  0.495080     -0.703037      -1.06414       1.06414       149.126       150.190    
  10  0.947190     -0.542553E-01 -0.821228E-01  0.821228E-01   151.313       151.395    
  11  0.977432     -0.228269E-01 -0.345516E-01  0.345516E-01   150.072       150.106    
  12  0.320616      -1.13751      -1.72178       1.72178       151.784       153.506    
  13  0.252125      -1.37783      -2.08553       2.08553       151.337       153.423    
  14  0.871535     -0.137499     -0.208124      0.208124       149.772       149.980    
  15  0.856468E-02  -4.76011      -7.20507       7.20507       151.679       158.884    
  16  0.352534      -1.04261      -1.57813       1.57813       152.501       154.079    
  17  0.750419     -0.287124     -0.434602      0.434602       152.477       152.912    
  18  0.215691      -1.53391      -2.32178       2.32178       152.325       154.647    
  19  0.833929     -0.181606     -0.274886      0.274886       152.198       152.473    
  20  0.714656E-01  -2.63854      -3.99379       3.99379       151.692       155.686    
  21  0.758349     -0.276612     -0.418690      0.418690       152.119       152.538    
  22  0.571963     -0.558680     -0.845639      0.845639       151.560       152.406    
  23  0.472398     -0.749934      -1.13513       1.13513       150.503       151.638    
  24  0.606854     -0.499467     -0.756012      0.756012       149.818       150.574    
  25  0.247109      -1.39793      -2.11595       2.11595       151.177       153.293    
  26  0.581778     -0.541666     -0.819886      0.819886       153.309       154.129    
  27  0.455447     -0.786476      -1.19044       1.19044       152.640       153.831    
  28  0.606617     -0.499857     -0.756602      0.756602       153.690       154.447    
  29  0.620033     -0.477983     -0.723492      0.723492       152.374       153.097    
  30  0.367527      -1.00096      -1.51509       1.51509       152.603       154.119    
  31  0.611260     -0.492233     -0.745062      0.745062       150.157       150.902    
  32  0.310332      -1.17011      -1.77112       1.77112       155.132       156.903    
  33  0.611387     -0.492025     -0.744748      0.744748       153.051       153.795    
  34  0.584386     -0.537193     -0.813115      0.813115       152.254       153.068    
  35  0.950350     -0.509246E-01 -0.770813E-01  0.770813E-01   154.189       154.266    
  36  0.228570      -1.47591      -2.23400       2.23400       152.040       154.274    
  37  0.879867     -0.127985     -0.193722      0.193722       154.646       154.839    
  38  0.390808E-01  -3.24212      -4.90740       4.90740       155.207       160.115    
  39  0.104244      -2.26102      -3.42236       3.42236       153.757       157.180    
  40  0.922634     -0.805225E-01 -0.121882      0.121882       155.776       155.898    
  41  0.559015     -0.581578     -0.880298      0.880298       151.846       152.726    
  42  0.809074     -0.211865     -0.320687      0.320687       152.866       153.187    
  43  0.840951     -0.173222     -0.262195      0.262195       155.803       156.066    
  44  0.384796     -0.955043      -1.44559       1.44559       154.957       156.402    
  45  0.471744     -0.751318      -1.13722       1.13722       155.841       156.978    
  46  0.750950     -0.286417     -0.433531      0.433531       156.387       156.821    
  47  0.197617      -1.62143      -2.45425       2.45425       155.270       157.724    
  48  0.405005     -0.903855      -1.36811       1.36811       155.109       156.477    
  49  0.526481     -0.641540     -0.971059      0.971059       155.176       156.147    
  50  0.808042     -0.213142     -0.322619      0.322619       153.169       153.491    
  51  0.315225      -1.15447      -1.74745       1.74745       150.154       151.901    
  52  0.233772      -1.45341      -2.19993       2.19993       152.717       154.917    
  53  0.455864E-01  -3.08815      -4.67433       4.67433       154.062       158.736    
  54  0.748722     -0.289387     -0.438027      0.438027       153.572       154.010    
  55  0.237196E-01  -3.74145      -5.66320       5.66320       152.720       158.384    
  56  0.881679     -0.125927     -0.190608      0.190608       158.046       158.237    
  57  0.395054     -0.928733      -1.40576       1.40576       155.551       156.957    
  58  0.725060     -0.321501     -0.486635      0.486635       156.420       156.906    
  59  0.698840     -0.358333     -0.542387      0.542387       157.065       157.607    
  60  0.508334     -0.676617      -1.02415       1.02415       156.660       157.684    
  61  0.944269E-01  -2.35993      -3.57208       3.57208       154.187       157.759    
  62  0.604101     -0.504014     -0.762894      0.762894       158.490       159.253    
  63  0.662995     -0.410988     -0.622086      0.622086       158.917       159.539    
  64  0.715954     -0.334139     -0.505765      0.505765       157.688       158.194    
  65  0.528742     -0.637255     -0.964572      0.964572       152.390       153.355    
  66  0.971881     -0.285216E-01 -0.431713E-01  0.431713E-01   158.180       158.223    
  67  0.744068     -0.295622     -0.447465      0.447465       153.409       153.857    
  68  0.606637     -0.499824     -0.756552      0.756552       158.361       159.118    
  69  0.895363     -0.110526     -0.167296      0.167296       153.419       153.587    
  70  0.564713     -0.571438     -0.864949      0.864949       156.578       157.443    
  71  0.895199     -0.110709     -0.167574      0.167574       158.526       158.693    
  72  0.373078     -0.985968      -1.49240       1.49240       154.726       156.219    
  73  0.107160      -2.23343      -3.38061       3.38061       158.663       162.043    
  74  0.477028     -0.740179      -1.12036       1.12036       153.535       154.655    
  75  0.289530      -1.23949      -1.87614       1.87614       154.894       156.770    
loop,thermsimp(1:2)       28   1.45433      0.501120    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    448        151.27          0.87          1.12         25.18          0.25          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       28
neval is:      447
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       29
neval is:      447


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      447     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223     -0.846460      0.846460       149.272       150.119    
   2  0.243540      -1.41247      -2.13797       2.13797       149.129       151.267    
   3  0.374772     -0.981437      -1.48554       1.48554       149.772       151.258    
   4  0.700054     -0.356598     -0.539760      0.539760       148.625       149.165    
   5  0.301581      -1.19872      -1.81442       1.81442       150.072       151.886    
   6  0.531818     -0.631454     -0.955791      0.955791       149.126       150.081    
   7  0.185013      -1.68733      -2.55401       2.55401       149.818       152.372    
   8  0.107050      -2.23446      -3.38216       3.38216       150.157       153.539    
   9  0.979566     -0.206453E-01 -0.312494E-01  0.312494E-01   150.890       150.921    
  10  0.706074     -0.348035     -0.526799      0.526799       151.313       151.839    
  11  0.112110      -2.18827      -3.31225       3.31225       149.281       152.593    
  12  0.212442      -1.54908      -2.34475       2.34475       150.536       152.881    
  13  0.625740     -0.468820     -0.709624      0.709624       150.503       151.212    
  14  0.265918      -1.32457      -2.00491       2.00491       150.154       152.159    
  15  0.369004     -0.996947      -1.50902       1.50902       151.560       153.069    
  16  0.531799     -0.631491     -0.955847      0.955847       152.198       153.154    
  17  0.227318      -1.48140      -2.24231       2.24231       152.119       154.362    
  18  0.512871     -0.667732      -1.01070       1.01070       151.846       152.857    
  19  0.394785     -0.929415      -1.40680       1.40680       150.497       151.904    
  20  0.720084     -0.328388     -0.497060      0.497060       152.477       152.974    
  21  0.185505      -1.68467      -2.54998       2.54998       152.254       154.804    
  22  0.658242     -0.418183     -0.632978      0.632978       152.374       153.007    
  23  0.888593     -0.118116     -0.178785      0.178785       152.866       153.045    
  24  0.773453     -0.256890     -0.388838      0.388838       151.177       151.566    
  25  0.594480E-01  -2.82265      -4.27247       4.27247       152.390       156.663    
  26  0.112908      -2.18118      -3.30152       3.30152       151.337       154.639    
  27  0.940300     -0.615559E-01 -0.931732E-01  0.931732E-01   153.169       153.262    
  28  0.990261     -0.978663E-02 -0.148134E-01  0.148134E-01   151.784       151.799    
  29  0.686451     -0.376220     -0.569460      0.569460       153.419       153.989    
  30  0.558815     -0.581936     -0.880840      0.880840       153.051       153.931    
  31  0.574196     -0.554784     -0.839742      0.839742       152.640       153.480    
  32  0.678960     -0.387193     -0.586069      0.586069       153.409       153.996    
  33  0.306232      -1.18341      -1.79126       1.79126       153.572       155.364    
  34  0.969485     -0.309907E-01 -0.469086E-01  0.469086E-01   152.501       152.548    
  35  0.520627     -0.652722     -0.987984      0.987984       152.603       153.591    
  36  0.870581     -0.138594     -0.209781      0.209781       153.309       153.519    
  37  0.127650      -2.05846      -3.11576       3.11576       154.189       157.305    
  38  0.276190      -1.28667      -1.94754       1.94754       152.040       153.988    
  39  0.842544     -0.171330     -0.259331      0.259331       153.690       153.950    
  40  0.336933      -1.08787      -1.64664       1.64664       152.325       153.972    
  41  0.685284     -0.377921     -0.572036      0.572036       153.535       154.107    
  42  0.555142     -0.588531     -0.890822      0.890822       154.646       155.536    
  43  0.857048     -0.154261     -0.233495      0.233495       152.717       152.951    
  44  0.612111E-01  -2.79343      -4.22823       4.22823       151.692       155.920    
  45  0.672500     -0.396753     -0.600540      0.600540       155.776       156.376    
  46  0.820423E-01  -2.50052      -3.78488       3.78488       155.803       159.588    
  47  0.546679     -0.603893     -0.914075      0.914075       155.176       156.090    
  48  0.624723     -0.470446     -0.712085      0.712085       154.726       155.438    
  49  0.906365     -0.983128E-01 -0.148810      0.148810       154.957       155.105    
  50  0.807763     -0.213487     -0.323141      0.323141       155.109       155.432    
  51  0.347580      -1.05676      -1.59955       1.59955       150.797       152.397    
  52  0.233390      -1.45504      -2.20241       2.20241       154.894       157.096    
  53  0.265609      -1.32573      -2.00667       2.00667       156.387       158.394    
  54  0.277652      -1.28139      -1.93955       1.93955       155.132       157.071    
  55  0.836033     -0.179087     -0.271072      0.271072       156.420       156.691    
  56  0.170063      -1.77159      -2.68154       2.68154       155.551       158.232    
  57  0.798928     -0.224485     -0.339789      0.339789       155.841       156.181    
  58  0.707521E-01  -2.64857      -4.00898       4.00898       153.757       157.766    
  59  0.699192     -0.357830     -0.541625      0.541625       156.578       157.119    
  60  0.190598      -1.65759      -2.50899       2.50899       157.065       159.574    
  61  0.932984     -0.693669E-01 -0.104996      0.104996       156.660       156.765    
  62  0.626920     -0.466936     -0.706771      0.706771       155.270       155.977    
  63  0.849515     -0.163090     -0.246859      0.246859       154.187       154.434    
  64  0.405877     -0.901705      -1.36485       1.36485       157.688       159.053    
  65  0.375531     -0.979415      -1.48248       1.48248       158.180       159.662    
  66  0.726552     -0.319445     -0.483524      0.483524       158.046       158.530    
  67  0.964302     -0.363506E-01 -0.550216E-01  0.550216E-01   152.720       152.775    
  68  0.371995     -0.988875      -1.49680       1.49680       158.526       160.022    
  69  0.553003     -0.592392     -0.896667      0.896667       154.062       154.958    
  70  0.562065     -0.576138     -0.872063      0.872063       151.679       152.551    
  71  0.961597     -0.391593E-01 -0.592730E-01  0.592730E-01   158.361       158.420    
  72  0.544063     -0.608691     -0.921337      0.921337       158.490       159.411    
  73  0.811560     -0.208797     -0.316043      0.316043       158.917       159.233    
  74  0.366600      -1.00348      -1.51891       1.51891       155.207       156.726    
  75  0.645856     -0.437179     -0.661730      0.661730       151.274       151.936    
loop,thermsimp(1:2)       29  0.846460       2.13797    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    449        148.85          0.86          1.15         25.22          0.13          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    450        156.19          0.86          1.15         25.28          0.15          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       29
neval is:      449
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       30
neval is:      449


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      449     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -2.30221       2.30221       148.625       150.927    
   2  0.142120      -1.95108      -2.95323       2.95323       149.126       152.079    
   3  0.240947      -1.42318      -2.15417       2.15417       149.272       151.427    
   4  0.622235     -0.474438     -0.718127      0.718127       150.890       151.608    
   5  0.167679      -1.78570      -2.70290       2.70290       150.503       153.205    
   6  0.712985E-01  -2.64088      -3.99733       3.99733       149.772       153.770    
   7  0.861645E-02  -4.75408      -7.19595       7.19595       149.129       156.325    
   8  0.820106     -0.198321     -0.300187      0.300187       151.177       151.477    
   9  0.882469     -0.125032     -0.189252      0.189252       151.784       151.973    
  10  0.530124     -0.634644     -0.960621      0.960621       151.313       152.273    
  11  0.920027E-01  -2.38594      -3.61144       3.61144       150.072       153.683    
  12  0.669458     -0.401287     -0.607402      0.607402       150.497       151.105    
  13  0.348419      -1.05435      -1.59590       1.59590       151.274       152.870    
  14  0.979616     -0.205944E-01 -0.311725E-01  0.311725E-01   150.154       150.185    
  15  0.661083     -0.413875     -0.626457      0.626457       149.818       150.445    
  16  0.535120     -0.625265     -0.946424      0.946424       150.797       151.743    
  17  0.929679E-01  -2.37550      -3.59565       3.59565       152.501       156.097    
  18  0.580221     -0.544346     -0.823942      0.823942       151.679       152.503    
  19  0.652449     -0.427023     -0.646357      0.646357       149.281       149.927    
  20  0.252328      -1.37703      -2.08432       2.08432       152.720       154.805    
  21  0.364859      -1.00824      -1.52612       1.52612       151.846       153.372    
  22  0.205873      -1.58049      -2.39229       2.39229       150.536       152.928    
  23  0.404183E-01  -3.20847      -4.85646       4.85646       152.717       157.574    
  24  0.922242     -0.809474E-01 -0.122525      0.122525       152.477       152.600    
  25  0.164359      -1.80570      -2.73317       2.73317       152.374       155.107    
  26  0.606051     -0.500791     -0.758016      0.758016       152.866       153.624    
  27  0.461849E-01  -3.07510      -4.65459       4.65459       151.560       156.215    
  28  0.761223     -0.272829     -0.412964      0.412964       152.198       152.611    
  29  0.170682      -1.76796      -2.67604       2.67604       153.169       155.845    
  30  0.501713     -0.689726      -1.04399       1.04399       152.640       153.684    
  31  0.892390E-01  -2.41644      -3.65761       3.65761       153.309       156.967    
  32  0.281632E-01  -3.56974      -5.40329       5.40329       150.157       155.561    
  33  0.664381     -0.408899     -0.618925      0.618925       152.603       153.222    
  34  0.124936      -2.07995      -3.14830       3.14830       153.051       156.199    
  35  0.623262     -0.472788     -0.715630      0.715630       153.690       154.406    
  36  0.876206     -0.132154     -0.200033      0.200033       152.325       152.525    
  37  0.744183     -0.295469     -0.447232      0.447232       152.040       152.487    
  38  0.251914      -1.37867      -2.08680       2.08680       153.419       155.506    
  39  0.391818     -0.936959      -1.41822       1.41822       153.409       154.828    
  40  0.131094      -2.03184      -3.07547       3.07547       153.535       156.610    
  41  0.887574     -0.119263     -0.180521      0.180521       152.119       152.300    
  42  0.682509     -0.381980     -0.578178      0.578178       154.187       154.765    
  43  0.184805      -1.68846      -2.55571       2.55571       151.337       153.893    
  44  0.258729      -1.35197      -2.04640       2.04640       152.254       154.301    
  45  0.275506      -1.28915      -1.95130       1.95130       154.062       156.013    
  46  0.718710     -0.330297     -0.499950      0.499950       154.957       155.456    
  47  0.445066     -0.809533      -1.22534       1.22534       153.572       154.798    
  48  0.772965     -0.257522     -0.389795      0.389795       155.109       155.498    
  49  0.992595     -0.743255E-02 -0.112502E-01  0.112502E-01   154.726       154.738    
  50  0.847655E-01  -2.46787      -3.73545       3.73545       154.646       158.381    
  51  0.805100E-01  -2.51937      -3.81342       3.81342       151.692       155.506    
  52  0.218783      -1.51968      -2.30024       2.30024       155.270       157.570    
  53  0.177967      -1.72616      -2.61277       2.61277       155.176       157.788    
  54  0.435468E-02  -5.43650      -8.22889       8.22889       155.841       164.070    
  55  0.189855      -1.66150      -2.51490       2.51490       155.776       158.291    
  56  0.483774     -0.726137      -1.09911       1.09911       152.390       153.489    
  57  0.407968     -0.896566      -1.35707       1.35707       156.420       157.777    
  58  0.895063     -0.110861     -0.167804      0.167804       155.207       155.375    
  59  0.160465      -1.82968      -2.76947       2.76947       156.660       159.429    
  60  0.557179     -0.584868     -0.885278      0.885278       155.132       156.017    
  61  0.992824     -0.720237E-02 -0.109018E-01  0.109018E-01   154.894       154.905    
  62  0.757533     -0.277689     -0.420320      0.420320       156.578       156.998    
  63  0.707064     -0.346634     -0.524677      0.524677       154.189       154.714    
  64  0.940151     -0.617150E-01 -0.934141E-01  0.934141E-01   153.757       153.851    
  65  0.777188     -0.252074     -0.381548      0.381548       155.551       155.932    
  66  0.427529     -0.849732      -1.28619       1.28619       156.387       157.673    
  67  0.178910      -1.72087      -2.60477       2.60477       158.361       160.966    
  68  0.630789     -0.460784     -0.697460      0.697460       158.046       158.744    
  69  0.612488E-01  -2.79281      -4.22730       4.22730       157.688       161.916    
  70  0.708553     -0.344530     -0.521494      0.521494       158.917       159.438    
  71  0.829919     -0.186427     -0.282183      0.282183       158.490       158.772    
  72  0.829598E-03  -7.09457      -10.7386       10.7386       157.065       167.804    
  73  0.913113     -0.908956E-01 -0.137583      0.137583       155.803       155.941    
  74  0.104590E-01  -4.56029      -6.90263       6.90263       158.180       165.082    
  75  0.782079E-01  -2.54839      -3.85733       3.85733       148.852       152.709    
loop,thermsimp(1:2)       30   2.30221       2.95323    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    451        150.04          0.87          1.15         25.26          0.29          0.05         27.62
Just calling func    0   0         27.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    452        156.09          0.86          1.15         25.28          0.40          0.05         27.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       30
neval is:      451
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       31
neval is:      451


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      451     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -2.59707       2.59707       149.281       151.878    
   2  0.422562     -0.861418      -1.30387       1.30387       150.154       151.457    
   3  0.186245      -1.68069      -2.54396       2.54396       149.818       152.362    
   4  0.567236     -0.566979     -0.858200      0.858200       148.625       149.483    
   5  0.464464E-01  -3.06946      -4.64604       4.64604       150.497       155.143    
   6  0.349374      -1.05161      -1.59176       1.59176       149.272       150.864    
   7  0.336208      -1.09002      -1.64990       1.64990       151.177       152.827    
   8  0.631615     -0.459475     -0.695479      0.695479       150.890       151.585    
   9  0.225630E-01  -3.79144      -5.73887       5.73887       150.797       156.536    
  10  0.221391      -1.50782      -2.28230       2.28230       151.784       154.066    
  11  0.635199     -0.453817     -0.686914      0.686914       149.126       149.812    
  12  0.957727     -0.431923E-01 -0.653774E-01  0.653774E-01   151.313       151.378    
  13  0.284413      -1.25733      -1.90314       1.90314       152.119       154.023    
  14  0.814352     -0.205363     -0.310844      0.310844       152.040       152.351    
  15  0.699052     -0.358030     -0.541928      0.541928       151.679       152.221    
  16  0.145269      -1.92917      -2.92006       2.92006       152.325       155.245    
  17  0.397569     -0.922386      -1.39616       1.39616       152.477       153.873    
  18  0.610583     -0.493342     -0.746740      0.746740       152.198       152.945    
  19  0.737372     -0.304663     -0.461149      0.461149       148.852       149.313    
  20  0.230083      -1.46931      -2.22401       2.22401       151.274       153.498    
  21  0.721698     -0.326149     -0.493671      0.493671       150.536       151.030    
  22  0.469765     -0.755524      -1.14359       1.14359       150.503       151.646    
  23  0.148742      -1.90554      -2.88430       2.88430       152.603       155.488    
  24  0.631872     -0.459069     -0.694864      0.694864       151.846       152.541    
  25  0.456921     -0.783245      -1.18555       1.18555       152.390       153.576    
  26  0.631874E-01  -2.76165      -4.18014       4.18014       152.866       157.046    
  27  0.470948     -0.753008      -1.13978       1.13978       150.072       151.211    
  28  0.313695      -1.15933      -1.75481       1.75481       152.640       154.395    
  29  0.856516     -0.154883     -0.234436      0.234436       149.772       150.007    
  30  0.487159     -0.719166      -1.08856       1.08856       153.757       154.846    
  31  0.383726     -0.957827      -1.44980       1.44980       151.337       152.787    
  32  0.242248      -1.41779      -2.14603       2.14603       152.254       154.401    
  33  0.760305     -0.274035     -0.414789      0.414789       153.690       154.105    
  34  0.524314     -0.645664     -0.977301      0.977301       154.189       155.167    
  35  0.759572     -0.275001     -0.416251      0.416251       154.726       155.143    
  36  0.784019     -0.243322     -0.368301      0.368301       154.187       154.555    
  37  0.430930     -0.841810      -1.27419       1.27419       153.572       154.847    
  38  0.670659     -0.399494     -0.604688      0.604688       152.720       153.325    
  39  0.458005     -0.780876      -1.18196       1.18196       153.409       154.591    
  40  0.413739     -0.882521      -1.33582       1.33582       154.894       156.230    
  41  0.388661     -0.945048      -1.43046       1.43046       152.374       153.804    
  42  0.753750     -0.282694     -0.427896      0.427896       155.207       155.635    
  43  0.505767     -0.681679      -1.03181       1.03181       154.957       155.988    
  44  0.759664     -0.274878     -0.416066      0.416066       155.109       155.525    
  45  0.468968     -0.757221      -1.14616       1.14616       151.692       152.838    
  46  0.740796     -0.300031     -0.454137      0.454137       153.419       153.873    
  47  0.737223     -0.304865     -0.461455      0.461455       150.157       150.619    
  48  0.584325     -0.537298     -0.813273      0.813273       153.169       153.982    
  49  0.850800     -0.161578     -0.244571      0.244571       155.551       155.795    
  50  0.181706      -1.70536      -2.58130       2.58130       155.803       158.385    
  51  0.801855E-01  -2.52341      -3.81953       3.81953       154.062       157.881    
  52  0.989218     -0.108406E-01 -0.164088E-01  0.164088E-01   155.132       155.148    
  53  0.214049      -1.54155      -2.33334       2.33334       152.501       154.834    
  54  0.522539     -0.649055     -0.982434      0.982434       153.051       154.033    
  55  0.964020     -0.366433E-01 -0.554647E-01  0.554647E-01   151.560       151.615    
  56  0.559622     -0.580494     -0.878656      0.878656       149.129       150.008    
  57  0.944229     -0.573866E-01 -0.868624E-01  0.868624E-01   153.535       153.622    
  58  0.212625      -1.54823      -2.34345       2.34345       153.309       155.653    
  59  0.735854     -0.306724     -0.464268      0.464268       156.578       157.042    
  60  0.693280E-01  -2.66891      -4.03975       4.03975       155.270       159.310    
  61  0.208371      -1.56843      -2.37404       2.37404       152.717       155.091    
  62  0.396847     -0.924205      -1.39891       1.39891       156.387       157.786    
  63  0.835639     -0.179558     -0.271786      0.271786       156.420       156.691    
  64  0.527941     -0.638770     -0.966866      0.966866       155.176       156.142    
  65  0.631616     -0.459473     -0.695475      0.695475       155.776       156.471    
  66  0.619534     -0.478788     -0.724712      0.724712       154.646       155.370    
  67  0.712866     -0.338461     -0.512307      0.512307       158.046       158.559    
  68  0.588242     -0.530616     -0.803160      0.803160       158.490       159.293    
  69  0.265742      -1.32523      -2.00592       2.00592       156.660       158.666    
  70  0.191257      -1.65414      -2.50376       2.50376       158.917       161.421    
  71  0.904007     -0.100919     -0.152754      0.152754       158.361       158.514    
  72  0.981469     -0.187047E-01 -0.283122E-01  0.283122E-01   157.688       157.717    
  73  0.848413     -0.164388     -0.248823      0.248823       155.841       156.090    
  74  0.800247E-01  -2.52542      -3.82257       3.82257       158.180       162.002    
  75  0.497397     -0.698367      -1.05707       1.05707       150.039       151.097    
loop,thermsimp(1:2)       31   2.59707       1.30387    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    453        155.64          0.87          1.14         25.24          0.29          0.05         27.59
Just calling func    0   0         27.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    155.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       31
neval is:      452
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       32
neval is:      452


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      452     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -4.32298       4.32298       148.852       153.175    
   2  0.695439     -0.363212     -0.549771      0.549771       148.625       149.175    
   3  0.338668      -1.08273      -1.63887       1.63887       149.126       150.764    
   4  0.494821     -0.703559      -1.06493       1.06493       149.772       150.837    
   5  0.433638E-02  -5.44072      -8.23527       8.23527       149.129       157.365    
   6  0.270974      -1.30573      -1.97641       1.97641       150.157       152.134    
   7  0.926362E-01  -2.37907      -3.60106       3.60106       149.272       152.873    
   8  0.437858     -0.825861      -1.25005       1.25005       150.536       151.786    
   9  0.297746      -1.21151      -1.83379       1.83379       150.039       151.873    
  10  0.948309     -0.530750E-01 -0.803363E-01  0.803363E-01   150.072       150.152    
  11  0.845139     -0.168254     -0.254676      0.254676       151.313       151.567    
  12  0.930128     -0.724325E-01 -0.109637      0.109637       150.154       150.263    
  13  0.921850     -0.813732E-01 -0.123169      0.123169       150.890       151.013    
  14  0.447950     -0.803074      -1.21556       1.21556       151.560       152.775    
  15  0.712740     -0.338638     -0.512575      0.512575       150.503       151.015    
  16  0.574809     -0.553717     -0.838127      0.838127       149.281       150.119    
  17  0.136104      -1.99433      -3.01870       3.01870       151.679       154.697    
  18  0.340340      -1.07781      -1.63141       1.63141       152.040       153.671    
  19  0.149160      -1.90274      -2.88006       2.88006       149.818       152.698    
  20  0.433234E-01  -3.13906      -4.75140       4.75140       151.846       156.597    
  21  0.909134     -0.952630E-01 -0.144194      0.144194       151.337       151.481    
  22  0.619739     -0.478456     -0.724209      0.724209       151.177       151.901    
  23  0.726693     -0.319251     -0.483230      0.483230       151.692       152.175    
  24  0.962860     -0.378471E-01 -0.572868E-01  0.572868E-01   152.198       152.255    
  25  0.615108     -0.485958     -0.735564      0.735564       152.720       153.456    
  26  0.500401     -0.692346      -1.04796       1.04796       151.274       152.322    
  27  0.402080     -0.911104      -1.37908       1.37908       152.390       153.769    
  28  0.749737     -0.288033     -0.435977      0.435977       153.535       153.971    
  29  0.926553     -0.762839E-01 -0.115466      0.115466       152.374       152.489    
  30  0.519037     -0.655779     -0.992612      0.992612       152.477       153.470    
  31  0.498178E-01  -2.99938      -4.53998       4.53998       153.419       157.959    
  32  0.473692     -0.747197      -1.13098       1.13098       153.169       154.300    
  33  0.574927E-02  -5.15868      -7.80837       7.80837       152.119       159.928    
  34  0.349575      -1.05104      -1.59089       1.59089       153.051       154.641    
  35  0.661333     -0.413498     -0.625885      0.625885       151.784       152.410    
  36  0.314247E-01  -3.46016      -5.23743       5.23743       153.690       158.928    
  37  0.318841      -1.14306      -1.73018       1.73018       152.640       154.370    
  38  0.111349E-01  -4.49767      -6.80784       6.80784       152.254       159.062    
  39  0.845234E-02  -4.77331      -7.22506       7.22506       154.187       161.412    
  40  0.704975E-01  -2.65218      -4.01443       4.01443       153.409       157.424    
  41  0.126423      -2.06812      -3.13039       3.13039       152.501       155.631    
  42  0.120140      -2.11910      -3.20754       3.20754       153.757       156.965    
  43  0.664865     -0.408172     -0.617824      0.617824       153.572       154.190    
  44  0.829336     -0.187130     -0.283246      0.283246       152.717       153.001    
  45  0.656735     -0.420475     -0.636447      0.636447       154.726       155.363    
  46  0.955374     -0.456526E-01 -0.691015E-01  0.691015E-01   150.497       150.566    
  47  0.220157      -1.51341      -2.29076       2.29076       155.132       157.422    
  48  0.151230      -1.88895      -2.85919       2.85919       154.189       157.048    
  49  0.127393      -2.06048      -3.11882       3.11882       152.325       155.444    
  50  0.206727      -1.57636      -2.38603       2.38603       154.646       157.032    
  51  0.637521     -0.450168     -0.681391      0.681391       152.603       153.285    
  52  0.432940     -0.837156      -1.26715       1.26715       155.109       156.376    
  53  0.429465     -0.845215      -1.27935       1.27935       155.207       156.487    
  54  0.989331E-01  -2.31331      -3.50151       3.50151       153.309       156.811    
  55  0.158609      -1.84131      -2.78708       2.78708       155.551       158.338    
  56  0.811960     -0.208304     -0.315297      0.315297       154.957       155.272    
  57  0.112024      -2.18904      -3.31341       3.31341       155.841       159.155    
  58  0.922858     -0.802799E-01 -0.121515      0.121515       155.176       155.297    
  59  0.738003     -0.303807     -0.459853      0.459853       154.894       155.354    
  60  0.896667     -0.109070     -0.165093      0.165093       155.776       155.941    
  61  0.736055     -0.306450     -0.463855      0.463855       150.797       151.261    
  62  0.607864     -0.497804     -0.753494      0.753494       156.420       157.173    
  63  0.974093     -0.262480E-01 -0.397300E-01  0.397300E-01   156.578       156.618    
  64  0.624292     -0.471137     -0.713131      0.713131       152.866       153.579    
  65  0.190711      -1.65700      -2.50809       2.50809       157.688       160.197    
  66  0.655755     -0.421967     -0.638705      0.638705       156.387       157.026    
  67  0.678530     -0.387827     -0.587029      0.587029       154.062       154.649    
  68  0.725997     -0.320210     -0.484682      0.484682       155.803       156.288    
  69  0.797831     -0.225858     -0.341867      0.341867       158.361       158.703    
  70  0.354092      -1.03820      -1.57146       1.57146       158.046       159.618    
  71  0.687487     -0.374712     -0.567177      0.567177       156.660       157.227    
  72  0.670718     -0.399406     -0.604555      0.604555       158.490       159.095    
  73  0.466189     -0.763164      -1.15515       1.15515       155.270       156.425    
  74  0.931268     -0.712079E-01 -0.107783      0.107783       158.917       159.025    
  75  0.287538      -1.24640      -1.88660       1.88660       155.637       157.524    
loop,thermsimp(1:2)       32   4.32298      0.549771    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    454        153.53          0.86          1.15         25.19          0.24          0.05         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    153.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       32
neval is:      453
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       33
neval is:      453


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      453     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739     -0.325037      0.325037       148.625       148.950    
   2  0.549594     -0.598576     -0.906027      0.906027       149.281       150.187    
   3  0.631143     -0.460223     -0.696611      0.696611       150.072       150.768    
   4  0.268455      -1.31507      -1.99054       1.99054       150.154       152.144    
   5  0.513519     -0.666468      -1.00879       1.00879       150.497       151.506    
   6  0.886725     -0.120220     -0.181969      0.181969       149.126       149.307    
   7  0.568618     -0.564546     -0.854518      0.854518       149.772       150.627    
   8  0.443178     -0.813783      -1.23177       1.23177       150.890       152.122    
   9  0.898491     -0.107039     -0.162018      0.162018       150.503       150.665    
  10  0.235118      -1.44767      -2.19124       2.19124       150.797       152.988    
  11  0.509444     -0.674434      -1.02085       1.02085       151.337       152.358    
  12  0.223921      -1.49646      -2.26510       2.26510       151.313       153.578    
  13  0.188995      -1.66603      -2.52177       2.52177       150.536       153.058    
  14  0.969568     -0.309049E-01 -0.467787E-01  0.467787E-01   150.039       150.086    
  15  0.287265      -1.24735      -1.88804       1.88804       151.177       153.065    
  16  0.559573E-01  -2.88317      -4.36407       4.36407       150.157       154.521    
  17  0.668393     -0.402878     -0.609812      0.609812       151.692       152.302    
  18  0.488393     -0.716635      -1.08472       1.08472       152.198       153.283    
  19  0.605591     -0.501551     -0.759166      0.759166       151.274       152.033    
  20  0.490783     -0.711753      -1.07734       1.07734       151.784       152.861    
  21  0.313180      -1.16098      -1.75730       1.75730       152.374       154.131    
  22  0.200234      -1.60827      -2.43433       2.43433       149.818       152.253    
  23  0.575811     -0.551975     -0.835490      0.835490       151.560       152.395    
  24  0.856965     -0.154358     -0.233641      0.233641       149.272       149.506    
  25  0.310774      -1.16869      -1.76897       1.76897       152.717       154.486    
  26  0.836513     -0.178513     -0.270204      0.270204       148.852       149.122    
  27  0.286335      -1.25059      -1.89295       1.89295       152.603       154.496    
  28  0.240507      -1.42500      -2.15694       2.15694       152.720       154.877    
  29  0.103511E-01  -4.57066      -6.91832       6.91832       152.477       159.395    
  30  0.516897     -0.659912     -0.998867      0.998867       152.866       153.865    
  31  0.237615      -1.43710      -2.17525       2.17525       152.040       154.215    
  32  0.602330     -0.506950     -0.767338      0.767338       152.390       153.158    
  33  0.677792     -0.388915     -0.588676      0.588676       153.535       154.123    
  34  0.965031     -0.355954E-01 -0.538785E-01  0.538785E-01   153.572       153.626    
  35  0.851769     -0.160440     -0.242848      0.242848       153.169       153.412    
  36  0.998637     -0.136415E-02 -0.206482E-02  0.206482E-02   152.640       152.642    
  37  0.690071E-01  -2.67355      -4.04678       4.04678       153.051       157.097    
  38  0.865316E-02  -4.74983      -7.18952       7.18952       154.062       161.251    
  39  0.657551     -0.419234     -0.634568      0.634568       151.679       152.313    
  40  0.249918      -1.38662      -2.09884       2.09884       154.957       157.055    
  41  0.762839     -0.270708     -0.409754      0.409754       155.176       155.585    
  42  0.875176     -0.133331     -0.201814      0.201814       154.894       155.096    
  43  0.805569     -0.216207     -0.327258      0.327258       154.726       155.054    
  44  0.308797      -1.17507      -1.77863       1.77863       152.325       154.104    
  45  0.255763      -1.36350      -2.06385       2.06385       152.501       154.565    
  46  0.218508      -1.52093      -2.30214       2.30214       155.776       158.078    
  47  0.518593     -0.656637     -0.993909      0.993909       155.803       156.797    
  48  0.856838     -0.154506     -0.233866      0.233866       155.109       155.342    
  49  0.300810      -1.20128      -1.81830       1.81830       155.270       157.088    
  50  0.310312      -1.17018      -1.77122       1.77122       155.207       156.979    
  51  0.503825     -0.685526      -1.03764       1.03764       151.846       152.884    
  52  0.940514     -0.613291E-01 -0.928300E-01  0.928300E-01   156.578       156.671    
  53  0.778953     -0.249804     -0.378113      0.378113       153.309       153.688    
  54  0.586433     -0.533697     -0.807823      0.807823       153.757       154.565    
  55  0.866496     -0.143298     -0.216901      0.216901       156.387       156.604    
  56  0.371870E-01  -3.29180      -4.98258       4.98258       154.646       159.628    
  57  0.592656     -0.523141     -0.791845      0.791845       154.189       154.981    
  58  0.337285      -1.08683      -1.64506       1.64506       156.420       158.065    
  59  0.277582      -1.28164      -1.93993       1.93993       156.660       158.600    
  60  0.690983E-01  -2.67223      -4.04478       4.04478       149.129       153.174    
  61  0.688060     -0.373879     -0.565918      0.565918       155.132       155.697    
  62  0.279054      -1.27635      -1.93193       1.93193       153.409       155.341    
  63  0.927849     -0.748862E-01 -0.113351      0.113351       155.637       155.750    
  64  0.360885      -1.01920      -1.54269       1.54269       153.419       154.962    
  65  0.301914      -1.19761      -1.81275       1.81275       155.551       157.364    
  66  0.732817     -0.310859     -0.470528      0.470528       158.361       158.832    
  67  0.366767      -1.00303      -1.51822       1.51822       153.690       155.209    
  68  0.255505      -1.36451      -2.06538       2.06538       158.917       160.982    
  69  0.117155      -2.14426      -3.24563       3.24563       152.254       155.500    
  70  0.716329     -0.333616     -0.504974      0.504974       158.490       158.995    
  71  0.209869      -1.56127      -2.36320       2.36320       155.841       158.204    
  72  0.716721     -0.333069     -0.504145      0.504145       158.046       158.551    
  73  0.637555     -0.450114     -0.681310      0.681310       152.119       152.801    
  74  0.930680E-01  -2.37443      -3.59402       3.59402       157.688       161.282    
  75  0.531910     -0.631281     -0.955530      0.955530       153.530       154.486    
loop,thermsimp(1:2)       33  0.325037      0.906027    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    455        150.94          0.87          1.12         25.10          0.29          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       33
neval is:      454
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       34
neval is:      454


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      454     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -1.48102       1.48102       148.625       150.106    
   2  0.356800      -1.03058      -1.55992       1.55992       148.852       150.412    
   3  0.686180     -0.376616     -0.570060      0.570060       149.126       149.696    
   4  0.443986     -0.811963      -1.22902       1.22902       149.272       150.501    
   5  0.837544     -0.177281     -0.268340      0.268340       150.039       150.308    
   6  0.902394     -0.102704     -0.155456      0.155456       149.281       149.436    
   7  0.509658E-01  -2.97660      -4.50549       4.50549       149.772       154.278    
   8  0.662569     -0.411631     -0.623060      0.623060       150.503       151.126    
   9  0.226311      -1.48585      -2.24903       2.24903       150.072       152.321    
  10  0.336196      -1.09006      -1.64996       1.64996       150.497       152.147    
  11  0.122038      -2.10342      -3.18381       3.18381       151.274       154.458    
  12  0.323275      -1.12925      -1.70928       1.70928       150.890       152.599    
  13  0.326513      -1.11929      -1.69419       1.69419       150.154       151.848    
  14  0.904434     -0.100446     -0.152038      0.152038       149.818       149.970    
  15  0.856476     -0.154928     -0.234505      0.234505       151.692       151.927    
  16  0.873700     -0.135019     -0.204369      0.204369       151.679       151.883    
  17  0.989627     -0.104267E-01 -0.157823E-01  0.157823E-01   151.337       151.353    
  18  0.546745     -0.603772     -0.913892      0.913892       151.560       152.474    
  19  0.731718     -0.312360     -0.472800      0.472800       152.640       153.113    
  20  0.859154     -0.151807     -0.229780      0.229780       152.119       152.349    
  21  0.419381     -0.868976      -1.31531       1.31531       151.784       153.099    
  22  0.587067     -0.532617     -0.806188      0.806188       151.846       152.652    
  23  0.460289E-01  -3.07849      -4.65971       4.65971       150.797       155.457    
  24  0.522902     -0.648362     -0.981384      0.981384       150.536       151.517    
  25  0.398671     -0.919618      -1.39197       1.39197       151.177       152.569    
  26  0.881302     -0.126355     -0.191255      0.191255       152.390       152.582    
  27  0.226039      -1.48705      -2.25085       2.25085       149.129       151.380    
  28  0.124144      -2.08631      -3.15792       3.15792       152.198       155.356    
  29  0.542680     -0.611235     -0.925188      0.925188       153.169       154.094    
  30  0.167496      -1.78679      -2.70456       2.70456       151.313       154.017    
  31  0.619825     -0.478318     -0.724000      0.724000       153.572       154.296    
  32  0.169564      -1.77452      -2.68599       2.68599       153.309       155.995    
  33  0.781291     -0.246807     -0.373576      0.373576       152.866       153.239    
  34  0.486264     -0.721004      -1.09134       1.09134       152.325       153.417    
  35  0.895366     -0.110522     -0.167290      0.167290       153.535       153.702    
  36  0.321503      -1.13475      -1.71760       1.71760       152.374       154.092    
  37  0.607862E-01  -2.80039      -4.23878       4.23878       152.040       156.279    
  38  0.365124      -1.00752      -1.52502       1.52502       153.530       155.055    
  39  0.110107      -2.20630      -3.33954       3.33954       152.717       156.057    
  40  0.905082     -0.997294E-01 -0.150954      0.150954       152.603       152.754    
  41  0.960140     -0.406759E-01 -0.615686E-01  0.615686E-01   150.157       150.219    
  42  0.320200      -1.13881      -1.72374       1.72374       152.501       154.225    
  43  0.396920     -0.924021      -1.39863       1.39863       153.757       155.156    
  44  0.674668     -0.393534     -0.595668      0.595668       152.720       153.316    
  45  0.894300     -0.111715     -0.169095      0.169095       153.419       153.588    
  46  0.875669     -0.132767     -0.200962      0.200962       154.189       154.390    
  47  0.881286     -0.126374     -0.191284      0.191284       154.726       154.918    
  48  0.779885     -0.248609     -0.376304      0.376304       154.894       155.270    
  49  0.691264     -0.369233     -0.558885      0.558885       153.690       154.249    
  50  0.406618     -0.899882      -1.36209       1.36209       153.409       154.772    
  51  0.225318      -1.49024      -2.25568       2.25568       155.109       157.364    
  52  0.172220      -1.75898      -2.66246       2.66246       152.254       154.917    
  53  0.479523     -0.734964      -1.11247       1.11247       155.176       156.288    
  54  0.313312      -1.16056      -1.75666       1.75666       155.132       156.888    
  55  0.389868     -0.941947      -1.42576       1.42576       155.637       157.063    
  56  0.510295     -0.672766      -1.01832       1.01832       156.387       157.405    
  57  0.782049     -0.245838     -0.372109      0.372109       156.578       156.950    
  58  0.193896      -1.64043      -2.48302       2.48302       155.803       158.286    
  59  0.560612     -0.578727     -0.875982      0.875982       155.207       156.083    
  60  0.127407      -2.06037      -3.11865       3.11865       154.957       158.075    
  61  0.898287     -0.107266     -0.162361      0.162361       155.270       155.432    
  62  0.680859     -0.384400     -0.581842      0.581842       153.051       153.632    
  63  0.535951     -0.623712     -0.944073      0.944073       155.551       156.495    
  64  0.109035      -2.21609      -3.35435       3.35435       156.420       159.774    
  65  0.696476     -0.361721     -0.547515      0.547515       155.776       156.323    
  66  0.336539      -1.08904      -1.64841       1.64841       155.841       157.490    
  67  0.115832      -2.15562      -3.26282       3.26282       158.046       161.309    
  68  0.179134      -1.71962      -2.60288       2.60288       156.660       159.263    
  69  0.435434     -0.831411      -1.25845       1.25845       158.361       159.620    
  70  0.330463      -1.10726      -1.67599       1.67599       158.490       160.166    
  71  0.209525      -1.56291      -2.36568       2.36568       152.477       154.843    
  72  0.354998      -1.03564      -1.56759       1.56759       154.646       156.213    
  73  0.985658     -0.144461E-01 -0.218662E-01  0.218662E-01   158.917       158.939    
  74  0.331643      -1.10370      -1.67060       1.67060       154.062       155.732    
  75  0.420238     -0.866935      -1.31222       1.31222       150.944       152.256    
loop,thermsimp(1:2)       34   1.48102       1.55992    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    456        148.51          0.87          1.15         25.23          0.21          0.06         27.52
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    457        149.83          0.84          1.15         25.25          0.14          0.06         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       34
neval is:      456
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       35
neval is:      456


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      456     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -1.11598       1.11598       149.281       150.397    
   2  0.380700     -0.965745      -1.46179       1.46179       149.126       150.587    
   3  0.821138     -0.197064     -0.298283      0.298283       149.818       150.117    
   4  0.728654     -0.316557     -0.479152      0.479152       148.625       149.104    
   5  0.670900     -0.399135     -0.604146      0.604146       150.157       150.761    
   6  0.175262      -1.74147      -2.63596       2.63596       150.039       152.675    
   7  0.709150     -0.343688     -0.520219      0.520219       148.852       149.372    
   8  0.247481      -1.39642      -2.11367       2.11367       149.272       151.386    
   9  0.231597      -1.46276      -2.21408       2.21408       150.503       152.717    
  10  0.764757     -0.268198     -0.405954      0.405954       151.337       151.743    
  11  0.798540     -0.224970     -0.340522      0.340522       149.129       149.470    
  12  0.903782     -0.101167     -0.153130      0.153130       150.536       150.689    
  13  0.136634      -1.99045      -3.01282       3.01282       150.154       153.166    
  14  0.141955      -1.95225      -2.95499       2.95499       151.679       154.634    
  15  0.658650     -0.417563     -0.632039      0.632039       151.692       152.324    
  16  0.265370      -1.32663      -2.00804       2.00804       150.497       152.505    
  17  0.439277E-01  -3.12521      -4.73043       4.73043       150.944       155.674    
  18  0.451732     -0.794667      -1.20284       1.20284       150.072       151.275    
  19  0.475868     -0.742615      -1.12405       1.12405       152.119       153.243    
  20  0.336185      -1.09009      -1.65001       1.65001       151.560       153.210    
  21  0.519277     -0.655317     -0.991912      0.991912       151.177       152.169    
  22  0.455030     -0.787393      -1.19183       1.19183       152.390       153.582    
  23  0.272148E-01  -3.60399      -5.45514       5.45514       150.890       156.345    
  24  0.125510      -2.07537      -3.14136       3.14136       151.846       154.987    
  25  0.687868     -0.374159     -0.566340      0.566340       152.603       153.170    
  26  0.271894      -1.30234      -1.97128       1.97128       151.784       153.755    
  27  0.641335     -0.444204     -0.672363      0.672363       152.640       153.313    
  28  0.858838E-01  -2.45476      -3.71561       3.71561       152.866       156.582    
  29  0.579605     -0.545408     -0.825550      0.825550       152.720       153.546    
  30  0.249942      -1.38653      -2.09870       2.09870       152.325       154.424    
  31  0.938016     -0.639885E-01 -0.968554E-01  0.968554E-01   153.419       153.516    
  32  0.453695     -0.790330      -1.19627       1.19627       153.051       154.247    
  33  0.319751      -1.14021      -1.72587       1.72587       153.535       155.261    
  34  0.346149      -1.06089      -1.60580       1.60580       151.313       152.918    
  35  0.870951     -0.138169     -0.209138      0.209138       152.374       152.583    
  36  0.187313      -1.67497      -2.53530       2.53530       153.169       155.704    
  37  0.984950     -0.151645E-01 -0.229536E-01  0.229536E-01   152.501       152.524    
  38  0.524062     -0.646145     -0.978029      0.978029       153.690       154.668    
  39  0.432392     -0.838423      -1.26907       1.26907       149.772       151.041    
  40  0.687254     -0.375052     -0.567693      0.567693       153.572       154.140    
  41  0.869131     -0.140262     -0.212305      0.212305       154.189       154.402    
  42  0.350749      -1.04769      -1.58581       1.58581       151.274       152.860    
  43  0.663152E-01  -2.71334      -4.10701       4.10701       153.409       157.516    
  44  0.306857      -1.18137      -1.78817       1.78817       152.477       154.265    
  45  0.925728     -0.771751E-01 -0.116815      0.116815       152.254       152.371    
  46  0.649899     -0.430939     -0.652285      0.652285       154.726       155.379    
  47  0.492368     -0.708529      -1.07246       1.07246       153.530       154.603    
  48  0.104223      -2.26122      -3.42267       3.42267       153.757       157.180    
  49  0.345103      -1.06391      -1.61038       1.61038       154.894       156.504    
  50  0.425380     -0.854773      -1.29382       1.29382       152.198       153.492    
  51  0.922590     -0.805699E-01 -0.121954      0.121954       155.270       155.392    
  52  0.209663      -1.56226      -2.36469       2.36469       150.797       153.162    
  53  0.402772     -0.909384      -1.37648       1.37648       154.062       155.438    
  54  0.246006      -1.40240      -2.12272       2.12272       153.309       155.432    
  55  0.811871     -0.208414     -0.315463      0.315463       152.717       153.033    
  56  0.929927     -0.726495E-01 -0.109965      0.109965       155.207       155.317    
  57  0.407345     -0.898096      -1.35939       1.35939       154.646       156.005    
  58  0.870102     -0.139145     -0.210615      0.210615       152.040       152.251    
  59  0.987510     -0.125691E-01 -0.190250E-01  0.190250E-01   155.176       155.195    
  60  0.263762E-01  -3.63529      -5.50252       5.50252       155.776       161.278    
  61  0.303836      -1.19127      -1.80315       1.80315       155.551       157.354    
  62  0.494574     -0.704059      -1.06569       1.06569       155.132       156.197    
  63  0.940738     -0.610903E-01 -0.924686E-01  0.924686E-01   156.578       156.670    
  64  0.234997      -1.44818      -2.19202       2.19202       155.637       157.829    
  65  0.694757     -0.364193     -0.551256      0.551256       155.109       155.660    
  66  0.301995      -1.19734      -1.81234       1.81234       156.387       158.199    
  67  0.336046E-01  -3.39309      -5.13591       5.13591       155.841       160.977    
  68  0.380975     -0.965022      -1.46069       1.46069       154.957       156.417    
  69  0.147703      -1.91255      -2.89491       2.89491       155.803       158.698    
  70  0.688734     -0.372900     -0.564435      0.564435       158.917       159.481    
  71  0.588097     -0.530864     -0.803535      0.803535       156.660       157.463    
  72  0.988588     -0.114775E-01 -0.173728E-01  0.173728E-01   158.361       158.379    
  73  0.867288     -0.142384     -0.215518      0.215518       156.420       156.635    
  74  0.848212     -0.164625     -0.249182      0.249182       158.490       158.739    
  75  0.159307      -1.83693      -2.78044       2.78044       148.507       151.288    
loop,thermsimp(1:2)       35   1.11598       1.46179    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    458        150.47          0.87          1.15         25.22          0.32          0.06         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       35
neval is:      457
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       36
neval is:      457


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      457     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01 -0.877030E-01  0.877030E-01   148.625       148.713    
   2  0.628336     -0.464680     -0.703357      0.703357       148.852       149.555    
   3  0.261321      -1.34200      -2.03131       2.03131       149.129       151.161    
   4  0.256100      -1.36219      -2.06186       2.06186       149.818       151.880    
   5  0.318070      -1.14548      -1.73385       1.73385       149.281       151.015    
   6  0.895943     -0.109878     -0.166316      0.166316       149.126       149.292    
   7  0.856491     -0.154912     -0.234480      0.234480       150.536       150.771    
   8  0.269953      -1.30951      -1.98212       1.98212       150.157       152.139    
   9  0.663616     -0.410051     -0.620668      0.620668       149.772       150.393    
  10  0.249338E-01  -3.69153      -5.58764       5.58764       150.072       155.659    
  11  0.362852      -1.01376      -1.53446       1.53446       148.507       150.042    
  12  0.868529E-02  -4.74612      -7.18391       7.18391       149.272       156.456    
  13  0.705785     -0.348444     -0.527418      0.527418       151.337       151.865    
  14  0.527358     -0.639875     -0.968538      0.968538       151.177       152.146    
  15  0.831399     -0.184645     -0.279485      0.279485       152.040       152.320    
  16  0.594963     -0.519255     -0.785964      0.785964       151.692       152.478    
  17  0.501981     -0.689193      -1.04319       1.04319       152.254       153.298    
  18  0.594311     -0.520353     -0.787625      0.787625       150.497       151.285    
  19  0.618124     -0.481066     -0.728159      0.728159       152.501       153.229    
  20  0.959578E-01  -2.34385      -3.54773       3.54773       152.374       155.922    
  21  0.776845     -0.252514     -0.382215      0.382215       150.039       150.422    
  22  0.458742     -0.779266      -1.17953       1.17953       150.503       151.682    
  23  0.645084     -0.438374     -0.663539      0.663539       151.274       151.937    
  24  0.545194     -0.606614     -0.918193      0.918193       151.313       152.231    
  25  0.618072     -0.481151     -0.728287      0.728287       152.717       153.446    
  26  0.390168     -0.941179      -1.42460       1.42460       150.797       152.222    
  27  0.122318      -2.10113      -3.18035       3.18035       150.154       153.334    
  28  0.823049     -0.194740     -0.294765      0.294765       152.603       152.898    
  29  0.817844E-01  -2.50367      -3.78964       3.78964       151.560       155.350    
  30  0.189400      -1.66389      -2.51853       2.51853       152.119       154.638    
  31  0.257378      -1.35721      -2.05432       2.05432       152.640       154.695    
  32  0.854384     -0.157375     -0.238209      0.238209       152.198       152.436    
  33  0.128350      -2.05300      -3.10749       3.10749       153.419       156.527    
  34  0.410790     -0.889673      -1.34664       1.34664       152.720       154.067    
  35  0.645584     -0.437599     -0.662366      0.662366       152.390       153.053    
  36  0.309517      -1.17274      -1.77511       1.77511       151.784       153.559    
  37  0.568550     -0.564667     -0.854700      0.854700       153.572       154.427    
  38  0.702184     -0.353560     -0.535162      0.535162       153.051       153.586    
  39  0.939991     -0.618850E-01 -0.936714E-01  0.936714E-01   152.477       152.571    
  40  0.944105     -0.575180E-01 -0.870613E-01  0.870613E-01   154.189       154.276    
  41  0.202943      -1.59483      -2.41400       2.41400       152.325       154.739    
  42  0.948631E-02  -4.65791      -7.05038       7.05038       153.530       160.580    
  43  0.568674     -0.564449     -0.854370      0.854370       151.679       152.533    
  44  0.216733      -1.52909      -2.31448       2.31448       153.690       156.005    
  45  0.385755     -0.952553      -1.44182       1.44182       151.846       153.288    
  46  0.894850E-01  -2.41368      -3.65344       3.65344       155.176       158.829    
  47  0.136648      -1.99035      -3.01266       3.01266       153.535       156.547    
  48  0.473765     -0.747044      -1.13075       1.13075       155.207       156.338    
  49  0.208114E-01  -3.87225      -5.86119       5.86119       154.726       160.588    
  50  0.158159      -1.84415      -2.79138       2.79138       155.270       158.061    
  51  0.112432      -2.18541      -3.30791       3.30791       153.309       156.617    
  52  0.135630      -1.99782      -3.02398       3.02398       154.062       157.086    
  53  0.976001E-01  -2.32688      -3.52205       3.52205       155.109       158.631    
  54  0.914947     -0.888887E-01 -0.134545      0.134545       150.944       151.079    
  55  0.832290     -0.183575     -0.277866      0.277866       153.169       153.447    
  56  0.592436     -0.523513     -0.792408      0.792408       154.646       155.438    
  57  0.938858     -0.630909E-01 -0.954968E-01  0.954968E-01   155.132       155.227    
  58  0.390466     -0.940415      -1.42345       1.42345       150.890       152.313    
  59  0.599449     -0.511744     -0.774594      0.774594       154.957       155.731    
  60  0.225097      -1.49123      -2.25717       2.25717       154.894       157.151    
  61  0.178203      -1.72483      -2.61077       2.61077       152.866       155.477    
  62  0.634237     -0.455332     -0.689208      0.689208       156.420       157.109    
  63  0.740506     -0.300422     -0.454729      0.454729       156.578       157.033    
  64  0.619863E-01  -2.78084      -4.20919       4.20919       153.757       157.967    
  65  0.184904      -1.68792      -2.55489       2.55489       155.551       158.106    
  66  0.127308      -2.06115      -3.11983       3.11983       156.660       159.780    
  67  0.112882      -2.18141      -3.30187       3.30187       153.409       156.711    
  68  0.830124     -0.186180     -0.281809      0.281809       155.637       155.919    
  69  0.810936     -0.209567     -0.317208      0.317208       156.387       156.704    
  70  0.547031     -0.603250     -0.913101      0.913101       158.361       159.274    
  71  0.933356     -0.689686E-01 -0.104393      0.104393       155.803       155.908    
  72  0.260857      -1.34378      -2.03400       2.03400       158.490       160.524    
  73  0.325236E-01  -3.42579      -5.18540       5.18540       158.917       164.102    
  74  0.976543     -0.237361E-01 -0.359278E-01  0.359278E-01   155.841       155.877    
  75  0.778754     -0.250059     -0.378499      0.378499       150.469       150.847    
loop,thermsimp(1:2)       36  0.877030E-01  0.703357    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    459        151.29          0.87          1.15         25.28          0.21          0.06         27.57
Just calling func    0   0         27.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       36
neval is:      458
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       37
neval is:      458


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      458     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.577652     -0.548784     -0.830659      0.830659       148.625       149.456    
   2  0.954687     -0.463716E-01 -0.701897E-01  0.701897E-01   149.126       149.196    
   3  0.530232     -0.634441     -0.960313      0.960313       148.852       149.812    
   4  0.762581     -0.271046     -0.410265      0.410265       148.507       148.917    
   5  0.261488      -1.34137      -2.03034       2.03034       149.772       151.803    
   6  0.639820     -0.446569     -0.675943      0.675943       150.039       150.715    
   7  0.527286     -0.640012     -0.968745      0.968745       150.536       151.505    
   8  0.819676     -0.198846     -0.300980      0.300980       150.469       150.770    
   9  0.564974     -0.570976     -0.864250      0.864250       149.281       150.145    
  10  0.313261      -1.16072      -1.75691       1.75691       150.944       152.701    
  11  0.741013     -0.299737     -0.453694      0.453694       149.129       149.583    
  12  0.286155      -1.25122      -1.89389       1.89389       150.497       152.391    
  13  0.145515      -1.92747      -2.91750       2.91750       150.503       153.420    
  14  0.417445     -0.873602      -1.32232       1.32232       151.337       152.659    
  15  0.110117      -2.20621      -3.33940       3.33940       149.818       153.158    
  16  0.798228     -0.225361     -0.341115      0.341115       151.274       151.615    
  17  0.981317     -0.188596E-01 -0.285466E-01  0.285466E-01   150.157       150.186    
  18  0.947313     -0.541256E-01 -0.819265E-01  0.819265E-01   151.177       151.259    
  19  0.979175     -0.210453E-01 -0.318549E-01  0.318549E-01   150.797       150.829    
  20  0.507968     -0.677337      -1.02524       1.02524       151.313       152.338    
  21  0.313327      -1.16051      -1.75659       1.75659       150.890       152.646    
  22  0.174912      -1.74347      -2.63899       2.63899       152.040       154.679    
  23  0.278222      -1.27933      -1.93645       1.93645       152.198       154.135    
  24  0.551320     -0.595439     -0.901279      0.901279       151.692       152.593    
  25  0.509281     -0.674756      -1.02133       1.02133       151.679       152.700    
  26  0.202795E-01  -3.89814      -5.90037       5.90037       152.477       158.377    
  27  0.394215     -0.930860      -1.40898       1.40898       152.603       154.012    
  28  0.463302     -0.769377      -1.16456       1.16456       152.390       153.555    
  29  0.132020      -2.02480      -3.06482       3.06482       152.501       155.566    
  30  0.330810      -1.10621      -1.67440       1.67440       151.846       153.520    
  31  0.415110     -0.879212      -1.33081       1.33081       152.254       153.585    
  32  0.381803     -0.962850      -1.45740       1.45740       150.154       151.611    
  33  0.209798E-01  -3.86420      -5.84899       5.84899       152.717       158.566    
  34  0.906539     -0.981217E-01 -0.148521      0.148521       153.169       153.317    
  35  0.507460     -0.678337      -1.02676       1.02676       151.784       152.811    
  36  0.694619     -0.364392     -0.551557      0.551557       153.051       153.602    
  37  0.704259     -0.350610     -0.530696      0.530696       152.720       153.251    
  38  0.953152     -0.479806E-01 -0.726251E-01  0.726251E-01   154.189       154.262    
  39  0.393408     -0.932907      -1.41208       1.41208       153.572       154.984    
  40  0.361825      -1.01659      -1.53875       1.53875       152.119       153.658    
  41  0.420592     -0.866091      -1.31095       1.31095       152.640       153.951    
  42  0.474514     -0.745463      -1.12836       1.12836       152.325       153.454    
  43  0.769306     -0.262267     -0.396976      0.396976       155.132       155.529    
  44  0.881065     -0.126624     -0.191662      0.191662       151.560       151.752    
  45  0.298206      -1.20997      -1.83145       1.83145       154.646       156.477    
  46  0.364982E-01  -3.31049      -5.01088       5.01088       152.866       157.877    
  47  0.835758     -0.179417     -0.271572      0.271572       150.072       150.343    
  48  0.936392     -0.657215E-01 -0.994784E-01  0.994784E-01   154.957       155.056    
  49  0.213316      -1.54498      -2.33854       2.33854       155.841       158.180    
  50  0.942026     -0.597221E-01 -0.903975E-01  0.903975E-01   155.803       155.894    
  51  0.130068      -2.03970      -3.08736       3.08736       155.637       158.724    
  52  0.115047      -2.16241      -3.27310       3.27310       152.374       155.647    
  53  0.320926      -1.13654      -1.72032       1.72032       153.690       155.411    
  54  0.256901      -1.35906      -2.05713       2.05713       155.207       157.264    
  55  0.712293E-02  -4.94444      -7.48408       7.48408       149.272       156.756    
  56  0.470217     -0.754561      -1.14213       1.14213       153.419       154.561    
  57  0.934029     -0.682473E-01 -0.103302      0.103302       153.535       153.638    
  58  0.312307      -1.16377      -1.76152       1.76152       153.309       155.071    
  59  0.292579      -1.22902      -1.86029       1.86029       156.387       158.247    
  60  0.811492     -0.208881     -0.316170      0.316170       153.409       153.726    
  61  0.424749     -0.856258      -1.29606       1.29606       156.578       157.874    
  62  0.574444     -0.554353     -0.839089      0.839089       154.062       154.901    
  63  0.884133     -0.123147     -0.186400      0.186400       156.420       156.606    
  64  0.515226     -0.663150      -1.00377       1.00377       154.894       155.898    
  65  0.129966      -2.04049      -3.08855       3.08855       153.757       156.846    
  66  0.769822     -0.261596     -0.395962      0.395962       155.270       155.666    
  67  0.987280     -0.128019E-01 -0.193775E-01  0.193775E-01   155.551       155.570    
  68  0.424664     -0.856458      -1.29637       1.29637       155.109       156.405    
  69  0.663727     -0.409884     -0.620416      0.620416       155.176       155.796    
  70  0.281797      -1.26657      -1.91713       1.91713       158.361       160.278    
  71  0.949094     -0.522477E-01 -0.790840E-01  0.790840E-01   156.660       156.739    
  72  0.642131E-01  -2.74555      -4.15576       4.15576       158.490       162.646    
  73  0.522979     -0.648214     -0.981160      0.981160       153.530       154.511    
  74  0.670426     -0.399842     -0.605215      0.605215       154.726       155.332    
  75  0.867931     -0.141643     -0.214396      0.214396       151.287       151.501    
loop,thermsimp(1:2)       37  0.830659      0.701897E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    460        149.00          0.86          1.15         25.20          0.30          0.05         27.56
Just calling func    0   0         27.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    461        153.18          0.84          1.15         25.25          0.51          0.04         27.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  460    153.18        1.007     -3.019      4.023     -102.6      1.317    
                      0.5668     0.9848     -99.70      3.714    -0.2628    
                       2.989     -1.040      1.530      8441.     -376.9    
                      0.1927      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      6970.      2105.    
                     -0.5672     -5.426     -3.354     -10.38      6.095    
                      -17.03     -3.862     0.1639E+05  0.000     0.1670E+05

                      -6183.     0.1633E+05-0.1004E+05 0.1670E+05  2024.    
                       7835.     0.8979E-01 0.2937      0.000     0.2234    
                     -0.5702    -0.1636     0.5635E-01 0.1424    -0.6290E-01

                     -0.6824    -0.6282      0.000     0.1694    -0.1718    
                       0.000     0.1252     0.2522    -0.1993    -0.1032    
                      0.1620E-01 0.5792E-01-0.6912     -1.246      2844.    

                      -1.372     -1.316     -2.095     -2.168     0.6615E-01
                     -0.9119      9.191      8.653    -0.1214E+05 -4.000    
                      -1.048     -2.605      10.10      8.842     -3004.    

                      -4.000     0.5736     -1.045      8.928      9.141    
                     -0.2246E+05 -7.000     -1.072     -1.495      8.933    
                       8.689    -0.1935E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       37
neval is:      460
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       38
neval is:      460


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      460     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708199     -0.345030     -0.522250      0.522250       148.507       149.029    
   2  0.656861     -0.420283     -0.636156      0.636156       149.126       149.762    
   3  0.531016     -0.632963     -0.958076      0.958076       148.625       149.583    
   4  0.259645      -1.34844      -2.04105       2.04105       149.129       151.170    
   5  0.509285E-01  -2.97733      -4.50660       4.50660       148.852       153.358    
   6  0.222403      -1.50327      -2.27540       2.27540       149.281       151.556    
   7  0.883122E-01  -2.42688      -3.67341       3.67341       150.157       153.831    
   8  0.689941     -0.371150     -0.561786      0.561786       150.072       150.633    
   9  0.811351     -0.209054     -0.316432      0.316432       150.039       150.356    
  10  0.252526      -1.37624      -2.08313       2.08313       150.469       152.552    
  11  0.229840      -1.47037      -2.22561       2.22561       150.797       153.023    
  12  0.108257      -2.22324      -3.36518       3.36518       151.177       154.542    
  13  0.933379E-02  -4.67411      -7.07491       7.07491       151.287       158.362    
  14  0.685050E-01  -2.68085      -4.05783       4.05783       150.536       154.594    
  15  0.875782     -0.132638     -0.200766      0.200766       150.154       150.354    
  16  0.592250     -0.523826     -0.792882      0.792882       151.274       152.067    
  17  0.259190E-01  -3.65278      -5.52898       5.52898       151.560       157.089    
  18  0.411624     -0.887646      -1.34357       1.34357       149.772       151.116    
  19  0.215731      -1.53372      -2.32150       2.32150       151.313       153.634    
  20  0.104157      -2.26185      -3.42362       3.42362       150.497       153.921    
  21  0.796475     -0.227560     -0.344443      0.344443       151.692       152.037    
  22  0.316732      -1.14970      -1.74023       1.74023       150.890       152.630    
  23  0.868566     -0.140911     -0.213288      0.213288       151.337       151.550    
  24  0.932817     -0.695461E-01 -0.105268      0.105268       151.679       151.784    
  25  0.704796E-01  -2.65243      -4.01482       4.01482       150.944       154.959    
  26  0.584289     -0.537360     -0.813368      0.813368       151.784       152.597    
  27  0.345306      -1.06332      -1.60948       1.60948       149.818       151.428    
  28  0.367589E-01  -3.30338      -5.00011       5.00011       152.720       157.720    
  29  0.470285     -0.754417      -1.14191       1.14191       153.169       154.311    
  30  0.303718      -1.19165      -1.80373       1.80373       150.503       152.306    
  31  0.298675      -1.20840      -1.82908       1.82908       152.325       154.154    
  32  0.506100     -0.681022      -1.03082       1.03082       151.846       152.877    
  33  0.240488      -1.42508      -2.15706       2.15706       152.390       154.547    
  34  0.673726     -0.394932     -0.597784      0.597784       152.254       152.852    
  35  0.303531      -1.19227      -1.80466       1.80466       153.051       154.855    
  36  0.450278     -0.797890      -1.20772       1.20772       153.535       154.742    
  37  0.850970     -0.161378     -0.244268      0.244268       152.119       152.364    
  38  0.370442     -0.993060      -1.50313       1.50313       153.409       154.913    
  39  0.328520      -1.11316      -1.68492       1.68492       152.640       154.325    
  40  0.194991      -1.63480      -2.47449       2.47449       152.603       155.078    
  41  0.547740     -0.601955     -0.911141      0.911141       152.198       153.109    
  42  0.574734     -0.553847     -0.838324      0.838324       154.189       155.028    
  43  0.900615     -0.104678     -0.158444      0.158444       153.530       153.689    
  44  0.316870      -1.14926      -1.73957       1.73957       153.419       155.159    
  45  0.961546     -0.392133E-01 -0.593547E-01  0.593547E-01   152.040       152.099    
  46  0.714054     -0.336796     -0.509787      0.509787       154.062       154.571    
  47  0.325407E-01  -3.42526      -5.18461       5.18461       153.572       158.757    
  48  0.264027      -1.33170      -2.01572       2.01572       154.957       156.972    
  49  0.139486      -1.96979      -2.98155       2.98155       153.309       156.291    
  50  0.568563     -0.564643     -0.854664      0.854664       154.726       155.581    
  51  0.691470     -0.368936     -0.558435      0.558435       153.690       154.249    
  52  0.214963      -1.53729      -2.32690       2.32690       155.132       157.458    
  53  0.515636     -0.662353      -1.00256       1.00256       152.501       153.503    
  54  0.803808     -0.218395     -0.330571      0.330571       155.551       155.881    
  55  0.930258     -0.722938E-01 -0.109427      0.109427       152.374       152.483    
  56  0.121241      -2.10998      -3.19374       3.19374       155.270       158.464    
  57  0.510661     -0.672049      -1.01724       1.01724       155.176       156.193    
  58  0.689134     -0.372319     -0.563556      0.563556       155.803       156.367    
  59  0.716530     -0.333335     -0.504547      0.504547       154.894       155.399    
  60  0.502196E-01  -2.99135      -4.52782       4.52782       155.109       159.636    
  61  0.901495     -0.103701     -0.156966      0.156966       154.646       154.803    
  62  0.933572     -0.687370E-01 -0.104043      0.104043       156.420       156.524    
  63  0.385092E-02  -5.55944      -8.41498       8.41498       156.660       165.075    
  64  0.965118     -0.355051E-01 -0.537419E-01  0.537419E-01   149.272       149.326    
  65  0.112744E-01  -4.48522      -6.78900       6.78900       153.757       160.546    
  66  0.836992     -0.177941     -0.269338      0.269338       155.207       155.477    
  67  0.993563     -0.645748E-02 -0.977428E-02  0.977428E-02   156.578       156.588    
  68  0.873807     -0.134896     -0.204183      0.204183       152.866       153.070    
  69  0.915114E-01  -2.39129      -3.61955       3.61955       155.841       159.461    
  70  0.198055      -1.61921      -2.45089       2.45089       156.387       158.838    
  71  0.480641     -0.732636      -1.10894       1.10894       152.477       153.586    
  72  0.678735     -0.387524     -0.586571      0.586571       152.717       153.304    
  73  0.424350     -0.857197      -1.29749       1.29749       155.637       156.934    
  74  0.869202E-01  -2.44276      -3.69746       3.69746       158.361       162.059    
  75  0.927857     -0.748772E-01 -0.113337      0.113337       148.996       149.109    
loop,thermsimp(1:2)       38  0.522250      0.636156    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    462        153.43          0.86          1.15         25.21          0.14          0.06         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    153.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       38
neval is:      461
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       39
neval is:      461


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      461     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.796195     -0.227912     -0.344976      0.344976       148.507       148.852    
   2  0.306803      -1.18155      -1.78844       1.78844       148.996       150.784    
   3  0.857946     -0.153214     -0.231910      0.231910       149.272       149.504    
   4  0.363815      -1.01111      -1.53045       1.53045       148.625       150.156    
   5  0.755322E-01  -2.58320      -3.91002       3.91002       149.126       153.036    
   6  0.345998E-01  -3.36391      -5.09173       5.09173       150.154       155.245    
   7  0.280587      -1.27087      -1.92364       1.92364       150.039       151.963    
   8  0.907418     -0.971519E-01 -0.147053      0.147053       150.072       150.219    
   9  0.696180     -0.362147     -0.548159      0.548159       149.772       150.320    
  10  0.640049     -0.446211     -0.675402      0.675402       149.129       149.805    
  11  0.620842     -0.476679     -0.721519      0.721519       149.818       150.540    
  12  0.850691     -0.161706     -0.244765      0.244765       151.337       151.582    
  13  0.308317      -1.17663      -1.78098       1.78098       149.281       151.062    
  14  0.198496      -1.61698      -2.44753       2.44753       151.679       154.126    
  15  0.119809      -2.12186      -3.21172       3.21172       151.692       154.904    
  16  0.905871     -0.988582E-01 -0.149635      0.149635       151.274       151.424    
  17  0.386344     -0.951028      -1.43951       1.43951       152.040       153.480    
  18  0.112809      -2.18206      -3.30284       3.30284       150.503       153.805    
  19  0.682866     -0.381457     -0.577388      0.577388       152.119       152.697    
  20  0.819362     -0.199230     -0.301562      0.301562       152.374       152.676    
  21  0.412742     -0.884933      -1.33947       1.33947       150.469       151.808    
  22  0.211811E-01  -3.85464      -5.83453       5.83453       151.784       157.618    
  23  0.422800     -0.860857      -1.30302       1.30302       150.890       152.193    
  24  0.826028     -0.191126     -0.289296      0.289296       152.254       152.544    
  25  0.457858     -0.781197      -1.18245       1.18245       151.846       153.028    
  26  0.551067     -0.595900     -0.901975      0.901975       150.797       151.699    
  27  0.160440      -1.82984      -2.76971       2.76971       152.866       155.636    
  28  0.240310      -1.42582      -2.15818       2.15818       152.198       154.356    
  29  0.614859     -0.486362     -0.736175      0.736175       152.717       153.453    
  30  0.489204     -0.714976      -1.08221       1.08221       148.852       149.934    
  31  0.151691      -1.88591      -2.85458       2.85458       152.501       155.355    
  32  0.221776      -1.50609      -2.27967       2.27967       152.477       154.757    
  33  0.333050      -1.09946      -1.66419       1.66419       151.313       152.977    
  34  0.905001     -0.998190E-01 -0.151090      0.151090       153.530       153.681    
  35  0.598599     -0.513164     -0.776743      0.776743       150.157       150.934    
  36  0.603742     -0.504608     -0.763793      0.763793       150.497       151.261    
  37  0.989214     -0.108448E-01 -0.164151E-01  0.164151E-01   152.325       152.342    
  38  0.175887      -1.73792      -2.63057       2.63057       153.690       156.321    
  39  0.708621     -0.344434     -0.521349      0.521349       153.169       153.690    
  40  0.940581     -0.612570E-01 -0.927209E-01  0.927209E-01   152.640       152.733    
  41  0.870068     -0.139184     -0.210673      0.210673       151.177       151.388    
  42  0.260264      -1.34606      -2.03745       2.03745       152.390       154.428    
  43  0.216654      -1.52946      -2.31504       2.31504       154.062       156.377    
  44  0.553762     -0.591020     -0.894589      0.894589       150.536       151.431    
  45  0.891465     -0.114889     -0.173900      0.173900       153.535       153.709    
  46  0.320048      -1.13928      -1.72446       1.72446       154.646       156.370    
  47  0.163518      -1.81083      -2.74094       2.74094       153.051       155.792    
  48  0.652431     -0.427050     -0.646399      0.646399       153.409       154.056    
  49  0.317737      -1.14653      -1.73543       1.73543       150.944       152.680    
  50  0.321191      -1.13572      -1.71906       1.71906       154.189       155.908    
  51  0.750162     -0.287466     -0.435119      0.435119       152.603       153.039    
  52  0.172611      -1.75672      -2.65903       2.65903       153.419       156.078    
  53  0.413556     -0.882963      -1.33649       1.33649       154.894       156.230    
  54  0.277750      -1.28103      -1.93902       1.93902       155.207       157.146    
  55  0.326826      -1.11833      -1.69274       1.69274       154.726       156.419    
  56  0.922327     -0.808557E-01 -0.122386      0.122386       155.551       155.673    
  57  0.572255     -0.558170     -0.844867      0.844867       155.176       156.020    
  58  0.149549      -1.90013      -2.87610       2.87610       153.309       156.186    
  59  0.266959      -1.32066      -1.99900       1.99900       155.803       157.802    
  60  0.636795     -0.451307     -0.683115      0.683115       156.420       157.103    
  61  0.868293     -0.141226     -0.213765      0.213765       156.578       156.792    
  62  0.597909     -0.514316     -0.778488      0.778488       155.637       156.415    
  63  0.121507      -2.10778      -3.19042       3.19042       154.957       158.147    
  64  0.606075     -0.500751     -0.757956      0.757956       151.560       152.318    
  65  0.390347     -0.940720      -1.42391       1.42391       155.132       156.555    
  66  0.175787      -1.73849      -2.63143       2.63143       152.720       155.352    
  67  0.756550     -0.278986     -0.422284      0.422284       151.287       151.709    
  68  0.753054     -0.283618     -0.429295      0.429295       155.270       155.699    
  69  0.451941     -0.794203      -1.20213       1.20213       153.572       154.774    
  70  0.637492     -0.450214     -0.681461      0.681461       156.387       157.069    
  71  0.462733     -0.770606      -1.16642       1.16642       155.841       157.008    
  72  0.785570E-02  -4.84652      -7.33587       7.33587       155.109       162.444    
  73  0.870075     -0.139176     -0.210661      0.210661       153.757       153.968    
  74  0.524119     -0.646036     -0.977864      0.977864       158.361       159.339    
  75  0.314209      -1.15770      -1.75233       1.75233       153.432       155.185    
loop,thermsimp(1:2)       39  0.344976       1.78844    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    463        151.04          0.87          1.16         25.25          0.21          0.06         27.54
Just calling func    0   0         27.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       39
neval is:      462
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       40
neval is:      462


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      462     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783363     -0.244159     -0.369568      0.369568       148.507       148.877    
   2  0.179321      -1.71858      -2.60130       2.60130       149.272       151.874    
   3  0.331080      -1.10539      -1.67317       1.67317       149.129       150.803    
   4  0.130870      -2.03355      -3.07806       3.07806       148.852       151.930    
   5  0.604904     -0.502686     -0.760884      0.760884       148.625       149.386    
   6  0.140568      -1.96207      -2.96986       2.96986       150.072       153.042    
   7  0.127414      -2.06031      -3.11857       3.11857       149.772       152.891    
   8  0.389565     -0.942725      -1.42694       1.42694       149.818       151.245    
   9  0.835608     -0.179595     -0.271842      0.271842       148.996       149.268    
  10  0.934873     -0.673445E-01 -0.101935      0.101935       150.157       150.259    
  11  0.639074     -0.447735     -0.677709      0.677709       149.281       149.958    
  12  0.349757      -1.05052      -1.59010       1.59010       150.497       152.087    
  13  0.175521      -1.74000      -2.63372       2.63372       151.177       153.811    
  14  0.761611     -0.272320     -0.412193      0.412193       151.274       151.686    
  15  0.162952      -1.81430      -2.74619       2.74619       150.536       153.282    
  16  0.542858     -0.610907     -0.924691      0.924691       151.337       152.262    
  17  0.715099     -0.335334     -0.507573      0.507573       150.797       151.305    
  18  0.996052     -0.395608E-02 -0.598806E-02  0.598806E-02   151.287       151.293    
  19  0.668265     -0.403070     -0.610102      0.610102       150.469       151.079    
  20  0.294619      -1.22207      -1.84978       1.84978       150.039       151.889    
  21  0.721551     -0.326352     -0.493978      0.493978       150.890       151.384    
  22  0.216610      -1.52966      -2.31535       2.31535       151.560       153.875    
  23  0.649086     -0.432191     -0.654180      0.654180       152.325       152.979    
  24  0.692922E-01  -2.66942      -4.04054       4.04054       152.254       156.295    
  25  0.271271      -1.30464      -1.97475       1.97475       152.374       154.349    
  26  0.407239     -0.898355      -1.35978       1.35978       150.944       152.304    
  27  0.435034     -0.832331      -1.25985       1.25985       152.119       153.379    
  28  0.638725     -0.448281     -0.678535      0.678535       152.640       153.319    
  29  0.932325     -0.700735E-01 -0.106066      0.106066       151.313       151.419    
  30  0.958672     -0.422065E-01 -0.638853E-01  0.638853E-01   151.846       151.910    
  31  0.336870      -1.08806      -1.64692       1.64692       149.126       150.772    
  32  0.453036     -0.791783      -1.19847       1.19847       152.603       153.802    
  33  0.422569     -0.861402      -1.30385       1.30385       152.717       154.021    
  34  0.596674     -0.516385     -0.781619      0.781619       152.040       152.822    
  35  0.586088     -0.534286     -0.808714      0.808714       153.530       154.339    
  36  0.174805      -1.74409      -2.63991       2.63991       153.169       155.809    
  37  0.854432     -0.157318     -0.238123      0.238123       153.535       153.773    
  38  0.754323     -0.281935     -0.426748      0.426748       150.503       150.929    
  39  0.956897     -0.440598E-01 -0.666906E-01  0.666906E-01   153.757       153.824    
  40  0.334431      -1.09533      -1.65792       1.65792       153.409       155.067    
  41  0.750609     -0.286871     -0.434218      0.434218       151.679       152.113    
  42  0.778602     -0.250255     -0.378795      0.378795       152.198       152.577    
  43  0.330765      -1.10635      -1.67461       1.67461       152.390       154.065    
  44  0.601104     -0.508987     -0.770422      0.770422       152.477       153.248    
  45  0.578570     -0.547197     -0.828257      0.828257       153.572       154.401    
  46  0.381025     -0.964891      -1.46050       1.46050       151.692       153.153    
  47  0.764260     -0.268847     -0.406936      0.406936       153.432       153.839    
  48  0.194556      -1.63704      -2.47788       2.47788       150.154       152.632    
  49  0.785702E-01  -2.54376      -3.85033       3.85033       152.720       156.571    
  50  0.253837E-01  -3.67365      -5.56057       5.56057       152.501       158.061    
  51  0.149049      -1.90348      -2.88117       2.88117       152.866       155.747    
  52  0.591675     -0.524797     -0.794353      0.794353       155.551       156.345    
  53  0.471206     -0.752459      -1.13895       1.13895       155.270       156.409    
  54  0.734409     -0.308689     -0.467243      0.467243       153.051       153.518    
  55  0.183368      -1.69626      -2.56752       2.56752       154.189       156.757    
  56  0.296126      -1.21697      -1.84205       1.84205       155.176       157.018    
  57  0.664218     -0.409144     -0.619296      0.619296       153.419       154.039    
  58  0.863102     -0.147223     -0.222842      0.222842       153.309       153.532    
  59  0.142776      -1.94648      -2.94626       2.94626       154.894       157.840    
  60  0.995423     -0.458719E-02 -0.694334E-02  0.694334E-02   153.690       153.697    
  61  0.721084     -0.327000     -0.494959      0.494959       154.646       155.141    
  62  0.336569      -1.08895      -1.64828       1.64828       154.062       155.710    
  63  0.785569     -0.241347     -0.365311      0.365311       155.637       156.002    
  64  0.518120     -0.657548     -0.995289      0.995289       154.726       155.722    
  65  0.988600     -0.114656E-01 -0.173548E-01  0.173548E-01   155.132       155.149    
  66  0.584794     -0.536495     -0.812059      0.812059       156.578       157.390    
  67  0.724983     -0.321607     -0.486797      0.486797       155.841       156.328    
  68  0.386472E-01  -3.25328      -4.92429       4.92429       156.387       161.311    
  69  0.313021      -1.16149      -1.75807       1.75807       156.420       158.178    
  70  0.234708      -1.44941      -2.19389       2.19389       155.207       157.401    
  71  0.744664     -0.294822     -0.446253      0.446253       151.784       152.230    
  72  0.514978     -0.663630      -1.00449       1.00449       155.803       156.808    
  73  0.771007     -0.260058     -0.393633      0.393633       154.957       155.350    
  74  0.880944     -0.126762     -0.191871      0.191871       158.361       158.553    
  75  0.848135     -0.164715     -0.249319      0.249319       151.041       151.291    
loop,thermsimp(1:2)       40  0.369568       2.60130    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    464        149.31          0.87          1.16         25.26          0.09          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    149.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       40
neval is:      463
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       41
neval is:      463


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      463     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762547     -0.271091     -0.410334      0.410334       148.507       148.918    
   2  0.700395     -0.356110     -0.539022      0.539022       148.996       149.535    
   3  0.110610      -2.20174      -3.33264       3.33264       148.625       151.958    
   4  0.542261     -0.612007     -0.926357      0.926357       149.281       150.207    
   5  0.993402     -0.662023E-02 -0.100206E-01  0.100206E-01   150.157       150.167    
   6  0.370923     -0.991761      -1.50117       1.50117       149.126       150.627    
   7  0.311008      -1.16794      -1.76783       1.76783       149.129       150.897    
   8  0.120775      -2.11383      -3.19957       3.19957       150.503       153.702    
   9  0.496739     -0.699690      -1.05908       1.05908       150.469       151.528    
  10  0.823539     -0.194144     -0.293864      0.293864       149.818       150.112    
  11  0.401420     -0.912746      -1.38157       1.38157       151.041       152.423    
  12  0.467810E-01  -3.06228      -4.63518       4.63518       151.287       155.922    
  13  0.104633      -2.25729      -3.41672       3.41672       150.797       154.214    
  14  0.233534      -1.45443      -2.20148       2.20148       150.890       153.091    
  15  0.959269     -0.415834E-01 -0.629421E-01  0.629421E-01   151.313       151.376    
  16  0.359845      -1.02208      -1.54706       1.54706       151.274       152.821    
  17  0.141753E-01  -4.25626      -6.44242       6.44242       149.272       155.715    
  18  0.566935     -0.567510     -0.859004      0.859004       150.039       150.898    
  19  0.901077     -0.104164     -0.157667      0.157667       151.846       152.004    
  20  0.465285     -0.765104      -1.15809       1.15809       148.852       150.010    
  21  0.315152      -1.15470      -1.74780       1.74780       150.497       152.245    
  22  0.954826     -0.462256E-01 -0.699688E-01  0.699688E-01   151.679       151.749    
  23  0.110663      -2.20127      -3.33192       3.33192       151.784       155.116    
  24  0.851067     -0.161264     -0.244095      0.244095       151.337       151.581    
  25  0.768372     -0.263481     -0.398814      0.398814       150.944       151.343    
  26  0.243081      -1.41436      -2.14083       2.14083       152.198       154.339    
  27  0.434279     -0.834069      -1.26248       1.26248       150.154       151.416    
  28  0.855138     -0.156492     -0.236872      0.236872       152.040       152.277    
  29  0.238302      -1.43422      -2.17088       2.17088       149.772       151.943    
  30  0.445547     -0.808452      -1.22370       1.22370       152.325       153.549    
  31  0.290285      -1.23689      -1.87220       1.87220       150.072       151.944    
  32  0.479492     -0.735029      -1.11257       1.11257       151.692       152.805    
  33  0.359712      -1.02245      -1.54762       1.54762       152.477       154.025    
  34  0.429040     -0.846204      -1.28085       1.28085       150.536       151.817    
  35  0.570900     -0.560541     -0.848456      0.848456       152.640       153.489    
  36  0.151312      -1.88841      -2.85837       2.85837       152.119       154.978    
  37  0.671837     -0.397739     -0.602032      0.602032       153.051       153.653    
  38  0.699384     -0.357556     -0.541210      0.541210       153.309       153.851    
  39  0.337756      -1.08543      -1.64295       1.64295       153.690       155.333    
  40  0.508282     -0.676718      -1.02431       1.02431       153.535       154.559    
  41  0.153085      -1.87676      -2.84074       2.84074       152.603       155.444    
  42  0.859571     -0.151322     -0.229047      0.229047       151.177       151.406    
  43  0.240559      -1.42479      -2.15662       2.15662       153.757       155.914    
  44  0.956907     -0.440496E-01 -0.666751E-01  0.666751E-01   153.432       153.499    
  45  0.695010     -0.363829     -0.550705      0.550705       151.560       152.111    
  46  0.258459      -1.35302      -2.04798       2.04798       152.717       154.765    
  47  0.851968     -0.160207     -0.242495      0.242495       153.419       153.662    
  48  0.755235     -0.280726     -0.424917      0.424917       152.390       152.815    
  49  0.618135     -0.481049     -0.728133      0.728133       153.530       154.258    
  50  0.366071      -1.00493      -1.52110       1.52110       152.374       153.895    
  51  0.768800     -0.262924     -0.397972      0.397972       153.572       153.970    
  52  0.704229     -0.350652     -0.530760      0.530760       153.409       153.940    
  53  0.900469     -0.104839     -0.158688      0.158688       154.646       154.804    
  54  0.175085      -1.74249      -2.63749       2.63749       155.132       157.769    
  55  0.905870     -0.988595E-01 -0.149637      0.149637       154.957       155.106    
  56  0.107963E-01  -4.52856      -6.85459       6.85459       154.062       160.916    
  57  0.493411     -0.706413      -1.06925       1.06925       154.726       155.796    
  58  0.538221     -0.619486     -0.937677      0.937677       152.866       153.804    
  59  0.626575     -0.467488     -0.707606      0.707606       153.169       153.876    
  60  0.904814     -0.100026     -0.151402      0.151402       155.637       155.788    
  61  0.266015      -1.32420      -2.00436       2.00436       152.254       154.259    
  62  0.328156      -1.11427      -1.68659       1.68659       155.841       157.528    
  63  0.664881     -0.408147     -0.617786      0.617786       155.551       156.169    
  64  0.858127     -0.153003     -0.231592      0.231592       155.270       155.501    
  65  0.299604      -1.20529      -1.82438       1.82438       152.720       154.545    
  66  0.220344E-01  -3.81515      -5.77475       5.77475       154.189       159.964    
  67  0.671608     -0.398081     -0.602550      0.602550       155.803       156.406    
  68  0.576408E-01  -2.85353      -4.31920       4.31920       155.176       159.495    
  69  0.905087     -0.997240E-01 -0.150946      0.150946       156.578       156.729    
  70  0.830967     -0.185166     -0.280273      0.280273       155.207       155.488    
  71  0.810927     -0.209577     -0.317224      0.317224       154.894       155.211    
  72  0.374578     -0.981955      -1.48632       1.48632       152.501       153.987    
  73  0.852638     -0.159420     -0.241304      0.241304       156.420       156.661    
  74  0.435106     -0.832165      -1.25960       1.25960       158.361       159.621    
  75  0.371300     -0.990744      -1.49963       1.49963       149.307       150.806    
loop,thermsimp(1:2)       41  0.410334      0.539022    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    465        150.74          0.87          1.16         25.24          0.13          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    466        155.30          0.84          1.17         25.26          0.20          0.06         27.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    150.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       41
neval is:      465
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       42
neval is:      465


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      465     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633054     -0.457200     -0.692035      0.692035       148.507       149.199    
   2  0.416661     -0.875483      -1.32516       1.32516       148.996       150.321    
   3  0.671058E-01  -2.70149      -4.08907       4.08907       148.852       152.941    
   4  0.701446     -0.354612     -0.536754      0.536754       149.818       150.355    
   5  0.176715      -1.73321      -2.62346       2.62346       150.157       152.781    
   6  0.223035      -1.50042      -2.27110       2.27110       149.281       151.552    
   7  0.907694E-01  -2.39943      -3.63187       3.63187       149.126       152.757    
   8  0.113202      -2.17858      -3.29758       3.29758       149.307       152.604    
   9  0.443192     -0.813753      -1.23173       1.23173       149.129       150.361    
  10  0.999048     -0.952172E-03 -0.144124E-02  0.144124E-02   150.039       150.041    
  11  0.606200     -0.500546     -0.757645      0.757645       150.944       151.702    
  12  0.120370      -2.11718      -3.20464       3.20464       151.313       154.517    
  13  0.448885     -0.800988      -1.21241       1.21241       151.177       152.390    
  14  0.531880     -0.631338     -0.955617      0.955617       150.154       151.109    
  15  0.804789     -0.217176     -0.328725      0.328725       150.469       150.797    
  16  0.427230     -0.850433      -1.28725       1.28725       151.337       152.624    
  17  0.222958      -1.50077      -2.27162       2.27162       151.679       153.950    
  18  0.850765     -0.161619     -0.244632      0.244632       150.536       150.781    
  19  0.926988     -0.758150E-01 -0.114756      0.114756       149.772       149.887    
  20  0.729073     -0.315981     -0.478281      0.478281       150.072       150.550    
  21  0.411512     -0.887916      -1.34398       1.34398       148.625       149.969    
  22  0.692157     -0.367942     -0.556931      0.556931       151.846       152.403    
  23  0.917319     -0.862998E-01 -0.130627      0.130627       151.560       151.691    
  24  0.376398     -0.977107      -1.47899       1.47899       150.497       151.976    
  25  0.276694      -1.28484      -1.94479       1.94479       152.040       153.985    
  26  0.296319      -1.21632      -1.84107       1.84107       151.041       152.882    
  27  0.395623     -0.927294      -1.40359       1.40359       151.692       153.096    
  28  0.397122     -0.923511      -1.39786       1.39786       152.390       153.788    
  29  0.414944     -0.879612      -1.33141       1.33141       151.274       152.605    
  30  0.249325      -1.38900      -2.10244       2.10244       150.890       152.992    
  31  0.668798     -0.402273     -0.608896      0.608896       152.640       153.249    
  32  0.765717     -0.266942     -0.404054      0.404054       153.432       153.836    
  33  0.420183     -0.867066      -1.31242       1.31242       152.325       153.638    
  34  0.851189     -0.161121     -0.243879      0.243879       153.051       153.294    
  35  0.733154     -0.310400     -0.469833      0.469833       153.419       153.889    
  36  0.721185E-01  -2.62944      -3.98002       3.98002       150.503       154.483    
  37  0.356766      -1.03068      -1.56007       1.56007       152.866       154.426    
  38  0.654280     -0.424220     -0.642115      0.642115       153.309       153.952    
  39  0.662515     -0.411712     -0.623182      0.623182       153.169       153.792    
  40  0.164156      -1.80694      -2.73505       2.73505       152.374       155.109    
  41  0.116179      -2.15263      -3.25829       3.25829       153.409       156.668    
  42  0.134772      -2.00417      -3.03359       3.03359       153.572       156.606    
  43  0.298842      -1.20784      -1.82823       1.82823       152.501       154.329    
  44  0.583690     -0.538385     -0.814919      0.814919       152.477       153.292    
  45  0.894896     -0.111047     -0.168085      0.168085       150.797       150.965    
  46  0.148951      -1.90414      -2.88217       2.88217       153.530       156.412    
  47  0.315615      -1.15323      -1.74557       1.74557       152.254       154.000    
  48  0.810942     -0.209558     -0.317195      0.317195       152.198       152.515    
  49  0.697490     -0.360268     -0.545315      0.545315       152.720       153.266    
  50  0.440376     -0.820127      -1.24137       1.24137       153.535       154.776    
  51  0.987477     -0.126020E-01 -0.190748E-01  0.190748E-01   152.717       152.736    
  52  0.788027     -0.238223     -0.360583      0.360583       154.646       155.006    
  53  0.304959      -1.18758      -1.79756       1.79756       152.119       153.917    
  54  0.918046     -0.855075E-01 -0.129427      0.129427       154.957       155.086    
  55  0.436819     -0.828237      -1.25365       1.25365       151.784       153.038    
  56  0.983182     -0.169609E-01 -0.256727E-01  0.256727E-01   154.894       154.920    
  57  0.635334     -0.453604     -0.686591      0.686591       153.690       154.377    
  58  0.331329      -1.10464      -1.67203       1.67203       152.603       154.275    
  59  0.410737     -0.889801      -1.34684       1.34684       155.207       156.554    
  60  0.351373      -1.04591      -1.58312       1.58312       155.270       156.853    
  61  0.340199      -1.07823      -1.63204       1.63204       149.272       150.904    
  62  0.510393     -0.672575      -1.01803       1.01803       155.637       156.655    
  63  0.249777      -1.38719      -2.09970       2.09970       154.726       156.826    
  64  0.432656     -0.837813      -1.26814       1.26814       153.757       155.026    
  65  0.323628      -1.12816      -1.70763       1.70763       151.287       152.994    
  66  0.179237      -1.71905      -2.60201       2.60201       155.551       158.153    
  67  0.836000     -0.179126     -0.271132      0.271132       155.803       156.075    
  68  0.438142     -0.825211      -1.24907       1.24907       156.420       157.669    
  69  0.398911     -0.919018      -1.39106       1.39106       156.578       157.969    
  70  0.700182     -0.356415     -0.539483      0.539483       155.841       156.381    
  71  0.792556     -0.232492     -0.351909      0.351909       155.132       155.483    
  72  0.156512      -1.85462      -2.80722       2.80722       155.176       157.983    
  73  0.762370     -0.271323     -0.410684      0.410684       158.361       158.772    
  74  0.746261     -0.292680     -0.443012      0.443012       154.189       154.632    
  75  0.728802     -0.316354     -0.478844      0.478844       150.744       151.223    
loop,thermsimp(1:2)       42  0.692035       1.32516    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    467        148.54          0.87          1.15         25.29          0.50          0.06         27.86
Just calling func    0   0         27.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    468        155.92          0.85          1.14         25.25          0.12          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       42
neval is:      467
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       43
neval is:      467


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      467     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.165518      -1.79868      -2.72254       2.72254       148.507       151.230    
   2  0.737067     -0.305077     -0.461776      0.461776       149.772       150.234    
   3  0.332012      -1.10258      -1.66891       1.66891       148.625       150.294    
   4  0.756847     -0.278594     -0.421690      0.421690       150.039       150.461    
   5  0.168413      -1.78134      -2.69630       2.69630       148.996       151.692    
   6  0.422244     -0.862172      -1.30501       1.30501       149.818       151.123    
   7  0.865590     -0.144344     -0.218485      0.218485       149.129       149.348    
   8  0.820021     -0.198425     -0.300343      0.300343       150.072       150.372    
   9  0.681904     -0.382867     -0.579521      0.579521       150.536       151.116    
  10  0.476378E-02  -5.34671      -8.09298       8.09298       150.469       158.562    
  11  0.891588     -0.114751     -0.173691      0.173691       149.272       149.446    
  12  0.583910     -0.538008     -0.814349      0.814349       150.797       151.611    
  13  0.224086      -1.49572      -2.26398       2.26398       150.154       152.418    
  14  0.550831     -0.596327     -0.902623      0.902623       150.744       151.647    
  15  0.109755      -2.20951      -3.34439       3.34439       149.281       152.625    
  16  0.173189      -1.75337      -2.65397       2.65397       151.560       154.214    
  17  0.822854     -0.194976     -0.295124      0.295124       150.944       151.239    
  18  0.792562     -0.232484     -0.351896      0.351896       150.497       150.849    
  19  0.383253     -0.959060      -1.45167       1.45167       151.177       152.629    
  20  0.422533     -0.861488      -1.30398       1.30398       151.846       153.150    
  21  0.811047     -0.209429     -0.316999      0.316999       152.198       152.515    
  22  0.860783     -0.149912     -0.226913      0.226913       149.307       149.533    
  23  0.751011     -0.286335     -0.433407      0.433407       151.274       151.707    
  24  0.358967      -1.02452      -1.55076       1.55076       151.337       152.888    
  25  0.877019     -0.131227     -0.198630      0.198630       152.717       152.916    
  26  0.441658     -0.817220      -1.23697       1.23697       149.126       150.362    
  27  0.259650      -1.34842      -2.04102       2.04102       150.157       152.198    
  28  0.106035      -2.24398      -3.39658       3.39658       151.041       154.438    
  29  0.608421     -0.496887     -0.752107      0.752107       148.852       149.604    
  30  0.143099      -1.94422      -2.94284       2.94284       150.890       153.833    
  31  0.242177      -1.41809      -2.14647       2.14647       151.287       153.433    
  32  0.517081     -0.659556     -0.998329      0.998329       151.784       152.782    
  33  0.492461     -0.708339      -1.07217       1.07217       151.692       152.764    
  34  0.839297     -0.175190     -0.265175      0.265175       152.640       152.905    
  35  0.824305     -0.193215     -0.292457      0.292457       152.720       153.013    
  36  0.742325     -0.297968     -0.451016      0.451016       152.477       152.928    
  37  0.158654      -1.84103      -2.78665       2.78665       153.051       155.837    
  38  0.702604     -0.352962     -0.534256      0.534256       152.325       152.860    
  39  0.324396      -1.12579      -1.70404       1.70404       152.390       154.094    
  40  0.628286     -0.464760     -0.703478      0.703478       153.169       153.872    
  41  0.896889     -0.108823     -0.164718      0.164718       153.432       153.597    
  42  0.325633      -1.12199      -1.69828       1.69828       153.419       155.118    
  43  0.833588     -0.182016     -0.275506      0.275506       152.119       152.395    
  44  0.292459      -1.22943      -1.86091       1.86091       151.679       153.540    
  45  0.625236     -0.469626     -0.710843      0.710843       153.309       154.020    
  46  0.613119     -0.489197     -0.740466      0.740466       152.040       152.781    
  47  0.521950     -0.650183     -0.984141      0.984141       152.254       153.239    
  48  0.999935     -0.646019E-04 -0.977838E-04  0.977838E-04   152.603       152.604    
  49  0.971287E-01  -2.33172      -3.52937       3.52937       152.501       156.030    
  50  0.982535     -0.176198E-01 -0.266699E-01  0.266699E-01   153.690       153.717    
  51  0.930778     -0.717347E-01 -0.108580      0.108580       152.866       152.975    
  52  0.566446     -0.568373     -0.860310      0.860310       150.503       151.363    
  53  0.671812     -0.397777     -0.602090      0.602090       151.313       151.915    
  54  0.814331     -0.205388     -0.310883      0.310883       154.189       154.500    
  55  0.593504     -0.521712     -0.789683      0.789683       153.535       154.324    
  56  0.338750      -1.08249      -1.63850       1.63850       154.894       156.532    
  57  0.584939     -0.536248     -0.811685      0.811685       154.646       155.457    
  58  0.576637     -0.550541     -0.833320      0.833320       153.757       154.591    
  59  0.324991      -1.12396      -1.70127       1.70127       154.957       156.658    
  60  0.320844E-01  -3.43939      -5.20598       5.20598       152.374       157.580    
  61  0.711764     -0.340009     -0.514650      0.514650       155.132       155.646    
  62  0.340665      -1.07686      -1.62997       1.62997       155.803       157.433    
  63  0.423626E-01  -3.16149      -4.78535       4.78535       155.841       160.627    
  64  0.672710     -0.396440     -0.600067      0.600067       153.530       154.130    
  65  0.654240     -0.424282     -0.642208      0.642208       155.207       155.850    
  66  0.548342     -0.600856     -0.909478      0.909478       153.572       154.482    
  67  0.305403      -1.18612      -1.79536       1.79536       155.637       157.432    
  68  0.449145     -0.800410      -1.21153       1.21153       153.409       154.621    
  69  0.889699     -0.116872     -0.176901      0.176901       154.726       154.903    
  70  0.474782     -0.744900      -1.12751       1.12751       155.270       156.397    
  71  0.779181     -0.249512     -0.377671      0.377671       156.420       156.797    
  72  0.382818     -0.960196      -1.45339       1.45339       156.578       158.031    
  73  0.269854      -1.30988      -1.98268       1.98268       155.176       157.158    
  74  0.302587      -1.19539      -1.80938       1.80938       155.551       157.360    
  75  0.247623      -1.39585      -2.11281       2.11281       148.541       150.654    
loop,thermsimp(1:2)       43   2.72254      0.461776    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    469        179.15          0.87          1.16         25.25          0.13          0.06         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    470        152.10          0.87          1.15         25.25          0.09          0.06         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    152.10
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       43
neval is:      469
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       44
neval is:      469


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      469     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960290E-01  -2.34311      -3.54661       3.54661       149.129       152.676    
   2  0.509377     -0.674566      -1.02105       1.02105       149.272       150.293    
   3  0.960906     -0.398785E-01 -0.603616E-01  0.603616E-01   149.307       149.367    
   4  0.145058      -1.93062      -2.92226       2.92226       148.852       151.774    
   5  0.584668     -0.536711     -0.812386      0.812386       149.772       150.585    
   6  0.137819      -1.98182      -2.99975       2.99975       148.625       151.625    
   7  0.829899     -0.186451     -0.282219      0.282219       149.126       149.408    
   8  0.249142      -1.38973      -2.10355       2.10355       150.072       152.175    
   9  0.471049     -0.752793      -1.13945       1.13945       150.039       151.179    
  10  0.744784E-01  -2.59725      -3.93129       3.93129       148.541       152.473    
  11  0.233158      -1.45604      -2.20392       2.20392       150.497       152.701    
  12  0.714243E-01  -2.63912      -3.99466       3.99466       150.536       154.531    
  13  0.749743     -0.288025     -0.435966      0.435966       149.818       150.254    
  14  0.873534     -0.135209     -0.204657      0.204657       148.507       148.712    
  15  0.265951      -1.32444      -2.00472       2.00472       150.944       152.949    
  16  0.328438      -1.11341      -1.68529       1.68529       150.503       152.188    
  17  0.988010     -0.120622E-01 -0.182578E-01  0.182578E-01   150.797       150.815    
  18  0.737788     -0.304099     -0.460295      0.460295       150.744       151.205    
  19  0.171086E-01  -4.06818      -6.15774       6.15774       148.996       155.154    
  20  0.452693     -0.792540      -1.19962       1.19962       151.274       152.473    
  21  0.922976     -0.801523E-01 -0.121321      0.121321       151.313       151.434    
  22  0.323108      -1.12977      -1.71006       1.71006       150.157       151.867    
  23  0.740032     -0.301062     -0.455698      0.455698       152.119       152.575    
  24  0.606229     -0.500498     -0.757572      0.757572       150.154       150.911    
  25  0.813501     -0.206408     -0.312427      0.312427       152.198       152.511    
  26  0.457664     -0.781621      -1.18309       1.18309       152.603       153.787    
  27  0.848286     -0.164537     -0.249050      0.249050       149.281       149.530    
  28  0.430827E-01  -3.14463      -4.75983       4.75983       151.177       155.937    
  29  0.215038      -1.53694      -2.32637       2.32637       151.692       154.019    
  30  0.955068     -0.459730E-01 -0.695864E-01  0.695864E-01   152.040       152.110    
  31  0.100248      -2.30011      -3.48153       3.48153       151.784       155.265    
  32  0.272794      -1.29904      -1.96627       1.96627       152.325       154.292    
  33  0.796201E-01  -2.53049      -3.83024       3.83024       151.337       155.167    
  34  0.143803      -1.93931      -2.93541       2.93541       152.640       155.576    
  35  0.151473      -1.88734      -2.85675       2.85675       152.717       155.574    
  36  0.212508      -1.54878      -2.34429       2.34429       152.477       154.821    
  37  0.570089     -0.561962     -0.850607      0.850607       152.866       153.717    
  38  0.811663     -0.208669     -0.315850      0.315850       152.720       153.036    
  39  0.652193E-01  -2.73000      -4.13223       4.13223       151.846       155.978    
  40  0.753919     -0.282470     -0.427557      0.427557       152.254       152.682    
  41  0.915721     -0.880434E-01 -0.133266      0.133266       151.287       151.420    
  42  0.689805     -0.371347     -0.562084      0.562084       151.679       152.241    
  43  0.296032      -1.21729      -1.84253       1.84253       153.432       155.275    
  44  0.685645     -0.377395     -0.571239      0.571239       153.690       154.262    
  45  0.931075     -0.714153E-01 -0.108097      0.108097       150.890       150.998    
  46  0.273544      -1.29629      -1.96212       1.96212       153.169       155.131    
  47  0.269804E-01  -3.61265      -5.46823       5.46823       153.309       158.778    
  48  0.684598     -0.378923     -0.573552      0.573552       152.390       152.964    
  49  0.724056     -0.322886     -0.488732      0.488732       153.530       154.019    
  50  0.655515     -0.422333     -0.639259      0.639259       151.560       152.199    
  51  0.338921E-01  -3.38457      -5.12301       5.12301       153.535       158.658    
  52  0.503484     -0.686204      -1.03866       1.03866       151.041       152.080    
  53  0.283419      -1.26083      -1.90844       1.90844       153.572       155.481    
  54  0.495421     -0.702347      -1.06310       1.06310       154.189       155.252    
  55  0.966701     -0.338659E-01 -0.512606E-01  0.512606E-01   153.757       153.809    
  56  0.491710     -0.709867      -1.07448       1.07448       153.409       154.484    
  57  0.456917     -0.783254      -1.18556       1.18556       154.726       155.912    
  58  0.970984E-01  -2.33203      -3.52985       3.52985       153.419       156.949    
  59  0.713520     -0.337545     -0.510920      0.510920       154.646       155.156    
  60  0.611795E-01  -2.79394      -4.22902       4.22902       155.132       159.361    
  61  0.122834      -2.09692      -3.17398       3.17398       153.051       156.225    
  62  0.686483     -0.376174     -0.569390      0.569390       155.207       155.777    
  63  0.525237     -0.643905     -0.974638      0.974638       152.501       153.476    
  64  0.365531      -1.00640      -1.52333       1.52333       155.270       156.793    
  65  0.647121     -0.435221     -0.658767      0.658767       154.894       155.553    
  66  0.284779      -1.25604      -1.90119       1.90119       154.957       156.858    
  67  0.871365     -0.137695     -0.208420      0.208420       156.420       156.628    
  68  0.901193     -0.104035     -0.157472      0.157472       155.176       155.333    
  69  0.405524     -0.902575      -1.36617       1.36617       155.551       156.917    
  70  0.392729     -0.934635      -1.41470       1.41470       155.637       157.052    
  71  0.526508     -0.641489     -0.970982      0.970982       155.803       156.774    
  72  0.562155     -0.575977     -0.871820      0.871820       152.374       153.246    
  73  0.819390     -0.199195     -0.301508      0.301508       156.578       156.879    
  74  0.810601     -0.209980     -0.317833      0.317833       150.469       150.786    
  75  0.129025      -2.04775      -3.09954       3.09954       152.100       155.200    
loop,thermsimp(1:2)       44   3.54661       1.02105    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    471        149.61          0.87          1.15         25.23          0.10          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    472        181.80          0.86          1.16         25.26          0.15          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       44
neval is:      471
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       45
neval is:      471


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      471     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960257     -0.405547E-01 -0.613851E-01  0.613851E-01   148.507       148.569    
   2  0.700631     -0.355774     -0.538513      0.538513       149.307       149.845    
   3  0.900697     -0.104586     -0.158306      0.158306       149.126       149.284    
   4  0.217613      -1.52504      -2.30836       2.30836       149.281       151.589    
   5  0.247850      -1.39493      -2.11142       2.11142       149.818       151.930    
   6  0.910358     -0.939170E-01 -0.142156      0.142156       149.272       149.414    
   7  0.983752     -0.163817E-01 -0.247960E-01  0.247960E-01   149.772       149.797    
   8  0.161223      -1.82497      -2.76234       2.76234       150.469       153.231    
   9  0.527720     -0.639190     -0.967501      0.967501       150.797       151.764    
  10  0.733734     -0.309609     -0.468636      0.468636       150.154       150.622    
  11  0.406982     -0.898986      -1.36074       1.36074       150.890       152.251    
  12  0.731735     -0.312337     -0.472765      0.472765       150.039       150.512    
  13  0.840576E-01  -2.47625      -3.74815       3.74815       150.744       154.493    
  14  0.505764     -0.681685      -1.03182       1.03182       151.287       152.319    
  15  0.130210      -2.03861      -3.08571       3.08571       151.313       154.398    
  16  0.565496     -0.570053     -0.862852      0.862852       148.625       149.488    
  17  0.944307     -0.573044E-01 -0.867381E-01  0.867381E-01   148.852       148.938    
  18  0.131761      -2.02676      -3.06778       3.06778       150.157       153.225    
  19  0.133275      -2.01534      -3.05049       3.05049       151.041       154.092    
  20  0.890936     -0.115482     -0.174798      0.174798       152.040       152.215    
  21  0.650633     -0.429809     -0.650575      0.650575       150.072       150.722    
  22  0.132428      -2.02172      -3.06015       3.06015       150.503       153.563    
  23  0.731494     -0.312666     -0.473263      0.473263       151.560       152.033    
  24  0.171092      -1.76556      -2.67241       2.67241       151.679       154.351    
  25  0.257579      -1.35643      -2.05314       2.05314       148.541       150.594    
  26  0.324882      -1.12429      -1.70177       1.70177       151.274       152.976    
  27  0.526591     -0.641331     -0.970743      0.970743       152.198       153.169    
  28  0.282402E-01  -3.56701      -5.39915       5.39915       152.119       157.519    
  29  0.983943     -0.161877E-01 -0.245023E-01  0.245023E-01   149.129       149.154    
  30  0.629559     -0.462735     -0.700413      0.700413       152.254       152.955    
  31  0.202469      -1.59717      -2.41754       2.41754       150.497       152.915    
  32  0.737565     -0.304401     -0.460752      0.460752       150.944       151.405    
  33  0.388307     -0.945960      -1.43184       1.43184       152.390       153.822    
  34  0.585207E-01  -2.83837      -4.29627       4.29627       152.720       157.017    
  35  0.900578     -0.104719     -0.158507      0.158507       152.374       152.532    
  36  0.420335     -0.866702      -1.31187       1.31187       152.501       153.813    
  37  0.730143     -0.314515     -0.476061      0.476061       152.866       153.342    
  38  0.448331     -0.802224      -1.21428       1.21428       152.603       153.818    
  39  0.344846      -1.06466      -1.61151       1.61151       153.757       155.369    
  40  0.854608     -0.157113     -0.237812      0.237812       151.692       151.930    
  41  0.537300     -0.621198     -0.940269      0.940269       153.530       154.470    
  42  0.164937      -1.80219      -2.72786       2.72786       153.690       156.418    
  43  0.595120E-01  -2.82158      -4.27084       4.27084       152.325       156.596    
  44  0.398267E-01  -3.22322      -4.87878       4.87878       153.409       158.288    
  45  0.183210      -1.69712      -2.56882       2.56882       150.536       153.105    
  46  0.184498      -1.69011      -2.55822       2.55822       152.477       155.035    
  47  0.306635      -1.18210      -1.78926       1.78926       153.169       154.958    
  48  0.868924     -0.140500     -0.212666      0.212666       148.996       149.208    
  49  0.841633     -0.172412     -0.260968      0.260968       154.646       154.907    
  50  0.988826     -0.112370E-01 -0.170087E-01  0.170087E-01   151.337       151.354    
  51  0.244835      -1.40717      -2.12994       2.12994       152.100       154.230    
  52  0.338105      -1.08440      -1.64139       1.64139       154.189       155.831    
  53  0.609151     -0.495689     -0.750293      0.750293       151.784       152.534    
  54  0.529733E-01  -2.93797      -4.44702       4.44702       153.432       157.879    
  55  0.319654      -1.14052      -1.72633       1.72633       155.176       156.902    
  56  0.997722     -0.228025E-02 -0.345147E-02  0.345147E-02   153.572       153.576    
  57  0.703037     -0.352346     -0.533324      0.533324       154.894       155.427    
  58  0.794182E-01  -2.53303      -3.83408       3.83408       152.717       156.551    
  59  0.286060      -1.25155      -1.89440       1.89440       152.640       154.535    
  60  0.416234     -0.876507      -1.32671       1.32671       155.207       156.534    
  61  0.645642     -0.437510     -0.662231      0.662231       154.726       155.389    
  62  0.125731      -2.07361      -3.13869       3.13869       151.177       154.316    
  63  0.929125     -0.735122E-01 -0.111271      0.111271       151.846       151.957    
  64  0.281203E-01  -3.57126      -5.40559       5.40559       153.051       158.456    
  65  0.726728     -0.319203     -0.483157      0.483157       156.420       156.903    
  66  0.983013     -0.171328E-01 -0.259329E-01  0.259329E-01   155.803       155.829    
  67  0.469835     -0.755373      -1.14336       1.14336       155.270       156.413    
  68  0.292002      -1.23099      -1.86328       1.86328       154.957       156.820    
  69  0.866442     -0.143360     -0.216994      0.216994       156.578       156.795    
  70  0.507493     -0.678272      -1.02666       1.02666       155.551       156.577    
  71  0.132034      -2.02470      -3.06466       3.06466       153.419       156.484    
  72  0.614319     -0.487242     -0.737507      0.737507       155.637       156.375    
  73  0.461601     -0.773054      -1.17012       1.17012       153.535       154.705    
  74  0.694089     -0.365155     -0.552712      0.552712       153.309       153.862    
  75  0.981524     -0.186492E-01 -0.282281E-01  0.282281E-01   149.608       149.636    
loop,thermsimp(1:2)       45  0.613851E-01  0.538513    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    473        150.35          0.87          1.15         25.22          0.33          0.05         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       45
neval is:      472
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       46
neval is:      472


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      472     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668594     -0.402578     -0.609357      0.609357       148.507       149.117    
   2  0.484900     -0.723813      -1.09559       1.09559       148.852       149.947    
   3  0.814670     -0.204972     -0.310254      0.310254       149.129       149.440    
   4  0.111039      -2.19788      -3.32679       3.32679       148.996       152.323    
   5  0.717773     -0.331602     -0.501925      0.501925       149.126       149.627    
   6  0.751748     -0.285354     -0.431922      0.431922       149.272       149.704    
   7  0.983096E-01  -2.31963      -3.51108       3.51108       148.625       152.136    
   8  0.150083      -1.89656      -2.87071       2.87071       149.608       152.479    
   9  0.733895     -0.309390     -0.468304      0.468304       149.772       150.241    
  10  0.982051     -0.181120E-01 -0.274150E-01  0.274150E-01   149.307       149.334    
  11  0.449336E-01  -3.10257      -4.69616       4.69616       150.039       154.736    
  12  0.929425     -0.731895E-01 -0.110782      0.110782       148.541       148.652    
  13  0.692017E-01  -2.67073      -4.04251       4.04251       150.154       154.196    
  14  0.644652     -0.439045     -0.664555      0.664555       150.072       150.736    
  15  0.661075     -0.413889     -0.626477      0.626477       151.337       151.964    
  16  0.410338     -0.890775      -1.34831       1.34831       150.944       152.292    
  17  0.967767     -0.327642E-01 -0.495932E-01  0.495932E-01   149.281       149.330    
  18  0.496474     -0.700224      -1.05988       1.05988       150.797       151.857    
  19  0.748701     -0.289415     -0.438069      0.438069       149.818       150.256    
  20  0.428668     -0.847073      -1.28216       1.28216       151.692       152.974    
  21  0.922992     -0.801352E-01 -0.121296      0.121296       151.846       151.967    
  22  0.844924     -0.168508     -0.255060      0.255060       151.560       151.815    
  23  0.680136     -0.385463     -0.583451      0.583451       152.040       152.623    
  24  0.136189      -1.99371      -3.01775       3.01775       150.890       153.908    
  25  0.660667     -0.414506     -0.627412      0.627412       151.287       151.914    
  26  0.473941     -0.746672      -1.13019       1.13019       152.374       153.504    
  27  0.792449     -0.232627     -0.352112      0.352112       151.784       152.136    
  28  0.960023     -0.407984E-01 -0.617539E-01  0.617539E-01   150.497       150.559    
  29  0.951587     -0.496238E-01 -0.751123E-01  0.751123E-01   152.254       152.330    
  30  0.197021      -1.62444      -2.45882       2.45882       151.274       153.733    
  31  0.664966     -0.408020     -0.617594      0.617594       150.536       151.154    
  32  0.832360     -0.183491     -0.277738      0.277738       152.198       152.476    
  33  0.589221     -0.528954     -0.800644      0.800644       150.157       150.958    
  34  0.163930      -1.80831      -2.73713       2.73713       150.469       153.206    
  35  0.967185E-01  -2.33595      -3.53578       3.53578       152.866       156.402    
  36  0.386895     -0.949603      -1.43735       1.43735       150.503       151.940    
  37  0.709158     -0.343678     -0.520203      0.520203       153.572       154.093    
  38  0.801784     -0.220916     -0.334386      0.334386       152.501       152.835    
  39  0.631968     -0.458917     -0.694633      0.694633       152.603       153.298    
  40  0.866237     -0.143597     -0.217353      0.217353       152.390       152.608    
  41  0.377203     -0.974972      -1.47575       1.47575       153.309       154.785    
  42  0.261898      -1.33980      -2.02797       2.02797       151.041       153.069    
  43  0.306694      -1.18191      -1.78898       1.78898       152.100       153.889    
  44  0.603055     -0.505747     -0.765517      0.765517       151.177       151.943    
  45  0.146094      -1.92351      -2.91149       2.91149       151.679       154.590    
  46  0.887903     -0.118893     -0.179961      0.179961       151.313       151.493    
  47  0.375387     -0.979798      -1.48306       1.48306       153.530       155.013    
  48  0.788597     -0.237500     -0.359488      0.359488       150.744       151.104    
  49  0.335228      -1.09295      -1.65432       1.65432       152.640       154.295    
  50  0.609447     -0.495204     -0.749559      0.749559       153.535       154.284    
  51  0.735916     -0.306639     -0.464140      0.464140       154.646       155.110    
  52  0.936649     -0.654462E-01 -0.990618E-01  0.990618E-01   153.169       153.268    
  53  0.594667     -0.519755     -0.786720      0.786720       152.477       153.264    
  54  0.521912     -0.650256     -0.984252      0.984252       153.757       154.742    
  55  0.735402     -0.307338     -0.465198      0.465198       154.726       155.192    
  56  0.909945     -0.943713E-01 -0.142844      0.142844       154.894       155.037    
  57  0.232597      -1.45845      -2.20756       2.20756       155.803       158.011    
  58  0.253136      -1.37383      -2.07948       2.07948       154.189       156.269    
  59  0.242799E-01  -3.71811      -5.62786       5.62786       155.637       161.265    
  60  0.138872      -1.97421      -2.98823       2.98823       155.270       158.258    
  61  0.570424     -0.561376     -0.849720      0.849720       153.690       154.540    
  62  0.746803     -0.291954     -0.441912      0.441912       153.419       153.861    
  63  0.768900     -0.262795     -0.397776      0.397776       155.207       155.605    
  64  0.376976     -0.975574      -1.47666       1.47666       152.717       154.194    
  65  0.917699     -0.858857E-01 -0.130000      0.130000       155.551       155.681    
  66  0.729811     -0.314970     -0.476750      0.476750       152.325       152.802    
  67  0.732995     -0.310616     -0.470159      0.470159       156.578       157.048    
  68  0.471335     -0.752186      -1.13854       1.13854       154.957       156.095    
  69  0.336453      -1.08930      -1.64880       1.64880       155.176       156.824    
  70  0.108509      -2.22092      -3.36167       3.36167       156.420       159.781    
  71  0.931313     -0.711600E-01 -0.107710      0.107710       152.720       152.828    
  72  0.362404      -1.01500      -1.53634       1.53634       152.119       153.656    
  73  0.102585      -2.27706      -3.44664       3.44664       153.432       156.879    
  74  0.892282     -0.113974     -0.172515      0.172515       153.409       153.582    
  75  0.940839     -0.609830E-01 -0.923061E-01  0.923061E-01   150.349       150.442    
loop,thermsimp(1:2)       46  0.609357       1.09559    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    474        156.00          0.86          1.15         25.29          0.12          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    156.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       46
neval is:      473
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       47
neval is:      473


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      473     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408943     -0.894179      -1.35346       1.35346       148.541       149.895    
   2  0.431368     -0.840794      -1.27266       1.27266       148.507       149.780    
   3  0.292375      -1.22972      -1.86135       1.86135       149.281       151.142    
   4  0.336431      -1.08936      -1.64890       1.64890       149.307       150.955    
   5  0.370622     -0.992574      -1.50240       1.50240       149.129       150.632    
   6  0.398679     -0.919597      -1.39194       1.39194       149.126       150.517    
   7  0.672261     -0.397108     -0.601077      0.601077       149.272       149.873    
   8  0.451252     -0.795728      -1.20444       1.20444       148.852       150.056    
   9  0.527060     -0.640440     -0.969394      0.969394       149.772       150.742    
  10  0.131951      -2.02533      -3.06561       3.06561       149.818       152.884    
  11  0.903524     -0.101452     -0.153562      0.153562       150.349       150.503    
  12  0.881507E-01  -2.42871      -3.67618       3.67618       150.497       154.173    
  13  0.464884     -0.765968      -1.15940       1.15940       150.072       151.231    
  14  0.985345     -0.147637E-01 -0.223468E-01  0.223468E-01   150.157       150.180    
  15  0.587696     -0.531546     -0.804567      0.804567       150.744       151.549    
  16  0.581244     -0.542585     -0.821276      0.821276       150.536       151.357    
  17  0.137299      -1.98559      -3.00547       3.00547       151.313       154.318    
  18  0.330005      -1.10865      -1.67809       1.67809       151.560       153.238    
  19  0.911104     -0.930980E-01 -0.140917      0.140917       150.797       150.938    
  20  0.487848     -0.717751      -1.08641       1.08641       151.287       152.373    
  21  0.518423     -0.656964     -0.994405      0.994405       150.503       151.497    
  22  0.645499     -0.437732     -0.662567      0.662567       151.177       151.840    
  23  0.914509     -0.893680E-01 -0.135271      0.135271       151.337       151.472    
  24  0.763582E-01  -2.57232      -3.89356       3.89356       151.846       155.739    
  25  0.708063     -0.345222     -0.522541      0.522541       151.784       152.306    
  26  0.719838     -0.328729     -0.497576      0.497576       148.625       149.123    
  27  0.113625E-01  -4.47744      -6.77722       6.77722       150.944       157.721    
  28  0.272258      -1.30101      -1.96925       1.96925       148.996       150.965    
  29  0.211076      -1.55554      -2.35452       2.35452       152.254       154.609    
  30  0.931648     -0.708004E-01 -0.107166      0.107166       152.198       152.305    
  31  0.572966     -0.556929     -0.842989      0.842989       149.608       150.451    
  32  0.116283      -2.15173      -3.25693       3.25693       152.390       155.647    
  33  0.247808      -1.39510      -2.11167       2.11167       152.040       154.152    
  34  0.294404      -1.22280      -1.85088       1.85088       152.325       154.176    
  35  0.252764E-01  -3.67788      -5.56698       5.56698       152.720       158.287    
  36  0.408562     -0.895111      -1.35487       1.35487       152.501       153.856    
  37  0.753478     -0.283056     -0.428444      0.428444       151.692       152.121    
  38  0.680565     -0.384832     -0.582496      0.582496       151.041       151.624    
  39  0.973188     -0.271778E-01 -0.411372E-01  0.411372E-01   150.469       150.510    
  40  0.986871     -0.132158E-01 -0.200040E-01  0.200040E-01   152.477       152.497    
  41  0.363246      -1.01267      -1.53282       1.53282       153.169       154.702    
  42  0.138088      -1.97986      -2.99679       2.99679       152.603       155.600    
  43  0.929547E-01  -2.37564      -3.59586       3.59586       152.374       155.970    
  44  0.781724     -0.246253     -0.372738      0.372738       153.409       153.782    
  45  0.732428     -0.311390     -0.471332      0.471332       152.119       152.591    
  46  0.294929      -1.22102      -1.84818       1.84818       151.274       153.122    
  47  0.406491     -0.900193      -1.36257       1.36257       153.419       154.782    
  48  0.721836E-01  -2.62854      -3.97866       3.97866       152.100       156.079    
  49  0.982586     -0.175676E-01 -0.265910E-01  0.265910E-01   150.890       150.916    
  50  0.211502E-01  -3.85611      -5.83675       5.83675       153.572       159.409    
  51  0.790632     -0.234923     -0.355588      0.355588       152.717       153.073    
  52  0.120538      -2.11579      -3.20254       3.20254       150.154       153.356    
  53  0.586949     -0.532817     -0.806491      0.806491       153.535       154.341    
  54  0.660552     -0.414680     -0.627674      0.627674       152.640       153.268    
  55  0.627691     -0.465708     -0.704912      0.704912       153.690       154.395    
  56  0.470013     -0.754996      -1.14279       1.14279       151.679       152.821    
  57  0.735726     -0.306897     -0.464531      0.464531       150.039       150.504    
  58  0.320562      -1.13768      -1.72204       1.72204       153.757       155.479    
  59  0.256015E-01  -3.66511      -5.54764       5.54764       153.309       158.857    
  60  0.364092      -1.01035      -1.52930       1.52930       153.530       155.059    
  61  0.483739     -0.726210      -1.09922       1.09922       154.894       155.993    
  62  0.311695      -1.16573      -1.76449       1.76449       154.646       156.410    
  63  0.981768     -0.184007E-01 -0.278519E-01  0.278519E-01   154.726       154.754    
  64  0.428011E-01  -3.15119      -4.76976       4.76976       155.207       159.977    
  65  0.509532     -0.674262      -1.02059       1.02059       155.551       156.571    
  66  0.118657      -2.13152      -3.22634       3.22634       154.957       158.183    
  67  0.131462      -2.02904      -3.07123       3.07123       154.189       157.261    
  68  0.364560      -1.00906      -1.52736       1.52736       152.866       154.393    
  69  0.776895     -0.252450     -0.382118      0.382118       155.176       155.558    
  70  0.958551     -0.423320E-01 -0.640753E-01  0.640753E-01   153.432       153.496    
  71  0.288811      -1.24198      -1.87991       1.87991       156.578       158.458    
  72  0.376607     -0.976553      -1.47815       1.47815       155.803       157.282    
  73  0.580209     -0.544367     -0.823973      0.823973       155.270       156.094    
  74  0.943266     -0.584069E-01 -0.884068E-01  0.884068E-01   156.420       156.508    
  75  0.500728     -0.691692      -1.04697       1.04697       155.996       157.043    
loop,thermsimp(1:2)       47   1.35346       1.27266    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    475        151.39          0.87          1.16         25.24          0.09          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    476        201.18          0.86          1.16         25.25          0.11          0.05         27.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       47
neval is:      475
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       48
neval is:      475


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      475     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813255     -0.206711     -0.312885      0.312885       148.625       148.938    
   2  0.101223E-01  -4.59302      -6.95216       6.95216       148.507       155.459    
   3  0.618937E-01  -2.78234      -4.21145       4.21145       149.272       153.484    
   4  0.206078      -1.57950      -2.39079       2.39079       148.541       150.932    
   5  0.867609     -0.142014     -0.214957      0.214957       148.852       149.067    
   6  0.578282     -0.547694     -0.829010      0.829010       150.157       150.986    
   7  0.531864     -0.631367     -0.955660      0.955660       149.608       150.564    
   8  0.304055      -1.19055      -1.80205       1.80205       150.349       152.151    
   9  0.540739     -0.614819     -0.930612      0.930612       150.039       150.970    
  10  0.476481     -0.741327      -1.12210       1.12210       150.469       151.591    
  11  0.610971     -0.492705     -0.745776      0.745776       149.126       149.871    
  12  0.735015     -0.307865     -0.465996      0.465996       149.129       149.595    
  13  0.961674     -0.390799E-01 -0.591527E-01  0.591527E-01   149.772       149.831    
  14  0.902502     -0.102585     -0.155276      0.155276       150.890       151.045    
  15  0.759072     -0.275659     -0.417247      0.417247       150.797       151.214    
  16  0.380028E-01  -3.27009      -4.94974       4.94974       149.307       154.256    
  17  0.413373     -0.883405      -1.33715       1.33715       148.996       150.333    
  18  0.260354      -1.34571      -2.03692       2.03692       149.281       151.318    
  19  0.170660      -1.76808      -2.67623       2.67623       150.072       152.748    
  20  0.563245     -0.574040     -0.868889      0.868889       150.536       151.405    
  21  0.861075     -0.149573     -0.226399      0.226399       151.337       151.564    
  22  0.797631     -0.226109     -0.342246      0.342246       150.503       150.845    
  23  0.370521E-01  -3.29543      -4.98808       4.98808       150.744       155.733    
  24  0.703530     -0.351645     -0.532263      0.532263       151.041       151.574    
  25  0.791216E-01  -2.53677      -3.83975       3.83975       151.177       155.017    
  26  0.136780      -1.98938      -3.01120       3.01120       151.692       154.703    
  27  0.409465     -0.892903      -1.35153       1.35153       152.198       153.550    
  28  0.476542     -0.741200      -1.12191       1.12191       151.784       152.906    
  29  0.169904      -1.77252      -2.68296       2.68296       151.287       153.970    
  30  0.483026     -0.727684      -1.10145       1.10145       152.477       153.579    
  31  0.740952     -0.299820     -0.453818      0.453818       152.119       152.573    
  32  0.367240      -1.00174      -1.51627       1.51627       151.679       153.195    
  33  0.704436     -0.350358     -0.530315      0.530315       149.818       150.349    
  34  0.703774     -0.351299     -0.531739      0.531739       152.717       153.249    
  35  0.547709     -0.602012     -0.911227      0.911227       151.274       152.185    
  36  0.236071      -1.44362      -2.18512       2.18512       151.560       153.745    
  37  0.512555     -0.668347      -1.01163       1.01163       152.640       153.652    
  38  0.894555     -0.111428     -0.168662      0.168662       150.154       150.322    
  39  0.100347      -2.29912      -3.48003       3.48003       153.432       156.912    
  40  0.689153     -0.372292     -0.563514      0.563514       153.409       153.973    
  41  0.188659      -1.66781      -2.52446       2.52446       152.501       155.025    
  42  0.623666     -0.472140     -0.714648      0.714648       152.040       152.755    
  43  0.610480     -0.493510     -0.746995      0.746995       150.497       151.244    
  44  0.724857     -0.321780     -0.487058      0.487058       152.325       152.812    
  45  0.320963      -1.13643      -1.72014       1.72014       151.313       153.033    
  46  0.287938      -1.24501      -1.88449       1.88449       153.535       155.419    
  47  0.935911     -0.662348E-01 -0.100255      0.100255       152.866       152.966    
  48  0.600810     -0.509476     -0.771162      0.771162       153.690       154.461    
  49  0.200068      -1.60910      -2.43559       2.43559       152.254       154.690    
  50  0.240600E-01  -3.72720      -5.64163       5.64163       153.169       158.810    
  51  0.953574     -0.475383E-01 -0.719557E-01  0.719557E-01   154.726       154.798    
  52  0.605754     -0.501281     -0.758758      0.758758       153.419       154.178    
  53  0.107166      -2.23338      -3.38052       3.38052       153.530       156.911    
  54  0.398218     -0.920755      -1.39369       1.39369       153.757       155.151    
  55  0.471444     -0.751956      -1.13819       1.13819       155.176       156.314    
  56  0.892797E-02  -4.71857      -7.14220       7.14220       152.603       159.746    
  57  0.246368      -1.40093      -2.12050       2.12050       152.390       154.511    
  58  0.900252E-01  -2.40767      -3.64433       3.64433       151.846       155.490    
  59  0.127742      -2.05775      -3.11468       3.11468       152.374       155.489    
  60  0.233391E-01  -3.75763      -5.68768       5.68768       154.894       160.582    
  61  0.109213      -2.21445      -3.35188       3.35188       152.100       155.452    
  62  0.486874E-01  -3.02234      -4.57472       4.57472       155.270       159.844    
  63  0.535603     -0.624363     -0.945059      0.945059       154.646       155.591    
  64  0.444520     -0.810761      -1.22720       1.22720       156.420       157.647    
  65  0.431661     -0.840116      -1.27163       1.27163       155.551       156.822    
  66  0.479331     -0.735363      -1.11307       1.11307       155.996       157.109    
  67  0.931053     -0.714396E-01 -0.108134      0.108134       154.189       154.297    
  68  0.113012      -2.18026      -3.30012       3.30012       155.803       159.104    
  69  0.293479      -1.22595      -1.85564       1.85564       150.944       152.800    
  70  0.908750E-01  -2.39827      -3.63011       3.63011       154.957       158.587    
  71  0.760696E-01  -2.57611      -3.89929       3.89929       152.720       156.620    
  72  0.194194      -1.63890      -2.48070       2.48070       156.578       159.058    
  73  0.824955     -0.192426     -0.291263      0.291263       153.309       153.601    
  74  0.342686      -1.07094      -1.62101       1.62101       153.572       155.193    
  75  0.698677     -0.358566     -0.542739      0.542739       151.389       151.932    
loop,thermsimp(1:2)       48  0.312885       6.95216    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    477        149.66          0.86          1.16         25.23          0.15          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    478        153.92          0.86          1.15         25.25          0.21          0.05         27.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       48
neval is:      477
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       49
neval is:      477


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      477     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.900563     -0.104735     -0.158530      0.158530       148.625       148.784    
   2  0.337202      -1.08707      -1.64543       1.64543       148.852       150.497    
   3  0.201324      -1.60284      -2.42611       2.42611       149.129       151.556    
   4  0.305897      -1.18451      -1.79291       1.79291       149.772       151.565    
   5  0.333562      -1.09793      -1.66186       1.66186       149.126       150.787    
   6  0.708340     -0.344831     -0.521949      0.521949       150.154       150.676    
   7  0.929963     -0.726100E-01 -0.109905      0.109905       148.996       149.106    
   8  0.954883     -0.461669E-01 -0.698800E-01  0.698800E-01   149.818       149.888    
   9  0.709141     -0.343701     -0.520238      0.520238       149.608       150.128    
  10  0.904936     -0.998906E-01 -0.151198      0.151198       150.503       150.654    
  11  0.764543     -0.268477     -0.406377      0.406377       148.541       148.948    
  12  0.297182      -1.21341      -1.83666       1.83666       150.039       151.876    
  13  0.472241     -0.750266      -1.13563       1.13563       150.157       151.293    
  14  0.601817     -0.507801     -0.768627      0.768627       150.890       151.658    
  15  0.274906      -1.29132      -1.95460       1.95460       150.797       152.752    
  16  0.979328     -0.208884E-01 -0.316175E-01  0.316175E-01   150.497       150.529    
  17  0.634279     -0.455267     -0.689109      0.689109       149.281       149.970    
  18  0.238460E-01  -3.73614      -5.65516       5.65516       150.536       156.191    
  19  0.302486      -1.19572      -1.80988       1.80988       151.337       153.147    
  20  0.454285     -0.789030      -1.19430       1.19430       151.041       152.236    
  21  0.850435     -0.162007     -0.245220      0.245220       150.469       150.714    
  22  0.562689     -0.575029     -0.870385      0.870385       151.389       152.260    
  23  0.351622      -1.04520      -1.58205       1.58205       150.349       151.931    
  24  0.978081     -0.221628E-01 -0.335464E-01  0.335464E-01   151.274       151.307    
  25  0.284594      -1.25669      -1.90218       1.90218       152.119       154.022    
  26  0.883683E-01  -2.42624      -3.67245       3.67245       150.072       153.744    
  27  0.217395      -1.52604      -2.30987       2.30987       152.040       154.350    
  28  0.405933     -0.901568      -1.36465       1.36465       150.944       152.309    
  29  0.951690     -0.495156E-01 -0.749486E-01  0.749486E-01   152.325       152.400    
  30  0.570178     -0.561806     -0.850370      0.850370       151.784       152.634    
  31  0.326664      -1.11882      -1.69349       1.69349       152.866       154.559    
  32  0.383874E-01  -3.26003      -4.93449       4.93449       151.313       156.247    
  33  0.630130     -0.461829     -0.699042      0.699042       151.679       152.378    
  34  0.902033     -0.103105     -0.156063      0.156063       152.717       152.873    
  35  0.192240      -1.64901      -2.49600       2.49600       149.272       151.768    
  36  0.836744     -0.178237     -0.269786      0.269786       152.198       152.468    
  37  0.481446     -0.730962      -1.10641       1.10641       152.477       153.584    
  38  0.801468     -0.221310     -0.334983      0.334983       153.309       153.644    
  39  0.929206     -0.734244E-01 -0.111138      0.111138       152.640       152.751    
  40  0.366038      -1.00502      -1.52123       1.52123       151.560       153.081    
  41  0.896697     -0.109037     -0.165043      0.165043       151.287       151.452    
  42  0.175481      -1.74022      -2.63407       2.63407       153.409       156.044    
  43  0.444632E-01  -3.11309      -4.71209       4.71209       153.419       158.131    
  44  0.469791     -0.755467      -1.14350       1.14350       149.307       150.450    
  45  0.475427     -0.743541      -1.12545       1.12545       154.189       155.315    
  46  0.568468     -0.564810     -0.854916      0.854916       153.690       154.545    
  47  0.684504     -0.379060     -0.573760      0.573760       152.390       152.964    
  48  0.207720      -1.57157      -2.37878       2.37878       152.254       154.633    
  49  0.332731      -1.10042      -1.66564       1.66564       151.692       153.358    
  50  0.109337E-01  -4.51591      -6.83544       6.83544       154.726       161.562    
  51  0.387975     -0.946815      -1.43313       1.43313       151.177       152.610    
  52  0.583841     -0.538126     -0.814527      0.814527       152.501       153.315    
  53  0.952086     -0.491003E-01 -0.743200E-01  0.743200E-01   153.757       153.832    
  54  0.596262     -0.517074     -0.782663      0.782663       153.572       154.355    
  55  0.767710     -0.264344     -0.400120      0.400120       153.535       153.935    
  56  0.321305E-01  -3.43795      -5.20381       5.20381       152.100       157.304    
  57  0.882163     -0.125378     -0.189777      0.189777       148.507       148.697    
  58  0.688790     -0.372818     -0.564311      0.564311       152.374       152.938    
  59  0.422749     -0.860978      -1.30321       1.30321       151.846       153.149    
  60  0.758230     -0.276768     -0.418927      0.418927       154.646       155.064    
  61  0.393861     -0.931758      -1.41034       1.41034       150.744       152.155    
  62  0.990158E-01  -2.31248      -3.50025       3.50025       155.176       158.676    
  63  0.536294     -0.623073     -0.943106      0.943106       152.720       153.663    
  64  0.287975E-01  -3.54747      -5.36957       5.36957       155.551       160.920    
  65  0.591548     -0.525012     -0.794677      0.794677       153.530       154.325    
  66  0.556437     -0.586201     -0.887295      0.887295       153.432       154.320    
  67  0.768107E-01  -2.56641      -3.88461       3.88461       155.996       159.881    
  68  0.945147E-01  -2.35900      -3.57067       3.57067       156.420       159.990    
  69  0.814945     -0.204635     -0.309743      0.309743       154.957       155.266    
  70  0.581354     -0.542395     -0.820989      0.820989       153.169       153.990    
  71  0.359576      -1.02283      -1.54819       1.54819       156.578       158.126    
  72  0.118552      -2.13240      -3.22768       3.22768       155.803       159.031    
  73  0.348069      -1.05535      -1.59742       1.59742       152.603       154.201    
  74  0.408398     -0.895514      -1.35548       1.35548       155.270       156.625    
  75  0.183345      -1.69639      -2.56771       2.56771       149.661       152.228    
loop,thermsimp(1:2)       49  0.158530       1.64543    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    479        149.97          0.87          1.16         25.26          0.23          0.05         27.57
Just calling func    0   0         27.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    149.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       49
neval is:      478
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       50
neval is:      478


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      478     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.326509      -1.11930      -1.69421       1.69421       148.507       150.201    
   2  0.656045     -0.421526     -0.638037      0.638037       148.625       149.263    
   3  0.702016     -0.353799     -0.535523      0.535523       148.541       149.077    
   4  0.659850     -0.415743     -0.629283      0.629283       148.996       149.625    
   5  0.587501     -0.531877     -0.805069      0.805069       149.818       150.623    
   6  0.118734      -2.13087      -3.22536       3.22536       149.281       152.506    
   7  0.484942     -0.723727      -1.09546       1.09546       149.608       150.703    
   8  0.809010     -0.211944     -0.320806      0.320806       149.307       149.627    
   9  0.107401      -2.23119      -3.37721       3.37721       148.852       152.229    
  10  0.912046     -0.920651E-01 -0.139353      0.139353       150.497       150.636    
  11  0.752441     -0.284433     -0.430528      0.430528       150.503       150.933    
  12  0.389912     -0.941833      -1.42559       1.42559       150.154       151.579    
  13  0.805927     -0.215762     -0.326585      0.326585       150.469       150.795    
  14  0.537328     -0.621147     -0.940190      0.940190       149.126       150.066    
  15  0.276300      -1.28627      -1.94694       1.94694       150.157       152.104    
  16  0.618485     -0.480483     -0.727277      0.727277       151.274       152.001    
  17  0.130066      -2.03972      -3.08739       3.08739       151.287       154.374    
  18  0.885305     -0.121824     -0.184397      0.184397       149.129       149.314    
  19  0.513359     -0.666781      -1.00926       1.00926       149.772       150.782    
  20  0.235519      -1.44596      -2.18866       2.18866       150.890       153.078    
  21  0.693842     -0.365511     -0.553251      0.553251       149.272       149.826    
  22  0.445925     -0.807605      -1.22242       1.22242       150.039       151.262    
  23  0.946501     -0.549828E-01 -0.832240E-01  0.832240E-01   150.349       150.433    
  24  0.108015      -2.22549      -3.36858       3.36858       150.744       154.113    
  25  0.988375     -0.116930E-01 -0.176990E-01  0.176990E-01   149.661       149.678    
  26  0.931439     -0.710246E-01 -0.107505      0.107505       151.041       151.149    
  27  0.915176     -0.886393E-01 -0.134168      0.134168       151.389       151.524    
  28  0.670330     -0.399985     -0.605431      0.605431       150.944       151.549    
  29  0.172595      -1.75681      -2.65917       2.65917       151.679       154.338    
  30  0.496295     -0.700585      -1.06043       1.06043       152.325       153.386    
  31  0.627359     -0.466236     -0.705712      0.705712       152.198       152.904    
  32  0.914384     -0.895052E-01 -0.135478      0.135478       151.177       151.313    
  33  0.197109      -1.62400      -2.45815       2.45815       151.784       154.242    
  34  0.830736     -0.185444     -0.280694      0.280694       152.640       152.921    
  35  0.554634     -0.589446     -0.892207      0.892207       150.797       151.689    
  36  0.386467E-01  -3.25329      -4.92430       4.92430       152.717       157.642    
  37  0.259980      -1.34715      -2.03910       2.03910       152.374       154.413    
  38  0.876870     -0.131396     -0.198886      0.198886       152.390       152.589    
  39  0.651025     -0.429207     -0.649664      0.649664       151.560       152.210    
  40  0.171053      -1.76578      -2.67275       2.67275       151.337       154.010    
  41  0.708910     -0.344027     -0.520732      0.520732       151.846       152.367    
  42  0.501487     -0.690177      -1.04468       1.04468       152.501       153.546    
  43  0.766040     -0.266521     -0.403417      0.403417       151.692       152.096    
  44  0.189113      -1.66541      -2.52083       2.52083       152.477       154.998    
  45  0.250338      -1.38494      -2.09630       2.09630       153.309       155.406    
  46  0.830098     -0.186211     -0.281856      0.281856       152.720       153.002    
  47  0.337228      -1.08700      -1.64532       1.64532       150.072       151.717    
  48  0.290155      -1.23734      -1.87288       1.87288       153.757       155.630    
  49  0.382897     -0.959988      -1.45307       1.45307       153.535       154.988    
  50  0.484934     -0.723743      -1.09548       1.09548       153.169       154.264    
  51  0.867083     -0.142620     -0.215876      0.215876       152.119       152.335    
  52  0.151990E-02  -6.48911      -9.82215       9.82215       152.603       162.426    
  53  0.964961     -0.356680E-01 -0.539884E-01  0.539884E-01   153.432       153.486    
  54  0.128257      -2.05372      -3.10859       3.10859       153.530       156.639    
  55  0.846209     -0.166989     -0.252760      0.252760       152.040       152.293    
  56  0.347221      -1.05779      -1.60111       1.60111       153.572       155.173    
  57  0.488187     -0.717056      -1.08536       1.08536       153.690       154.776    
  58  0.321978      -1.13327      -1.71536       1.71536       152.866       154.581    
  59  0.182989E-02  -6.30350      -9.54121       9.54121       152.254       161.796    
  60  0.863080     -0.147248     -0.222880      0.222880       154.646       154.868    
  61  0.606807     -0.499544     -0.756128      0.756128       154.957       155.713    
  62  0.874411     -0.134204     -0.203137      0.203137       154.189       154.392    
  63  0.525999     -0.642455     -0.972444      0.972444       153.409       154.382    
  64  0.455800     -0.785701      -1.18927       1.18927       150.536       151.725    
  65  0.894133E-01  -2.41449      -3.65465       3.65465       151.313       154.967    
  66  0.848019E-01  -2.46744      -3.73480       3.73480       155.270       159.005    
  67  0.234079      -1.45210      -2.19795       2.19795       152.100       154.298    
  68  0.809497     -0.211342     -0.319895      0.319895       156.578       156.898    
  69  0.242770      -1.41564      -2.14277       2.14277       153.419       155.562    
  70  0.307301      -1.17993      -1.78598       1.78598       155.176       156.962    
  71  0.256940      -1.35891      -2.05690       2.05690       155.803       157.860    
  72  0.877432     -0.130756     -0.197917      0.197917       155.996       156.194    
  73  0.723736     -0.323328     -0.489402      0.489402       156.420       156.909    
  74  0.922462     -0.807086E-01 -0.122163      0.122163       155.551       155.673    
  75  0.351839E-01  -3.34717      -5.06640       5.06640       149.969       155.035    
loop,thermsimp(1:2)       50   1.69421      0.638037    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    480        149.93          0.87          1.15         25.18          0.22          0.05         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    481        193.96          0.85          1.16         25.21          0.54          0.05         27.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  480    193.96        1.157     -2.227      2.584     -102.6      1.133    
                      0.3329      1.364     -99.70      3.493     0.1135    
                       2.661     -1.265      1.530      5961.      4077.    
                     -0.4899      0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      5620.      1676.    
                     -0.5672     -6.655     -4.681     -7.502      6.125    
                      -15.73     -3.194      7801.      0.000      9688.    

                      -5443.      9657.     -349.8      9688.      1542.    
                       1654.    -0.2119E-01 0.9547E-01  0.000     0.1363    
                     -0.2608    -0.9011E-01 0.8773E-01 0.5625E-01-0.1288E-01

                     -0.3996    -0.8992      0.000     0.8992    -0.7321E-01
                       0.000    -0.2149E-03 0.1732    -0.1294    -0.6949E-01
                     -0.4104E-01-0.9416E-03-0.6842     -1.223      7091.    

                     -0.9065     -1.156     -2.292     -2.544    -0.2076    
                     -0.3183      9.086      8.728    -0.1800E+05 -4.000    
                      -1.057     -1.944      9.258      8.763    -0.1103E+05

                      -4.000     0.8744E-01-0.8058      8.889      9.077    
                     -0.2166E+05 -7.000    -0.6385     -1.053      9.077    
                       8.756    -0.1674E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       50
neval is:      480
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       51
neval is:      480


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      480     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.886088     -0.120938     -0.183057      0.183057       148.541       148.724    
   2  0.953882E-01  -2.34980      -3.55674       3.55674       148.625       152.182    
   3  0.875198     -0.133305     -0.201775      0.201775       149.129       149.331    
   4  0.401319     -0.913000      -1.38195       1.38195       148.996       150.378    
   5  0.288302      -1.24375      -1.88258       1.88258       149.307       151.189    
   6  0.596159E-01  -2.81983      -4.26820       4.26820       149.661       153.929    
   7  0.411979     -0.886782      -1.34227       1.34227       149.272       150.615    
   8  0.157950      -1.84548      -2.79338       2.79338       149.126       151.919    
   9  0.736512     -0.305830     -0.462915      0.462915       148.507       148.970    
  10  0.531935     -0.631235     -0.955460      0.955460       150.349       151.305    
  11  0.557201     -0.584829     -0.885219      0.885219       149.818       150.704    
  12  0.590342     -0.527053     -0.797767      0.797767       150.497       151.295    
  13  0.893645     -0.112447     -0.170203      0.170203       149.608       149.778    
  14  0.899172     -0.106281     -0.160871      0.160871       149.772       149.933    
  15  0.321510      -1.13473      -1.71756       1.71756       150.469       152.186    
  16  0.242259E-01  -3.72033      -5.63123       5.63123       150.503       156.134    
  17  0.646886     -0.435586     -0.659319      0.659319       151.041       151.701    
  18  0.998267     -0.173471E-02 -0.262572E-02  0.262572E-02   150.039       150.042    
  19  0.972297     -0.280942E-01 -0.425244E-01  0.425244E-01   151.177       151.220    
  20  0.309809      -1.17180      -1.77368       1.77368       151.389       153.163    
  21  0.816235     -0.203053     -0.307348      0.307348       150.944       151.251    
  22  0.984764     -0.153535E-01 -0.232397E-01  0.232397E-01   150.154       150.177    
  23  0.881026     -0.126668     -0.191729      0.191729       150.797       150.989    
  24  0.661336E-01  -2.71608      -4.11116       4.11116       150.072       154.183    
  25  0.410325     -0.890806      -1.34836       1.34836       150.536       151.884    
  26  0.104142E-03  -9.16976      -13.8797       13.8797       151.274       165.154    
  27  0.713949     -0.336943     -0.510009      0.510009       151.692       152.202    
  28  0.388242     -0.946126      -1.43209       1.43209       150.157       151.589    
  29  0.684780     -0.378657     -0.573149      0.573149       151.560       152.133    
  30  0.349297      -1.05183      -1.59209       1.59209       148.852       150.444    
  31  0.567533     -0.566456     -0.857408      0.857408       152.040       152.897    
  32  0.157115      -1.85078      -2.80140       2.80140       152.119       154.921    
  33  0.780641     -0.247640     -0.374837      0.374837       151.846       152.221    
  34  0.485397     -0.722789      -1.09404       1.09404       149.281       150.375    
  35  0.682517     -0.381968     -0.578161      0.578161       152.390       152.969    
  36  0.536829     -0.622075     -0.941595      0.941595       152.198       153.140    
  37  0.464187     -0.767467      -1.16167       1.16167       152.640       153.802    
  38  0.519819     -0.654274     -0.990334      0.990334       152.720       153.711    
  39  0.974252     -0.260857E-01 -0.394842E-01  0.394842E-01   150.890       150.929    
  40  0.386009     -0.951894      -1.44082       1.44082       152.325       153.766    
  41  0.217232      -1.52679      -2.31100       2.31100       153.432       155.743    
  42  0.173910      -1.74922      -2.64768       2.64768       152.501       155.149    
  43  0.860958     -0.149709     -0.226606      0.226606       151.337       151.564    
  44  0.893333     -0.112796     -0.170732      0.170732       150.744       150.915    
  45  0.957904     -0.430073E-01 -0.650975E-01  0.650975E-01   151.784       151.849    
  46  0.671164E-01  -2.70133      -4.08883       4.08883       153.169       157.258    
  47  0.133176      -2.01608      -3.05162       3.05162       152.100       155.152    
  48  0.574942     -0.553487     -0.837777      0.837777       151.679       152.516    
  49  0.302503      -1.19566      -1.80980       1.80980       151.287       153.097    
  50  0.325458      -1.12252      -1.69909       1.69909       153.409       155.109    
  51  0.344075      -1.06690      -1.61489       1.61489       154.189       155.804    
  52  0.432303     -0.838628      -1.26938       1.26938       152.374       153.643    
  53  0.855511     -0.156056     -0.236212      0.236212       152.866       153.102    
  54  0.391695     -0.937273      -1.41869       1.41869       153.690       155.109    
  55  0.613683     -0.488277     -0.739074      0.739074       154.646       155.385    
  56  0.694249     -0.364925     -0.552364      0.552364       151.313       151.865    
  57  0.155282      -1.86251      -2.81917       2.81917       153.535       156.354    
  58  0.632564     -0.457973     -0.693205      0.693205       152.477       153.170    
  59  0.519744     -0.654418     -0.990551      0.990551       149.969       150.959    
  60  0.486666     -0.720176      -1.09009       1.09009       153.572       154.662    
  61  0.538449E-01  -2.92165      -4.42231       4.42231       153.309       157.732    
  62  0.278027      -1.28004      -1.93751       1.93751       153.419       155.357    
  63  0.120374      -2.11715      -3.20460       3.20460       153.757       156.962    
  64  0.409455     -0.892928      -1.35157       1.35157       155.551       156.902    
  65  0.620520     -0.477197     -0.722303      0.722303       154.957       155.679    
  66  0.572142     -0.558368     -0.845166      0.845166       155.996       156.841    
  67  0.451293E-01  -3.09822      -4.68958       4.68958       153.530       158.220    
  68  0.631474     -0.459698     -0.695815      0.695815       156.578       157.274    
  69  0.811861     -0.208426     -0.315481      0.315481       156.420       156.735    
  70  0.946135     -0.553696E-01 -0.838095E-01  0.838095E-01   155.176       155.259    
  71  0.456493     -0.784182      -1.18697       1.18697       152.717       153.904    
  72  0.548763     -0.600088     -0.908316      0.908316       155.803       156.712    
  73  0.152090E-01  -4.18587      -6.33589       6.33589       155.270       161.606    
  74  0.323382      -1.12892      -1.70877       1.70877       152.254       153.963    
  75  0.718867     -0.330079     -0.499620      0.499620       149.932       150.431    
loop,thermsimp(1:2)       51  0.183057       3.55674    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    482        153.03          0.87          1.15         25.15          0.26          0.06         27.49
Just calling func    0   0         27.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    153.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       51
neval is:      481
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       52
neval is:      481


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      481     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.827214E-01  -2.49228      -3.77240       3.77240       148.541       152.314    
   2  0.625679E-01  -2.77150      -4.19505       4.19505       148.507       152.702    
   3  0.254112      -1.36998      -2.07365       2.07365       149.129       151.203    
   4  0.582152     -0.541023     -0.818913      0.818913       149.608       150.427    
   5  0.596882     -0.516035     -0.781090      0.781090       149.772       150.553    
   6  0.149943      -1.89750      -2.87213       2.87213       150.039       152.912    
   7  0.496252     -0.700672      -1.06056       1.06056       150.154       151.214    
   8  0.129782      -2.04190      -3.09070       3.09070       149.281       152.371    
   9  0.740869     -0.299931     -0.453987      0.453987       148.996       149.450    
  10  0.124297      -2.08508      -3.15606       3.15606       149.932       153.088    
  11  0.524903     -0.644542     -0.975603      0.975603       148.852       149.827    
  12  0.852180     -0.159958     -0.242118      0.242118       149.272       149.514    
  13  0.823232     -0.194517     -0.294428      0.294428       149.818       150.113    
  14  0.256230      -1.36168      -2.06109       2.06109       150.744       152.806    
  15  0.258393      -1.35327      -2.04836       2.04836       150.890       152.938    
  16  0.324549      -1.12532      -1.70332       1.70332       149.969       151.672    
  17  0.504546     -0.684097      -1.03547       1.03547       150.797       151.832    
  18  0.774284     -0.255817     -0.387214      0.387214       149.307       149.694    
  19  0.452119E-01  -3.09639      -4.68682       4.68682       151.177       155.864    
  20  0.325288      -1.12305      -1.69988       1.69988       150.944       152.644    
  21  0.156855      -1.85244      -2.80391       2.80391       150.497       153.301    
  22  0.440906     -0.818924      -1.23955       1.23955       150.349       151.589    
  23  0.313753E-02  -5.76432      -8.72509       8.72509       151.337       160.062    
  24  0.252529      -1.37623      -2.08311       2.08311       150.157       152.240    
  25  0.799267     -0.224060     -0.339145      0.339145       151.041       151.380    
  26  0.961010     -0.397708E-01 -0.601986E-01  0.601986E-01   151.784       151.844    
  27  0.843711     -0.169946     -0.257236      0.257236       151.313       151.570    
  28  0.120002      -2.12025      -3.20928       3.20928       150.536       153.745    
  29  0.489889     -0.713576      -1.08009       1.08009       149.126       150.206    
  30  0.317246      -1.14808      -1.73777       1.73777       151.560       153.298    
  31  0.761766     -0.272116     -0.411884      0.411884       148.625       149.037    
  32  0.468167     -0.758930      -1.14874       1.14874       150.469       151.617    
  33  0.634908     -0.454275     -0.687607      0.687607       151.692       152.380    
  34  0.410644     -0.890029      -1.34718       1.34718       151.846       153.193    
  35  0.330962      -1.10575      -1.67371       1.67371       151.679       153.352    
  36  0.275422      -1.28945      -1.95176       1.95176       152.040       153.992    
  37  0.186052      -1.68173      -2.54553       2.54553       152.390       154.936    
  38  0.361178      -1.01838      -1.54146       1.54146       151.287       152.828    
  39  0.850100     -0.162402     -0.245817      0.245817       152.866       153.112    
  40  0.649062     -0.432226     -0.654234      0.654234       152.198       152.852    
  41  0.322988      -1.13014      -1.71062       1.71062       151.389       153.100    
  42  0.284964      -1.25539      -1.90021       1.90021       152.477       154.377    
  43  0.685335     -0.377848     -0.571925      0.571925       152.374       152.946    
  44  0.262422      -1.33780      -2.02495       2.02495       152.720       154.745    
  45  0.767375     -0.264780     -0.400781      0.400781       152.325       152.726    
  46  0.109385      -2.21288      -3.34950       3.34950       152.640       155.990    
  47  0.306599      -1.18221      -1.78944       1.78944       152.717       154.507    
  48  0.406201     -0.900907      -1.36365       1.36365       149.661       151.024    
  49  0.423601     -0.858964      -1.30016       1.30016       152.254       153.555    
  50  0.525023     -0.644313     -0.975256      0.975256       150.072       151.047    
  51  0.947103E-01  -2.35693      -3.56754       3.56754       153.572       157.140    
  52  0.408122     -0.896189      -1.35651       1.35651       152.119       153.476    
  53  0.463749     -0.768411      -1.16310       1.16310       153.409       154.573    
  54  0.985471     -0.146353E-01 -0.221525E-01  0.221525E-01   153.690       153.712    
  55  0.956569E-01  -2.34699      -3.55249       3.55249       152.501       156.053    
  56  0.529007     -0.636753     -0.963813      0.963813       152.100       153.064    
  57  0.648382     -0.433275     -0.655821      0.655821       155.176       155.831    
  58  0.910357     -0.939189E-01 -0.142159      0.142159       153.419       153.561    
  59  0.469822     -0.755402      -1.14340       1.14340       154.646       155.789    
  60  0.254916      -1.36682      -2.06887       2.06887       154.957       157.025    
  61  0.724030E-01  -2.62551      -3.97406       3.97406       153.432       157.406    
  62  0.719606     -0.329052     -0.498065      0.498065       154.189       154.687    
  63  0.354448      -1.03719      -1.56993       1.56993       150.503       152.072    
  64  0.587821     -0.531332     -0.804244      0.804244       153.535       154.339    
  65  0.623489     -0.472425     -0.715079      0.715079       155.803       156.518    
  66  0.379055     -0.970075      -1.46834       1.46834       156.420       157.888    
  67  0.340109      -1.07849      -1.63244       1.63244       155.996       157.629    
  68  0.473068     -0.748517      -1.13298       1.13298       155.551       156.684    
  69  0.865116     -0.144892     -0.219313      0.219313       153.757       153.977    
  70  0.344257      -1.06637      -1.61409       1.61409       153.169       154.783    
  71  0.110417      -2.20349      -3.33528       3.33528       156.578       159.913    
  72  0.116327E-01  -4.45393      -6.74164       6.74164       153.309       160.051    
  73  0.665633     -0.407016     -0.616075      0.616075       153.530       154.146    
  74  0.682392     -0.382151     -0.578438      0.578438       155.270       155.848    
  75  0.832993     -0.182730     -0.276586      0.276586       153.034       153.310    
loop,thermsimp(1:2)       52   3.77240       4.19505    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    483        151.61          0.87          1.15         25.20          0.16          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       52
neval is:      482
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       53
neval is:      482


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      482     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265283      -1.32696      -2.00853       2.00853       148.625       150.634    
   2  0.615112     -0.485951     -0.735553      0.735553       148.996       149.731    
   3  0.424286E-01  -3.15993      -4.78299       4.78299       149.272       154.055    
   4  0.726479     -0.319546     -0.483676      0.483676       149.307       149.790    
   5  0.402368     -0.910388      -1.37800       1.37800       148.852       150.230    
   6  0.958941E-01  -2.34451      -3.54874       3.54874       149.818       153.367    
   7  0.137400      -1.98486      -3.00435       3.00435       149.126       152.130    
   8  0.887138     -0.119755     -0.181266      0.181266       149.608       149.789    
   9  0.655001     -0.423119     -0.640449      0.640449       149.772       150.413    
  10  0.304836      -1.18798      -1.79817       1.79817       149.661       151.459    
  11  0.346250      -1.06059      -1.60535       1.60535       150.072       151.677    
  12  0.608663E-01  -2.79908      -4.23678       4.23678       149.129       153.366    
  13  0.307248      -1.18010      -1.78624       1.78624       150.154       151.940    
  14  0.695201     -0.363555     -0.550290      0.550290       151.041       151.592    
  15  0.628698     -0.464104     -0.702485      0.702485       151.313       152.015    
  16  0.609308     -0.495432     -0.749904      0.749904       150.349       151.099    
  17  0.335400      -1.09243      -1.65354       1.65354       150.469       152.122    
  18  0.910258     -0.940273E-01 -0.142323      0.142323       149.969       150.111    
  19  0.439254E-01  -3.12526      -4.73051       4.73051       150.797       155.527    
  20  0.978338     -0.219001E-01 -0.331488E-01  0.331488E-01   151.784       151.817    
  21  0.282939      -1.26252      -1.91100       1.91100       150.503       152.414    
  22  0.763165     -0.270281     -0.409108      0.409108       150.157       150.566    
  23  0.206330      -1.57828      -2.38894       2.38894       148.541       150.930    
  24  0.228687      -1.47540      -2.23322       2.23322       149.281       151.514    
  25  0.634584E-01  -2.75737      -4.17366       4.17366       151.692       155.866    
  26  0.665745E-01  -2.70943      -4.10110       4.10110       150.944       155.045    
  27  0.761759     -0.272125     -0.411899      0.411899       148.507       148.919    
  28  0.636615     -0.451590     -0.683543      0.683543       152.325       153.009    
  29  0.804468     -0.217574     -0.329328      0.329328       150.744       151.074    
  30  0.508586     -0.676120      -1.02340       1.02340       151.287       152.310    
  31  0.232797      -1.45759      -2.20626       2.20626       152.198       154.404    
  32  0.932655     -0.697196E-01 -0.105530      0.105530       150.039       150.145    
  33  0.970411     -0.300359E-01 -0.454635E-01  0.454635E-01   150.890       150.935    
  34  0.151993      -1.88392      -2.85157       2.85157       152.374       155.226    
  35  0.571421     -0.559629     -0.847075      0.847075       152.100       152.947    
  36  0.673371     -0.395458     -0.598580      0.598580       149.932       150.530    
  37  0.828783     -0.187797     -0.284256      0.284256       151.389       151.674    
  38  0.285628      -1.25307      -1.89669       1.89669       152.866       154.763    
  39  0.127849      -2.05691      -3.11341       3.11341       151.846       154.959    
  40  0.101247      -2.29019      -3.46652       3.46652       151.560       155.026    
  41  0.593355     -0.521962     -0.790062      0.790062       150.497       151.287    
  42  0.362303      -1.01527      -1.53676       1.53676       153.034       154.570    
  43  0.754411     -0.281818     -0.426570      0.426570       151.679       152.105    
  44  0.917727     -0.858556E-01 -0.129954      0.129954       152.119       152.249    
  45  0.281495      -1.26764      -1.91875       1.91875       152.254       154.173    
  46  0.757766     -0.277381     -0.419854      0.419854       153.419       153.839    
  47  0.721843E-01  -2.62853      -3.97864       3.97864       153.690       157.669    
  48  0.995421     -0.458990E-02 -0.694745E-02  0.694745E-02   150.536       150.543    
  49  0.101230      -2.29036      -3.46678       3.46678       153.757       157.224    
  50  0.477194     -0.739832      -1.11984       1.11984       152.040       153.160    
  51  0.414653E-01  -3.18290      -4.81775       4.81775       153.530       158.348    
  52  0.927379     -0.753934E-01 -0.114118      0.114118       153.535       153.649    
  53  0.642274     -0.442741     -0.670149      0.670149       152.477       153.147    
  54  0.510784     -0.671809      -1.01687       1.01687       152.717       153.734    
  55  0.394196     -0.930907      -1.40906       1.40906       153.409       154.819    
  56  0.665507     -0.407206     -0.616362      0.616362       154.189       154.806    
  57  0.444368     -0.811101      -1.22771       1.22771       152.720       153.948    
  58  0.386291     -0.951164      -1.43972       1.43972       153.169       154.608    
  59  0.185997      -1.68202      -2.54597       2.54597       152.390       154.936    
  60  0.430546     -0.842700      -1.27554       1.27554       154.646       155.921    
  61  0.720151     -0.328295     -0.496919      0.496919       155.176       155.673    
  62  0.289744      -1.23876      -1.87503       1.87503       155.270       157.145    
  63  0.678945     -0.387216     -0.586104      0.586104       151.177       151.763    
  64  0.444970     -0.809748      -1.22566       1.22566       152.640       153.866    
  65  0.993971E-01  -2.30863      -3.49443       3.49443       152.501       155.995    
  66  0.417064     -0.874517      -1.32370       1.32370       155.803       157.127    
  67  0.778412E-01  -2.55308      -3.86444       3.86444       155.551       159.415    
  68  0.366030      -1.00504      -1.52127       1.52127       154.957       156.478    
  69  0.603490     -0.505025     -0.764425      0.764425       153.572       154.337    
  70  0.951517     -0.496979E-01 -0.752246E-01  0.752246E-01   153.432       153.508    
  71  0.723579     -0.323545     -0.489730      0.489730       155.996       156.486    
  72  0.504861     -0.683472      -1.03453       1.03453       156.420       157.454    
  73  0.528267     -0.638153     -0.965932      0.965932       156.578       157.544    
  74  0.429121     -0.846016      -1.28056       1.28056       153.309       154.590    
  75  0.530731     -0.633499     -0.958887      0.958887       151.607       152.566    
loop,thermsimp(1:2)       53   2.00853      0.735553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    484        148.62          0.87          1.15         25.25          0.09          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    485        161.38          0.85          1.15         25.23          0.20          0.05         27.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       53
neval is:      484
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       54
neval is:      484


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      484     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.551084     -0.595868     -0.901928      0.901928       148.507       149.409    
   2  0.390343     -0.940730      -1.42392       1.42392       148.996       150.420    
   3  0.506127     -0.680968      -1.03074       1.03074       149.608       150.639    
   4  0.964820     -0.358141E-01 -0.542096E-01  0.542096E-01   149.307       149.361    
   5  0.647775     -0.434212     -0.657240      0.657240       149.969       150.626    
   6  0.251459      -1.38048      -2.08954       2.08954       150.039       152.129    
   7  0.908837     -0.955893E-01 -0.144688      0.144688       148.852       148.996    
   8  0.800726     -0.222236     -0.336384      0.336384       149.772       150.109    
   9  0.480867E-01  -3.03475      -4.59351       4.59351       149.932       154.525    
  10  0.859127     -0.151839     -0.229829      0.229829       150.536       150.766    
  11  0.618632     -0.480244     -0.726915      0.726915       150.157       150.884    
  12  0.262118      -1.33896      -2.02670       2.02670       148.625       150.652    
  13  0.373394     -0.985121      -1.49112       1.49112       148.541       150.032    
  14  0.698954     -0.358170     -0.542139      0.542139       150.890       151.432    
  15  0.698639     -0.358621     -0.542822      0.542822       150.744       151.287    
  16  0.683233     -0.380919     -0.576573      0.576573       150.349       150.926    
  17  0.475083     -0.744266      -1.12655       1.12655       150.497       151.624    
  18  0.957666E-01  -2.34584      -3.55075       3.55075       149.661       153.211    
  19  0.767182     -0.265031     -0.401161      0.401161       149.281       149.682    
  20  0.418812     -0.870332      -1.31737       1.31737       151.041       152.359    
  21  0.940661     -0.611725E-01 -0.925930E-01  0.925930E-01   151.389       151.482    
  22  0.827990     -0.188754     -0.285705      0.285705       150.072       150.357    
  23  0.463008     -0.770011      -1.16552       1.16552       151.177       152.343    
  24  0.723352     -0.323860     -0.490206      0.490206       151.784       152.274    
  25  0.330269      -1.10785      -1.67688       1.67688       150.154       151.831    
  26  0.640927E-02  -5.05001      -7.64388       7.64388       151.313       158.957    
  27  0.849682     -0.162893     -0.246561      0.246561       151.679       151.925    
  28  0.457568     -0.781830      -1.18341       1.18341       150.469       151.652    
  29  0.720244     -0.328166     -0.496724      0.496724       149.126       149.622    
  30  0.953392     -0.477287E-01 -0.722440E-01  0.722440E-01   152.119       152.192    
  31  0.322501      -1.13165      -1.71291       1.71291       151.287       153.000    
  32  0.335509      -1.09211      -1.65305       1.65305       150.503       152.156    
  33  0.140389      -1.96334      -2.97178       2.97178       151.607       154.579    
  34  0.429265     -0.845681      -1.28005       1.28005       152.100       153.380    
  35  0.775769E-01  -2.55649      -3.86959       3.86959       152.325       156.195    
  36  0.414811     -0.879933      -1.33190       1.33190       152.477       153.809    
  37  0.183764      -1.69410      -2.56425       2.56425       152.040       154.604    
  38  0.357541      -1.02851      -1.55678       1.55678       149.129       150.686    
  39  0.401419E-02  -5.51792      -8.35213       8.35213       149.818       158.171    
  40  0.399411     -0.917764      -1.38916       1.38916       153.432       154.822    
  41  0.795187     -0.229178     -0.346892      0.346892       153.535       153.882    
  42  0.673332     -0.395517     -0.598669      0.598669       152.717       153.316    
  43  0.898211     -0.107350     -0.162489      0.162489       153.419       153.582    
  44  0.769733     -0.261711     -0.396135      0.396135       152.640       153.036    
  45  0.791938     -0.233272     -0.353089      0.353089       152.720       153.073    
  46  0.537104     -0.621563     -0.940820      0.940820       149.272       150.213    
  47  0.313282      -1.16065      -1.75680       1.75680       152.254       154.011    
  48  0.516025     -0.661601      -1.00142       1.00142       153.572       154.574    
  49  0.119673      -2.12299      -3.21343       3.21343       152.198       155.412    
  50  0.221920      -1.50544      -2.27869       2.27869       153.034       155.312    
  51  0.639805     -0.446592     -0.675978      0.675978       153.309       153.985    
  52  0.947460     -0.539710E-01 -0.816925E-01  0.816925E-01   153.169       153.250    
  53  0.786966     -0.239570     -0.362622      0.362622       152.866       153.229    
  54  0.990455     -0.959131E-02 -0.145178E-01  0.145178E-01   154.189       154.204    
  55  0.959621     -0.412173E-01 -0.623880E-01  0.623880E-01   153.409       153.472    
  56  0.617783     -0.481618     -0.728994      0.728994       152.390       153.119    
  57  0.958668     -0.422110E-01 -0.638921E-01  0.638921E-01   151.846       151.910    
  58  0.723379     -0.323823     -0.490150      0.490150       151.560       152.050    
  59  0.602684     -0.506362     -0.766449      0.766449       150.944       151.711    
  60  0.897895     -0.107702     -0.163022      0.163022       152.374       152.537    
  61  0.849418     -0.163204     -0.247031      0.247031       150.797       151.044    
  62  0.478641     -0.736804      -1.11525       1.11525       155.176       156.291    
  63  0.148154      -1.90950      -2.89030       2.89030       151.692       154.582    
  64  0.600585     -0.509852     -0.771730      0.771730       154.646       155.417    
  65  0.720491     -0.327823     -0.496204      0.496204       152.501       152.997    
  66  0.131895      -2.02575      -3.06625       3.06625       154.957       158.023    
  67  0.877712     -0.130437     -0.197433      0.197433       155.996       156.194    
  68  0.739537     -0.301730     -0.456710      0.456710       155.803       156.260    
  69  0.201243      -1.60324      -2.42672       2.42672       155.270       157.696    
  70  0.710405     -0.341920     -0.517542      0.517542       153.757       154.275    
  71  0.121804      -2.10534      -3.18673       3.18673       156.420       159.606    
  72  0.390710     -0.939789      -1.42250       1.42250       156.578       158.000    
  73  0.481361     -0.731137      -1.10668       1.10668       153.690       154.797    
  74  0.706694     -0.347157     -0.525470      0.525470       153.530       154.056    
  75  0.207588      -1.57220      -2.37974       2.37974       148.623       151.003    
loop,thermsimp(1:2)       54  0.901928       1.42392    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    486        154.21          0.87          1.15         25.17          0.17          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       54
neval is:      485
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       55
neval is:      485


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      485     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.146220      -1.92264      -2.91018       2.91018       148.852       151.762    
   2  0.620947     -0.476510     -0.721263      0.721263       149.307       150.028    
   3  0.177272      -1.73007      -2.61870       2.61870       148.507       151.126    
   4  0.884738     -0.122464     -0.185365      0.185365       149.126       149.311    
   5  0.304829      -1.18800      -1.79821       1.79821       149.281       151.079    
   6  0.555834     -0.587286     -0.888938      0.888938       148.541       149.430    
   7  0.396848     -0.924202      -1.39891       1.39891       149.772       151.171    
   8  0.570840     -0.560646     -0.848614      0.848614       149.272       150.121    
   9  0.726203     -0.319926     -0.484252      0.484252       150.072       150.556    
  10  0.917349E-01  -2.38885      -3.61585       3.61585       148.996       152.612    
  11  0.456603     -0.783941      -1.18660       1.18660       149.969       151.155    
  12  0.602259     -0.507068     -0.767517      0.767517       149.608       150.375    
  13  0.496888E-01  -3.00198      -4.54390       4.54390       148.625       153.169    
  14  0.583997     -0.537860     -0.814124      0.814124       149.129       149.944    
  15  0.200789E-01  -3.90809      -5.91542       5.91542       150.536       156.451    
  16  0.422855     -0.860726      -1.30283       1.30283       150.157       151.460    
  17  0.535645     -0.624284     -0.944939      0.944939       150.349       151.294    
  18  0.413266     -0.883663      -1.33754       1.33754       148.623       149.961    
  19  0.342457      -1.07161      -1.62203       1.62203       150.797       152.419    
  20  0.638345     -0.448876     -0.679435      0.679435       150.744       151.424    
  21  0.655695     -0.422060     -0.638845      0.638845       150.890       151.529    
  22  0.629392     -0.463001     -0.700815      0.700815       151.389       152.090    
  23  0.977606     -0.226486E-01 -0.342817E-01  0.342817E-01   150.497       150.531    
  24  0.752980E-01  -2.58630      -3.91472       3.91472       150.469       154.383    
  25  0.874423     -0.134191     -0.203117      0.203117       150.944       151.147    
  26  0.587202     -0.532387     -0.805840      0.805840       150.154       150.959    
  27  0.880682     -0.127059     -0.192321      0.192321       151.846       152.038    
  28  0.878591E-01  -2.43202      -3.68120       3.68120       151.679       155.360    
  29  0.695678     -0.362869     -0.549252      0.549252       151.560       152.109    
  30  0.124758      -2.08138      -3.15045       3.15045       150.039       153.190    
  31  0.605547     -0.501622     -0.759274      0.759274       150.503       151.262    
  32  0.650291     -0.430335     -0.651371      0.651371       152.119       152.771    
  33  0.639591     -0.446926     -0.676483      0.676483       151.784       152.460    
  34  0.872983     -0.135839     -0.205611      0.205611       151.177       151.383    
  35  0.291503E-01  -3.53529      -5.35114       5.35114       151.041       156.392    
  36  0.290539      -1.23602      -1.87088       1.87088       152.374       154.245    
  37  0.759349     -0.275294     -0.416696      0.416696       152.501       152.918    
  38  0.599537     -0.511597     -0.774372      0.774372       151.287       152.061    
  39  0.948707     -0.526557E-01 -0.797016E-01  0.797016E-01   152.640       152.720    
  40  0.180828      -1.71021      -2.58864       2.58864       152.720       155.309    
  41  0.385708     -0.952674      -1.44200       1.44200       152.390       153.832    
  42  0.299380      -1.20604      -1.82551       1.82551       149.661       151.486    
  43  0.853891     -0.157952     -0.239082      0.239082       152.866       153.105    
  44  0.502000E-01  -2.99174      -4.52841       4.52841       153.169       157.697    
  45  0.510049     -0.673249      -1.01905       1.01905       152.717       153.736    
  46  0.500368     -0.692411      -1.04806       1.04806       152.100       153.148    
  47  0.947833     -0.535774E-01 -0.810966E-01  0.810966E-01   153.409       153.491    
  48  0.147734      -1.91235      -2.89460       2.89460       153.419       156.314    
  49  0.448609     -0.801603      -1.21334       1.21334       152.477       153.690    
  50  0.589816E-01  -2.83053      -4.28439       4.28439       153.535       157.819    
  51  0.914696     -0.891630E-01 -0.134960      0.134960       153.309       153.444    
  52  0.187672E-01  -3.97564      -6.01768       6.01768       152.254       158.272    
  53  0.842801     -0.171024     -0.258869      0.258869       153.530       153.789    
  54  0.394775     -0.929438      -1.40683       1.40683       154.189       155.596    
  55  0.830091E-01  -2.48880      -3.76715       3.76715       153.757       157.525    
  56  0.448195     -0.802527      -1.21473       1.21473       149.932       151.146    
  57  0.685603     -0.377456     -0.571331      0.571331       153.572       154.144    
  58  0.773262     -0.257137     -0.389212      0.389212       151.607       151.997    
  59  0.785103E-01  -2.54453      -3.85149       3.85149       151.692       155.544    
  60  0.163001      -1.81400      -2.74573       2.74573       152.040       154.786    
  61  0.679089     -0.387003     -0.585782      0.585782       153.690       154.276    
  62  0.748996     -0.289022     -0.437474      0.437474       153.432       153.870    
  63  0.856909     -0.154424     -0.233742      0.233742       153.034       153.267    
  64  0.336175      -1.09012      -1.65005       1.65005       152.198       153.848    
  65  0.502408     -0.688342      -1.04190       1.04190       154.646       155.687    
  66  0.372496     -0.987528      -1.49476       1.49476       155.996       157.491    
  67  0.179011      -1.72031      -2.60393       2.60393       152.325       154.929    
  68  0.601874     -0.507708     -0.768485      0.768485       155.803       156.572    
  69  0.559888E-01  -2.88260      -4.36322       4.36322       155.176       159.539    
  70  0.409810     -0.892062      -1.35026       1.35026       155.270       156.620    
  71  0.473934     -0.746688      -1.13021       1.13021       156.578       157.708    
  72  0.426316     -0.852574      -1.29049       1.29049       154.957       156.247    
  73  0.588130     -0.530808     -0.803450      0.803450       149.818       150.622    
  74  0.196860      -1.62526      -2.46006       2.46006       151.313       153.773    
  75  0.780659     -0.247616     -0.374801      0.374801       154.206       154.581    
loop,thermsimp(1:2)       55   2.91018      0.721263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    487        148.11          0.87          1.14         25.28          0.13          0.06         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    488        157.57          0.84          1.12         25.25          0.07          0.05         27.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       55
neval is:      487
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       56
neval is:      487


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      487     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.500984     -0.691182      -1.04620       1.04620       149.126       150.172    
   2  0.324862      -1.12436      -1.70187       1.70187       148.541       150.243    
   3  0.195419      -1.63261      -2.47118       2.47118       149.129       151.601    
   4  0.203731      -1.59096      -2.40813       2.40813       148.623       151.032    
   5  0.177968      -1.72615      -2.61277       2.61277       149.307       151.919    
   6  0.835197     -0.180088     -0.272587      0.272587       149.272       149.545    
   7  0.302476      -1.19575      -1.80994       1.80994       149.608       151.418    
   8  0.352903E-01  -3.34415      -5.06183       5.06183       150.497       155.559    
   9  0.308671      -1.17548      -1.77925       1.77925       150.072       151.851    
  10  0.409306E-01  -3.19588      -4.83740       4.83740       149.818       154.656    
  11  0.615747     -0.484919     -0.733991      0.733991       150.154       150.888    
  12  0.766359     -0.266105     -0.402786      0.402786       149.281       149.683    
  13  0.625912     -0.468545     -0.709207      0.709207       148.507       149.216    
  14  0.435348     -0.831610      -1.25876       1.25876       149.932       151.190    
  15  0.341014      -1.07583      -1.62842       1.62842       150.944       152.572    
  16  0.434268E-01  -3.13668      -4.74779       4.74779       149.969       154.716    
  17  0.604743     -0.502951     -0.761286      0.761286       149.772       150.534    
  18  0.536278     -0.623102     -0.943151      0.943151       150.503       151.446    
  19  0.207674      -1.57179      -2.37911       2.37911       150.349       152.728    
  20  0.985598E-01  -2.31709      -3.50724       3.50724       151.177       154.684    
  21  0.814506     -0.205174     -0.310558      0.310558       150.744       151.055    
  22  0.447321     -0.804478      -1.21769       1.21769       150.157       151.375    
  23  0.741331     -0.299308     -0.453043      0.453043       149.661       150.114    
  24  0.601378     -0.508531     -0.769731      0.769731       150.890       151.660    
  25  0.421939E-01  -3.16548      -4.79139       4.79139       148.852       153.643    
  26  0.837477     -0.177362     -0.268461      0.268461       151.607       151.876    
  27  0.297606      -1.21198      -1.83450       1.83450       151.846       153.680    
  28  0.383069     -0.959540      -1.45240       1.45240       151.287       152.739    
  29  0.291041      -1.23429      -1.86827       1.86827       151.389       153.258    
  30  0.788773     -0.237276     -0.359150      0.359150       151.560       151.919    
  31  0.471794     -0.751213      -1.13706       1.13706       150.797       151.934    
  32  0.313755      -1.15914      -1.75452       1.75452       151.784       153.538    
  33  0.878815     -0.129181     -0.195532      0.195532       148.996       149.191    
  34  0.442284     -0.815802      -1.23483       1.23483       152.640       153.875    
  35  0.577998     -0.548185     -0.829754      0.829754       152.119       152.949    
  36  0.167851      -1.78468      -2.70135       2.70135       152.501       155.202    
  37  0.317031      -1.14875      -1.73880       1.73880       152.866       154.605    
  38  0.645763     -0.437323     -0.661948      0.661948       152.100       152.762    
  39  0.682139     -0.382522     -0.578999      0.578999       148.625       149.204    
  40  0.116437      -2.15041      -3.25493       3.25493       150.039       153.294    
  41  0.510594     -0.672180      -1.01744       1.01744       153.034       154.051    
  42  0.807696E-02  -4.81874      -7.29382       7.29382       153.309       160.603    
  43  0.367650      -1.00062      -1.51458       1.51458       153.409       154.924    
  44  0.446943     -0.805324      -1.21897       1.21897       152.477       153.696    
  45  0.181490      -1.70655      -2.58310       2.58310       152.717       155.300    
  46  0.912521     -0.915438E-01 -0.138564      0.138564       151.313       151.451    
  47  0.692870     -0.366912     -0.555372      0.555372       153.530       154.085    
  48  0.317456      -1.14742      -1.73677       1.73677       152.390       154.127    
  49  0.776642     -0.252776     -0.382610      0.382610       152.198       152.581    
  50  0.248677      -1.39160      -2.10638       2.10638       153.432       155.539    
  51  0.931207     -0.712734E-01 -0.107882      0.107882       153.572       153.680    
  52  0.127901      -2.05650      -3.11280       3.11280       152.374       155.487    
  53  0.780843     -0.247381     -0.374446      0.374446       153.690       154.065    
  54  0.773205     -0.257211     -0.389324      0.389324       150.469       150.858    
  55  0.764817     -0.268119     -0.405834      0.405834       154.206       154.612    
  56  0.230689      -1.46668      -2.22003       2.22003       152.040       154.260    
  57  0.424204     -0.857541      -1.29800       1.29800       152.325       153.623    
  58  0.281344      -1.26818      -1.91956       1.91956       152.720       154.640    
  59  0.523215     -0.647764     -0.980479      0.980479       151.679       152.659    
  60  0.392415     -0.935434      -1.41591       1.41591       151.692       153.108    
  61  0.351563      -1.04537      -1.58230       1.58230       154.189       155.772    
  62  0.176215      -1.73605      -2.62775       2.62775       154.646       157.273    
  63  0.383277     -0.958998      -1.45158       1.45158       154.957       156.408    
  64  0.855506     -0.156062     -0.236222      0.236222       153.419       153.655    
  65  0.919810     -0.835877E-01 -0.126521      0.126521       151.041       151.168    
  66  0.327423      -1.11650      -1.68998       1.68998       150.536       152.226    
  67  0.688698     -0.372953     -0.564515      0.564515       155.803       156.368    
  68  0.424438     -0.856990      -1.29717       1.29717       155.270       156.567    
  69  0.706226     -0.347820     -0.526474      0.526474       155.996       156.523    
  70  0.806363E-01  -2.51781      -3.81104       3.81104       153.757       157.568    
  71  0.177184E-01  -4.03315      -6.10472       6.10472       153.169       159.273    
  72  0.908444     -0.960219E-01 -0.145342      0.145342       156.578       156.723    
  73  0.743268     -0.296698     -0.449093      0.449093       153.535       153.984    
  74  0.453488     -0.790786      -1.19696       1.19696       152.254       153.451    
  75  0.930558     -0.719709E-01 -0.108938      0.108938       148.113       148.222    
loop,thermsimp(1:2)       56   1.04620       1.70187    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    489        148.38          0.87          1.15         25.20          0.25          0.05         27.52
Just calling func    0   0         27.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    490        152.42          0.86          1.15         25.27          0.07          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       56
neval is:      489
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       57
neval is:      489


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      489     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842839     -0.170980     -0.258801      0.258801       148.113       148.371    
   2  0.986423     -0.136696E-01 -0.206908E-01  0.206908E-01   148.996       149.017    
   3  0.633540     -0.456433     -0.690874      0.690874       148.625       149.316    
   4  0.518217E-01  -2.95995      -4.48028       4.48028       148.507       152.987    
   5  0.187161      -1.67579      -2.53653       2.53653       149.272       151.809    
   6  0.148298      -1.90853      -2.88883       2.88883       149.281       152.169    
   7  0.438795     -0.823722      -1.24682       1.24682       149.661       150.907    
   8  0.763297     -0.270109     -0.408846      0.408846       149.126       149.534    
   9  0.338275      -1.08390      -1.64062       1.64062       148.541       150.182    
  10  0.918815     -0.846702E-01 -0.128160      0.128160       149.772       149.900    
  11  0.349782      -1.05045      -1.58999       1.58999       150.469       152.059    
  12  0.131188      -2.03112      -3.07438       3.07438       150.154       153.228    
  13  0.961440     -0.393229E-01 -0.595206E-01  0.595206E-01   148.623       148.683    
  14  0.489949     -0.713455      -1.07991       1.07991       150.744       151.824    
  15  0.149956      -1.89742      -2.87200       2.87200       151.041       153.913    
  16  0.684004     -0.379791     -0.574866      0.574866       149.932       150.507    
  17  0.314778      -1.15589      -1.74960       1.74960       150.157       151.907    
  18  0.615260     -0.485711     -0.735190      0.735190       149.608       150.343    
  19  0.432805     -0.837468      -1.26762       1.26762       150.503       151.770    
  20  0.362224      -1.01549      -1.53709       1.53709       151.313       152.850    
  21  0.622697     -0.473696     -0.717003      0.717003       149.129       149.846    
  22  0.486392     -0.720740      -1.09094       1.09094       150.890       151.981    
  23  0.465513     -0.764615      -1.15735       1.15735       150.072       151.229    
  24  0.738251     -0.303471     -0.459345      0.459345       151.607       152.067    
  25  0.384600     -0.955551      -1.44636       1.44636       151.560       153.006    
  26  0.293922      -1.22444      -1.85336       1.85336       149.307       151.160    
  27  0.371803     -0.989390      -1.49758       1.49758       150.797       152.295    
  28  0.237589      -1.43721      -2.17542       2.17542       150.536       152.711    
  29  0.286147      -1.25125      -1.89393       1.89393       150.944       152.838    
  30  0.500459     -0.692230      -1.04778       1.04778       152.198       153.246    
  31  0.134865      -2.00348      -3.03254       3.03254       151.679       154.711    
  32  0.660213     -0.415193     -0.628451      0.628451       150.349       150.978    
  33  0.481817E-01  -3.03278      -4.59052       4.59052       151.287       155.877    
  34  0.683728     -0.380195     -0.575477      0.575477       152.100       152.676    
  35  0.634601     -0.454758     -0.688339      0.688339       152.119       152.808    
  36  0.195153      -1.63397      -2.47324       2.47324       151.692       154.165    
  37  0.176401      -1.73499      -2.62615       2.62615       151.389       154.016    
  38  0.770296     -0.260980     -0.395029      0.395029       150.039       150.434    
  39  0.223005      -1.50056      -2.27130       2.27130       152.254       154.526    
  40  0.530844E-01  -2.93587      -4.44384       4.44384       151.784       156.228    
  41  0.778354     -0.250574     -0.379277      0.379277       152.325       152.705    
  42  0.118362E-02  -6.73917      -10.2007       10.2007       148.852       159.052    
  43  0.658087     -0.418418     -0.633332      0.633332       153.419       154.053    
  44  0.832154E-01  -2.48632      -3.76339       3.76339       153.572       157.336    
  45  0.569178     -0.563562     -0.853027      0.853027       151.846       152.699    
  46  0.511101     -0.671188      -1.01594       1.01594       152.477       153.493    
  47  0.585157     -0.535875     -0.811121      0.811121       152.640       153.451    
  48  0.821991     -0.196026     -0.296713      0.296713       153.535       153.831    
  49  0.433318     -0.836284      -1.26583       1.26583       153.034       154.300    
  50  0.286210      -1.25103      -1.89361       1.89361       153.690       155.584    
  51  0.455679     -0.785966      -1.18967       1.18967       153.530       154.720    
  52  0.729010     -0.316067     -0.478411      0.478411       152.390       152.869    
  53  0.608401     -0.496921     -0.752159      0.752159       152.040       152.792    
  54  0.432221     -0.838819      -1.26967       1.26967       152.866       154.136    
  55  0.772117     -0.258620     -0.391456      0.391456       154.206       154.598    
  56  0.380207     -0.967041      -1.46375       1.46375       152.720       154.184    
  57  0.636340     -0.452023     -0.684199      0.684199       149.818       150.503    
  58  0.327756      -1.11549      -1.68844       1.68844       151.177       152.866    
  59  0.382236     -0.961716      -1.45569       1.45569       149.969       151.424    
  60  0.531883     -0.631332     -0.955607      0.955607       153.409       154.365    
  61  0.607532     -0.498350     -0.754320      0.754320       152.501       153.255    
  62  0.468455E-01  -3.06090      -4.63309       4.63309       152.717       157.350    
  63  0.900653     -0.104635     -0.158380      0.158380       152.374       152.532    
  64  0.590161     -0.527360     -0.798232      0.798232       153.432       154.231    
  65  0.681015     -0.384170     -0.581495      0.581495       150.497       151.079    
  66  0.796345     -0.227723     -0.344690      0.344690       154.189       154.534    
  67  0.510508     -0.672349      -1.01769       1.01769       155.803       156.821    
  68  0.422797     -0.860862      -1.30303       1.30303       154.957       156.260    
  69  0.813242     -0.206727     -0.312909      0.312909       155.996       156.309    
  70  0.338687      -1.08268      -1.63878       1.63878       155.270       156.909    
  71  0.275232      -1.29014      -1.95280       1.95280       156.578       158.531    
  72  0.821298     -0.196870     -0.297989      0.297989       154.646       154.944    
  73  0.334740      -1.09440      -1.65652       1.65652       153.757       155.414    
  74  0.227941      -1.47867      -2.23817       2.23817       153.169       155.407    
  75  0.182825      -1.69923      -2.57201       2.57201       148.380       150.952    
loop,thermsimp(1:2)       57  0.258801      0.206908E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    491        152.44          0.86          1.15         25.27          0.11          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    152.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       57
neval is:      490
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       58
neval is:      490


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      490     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.524788     -0.644761     -0.975934      0.975934       148.113       149.089    
   2  0.210443      -1.55854      -2.35907       2.35907       148.623       150.982    
   3  0.930464     -0.720719E-01 -0.109091      0.109091       148.996       149.105    
   4  0.858664     -0.152378     -0.230645      0.230645       148.625       148.856    
   5  0.285726      -1.25272      -1.89616       1.89616       149.126       151.022    
   6  0.144917      -1.93160      -2.92374       2.92374       149.129       152.053    
   7  0.999977     -0.230243E-04 -0.348504E-04  0.348504E-04   149.772       149.772    
   8  0.985482     -0.146243E-01 -0.221358E-01  0.221358E-01   148.541       148.563    
   9  0.204255      -1.58839      -2.40424       2.40424       149.608       152.012    
  10  0.932647     -0.697284E-01 -0.105543      0.105543       150.039       150.145    
  11  0.916829     -0.868346E-01 -0.131436      0.131436       149.818       149.950    
  12  0.468002     -0.759282      -1.14928       1.14928       149.932       151.081    
  13  0.314730      -1.15604      -1.74982       1.74982       149.661       151.410    
  14  0.641708     -0.443621     -0.671482      0.671482       148.380       149.051    
  15  0.829165     -0.187336     -0.283558      0.283558       150.349       150.633    
  16  0.163052E-01  -4.11627      -6.23054       6.23054       150.497       156.728    
  17  0.795714     -0.228516     -0.345890      0.345890       149.307       149.652    
  18  0.933380     -0.689433E-01 -0.104355      0.104355       150.072       150.176    
  19  0.839430E-01  -2.47762      -3.75021       3.75021       149.969       153.719    
  20  0.684979     -0.378367     -0.572711      0.572711       150.503       151.075    
  21  0.473112     -0.748422      -1.13284       1.13284       149.272       150.405    
  22  0.513710     -0.666097      -1.00823       1.00823       150.744       151.753    
  23  0.360837      -1.01933      -1.54289       1.54289       150.157       151.700    
  24  0.427332E-01  -3.15278      -4.77216       4.77216       150.890       155.662    
  25  0.772426     -0.258219     -0.390850      0.390850       150.469       150.859    
  26  0.514081     -0.665375      -1.00714       1.00714       151.607       152.614    
  27  0.794349     -0.230233     -0.348489      0.348489       149.281       149.629    
  28  0.306573      -1.18230      -1.78957       1.78957       150.797       152.587    
  29  0.542954     -0.610731     -0.924425      0.924425       152.374       153.298    
  30  0.309169      -1.17387      -1.77681       1.77681       152.100       153.877    
  31  0.870005     -0.139256     -0.210783      0.210783       151.846       152.057    
  32  0.559982     -0.579850     -0.877682      0.877682       152.325       153.203    
  33  0.779248     -0.249426     -0.377541      0.377541       150.536       150.914    
  34  0.852492     -0.159591     -0.241563      0.241563       152.040       152.282    
  35  0.513103E-01  -2.96986      -4.49529       4.49529       152.119       156.615    
  36  0.843623     -0.170050     -0.257393      0.257393       150.944       151.201    
  37  0.514962E-01  -2.96625      -4.48982       4.48982       151.313       155.803    
  38  0.509762     -0.673812      -1.01991       1.01991       151.177       152.197    
  39  0.511862E-01  -2.97229      -4.49896       4.49896       152.390       156.889    
  40  0.118788      -2.13041      -3.22467       3.22467       148.507       151.732    
  41  0.156747      -1.85312      -2.80495       2.80495       151.560       154.365    
  42  0.715854     -0.334278     -0.505976      0.505976       150.154       150.660    
  43  0.472923     -0.748824      -1.13345       1.13345       152.198       153.332    
  44  0.105826      -2.24596      -3.39956       3.39956       152.501       155.900    
  45  0.214159      -1.54104      -2.33257       2.33257       152.640       154.973    
  46  0.212749      -1.54764      -2.34257       2.34257       152.477       154.820    
  47  0.173051      -1.75417      -2.65517       2.65517       153.535       156.190    
  48  0.301411      -1.19928      -1.81527       1.81527       151.041       152.857    
  49  0.438447E-01  -3.12710      -4.73329       4.73329       151.389       156.123    
  50  0.480396     -0.733144      -1.10971       1.10971       153.419       154.529    
  51  0.537259     -0.621276     -0.940386      0.940386       152.866       153.806    
  52  0.252945      -1.37458      -2.08062       2.08062       151.692       153.773    
  53  0.273135      -1.29779      -1.96438       1.96438       152.720       154.685    
  54  0.225234      -1.49061      -2.25625       2.25625       153.432       155.689    
  55  0.443550     -0.812944      -1.23050       1.23050       153.034       154.264    
  56  0.592768     -0.522951     -0.791558      0.791558       153.409       154.201    
  57  0.455824     -0.785648      -1.18919       1.18919       152.254       153.444    
  58  0.630261     -0.461621     -0.698726      0.698726       154.189       154.888    
  59  0.901310     -0.103906     -0.157275      0.157275       154.206       154.364    
  60  0.114663      -2.16576      -3.27817       3.27817       151.679       154.957    
  61  0.349469      -1.05134      -1.59135       1.59135       153.530       155.121    
  62  0.316083      -1.15175      -1.74333       1.74333       154.646       156.389    
  63  0.447795     -0.803419      -1.21609       1.21609       153.169       154.385    
  64  0.360287      -1.02086      -1.54520       1.54520       153.757       155.303    
  65  0.874703     -0.133871     -0.202632      0.202632       153.690       153.893    
  66  0.580675     -0.543565     -0.822759      0.822759       151.287       152.110    
  67  0.614367     -0.487163     -0.737387      0.737387       151.784       152.521    
  68  0.993807     -0.621246E-02 -0.940341E-02  0.940341E-02   154.957       154.966    
  69  0.740329E-01  -2.60325      -3.94037       3.94037       155.996       159.937    
  70  0.617323     -0.482363     -0.730122      0.730122       155.803       156.534    
  71  0.919859     -0.835350E-01 -0.126442      0.126442       155.270       155.396    
  72  0.404694     -0.904625      -1.36927       1.36927       153.572       154.942    
  73  0.774629     -0.255372     -0.386540      0.386540       152.717       153.104    
  74  0.394741E-02  -5.53469      -8.37752       8.37752       156.578       164.955    
  75  0.339444      -1.08045      -1.63540       1.63540       152.441       154.076    
loop,thermsimp(1:2)       58  0.975934       2.35907    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    492        148.55          0.85          1.15         25.22          0.17          0.05         27.45
Just calling func    0   0         27.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    493        156.37          0.86          1.16         25.28          0.10          0.05         27.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       58
neval is:      492
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       59
neval is:      492


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      492     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810144     -0.210543     -0.318686      0.318686       148.541       148.860    
   2  0.897699     -0.107920     -0.163352      0.163352       148.625       148.789    
   3  0.719626     -0.329023     -0.498022      0.498022       148.380       148.878    
   4  0.415410     -0.878490      -1.32971       1.32971       148.113       149.442    
   5  0.991404     -0.863283E-02 -0.130670E-01  0.130670E-01   148.996       149.009    
   6  0.700708     -0.355664     -0.538346      0.538346       149.281       149.819    
   7  0.358389      -1.02614      -1.55320       1.55320       149.307       150.860    
   8  0.726731     -0.319199     -0.483152      0.483152       149.772       150.255    
   9  0.386831     -0.949769      -1.43760       1.43760       149.818       151.256    
  10  0.294784      -1.22151      -1.84893       1.84893       150.039       151.888    
  11  0.315848      -1.15249      -1.74446       1.74446       150.072       151.816    
  12  0.284632E-01  -3.55914      -5.38725       5.38725       149.272       154.660    
  13  0.316608      -1.15009      -1.74082       1.74082       150.349       152.090    
  14  0.309580      -1.17254      -1.77480       1.77480       150.154       151.928    
  15  0.758095     -0.276946     -0.419196      0.419196       150.469       150.888    
  16  0.132565      -2.02068      -3.05857       3.05857       150.536       153.595    
  17  0.963676     -0.369997E-01 -0.560041E-01  0.560041E-01   148.623       148.679    
  18  0.428996     -0.846309      -1.28100       1.28100       149.126       150.407    
  19  0.975676     -0.246243E-01 -0.372722E-01  0.372722E-01   150.503       150.540    
  20  0.475146     -0.744134      -1.12635       1.12635       149.932       151.058    
  21  0.507593     -0.678075      -1.02636       1.02636       150.944       151.970    
  22  0.275170      -1.29037      -1.95315       1.95315       149.661       151.614    
  23  0.475456     -0.743481      -1.12536       1.12536       150.157       151.283    
  24  0.302172      -1.19676      -1.81146       1.81146       148.507       150.319    
  25  0.243313      -1.41341      -2.13939       2.13939       150.744       152.884    
  26  0.356568      -1.03123      -1.56091       1.56091       149.608       151.169    
  27  0.630291     -0.461573     -0.698654      0.698654       149.129       149.828    
  28  0.642369     -0.442593     -0.669925      0.669925       151.846       152.516    
  29  0.593424     -0.521846     -0.789885      0.789885       151.287       152.077    
  30  0.813415     -0.206514     -0.312587      0.312587       151.177       151.490    
  31  0.623760     -0.471989     -0.714420      0.714420       152.040       152.754    
  32  0.314127      -1.15796      -1.75273       1.75273       151.784       153.537    
  33  0.333295      -1.09873      -1.66307       1.66307       150.797       152.460    
  34  0.974282     -0.260545E-01 -0.394370E-01  0.394370E-01   151.607       151.647    
  35  0.217685      -1.52471      -2.30785       2.30785       151.041       153.349    
  36  0.327903      -1.11504      -1.68776       1.68776       152.717       154.405    
  37  0.336622      -1.08880      -1.64804       1.64804       152.325       153.973    
  38  0.569408     -0.563159     -0.852418      0.852418       152.374       153.226    
  39  0.577250E-01  -2.85206      -4.31699       4.31699       152.198       156.515    
  40  0.237530      -1.43746      -2.17579       2.17579       152.254       154.430    
  41  0.622163     -0.474553     -0.718301      0.718301       149.969       150.687    
  42  0.476244     -0.741825      -1.12285       1.12285       151.692       152.815    
  43  0.914828     -0.890196E-01 -0.134743      0.134743       152.866       153.001    
  44  0.555890     -0.587184     -0.888783      0.888783       152.100       152.989    
  45  0.874902     -0.133644     -0.202288      0.202288       153.690       153.893    
  46  0.637871     -0.449619     -0.680561      0.680561       152.441       153.122    
  47  0.574852     -0.553643     -0.838015      0.838015       153.409       154.247    
  48  0.753498     -0.283029     -0.428403      0.428403       153.034       153.462    
  49  0.678645     -0.387657     -0.586772      0.586772       154.206       154.793    
  50  0.361720      -1.01688      -1.53919       1.53919       151.560       153.099    
  51  0.123381      -2.09248      -3.16726       3.16726       153.169       156.336    
  52  0.350198      -1.04926      -1.58819       1.58819       153.419       155.007    
  53  0.392572     -0.935035      -1.41530       1.41530       152.720       154.136    
  54  0.567106     -0.567208     -0.858547      0.858547       152.477       153.336    
  55  0.583382     -0.538913     -0.815718      0.815718       154.189       155.005    
  56  0.128820      -2.04934      -3.10195       3.10195       153.572       156.674    
  57  0.180317      -1.71304      -2.59291       2.59291       151.679       154.272    
  58  0.447281     -0.804568      -1.21782       1.21782       154.957       156.174    
  59  0.638289E-01  -2.75155      -4.16485       4.16485       152.640       156.805    
  60  0.689733     -0.371451     -0.562242      0.562242       153.530       154.092    
  61  0.997591     -0.241199E-02 -0.365087E-02  0.365087E-02   153.757       153.761    
  62  0.726899     -0.318968     -0.482802      0.482802       155.270       155.753    
  63  0.714747     -0.335826     -0.508319      0.508319       150.890       151.398    
  64  0.792529     -0.232527     -0.351961      0.351961       153.432       153.784    
  65  0.194558      -1.63703      -2.47786       2.47786       151.313       153.791    
  66  0.238549      -1.43318      -2.16932       2.16932       152.501       154.670    
  67  0.358562      -1.02565      -1.55247       1.55247       151.389       152.942    
  68  0.536397     -0.622881     -0.942815      0.942815       153.535       154.478    
  69  0.158207      -1.84385      -2.79092       2.79092       154.646       157.436    
  70  0.957518     -0.434110E-01 -0.657085E-01  0.657085E-01   155.803       155.869    
  71  0.172302      -1.75851      -2.66174       2.66174       152.119       154.781    
  72  0.737268     -0.304804     -0.461363      0.461363       150.497       150.959    
  73  0.986082     -0.140154E-01 -0.212142E-01  0.212142E-01   152.390       152.412    
  74  0.758477     -0.276443     -0.418434      0.418434       155.996       156.415    
  75  0.716456     -0.333439     -0.504705      0.504705       148.549       149.054    
loop,thermsimp(1:2)       59  0.318686      0.163352    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    494        151.36          0.87          1.16         25.28          0.11          0.06         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       59
neval is:      493
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       60
neval is:      493


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      493     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421109     -0.864863      -1.30909       1.30909       148.623       149.932    
   2  0.422022     -0.862697      -1.30581       1.30581       148.625       149.931    
   3  0.295550      -1.21892      -1.84500       1.84500       148.541       150.386    
   4  0.624681     -0.470513     -0.712186      0.712186       148.380       149.092    
   5  0.768652     -0.263117     -0.398264      0.398264       148.996       149.394    
   6  0.888855     -0.117822     -0.178339      0.178339       148.549       148.727    
   7  0.509140     -0.675031      -1.02175       1.02175       148.113       149.134    
   8  0.493628     -0.705973      -1.06859       1.06859       149.281       150.349    
   9  0.781578     -0.246440     -0.373021      0.373021       149.129       149.502    
  10  0.617265     -0.482456     -0.730263      0.730263       149.772       150.503    
  11  0.335801      -1.09124      -1.65173       1.65173       148.507       150.159    
  12  0.570262     -0.561660     -0.850149      0.850149       149.126       149.976    
  13  0.159269      -1.83716      -2.78079       2.78079       150.503       153.283    
  14  0.339767      -1.07950      -1.63396       1.63396       149.969       151.602    
  15  0.493989     -0.705242      -1.06748       1.06748       149.307       150.374    
  16  0.839254     -0.175242     -0.265253      0.265253       150.469       150.734    
  17  0.421889E-01  -3.16560      -4.79156       4.79156       150.497       155.289    
  18  0.278070      -1.27988      -1.93728       1.93728       149.932       151.869    
  19  0.942016E-01  -2.36232      -3.57569       3.57569       149.608       153.184    
  20  0.627802E-01  -2.76812      -4.18992       4.18992       149.818       154.008    
  21  0.228221      -1.47744      -2.23631       2.23631       150.157       152.394    
  22  0.929298     -0.733263E-01 -0.110989      0.110989       150.890       151.001    
  23  0.505346     -0.682512      -1.03308       1.03308       151.177       152.210    
  24  0.181316      -1.70751      -2.58456       2.58456       149.661       152.245    
  25  0.430977     -0.841701      -1.27403       1.27403       151.607       152.881    
  26  0.161604      -1.82261      -2.75876       2.75876       150.072       152.830    
  27  0.428774     -0.846826      -1.28179       1.28179       150.039       151.321    
  28  0.178213      -1.72477      -2.61068       2.61068       150.154       152.764    
  29  0.440884E-01  -3.12156      -4.72491       4.72491       150.944       155.669    
  30  0.224754      -1.49275      -2.25948       2.25948       151.287       153.546    
  31  0.174128      -1.74796      -2.64578       2.64578       150.349       152.995    
  32  0.798091     -0.225532     -0.341374      0.341374       152.390       152.732    
  33  0.303667E-01  -3.49441      -5.28926       5.28926       150.797       156.086    
  34  0.256290      -1.36145      -2.06074       2.06074       151.846       153.907    
  35  0.367468      -1.00112      -1.51533       1.51533       152.040       153.555    
  36  0.455395     -0.786590      -1.19061       1.19061       151.692       152.883    
  37  0.618612     -0.480277     -0.726965      0.726965       150.744       151.471    
  38  0.348147      -1.05513      -1.59709       1.59709       151.389       152.986    
  39  0.930736     -0.717801E-01 -0.108649      0.108649       152.100       152.209    
  40  0.822258     -0.195701     -0.296220      0.296220       152.866       153.162    
  41  0.444031     -0.811860      -1.22886       1.22886       151.560       152.789    
  42  0.599515     -0.511634     -0.774429      0.774429       152.441       153.215    
  43  0.866231     -0.143603     -0.217363      0.217363       152.374       152.591    
  44  0.143678      -1.94018      -2.93673       2.93673       152.477       155.414    
  45  0.280081      -1.27267      -1.92637       1.92637       151.041       152.968    
  46  0.834705E-01  -2.48326      -3.75876       3.75876       153.034       156.792    
  47  0.514478     -0.664603      -1.00597       1.00597       151.784       152.790    
  48  0.358853      -1.02484      -1.55124       1.55124       150.536       152.087    
  49  0.432015     -0.839295      -1.27039       1.27039       153.757       155.028    
  50  0.959030     -0.418333E-01 -0.633204E-01  0.633204E-01   153.432       153.496    
  51  0.236715      -1.44090      -2.18100       2.18100       151.313       153.494    
  52  0.741102     -0.299618     -0.453512      0.453512       153.690       154.144    
  53  0.971037     -0.293910E-01 -0.444873E-01  0.444873E-01   152.325       152.370    
  54  0.362643      -1.01434      -1.53534       1.53534       153.530       155.065    
  55  0.719521     -0.329170     -0.498243      0.498243       152.720       153.219    
  56  0.291024      -1.23435      -1.86836       1.86836       153.409       155.278    
  57  0.138234      -1.97881      -2.99520       2.99520       151.679       154.674    
  58  0.429879E-01  -3.14684      -4.76317       4.76317       152.717       157.480    
  59  0.323316      -1.12913      -1.70909       1.70909       152.254       153.964    
  60  0.590735     -0.526388     -0.796761      0.796761       153.535       154.331    
  61  0.286837      -1.24884      -1.89029       1.89029       149.272       151.163    
  62  0.141252      -1.95721      -2.96251       2.96251       152.501       155.463    
  63  0.500198     -0.692752      -1.04857       1.04857       152.119       153.168    
  64  0.972784     -0.275935E-01 -0.417665E-01  0.417665E-01   154.206       154.248    
  65  0.314123      -1.15797      -1.75275       1.75275       154.189       155.942    
  66  0.812870     -0.207184     -0.313601      0.313601       153.419       153.733    
  67  0.676584     -0.390698     -0.591375      0.591375       155.270       155.861    
  68  0.945984     -0.555301E-01 -0.840524E-01  0.840524E-01   155.803       155.887    
  69  0.133398      -2.01442      -3.04910       3.04910       154.957       158.006    
  70  0.896391     -0.109379     -0.165560      0.165560       153.169       153.334    
  71  0.606016     -0.500848     -0.758102      0.758102       155.996       156.754    
  72  0.966027     -0.345636E-01 -0.523167E-01  0.523167E-01   152.198       152.250    
  73  0.252690      -1.37559      -2.08215       2.08215       153.572       155.654    
  74  0.211658      -1.55278      -2.35035       2.35035       152.640       154.991    
  75  0.135883      -1.99596      -3.02117       3.02117       151.361       154.382    
loop,thermsimp(1:2)       60   1.30909       1.30581    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    495        148.96          0.86          1.15         25.28          0.11          0.06         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    496        164.45          0.85          1.15         25.29          0.16          0.06         27.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       60
neval is:      495
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       61
neval is:      495


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      495     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297049      -1.21386      -1.83734       1.83734       148.549       150.386    
   2  0.575341     -0.552793     -0.836728      0.836728       148.380       149.216    
   3  0.202897      -1.59506      -2.41434       2.41434       148.113       150.527    
   4  0.154497      -1.86758      -2.82684       2.82684       148.996       151.823    
   5  0.990348     -0.969851E-02 -0.146800E-01  0.146800E-01   149.129       149.144    
   6  0.189774      -1.66192      -2.51554       2.51554       148.625       151.141    
   7  0.744626     -0.294873     -0.446331      0.446331       148.623       149.070    
   8  0.927855     -0.748799E-01 -0.113341      0.113341       149.126       149.239    
   9  0.730698     -0.313755     -0.474911      0.474911       148.507       148.982    
  10  0.375841     -0.978590      -1.48123       1.48123       149.281       150.762    
  11  0.792754     -0.232243     -0.351531      0.351531       149.307       149.658    
  12  0.232963      -1.45687      -2.20518       2.20518       148.541       150.746    
  13  0.816440     -0.202802     -0.306968      0.306968       149.772       150.079    
  14  0.626790     -0.467144     -0.707086      0.707086       150.469       151.176    
  15  0.943587     -0.580664E-01 -0.878914E-01  0.878914E-01   150.890       150.978    
  16  0.790178     -0.235497     -0.356457      0.356457       149.272       149.629    
  17  0.318791      -1.14322      -1.73042       1.73042       150.039       151.770    
  18  0.982573     -0.175804E-01 -0.266103E-01  0.266103E-01   150.744       150.771    
  19  0.959024     -0.418390E-01 -0.633291E-01  0.633291E-01   149.969       150.032    
  20  0.309588      -1.17251      -1.77476       1.77476       149.932       151.706    
  21  0.255297      -1.36533      -2.06661       2.06661       150.536       152.603    
  22  0.287931      -1.24504      -1.88453       1.88453       152.100       153.985    
  23  0.948191     -0.531995E-01 -0.805248E-01  0.805248E-01   151.177       151.258    
  24  0.231941      -1.46127      -2.21184       2.21184       149.661       151.872    
  25  0.730836E-01  -2.61615      -3.95990       3.95990       152.198       156.158    
  26  0.130964      -2.03283      -3.07697       3.07697       152.325       155.402    
  27  0.199641      -1.61124      -2.43883       2.43883       150.157       152.596    
  28  0.375837     -0.978600      -1.48125       1.48125       152.374       153.855    
  29  0.584992     -0.536158     -0.811548      0.811548       152.390       153.202    
  30  0.505862     -0.681491      -1.03153       1.03153       150.154       151.185    
  31  0.431310     -0.840928      -1.27286       1.27286       151.560       152.833    
  32  0.273049E-01  -3.60069      -5.45013       5.45013       151.784       157.234    
  33  0.865419E-01  -2.44713      -3.70406       3.70406       150.072       153.776    
  34  0.174989      -1.74303      -2.63831       2.63831       151.607       154.246    
  35  0.547517     -0.602362     -0.911757      0.911757       151.692       152.604    
  36  0.562902E-02  -5.17982      -7.84037       7.84037       151.041       158.882    
  37  0.386997     -0.949338      -1.43695       1.43695       151.389       152.826    
  38  0.750107     -0.287539     -0.435230      0.435230       150.349       150.785    
  39  0.218818      -1.51951      -2.29999       2.29999       152.866       155.166    
  40  0.821700     -0.196380     -0.297247      0.297247       152.119       152.417    
  41  0.223897      -1.49657      -2.26526       2.26526       149.608       151.873    
  42  0.744973     -0.294407     -0.445625      0.445625       152.441       152.887    
  43  0.279239      -1.27569      -1.93093       1.93093       152.720       154.651    
  44  0.210659      -1.55751      -2.35751       2.35751       150.503       152.860    
  45  0.998203     -0.179835E-02 -0.272205E-02  0.272205E-02   153.169       153.171    
  46  0.355772      -1.03347      -1.56429       1.56429       151.313       152.877    
  47  0.437893     -0.825781      -1.24993       1.24993       153.432       154.682    
  48  0.897806E-01  -2.41039      -3.64845       3.64845       151.287       154.935    
  49  0.970127     -0.303283E-01 -0.459060E-01  0.459060E-01   152.040       152.086    
  50  0.463485     -0.768981      -1.16396       1.16396       153.419       154.583    
  51  0.605373     -0.501911     -0.759711      0.759711       151.846       152.606    
  52  0.622934     -0.473314     -0.716425      0.716425       152.254       152.971    
  53  0.937920     -0.640902E-01 -0.970093E-01  0.970093E-01   149.818       149.915    
  54  0.130922      -2.03316      -3.07746       3.07746       153.690       156.768    
  55  0.165920      -1.79625      -2.71887       2.71887       154.206       156.925    
  56  0.797155     -0.226707     -0.343151      0.343151       153.535       153.878    
  57  0.172586      -1.75686      -2.65924       2.65924       151.361       154.020    
  58  0.150998E-02  -6.49566      -9.83206       9.83206       151.679       161.511    
  59  0.134911      -2.00314      -3.03203       3.03203       152.640       155.672    
  60  0.358158      -1.02678      -1.55417       1.55417       153.757       155.312    
  61  0.734411     -0.308686     -0.467239      0.467239       153.530       153.997    
  62  0.567422     -0.566653     -0.857706      0.857706       153.409       154.267    
  63  0.454507     -0.788542      -1.19357       1.19357       150.497       151.691    
  64  0.739757     -0.301433     -0.456260      0.456260       152.477       152.933    
  65  0.731555     -0.312583     -0.473137      0.473137       152.501       152.974    
  66  0.577923     -0.548315     -0.829950      0.829950       153.572       154.402    
  67  0.119177      -2.12715      -3.21973       3.21973       150.944       154.164    
  68  0.588098     -0.530862     -0.803532      0.803532       155.270       156.073    
  69  0.683912E-01  -2.68251      -4.06035       4.06035       155.803       159.864    
  70  0.695263     -0.363466     -0.550155      0.550155       154.189       154.739    
  71  0.172496      -1.75738      -2.66004       2.66004       150.797       153.457    
  72  0.703437     -0.351777     -0.532462      0.532462       155.996       156.529    
  73  0.177335      -1.72971      -2.61816       2.61816       153.034       155.652    
  74  0.418671     -0.870670      -1.31788       1.31788       152.717       154.035    
  75  0.267692      -1.31792      -1.99485       1.99485       148.964       150.959    
loop,thermsimp(1:2)       61   1.83734      0.836728    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    497        149.58          0.87          1.16         25.27          0.42          0.05         27.78
Just calling func    0   0         27.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    498        173.79          0.86          1.15         25.20          0.24          0.05         27.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       61
neval is:      497
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       62
neval is:      497


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      497     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.176971      -1.73177      -2.62127       2.62127       148.507       151.128    
   2  0.163120      -1.81327      -2.74463       2.74463       148.623       151.368    
   3  0.828064     -0.188664     -0.285569      0.285569       149.129       149.415    
   4  0.491219     -0.710866      -1.07599       1.07599       148.380       149.456    
   5  0.473397     -0.747822      -1.13193       1.13193       149.126       150.257    
   6  0.737394     -0.304633     -0.461103      0.461103       149.272       149.733    
   7  0.206273      -1.57855      -2.38936       2.38936       149.307       151.696    
   8  0.354259      -1.03773      -1.57074       1.57074       149.818       151.389    
   9  0.233194      -1.45588      -2.20368       2.20368       149.969       152.172    
  10  0.118120E-01  -4.43864      -6.71849       6.71849       149.772       156.491    
  11  0.918073     -0.854782E-01 -0.129383      0.129383       148.549       148.678    
  12  0.845317     -0.168044     -0.254358      0.254358       148.113       148.367    
  13  0.706964     -0.346775     -0.524892      0.524892       148.541       149.066    
  14  0.779001     -0.249743     -0.378020      0.378020       149.281       149.659    
  15  0.455959     -0.785352      -1.18874       1.18874       150.744       151.933    
  16  0.849694     -0.162880     -0.246540      0.246540       150.349       150.596    
  17  0.516839     -0.660024     -0.999036      0.999036       148.964       149.963    
  18  0.892086     -0.114192     -0.172846      0.172846       150.890       151.063    
  19  0.297598      -1.21201      -1.83454       1.83454       148.625       150.460    
  20  0.719255E-01  -2.63213      -3.98408       3.98408       150.469       154.453    
  21  0.722825     -0.324588     -0.491308      0.491308       150.154       150.645    
  22  0.550765     -0.596446     -0.902803      0.902803       151.177       152.080    
  23  0.988777     -0.112866E-01 -0.170839E-01  0.170839E-01   150.497       150.514    
  24  0.706438     -0.347520     -0.526019      0.526019       149.932       150.458    
  25  0.630672     -0.460969     -0.697740      0.697740       150.039       150.737    
  26  0.377261     -0.974818      -1.47552       1.47552       148.996       150.471    
  27  0.149262E-01  -4.20464      -6.36429       6.36429       149.661       156.025    
  28  0.185115      -1.68678      -2.55317       2.55317       149.608       152.161    
  29  0.836458     -0.178579     -0.270303      0.270303       152.040       152.310    
  30  0.778304     -0.250638     -0.379375      0.379375       152.119       152.499    
  31  0.495633     -0.701920      -1.06245       1.06245       150.157       151.220    
  32  0.795767E-01  -2.53103      -3.83107       3.83107       150.536       154.367    
  33  0.361545      -1.01737      -1.53993       1.53993       151.692       153.232    
  34  0.451858     -0.794387      -1.20241       1.20241       151.846       153.048    
  35  0.923485     -0.796009E-01 -0.120487      0.120487       151.389       151.510    
  36  0.189492      -1.66341      -2.51780       2.51780       151.560       154.078    
  37  0.357280      -1.02924      -1.55789       1.55789       150.503       152.060    
  38  0.113039      -2.18002      -3.29976       3.29976       151.313       154.612    
  39  0.418587     -0.870870      -1.31818       1.31818       152.441       153.759    
  40  0.732527E-01  -2.61384      -3.95640       3.95640       152.477       156.434    
  41  0.768904     -0.262790     -0.397768      0.397768       152.254       152.652    
  42  0.323623      -1.12817      -1.70765       1.70765       152.501       154.209    
  43  0.837193     -0.177701     -0.268975      0.268975       153.169       153.438    
  44  0.656230     -0.421244     -0.637611      0.637611       152.390       153.028    
  45  0.778603     -0.250253     -0.378793      0.378793       150.797       151.176    
  46  0.736391     -0.305994     -0.463163      0.463163       150.072       150.535    
  47  0.625820E-01  -2.77128      -4.19471       4.19471       152.374       156.569    
  48  0.480814     -0.732276      -1.10840       1.10840       153.535       154.643    
  49  0.356284      -1.03203      -1.56211       1.56211       152.100       153.662    
  50  0.888471     -0.118254     -0.178993      0.178993       153.530       153.709    
  51  0.670294     -0.400038     -0.605513      0.605513       151.361       151.967    
  52  0.651699     -0.428172     -0.648097      0.648097       152.717       153.365    
  53  0.620073E-01  -2.78050      -4.20867       4.20867       150.944       155.153    
  54  0.114125      -2.17046      -3.28528       3.28528       151.607       154.893    
  55  0.332668      -1.10061      -1.66592       1.66592       153.409       155.075    
  56  0.215526      -1.53467      -2.32294       2.32294       153.572       155.895    
  57  0.491711     -0.709864      -1.07448       1.07448       153.419       154.494    
  58  0.251655      -1.37970      -2.08836       2.08836       152.720       154.809    
  59  0.526604     -0.641306     -0.970704      0.970704       153.432       154.403    
  60  0.981731     -0.184377E-01 -0.279079E-01  0.279079E-01   154.189       154.217    
  61  0.189796      -1.66180      -2.51537       2.51537       151.287       153.802    
  62  0.315522      -1.15353      -1.74602       1.74602       152.866       154.612    
  63  0.637772E-01  -2.75236      -4.16607       4.16607       153.757       157.923    
  64  0.399639     -0.917194      -1.38830       1.38830       152.325       153.714    
  65  0.696521     -0.361657     -0.547417      0.547417       153.034       153.581    
  66  0.576152     -0.551384     -0.834595      0.834595       152.640       153.475    
  67  0.641755     -0.443549     -0.671373      0.671373       155.270       155.941    
  68  0.451268     -0.795694      -1.20439       1.20439       152.198       153.402    
  69  0.948099     -0.532968E-01 -0.806720E-01  0.806720E-01   155.996       156.077    
  70  0.974321     -0.260147E-01 -0.393768E-01  0.393768E-01   153.690       153.730    
  71  0.287349      -1.24706      -1.88759       1.88759       154.206       156.094    
  72  0.651002E-02  -5.03441      -7.62027       7.62027       151.784       159.404    
  73  0.831576     -0.184433     -0.279164      0.279164       151.041       151.321    
  74  0.998315     -0.168637E-02 -0.255255E-02  0.255255E-02   155.803       155.806    
  75  0.481859     -0.730104      -1.10511       1.10511       149.580       150.685    
loop,thermsimp(1:2)       62   2.62127       2.74463    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    499        148.64          0.86          1.16         25.24          0.08          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    500        148.77          0.86          1.16         25.19          0.22          0.05         27.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       62
neval is:      499
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       63
neval is:      499


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      499     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.278876      -1.27699      -1.93289       1.93289       148.113       150.045    
   2  0.603344     -0.505268     -0.764792      0.764792       148.549       149.314    
   3  0.363780      -1.01121      -1.53060       1.53060       148.541       150.072    
   4  0.298736      -1.20820      -1.82877       1.82877       149.129       150.958    
   5  0.992861     -0.716435E-02 -0.108442E-01  0.108442E-01   148.380       148.390    
   6  0.166164      -1.79478      -2.71664       2.71664       149.281       151.997    
   7  0.416382     -0.876153      -1.32618       1.32618       149.272       150.599    
   8  0.770949     -0.260133     -0.393747      0.393747       148.964       149.358    
   9  0.782423     -0.245359     -0.371385      0.371385       149.126       149.497    
  10  0.115501      -2.15847      -3.26714       3.26714       149.932       153.199    
  11  0.348954      -1.05281      -1.59358       1.59358       148.625       150.219    
  12  0.441818     -0.816857      -1.23642       1.23642       148.996       150.232    
  13  0.888072     -0.118703     -0.179673      0.179673       150.497       150.677    
  14  0.808059     -0.213120     -0.322587      0.322587       150.072       150.394    
  15  0.432540E-01  -3.14067      -4.75383       4.75383       150.349       155.103    
  16  0.369483     -0.995652      -1.50706       1.50706       150.154       151.661    
  17  0.262535      -1.33737      -2.02430       2.02430       149.580       151.605    
  18  0.873783     -0.134923     -0.204225      0.204225       150.039       150.244    
  19  0.636654     -0.451528     -0.683450      0.683450       150.890       151.573    
  20  0.534780     -0.625901     -0.947386      0.947386       148.507       149.455    
  21  0.557733     -0.583875     -0.883775      0.883775       150.797       151.681    
  22  0.929598     -0.730032E-01 -0.110500      0.110500       150.157       150.268    
  23  0.350245      -1.04912      -1.58799       1.58799       151.041       152.629    
  24  0.391945     -0.936633      -1.41772       1.41772       148.623       150.041    
  25  0.123996      -2.08751      -3.15973       3.15973       149.818       152.978    
  26  0.609578E-01  -2.79757      -4.23451       4.23451       151.389       155.624    
  27  0.165807      -1.79693      -2.71990       2.71990       149.307       152.026    
  28  0.766484     -0.265941     -0.402539      0.402539       150.744       151.147    
  29  0.629881     -0.462224     -0.699639      0.699639       151.361       152.061    
  30  0.273641      -1.29594      -1.96158       1.96158       150.503       152.464    
  31  0.344034E-01  -3.36960      -5.10035       5.10035       151.177       156.277    
  32  0.747187     -0.291440     -0.441134      0.441134       149.608       150.049    
  33  0.511998     -0.669435      -1.01328       1.01328       149.969       150.982    
  34  0.544406     -0.608061     -0.920383      0.920383       152.040       152.960    
  35  0.272552      -1.29993      -1.96762       1.96762       152.119       154.087    
  36  0.605186     -0.502220     -0.760179      0.760179       152.254       153.015    
  37  0.923323     -0.797758E-01 -0.120752      0.120752       152.390       152.511    
  38  0.373879     -0.983822      -1.48915       1.48915       151.846       153.335    
  39  0.325119      -1.12356      -1.70067       1.70067       151.692       153.393    
  40  0.746995E-01  -2.59428      -3.92680       3.92680       152.717       156.644    
  41  0.465030     -0.765653      -1.15892       1.15892       152.198       153.357    
  42  0.150040      -1.89685      -2.87115       2.87115       153.169       156.040    
  43  0.127827E-01  -4.35967      -6.59895       6.59895       152.640       159.239    
  44  0.667575     -0.404103     -0.611665      0.611665       153.034       153.645    
  45  0.725579     -0.320785     -0.485551      0.485551       152.100       152.586    
  46  0.555976     -0.587030     -0.888550      0.888550       153.530       154.419    
  47  0.834777     -0.180590     -0.273348      0.273348       152.325       152.599    
  48  0.582668     -0.540138     -0.817573      0.817573       153.690       154.508    
  49  0.265288      -1.32694      -2.00851       2.00851       152.441       154.449    
  50  0.935593     -0.665747E-01 -0.100770      0.100770       151.287       151.388    
  51  0.789592     -0.236239     -0.357580      0.357580       151.560       151.917    
  52  0.337907      -1.08498      -1.64227       1.64227       152.501       154.143    
  53  0.359971      -1.02173      -1.54653       1.54653       154.189       155.736    
  54  0.655159     -0.422878     -0.640083      0.640083       150.536       151.176    
  55  0.293383      -1.22628      -1.85614       1.85614       153.432       155.288    
  56  0.647978     -0.433898     -0.656764      0.656764       150.469       151.125    
  57  0.571456     -0.559568     -0.846982      0.846982       153.419       154.266    
  58  0.516522     -0.660637     -0.999964      0.999964       152.866       153.866    
  59  0.930382     -0.721605E-01 -0.109225      0.109225       151.313       151.422    
  60  0.380525     -0.966205      -1.46248       1.46248       153.535       154.997    
  61  0.888107     -0.118663     -0.179612      0.179612       152.720       152.900    
  62  0.191259      -1.65413      -2.50375       2.50375       151.607       154.111    
  63  0.158996      -1.83887      -2.78339       2.78339       153.409       156.193    
  64  0.829121     -0.187389     -0.283639      0.283639       150.944       151.228    
  65  0.510161     -0.673029      -1.01872       1.01872       155.803       156.822    
  66  0.558223     -0.582996     -0.882444      0.882444       153.572       154.455    
  67  0.328311      -1.11379      -1.68588       1.68588       155.270       156.956    
  68  0.346675      -1.05937      -1.60350       1.60350       149.661       151.264    
  69  0.410565E-01  -3.19281      -4.83275       4.83275       155.996       160.829    
  70  0.802652     -0.219834     -0.332749      0.332749       154.206       154.539    
  71  0.230447      -1.46773      -2.22161       2.22161       152.477       154.699    
  72  0.454287     -0.789026      -1.19430       1.19430       149.772       150.967    
  73  0.701793     -0.354117     -0.536004      0.536004       152.374       152.910    
  74  0.521269     -0.651489     -0.986118      0.986118       153.757       154.744    
  75  0.460012     -0.776502      -1.17534       1.17534       148.637       149.812    
loop,thermsimp(1:2)       63   1.93289      0.764792    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    501        154.51          0.86          1.15         25.24          0.17          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  500    154.51        1.097     -2.485      3.363     -102.6      1.286    
                      0.4029      1.158     -99.70      3.655    -0.3084E-01
                       2.261     -1.159      1.530      7154.      1396.    
                     -0.8936E-01  0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      6213.      1211.    
                     -0.5672     -6.186     -4.070     -8.958      6.205    
                      -15.87     -3.565      9565.      0.000     0.1083E+05

                      -1520.     0.1137E+05 -5030.     0.1068E+05  5331.    
                       6176.     0.5860E-01 0.1901      0.000     0.1415    
                     -0.3679    -0.1163     0.9071E-01 0.7761E-01-0.2286E-01

                     -0.5056    -0.7365      0.000     0.9961E-01-0.1282    
                       0.000     0.5941E-01 0.9347E-01-0.1806    -0.2790E-01
                     -0.1242E-01-0.4063E-02-0.6203     -1.180      4609.    

                      -1.087    -0.2972     -2.236     -2.306    -0.2288    
                     -0.3203      9.169      8.680    -0.1491E+05 -4.000    
                     -0.7848     -1.692      9.233      8.850    -0.1117E+05

                      -4.000     0.3732    -0.6944      8.910      9.050    
                     -0.2411E+05 -7.000    -0.8781     -1.109      8.986    
                       8.725    -0.1995E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       63
neval is:      500
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       64
neval is:      500


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      500     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379008E-01  -3.27278      -4.95380       4.95380       148.380       153.333    
   2  0.772352     -0.258315     -0.390994      0.390994       148.549       148.940    
   3  0.802807     -0.219640     -0.332456      0.332456       148.964       149.296    
   4  0.514956     -0.663673      -1.00456       1.00456       148.507       149.512    
   5  0.554302     -0.590045     -0.893114      0.893114       149.126       150.019    
   6  0.503754     -0.685667      -1.03785       1.03785       148.637       149.675    
   7  0.400624     -0.914733      -1.38457       1.38457       148.623       150.008    
   8  0.912762     -0.912806E-01 -0.138166      0.138166       148.113       148.251    
   9  0.197841E-01  -3.92288      -5.93781       5.93781       149.608       155.546    
  10  0.657402E-02  -5.02463      -7.60546       7.60546       148.541       156.147    
  11  0.802861     -0.219574     -0.332356      0.332356       148.625       148.958    
  12  0.494750     -0.703703      -1.06515       1.06515       148.996       150.061    
  13  0.533728     -0.627869     -0.950365      0.950365       150.039       150.990    
  14  0.202886      -1.59511      -2.41442       2.41442       150.157       152.572    
  15  0.459498     -0.777620      -1.17703       1.17703       150.072       151.249    
  16  0.476385     -0.741530      -1.12241       1.12241       149.272       150.395    
  17  0.604782     -0.502887     -0.761189      0.761189       150.497       151.258    
  18  0.652452     -0.427018     -0.646350      0.646350       149.129       149.776    
  19  0.611862     -0.491249     -0.743572      0.743572       149.772       150.516    
  20  0.974982     -0.253365E-01 -0.383503E-01  0.383503E-01   149.969       150.007    
  21  0.950238E-01  -2.35363      -3.56254       3.56254       150.469       154.031    
  22  0.322848      -1.13057      -1.71128       1.71128       150.744       152.456    
  23  0.581382     -0.542348     -0.820918      0.820918       150.536       151.357    
  24  0.267652      -1.31807      -1.99508       1.99508       150.944       152.939    
  25  0.232641E-01  -3.76084      -5.69255       5.69255       149.661       155.353    
  26  0.515113E-01  -2.96595      -4.48938       4.48938       151.287       155.776    
  27  0.300440      -1.20251      -1.82016       1.82016       151.313       153.133    
  28  0.760936     -0.273206     -0.413534      0.413534       150.890       151.303    
  29  0.447102     -0.804968      -1.21843       1.21843       149.580       150.799    
  30  0.550831     -0.596328     -0.902624      0.902624       150.154       151.056    
  31  0.314273      -1.15749      -1.75202       1.75202       150.797       152.549    
  32  0.967020     -0.335365E-01 -0.507620E-01  0.507620E-01   151.560       151.611    
  33  0.505250     -0.682701      -1.03336       1.03336       149.281       150.314    
  34  0.416175     -0.876649      -1.32693       1.32693       149.307       150.633    
  35  0.450270     -0.797909      -1.20774       1.20774       151.361       152.569    
  36  0.521734     -0.650597     -0.984767      0.984767       150.503       151.487    
  37  0.135069      -2.00197      -3.03025       3.03025       152.390       155.421    
  38  0.186856      -1.67742      -2.53900       2.53900       152.100       154.639    
  39  0.965761     -0.348385E-01 -0.527328E-01  0.527328E-01   152.325       152.378    
  40  0.419580     -0.868501      -1.31460       1.31460       151.041       152.356    
  41  0.558190     -0.583056     -0.882534      0.882534       152.720       153.603    
  42  0.862407     -0.148028     -0.224060      0.224060       152.374       152.598    
  43  0.507376E-01  -2.98109      -4.51228       4.51228       152.040       156.552    
  44  0.568000     -0.565633     -0.856163      0.856163       149.818       150.675    
  45  0.750571     -0.286921     -0.434294      0.434294       152.254       152.689    
  46  0.873151     -0.135646     -0.205319      0.205319       149.932       150.137    
  47  0.204078      -1.58925      -2.40555       2.40555       151.846       154.251    
  48  0.610815     -0.492961     -0.746164      0.746164       152.198       152.944    
  49  0.666006E-01  -2.70904      -4.10050       4.10050       151.692       155.793    
  50  0.785181E-02  -4.84701      -7.33661       7.33661       153.034       160.370    
  51  0.922541     -0.806234E-01 -0.122035      0.122035       152.866       152.988    
  52  0.576084     -0.551502     -0.834773      0.834773       152.119       152.954    
  53  0.589402     -0.528646     -0.800178      0.800178       151.607       152.408    
  54  0.319085      -1.14230      -1.72902       1.72902       152.501       154.230    
  55  0.120284E-01  -4.42048      -6.69101       6.69101       153.419       160.110    
  56  0.801824     -0.220866     -0.334311      0.334311       153.530       153.864    
  57  0.498185     -0.696784      -1.05468       1.05468       152.441       153.496    
  58  0.190475      -1.65823      -2.50996       2.50996       153.572       156.082    
  59  0.496939     -0.699288      -1.05847       1.05847       153.690       154.749    
  60  0.526028     -0.642401     -0.972362      0.972362       154.206       155.179    
  61  0.176401      -1.73500      -2.62615       2.62615       152.477       155.103    
  62  0.364403      -1.00950      -1.52801       1.52801       153.757       155.285    
  63  0.577716     -0.548673     -0.830492      0.830492       153.535       154.365    
  64  0.906454     -0.982155E-01 -0.148663      0.148663       150.349       150.498    
  65  0.127931      -2.05627      -3.11244       3.11244       153.432       156.545    
  66  0.668059E-01  -2.70596      -4.09585       4.09585       151.389       155.485    
  67  0.891567     -0.114775     -0.173727      0.173727       154.189       154.363    
  68  0.519165     -0.655533     -0.992239      0.992239       153.169       154.161    
  69  0.675016     -0.393019     -0.594888      0.594888       153.409       154.004    
  70  0.266188      -1.32355      -2.00338       2.00338       151.177       153.180    
  71  0.521054     -0.651902     -0.986743      0.986743       152.717       153.704    
  72  0.799198     -0.224146     -0.339276      0.339276       155.803       156.143    
  73  0.989444     -0.106126E-01 -0.160636E-01  0.160636E-01   155.270       155.286    
  74  0.165300      -1.79999      -2.72454       2.72454       152.640       155.365    
  75  0.853430     -0.158491     -0.239898      0.239898       154.510       154.750    
loop,thermsimp(1:2)       64   4.95380      0.390994    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    502        151.13          0.87          1.12         25.16          0.25          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       64
neval is:      501
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       65
neval is:      501


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      501     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483176     -0.727373      -1.10098       1.10098       148.113       149.214    
   2  0.880011     -0.127821     -0.193475      0.193475       148.549       148.742    
   3  0.163672      -1.80989      -2.73952       2.73952       148.625       151.365    
   4  0.548194     -0.601126     -0.909886      0.909886       148.964       149.874    
   5  0.774171     -0.255963     -0.387435      0.387435       148.507       148.895    
   6  0.815808     -0.203577     -0.308141      0.308141       148.637       148.945    
   7  0.901270     -0.103951     -0.157343      0.157343       149.129       149.287    
   8  0.604998     -0.502529     -0.760647      0.760647       149.969       150.729    
   9  0.583320     -0.539020     -0.815880      0.815880       148.623       149.439    
  10  0.776155     -0.253403     -0.383560      0.383560       149.126       149.509    
  11  0.414399     -0.880925      -1.33340       1.33340       148.996       150.329    
  12  0.321893      -1.13354      -1.71576       1.71576       149.932       151.647    
  13  0.882206     -0.125330     -0.189704      0.189704       149.281       149.470    
  14  0.176926      -1.73202      -2.62165       2.62165       149.272       151.894    
  15  0.143482      -1.94155      -2.93880       2.93880       150.349       153.288    
  16  0.669321     -0.401491     -0.607711      0.607711       149.772       150.380    
  17  0.862244     -0.148216     -0.224346      0.224346       149.307       149.531    
  18  0.897950     -0.107641     -0.162929      0.162929       149.818       149.981    
  19  0.788148     -0.238070     -0.360351      0.360351       149.580       149.941    
  20  0.801563     -0.221191     -0.334803      0.334803       150.039       150.374    
  21  0.284401      -1.25737      -1.90320       1.90320       150.154       152.057    
  22  0.782583     -0.245155     -0.371076      0.371076       150.072       150.443    
  23  0.813976     -0.205825     -0.311544      0.311544       150.497       150.809    
  24  0.528421     -0.637861     -0.965490      0.965490       150.890       151.855    
  25  0.871065     -0.138038     -0.208940      0.208940       150.536       150.745    
  26  0.139992      -1.96617      -2.97606       2.97606       150.503       153.479    
  27  0.549296     -0.599118     -0.906848      0.906848       151.560       152.467    
  28  0.990967     -0.907357E-02 -0.137341E-01  0.137341E-01   151.041       151.055    
  29  0.735762     -0.306848     -0.464457      0.464457       152.325       152.790    
  30  0.647880     -0.434050     -0.656994      0.656994       151.607       152.264    
  31  0.324740      -1.12473      -1.70243       1.70243       150.744       152.447    
  32  0.995457E-01  -2.30714      -3.49217       3.49217       150.797       154.289    
  33  0.953388     -0.477336E-01 -0.722514E-01  0.722514E-01   151.361       151.433    
  34  0.573564     -0.555886     -0.841410      0.841410       150.157       150.999    
  35  0.988045     -0.120272E-01 -0.182049E-01  0.182049E-01   152.374       152.392    
  36  0.499857     -0.693433      -1.04961       1.04961       152.254       153.304    
  37  0.687815E-01  -2.67682      -4.05173       4.05173       150.944       154.996    
  38  0.430407     -0.843024      -1.27603       1.27603       152.198       153.474    
  39  0.204975      -1.58487      -2.39892       2.39892       152.119       154.518    
  40  0.318612      -1.14378      -1.73127       1.73127       152.866       154.597    
  41  0.339792      -1.07942      -1.63385       1.63385       151.313       152.947    
  42  0.609830     -0.494575     -0.748607      0.748607       151.177       151.926    
  43  0.518092     -0.657603     -0.995371      0.995371       148.380       149.375    
  44  0.595099     -0.519028     -0.785619      0.785619       152.441       153.227    
  45  0.658024     -0.418513     -0.633477      0.633477       152.720       153.354    
  46  0.324672      -1.12494      -1.70275       1.70275       152.717       154.420    
  47  0.503769     -0.685637      -1.03781       1.03781       153.530       154.568    
  48  0.690978     -0.369647     -0.559511      0.559511       153.409       153.969    
  49  0.961279     -0.394903E-01 -0.597740E-01  0.597740E-01   150.469       150.528    
  50  0.610537     -0.493416     -0.746853      0.746853       153.169       153.916    
  51  0.458399     -0.780016      -1.18066       1.18066       152.501       153.682    
  52  0.779071     -0.249653     -0.377883      0.377883       151.846       152.224    
  53  0.684652     -0.378844     -0.573433      0.573433       154.189       154.763    
  54  0.997795     -0.220750E-02 -0.334136E-02  0.334136E-02   153.535       153.538    
  55  0.206338      -1.57824      -2.38888       2.38888       152.100       154.489    
  56  0.305969      -1.18427      -1.79256       1.79256       153.690       155.483    
  57  0.270494      -1.30751      -1.97909       1.97909       154.510       156.490    
  58  0.755875     -0.279879     -0.423635      0.423635       152.477       152.901    
  59  0.607325E-01  -2.80128      -4.24012       4.24012       154.206       158.447    
  60  0.238912      -1.43166      -2.16701       2.16701       153.757       155.924    
  61  0.918909     -0.845681E-01 -0.128005      0.128005       155.270       155.398    
  62  0.684642     -0.378859     -0.573455      0.573455       149.661       150.234    
  63  0.954344     -0.467314E-01 -0.707344E-01  0.707344E-01   152.640       152.711    
  64  0.542589E-02  -5.21657      -7.89600       7.89600       152.390       160.286    
  65  0.984909     -0.152056E-01 -0.230157E-01  0.230157E-01   151.389       151.412    
  66  0.228135E-01  -3.78040      -5.72216       5.72216       149.608       155.330    
  67  0.566549     -0.568191     -0.860035      0.860035       151.287       152.147    
  68  0.737034     -0.305122     -0.461844      0.461844       151.692       152.154    
  69  0.820535     -0.197799     -0.299396      0.299396       153.572       153.872    
  70  0.999002     -0.998879E-03 -0.151194E-02  0.151194E-02   155.803       155.805    
  71  0.882535     -0.124957     -0.189140      0.189140       148.541       148.730    
  72  0.876824     -0.131449     -0.198967      0.198967       153.432       153.631    
  73  0.777795     -0.251292     -0.380365      0.380365       152.040       152.420    
  74  0.442542     -0.815220      -1.23395       1.23395       153.419       154.653    
  75  0.789657     -0.236157     -0.357456      0.357456       151.126       151.484    
loop,thermsimp(1:2)       65   1.10098      0.193475    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    503        149.76          0.87          1.14         25.18          0.14          0.05         27.38
Just calling func    0   0         27.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    504        156.43          0.86          1.13         25.15          0.20          0.05         27.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       65
neval is:      503
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       66
neval is:      503


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      503     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.606374E-01  -2.80284      -4.24249       4.24249       148.541       152.784    
   2  0.695687     -0.362855     -0.549230      0.549230       148.549       149.098    
   3  0.695570E-01  -2.66561      -4.03476       4.03476       148.507       152.542    
   4  0.320604      -1.13755      -1.72183       1.72183       148.637       150.359    
   5  0.469989     -0.755045      -1.14286       1.14286       148.113       149.255    
   6  0.571075     -0.560235     -0.847992      0.847992       149.129       149.977    
   7  0.881942     -0.125628     -0.190156      0.190156       148.380       148.570    
   8  0.195259      -1.63343      -2.47242       2.47242       148.623       151.096    
   9  0.825869     -0.191319     -0.289588      0.289588       149.281       149.570    
  10  0.213481E-02  -6.14938      -9.30792       9.30792       149.126       158.433    
  11  0.625641     -0.468979     -0.709863      0.709863       149.307       150.016    
  12  0.148805      -1.90512      -2.88366       2.88366       148.964       151.848    
  13  0.194947      -1.63503      -2.47484       2.47484       149.580       152.055    
  14  0.174958      -1.74321      -2.63859       2.63859       149.818       152.457    
  15  0.553792     -0.590967     -0.894509      0.894509       149.661       150.555    
  16  0.342970      -1.07011      -1.61976       1.61976       148.996       150.616    
  17  0.426079E-01  -3.15572      -4.77661       4.77661       150.039       154.816    
  18  0.604850E-01  -2.80536      -4.24630       4.24630       149.772       154.019    
  19  0.206356      -1.57815      -2.38875       2.38875       150.072       152.460    
  20  0.556358     -0.586343     -0.887510      0.887510       150.469       151.356    
  21  0.449978     -0.798557      -1.20873       1.20873       149.969       151.177    
  22  0.392109     -0.936215      -1.41709       1.41709       150.536       151.953    
  23  0.438064     -0.825391      -1.24934       1.24934       150.497       151.746    
  24  0.534146     -0.627086     -0.949181      0.949181       150.157       151.107    
  25  0.936924     -0.651528E-01 -0.986176E-01  0.986176E-01   151.041       151.140    
  26  0.810957     -0.209540     -0.317167      0.317167       148.625       148.942    
  27  0.874065     -0.134601     -0.203737      0.203737       151.389       151.593    
  28  0.370024     -0.994188      -1.50484       1.50484       151.361       152.866    
  29  0.600923     -0.509288     -0.770878      0.770878       151.126       151.897    
  30  0.138113E-01  -4.28227      -6.48180       6.48180       149.932       156.413    
  31  0.979527E-01  -2.32327      -3.51659       3.51659       150.890       154.406    
  32  0.917800     -0.857754E-01 -0.129833      0.129833       149.272       149.402    
  33  0.882941     -0.124497     -0.188443      0.188443       151.177       151.366    
  34  0.608441E-01  -2.79944      -4.23733       4.23733       150.154       154.391    
  35  0.536097E-01  -2.92603      -4.42894       4.42894       151.287       155.716    
  36  0.786939     -0.239605     -0.362675      0.362675       151.692       152.055    
  37  0.540054     -0.616087     -0.932532      0.932532       151.846       152.778    
  38  0.374443     -0.982316      -1.48687       1.48687       151.607       153.094    
  39  0.842126     -0.171825     -0.260081      0.260081       152.374       152.634    
  40  0.534170     -0.627041     -0.949112      0.949112       152.040       152.989    
  41  0.314687      -1.15618      -1.75003       1.75003       150.744       152.495    
  42  0.265277E-01  -3.62957      -5.49385       5.49385       151.560       157.054    
  43  0.357649      -1.02820      -1.55633       1.55633       152.640       154.197    
  44  0.861388E-01  -2.45180      -3.71113       3.71113       152.325       156.036    
  45  0.566899     -0.567573     -0.859100      0.859100       152.477       153.336    
  46  0.111209      -2.19635      -3.32447       3.32447       151.313       154.637    
  47  0.734273     -0.308875     -0.467524      0.467524       152.441       152.908    
  48  0.709398     -0.343338     -0.519689      0.519689       150.349       150.869    
  49  0.250023      -1.38620      -2.09820       2.09820       152.254       154.353    
  50  0.549980     -0.597874     -0.904964      0.904964       152.720       153.625    
  51  0.639508     -0.447057     -0.676681      0.676681       152.198       152.875    
  52  0.175228E-02  -6.34684      -9.60681       9.60681       150.503       160.109    
  53  0.496773     -0.699622      -1.05897       1.05897       153.535       154.594    
  54  0.157058      -1.85114      -2.80195       2.80195       153.432       156.234    
  55  0.696226     -0.362081     -0.548058      0.548058       152.501       153.049    
  56  0.287746      -1.24568      -1.88550       1.88550       153.572       155.458    
  57  0.325977      -1.12093      -1.69668       1.69668       153.169       154.865    
  58  0.455904     -0.785472      -1.18892       1.18892       153.409       154.598    
  59  0.826755     -0.190247     -0.287966      0.287966       150.797       151.085    
  60  0.764404     -0.268658     -0.406651      0.406651       152.717       153.124    
  61  0.519230     -0.655409     -0.992051      0.992051       152.100       153.092    
  62  0.884859     -0.122327     -0.185158      0.185158       152.119       152.305    
  63  0.428132     -0.848324      -1.28405       1.28405       153.530       154.814    
  64  0.863912     -0.146285     -0.221422      0.221422       152.866       153.087    
  65  0.463895     -0.768097      -1.16262       1.16262       153.419       154.582    
  66  0.325451      -1.12254      -1.69912       1.69912       154.189       155.888    
  67  0.539211     -0.617649     -0.934897      0.934897       150.944       151.879    
  68  0.561125     -0.577812     -0.874598      0.874598       149.608       150.482    
  69  0.289426E-01  -3.54244      -5.36197       5.36197       155.270       160.632    
  70  0.754836     -0.281254     -0.425717      0.425717       153.690       154.116    
  71  0.826720     -0.190289     -0.288029      0.288029       155.803       156.091    
  72  0.175150      -1.74211      -2.63692       2.63692       153.757       156.394    
  73  0.358269      -1.02647      -1.55371       1.55371       154.510       156.064    
  74  0.210920      -1.55628      -2.35564       2.35564       154.206       156.562    
  75  0.150495      -1.89382      -2.86656       2.86656       149.762       152.629    
loop,thermsimp(1:2)       66   4.24249      0.549230    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    505        148.87          0.87          1.15         25.29          0.12          0.06         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    506        162.11          0.84          1.13         25.19          0.14          0.05         27.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       66
neval is:      505
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       67
neval is:      505


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      505     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497686     -0.697786      -1.05620       1.05620       148.380       149.436    
   2  0.830216     -0.186069     -0.281641      0.281641       148.625       148.907    
   3  0.267818      -1.31745      -1.99414       1.99414       148.549       150.543    
   4  0.400053     -0.916159      -1.38673       1.38673       148.113       149.499    
   5  0.411376     -0.888247      -1.34448       1.34448       149.272       150.617    
   6  0.499480     -0.694187      -1.05075       1.05075       149.281       150.331    
   7  0.739436     -0.301868     -0.456919      0.456919       149.129       149.586    
   8  0.115625      -2.15740      -3.26552       3.26552       149.307       152.572    
   9  0.377594     -0.973934      -1.47418       1.47418       148.637       150.111    
  10  0.661021     -0.413970     -0.626600      0.626600       149.608       150.234    
  11  0.765898     -0.266707     -0.403697      0.403697       149.661       150.064    
  12  0.608440     -0.496856     -0.752060      0.752060       148.996       149.748    
  13  0.366717      -1.00316      -1.51843       1.51843       150.349       151.868    
  14  0.853974     -0.157855     -0.238935      0.238935       150.797       151.036    
  15  0.140386      -1.96336      -2.97182       2.97182       148.623       151.595    
  16  0.882944     -0.124493     -0.188437      0.188437       150.157       150.346    
  17  0.760784E-01  -2.57599      -3.89911       3.89911       151.041       154.940    
  18  0.279297      -1.27548      -1.93061       1.93061       149.969       151.899    
  19  0.142650      -1.94736      -2.94760       2.94760       150.469       153.416    
  20  0.814861E-01  -2.50732      -3.79518       3.79518       151.177       154.972    
  21  0.801810     -0.220884     -0.334338      0.334338       151.389       151.724    
  22  0.611082     -0.492524     -0.745503      0.745503       150.497       151.243    
  23  0.599700E-01  -2.81391      -4.25924       4.25924       148.964       153.223    
  24  0.948704     -0.526589E-01 -0.797064E-01  0.797064E-01   150.944       151.024    
  25  0.992398     -0.763115E-02 -0.115508E-01  0.115508E-01   151.126       151.138    
  26  0.880498     -0.127268     -0.192637      0.192637       150.536       150.729    
  27  0.948340E-01  -2.35563      -3.56556       3.56556       151.692       155.258    
  28  0.982098     -0.180639E-01 -0.273422E-01  0.273422E-01   149.580       149.608    
  29  0.217652      -1.52486      -2.30808       2.30808       152.119       154.428    
  30  0.261545      -1.34115      -2.03001       2.03001       149.818       151.848    
  31  0.834479     -0.180948     -0.273890      0.273890       150.072       150.346    
  32  0.162789      -1.81530      -2.74770       2.74770       150.744       153.492    
  33  0.290203      -1.23718      -1.87263       1.87263       148.507       150.380    
  34  0.102916E-01  -4.57642      -6.92704       6.92704       149.762       156.689    
  35  0.834050     -0.181462     -0.274667      0.274667       152.374       152.649    
  36  0.965796     -0.348022E-01 -0.526779E-01  0.526779E-01   151.846       151.899    
  37  0.141898      -1.95265      -2.95560       2.95560       148.541       151.497    
  38  0.548366     -0.600813     -0.909413      0.909413       151.361       152.271    
  39  0.958993     -0.418714E-01 -0.633781E-01  0.633781E-01   152.198       152.261    
  40  0.241914      -1.41918      -2.14812       2.14812       152.441       154.589    
  41  0.696563     -0.361597     -0.547326      0.547326       152.040       152.587    
  42  0.946714     -0.547579E-01 -0.828836E-01  0.828836E-01   152.501       152.584    
  43  0.690193     -0.370783     -0.561231      0.561231       152.866       153.427    
  44  0.303289      -1.19307      -1.80587       1.80587       152.100       153.906    
  45  0.878282     -0.129787     -0.196451      0.196451       151.607       151.804    
  46  0.712048     -0.339610     -0.514045      0.514045       152.717       153.231    
  47  0.967351     -0.331944E-01 -0.502442E-01  0.502442E-01   152.477       152.527    
  48  0.718486     -0.330609     -0.500422      0.500422       152.720       153.221    
  49  0.805024     -0.216883     -0.328283      0.328283       149.772       150.101    
  50  0.441546     -0.817473      -1.23736       1.23736       153.690       154.928    
  51  0.404968     -0.903946      -1.36825       1.36825       152.640       154.008    
  52  0.240159      -1.42645      -2.15913       2.15913       152.254       154.414    
  53  0.520187     -0.653567     -0.989263      0.989263       150.154       151.143    
  54  0.508825     -0.675651      -1.02269       1.02269       150.890       151.912    
  55  0.408928     -0.894217      -1.35352       1.35352       153.419       154.773    
  56  0.231472      -1.46330      -2.21490       2.21490       153.535       155.750    
  57  0.708505     -0.344598     -0.521597      0.521597       153.409       153.931    
  58  0.620619     -0.477037     -0.722061      0.722061       151.313       152.035    
  59  0.221480      -1.50743      -2.28169       2.28169       153.530       155.812    
  60  0.183538      -1.69533      -2.56612       2.56612       150.039       152.606    
  61  0.576257     -0.551202     -0.834319      0.834319       153.169       154.003    
  62  0.908762     -0.956720E-01 -0.144813      0.144813       153.572       153.717    
  63  0.764794     -0.268149     -0.405880      0.405880       151.287       151.693    
  64  0.642626     -0.442192     -0.669318      0.669318       154.189       154.859    
  65  0.527733     -0.639166     -0.967465      0.967465       152.325       153.293    
  66  0.897425     -0.108226     -0.163814      0.163814       154.510       154.674    
  67  0.610387     -0.493661     -0.747224      0.747224       155.803       156.551    
  68  0.869092E-01  -2.44289      -3.69765       3.69765       153.432       157.130    
  69  0.675294     -0.392607     -0.594265      0.594265       153.757       154.352    
  70  0.276944      -1.28394      -1.94342       1.94342       149.932       151.875    
  71  0.150161      -1.89605      -2.86993       2.86993       154.206       157.076    
  72  0.722865     -0.324533     -0.491225      0.491225       151.560       152.051    
  73  0.915228E-01  -2.39117      -3.61936       3.61936       149.126       152.745    
  74  0.730327     -0.314264     -0.475681      0.475681       150.503       150.978    
  75  0.212523      -1.54871      -2.34418       2.34418       148.868       151.212    
loop,thermsimp(1:2)       67   1.05620      0.281641    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    507        151.08          0.87          1.15         25.22          0.11          0.05         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    508        163.27          0.86          1.16         25.24          0.11          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       67
neval is:      507
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       68
neval is:      507


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      507     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.260355      -1.34571      -2.03692       2.03692       148.625       150.662    
   2  0.567351     -0.566778     -0.857896      0.857896       148.380       149.237    
   3  0.212111      -1.55064      -2.34711       2.34711       148.113       150.460    
   4  0.384323     -0.956272      -1.44745       1.44745       149.129       150.577    
   5  0.379704     -0.968364      -1.46575       1.46575       149.580       151.046    
   6  0.221298      -1.50824      -2.28293       2.28293       148.996       151.279    
   7  0.729922     -0.314818     -0.476519      0.476519       149.661       150.137    
   8  0.646542     -0.436117     -0.660122      0.660122       149.772       150.432    
   9  0.839436     -0.175025     -0.264924      0.264924       148.637       148.902    
  10  0.808281     -0.212846     -0.322171      0.322171       149.608       149.930    
  11  0.724296     -0.322555     -0.488231      0.488231       149.281       149.769    
  12  0.161395      -1.82390      -2.76072       2.76072       150.072       152.832    
  13  0.691210     -0.369312     -0.559004      0.559004       150.157       150.716    
  14  0.664974     -0.408007     -0.617574      0.617574       148.507       149.125    
  15  0.835640     -0.179558     -0.271785      0.271785       148.549       148.821    
  16  0.345121      -1.06386      -1.61030       1.61030       149.272       150.883    
  17  0.910776     -0.934579E-01 -0.141461      0.141461       150.536       150.678    
  18  0.482102     -0.729599      -1.10435       1.10435       150.503       151.607    
  19  0.828243     -0.188449     -0.285243      0.285243       150.944       151.229    
  20  0.805680     -0.216069     -0.327049      0.327049       150.797       151.124    
  21  0.694570     -0.364462     -0.551664      0.551664       151.126       151.678    
  22  0.304846      -1.18795      -1.79812       1.79812       150.154       151.952    
  23  0.212327      -1.54963      -2.34558       2.34558       148.868       151.214    
  24  0.670398     -0.399883     -0.605278      0.605278       150.497       151.102    
  25  0.466041     -0.763481      -1.15563       1.15563       148.541       149.697    
  26  0.500338E-01  -2.99506      -4.53343       4.53343       148.623       153.157    
  27  0.367939     -0.999839      -1.51339       1.51339       151.287       152.800    
  28  0.973691     -0.266612E-01 -0.403553E-01  0.403553E-01   151.389       151.430    
  29  0.688056     -0.373885     -0.565926      0.565926       151.607       152.173    
  30  0.219376      -1.51697      -2.29614       2.29614       149.818       152.115    
  31  0.135232      -2.00076      -3.02843       3.02843       150.349       153.378    
  32  0.796052     -0.228090     -0.345246      0.345246       149.932       150.277    
  33  0.596618E-01  -2.81906      -4.26704       4.26704       151.846       156.113    
  34  0.352128      -1.04376      -1.57987       1.57987       149.969       151.548    
  35  0.903448     -0.101537     -0.153690      0.153690       150.890       151.043    
  36  0.782446E-01  -2.54792      -3.85662       3.85662       151.313       155.169    
  37  0.992989     -0.703619E-02 -0.106502E-01  0.106502E-01   151.560       151.571    
  38  0.509863     -0.673613      -1.01961       1.01961       152.198       153.218    
  39  0.285505E-01  -3.55608      -5.38261       5.38261       151.361       156.744    
  40  0.117310      -2.14294      -3.24363       3.24363       152.477       155.721    
  41  0.608089     -0.497434     -0.752934      0.752934       149.307       150.059    
  42  0.516045     -0.661561      -1.00136       1.00136       152.501       153.502    
  43  0.505745     -0.681722      -1.03188       1.03188       152.040       153.072    
  44  0.273977      -1.29471      -1.95972       1.95972       150.039       151.999    
  45  0.776372     -0.253123     -0.383136      0.383136       152.374       152.757    
  46  0.813260     -0.206705     -0.312876      0.312876       149.126       149.438    
  47  0.823722     -0.193922     -0.293528      0.293528       152.720       153.014    
  48  0.690618     -0.370169     -0.560301      0.560301       148.964       149.524    
  49  0.906576     -0.980805E-01 -0.148458      0.148458       152.717       152.866    
  50  0.677790     -0.388918     -0.588681      0.588681       152.325       152.914    
  51  0.179693      -1.71651      -2.59817       2.59817       150.469       153.067    
  52  0.660035     -0.415463     -0.628860      0.628860       152.866       153.495    
  53  0.565851     -0.569425     -0.861902      0.861902       150.744       151.606    
  54  0.973172     -0.271940E-01 -0.411618E-01  0.411618E-01   153.572       153.613    
  55  0.243227      -1.41376      -2.13992       2.13992       152.100       154.240    
  56  0.106189      -2.24253      -3.39438       3.39438       153.409       156.804    
  57  0.360424      -1.02047      -1.54463       1.54463       153.169       154.713    
  58  0.779729     -0.248808     -0.376605      0.376605       152.640       153.017    
  59  0.306299      -1.18319      -1.79092       1.79092       153.757       155.548    
  60  0.209367      -1.56367      -2.36683       2.36683       152.254       154.621    
  61  0.498848     -0.695454      -1.05266       1.05266       152.119       153.172    
  62  0.391394     -0.938040      -1.41985       1.41985       152.441       153.861    
  63  0.435785     -0.830607      -1.25724       1.25724       154.510       155.768    
  64  0.312077      -1.16451      -1.76264       1.76264       153.419       155.182    
  65  0.833372     -0.182275     -0.275898      0.275898       154.189       154.465    
  66  0.272756      -1.29918      -1.96648       1.96648       153.690       155.657    
  67  0.529616     -0.635602     -0.962071      0.962071       151.041       152.003    
  68  0.556568     -0.585966     -0.886940      0.886940       151.177       152.064    
  69  0.373852     -0.983896      -1.48926       1.48926       151.692       153.181    
  70  0.899059E-01  -2.40899      -3.64634       3.64634       153.535       157.181    
  71  0.695034     -0.363794     -0.550652      0.550652       153.530       154.081    
  72  0.379246     -0.969571      -1.46758       1.46758       155.803       157.271    
  73  0.489176     -0.715033      -1.08230       1.08230       149.762       150.845    
  74  0.963345     -0.373440E-01 -0.565252E-01  0.565252E-01   154.206       154.263    
  75  0.738725     -0.302829     -0.458373      0.458373       151.078       151.537    
loop,thermsimp(1:2)       68   2.03692      0.857896    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    509        148.75          0.87          1.15         25.24          0.16          0.05         27.46
Just calling func    0   0         27.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    510        154.92          0.86          1.14         25.18          0.13          0.05         27.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       68
neval is:      509
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       69
neval is:      509


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      509     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.427727     -0.849271      -1.28549       1.28549       148.549       149.834    
   2  0.300580      -1.20204      -1.81945       1.81945       148.637       150.456    
   3  0.440777     -0.819215      -1.23999       1.23999       148.507       149.747    
   4  0.119397      -2.12530      -3.21693       3.21693       148.380       151.596    
   5  0.324114      -1.12666      -1.70535       1.70535       149.126       150.831    
   6  0.708589E-01  -2.64706      -4.00669       4.00669       148.964       152.971    
   7  0.234973      -1.44829      -2.19218       2.19218       148.541       150.733    
   8  0.630612     -0.461064     -0.697883      0.697883       149.281       149.979    
   9  0.637778     -0.449765     -0.680780      0.680780       149.608       150.289    
  10  0.952774     -0.483777E-01 -0.732263E-01  0.732263E-01   149.307       149.380    
  11  0.156845      -1.85249      -2.80400       2.80400       149.661       152.465    
  12  0.386146     -0.951540      -1.44029       1.44029       149.932       151.372    
  13  0.233038      -1.45655      -2.20469       2.20469       149.772       151.977    
  14  0.748513     -0.289667     -0.438451      0.438451       148.113       148.551    
  15  0.829626     -0.186780     -0.282717      0.282717       149.129       149.412    
  16  0.108384      -2.22208      -3.36342       3.36342       148.625       151.989    
  17  0.632628     -0.457873     -0.693053      0.693053       150.536       151.229    
  18  0.989524     -0.105314E-01 -0.159407E-01  0.159407E-01   150.157       150.173    
  19  0.151245      -1.88886      -2.85904       2.85904       149.762       152.621    
  20  0.898996E-01  -2.40906      -3.64644       3.64644       149.272       152.919    
  21  0.858841     -0.152172     -0.230332      0.230332       150.890       151.120    
  22  0.849417     -0.163205     -0.247032      0.247032       149.580       149.827    
  23  0.446510     -0.806293      -1.22043       1.22043       150.497       151.718    
  24  0.989123     -0.109366E-01 -0.165540E-01  0.165540E-01   150.797       150.814    
  25  0.898953E-01  -2.40911      -3.64652       3.64652       148.868       152.514    
  26  0.433704     -0.835393      -1.26448       1.26448       150.944       152.209    
  27  0.410713     -0.889861      -1.34693       1.34693       148.996       150.343    
  28  0.310044      -1.17104      -1.77253       1.77253       151.389       153.162    
  29  0.888110     -0.118660     -0.179608      0.179608       151.078       151.258    
  30  0.661223     -0.413664     -0.626137      0.626137       149.969       150.595    
  31  0.519718     -0.654468     -0.990627      0.990627       151.560       152.551    
  32  0.818791     -0.199927     -0.302617      0.302617       150.744       151.047    
  33  0.981929     -0.182366E-01 -0.276035E-01  0.276035E-01   150.503       150.530    
  34  0.308824E-01  -3.47757      -5.26378       5.26378       151.126       156.390    
  35  0.995192E-01  -2.30740      -3.49257       3.49257       150.154       153.646    
  36  0.292141      -1.23052      -1.86256       1.86256       150.039       151.902    
  37  0.546956     -0.603387     -0.913309      0.913309       151.041       151.955    
  38  0.875324     -0.133161     -0.201557      0.201557       151.177       151.379    
  39  0.497859     -0.697439      -1.05567       1.05567       149.818       150.874    
  40  0.808711     -0.212313     -0.321365      0.321365       151.607       151.929    
  41  0.916666     -0.870126E-01 -0.131705      0.131705       152.374       152.506    
  42  0.574110     -0.554933     -0.839968      0.839968       151.287       152.127    
  43  0.908171     -0.963226E-01 -0.145797      0.145797       150.072       150.218    
  44  0.243373      -1.41316      -2.13901       2.13901       152.717       154.856    
  45  0.647413     -0.434771     -0.658086      0.658086       152.325       152.983    
  46  0.309907      -1.17148      -1.77320       1.77320       152.720       154.494    
  47  0.167934      -1.78419      -2.70061       2.70061       152.640       155.341    
  48  0.676784     -0.390402     -0.590928      0.590928       150.469       151.059    
  49  0.769515     -0.261995     -0.396565      0.396565       152.040       152.437    
  50  0.822671     -0.195199     -0.295460      0.295460       148.623       148.919    
  51  0.299010E-01  -3.50986      -5.31266       5.31266       152.119       157.432    
  52  0.803018     -0.219378     -0.332058      0.332058       151.692       152.024    
  53  0.487353E-01  -3.02135      -4.57323       4.57323       152.198       156.771    
  54  0.334246      -1.09588      -1.65876       1.65876       150.349       152.008    
  55  0.263436      -1.33394      -2.01911       2.01911       152.866       154.885    
  56  0.475227     -0.743963      -1.12609       1.12609       152.501       153.627    
  57  0.962498     -0.382236E-01 -0.578567E-01  0.578567E-01   153.572       153.630    
  58  0.517461     -0.658822     -0.997216      0.997216       152.441       153.438    
  59  0.869842     -0.139443     -0.211066      0.211066       153.530       153.741    
  60  0.260881      -1.34369      -2.03386       2.03386       152.100       154.134    
  61  0.784961     -0.242121     -0.366483      0.366483       154.206       154.573    
  62  0.128612      -2.05096      -3.10440       3.10440       154.189       157.294    
  63  0.505442     -0.682322      -1.03279       1.03279       152.254       153.287    
  64  0.195040      -1.63455      -2.47411       2.47411       153.169       155.643    
  65  0.490842     -0.711633      -1.07715       1.07715       151.313       152.390    
  66  0.487658     -0.718141      -1.08700       1.08700       153.419       154.506    
  67  0.453852     -0.789984      -1.19575       1.19575       153.757       154.953    
  68  0.802534     -0.219982     -0.332972      0.332972       153.690       154.023    
  69  0.804022     -0.218128     -0.330167      0.330167       152.477       152.807    
  70  0.826405     -0.190670     -0.288605      0.288605       154.510       154.799    
  71  0.760351     -0.273975     -0.414698      0.414698       151.846       152.261    
  72  0.892488     -0.113742     -0.172165      0.172165       151.361       151.533    
  73  0.182183      -1.70274      -2.57734       2.57734       153.409       155.987    
  74  0.711467     -0.340426     -0.515281      0.515281       153.535       154.050    
  75  0.757296     -0.278001     -0.420793      0.420793       148.749       149.170    
loop,thermsimp(1:2)       69   1.28549       1.81945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    511        148.23          0.87          1.15         25.30          0.45          0.05         27.82
Just calling func    0   0         27.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    512        152.31          0.85          1.16         25.29          0.20          0.05         27.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       69
neval is:      511
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       70
neval is:      511


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      511     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652194     -0.427413     -0.646947      0.646947       148.113       148.760    
   2  0.835191     -0.180095     -0.272599      0.272599       148.623       148.896    
   3  0.914573     -0.892985E-01 -0.135165      0.135165       148.749       148.884    
   4  0.936996     -0.650763E-01 -0.985019E-01  0.985019E-01   149.307       149.405    
   5  0.343704E-01  -3.37056      -5.10180       5.10180       149.129       154.231    
   6  0.993168     -0.685505E-02 -0.103761E-01  0.103761E-01   148.507       148.518    
   7  0.124012      -2.08737      -3.15953       3.15953       149.580       152.740    
   8  0.283107E-01  -3.56451      -5.39538       5.39538       148.549       153.944    
   9  0.626631     -0.467398     -0.707470      0.707470       149.281       149.988    
  10  0.349067      -1.05249      -1.59309       1.59309       150.157       151.750    
  11  0.467982E-01  -3.06191      -4.63462       4.63462       150.072       154.706    
  12  0.682524E-01  -2.68454      -4.06342       4.06342       149.608       153.671    
  13  0.320603      -1.13755      -1.72184       1.72184       148.996       150.718    
  14  0.485411     -0.722759      -1.09399       1.09399       148.637       149.731    
  15  0.174639      -1.74503      -2.64135       2.64135       150.503       153.144    
  16  0.688366     -0.373434     -0.565243      0.565243       149.969       150.534    
  17  0.403792     -0.906856      -1.37265       1.37265       148.541       149.914    
  18  0.237008      -1.43966      -2.17912       2.17912       150.797       152.976    
  19  0.491286     -0.710728      -1.07578       1.07578       149.126       150.201    
  20  0.187095      -1.67614      -2.53706       2.53706       149.818       152.355    
  21  0.365844      -1.00555      -1.52203       1.52203       150.744       152.267    
  22  0.899359     -0.106073     -0.160556      0.160556       150.469       150.629    
  23  0.806501     -0.215051     -0.325509      0.325509       150.890       151.215    
  24  0.538739     -0.618525     -0.936222      0.936222       150.536       151.472    
  25  0.184808      -1.68844      -2.55568       2.55568       151.078       153.634    
  26  0.760157     -0.274230     -0.415085      0.415085       149.932       150.347    
  27  0.920762     -0.825532E-01 -0.124956      0.124956       151.177       151.302    
  28  0.142687      -1.94710      -2.94721       2.94721       151.361       154.308    
  29  0.992793     -0.723301E-02 -0.109482E-01  0.109482E-01   148.380       148.391    
  30  0.898687     -0.106820     -0.161687      0.161687       150.497       150.659    
  31  0.263660      -1.33309      -2.01782       2.01782       150.039       152.057    
  32  0.971768     -0.286379E-01 -0.433474E-01  0.433474E-01   151.607       151.651    
  33  0.387765     -0.947357      -1.43395       1.43395       151.041       152.475    
  34  0.574064     -0.555014     -0.840089      0.840089       149.772       150.612    
  35  0.370709     -0.992338      -1.50204       1.50204       148.625       150.127    
  36  0.483362E-01  -3.02957      -4.58567       4.58567       150.349       154.935    
  37  0.583245     -0.539148     -0.816075      0.816075       151.692       152.508    
  38  0.293950E-01  -3.52693      -5.33849       5.33849       151.287       156.625    
  39  0.961670     -0.390837E-01 -0.591585E-01  0.591585E-01   150.944       151.003    
  40  0.252096      -1.37794      -2.08571       2.08571       151.846       153.932    
  41  0.260270      -1.34604      -2.03741       2.03741       151.313       153.350    
  42  0.449392     -0.799860      -1.21070       1.21070       152.040       153.251    
  43  0.845367     -0.167985     -0.254268      0.254268       149.661       149.915    
  44  0.365557      -1.00633      -1.52322       1.52322       152.374       153.897    
  45  0.374516     -0.982121      -1.48657       1.48657       148.868       150.355    
  46  0.704289     -0.350566     -0.530630      0.530630       151.560       152.091    
  47  0.784654     -0.242512     -0.367075      0.367075       149.762       150.129    
  48  0.566446     -0.568374     -0.860312      0.860312       152.477       153.337    
  49  0.932234     -0.701720E-01 -0.106215      0.106215       149.272       149.379    
  50  0.361623      -1.01715      -1.53960       1.53960       148.964       150.504    
  51  0.289968      -1.23799      -1.87386       1.87386       152.325       154.199    
  52  0.173332      -1.75255      -2.65272       2.65272       151.389       154.042    
  53  0.639885     -0.446466     -0.675788      0.675788       152.254       152.930    
  54  0.960811     -0.399777E-01 -0.605117E-01  0.605117E-01   152.441       152.501    
  55  0.454979     -0.787504      -1.19200       1.19200       152.501       153.693    
  56  0.464001     -0.767868      -1.16227       1.16227       153.572       154.735    
  57  0.910483     -0.937798E-01 -0.141949      0.141949       150.154       150.296    
  58  0.485489     -0.722599      -1.09375       1.09375       153.530       154.624    
  59  0.429778     -0.844485      -1.27824       1.27824       153.690       154.969    
  60  0.119439      -2.12495      -3.21640       3.21640       153.535       156.751    
  61  0.338197      -1.08413      -1.64098       1.64098       152.100       153.741    
  62  0.953953     -0.471406E-01 -0.713537E-01  0.713537E-01   152.720       152.792    
  63  0.844907     -0.168528     -0.255091      0.255091       153.419       153.674    
  64  0.909430E-02  -4.70011      -7.11425       7.11425       154.206       161.321    
  65  0.476196     -0.741925      -1.12300       1.12300       154.510       155.633    
  66  0.562575     -0.575231     -0.870690      0.870690       152.717       153.588    
  67  0.351116      -1.04664      -1.58423       1.58423       152.866       154.450    
  68  0.611024E-01  -2.79520      -4.23092       4.23092       153.757       157.988    
  69  0.507102     -0.679043      -1.02782       1.02782       152.640       153.668    
  70  0.663586     -0.410096     -0.620736      0.620736       153.169       153.789    
  71  0.865347     -0.144625     -0.218910      0.218910       153.409       153.628    
  72  0.652519E-01  -2.72950      -4.13147       4.13147       151.126       155.258    
  73  0.632653     -0.457833     -0.692993      0.692993       152.198       152.891    
  74  0.139943      -1.96652      -2.97660       2.97660       154.189       157.166    
  75  0.474742     -0.744983      -1.12763       1.12763       148.234       149.362    
loop,thermsimp(1:2)       70  0.646947      0.272599    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    513        154.73          0.86          1.15         25.26          0.10          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       70
neval is:      512
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       71
neval is:      512


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      512     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993388     -0.663381E-02 -0.100412E-01  0.100412E-01   148.380       148.390    
   2  0.170387      -1.76968      -2.67866       2.67866       148.507       151.186    
   3  0.430235     -0.843424      -1.27664       1.27664       148.113       149.389    
   4  0.932962     -0.693906E-01 -0.105032      0.105032       148.749       148.854    
   5  0.723435     -0.323745     -0.490032      0.490032       148.623       149.113    
   6  0.251650E-01  -3.68230      -5.57367       5.57367       148.234       153.808    
   7  0.763909     -0.269307     -0.407633      0.407633       149.272       149.680    
   8  0.754456     -0.281759     -0.426480      0.426480       149.307       149.733    
   9  0.999559     -0.441576E-03 -0.668386E-03  0.668386E-03   148.637       148.638    
  10  0.643558     -0.440744     -0.667126      0.667126       148.541       149.208    
  11  0.629665E-01  -2.76515      -4.18544       4.18544       149.661       153.846    
  12  0.649053     -0.432241     -0.654255      0.654255       149.281       149.935    
  13  0.399773E-01  -3.21944      -4.87307       4.87307       148.625       153.498    
  14  0.849328     -0.163310     -0.247192      0.247192       149.762       150.010    
  15  0.391842E-01  -3.23948      -4.90340       4.90340       149.126       154.029    
  16  0.105710      -2.24706      -3.40123       3.40123       150.154       153.555    
  17  0.660078     -0.415397     -0.628760      0.628760       149.932       150.560    
  18  0.353251      -1.04058      -1.57505       1.57505       148.868       150.443    
  19  0.454778     -0.787946      -1.19266       1.19266       148.964       150.157    
  20  0.572414     -0.557893     -0.844447      0.844447       149.969       150.813    
  21  0.202701      -1.59602      -2.41580       2.41580       149.772       152.188    
  22  0.880730     -0.127005     -0.192239      0.192239       150.469       150.661    
  23  0.390523     -0.940268      -1.42322       1.42322       150.497       151.920    
  24  0.174911      -1.74348      -2.63899       2.63899       148.996       151.635    
  25  0.903407     -0.101582     -0.153758      0.153758       150.944       151.098    
  26  0.776206     -0.253337     -0.383460      0.383460       150.890       151.273    
  27  0.285894      -1.25213      -1.89528       1.89528       151.177       153.072    
  28  0.285213      -1.25452      -1.89888       1.89888       150.536       152.435    
  29  0.412143     -0.886385      -1.34166       1.34166       151.607       152.949    
  30  0.464292     -0.767242      -1.16133       1.16133       150.157       151.319    
  31  0.453886     -0.789909      -1.19563       1.19563       150.039       151.235    
  32  0.870789     -0.138356     -0.209421      0.209421       151.560       151.769    
  33  0.338222      -1.08405      -1.64086       1.64086       150.744       152.385    
  34  0.249181      -1.38958      -2.10331       2.10331       149.818       151.922    
  35  0.524083     -0.646104     -0.977967      0.977967       151.041       152.019    
  36  0.646957     -0.435475     -0.659151      0.659151       152.441       153.100    
  37  0.971194     -0.292293E-01 -0.442425E-01  0.442425E-01   151.692       151.736    
  38  0.775832     -0.253820     -0.384191      0.384191       149.580       149.965    
  39  0.411875     -0.887037      -1.34265       1.34265       152.720       154.063    
  40  0.300823      -1.20123      -1.81823       1.81823       152.198       154.016    
  41  0.535760     -0.624069     -0.944614      0.944614       152.254       153.199    
  42  0.547709     -0.602011     -0.911226      0.911226       150.797       151.708    
  43  0.714758     -0.335812     -0.508297      0.508297       150.503       151.011    
  44  0.610789E-01  -2.79559      -4.23151       4.23151       152.040       156.272    
  45  0.442447     -0.815435      -1.23427       1.23427       152.477       153.711    
  46  0.421127E-01  -3.16741      -4.79430       4.79430       151.313       156.107    
  47  0.218962      -1.51886      -2.29900       2.29900       152.717       155.016    
  48  0.475680     -0.743009      -1.12465       1.12465       153.409       154.534    
  49  0.997535     -0.246821E-02 -0.373597E-02  0.373597E-02   151.078       151.082    
  50  0.367564      -1.00086      -1.51493       1.51493       152.640       154.155    
  51  0.309823E-01  -3.47434      -5.25889       5.25889       149.608       154.867    
  52  0.822588     -0.195300     -0.295613      0.295613       153.419       153.715    
  53  0.443457E-01  -3.11574      -4.71610       4.71610       152.501       157.217    
  54  0.922033     -0.811740E-01 -0.122868      0.122868       152.100       152.223    
  55  0.693266     -0.366342     -0.554509      0.554509       153.169       153.723    
  56  0.234230      -1.45145      -2.19697       2.19697       152.374       154.571    
  57  0.319502      -1.14099      -1.72705       1.72705       151.846       153.573    
  58  0.861372     -0.149229     -0.225878      0.225878       148.549       148.775    
  59  0.314331      -1.15731      -1.75174       1.75174       151.389       153.141    
  60  0.268996      -1.31306      -1.98749       1.98749       152.325       154.313    
  61  0.635481     -0.453373     -0.686242      0.686242       149.129       149.816    
  62  0.602848     -0.506091     -0.766038      0.766038       151.361       152.127    
  63  0.319933      -1.13964      -1.72500       1.72500       152.866       154.591    
  64  0.940236E-01  -2.36421      -3.57855       3.57855       153.530       157.109    
  65  0.505109     -0.682982      -1.03379       1.03379       150.072       151.105    
  66  0.366280      -1.00436      -1.52023       1.52023       153.572       155.093    
  67  0.174849      -1.74383      -2.63953       2.63953       150.349       152.989    
  68  0.903510     -0.101468     -0.153586      0.153586       153.690       153.844    
  69  0.581743E-01  -2.84431      -4.30525       4.30525       151.126       155.431    
  70  0.451632     -0.794888      -1.20317       1.20317       154.510       155.714    
  71  0.314621      -1.15639      -1.75035       1.75035       151.287       153.037    
  72  0.177059E-01  -4.03386      -6.10579       6.10579       153.535       159.640    
  73  0.272969      -1.29840      -1.96530       1.96530       154.189       156.155    
  74  0.547167     -0.603002     -0.912726      0.912726       153.757       154.670    
  75  0.607009     -0.499211     -0.755624      0.755624       154.734       155.490    
loop,thermsimp(1:2)       71  0.100412E-01   2.67866    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    514        151.62          0.86          1.16         25.28          0.27          0.05         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       71
neval is:      513
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       72
neval is:      513


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      513     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244277      -1.40945      -2.13340       2.13340       148.380       150.513    
   2  0.308155      -1.17715      -1.78178       1.78178       148.637       150.419    
   3  0.782683     -0.245028     -0.370883      0.370883       148.549       148.920    
   4  0.760982     -0.273146     -0.413444      0.413444       148.749       149.163    
   5  0.429075     -0.846125      -1.28073       1.28073       148.623       149.904    
   6  0.736261     -0.306171     -0.463431      0.463431       148.541       149.005    
   7  0.460189     -0.776117      -1.17476       1.17476       148.113       149.287    
   8  0.933911     -0.683736E-01 -0.103493      0.103493       149.272       149.376    
   9  0.460375     -0.775713      -1.17415       1.17415       149.307       150.481    
  10  0.939859     -0.620258E-01 -0.938846E-01  0.938846E-01   149.129       149.223    
  11  0.550327     -0.597243     -0.904009      0.904009       149.281       150.185    
  12  0.480638     -0.732640      -1.10895       1.10895       149.580       150.689    
  13  0.252938      -1.37461      -2.08066       2.08066       149.762       151.843    
  14  0.536822     -0.622088     -0.941616      0.941616       148.964       149.906    
  15  0.363695      -1.01144      -1.53095       1.53095       148.868       150.399    
  16  0.279007      -1.27652      -1.93218       1.93218       149.932       151.864    
  17  0.164958      -1.80206      -2.72767       2.72767       150.469       153.196    
  18  0.207862      -1.57088      -2.37775       2.37775       149.969       152.346    
  19  0.926151     -0.767180E-01 -0.116123      0.116123       150.503       150.619    
  20  0.931241     -0.712372E-01 -0.107827      0.107827       151.078       151.186    
  21  0.410184     -0.891148      -1.34887       1.34887       150.944       152.293    
  22  0.180536      -1.71183      -2.59108       2.59108       150.072       152.663    
  23  0.505927     -0.681363      -1.03134       1.03134       148.507       149.539    
  24  0.950800     -0.504520E-01 -0.763660E-01  0.763660E-01   150.039       150.116    
  25  0.530981     -0.633028     -0.958175      0.958175       150.890       151.848    
  26  0.878348     -0.129712     -0.196337      0.196337       150.157       150.354    
  27  0.699104     -0.357956     -0.541815      0.541815       148.996       149.538    
  28  0.795467     -0.228826     -0.346359      0.346359       150.797       151.143    
  29  0.828214     -0.188484     -0.285296      0.285296       151.692       151.977    
  30  0.840484     -0.173777     -0.263035      0.263035       151.560       151.823    
  31  0.916482E-02  -4.69238      -7.10256       7.10256       150.497       157.600    
  32  0.965109     -0.355146E-01 -0.537562E-01  0.537562E-01   149.818       149.872    
  33  0.686270E-01  -2.67907      -4.05514       4.05514       151.041       155.096    
  34  0.777883     -0.251179     -0.380194      0.380194       151.361       151.741    
  35  0.424167     -0.857629      -1.29814       1.29814       149.772       151.070    
  36  0.422618     -0.861287      -1.30368       1.30368       152.100       153.404    
  37  0.202591      -1.59656      -2.41662       2.41662       150.744       153.161    
  38  0.520317     -0.653316     -0.988883      0.988883       150.536       151.525    
  39  0.918512     -0.850003E-01 -0.128660      0.128660       151.607       151.736    
  40  0.516959     -0.659791     -0.998684      0.998684       150.349       151.348    
  41  0.477240     -0.739735      -1.11969       1.11969       151.287       152.407    
  42  0.520540E-01  -2.95547      -4.47351       4.47351       151.177       155.651    
  43  0.304485      -1.18913      -1.79992       1.79992       152.441       154.241    
  44  0.879547     -0.128348     -0.194272      0.194272       151.389       151.584    
  45  0.297327      -1.21292      -1.83592       1.83592       152.254       154.090    
  46  0.320273      -1.13858      -1.72340       1.72340       148.625       150.349    
  47  0.503657E-01  -2.98844      -4.52342       4.52342       150.154       154.677    
  48  0.836881     -0.178074     -0.269539      0.269539       151.846       152.115    
  49  0.550103     -0.597651     -0.904626      0.904626       152.477       153.382    
  50  0.407887E-01  -3.19935      -4.84265       4.84265       153.419       158.262    
  51  0.583045     -0.539491     -0.816593      0.816593       153.169       153.985    
  52  0.696120     -0.362234     -0.548290      0.548290       148.234       148.783    
  53  0.326588      -1.11905      -1.69384       1.69384       153.690       155.384    
  54  0.499766     -0.693615      -1.04988       1.04988       149.661       150.710    
  55  0.858833     -0.152181     -0.230347      0.230347       152.198       152.428    
  56  0.414433     -0.880844      -1.33328       1.33328       149.126       150.459    
  57  0.518336     -0.657132     -0.994660      0.994660       152.720       153.715    
  58  0.948181     -0.532095E-01 -0.805398E-01  0.805398E-01   152.640       152.721    
  59  0.146662E-02  -6.52479      -9.87616       9.87616       152.325       162.201    
  60  0.999623     -0.376691E-03 -0.570174E-03  0.570174E-03   153.409       153.410    
  61  0.559564     -0.580597     -0.878814      0.878814       152.374       153.253    
  62  0.408239     -0.895902      -1.35607       1.35607       152.866       154.222    
  63  0.128262      -2.05368      -3.10852       3.10852       153.757       156.866    
  64  0.501027     -0.691096      -1.04607       1.04607       149.608       150.654    
  65  0.174688      -1.74475      -2.64092       2.64092       152.717       155.358    
  66  0.653032     -0.426130     -0.645005      0.645005       153.572       154.217    
  67  0.649230     -0.431968     -0.653842      0.653842       151.126       151.780    
  68  0.203992      -1.58967      -2.40619       2.40619       154.734       157.140    
  69  0.445553     -0.808440      -1.22368       1.22368       154.510       155.734    
  70  0.438254     -0.824957      -1.24868       1.24868       151.313       152.561    
  71  0.402175     -0.910867      -1.37872       1.37872       154.189       155.568    
  72  0.360849      -1.01930      -1.54284       1.54284       152.040       153.583    
  73  0.837284     -0.177592     -0.268810      0.268810       153.530       153.799    
  74  0.535005     -0.625480     -0.946749      0.946749       152.501       153.448    
  75  0.850242     -0.162234     -0.245563      0.245563       151.619       151.864    
loop,thermsimp(1:2)       72   2.13340       1.78178    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    515        148.55          0.86          1.15         25.26          0.15          0.06         27.48
Just calling func    0   0         27.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    516        155.59          0.86          1.15         25.22          0.12          0.05         27.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       72
neval is:      515
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       73
neval is:      515


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      515     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985694     -0.144094E-01 -0.218107E-01  0.218107E-01   148.234       148.256    
   2  0.404696     -0.904619      -1.36926       1.36926       148.549       149.918    
   3  0.848366     -0.164443     -0.248907      0.248907       148.541       148.790    
   4  0.108805      -2.21820      -3.35755       3.35755       148.749       152.107    
   5  0.428300     -0.847930      -1.28346       1.28346       149.129       150.413    
   6  0.727573     -0.318041     -0.481398      0.481398       148.113       148.594    
   7  0.606234     -0.500489     -0.757559      0.757559       149.272       150.030    
   8  0.938951     -0.629916E-01 -0.953464E-01  0.953464E-01   148.996       149.091    
   9  0.622391     -0.474187     -0.717748      0.717748       148.507       149.225    
  10  0.681292E-01  -2.68635      -4.06616       4.06616       149.818       153.885    
  11  0.802944     -0.219471     -0.332199      0.332199       148.623       148.956    
  12  0.739251     -0.302118     -0.457296      0.457296       148.964       149.421    
  13  0.943417     -0.582465E-01 -0.881641E-01  0.881641E-01   150.039       150.128    
  14  0.865420E-01  -2.44712      -3.70406       3.70406       149.281       152.985    
  15  0.247017      -1.39830      -2.11652       2.11652       148.625       150.742    
  16  0.835884     -0.179266     -0.271344      0.271344       150.157       150.429    
  17  0.632625     -0.457877     -0.693060      0.693060       148.868       149.561    
  18  0.335470      -1.09222      -1.65323       1.65323       148.637       150.290    
  19  0.617355     -0.482312     -0.730045      0.730045       149.126       149.856    
  20  0.966107E-01  -2.33707      -3.53747       3.53747       149.307       152.844    
  21  0.205299      -1.58329      -2.39652       2.39652       148.380       150.776    
  22  0.784372     -0.242871     -0.367619      0.367619       150.503       150.870    
  23  0.507274     -0.678705      -1.02731       1.02731       149.608       150.635    
  24  0.228591      -1.47582      -2.23386       2.23386       149.580       151.814    
  25  0.813037     -0.206978     -0.313290      0.313290       149.661       149.974    
  26  0.660021E-02  -5.02065      -7.59945       7.59945       149.772       157.372    
  27  0.449216     -0.800252      -1.21129       1.21129       150.797       152.008    
  28  0.624836     -0.470267     -0.711813      0.711813       151.078       151.790    
  29  0.124036      -2.08718      -3.15924       3.15924       150.349       153.509    
  30  0.977322     -0.229386E-01 -0.347208E-01  0.347208E-01   150.536       150.571    
  31  0.362007      -1.01609      -1.53800       1.53800       151.389       152.927    
  32  0.433687     -0.835432      -1.26454       1.26454       151.607       152.872    
  33  0.476592     -0.741094      -1.12175       1.12175       151.361       152.483    
  34  0.929976     -0.725968E-01 -0.109885      0.109885       151.126       151.236    
  35  0.363976      -1.01067      -1.52978       1.52978       151.560       153.090    
  36  0.226804      -1.48367      -2.24573       2.24573       149.762       152.008    
  37  0.398930     -0.918968      -1.39098       1.39098       150.890       152.281    
  38  0.303955      -1.19087      -1.80255       1.80255       149.932       151.734    
  39  0.452647     -0.792643      -1.19977       1.19977       151.619       152.818    
  40  0.366024      -1.00506      -1.52129       1.52129       151.692       153.213    
  41  0.995807     -0.420220E-02 -0.636060E-02  0.636060E-02   151.846       151.852    
  42  0.796944     -0.226970     -0.343551      0.343551       150.944       151.288    
  43  0.884128     -0.123153     -0.186409      0.186409       149.969       150.155    
  44  0.710294     -0.342076     -0.517779      0.517779       151.287       151.805    
  45  0.603169     -0.505558     -0.765231      0.765231       152.198       152.963    
  46  0.822382     -0.195551     -0.295993      0.295993       151.313       151.609    
  47  0.741673E-01  -2.60143      -3.93762       3.93762       150.072       154.009    
  48  0.593116     -0.522366     -0.790672      0.790672       152.640       153.431    
  49  0.659441     -0.416363     -0.630222      0.630222       150.744       151.375    
  50  0.179982      -1.71490      -2.59573       2.59573       150.469       153.064    
  51  0.334225      -1.09594      -1.65886       1.65886       152.374       154.033    
  52  0.602331E-01  -2.80953      -4.25261       4.25261       152.477       156.730    
  53  0.895459     -0.110419     -0.167135      0.167135       152.100       152.267    
  54  0.857093     -0.154209     -0.233417      0.233417       153.409       153.643    
  55  0.909112     -0.952871E-01 -0.144230      0.144230       152.501       152.645    
  56  0.474044     -0.746456      -1.12986       1.12986       152.040       153.170    
  57  0.707398     -0.346162     -0.523963      0.523963       152.720       153.244    
  58  0.520137     -0.653664     -0.989410      0.989410       153.530       154.519    
  59  0.723154     -0.324133     -0.490619      0.490619       153.169       153.659    
  60  0.470863     -0.753187      -1.14005       1.14005       152.254       153.395    
  61  0.277955      -1.28030      -1.93790       1.93790       153.572       155.510    
  62  0.598622     -0.513125     -0.776685      0.776685       152.866       153.643    
  63  0.997564     -0.243925E-02 -0.369214E-02  0.369214E-02   152.441       152.445    
  64  0.791941     -0.233269     -0.353084      0.353084       150.154       150.507    
  65  0.650060     -0.430690     -0.651908      0.651908       151.041       151.693    
  66  0.386740     -0.950004      -1.43796       1.43796       152.717       154.155    
  67  0.379980     -0.967637      -1.46465       1.46465       153.690       155.155    
  68  0.458971E-03  -7.68652      -11.6346       11.6346       154.189       165.824    
  69  0.622956     -0.473279     -0.716373      0.716373       151.177       151.893    
  70  0.971720     -0.286875E-01 -0.434224E-01  0.434224E-01   154.510       154.554    
  71  0.404253     -0.905715      -1.37092       1.37092       153.757       155.128    
  72  0.789371     -0.236519     -0.358004      0.358004       154.734       155.092    
  73  0.278539      -1.27820      -1.93473       1.93473       150.497       152.432    
  74  0.367615      -1.00072      -1.51472       1.51472       153.419       154.934    
  75  0.987833     -0.122412E-01 -0.185287E-01  0.185287E-01   148.548       148.566    
loop,thermsimp(1:2)       73  0.218107E-01   1.36926    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    517        151.18          0.86          1.17         25.23          0.54          0.05         27.84
Just calling func    0   0         27.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    518        163.59          0.86          1.17         25.23          0.15          0.05         27.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    151.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       73
neval is:      517
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       74
neval is:      517


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      517     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.354251E-01  -3.34033      -5.05605       5.05605       148.234       153.291    
   2  0.121809      -2.10530      -3.18665       3.18665       148.548       151.735    
   3  0.686317E-01  -2.67900      -4.05503       4.05503       148.113       152.168    
   4  0.529445     -0.635926     -0.962561      0.962561       148.541       149.504    
   5  0.829516     -0.186912     -0.282918      0.282918       148.623       148.906    
   6  0.418811     -0.870336      -1.31737       1.31737       148.996       150.313    
   7  0.353353      -1.04029      -1.57462       1.57462       148.507       150.082    
   8  0.720073     -0.328403     -0.497082      0.497082       148.964       149.461    
   9  0.797644     -0.226092     -0.342222      0.342222       148.868       149.210    
  10  0.521803     -0.650466     -0.984569      0.984569       149.126       150.110    
  11  0.900951     -0.104305     -0.157880      0.157880       148.549       148.707    
  12  0.801614     -0.221128     -0.334708      0.334708       149.661       149.995    
  13  0.796757     -0.227205     -0.343906      0.343906       149.272       149.616    
  14  0.716648     -0.333170     -0.504298      0.504298       150.039       150.544    
  15  0.690691     -0.370062     -0.560140      0.560140       149.969       150.529    
  16  0.462468     -0.771178      -1.16728       1.16728       148.637       149.804    
  17  0.896079     -0.109726     -0.166086      0.166086       149.129       149.296    
  18  0.351033E-02  -5.65205      -8.55514       8.55514       150.157       158.712    
  19  0.195795E-01  -3.93327      -5.95354       5.95354       150.154       156.107    
  20  0.285350E-01  -3.55662      -5.38344       5.38344       150.536       155.919    
  21  0.345848E-01  -3.36434      -5.09239       5.09239       149.608       154.700    
  22  0.344304      -1.06623      -1.61388       1.61388       148.625       150.239    
  23  0.251512      -1.38026      -2.08922       2.08922       148.380       150.469    
  24  0.389628E-01  -3.24515      -4.91198       4.91198       150.503       155.414    
  25  0.338848      -1.08220      -1.63806       1.63806       151.126       152.764    
  26  0.383648     -0.958031      -1.45011       1.45011       150.944       152.394    
  27  0.877462     -0.130722     -0.197866      0.197866       150.744       150.942    
  28  0.383552     -0.958280      -1.45049       1.45049       151.313       152.763    
  29  0.835013     -0.180308     -0.272920      0.272920       151.041       151.314    
  30  0.733865     -0.309430     -0.468365      0.468365       149.932       150.400    
  31  0.288449      -1.24324      -1.88181       1.88181       151.078       152.960    
  32  0.927737     -0.750074E-01 -0.113534      0.113534       151.287       151.400    
  33  0.505507     -0.682193      -1.03259       1.03259       149.580       150.613    
  34  0.909677     -0.946660E-01 -0.143290      0.143290       151.846       151.989    
  35  0.786508     -0.240152     -0.363503      0.363503       151.177       151.541    
  36  0.186545      -1.67908      -2.54152       2.54152       149.762       152.304    
  37  0.917771     -0.858077E-01 -0.129882      0.129882       150.797       150.927    
  38  0.223043      -1.50039      -2.27104       2.27104       148.749       151.020    
  39  0.416209     -0.876568      -1.32681       1.32681       152.100       153.427    
  40  0.742048     -0.298341     -0.451580      0.451580       150.890       151.341    
  41  0.916531     -0.871589E-01 -0.131927      0.131927       150.497       150.629    
  42  0.528872     -0.637009     -0.964201      0.964201       152.441       153.405    
  43  0.380167     -0.967145      -1.46391       1.46391       151.361       152.825    
  44  0.147221      -1.91582      -2.89986       2.89986       152.501       155.401    
  45  0.325715      -1.12173      -1.69790       1.69790       151.619       153.316    
  46  0.653191     -0.425886     -0.644637      0.644637       149.307       149.951    
  47  0.734482     -0.308590     -0.467093      0.467093       151.607       152.074    
  48  0.812100E-01  -2.51072      -3.80031       3.80031       151.389       155.190    
  49  0.981448     -0.187266E-01 -0.283452E-01  0.283452E-01   152.198       152.226    
  50  0.194830      -1.63563      -2.47575       2.47575       149.281       151.756    
  51  0.369514     -0.995566      -1.50693       1.50693       150.469       151.975    
  52  0.124069      -2.08692      -3.15884       3.15884       151.560       154.719    
  53  0.537017     -0.621726     -0.941067      0.941067       152.040       152.981    
  54  0.963796     -0.368752E-01 -0.558156E-01  0.558156E-01   151.692       151.748    
  55  0.749360     -0.288536     -0.436739      0.436739       152.720       153.157    
  56  0.525033     -0.644294     -0.975227      0.975227       152.254       153.230    
  57  0.895210     -0.110697     -0.167555      0.167555       152.640       152.808    
  58  0.964986     -0.356416E-01 -0.539484E-01  0.539484E-01   150.349       150.403    
  59  0.497682     -0.697793      -1.05621       1.05621       152.866       153.922    
  60  0.401907     -0.911534      -1.37973       1.37973       153.409       154.789    
  61  0.995284     -0.472736E-02 -0.715550E-02  0.715550E-02   153.169       153.176    
  62  0.838243E-01  -2.47903      -3.75235       3.75235       149.818       153.571    
  63  0.387998     -0.946756      -1.43305       1.43305       150.072       151.505    
  64  0.994229     -0.578737E-02 -0.875997E-02  0.875997E-02   152.374       152.383    
  65  0.584059     -0.537753     -0.813963      0.813963       152.717       153.531    
  66  0.732456     -0.311352     -0.471274      0.471274       153.530       154.001    
  67  0.905237     -0.995585E-01 -0.150695      0.150695       154.510       154.661    
  68  0.690381     -0.370512     -0.560821      0.560821       153.419       153.980    
  69  0.435068     -0.832253      -1.25973       1.25973       154.734       155.994    
  70  0.815503     -0.203951     -0.308707      0.308707       153.757       154.066    
  71  0.160565      -1.82906      -2.76853       2.76853       153.690       156.459    
  72  0.928545     -0.741365E-01 -0.112216      0.112216       153.572       153.685    
  73  0.358344      -1.02626      -1.55339       1.55339       152.477       154.031    
  74  0.143530      -1.94121      -2.93829       2.93829       149.772       152.711    
  75  0.206412      -1.57788      -2.38834       2.38834       151.180       153.568    
loop,thermsimp(1:2)       74   5.05605       3.18665    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    519        148.86          0.87          1.15         25.25          0.08          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    520        171.43          0.85          1.14         25.29          0.10          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       74
neval is:      519
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       75
neval is:      519


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      519
neval,tstepnext:      519     519

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.825653E-01  -2.49417      -3.77526       3.77526       148.549       152.324    
   2  0.822278     -0.195677     -0.296183      0.296183       148.623       148.920    
   3  0.815014     -0.204550     -0.309614      0.309614       148.868       149.178    
   4  0.207771      -1.57132      -2.37840       2.37840       149.129       151.508    
   5  0.392022E-01  -3.23902      -4.90270       4.90270       148.964       153.867    
   6  0.798009     -0.225635     -0.341529      0.341529       148.541       148.883    
   7  0.946935     -0.545251E-01 -0.825312E-01  0.825312E-01   149.272       149.355    
   8  0.143106      -1.94417      -2.94277       2.94277       148.637       151.580    
   9  0.485966     -0.721616      -1.09226       1.09226       149.307       150.399    
  10  0.789895     -0.235855     -0.356998      0.356998       149.661       150.018    
  11  0.191154      -1.65468      -2.50458       2.50458       148.507       151.012    
  12  0.556941     -0.585297     -0.885926      0.885926       149.126       150.011    
  13  0.354923      -1.03585      -1.56791       1.56791       148.625       150.193    
  14  0.206912      -1.57546      -2.38467       2.38467       148.996       151.380    
  15  0.295054E-01  -3.52318      -5.33282       5.33282       149.932       155.264    
  16  0.531987     -0.631135     -0.955310      0.955310       150.349       151.305    
  17  0.552837     -0.592692     -0.897121      0.897121       148.380       149.277    
  18  0.230971      -1.46546      -2.21818       2.21818       149.969       152.187    
  19  0.879168     -0.128779     -0.194925      0.194925       150.039       150.234    
  20  0.463297     -0.769387      -1.16457       1.16457       149.580       150.745    
  21  0.405031     -0.903792      -1.36801       1.36801       150.497       151.865    
  22  0.297262      -1.21314      -1.83626       1.83626       150.797       152.633    
  23  0.418772     -0.870430      -1.31751       1.31751       150.744       152.062    
  24  0.596068     -0.517401     -0.783156      0.783156       148.749       149.532    
  25  0.720685     -0.327553     -0.495795      0.495795       151.041       151.537    
  26  0.756772     -0.278694     -0.421841      0.421841       150.890       151.312    
  27  0.231133      -1.46476      -2.21711       2.21711       151.287       153.504    
  28  0.783190     -0.244381     -0.369903      0.369903       150.072       150.442    
  29  0.913865     -0.900727E-01 -0.136337      0.136337       151.177       151.313    
  30  0.690716     -0.370027     -0.560087      0.560087       148.548       149.108    
  31  0.187671      -1.67306      -2.53241       2.53241       151.692       154.225    
  32  0.558859     -0.581857     -0.880721      0.880721       149.281       150.161    
  33  0.377344     -0.974598      -1.47519       1.47519       150.469       151.944    
  34  0.800863     -0.222065     -0.336126      0.336126       151.846       152.182    
  35  0.717668     -0.331748     -0.502146      0.502146       151.607       152.109    
  36  0.408710     -0.894749      -1.35432       1.35432       148.113       149.467    
  37  0.744828     -0.294602     -0.445921      0.445921       152.198       152.644    
  38  0.366523      -1.00369      -1.51923       1.51923       149.762       151.282    
  39  0.558103     -0.583212     -0.882771      0.882771       152.374       153.257    
  40  0.993425     -0.659714E-02 -0.998568E-02  0.998568E-02   150.944       150.954    
  41  0.892238     -0.114023     -0.172589      0.172589       149.772       149.945    
  42  0.527869     -0.638907     -0.967073      0.967073       151.313       152.280    
  43  0.805965     -0.215715     -0.326515      0.326515       151.126       151.453    
  44  0.425337     -0.854872      -1.29397       1.29397       152.640       153.934    
  45  0.553214     -0.592011     -0.896089      0.896089       151.361       152.257    
  46  0.961775     -0.389749E-01 -0.589938E-01  0.589938E-01   151.078       151.137    
  47  0.721793     -0.326017     -0.493472      0.493472       152.040       152.534    
  48  0.734528     -0.308527     -0.466998      0.466998       152.720       153.187    
  49  0.838033E-03  -7.08445      -10.7233       10.7233       153.169       163.892    
  50  0.898638E-01  -2.40946      -3.64705       3.64705       152.254       155.902    
  51  0.139620      -1.96883      -2.98010       2.98010       148.234       151.215    
  52  0.360088      -1.02141      -1.54604       1.54604       151.619       153.165    
  53  0.167478E-01  -4.08949      -6.19000       6.19000       152.441       158.631    
  54  0.503231     -0.686706      -1.03942       1.03942       152.100       153.140    
  55  0.896724     -0.109007     -0.164998      0.164998       152.717       152.882    
  56  0.986589E-01  -2.31609      -3.50571       3.50571       151.180       154.686    
  57  0.481539     -0.730769      -1.10612       1.10612       149.818       150.925    
  58  0.300347      -1.20282      -1.82063       1.82063       153.572       155.393    
  59  0.920100     -0.832732E-01 -0.126045      0.126045       152.866       152.992    
  60  0.583092     -0.539410     -0.816471      0.816471       153.419       154.236    
  61  0.637761     -0.449792     -0.680821      0.680821       153.530       154.211    
  62  0.436466     -0.829046      -1.25487       1.25487       152.477       153.732    
  63  0.545950     -0.605228     -0.916096      0.916096       153.757       154.673    
  64  0.349946      -1.04998      -1.58928       1.58928       154.510       156.100    
  65  0.505052     -0.683095      -1.03396       1.03396       149.608       150.642    
  66  0.372807     -0.986695      -1.49350       1.49350       151.560       153.053    
  67  0.500748     -0.691652      -1.04691       1.04691       153.409       154.456    
  68  0.463810     -0.768281      -1.16290       1.16290       151.389       152.552    
  69  0.210900      -1.55637      -2.35578       2.35578       152.501       154.857    
  70  0.975658     -0.246436E-01 -0.373015E-01  0.373015E-01   150.503       150.540    
  71  0.316240      -1.15126      -1.74258       1.74258       150.536       152.279    
  72  0.766086     -0.266461     -0.403325      0.403325       154.734       155.138    
  73  0.356869      -1.03039      -1.55963       1.55963       150.154       151.713    
  74  0.398710     -0.919521      -1.39182       1.39182       153.690       155.082    
  75  0.551432     -0.595238     -0.900974      0.900974       148.856       149.757    
loop,thermsimp(1:2)       75   3.77526      0.296183    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    521        149.27          0.87          1.15         25.28          0.06          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    522        157.74          0.86          1.16         25.29          0.19          0.05         27.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  520    149.27       0.9773     -2.268      3.441     -102.6      1.231    
                      0.3245      1.303     -99.70      3.654    -0.7653E-01
                       2.329     -1.212      1.530      6996.      2992.    
                     -0.5213E-01  0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      6145.      1352.    
                     -0.5672     -6.018     -4.057     -9.557      6.297    
                      -15.40     -3.144      7998.      0.000     0.1070E+05

                      -2466.     0.1147E+05 -3297.     0.1054E+05  4800.    
                       5196.     0.4002E-01 0.1941      0.000     0.1713    
                     -0.2530    -0.9393E-01 0.1309     0.9509E-01-0.5435E-02

                     -0.4689    -0.7742      0.000     0.9785E-01-0.7142E-01
                       0.000     0.4849E-01 0.1139    -0.1622     0.3008E-02
                     -0.1449E-01-0.2687    -0.6092     -1.208      3727.    

                      -1.049     -1.153     -2.253     -2.305    -0.1153    
                      0.9625E-01  9.192      8.704    -0.1530E+05 -4.000    
                     -0.8606     -1.693      9.289      8.844    -0.1203E+05

                      -4.000     0.4347    -0.8911      8.906      9.042    
                     -0.1992E+05 -7.000    -0.7561     -1.196      8.988    
                       8.781    -0.1920E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    149.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.51364               519
loop is:       75
neval is:      521
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:    1.51364               519
loop is:       76
neval is:      521


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.756818               593

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      521     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316695      -1.14982     -0.870203      0.870203       148.541       149.411    
   2  0.382504     -0.961016     -0.727314      0.727314       148.623       149.351    
   3  0.264614      -1.32948      -1.00618       1.00618       148.548       149.554    
   4  0.803265     -0.219071     -0.165797      0.165797       148.868       149.034    
   5  0.171034      -1.76589      -1.33646       1.33646       148.380       149.716    
   6  0.831601     -0.184402     -0.139559      0.139559       149.272       149.412    
   7  0.435344     -0.831619     -0.629384      0.629384       148.113       148.742    
   8  0.709095     -0.343766     -0.260168      0.260168       148.749       149.009    
   9  0.787618     -0.238742     -0.180684      0.180684       148.856       149.036    
  10  0.848523E-01  -2.46684      -1.86695       1.86695       149.772       151.639    
  11  0.863403     -0.146874     -0.111157      0.111157       149.126       149.237    
  12  0.852899E-04  -9.36945      -7.09097       7.09097       149.661       156.751    
  13  0.221667      -1.50658      -1.14021       1.14021       149.281       150.421    
  14  0.474061E-01  -3.04901      -2.30754       2.30754       148.625       150.933    
  15  0.175322      -1.74113      -1.31772       1.31772       150.039       151.357    
  16  0.154041      -1.87053      -1.41566       1.41566       149.307       150.722    
  17  0.808967     -0.211997     -0.160443      0.160443       150.072       150.232    
  18  0.790119     -0.235572     -0.178285      0.178285       150.503       150.681    
  19  0.996800     -0.320514E-02 -0.242571E-02  0.242571E-02   149.608       149.610    
  20  0.238948      -1.43151      -1.08339       1.08339       149.580       150.664    
  21  0.829852     -0.186508     -0.141153      0.141153       149.818       149.960    
  22  0.582759     -0.539981     -0.408668      0.408668       150.944       151.353    
  23  0.284746      -1.25616     -0.950684      0.950684       148.507       149.458    
  24  0.360633      -1.01989     -0.771874      0.771874       151.078       151.850    
  25  0.941077     -0.607306E-01 -0.459620E-01  0.459620E-01   148.234       148.280    
  26  0.383331     -0.958856     -0.725679      0.725679       149.762       150.488    
  27  0.523735     -0.646770     -0.489488      0.489488       150.349       150.839    
  28  0.481378     -0.731103     -0.553312      0.553312       150.890       151.443    
  29  0.841845     -0.172159     -0.130293      0.130293       151.177       151.307    
  30  0.178872      -1.72108      -1.30255       1.30255       148.996       150.298    
  31  0.873649     -0.135077     -0.102229      0.102229       151.126       151.228    
  32  0.805285     -0.216559     -0.163896      0.163896       149.129       149.293    
  33  0.945892E-01  -2.35821      -1.78474       1.78474       151.041       152.826    
  34  0.976997     -0.232719E-01 -0.176126E-01  0.176126E-01   148.637       148.654    
  35  0.347817      -1.05608     -0.799261      0.799261       150.154       150.953    
  36  0.443928     -0.812092     -0.614606      0.614606       150.497       151.112    
  37  0.818184     -0.200668     -0.151870      0.151870       150.469       150.620    
  38  0.849587     -0.163005     -0.123365      0.123365       150.744       150.868    
  39  0.809085E-01  -2.51444      -1.90297       1.90297       151.607       153.510    
  40  0.808062     -0.213117     -0.161291      0.161291       151.846       152.007    
  41  0.663621     -0.410044     -0.310329      0.310329       149.969       150.279    
  42  0.466900     -0.761639     -0.576423      0.576423       151.361       151.938    
  43  0.948620     -0.527466E-01 -0.399196E-01  0.399196E-01   150.536       150.576    
  44  0.274490      -1.29284     -0.978445      0.978445       151.313       152.291    
  45  0.928375E-01  -2.37690      -1.79889       1.79889       148.549       150.348    
  46  0.983714     -0.164200E-01 -0.124270E-01  0.124270E-01   152.040       152.052    
  47  0.424265     -0.857398     -0.648895      0.648895       151.389       152.038    
  48  0.534428     -0.626558     -0.474191      0.474191       150.797       151.271    
  49  0.511115E-01  -2.97374      -2.25058       2.25058       152.198       154.449    
  50  0.881621     -0.125993     -0.953535E-01  0.953535E-01   152.717       152.813    
  51  0.996483     -0.352291E-02 -0.266620E-02  0.266620E-02   152.866       152.869    
  52  0.379271     -0.969504     -0.733738      0.733738       151.560       152.294    
  53  0.844840     -0.168609     -0.127606      0.127606       152.100       152.228    
  54  0.242994      -1.41472      -1.07069       1.07069       151.619       152.689    
  55  0.875393     -0.133082     -0.100719      0.100719       152.720       152.821    
  56  0.565062     -0.570819     -0.432007      0.432007       152.374       152.806    
  57  0.698179     -0.359279     -0.271909      0.271909       151.287       151.559    
  58  0.676907     -0.390222     -0.295327      0.295327       152.477       152.772    
  59  0.130081      -2.03960      -1.54361       1.54361       148.964       150.508    
  60  0.250203      -1.38548      -1.04856       1.04856       152.640       153.689    
  61  0.366784      -1.00298     -0.759076      0.759076       153.530       154.289    
  62  0.868663     -0.140800     -0.106560      0.106560       151.692       151.799    
  63  0.739900     -0.301240     -0.227984      0.227984       153.419       153.647    
  64  0.717636     -0.331793     -0.251107      0.251107       153.409       153.661    
  65  0.519506     -0.654878     -0.495623      0.495623       153.757       154.253    
  66  0.224685      -1.49305      -1.12997       1.12997       151.180       152.310    
  67  0.848282     -0.164543     -0.124529      0.124529       152.501       152.625    
  68  0.818258     -0.200577     -0.151801      0.151801       153.690       153.842    
  69  0.812276     -0.207915     -0.157354      0.157354       154.734       154.892    
  70  0.597137     -0.515609     -0.390223      0.390223       149.932       150.322    
  71  0.402391     -0.910332     -0.688956      0.688956       153.572       154.261    
  72  0.820747     -0.197540     -0.149502      0.149502       152.254       152.404    
  73  0.296149      -1.21689     -0.920966      0.920966       154.510       155.431    
  74  0.400580     -0.914841     -0.692369      0.692369       152.441       153.133    
  75  0.693366     -0.366198     -0.277145      0.277145       149.274       149.551    
loop,thermsimp(1:2)       76  0.870203      0.727314    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    523        150.13          0.85          1.15         25.30          0.41          0.05         27.75
Just calling func    0   0         27.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       76
neval is:      522
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       77
neval is:      522


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      522     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807533     -0.213771     -0.161786      0.161786       148.234       148.396    
   2  0.906511     -0.981526E-01 -0.742837E-01  0.742837E-01   148.637       148.711    
   3  0.121906      -2.10450      -1.59273       1.59273       148.113       149.705    
   4  0.849960     -0.162566     -0.123033      0.123033       148.749       148.872    
   5  0.268960      -1.31319     -0.993849      0.993849       148.868       149.862    
   6  0.475959     -0.742424     -0.561880      0.561880       148.856       149.418    
   7  0.359795      -1.02222     -0.773636      0.773636       149.126       149.899    
   8  0.411175     -0.888736     -0.672612      0.672612       149.129       149.802    
   9  0.381099     -0.964695     -0.730099      0.730099       148.623       149.353    
  10  0.390615     -0.940033     -0.711434      0.711434       148.541       149.253    
  11  0.758954     -0.275815     -0.208742      0.208742       149.272       149.481    
  12  0.476320     -0.741666     -0.561306      0.561306       148.507       149.068    
  13  0.658674     -0.417527     -0.315992      0.315992       149.274       149.590    
  14  0.324645      -1.12502     -0.851438      0.851438       148.548       149.399    
  15  0.388092     -0.946513     -0.716339      0.716339       149.608       150.324    
  16  0.910971     -0.932447E-01 -0.705693E-01  0.705693E-01   148.380       148.450    
  17  0.170451E-01  -4.07189      -3.08168       3.08168       149.818       152.900    
  18  0.361549      -1.01736     -0.769955      0.769955       150.072       150.842    
  19  0.134057      -2.00949      -1.52082       1.52082       149.969       151.489    
  20  0.241841      -1.41948      -1.07429       1.07429       148.996       150.070    
  21  0.933265     -0.690659E-01 -0.522703E-01  0.522703E-01   149.932       149.984    
  22  0.142292      -1.94987      -1.47570       1.47570       148.549       150.025    
  23  0.557913     -0.583552     -0.441643      0.441643       149.281       149.722    
  24  0.606116     -0.500684     -0.378927      0.378927       149.762       150.141    
  25  0.802619     -0.219875     -0.166405      0.166405       148.964       149.130    
  26  0.828050E-02  -4.79385      -3.62807       3.62807       150.536       154.164    
  27  0.736740E-01  -2.60811      -1.97386       1.97386       150.469       152.442    
  28  0.772368     -0.258294     -0.195481      0.195481       149.580       149.776    
  29  0.164353      -1.80574      -1.36662       1.36662       150.503       151.869    
  30  0.305683      -1.18521     -0.896987      0.896987       149.307       150.204    
  31  0.490685     -0.711953     -0.538819      0.538819       150.349       150.888    
  32  0.796715     -0.227258     -0.171993      0.171993       150.744       150.916    
  33  0.416735     -0.875305     -0.662447      0.662447       148.625       149.288    
  34  0.336518      -1.08910     -0.824253      0.824253       150.154       150.978    
  35  0.410249     -0.890990     -0.674318      0.674318       150.497       151.171    
  36  0.765564     -0.267142     -0.202178      0.202178       151.126       151.328    
  37  0.852656     -0.159399     -0.120636      0.120636       150.797       150.918    
  38  0.218548      -1.52075      -1.15093       1.15093       151.177       152.328    
  39  0.859169     -0.151790     -0.114877      0.114877       150.944       151.059    
  40  0.140392      -1.96332      -1.48587       1.48587       150.039       151.525    
  41  0.622846     -0.473456     -0.358320      0.358320       150.890       151.248    
  42  0.410234     -0.891028     -0.674346      0.674346       151.287       151.961    
  43  0.459429     -0.777770     -0.588631      0.588631       149.772       150.361    
  44  0.911803     -0.923309E-01 -0.698777E-01  0.698777E-01   151.692       151.762    
  45  0.120848      -2.11322      -1.59933       1.59933       151.078       152.678    
  46  0.474460     -0.745577     -0.564266      0.564266       151.361       151.925    
  47  0.602073     -0.507376     -0.383992      0.383992       151.846       152.230    
  48  0.204387      -1.58774      -1.20163       1.20163       151.389       152.591    
  49  0.822244     -0.195718     -0.148123      0.148123       152.040       152.188    
  50  0.538202     -0.619522     -0.468865      0.468865       152.100       152.569    
  51  0.770233     -0.261062     -0.197577      0.197577       151.313       151.510    
  52  0.661649     -0.413020     -0.312581      0.312581       151.560       151.872    
  53  0.776910     -0.252431     -0.191044      0.191044       151.180       151.371    
  54  0.671075     -0.398874     -0.301875      0.301875       152.254       152.556    
  55  0.734406E-01  -2.61128      -1.97626       1.97626       152.501       154.477    
  56  0.949566     -0.517501E-01 -0.391654E-01  0.391654E-01   151.619       151.658    
  57  0.150244      -1.89549      -1.43454       1.43454       152.477       153.912    
  58  0.928065     -0.746531E-01 -0.564988E-01  0.564988E-01   152.374       152.430    
  59  0.507161     -0.678926     -0.513824      0.513824       152.717       153.231    
  60  0.381390     -0.963934     -0.729523      0.729523       152.720       153.450    
  61  0.295414      -1.21938     -0.922848      0.922848       151.041       151.964    
  62  0.120313E-01  -4.42024      -3.34532       3.34532       152.866       156.211    
  63  0.286670      -1.24942     -0.945586      0.945586       152.441       153.387    
  64  0.557325     -0.584607     -0.442441      0.442441       151.607       152.050    
  65  0.643641     -0.440614     -0.333465      0.333465       153.419       153.753    
  66  0.260021      -1.34699      -1.01943       1.01943       153.409       154.429    
  67  0.316776      -1.14956     -0.870007      0.870007       152.640       153.510    
  68  0.504876     -0.683442     -0.517241      0.517241       153.690       154.208    
  69  0.385321     -0.953678     -0.721761      0.721761       153.757       154.479    
  70  0.853972     -0.157857     -0.119469      0.119469       153.572       153.692    
  71  0.567771E-01  -2.86862      -2.17103       2.17103       153.530       155.701    
  72  0.905899     -0.988271E-01 -0.747942E-01  0.747942E-01   152.198       152.273    
  73  0.403576     -0.907392     -0.686731      0.686731       154.734       155.421    
  74  0.458225     -0.780395     -0.590617      0.590617       154.510       155.101    
  75  0.176559      -1.73410      -1.31240       1.31240       150.127       151.439    
loop,thermsimp(1:2)       77  0.161786      0.742837E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    524        152.55          0.88          1.15         25.29          0.23          0.06         27.61
Just calling func    0   0         27.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    152.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       77
neval is:      523
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       78
neval is:      523


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      523     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.511642     -0.670131     -0.507167      0.507167       148.234       148.742    
   2  0.243468      -1.41277      -1.06921       1.06921       148.380       149.449    
   3  0.259231      -1.35003      -1.02173       1.02173       148.637       149.659    
   4  0.411864     -0.887061     -0.671344      0.671344       148.749       149.420    
   5  0.192374      -1.64831      -1.24747       1.24747       148.507       149.755    
   6  0.504542     -0.684104     -0.517742      0.517742       148.964       149.482    
   7  0.404455E-01  -3.20780      -2.42772       2.42772       148.541       150.969    
   8  0.157113      -1.85079      -1.40071       1.40071       148.625       150.026    
   9  0.833701     -0.181880     -0.137650      0.137650       148.623       148.761    
  10  0.878720     -0.129289     -0.978483E-01  0.978483E-01   148.548       148.646    
  11  0.237147      -1.43908      -1.08912       1.08912       148.856       149.945    
  12  0.936993     -0.650795E-01 -0.492534E-01  0.492534E-01   149.272       149.322    
  13  0.651018     -0.429219     -0.324841      0.324841       149.274       149.599    
  14  0.366374      -1.00410     -0.759922      0.759922       148.113       148.873    
  15  0.484826E-02  -5.32914      -4.03319       4.03319       149.281       153.314    
  16  0.509486     -0.674354     -0.510363      0.510363       149.580       150.091    
  17  0.685690     -0.377329     -0.285570      0.285570       149.129       149.415    
  18  0.321855E-01  -3.43624      -2.60061       2.60061       148.868       151.469    
  19  0.442039     -0.816357     -0.617834      0.617834       149.126       149.743    
  20  0.209598      -1.56256      -1.18258       1.18258       149.932       151.114    
  21  0.378107     -0.972579     -0.736065      0.736065       148.549       149.285    
  22  0.604565     -0.503247     -0.380866      0.380866       148.996       149.377    
  23  0.178047      -1.72571      -1.30605       1.30605       149.762       151.068    
  24  0.784915     -0.242179     -0.183286      0.183286       149.307       149.490    
  25  0.685234     -0.377994     -0.286073      0.286073       149.608       149.894    
  26  0.423928     -0.858193     -0.649496      0.649496       149.772       150.422    
  27  0.413814E-01  -3.18492      -2.41041       2.41041       150.072       152.482    
  28  0.788249     -0.237942     -0.180079      0.180079       150.349       150.529    
  29  0.212924      -1.54682      -1.17066       1.17066       150.744       151.915    
  30  0.934569     -0.676697E-01 -0.512137E-01  0.512137E-01   150.797       150.848    
  31  0.361270      -1.01813     -0.770539      0.770539       150.154       150.924    
  32  0.755006     -0.281030     -0.212689      0.212689       150.944       151.157    
  33  0.454810     -0.787875     -0.596278      0.596278       150.497       151.093    
  34  0.152938      -1.87772      -1.42110       1.42110       150.890       152.311    
  35  0.376573     -0.976642     -0.739141      0.739141       151.126       151.865    
  36  0.571848E-01  -2.86147      -2.16561       2.16561       151.180       153.345    
  37  0.995942     -0.406615E-02 -0.307733E-02  0.307733E-02   150.127       150.130    
  38  0.834052     -0.181460     -0.137332      0.137332       149.969       150.106    
  39  0.481290     -0.731286     -0.553451      0.553451       151.313       151.866    
  40  0.289962E-01  -3.54059      -2.67958       2.67958       150.039       152.719    
  41  0.897798     -0.107810     -0.815928E-01  0.815928E-01   151.619       151.700    
  42  0.721121     -0.326948     -0.247441      0.247441       151.692       151.940    
  43  0.946509     -0.549753E-01 -0.416063E-01  0.416063E-01   150.503       150.544    
  44  0.134166      -2.00868      -1.52020       1.52020       151.560       153.080    
  45  0.747061     -0.291608     -0.220694      0.220694       151.361       151.582    
  46  0.284226      -1.25799     -0.952067      0.952067       151.287       152.239    
  47  0.785305     -0.241683     -0.182910      0.182910       151.041       151.224    
  48  0.240863      -1.42353      -1.07735       1.07735       151.607       152.685    
  49  0.289983      -1.23793     -0.936892      0.936892       152.040       152.977    
  50  0.847789     -0.165124     -0.124969      0.124969       151.846       151.971    
  51  0.981904     -0.182614E-01 -0.138206E-01  0.138206E-01   152.198       152.212    
  52  0.193174      -1.64416      -1.24433       1.24433       151.177       152.421    
  53  0.657957     -0.418616     -0.316816      0.316816       152.374       152.691    
  54  0.477119     -0.739990     -0.560038      0.560038       150.469       151.029    
  55  0.751550     -0.285617     -0.216161      0.216161       152.254       152.471    
  56  0.375761     -0.978801     -0.740775      0.740775       152.100       152.841    
  57  0.896165     -0.109631     -0.829708E-01  0.829708E-01   151.389       151.472    
  58  0.222381      -1.50336      -1.13777       1.13777       151.078       152.216    
  59  0.296050E-01  -3.51981      -2.66386       2.66386       149.818       152.482    
  60  0.433703     -0.835396     -0.632243      0.632243       152.717       153.350    
  61  0.747265     -0.291335     -0.220488      0.220488       152.441       152.661    
  62  0.165490      -1.79885      -1.36140       1.36140       152.720       154.082    
  63  0.717756     -0.331626     -0.250980      0.250980       152.640       152.891    
  64  0.556048     -0.586901     -0.444177      0.444177       153.572       154.016    
  65  0.543566     -0.609604     -0.461360      0.461360       153.419       153.881    
  66  0.260629      -1.34466      -1.01766       1.01766       152.477       153.495    
  67  0.989115     -0.109442E-01 -0.828276E-02  0.828276E-02   150.536       150.544    
  68  0.923701     -0.793666E-01 -0.600661E-01  0.600661E-01   153.690       153.750    
  69  0.205895      -1.58039      -1.19607       1.19607       153.409       154.606    
  70  0.923336     -0.797623E-01 -0.603655E-01  0.603655E-01   152.501       152.561    
  71  0.559233E-01  -2.88377      -2.18249       2.18249       153.757       155.940    
  72  0.798275     -0.225302     -0.170513      0.170513       154.510       154.681    
  73  0.723691     -0.323391     -0.244748      0.244748       154.734       154.979    
  74  0.314648      -1.15630     -0.875109      0.875109       153.530       154.405    
  75  0.652352E-01  -2.72976      -2.06593       2.06593       152.547       154.613    
loop,thermsimp(1:2)       78  0.507167       1.06921    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    525        156.44          0.87          1.16         25.27          0.07          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    526        151.63          0.86          1.15         25.31          0.06          0.05         27.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    151.63
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       78
neval is:      525
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       79
neval is:      525


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      525     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674234     -0.394178     -0.298321      0.298321       148.548       148.846    
   2  0.763241     -0.270181     -0.204478      0.204478       148.234       148.439    
   3  0.181180      -1.70826      -1.29285       1.29285       148.623       149.916    
   4  0.986466     -0.136262E-01 -0.103126E-01  0.103126E-01   148.113       148.123    
   5  0.907914     -0.966062E-01 -0.731133E-01  0.731133E-01   148.549       148.622    
   6  0.686562     -0.376058     -0.284608      0.284608       149.272       149.557    
   7  0.269744E-01  -3.61287      -2.73428       2.73428       148.996       151.730    
   8  0.305757      -1.18497     -0.896804      0.896804       149.129       150.026    
   9  0.678790     -0.387443     -0.293224      0.293224       148.749       149.042    
  10  0.376044     -0.978048     -0.740205      0.740205       148.380       149.120    
  11  0.569163     -0.563589     -0.426534      0.426534       148.964       149.391    
  12  0.700219E-02  -4.96153      -3.75498       3.75498       149.307       153.062    
  13  0.271434      -1.30403     -0.986918      0.986918       149.274       150.261    
  14  0.412709     -0.885014     -0.669795      0.669795       148.637       149.307    
  15  0.230294      -1.46840      -1.11131       1.11131       149.126       150.237    
  16  0.453167     -0.791494     -0.599017      0.599017       148.507       149.106    
  17  0.225846E-01  -3.79049      -2.86871       2.86871       149.608       152.477    
  18  0.295035E-01  -3.52324      -2.66646       2.66646       148.856       151.522    
  19  0.766595     -0.265797     -0.201160      0.201160       148.625       148.826    
  20  0.995962     -0.404634E-02 -0.306234E-02  0.306234E-02   149.580       149.583    
  21  0.816964     -0.202160     -0.152999      0.152999       149.969       150.122    
  22  0.376195     -0.977647     -0.739901      0.739901       150.127       150.867    
  23  0.557992     -0.583410     -0.441536      0.441536       149.772       150.214    
  24  0.643422     -0.440955     -0.333723      0.333723       150.349       150.683    
  25  0.999852     -0.147642E-03 -0.111738E-03  0.111738E-03   150.503       150.503    
  26  0.644170     -0.439793     -0.332844      0.332844       150.536       150.869    
  27  0.216981      -1.52794      -1.15638       1.15638       150.797       151.953    
  28  0.469613     -0.755845     -0.572038      0.572038       150.154       150.726    
  29  0.241394      -1.42133      -1.07569       1.07569       148.541       149.617    
  30  0.598509     -0.513314     -0.388486      0.388486       150.469       150.857    
  31  0.671670     -0.397989     -0.301205      0.301205       149.762       150.064    
  32  0.508456     -0.676377     -0.511895      0.511895       150.497       151.009    
  33  0.142355      -1.94943      -1.47537       1.47537       149.932       151.407    
  34  0.314602      -1.15645     -0.875220      0.875220       150.944       151.819    
  35  0.595792     -0.517863     -0.391928      0.391928       151.041       151.433    
  36  0.980752     -0.194358E-01 -0.147094E-01  0.147094E-01   148.868       148.883    
  37  0.574834     -0.553674     -0.419031      0.419031       151.389       151.808    
  38  0.176457      -1.73468      -1.31284       1.31284       151.361       152.674    
  39  0.972462     -0.279243E-01 -0.211336E-01  0.211336E-01   151.619       151.640    
  40  0.914299     -0.895977E-01 -0.678092E-01  0.678092E-01   151.126       151.194    
  41  0.844829E-01  -2.47121      -1.87025       1.87025       151.313       153.183    
  42  0.173441E-01  -4.05450      -3.06852       3.06852       150.744       153.813    
  43  0.558790     -0.581981     -0.440454      0.440454       151.692       152.133    
  44  0.102972      -2.27330      -1.72047       1.72047       151.846       153.566    
  45  0.479128E-01  -3.03837      -2.29950       2.29950       152.198       154.498    
  46  0.955710     -0.453003E-01 -0.342841E-01  0.342841E-01   151.078       151.113    
  47  0.768826     -0.262891     -0.198961      0.198961       151.287       151.486    
  48  0.634123     -0.455512     -0.344740      0.344740       150.890       151.235    
  49  0.460722     -0.774961     -0.586504      0.586504       151.177       151.764    
  50  0.376372     -0.977178     -0.739546      0.739546       152.254       152.994    
  51  0.784580     -0.242607     -0.183609      0.183609       150.072       150.255    
  52  0.870295     -0.138923     -0.105139      0.105139       149.818       149.924    
  53  0.554002     -0.590587     -0.446967      0.446967       152.501       152.948    
  54  0.186441      -1.67964      -1.27118       1.27118       152.441       153.712    
  55  0.267480      -1.31871     -0.998024      0.998024       151.607       152.605    
  56  0.867677     -0.141936     -0.107420      0.107420       152.374       152.481    
  57  0.172397      -1.75795      -1.33045       1.33045       150.039       151.370    
  58  0.959742     -0.410907E-01 -0.310982E-01  0.310982E-01   152.100       152.131    
  59  0.806336     -0.215255     -0.162909      0.162909       152.640       152.803    
  60  0.605158     -0.502266     -0.380124      0.380124       152.040       152.420    
  61  0.953035     -0.481032E-01 -0.364054E-01  0.364054E-01   151.560       151.596    
  62  0.835597     -0.179609     -0.135931      0.135931       149.281       149.417    
  63  0.116176      -2.15265      -1.62916       1.62916       151.180       152.809    
  64  0.409566     -0.892657     -0.675579      0.675579       152.717       153.393    
  65  0.988477     -0.115901E-01 -0.877162E-02  0.877162E-02   152.477       152.486    
  66  0.872219     -0.136715     -0.103469      0.103469       153.690       153.794    
  67  0.334045      -1.09648     -0.829837      0.829837       153.419       154.249    
  68  0.694069     -0.365184     -0.276378      0.276378       153.572       153.849    
  69  0.802116     -0.220502     -0.166880      0.166880       152.720       152.887    
  70  0.569950     -0.562207     -0.425488      0.425488       153.530       153.956    
  71  0.586288     -0.533944     -0.404098      0.404098       153.409       153.814    
  72  0.849877     -0.162664     -0.123107      0.123107       152.547       152.670    
  73  0.816106     -0.203212     -0.153794      0.153794       154.510       154.664    
  74  0.905808     -0.989276E-01 -0.748702E-01  0.748702E-01   154.734       154.809    
  75  0.892558E-02  -4.71883      -3.57130       3.57130       151.633       155.204    
loop,thermsimp(1:2)       79  0.298321      0.204478    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    527        151.22          0.87          1.15         25.24          0.09          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       79
neval is:      526
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       80
neval is:      526


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      526     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.684247     -0.379436     -0.287164      0.287164       148.113       148.400    
   2  0.345348      -1.06320     -0.804652      0.804652       148.234       149.039    
   3  0.950053     -0.512378E-01 -0.387777E-01  0.387777E-01   148.549       148.588    
   4  0.837893     -0.176865     -0.133855      0.133855       148.625       148.759    
   5  0.333546      -1.09797     -0.830967      0.830967       148.548       149.379    
   6  0.161688      -1.82209      -1.37899       1.37899       148.868       150.247    
   7  0.617647     -0.481838     -0.364664      0.364664       148.749       149.114    
   8  0.401140     -0.913446     -0.691313      0.691313       148.507       149.199    
   9  0.358257E-01  -3.32909      -2.51952       2.51952       148.380       150.899    
  10  0.349088E-01  -3.35502      -2.53914       2.53914       148.637       151.176    
  11  0.152040      -1.88361      -1.42555       1.42555       148.964       150.390    
  12  0.703870     -0.351161     -0.265765      0.265765       149.281       149.546    
  13  0.550338     -0.597222     -0.451988      0.451988       149.272       149.724    
  14  0.320062      -1.13924     -0.862199      0.862199       149.580       150.443    
  15  0.842058     -0.171906     -0.130102      0.130102       148.541       148.671    
  16  0.872615     -0.136260     -0.103124      0.103124       148.623       148.727    
  17  0.687324     -0.374949     -0.283769      0.283769       149.818       150.102    
  18  0.707329     -0.346259     -0.262055      0.262055       149.129       149.391    
  19  0.781599     -0.246413     -0.186490      0.186490       149.762       149.949    
  20  0.257984      -1.35486      -1.02538       1.02538       149.969       150.994    
  21  0.624920     -0.470132     -0.355804      0.355804       149.772       150.128    
  22  0.816734     -0.202441     -0.153211      0.153211       149.126       149.279    
  23  0.740445     -0.300504     -0.227427      0.227427       150.072       150.299    
  24  0.433128     -0.836721     -0.633246      0.633246       149.274       149.907    
  25  0.964932E-01  -2.33828      -1.76966       1.76966       150.503       152.272    
  26  0.336813      -1.08823     -0.823591      0.823591       150.349       151.173    
  27  0.631668     -0.459391     -0.347675      0.347675       150.154       150.501    
  28  0.173511      -1.75152      -1.32558       1.32558       150.469       151.794    
  29  0.714113     -0.336715     -0.254832      0.254832       150.127       150.382    
  30  0.856732     -0.154630     -0.117027      0.117027       150.536       150.653    
  31  0.871530     -0.137505     -0.104066      0.104066       150.497       150.601    
  32  0.524684     -0.644958     -0.488116      0.488116       151.078       151.567    
  33  0.199462      -1.61213      -1.22009       1.22009       151.126       152.346    
  34  0.848275     -0.164551     -0.124535      0.124535       150.890       151.014    
  35  0.836784     -0.178190     -0.134857      0.134857       150.039       150.174    
  36  0.478860E-01  -3.03893      -2.29992       2.29992       149.932       152.232    
  37  0.297469      -1.21245     -0.917602      0.917602       151.041       151.959    
  38  0.649198     -0.432018     -0.326959      0.326959       151.287       151.614    
  39  0.657692     -0.419018     -0.317121      0.317121       148.856       149.173    
  40  0.684263     -0.379413     -0.287147      0.287147       151.560       151.847    
  41  0.249508      -1.38826      -1.05066       1.05066       151.619       152.669    
  42  0.745618     -0.293542     -0.222158      0.222158       148.996       149.218    
  43  0.338359      -1.08365     -0.820125      0.820125       151.177       151.997    
  44  0.472339     -0.750059     -0.567658      0.567658       151.389       151.957    
  45  0.796486     -0.227546     -0.172211      0.172211       150.944       151.116    
  46  0.241988      -1.41887      -1.07382       1.07382       150.797       151.871    
  47  0.162775      -1.81539      -1.37392       1.37392       152.100       153.474    
  48  0.749633     -0.288171     -0.218093      0.218093       151.692       151.910    
  49  0.942194     -0.595438E-01 -0.450638E-01  0.450638E-01   152.040       152.085    
  50  0.823760E-01  -2.49646      -1.88937       1.88937       149.608       151.497    
  51  0.437045     -0.827720     -0.626433      0.626433       152.374       153.000    
  52  0.812234     -0.207967     -0.157393      0.157393       152.477       152.635    
  53  0.690291     -0.370642     -0.280508      0.280508       151.607       151.888    
  54  0.592810     -0.522881     -0.395726      0.395726       152.547       152.943    
  55  0.547326     -0.602712     -0.456143      0.456143       151.361       151.817    
  56  0.132779      -2.01907      -1.52807       1.52807       152.640       154.168    
  57  0.613048     -0.489313     -0.370321      0.370321       151.180       151.550    
  58  0.569441     -0.563101     -0.426165      0.426165       152.720       153.147    
  59  0.927770     -0.749713E-01 -0.567396E-01  0.567396E-01   152.501       152.558    
  60  0.788850E-01  -2.53976      -1.92214       1.92214       152.254       154.177    
  61  0.762671     -0.270929     -0.205044      0.205044       149.307       149.512    
  62  0.128616      -2.05093      -1.55218       1.55218       151.313       152.865    
  63  0.297022E-01  -3.51653      -2.66138       2.66138       152.717       155.379    
  64  0.145152      -1.92997      -1.46064       1.46064       151.846       153.307    
  65  0.154969      -1.86453      -1.41111       1.41111       152.441       153.852    
  66  0.671761     -0.397853     -0.301102      0.301102       153.690       153.991    
  67  0.188347E-02  -6.27464      -4.74876       4.74876       150.744       155.493    
  68  0.645191     -0.438208     -0.331644      0.331644       153.409       153.741    
  69  0.402121     -0.911002     -0.689463      0.689463       153.572       154.262    
  70  0.462446     -0.771225     -0.583677      0.583677       153.530       154.114    
  71  0.406948     -0.899069     -0.680432      0.680432       153.419       154.100    
  72  0.923566     -0.795125E-01 -0.601765E-01  0.601765E-01   152.198       152.258    
  73  0.673027     -0.395970     -0.299678      0.299678       154.510       154.810    
  74  0.438833     -0.823635     -0.623342      0.623342       154.734       155.358    
  75  0.427031     -0.850899     -0.643976      0.643976       151.216       151.860    
loop,thermsimp(1:2)       80  0.287164      0.804652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    528        150.01          0.86          1.14         25.27          0.14          0.06         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       80
neval is:      527
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       81
neval is:      527


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      527     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.212099      -1.55070      -1.17360       1.17360       148.113       149.286    
   2  0.790720E-01  -2.53740      -1.92035       1.92035       148.549       150.469    
   3  0.474562     -0.745363     -0.564104      0.564104       148.541       149.105    
   4  0.898144E-01  -2.41001      -1.82394       1.82394       148.623       150.447    
   5  0.458101     -0.780666     -0.590822      0.590822       148.625       149.216    
   6  0.931196     -0.712852E-01 -0.539499E-01  0.539499E-01   148.234       148.288    
   7  0.205708      -1.58130      -1.19675       1.19675       148.749       149.946    
   8  0.733185     -0.310357     -0.234884      0.234884       148.856       149.091    
   9  0.169450      -1.77520      -1.34350       1.34350       148.507       149.851    
  10  0.474919     -0.744612     -0.563536      0.563536       148.996       149.559    
  11  0.843615     -0.170059     -0.128703      0.128703       149.126       149.254    
  12  0.876719     -0.131569     -0.995736E-01  0.995736E-01   148.548       148.648    
  13  0.190440E-01  -3.96100      -2.99776       2.99776       149.129       152.127    
  14  0.303072      -1.19379     -0.903479      0.903479       149.307       150.210    
  15  0.469764     -0.755525     -0.571795      0.571795       149.281       149.852    
  16  0.571967     -0.558673     -0.422814      0.422814       149.272       149.695    
  17  0.672551E-01  -2.69926      -2.04285       2.04285       149.274       151.317    
  18  0.255734      -1.36362      -1.03201       1.03201       149.762       150.794    
  19  0.984593E-01  -2.31811      -1.75439       1.75439       149.818       151.573    
  20  0.106790      -2.23689      -1.69292       1.69292       149.772       151.465    
  21  0.569872     -0.562343     -0.425592      0.425592       150.039       150.465    
  22  0.535167     -0.625176     -0.473144      0.473144       148.868       149.341    
  23  0.874592     -0.133997     -0.101412      0.101412       150.072       150.173    
  24  0.437299     -0.827137     -0.625992      0.625992       150.127       150.753    
  25  0.859028     -0.151954     -0.115001      0.115001       148.964       149.079    
  26  0.766029     -0.266535     -0.201718      0.201718       149.580       149.782    
  27  0.702099     -0.353680     -0.267672      0.267672       150.154       150.421    
  28  0.161598      -1.82264      -1.37941       1.37941       150.497       151.877    
  29  0.212172      -1.55036      -1.17334       1.17334       150.536       151.709    
  30  0.776087     -0.253491     -0.191846      0.191846       148.380       148.571    
  31  0.346547      -1.05974     -0.802028      0.802028       149.969       150.771    
  32  0.175995      -1.73730      -1.31482       1.31482       150.890       152.205    
  33  0.310769      -1.16870     -0.884497      0.884497       150.944       151.829    
  34  0.716675     -0.333133     -0.252121      0.252121       150.349       150.601    
  35  0.977373E-01  -2.32547      -1.75996       1.75996       148.637       150.397    
  36  0.191888      -1.65084      -1.24939       1.24939       149.608       150.857    
  37  0.323564      -1.12836     -0.853963      0.853963       151.180       152.034    
  38  0.289367      -1.24006     -0.938499      0.938499       151.078       152.017    
  39  0.209149      -1.56471      -1.18420       1.18420       151.287       152.471    
  40  0.879527     -0.128371     -0.971537E-01  0.971537E-01   150.469       150.566    
  41  0.148061      -1.91013      -1.44562       1.44562       151.361       152.807    
  42  0.432943     -0.837149     -0.633570      0.633570       151.560       152.193    
  43  0.558965     -0.581668     -0.440217      0.440217       151.216       151.656    
  44  0.496743     -0.699682     -0.529532      0.529532       150.797       151.327    
  45  0.791585     -0.233718     -0.176882      0.176882       151.607       151.784    
  46  0.394764E-01  -3.23205      -2.44608       2.44608       151.692       154.138    
  47  0.665239E-01  -2.71019      -2.05112       2.05112       151.389       153.441    
  48  0.309823      -1.17176     -0.886806      0.886806       151.041       151.928    
  49  0.121985      -2.10386      -1.59224       1.59224       151.177       152.769    
  50  0.533360     -0.628558     -0.475704      0.475704       152.040       152.516    
  51  0.699667     -0.357151     -0.270298      0.270298       149.932       150.202    
  52  0.824712     -0.192721     -0.145855      0.145855       152.198       152.344    
  53  0.751113     -0.286199     -0.216601      0.216601       150.503       150.719    
  54  0.625810     -0.468709     -0.354727      0.354727       151.126       151.481    
  55  0.340567      -1.07714     -0.815202      0.815202       152.501       153.316    
  56  0.649406     -0.431697     -0.326716      0.326716       152.477       152.804    
  57  0.596679E-01  -2.81896      -2.13344       2.13344       151.619       153.752    
  58  0.104669      -2.25695      -1.70810       1.70810       151.313       153.021    
  59  0.870639     -0.138528     -0.104840      0.104840       152.547       152.652    
  60  0.199273      -1.61308      -1.22081       1.22081       152.374       153.595    
  61  0.714965     -0.335521     -0.253928      0.253928       152.720       152.974    
  62  0.431641     -0.840162     -0.635850      0.635850       151.846       152.482    
  63  0.208886      -1.56597      -1.18515       1.18515       152.100       153.285    
  64  0.859431     -0.151485     -0.114647      0.114647       153.409       153.524    
  65  0.256734      -1.35972      -1.02906       1.02906       152.441       153.470    
  66  0.243508      -1.41261      -1.06909       1.06909       153.690       154.759    
  67  0.628736     -0.464044     -0.351197      0.351197       153.419       153.770    
  68  0.392666     -0.934795     -0.707470      0.707470       153.530       154.238    
  69  0.758215     -0.276788     -0.209478      0.209478       152.640       152.850    
  70  0.868588     -0.140886     -0.106625      0.106625       152.254       152.361    
  71  0.875499E-01  -2.43555      -1.84327       1.84327       153.572       155.416    
  72  0.324605      -1.12515     -0.851531      0.851531       154.510       155.362    
  73  0.443187     -0.813764     -0.615871      0.615871       154.734       155.350    
  74  0.467423E-01  -3.06311      -2.31822       2.31822       152.717       155.035    
  75  0.483319     -0.727078     -0.550266      0.550266       150.015       150.565    
loop,thermsimp(1:2)       81   1.17360       1.92035    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    529        150.15          0.87          1.15         25.24          0.25          0.06         27.56
Just calling func    0   0         27.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       81
neval is:      528
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       82
neval is:      528


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      528     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.879977     -0.127859     -0.967660E-01  0.967660E-01   148.234       148.331    
   2  0.617618     -0.481886     -0.364700      0.364700       148.380       148.744    
   3  0.816358E-01  -2.50549      -1.89620       1.89620       148.548       150.444    
   4  0.265705      -1.32537      -1.00306       1.00306       148.964       149.967    
   5  0.156102      -1.85725      -1.40560       1.40560       148.856       150.261    
   6  0.155187      -1.86313      -1.41005       1.41005       148.541       149.951    
   7  0.650347     -0.430249     -0.325620      0.325620       148.625       148.951    
   8  0.801207     -0.221636     -0.167738      0.167738       149.126       149.293    
   9  0.935908     -0.662378E-01 -0.501300E-01  0.501300E-01   148.113       148.163    
  10  0.764783E-01  -2.57075      -1.94559       1.94559       148.868       150.814    
  11  0.819025     -0.199640     -0.151091      0.151091       148.996       149.147    
  12  0.175545      -1.73986      -1.31676       1.31676       149.272       150.589    
  13  0.945804     -0.557201E-01 -0.421700E-01  0.421700E-01   149.580       149.622    
  14  0.254592      -1.36809      -1.03540       1.03540       148.507       149.543    
  15  0.969942     -0.305188E-01 -0.230972E-01  0.230972E-01   149.281       149.304    
  16  0.751504     -0.285679     -0.216207      0.216207       148.749       148.965    
  17  0.129569E-01  -4.34612      -3.28923       3.28923       150.072       153.361    
  18  0.591393     -0.525275     -0.397537      0.397537       149.932       150.329    
  19  0.994087     -0.593042E-02 -0.448825E-02  0.448825E-02   149.307       149.311    
  20  0.697601     -0.360108     -0.272536      0.272536       148.637       148.909    
  21  0.633469     -0.456544     -0.345521      0.345521       150.154       150.499    
  22  0.391583     -0.937557     -0.709560      0.709560       148.623       149.333    
  23  0.599575     -0.511533     -0.387138      0.387138       150.039       150.427    
  24  0.481571     -0.730701     -0.553008      0.553008       148.549       149.102    
  25  0.420827     -0.865533     -0.655052      0.655052       150.015       150.670    
  26  0.254691      -1.36770      -1.03510       1.03510       150.469       151.504    
  27  0.950472     -0.507971E-01 -0.384442E-01  0.384442E-01   150.349       150.388    
  28  0.113706      -2.17414      -1.64543       1.64543       150.503       152.148    
  29  0.172661      -1.75643      -1.32930       1.32930       150.127       151.456    
  30  0.718739     -0.330257     -0.249945      0.249945       149.969       150.218    
  31  0.564748     -0.571375     -0.432427      0.432427       149.762       150.195    
  32  0.638696     -0.448327     -0.339302      0.339302       149.608       149.947    
  33  0.342849      -1.07047     -0.810149      0.810149       149.274       150.084    
  34  0.401270     -0.913121     -0.691067      0.691067       150.797       151.488    
  35  0.918599     -0.849058E-01 -0.642583E-01  0.642583E-01   149.772       149.837    
  36  0.566118     -0.568953     -0.430594      0.430594       151.126       151.557    
  37  0.187554      -1.67369      -1.26668       1.26668       149.818       151.085    
  38  0.749582E-01  -2.59082      -1.96078       1.96078       151.216       153.177    
  39  0.286085      -1.25147     -0.947134      0.947134       150.536       151.483    
  40  0.412337     -0.885914     -0.670476      0.670476       151.607       152.278    
  41  0.455811     -0.785678     -0.594615      0.594615       150.944       151.539    
  42  0.676067     -0.391462     -0.296266      0.296266       150.497       150.793    
  43  0.452490     -0.792991     -0.600150      0.600150       151.041       151.641    
  44  0.131068E-01  -4.33463      -3.28052       3.28052       151.078       154.359    
  45  0.880822     -0.126900     -0.960402E-01  0.960402E-01   151.180       151.276    
  46  0.381257E-01  -3.26687      -2.47242       2.47242       149.129       151.602    
  47  0.285013      -1.25522     -0.949974      0.949974       151.560       152.510    
  48  0.279597      -1.27441     -0.964494      0.964494       150.890       151.854    
  49  0.652608     -0.426779     -0.322994      0.322994       152.198       152.521    
  50  0.300945      -1.20083     -0.908809      0.908809       152.254       153.163    
  51  0.961982     -0.387594E-01 -0.293338E-01  0.293338E-01   151.287       151.316    
  52  0.729062E-01  -2.61858      -1.98179       1.98179       151.846       153.828    
  53  0.109451      -2.21228      -1.67429       1.67429       152.040       153.714    
  54  0.681950     -0.382798     -0.289709      0.289709       152.547       152.837    
  55  0.897690     -0.107930     -0.816834E-01  0.816834E-01   151.177       151.259    
  56  0.961917     -0.388267E-01 -0.293847E-01  0.293847E-01   152.477       152.507    
  57  0.466988E-01  -3.06404      -2.31892       2.31892       151.361       153.680    
  58  0.196480      -1.62720      -1.23149       1.23149       152.640       153.872    
  59  0.306123      -1.18377     -0.895899      0.895899       152.720       153.616    
  60  0.973839     -0.265094E-01 -0.200628E-01  0.200628E-01   151.313       151.333    
  61  0.149937      -1.89754      -1.43609       1.43609       152.100       153.536    
  62  0.583998     -0.537858     -0.407061      0.407061       152.501       152.908    
  63  0.574190     -0.554795     -0.419879      0.419879       151.389       151.809    
  64  0.974106E-01  -2.32882      -1.76249       1.76249       152.441       154.203    
  65  0.523014     -0.648148     -0.490530      0.490530       153.409       153.900    
  66  0.907528     -0.970313E-01 -0.734351E-01  0.734351E-01   152.374       152.447    
  67  0.525085     -0.644196     -0.487539      0.487539       151.619       152.106    
  68  0.758972     -0.275790     -0.208723      0.208723       153.419       153.628    
  69  0.796588     -0.227418     -0.172114      0.172114       151.692       151.864    
  70  0.124705      -2.08181      -1.57555       1.57555       153.530       155.106    
  71  0.557577E-01  -2.88674      -2.18474       2.18474       153.690       155.875    
  72  0.379458     -0.969011     -0.733365      0.733365       152.717       153.451    
  73  0.916202E-01  -2.39010      -1.80887       1.80887       154.734       156.543    
  74  0.654324     -0.424153     -0.321007      0.321007       154.510       154.831    
  75  0.905714     -0.990319E-01 -0.749491E-01  0.749491E-01   150.153       150.228    
loop,thermsimp(1:2)       82  0.967660E-01  0.364700    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    530        154.38          0.87          1.15         25.25          0.10          0.06         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       82
neval is:      529
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       83
neval is:      529


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      529     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.552115     -0.593999     -0.449549      0.449549       148.113       148.562    
   2  0.319086      -1.14229     -0.864509      0.864509       148.234       149.099    
   3  0.987809     -0.122656E-01 -0.928283E-02  0.928283E-02   148.380       148.389    
   4  0.730684     -0.313774     -0.237470      0.237470       148.637       148.874    
   5  0.330217      -1.10801     -0.838559      0.838559       148.625       149.464    
   6  0.228208      -1.47750      -1.11820       1.11820       148.749       149.867    
   7  0.531449     -0.632148     -0.478421      0.478421       148.549       149.027    
   8  0.291369      -1.23317     -0.933282      0.933282       148.996       149.929    
   9  0.868373     -0.141133     -0.106812      0.106812       149.126       149.232    
  10  0.750840     -0.286563     -0.216876      0.216876       149.281       149.498    
  11  0.922302     -0.808828E-01 -0.612136E-01  0.612136E-01   149.307       149.368    
  12  0.835004     -0.180318     -0.136468      0.136468       148.623       148.760    
  13  0.839915     -0.174454     -0.132030      0.132030       148.507       148.639    
  14  0.436966     -0.827899     -0.626569      0.626569       149.580       150.207    
  15  0.960108     -0.407096E-01 -0.308098E-01  0.308098E-01   149.772       149.803    
  16  0.651732     -0.428122     -0.324010      0.324010       149.608       149.932    
  17  0.309700      -1.17215     -0.887105      0.887105       148.541       149.428    
  18  0.526921     -0.640704     -0.484897      0.484897       148.964       149.449    
  19  0.853737     -0.158132     -0.119677      0.119677       149.274       149.393    
  20  0.266678      -1.32171      -1.00030       1.00030       149.762       150.763    
  21  0.299571      -1.20541     -0.912273      0.912273       149.969       150.881    
  22  0.846742     -0.166360     -0.125904      0.125904       150.153       150.279    
  23  0.818359     -0.200455     -0.151708      0.151708       148.856       149.007    
  24  0.234883      -1.44867      -1.09638       1.09638       149.932       151.028    
  25  0.986151     -0.139454E-01 -0.105541E-01  0.105541E-01   150.349       150.360    
  26  0.974313     -0.260229E-01 -0.196946E-01  0.196946E-01   150.039       150.059    
  27  0.620281E-01  -2.78017      -2.10408       2.10408       148.548       150.652    
  28  0.368305E-01  -3.30143      -2.49858       2.49858       150.154       152.652    
  29  0.111356      -2.19502      -1.66123       1.66123       149.272       150.934    
  30  0.617410     -0.482223     -0.364955      0.364955       150.015       150.380    
  31  0.275412      -1.28949     -0.975908      0.975908       150.497       151.473    
  32  0.173447      -1.75188      -1.32586       1.32586       148.868       150.194    
  33  0.570479     -0.561280     -0.424787      0.424787       149.818       150.243    
  34  0.359525      -1.02297     -0.774204      0.774204       151.177       151.951    
  35  0.933691     -0.686097E-01 -0.519251E-01  0.519251E-01   151.180       151.232    
  36  0.510279     -0.672797     -0.509185      0.509185       151.287       151.796    
  37  0.347312      -1.05753     -0.800360      0.800360       151.313       152.113    
  38  0.491006E-01  -3.01388      -2.28096       2.28096       150.127       152.408    
  39  0.410429     -0.890552     -0.673986      0.673986       150.536       151.210    
  40  0.344238      -1.06642     -0.807089      0.807089       150.797       151.604    
  41  0.472799     -0.749085     -0.566921      0.566921       150.469       151.035    
  42  0.785791     -0.241064     -0.182442      0.182442       150.944       151.127    
  43  0.925744     -0.771577E-01 -0.583943E-01  0.583943E-01   151.126       151.184    
  44  0.529151     -0.636482     -0.481701      0.481701       149.129       149.611    
  45  0.815207     -0.204313     -0.154628      0.154628       151.041       151.196    
  46  0.825373     -0.191920     -0.145248      0.145248       151.389       151.535    
  47  0.876860     -0.131408     -0.994521E-01  0.994521E-01   150.890       150.989    
  48  0.579930     -0.544847     -0.412351      0.412351       151.692       152.104    
  49  0.593104     -0.522386     -0.395351      0.395351       151.619       152.014    
  50  0.376238     -0.977534     -0.739816      0.739816       150.503       151.242    
  51  0.987748     -0.123280E-01 -0.933002E-02  0.933002E-02   151.607       151.617    
  52  0.985743     -0.143594E-01 -0.108675E-01  0.108675E-01   152.374       152.385    
  53  0.991599     -0.843651E-02 -0.638490E-02  0.638490E-02   152.477       152.484    
  54  0.497863     -0.697430     -0.527828      0.527828       151.560       152.088    
  55  0.787530E-01  -2.54144      -1.92341       1.92341       152.198       154.122    
  56  0.232896      -1.45716      -1.10281       1.10281       152.547       153.650    
  57  0.971733     -0.286747E-01 -0.217015E-01  0.217015E-01   152.501       152.523    
  58  0.434796     -0.832877     -0.630337      0.630337       152.254       152.885    
  59  0.643441     -0.440925     -0.333700      0.333700       151.216       151.550    
  60  0.681166     -0.383949     -0.290580      0.290580       150.072       150.362    
  61  0.579011     -0.546434     -0.413551      0.413551       152.717       153.131    
  62  0.944457     -0.571450E-01 -0.432484E-01  0.432484E-01   152.100       152.144    
  63  0.712041     -0.339620     -0.257031      0.257031       152.720       152.977    
  64  0.352727      -1.04206     -0.788650      0.788650       153.419       154.208    
  65  0.661083     -0.413876     -0.313229      0.313229       151.361       151.674    
  66  0.990747     -0.929653E-02 -0.703579E-02  0.703579E-02   152.040       152.047    
  67  0.900074     -0.105278     -0.796766E-01  0.796766E-01   151.846       151.926    
  68  0.695351     -0.363339     -0.274981      0.274981       152.640       152.915    
  69  0.878231     -0.129846     -0.982695E-01  0.982695E-01   153.409       153.508    
  70  0.120893      -2.11285      -1.59904       1.59904       152.441       154.040    
  71  0.536886     -0.621970     -0.470718      0.470718       151.078       151.549    
  72  0.578968     -0.546509     -0.413608      0.413608       154.510       154.924    
  73  0.784254     -0.243023     -0.183924      0.183924       153.530       153.714    
  74  0.482308     -0.729172     -0.551851      0.551851       153.690       154.242    
  75  0.154258      -1.86913      -1.41459       1.41459       154.382       155.797    
loop,thermsimp(1:2)       83  0.449549      0.864509    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    531        154.73          0.87          1.15         25.21          0.12          0.06         27.41
Just calling func    0   0         27.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       83
neval is:      530
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       84
neval is:      530


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      530     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379478     -0.968959     -0.733326      0.733326       148.380       149.113    
   2  0.957028     -0.439225E-01 -0.332413E-01  0.332413E-01   148.113       148.146    
   3  0.360821      -1.01937     -0.771481      0.771481       148.507       149.279    
   4  0.115816      -2.15575      -1.63151       1.63151       148.623       150.255    
   5  0.739959E-01  -2.60375      -1.97056       1.97056       148.637       150.607    
   6  0.618280     -0.480813     -0.363888      0.363888       148.856       149.220    
   7  0.885995     -0.121044     -0.916081E-01  0.916081E-01   148.549       148.640    
   8  0.635424     -0.453462     -0.343189      0.343189       148.234       148.578    
   9  0.807967E-01  -2.51582      -1.90402       1.90402       149.126       151.030    
  10  0.741317     -0.299327     -0.226536      0.226536       149.307       149.533    
  11  0.226644      -1.48438      -1.12340       1.12340       149.274       150.397    
  12  0.538747     -0.618510     -0.468100      0.468100       148.541       149.009    
  13  0.161559      -1.82289      -1.37959       1.37959       148.964       150.344    
  14  0.460148     -0.776207     -0.587448      0.587448       148.625       149.213    
  15  0.747711     -0.290739     -0.220036      0.220036       149.281       149.501    
  16  0.780108E-01  -2.55091      -1.93057       1.93057       149.129       151.060    
  17  0.966572     -0.339994E-01 -0.257314E-01  0.257314E-01   149.772       149.798    
  18  0.724118     -0.322802     -0.244302      0.244302       148.749       148.993    
  19  0.558090     -0.583236     -0.441403      0.441403       148.996       149.437    
  20  0.646658     -0.435938     -0.329926      0.329926       149.608       149.938    
  21  0.667537     -0.404161     -0.305876      0.305876       150.039       150.345    
  22  0.526422     -0.641653     -0.485615      0.485615       148.868       149.354    
  23  0.429996     -0.843979     -0.638739      0.638739       149.580       150.219    
  24  0.795573     -0.228692     -0.173079      0.173079       149.818       149.991    
  25  0.102698      -2.27597      -1.72249       1.72249       150.153       151.875    
  26  0.727545     -0.318079     -0.240728      0.240728       150.349       150.590    
  27  0.266601      -1.32200      -1.00052       1.00052       150.072       151.072    
  28  0.867357     -0.142304     -0.107699      0.107699       150.015       150.122    
  29  0.850002     -0.162516     -0.122995      0.122995       148.548       148.671    
  30  0.495621     -0.701943     -0.531243      0.531243       149.762       150.294    
  31  0.321507      -1.13474     -0.858789      0.858789       149.969       150.827    
  32  0.250033E-01  -3.68875      -2.79171       2.79171       149.272       152.064    
  33  0.191559      -1.65256      -1.25069       1.25069       150.890       152.140    
  34  0.256845E-01  -3.66187      -2.77137       2.77137       149.932       152.703    
  35  0.116644E-01  -4.45121      -3.36876       3.36876       150.469       153.837    
  36  0.467566     -0.760214     -0.575344      0.575344       150.944       151.519    
  37  0.267525      -1.31854     -0.997898      0.997898       151.126       152.124    
  38  0.657917     -0.418676     -0.316862      0.316862       151.041       151.358    
  39  0.396760     -0.924425     -0.699622      0.699622       150.536       151.236    
  40  0.296989E-01  -3.51664      -2.66146       2.66146       151.180       153.841    
  41  0.609352     -0.495360     -0.374897      0.374897       150.503       150.877    
  42  0.472240     -0.750268     -0.567816      0.567816       150.497       151.065    
  43  0.537782     -0.620302     -0.469456      0.469456       151.389       151.859    
  44  0.472387     -0.749957     -0.567581      0.567581       151.078       151.646    
  45  0.906366     -0.983121E-01 -0.744044E-01  0.744044E-01   151.216       151.291    
  46  0.541294     -0.613793     -0.464530      0.464530       150.797       151.262    
  47  0.101850      -2.28426      -1.72877       1.72877       151.607       153.336    
  48  0.620195     -0.477721     -0.361548      0.361548       151.361       151.723    
  49  0.130970      -2.03278      -1.53845       1.53845       151.287       152.825    
  50  0.740802E-01  -2.60261      -1.96970       1.96970       151.846       153.816    
  51  0.515656     -0.662314     -0.501252      0.501252       151.177       151.678    
  52  0.280360      -1.27168     -0.962431      0.962431       151.619       152.581    
  53  0.469428E-01  -3.05882      -2.31497       2.31497       152.040       154.355    
  54  0.836383     -0.178668     -0.135219      0.135219       151.560       151.695    
  55  0.635255     -0.453729     -0.343391      0.343391       151.692       152.036    
  56  0.186177E-01  -3.98364      -3.01489       3.01489       151.313       154.328    
  57  0.818627     -0.200127     -0.151460      0.151460       152.100       152.252    
  58  0.426336     -0.852527     -0.645208      0.645208       152.374       153.019    
  59  0.511854     -0.669715     -0.506853      0.506853       150.127       150.634    
  60  0.339186      -1.08121     -0.818276      0.818276       152.477       153.295    
  61  0.524623     -0.645076     -0.488206      0.488206       152.501       152.989    
  62  0.282970      -1.26242     -0.955419      0.955419       150.154       151.109    
  63  0.223049      -1.50036      -1.13550       1.13550       152.254       153.390    
  64  0.916670     -0.870079E-01 -0.658492E-01  0.658492E-01   152.640       152.706    
  65  0.890469     -0.116007     -0.877966E-01  0.877966E-01   152.720       152.808    
  66  0.896449     -0.109314     -0.827310E-01  0.827310E-01   152.717       152.800    
  67  0.919509     -0.839157E-01 -0.635089E-01  0.635089E-01   153.409       153.473    
  68  0.569393     -0.563185     -0.426229      0.426229       152.547       152.974    
  69  0.151053      -1.89012      -1.43048       1.43048       153.530       154.961    
  70  0.437803     -0.825985     -0.625121      0.625121       152.441       153.066    
  71  0.179599      -1.71703      -1.29948       1.29948       152.198       153.498    
  72  0.848049     -0.164816     -0.124736      0.124736       153.419       153.544    
  73  0.969658     -0.308120E-01 -0.233191E-01  0.233191E-01   153.690       153.714    
  74  0.776609     -0.252818     -0.191337      0.191337       154.510       154.702    
  75  0.481870     -0.730080     -0.552538      0.552538       154.734       155.287    
loop,thermsimp(1:2)       84  0.733326      0.332413E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    532        154.38          0.87          1.16         25.20          0.15          0.05         27.43
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       84
neval is:      531
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       85
neval is:      531


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      531     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.844994     -0.168425     -0.127467      0.127467       148.113       148.240    
   2  0.449571E-01  -3.10205      -2.34769       2.34769       148.234       150.582    
   3  0.479268     -0.735496     -0.556637      0.556637       148.549       149.105    
   4  0.429117     -0.846026     -0.640288      0.640288       148.548       149.188    
   5  0.188230      -1.67009      -1.26395       1.26395       148.749       150.013    
   6  0.299420      -1.20591     -0.912653      0.912653       148.541       149.454    
   7  0.942772     -0.589312E-01 -0.446002E-01  0.446002E-01   148.380       148.424    
   8  0.802892E-01  -2.52212      -1.90879       1.90879       148.625       150.534    
   9  0.356076      -1.03261     -0.781499      0.781499       148.856       149.637    
  10  0.599935     -0.510933     -0.386684      0.386684       148.507       148.894    
  11  0.632404     -0.458227     -0.346795      0.346795       148.868       149.215    
  12  0.707791     -0.345606     -0.261561      0.261561       148.996       149.257    
  13  0.896171     -0.109624     -0.829653E-01  0.829653E-01   149.281       149.364    
  14  0.953459     -0.476587E-01 -0.360690E-01  0.360690E-01   149.307       149.343    
  15  0.875614     -0.132830     -0.100528      0.100528       149.772       149.873    
  16  0.371483     -0.990253     -0.749442      0.749442       149.608       150.357    
  17  0.518071     -0.657644     -0.497717      0.497717       149.818       150.316    
  18  0.643549     -0.440757     -0.333573      0.333573       150.015       150.348    
  19  0.313409      -1.16025     -0.878095      0.878095       149.580       150.458    
  20  0.264619      -1.32946      -1.00616       1.00616       148.623       149.630    
  21  0.259435      -1.34925      -1.02114       1.02114       149.762       150.783    
  22  0.526335     -0.641817     -0.485739      0.485739       148.964       149.450    
  23  0.972976E-01  -2.32998      -1.76337       1.76337       150.039       151.803    
  24  0.511532     -0.670346     -0.507330      0.507330       149.274       149.781    
  25  0.117109      -2.14465      -1.62311       1.62311       150.349       151.972    
  26  0.211716      -1.55251      -1.17497       1.17497       148.637       149.812    
  27  0.747149     -0.291491     -0.220606      0.220606       150.127       150.347    
  28  0.545786     -0.605529     -0.458275      0.458275       149.969       150.427    
  29  0.614707     -0.486610     -0.368276      0.368276       150.503       150.871    
  30  0.614766     -0.486514     -0.368203      0.368203       149.126       149.494    
  31  0.334093      -1.09634     -0.829728      0.829728       149.129       149.959    
  32  0.272402      -1.30048     -0.984223      0.984223       150.497       151.481    
  33  0.777384     -0.251821     -0.190583      0.190583       150.072       150.262    
  34  0.381316     -0.964128     -0.729670      0.729670       150.154       150.883    
  35  0.614497     -0.486952     -0.368534      0.368534       150.536       150.905    
  36  0.537037     -0.621687     -0.470504      0.470504       150.797       151.267    
  37  0.117965      -2.13737      -1.61760       1.61760       151.216       152.834    
  38  0.131038      -2.03226      -1.53806       1.53806       151.041       152.579    
  39  0.750151E-01  -2.59007      -1.96021       1.96021       150.944       152.904    
  40  0.173299      -1.75273      -1.32650       1.32650       151.078       152.405    
  41  0.313111      -1.16120     -0.878815      0.878815       151.177       152.056    
  42  0.867565     -0.142065     -0.107517      0.107517       151.560       151.667    
  43  0.974158E-01  -2.32877      -1.76245       1.76245       151.361       153.124    
  44  0.856967     -0.154356     -0.116820      0.116820       151.389       151.506    
  45  0.210880      -1.55647      -1.17796       1.17796       150.153       151.331    
  46  0.789931     -0.235810     -0.178465      0.178465       151.692       151.871    
  47  0.249169E-01  -3.69221      -2.79433       2.79433       149.272       152.067    
  48  0.721362     -0.326614     -0.247188      0.247188       151.126       151.373    
  49  0.636302     -0.452082     -0.342144      0.342144       150.890       151.232    
  50  0.719367     -0.329384     -0.249284      0.249284       152.100       152.350    
  51  0.838578E-01  -2.47863      -1.87587       1.87587       151.619       153.494    
  52  0.699941     -0.356759     -0.270002      0.270002       149.932       150.202    
  53  0.702066     -0.353728     -0.267708      0.267708       152.640       152.908    
  54  0.635085     -0.453996     -0.343592      0.343592       152.717       153.061    
  55  0.372725     -0.986914     -0.746915      0.746915       152.720       153.467    
  56  0.943328     -0.583412E-01 -0.441537E-01  0.441537E-01   151.287       151.331    
  57  0.479975E-01  -3.03661      -2.29816       2.29816       152.547       154.845    
  58  0.436429     -0.829129     -0.627500      0.627500       152.501       153.128    
  59  0.311463E-01  -3.46906      -2.62545       2.62545       152.374       154.999    
  60  0.455211     -0.786994     -0.595611      0.595611       152.441       153.037    
  61  0.555598     -0.587711     -0.444790      0.444790       152.477       152.922    
  62  0.328767      -1.11240     -0.841888      0.841888       151.607       152.449    
  63  0.863797     -0.146418     -0.110812      0.110812       152.254       152.365    
  64  0.867080     -0.142624     -0.107940      0.107940       153.409       153.517    
  65  0.143634E-01  -4.24307      -3.21123       3.21123       152.198       155.409    
  66  0.965088     -0.355364E-01 -0.268946E-01  0.268946E-01   153.419       153.446    
  67  0.809979     -0.210747     -0.159497      0.159497       153.690       153.850    
  68  0.854006     -0.157817     -0.119438      0.119438       151.846       151.965    
  69  0.130906      -2.03327      -1.53882       1.53882       150.469       152.007    
  70  0.975981     -0.243125E-01 -0.184002E-01  0.184002E-01   151.180       151.198    
  71  0.309440      -1.17299     -0.887740      0.887740       151.313       152.200    
  72  0.730709     -0.313741     -0.237445      0.237445       152.040       152.277    
  73  0.985979     -0.141205E-01 -0.106866E-01  0.106866E-01   154.510       154.521    
  74  0.139419      -1.97027      -1.49114       1.49114       153.530       155.021    
  75  0.560592     -0.578762     -0.438017      0.438017       154.382       154.820    
loop,thermsimp(1:2)       85  0.127467       2.34769    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    533        151.99          0.86          1.15         25.32          0.37          0.05         27.76
Just calling func    0   0         27.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    151.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       85
neval is:      532
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       86
neval is:      532


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      532     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245460E-01  -3.70721      -2.80568       2.80568       148.113       150.918    
   2  0.230091      -1.46928      -1.11198       1.11198       148.380       149.492    
   3  0.635055     -0.454044     -0.343629      0.343629       148.507       148.851    
   4  0.105077      -2.25307      -1.70516       1.70516       148.549       150.254    
   5  0.191095      -1.65498      -1.25252       1.25252       148.548       149.800    
   6  0.795443     -0.228856     -0.173202      0.173202       148.868       149.041    
   7  0.317275      -1.14799     -0.868816      0.868816       148.996       149.865    
   8  0.532563     -0.630054     -0.476836      0.476836       149.307       149.783    
   9  0.908868E-01  -2.39814      -1.81496       1.81496       149.281       151.096    
  10  0.865077E-01  -2.44752      -1.85233       1.85233       148.964       150.816    
  11  0.857681E-01  -2.45611      -1.85883       1.85883       148.541       150.400    
  12  0.542418     -0.611718     -0.462960      0.462960       149.126       149.588    
  13  0.225242      -1.49058      -1.12810       1.12810       148.623       149.751    
  14  0.855554E-01  -2.45859      -1.86071       1.86071       148.856       150.716    
  15  0.702960E-01  -2.65504      -2.00938       2.00938       149.274       151.283    
  16  0.660623     -0.414572     -0.313756      0.313756       148.637       148.951    
  17  0.564351     -0.572079     -0.432960      0.432960       149.772       150.205    
  18  0.761763     -0.272120     -0.205946      0.205946       149.129       149.335    
  19  0.645184     -0.438219     -0.331653      0.331653       148.749       149.081    
  20  0.398573     -0.919864     -0.696170      0.696170       149.932       150.628    
  21  0.256272E-01  -3.66410      -2.77306       2.77306       150.072       152.845    
  22  0.258189      -1.35406      -1.02478       1.02478       149.818       150.843    
  23  0.797366     -0.226442     -0.171375      0.171375       150.127       150.298    
  24  0.119239E-01  -4.42921      -3.35211       3.35211       150.015       153.367    
  25  0.257284E-01  -3.66016      -2.77008       2.77008       149.608       152.378    
  26  0.746847     -0.291894     -0.220911      0.220911       149.969       150.189    
  27  0.624240     -0.471220     -0.356628      0.356628       149.580       149.937    
  28  0.655139     -0.422908     -0.320064      0.320064       148.625       148.945    
  29  0.281457      -1.26777     -0.959475      0.959475       148.234       149.194    
  30  0.944371     -0.572367E-01 -0.433178E-01  0.433178E-01   149.762       149.806    
  31  0.614735     -0.486563     -0.368240      0.368240       150.503       150.871    
  32  0.455809     -0.785681     -0.594617      0.594617       150.154       150.748    
  33  0.429494     -0.845147     -0.639623      0.639623       150.536       151.176    
  34  0.656424     -0.420948     -0.318581      0.318581       151.180       151.498    
  35  0.551886     -0.594413     -0.449863      0.449863       150.890       151.340    
  36  0.882055     -0.125501     -0.949818E-01  0.949818E-01   150.797       150.892    
  37  0.585710E-01  -2.83752      -2.14748       2.14748       150.153       152.300    
  38  0.196796      -1.62559      -1.23027       1.23027       151.287       152.517    
  39  0.479291     -0.735447     -0.556600      0.556600       151.126       151.683    
  40  0.107404      -2.23116      -1.68858       1.68858       150.497       152.186    
  41  0.360460      -1.02037     -0.772237      0.772237       151.389       152.162    
  42  0.952241     -0.489375E-01 -0.370368E-01  0.370368E-01   151.560       151.597    
  43  0.791501     -0.233824     -0.176962      0.176962       150.039       150.216    
  44  0.253666      -1.37174      -1.03816       1.03816       151.692       152.730    
  45  0.936914     -0.651638E-01 -0.493171E-01  0.493171E-01   151.846       151.895    
  46  0.978059     -0.221850E-01 -0.167900E-01  0.167900E-01   150.349       150.366    
  47  0.226070E-01  -3.78950      -2.86796       2.86796       150.469       153.337    
  48  0.211122      -1.55532      -1.17709       1.17709       151.177       152.354    
  49  0.665051     -0.407891     -0.308700      0.308700       149.272       149.581    
  50  0.600632     -0.509773     -0.385806      0.385806       151.313       151.698    
  51  0.924509     -0.784926E-01 -0.594046E-01  0.594046E-01   152.040       152.099    
  52  0.935977     -0.661649E-01 -0.500748E-01  0.500748E-01   152.100       152.150    
  53  0.166172      -1.79473      -1.35829       1.35829       152.254       153.613    
  54  0.327601      -1.11596     -0.844577      0.844577       151.078       151.923    
  55  0.233359      -1.45518      -1.10130       1.10130       151.607       152.709    
  56  0.322509E-01  -3.43421      -2.59907       2.59907       151.041       153.640    
  57  0.465692     -0.764231     -0.578384      0.578384       151.216       151.795    
  58  0.429929     -0.844135     -0.638857      0.638857       150.944       151.583    
  59  0.632273     -0.458435     -0.346952      0.346952       152.640       152.987    
  60  0.861580     -0.148988     -0.112757      0.112757       152.477       152.590    
  61  0.602536     -0.506607     -0.383410      0.383410       152.441       152.824    
  62  0.947552     -0.538738E-01 -0.407726E-01  0.407726E-01   152.717       152.758    
  63  0.528730     -0.637277     -0.482303      0.482303       151.361       151.844    
  64  0.962649     -0.380659E-01 -0.288090E-01  0.288090E-01   152.501       152.530    
  65  0.390604     -0.940060     -0.711455      0.711455       153.419       154.131    
  66  0.135054      -2.00208      -1.51521       1.51521       152.720       154.236    
  67  0.703716     -0.351381     -0.265931      0.265931       151.619       151.885    
  68  0.107815      -2.22734      -1.68569       1.68569       153.409       155.095    
  69  0.493969     -0.705282     -0.533770      0.533770       153.690       154.224    
  70  0.914499     -0.893788E-01 -0.676435E-01  0.676435E-01   154.510       154.578    
  71  0.693164     -0.366489     -0.277365      0.277365       154.382       154.660    
  72  0.580724E-01  -2.84606      -2.15395       2.15395       152.547       154.701    
  73  0.955483     -0.455379E-01 -0.344639E-01  0.344639E-01   152.374       152.408    
  74  0.421986     -0.862782     -0.652970      0.652970       153.530       154.183    
  75  0.449612     -0.799371     -0.604978      0.604978       151.990       152.595    
loop,thermsimp(1:2)       86   2.80568       1.11198    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    534        155.10          0.86          1.15         25.25          0.35          0.05         27.65
Just calling func    0   0         27.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    535        149.01          0.86          1.14         25.27          0.14          0.05         27.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    149.01
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       86
neval is:      534
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       87
neval is:      534


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      534     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.785570     -0.241345     -0.182654      0.182654       148.507       148.690    
   2  0.738730E-02  -4.90799      -3.71446       3.71446       148.625       152.340    
   3  0.167821      -1.78486      -1.35081       1.35081       148.637       149.988    
   4  0.136502      -1.99142      -1.50714       1.50714       148.868       150.375    
   5  0.100366      -2.29893      -1.73987       1.73987       148.749       150.489    
   6  0.439637     -0.821807     -0.621958      0.621958       148.234       148.856    
   7  0.745548     -0.293635     -0.222229      0.222229       149.129       149.352    
   8  0.374855     -0.981216     -0.742603      0.742603       148.380       149.122    
   9  0.144230      -1.93634      -1.46546       1.46546       149.272       150.738    
  10  0.776977     -0.252344     -0.190979      0.190979       149.126       149.316    
  11  0.524160E-01  -2.94854      -2.23151       2.23151       148.623       150.855    
  12  0.454382     -0.788817     -0.596991      0.596991       149.307       149.904    
  13  0.128840      -2.04919      -1.55086       1.55086       148.548       150.099    
  14  0.621729     -0.475251     -0.359679      0.359679       149.762       150.122    
  15  0.974694     -0.256318E-01 -0.193986E-01  0.193986E-01   148.996       149.015    
  16  0.965418     -0.351939E-01 -0.266354E-01  0.266354E-01   149.580       149.607    
  17  0.370644     -0.992512     -0.751151      0.751151       149.969       150.720    
  18  0.246546      -1.40021      -1.05970       1.05970       149.772       150.832    
  19  0.702523E-01  -2.65566      -2.00985       2.00985       150.039       152.049    
  20  0.326197E-01  -3.42284      -2.59047       2.59047       148.549       151.139    
  21  0.419579     -0.868503     -0.657299      0.657299       150.127       150.784    
  22  0.466221     -0.763095     -0.577524      0.577524       150.349       150.927    
  23  0.240579      -1.42471      -1.07824       1.07824       148.541       149.620    
  24  0.901129     -0.104107     -0.787902E-01  0.787902E-01   149.932       150.010    
  25  0.533703     -0.627916     -0.475218      0.475218       148.856       149.331    
  26  0.617116     -0.482699     -0.365315      0.365315       150.154       150.519    
  27  0.431696     -0.840033     -0.635752      0.635752       148.964       149.600    
  28  0.490629     -0.712067     -0.538905      0.538905       149.818       150.357    
  29  0.727929     -0.317551     -0.240329      0.240329       150.503       150.743    
  30  0.751113     -0.286200     -0.216601      0.216601       150.797       151.014    
  31  0.128641      -2.05073      -1.55203       1.55203       148.113       149.665    
  32  0.592334E-01  -2.82627      -2.13897       2.13897       149.281       151.420    
  33  0.692882     -0.366896     -0.277674      0.277674       150.536       150.814    
  34  0.600682     -0.509689     -0.385742      0.385742       149.274       149.659    
  35  0.658975     -0.417069     -0.315646      0.315646       150.890       151.205    
  36  0.696343     -0.361913     -0.273902      0.273902       151.180       151.454    
  37  0.605529     -0.501652     -0.379659      0.379659       150.944       151.324    
  38  0.492956     -0.707335     -0.535324      0.535324       151.560       152.095    
  39  0.561246     -0.577595     -0.437135      0.437135       151.126       151.563    
  40  0.184946E-01  -3.99027      -3.01991       3.01991       151.313       154.333    
  41  0.483815     -0.726052     -0.549490      0.549490       151.216       151.766    
  42  0.358577      -1.02561     -0.776203      0.776203       151.361       152.137    
  43  0.316248E-01  -3.45382      -2.61391       2.61391       151.619       154.233    
  44  0.103277      -2.27034      -1.71823       1.71823       151.846       153.564    
  45  0.216677      -1.52935      -1.15744       1.15744       151.078       152.236    
  46  0.316630      -1.15002     -0.870356      0.870356       152.040       152.910    
  47  0.930307     -0.722406E-01 -0.546730E-01  0.546730E-01   152.100       152.155    
  48  0.668609     -0.402556     -0.304662      0.304662       151.389       151.694    
  49  0.932709     -0.696615E-01 -0.527211E-01  0.527211E-01   150.497       150.550    
  50  0.277669E-01  -3.58391      -2.71237       2.71237       150.153       152.865    
  51  0.541236     -0.613900     -0.464611      0.464611       151.177       151.642    
  52  0.938218     -0.637734E-01 -0.482648E-01  0.482648E-01   149.608       149.656    
  53  0.844137     -0.169440     -0.128235      0.128235       152.374       152.502    
  54  0.416655     -0.875497     -0.662593      0.662593       151.287       151.949    
  55  0.516231     -0.661200     -0.500408      0.500408       152.501       153.001    
  56  0.108139      -2.22434      -1.68342       1.68342       152.477       154.161    
  57  0.211754      -1.55233      -1.17483       1.17483       151.990       153.165    
  58  0.650924     -0.429362     -0.324949      0.324949       151.607       151.932    
  59  0.810258E-01  -2.51299      -1.90188       1.90188       151.692       153.594    
  60  0.129033      -2.04769      -1.54973       1.54973       152.717       154.267    
  61  0.645157     -0.438262     -0.331684      0.331684       152.441       152.773    
  62  0.580611     -0.543675     -0.411463      0.411463       150.072       150.483    
  63  0.905307     -0.994807E-01 -0.752888E-01  0.752888E-01   152.640       152.715    
  64  0.532245     -0.630651     -0.477288      0.477288       150.469       150.946    
  65  0.374654     -0.981751     -0.743007      0.743007       150.015       150.758    
  66  0.843593     -0.170085     -0.128723      0.128723       152.254       152.383    
  67  0.148317      -1.90840      -1.44431       1.44431       151.041       152.486    
  68  0.950497E-01  -2.35336      -1.78106       1.78106       153.419       155.200    
  69  0.730523     -0.313995     -0.237637      0.237637       153.530       153.768    
  70  0.916562     -0.871256E-01 -0.659383E-01  0.659383E-01   153.690       153.756    
  71  0.208174      -1.56938      -1.18774       1.18774       152.720       153.908    
  72  0.461165E-01  -3.07658      -2.32842       2.32842       154.510       156.839    
  73  0.468676     -0.757843     -0.573549      0.573549       154.382       154.956    
  74  0.389811     -0.942093     -0.712993      0.712993       152.547       153.260    
  75  0.655767     -0.421950     -0.319340      0.319340       149.012       149.332    
loop,thermsimp(1:2)       87  0.182654       3.71446    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    536        152.38          0.87          1.15         25.25          0.06          0.05         27.39
Just calling func    0   0         27.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    152.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       87
neval is:      535
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       88
neval is:      535


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      535     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.507680     -0.677903     -0.513049      0.513049       148.507       149.020    
   2  0.790268     -0.235383     -0.178142      0.178142       148.234       148.413    
   3  0.317381      -1.14765     -0.868565      0.868565       148.996       149.864    
   4  0.767166     -0.265051     -0.200596      0.200596       148.380       148.580    
   5  0.313858      -1.15882     -0.877013      0.877013       149.126       150.003    
   6  0.251614      -1.37986      -1.04430       1.04430       148.856       149.900    
   7  0.948204     -0.531858E-01 -0.402520E-01  0.402520E-01   149.012       149.053    
   8  0.747265     -0.291336     -0.220488      0.220488       149.129       149.350    
   9  0.264530      -1.32980      -1.00642       1.00642       148.964       149.970    
  10  0.879562     -0.128331     -0.971231E-01  0.971231E-01   149.580       149.677    
  11  0.158918      -1.83937      -1.39207       1.39207       148.541       149.933    
  12  0.409577E-01  -3.19522      -2.41820       2.41820       149.608       152.026    
  13  0.832422     -0.183416     -0.138813      0.138813       149.274       149.413    
  14  0.930291     -0.722576E-01 -0.546859E-01  0.546859E-01   148.113       148.167    
  15  0.301800      -1.19799     -0.906662      0.906662       149.307       150.213    
  16  0.990785     -0.925803E-02 -0.700665E-02  0.700665E-02   148.637       148.644    
  17  0.328363      -1.11364     -0.842820      0.842820       149.932       150.774    
  18  0.938323     -0.636607E-01 -0.481796E-01  0.481796E-01   148.548       148.596    
  19  0.975952     -0.243418E-01 -0.184224E-01  0.184224E-01   149.762       149.781    
  20  0.459186     -0.778299     -0.589031      0.589031       149.818       150.407    
  21  0.540042     -0.616108     -0.466282      0.466282       148.868       149.334    
  22  0.543006     -0.610635     -0.462140      0.462140       150.072       150.534    
  23  0.733492     -0.309938     -0.234567      0.234567       148.749       148.984    
  24  0.451844     -0.794418     -0.601230      0.601230       150.154       150.755    
  25  0.753205     -0.283418     -0.214496      0.214496       150.497       150.712    
  26  0.701062     -0.355159     -0.268791      0.268791       149.969       150.237    
  27  0.878758     -0.129246     -0.978158E-01  0.978158E-01   149.272       149.370    
  28  0.378850     -0.970616     -0.734580      0.734580       150.503       151.237    
  29  0.963503     -0.371796E-01 -0.281382E-01  0.281382E-01   150.015       150.043    
  30  0.637747     -0.449814     -0.340427      0.340427       150.127       150.467    
  31  0.869781     -0.139514     -0.105587      0.105587       150.536       150.642    
  32  0.753171     -0.283463     -0.214530      0.214530       149.772       149.987    
  33  0.526050E-01  -2.94494      -2.22879       2.22879       148.623       150.852    
  34  0.243477      -1.41273      -1.06918       1.06918       150.349       151.418    
  35  0.519956E-01  -2.95660      -2.23761       2.23761       150.469       152.706    
  36  0.530132E-01  -2.93721      -2.22294       2.22294       150.797       153.020    
  37  0.521011     -0.651985     -0.493434      0.493434       148.549       149.042    
  38  0.536818     -0.622097     -0.470814      0.470814       150.890       151.361    
  39  0.452282     -0.793450     -0.600497      0.600497       150.944       151.545    
  40  0.824064     -0.193508     -0.146450      0.146450       149.281       149.427    
  41  0.432752     -0.837591     -0.633904      0.633904       151.180       151.814    
  42  0.639137     -0.447637     -0.338780      0.338780       151.126       151.465    
  43  0.200933      -1.60478      -1.21453       1.21453       151.177       152.392    
  44  0.195377      -1.63282      -1.23575       1.23575       151.389       152.625    
  45  0.487028     -0.719434     -0.544481      0.544481       151.216       151.761    
  46  0.434536     -0.833476     -0.630790      0.630790       151.607       152.238    
  47  0.779247     -0.249427     -0.188771      0.188771       151.287       151.476    
  48  0.245897      -1.40284      -1.06170       1.06170       150.039       151.101    
  49  0.510235     -0.672884     -0.509251      0.509251       151.560       152.069    
  50  0.681914E-01  -2.68544      -2.03239       2.03239       151.361       153.394    
  51  0.983162     -0.169810E-01 -0.128515E-01  0.128515E-01   152.100       152.113    
  52  0.562832     -0.574775     -0.435000      0.435000       151.078       151.513    
  53  0.578358     -0.547562     -0.414405      0.414405       148.625       149.040    
  54  0.103448      -2.26869      -1.71698       1.71698       152.254       153.971    
  55  0.941795     -0.599673E-01 -0.453844E-01  0.453844E-01   151.041       151.087    
  56  0.246008      -1.40239      -1.06136       1.06136       152.374       153.435    
  57  0.655852     -0.421820     -0.319241      0.319241       152.640       152.959    
  58  0.816413     -0.202835     -0.153510      0.153510       152.441       152.594    
  59  0.248323      -1.39303      -1.05427       1.05427       150.153       151.207    
  60  0.624200     -0.471285     -0.356677      0.356677       152.040       152.397    
  61  0.316748      -1.14965     -0.870075      0.870075       152.501       153.371    
  62  0.696928     -0.361072     -0.273266      0.273266       151.990       152.264    
  63  0.710019     -0.342463     -0.259182      0.259182       152.547       152.806    
  64  0.271509      -1.30376     -0.986709      0.986709       151.846       152.833    
  65  0.710307E-01  -2.64464      -2.00151       2.00151       151.692       153.694    
  66  0.644233     -0.439695     -0.332769      0.332769       153.690       154.023    
  67  0.504062     -0.685056     -0.518463      0.518463       153.530       154.049    
  68  0.220642      -1.51121      -1.14371       1.14371       152.720       153.864    
  69  0.784882     -0.242222     -0.183318      0.183318       152.477       152.660    
  70  0.619516     -0.478817     -0.362378      0.362378       151.619       151.981    
  71  0.819868     -0.198612     -0.150313      0.150313       152.717       152.868    
  72  0.847711     -0.165215     -0.125038      0.125038       151.313       151.438    
  73  0.722001     -0.325729     -0.246518      0.246518       154.382       154.629    
  74  0.524921     -0.644508     -0.487775      0.487775       153.419       153.907    
  75  0.589684     -0.528169     -0.399728      0.399728       152.382       152.781    
loop,thermsimp(1:2)       88  0.513049      0.178142    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    537        154.30          0.85          1.14         25.22          0.17          0.05         27.44
Just calling func    0   0         27.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       88
neval is:      536
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       89
neval is:      536


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      536     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880944     -0.126761     -0.959352E-01  0.959352E-01   148.113       148.209    
   2  0.678316     -0.388142     -0.293753      0.293753       148.234       148.528    
   3  0.135490      -1.99886      -1.51277       1.51277       148.380       149.892    
   4  0.362841      -1.01379     -0.767255      0.767255       148.548       149.315    
   5  0.288564      -1.24284     -0.940602      0.940602       148.637       149.577    
   6  0.722355     -0.325238     -0.246146      0.246146       148.749       148.995    
   7  0.978389     -0.218479E-01 -0.165349E-01  0.165349E-01   148.507       148.524    
   8  0.883441     -0.123930     -0.937927E-01  0.937927E-01   148.625       148.719    
   9  0.537650     -0.620547     -0.469641      0.469641       148.549       149.018    
  10  0.945156     -0.564053E-01 -0.426885E-01  0.426885E-01   149.012       149.055    
  11  0.902011     -0.103129     -0.780497E-01  0.780497E-01   148.868       148.946    
  12  0.953192     -0.479389E-01 -0.362811E-01  0.362811E-01   149.129       149.166    
  13  0.287473      -1.24663     -0.943470      0.943470       149.272       150.216    
  14  0.403089     -0.908597     -0.687643      0.687643       149.274       149.961    
  15  0.441004     -0.818701     -0.619608      0.619608       149.281       149.900    
  16  0.639526     -0.447028     -0.338319      0.338319       149.580       149.919    
  17  0.380765     -0.965572     -0.730763      0.730763       149.762       150.493    
  18  0.659762     -0.415876     -0.314742      0.314742       148.996       149.311    
  19  0.375709     -0.978939     -0.740879      0.740879       148.856       149.597    
  20  0.963753     -0.369203E-01 -0.279420E-01  0.279420E-01   148.541       148.569    
  21  0.550567E-02  -5.20198      -3.93695       3.93695       148.964       152.901    
  22  0.406012     -0.901372     -0.682174      0.682174       149.772       150.454    
  23  0.718789     -0.330187     -0.249892      0.249892       149.126       149.375    
  24  0.634557     -0.454828     -0.344222      0.344222       150.015       150.359    
  25  0.531123     -0.632761     -0.478885      0.478885       149.307       149.785    
  26  0.839681     -0.174733     -0.132241      0.132241       149.969       150.101    
  27  0.404403     -0.905343     -0.685180      0.685180       149.818       150.504    
  28  0.364094      -1.01034     -0.764647      0.764647       150.127       150.891    
  29  0.195203      -1.63372      -1.23643       1.23643       150.072       151.308    
  30  0.895643     -0.110213     -0.834113E-01  0.834113E-01   150.536       150.619    
  31  0.350505      -1.04838     -0.793433      0.793433       150.497       151.291    
  32  0.246469      -1.40052      -1.05994       1.05994       150.154       151.214    
  33  0.491662     -0.709964     -0.537314      0.537314       149.932       150.469    
  34  0.570678     -0.560930     -0.424522      0.424522       148.623       149.048    
  35  0.127892      -2.05657      -1.55645       1.55645       151.041       152.598    
  36  0.671111     -0.398821     -0.301835      0.301835       150.039       150.341    
  37  0.492283     -0.708702     -0.536359      0.536359       150.153       150.689    
  38  0.784530     -0.242670     -0.183657      0.183657       150.503       150.686    
  39  0.804537     -0.217489     -0.164600      0.164600       150.890       151.054    
  40  0.951874     -0.493229E-01 -0.373285E-01  0.373285E-01   150.349       150.387    
  41  0.860836     -0.149852     -0.113411      0.113411       151.313       151.426    
  42  0.441943E-01  -3.11916      -2.36064       2.36064       151.126       153.487    
  43  0.863376     -0.146905     -0.111180      0.111180       151.287       151.398    
  44  0.717499E-02  -4.93715      -3.73653       3.73653       151.078       154.815    
  45  0.257105      -1.35827      -1.02796       1.02796       150.944       151.972    
  46  0.834736     -0.180640     -0.136711      0.136711       151.216       151.353    
  47  0.406979     -0.898994     -0.680375      0.680375       151.180       151.860    
  48  0.751883     -0.285174     -0.215825      0.215825       151.619       151.834    
  49  0.426180     -0.852893     -0.645485      0.645485       149.608       150.253    
  50  0.780644     -0.247637     -0.187416      0.187416       151.560       151.747    
  51  0.334820      -1.09416     -0.828082      0.828082       152.100       152.928    
  52  0.690618     -0.370169     -0.280150      0.280150       151.607       151.887    
  53  0.786960     -0.239578     -0.181317      0.181317       151.990       152.172    
  54  0.762697     -0.270894     -0.205018      0.205018       151.177       151.382    
  55  0.224832      -1.49240      -1.12948       1.12948       152.040       153.170    
  56  0.159776      -1.83398      -1.38799       1.38799       152.441       153.829    
  57  0.635541     -0.453278     -0.343049      0.343049       151.389       151.732    
  58  0.515119     -0.663357     -0.502041      0.502041       152.477       152.979    
  59  0.486717     -0.720072     -0.544964      0.544964       150.469       151.014    
  60  0.990660     -0.938371E-02 -0.710176E-02  0.710176E-02   152.382       152.389    
  61  0.966524     -0.340495E-01 -0.257693E-01  0.257693E-01   152.547       152.573    
  62  0.659413     -0.416405     -0.315143      0.315143       151.846       152.161    
  63  0.925713     -0.771915E-01 -0.584199E-01  0.584199E-01   152.717       152.776    
  64  0.720969     -0.327159     -0.247600      0.247600       152.640       152.888    
  65  0.866153     -0.143694     -0.108750      0.108750       150.797       150.906    
  66  0.905590     -0.991689E-01 -0.750529E-01  0.750529E-01   152.501       152.576    
  67  0.251055      -1.38208      -1.04599       1.04599       151.361       152.407    
  68  0.891439     -0.114919     -0.869726E-01  0.869726E-01   152.374       152.461    
  69  0.781745     -0.246226     -0.186349      0.186349       151.692       151.878    
  70  0.873268E-01  -2.43810      -1.84520       1.84520       152.720       154.566    
  71  0.683212E-01  -2.68354      -2.03095       2.03095       153.419       155.450    
  72  0.124942      -2.07990      -1.57411       1.57411       152.254       153.829    
  73  0.275694      -1.28846     -0.975133      0.975133       153.690       154.665    
  74  0.792317E-01  -2.53538      -1.91882       1.91882       153.530       155.449    
  75  0.780484     -0.247841     -0.187571      0.187571       154.302       154.489    
loop,thermsimp(1:2)       89  0.959352E-01  0.293753    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    538        150.69          0.87          1.15         25.28          0.05          0.05         27.40
Just calling func    0   0         27.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       89
neval is:      537
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       90
neval is:      537


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      537     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.519767     -0.654376     -0.495243      0.495243       148.113       148.608    
   2  0.451273E-03  -7.70344      -5.83010       5.83010       148.507       154.337    
   3  0.838605E-01  -2.47860      -1.87585       1.87585       148.234       150.110    
   4  0.268196      -1.31604     -0.996002      0.996002       148.541       149.537    
   5  0.682721     -0.381669     -0.288854      0.288854       148.625       148.914    
   6  0.134603      -2.00542      -1.51774       1.51774       148.868       150.386    
   7  0.809634     -0.211173     -0.159820      0.159820       148.749       148.909    
   8  0.578058     -0.548081     -0.414797      0.414797       148.549       148.964    
   9  0.181348      -1.70734      -1.29214       1.29214       148.623       149.916    
  10  0.893989     -0.112062     -0.848103E-01  0.848103E-01   149.012       149.097    
  11  0.137049      -1.98742      -1.50412       1.50412       149.129       150.634    
  12  0.316319      -1.15100     -0.871101      0.871101       148.996       149.867    
  13  0.458104     -0.780660     -0.590818      0.590818       148.548       149.139    
  14  0.250826      -1.38300      -1.04668       1.04668       149.126       150.172    
  15  0.631289     -0.459992     -0.348130      0.348130       148.637       148.985    
  16  0.815448     -0.204018     -0.154405      0.154405       148.856       149.010    
  17  0.957573     -0.433532E-01 -0.328105E-01  0.328105E-01   149.307       149.339    
  18  0.633470     -0.456542     -0.345519      0.345519       148.380       148.725    
  19  0.660593     -0.414617     -0.313789      0.313789       149.281       149.594    
  20  0.664533     -0.408671     -0.309290      0.309290       149.580       149.890    
  21  0.620837     -0.476686     -0.360765      0.360765       149.274       149.634    
  22  0.195138      -1.63405      -1.23668       1.23668       149.969       151.205    
  23  0.439070     -0.823096     -0.622934      0.622934       149.272       149.895    
  24  0.731595     -0.312528     -0.236527      0.236527       149.608       149.844    
  25  0.176973      -1.73176      -1.31063       1.31063       150.039       151.350    
  26  0.450618     -0.797135     -0.603287      0.603287       150.015       150.618    
  27  0.306042E-01  -3.48662      -2.63874       2.63874       150.349       152.988    
  28  0.737213     -0.304879     -0.230738      0.230738       149.772       150.003    
  29  0.103939      -2.26395      -1.71340       1.71340       149.932       151.645    
  30  0.327275      -1.11695     -0.845332      0.845332       149.762       150.608    
  31  0.384261     -0.956434     -0.723846      0.723846       149.818       150.542    
  32  0.844251E-01  -2.47189      -1.87077       1.87077       150.536       152.407    
  33  0.341620      -1.07406     -0.812865      0.812865       150.503       151.315    
  34  0.590291     -0.527140     -0.398949      0.398949       150.153       150.552    
  35  0.335291      -1.09276     -0.827019      0.827019       150.127       150.954    
  36  0.871923     -0.137055     -0.103725      0.103725       150.797       150.901    
  37  0.216579E-01  -3.83238      -2.90042       2.90042       150.469       153.369    
  38  0.674344     -0.394015     -0.298198      0.298198       150.890       151.188    
  39  0.622707     -0.473679     -0.358489      0.358489       150.154       150.512    
  40  0.805084     -0.216809     -0.164085      0.164085       150.497       150.661    
  41  0.298614      -1.20860     -0.914693      0.914693       150.072       150.986    
  42  0.556750     -0.585639     -0.443222      0.443222       151.216       151.659    
  43  0.239374      -1.42973      -1.08205       1.08205       151.177       152.259    
  44  0.403553     -0.907447     -0.686772      0.686772       151.287       151.974    
  45  0.815210     -0.204309     -0.154625      0.154625       151.313       151.467    
  46  0.701880     -0.353993     -0.267908      0.267908       151.389       151.657    
  47  0.996873     -0.313153E-02 -0.237000E-02  0.237000E-02   151.560       151.562    
  48  0.270799      -1.30638     -0.988692      0.988692       151.619       152.607    
  49  0.129999      -2.04023      -1.54408       1.54408       151.180       152.724    
  50  0.609288     -0.495465     -0.374977      0.374977       151.692       152.067    
  51  0.205179E-01  -3.88646      -2.94134       2.94134       151.607       154.549    
  52  0.178070      -1.72558      -1.30595       1.30595       150.944       152.250    
  53  0.591536     -0.525033     -0.397355      0.397355       151.846       152.243    
  54  0.673211     -0.395696     -0.299470      0.299470       151.990       152.290    
  55  0.641161     -0.444474     -0.336386      0.336386       152.382       152.718    
  56  0.933700     -0.685999E-01 -0.519177E-01  0.519177E-01   151.361       151.413    
  57  0.542010     -0.612470     -0.463529      0.463529       152.374       152.837    
  58  0.364404      -1.00949     -0.764002      0.764002       152.547       153.311    
  59  0.789426     -0.236449     -0.178949      0.178949       152.501       152.680    
  60  0.885418     -0.121696     -0.921017E-01  0.921017E-01   151.041       151.133    
  61  0.431432     -0.840646     -0.636216      0.636216       152.717       153.353    
  62  0.717739     -0.331649     -0.250998      0.250998       152.640       152.891    
  63  0.375354     -0.979886     -0.741595      0.741595       148.964       149.706    
  64  0.844050     -0.169543     -0.128313      0.128313       152.100       152.229    
  65  0.907133     -0.974662E-01 -0.737642E-01  0.737642E-01   152.477       152.551    
  66  0.457061     -0.782938     -0.592542      0.592542       152.040       152.633    
  67  0.249730      -1.38737      -1.04999       1.04999       151.126       152.176    
  68  0.803893E-01  -2.52087      -1.90784       1.90784       152.254       154.162    
  69  0.723742     -0.323320     -0.244694      0.244694       152.441       152.686    
  70  0.208936      -1.56573      -1.18497       1.18497       154.302       155.487    
  71  0.653558E-01  -2.72791      -2.06453       2.06453       152.720       154.785    
  72  0.374155     -0.983084     -0.744016      0.744016       153.690       154.434    
  73  0.618386     -0.480643     -0.363759      0.363759       151.078       151.442    
  74  0.108768      -2.21854      -1.67903       1.67903       153.530       155.209    
  75  0.891037     -0.115369     -0.873134E-01  0.873134E-01   150.694       150.782    
loop,thermsimp(1:2)       90  0.495243       5.83010    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    539        154.40          0.87          1.15         25.25          0.15          0.05         27.47
Just calling func    0   0         27.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       90
neval is:      538
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       91
neval is:      538


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      538     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.525961     -0.642528     -0.486277      0.486277       148.113       148.599    
   2  0.526989E-01  -2.94316      -2.22744       2.22744       148.380       150.607    
   3  0.341680      -1.07388     -0.812733      0.812733       148.749       149.562    
   4  0.405255     -0.903238     -0.683587      0.683587       148.625       149.309    
   5  0.514563     -0.664437     -0.502858      0.502858       148.549       149.052    
   6  0.466000     -0.763569     -0.577883      0.577883       148.637       149.215    
   7  0.342846      -1.07047     -0.810154      0.810154       148.856       149.666    
   8  0.358671      -1.02535     -0.776004      0.776004       149.012       149.788    
   9  0.554031     -0.590534     -0.446927      0.446927       148.548       148.995    
  10  0.778335     -0.250599     -0.189658      0.189658       149.307       149.496    
  11  0.217304      -1.52646      -1.15525       1.15525       148.541       149.697    
  12  0.982801     -0.173486E-01 -0.131297E-01  0.131297E-01   149.281       149.294    
  13  0.298897      -1.20766     -0.913977      0.913977       149.274       150.188    
  14  0.152611      -1.87986      -1.42272       1.42272       148.964       150.387    
  15  0.834186E-01  -2.48388      -1.87985       1.87985       149.608       151.488    
  16  0.691361     -0.369093     -0.279336      0.279336       148.996       149.275    
  17  0.202495E-01  -3.89963      -2.95131       2.95131       149.580       152.532    
  18  0.462938     -0.770162     -0.582873      0.582873       149.272       149.855    
  19  0.893654     -0.112436     -0.850940E-01  0.850940E-01   148.623       148.708    
  20  0.751255     -0.286010     -0.216457      0.216457       149.772       149.989    
  21  0.528256E-02  -5.24334      -3.96826       3.96826       148.234       152.203    
  22  0.661719     -0.412914     -0.312501      0.312501       149.126       149.438    
  23  0.711098     -0.340945     -0.258033      0.258033       148.868       149.126    
  24  0.394814     -0.929342     -0.703343      0.703343       150.154       150.857    
  25  0.529459     -0.635899     -0.481260      0.481260       149.818       150.300    
  26  0.123125      -2.09456      -1.58520       1.58520       150.153       151.738    
  27  0.150045      -1.89682      -1.43555       1.43555       149.762       151.198    
  28  0.847587     -0.165361     -0.125148      0.125148       150.015       150.140    
  29  0.684633     -0.378873     -0.286738      0.286738       149.129       149.416    
  30  0.238386      -1.43386      -1.08517       1.08517       150.497       151.582    
  31  0.260935      -1.34348      -1.01677       1.01677       150.694       151.711    
  32  0.731525E-01  -2.61521      -1.97924       1.97924       150.797       152.776    
  33  0.760028     -0.274400     -0.207671      0.207671       150.127       150.334    
  34  0.748054     -0.290280     -0.219689      0.219689       150.072       150.291    
  35  0.448284     -0.802329     -0.607217      0.607217       151.041       151.649    
  36  0.658970     -0.417078     -0.315652      0.315652       150.890       151.205    
  37  0.101931      -2.28346      -1.72817       1.72817       149.969       151.697    
  38  0.946705     -0.547677E-01 -0.414492E-01  0.414492E-01   150.503       150.544    
  39  0.923584     -0.794931E-01 -0.601618E-01  0.601618E-01   150.039       150.100    
  40  0.632977     -0.457321     -0.346109      0.346109       151.361       151.707    
  41  0.386701     -0.950103     -0.719056      0.719056       151.078       151.798    
  42  0.585154     -0.535880     -0.405564      0.405564       151.313       151.718    
  43  0.538343     -0.619260     -0.468667      0.468667       151.560       152.029    
  44  0.843970     -0.169639     -0.128386      0.128386       149.932       150.060    
  45  0.420066     -0.867344     -0.656422      0.656422       151.389       152.046    
  46  0.826451     -0.190615     -0.144261      0.144261       151.216       151.360    
  47  0.523061     -0.648057     -0.490461      0.490461       151.287       151.777    
  48  0.699280     -0.357703     -0.270716      0.270716       151.692       151.963    
  49  0.662193     -0.412199     -0.311960      0.311960       151.126       151.438    
  50  0.173075E-01  -4.05661      -3.07012       3.07012       152.100       155.170    
  51  0.912691     -0.913577E-01 -0.691412E-01  0.691412E-01   151.846       151.915    
  52  0.962432     -0.382919E-01 -0.289800E-01  0.289800E-01   150.944       150.973    
  53  0.980621E-01  -2.32215      -1.75745       1.75745       151.177       152.935    
  54  0.231566      -1.46289      -1.10714       1.10714       151.990       153.097    
  55  0.141472      -1.95565      -1.48007       1.48007       150.536       152.016    
  56  0.678142     -0.388398     -0.293947      0.293947       152.477       152.771    
  57  0.379107     -0.969937     -0.734066      0.734066       151.619       152.353    
  58  0.304517E-01  -3.49161      -2.64252       2.64252       152.040       154.683    
  59  0.832114     -0.183785     -0.139092      0.139092       152.501       152.640    
  60  0.218962      -1.51886      -1.14950       1.14950       152.441       153.590    
  61  0.593456E-01  -2.82438      -2.13754       2.13754       152.382       154.519    
  62  0.732375     -0.311463     -0.235721      0.235721       151.180       151.416    
  63  0.945228     -0.563291E-01 -0.426309E-01  0.426309E-01   152.374       152.417    
  64  0.917833     -0.857393E-01 -0.648891E-01  0.648891E-01   152.640       152.705    
  65  0.233680      -1.45380      -1.10027       1.10027       150.349       151.450    
  66  0.677061     -0.389995     -0.295155      0.295155       152.547       152.842    
  67  0.324413      -1.12574     -0.851978      0.851978       152.717       153.569    
  68  0.225570      -1.48913      -1.12700       1.12700       150.469       151.596    
  69  0.749764     -0.287996     -0.217961      0.217961       152.254       152.472    
  70  0.990901     -0.914097E-02 -0.691806E-02  0.691806E-02   148.507       148.514    
  71  0.845599     -0.167710     -0.126926      0.126926       153.690       153.817    
  72  0.420728     -0.865769     -0.655230      0.655230       151.607       152.263    
  73  0.483861     -0.725957     -0.549418      0.549418       152.720       153.270    
  74  0.515389     -0.662833     -0.501644      0.501644       153.530       154.032    
  75  0.740095     -0.300976     -0.227784      0.227784       154.398       154.625    
loop,thermsimp(1:2)       91  0.486277       2.22744    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    540        150.05          0.85          1.15         25.26          0.31          0.06         27.62
Just calling func    0   0         27.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    150.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       91
neval is:      539
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       92
neval is:      539


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      539     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179926      -1.71521      -1.29810       1.29810       148.507       149.805    
   2  0.805701     -0.216043     -0.163505      0.163505       148.113       148.276    
   3  0.341067      -1.07568     -0.814092      0.814092       148.623       149.437    
   4  0.596982     -0.515868     -0.390418      0.390418       148.548       148.938    
   5  0.575413E-01  -2.85525      -2.16091       2.16091       148.549       150.710    
   6  0.390921     -0.939249     -0.710841      0.710841       148.868       149.579    
   7  0.437495     -0.826689     -0.625654      0.625654       148.637       149.263    
   8  0.513955     -0.665620     -0.503753      0.503753       148.996       149.500    
   9  0.871599     -0.137426     -0.104006      0.104006       149.281       149.385    
  10  0.196691      -1.62612      -1.23068       1.23068       148.625       149.856    
  11  0.987685E-01  -2.31498      -1.75202       1.75202       149.129       150.881    
  12  0.448984     -0.800769     -0.606036      0.606036       149.126       149.732    
  13  0.869491     -0.139847     -0.105839      0.105839       149.307       149.412    
  14  0.253569      -1.37212      -1.03845       1.03845       148.749       149.788    
  15  0.765994     -0.266581     -0.201754      0.201754       148.856       149.057    
  16  0.269007      -1.31302     -0.993715      0.993715       148.541       149.535    
  17  0.527354     -0.639883     -0.484275      0.484275       149.012       149.497    
  18  0.991870     -0.816303E-02 -0.617793E-02  0.617793E-02   149.272       149.279    
  19  0.834963     -0.180368     -0.136506      0.136506       149.772       149.909    
  20  0.939146E-01  -2.36537      -1.79016       1.79016       149.932       151.722    
  21  0.784991     -0.242082     -0.183212      0.183212       150.039       150.223    
  22  0.164899      -1.80242      -1.36411       1.36411       150.015       151.379    
  23  0.890878     -0.115548     -0.874486E-01  0.874486E-01   149.274       149.361    
  24  0.996288E-01  -2.30630      -1.74545       1.74545       150.072       151.817    
  25  0.367348E-01  -3.30403      -2.50055       2.50055       149.818       152.319    
  26  0.874828     -0.133728     -0.101208      0.101208       150.127       150.228    
  27  0.101428      -2.28841      -1.73191       1.73191       148.964       150.696    
  28  0.583716     -0.538341     -0.407427      0.407427       150.503       150.910    
  29  0.265971      -1.32437      -1.00231       1.00231       148.380       149.382    
  30  0.739852     -0.301305     -0.228033      0.228033       150.154       150.382    
  31  0.974346     -0.259889E-01 -0.196689E-01  0.196689E-01   150.944       150.964    
  32  0.357297      -1.02919     -0.778908      0.778908       149.762       150.541    
  33  0.768033     -0.263923     -0.199741      0.199741       150.890       151.090    
  34  0.236843      -1.44036      -1.09009       1.09009       151.216       152.306    
  35  0.490030E-01  -3.01587      -2.28247       2.28247       151.180       153.462    
  36  0.842269     -0.171656     -0.129912      0.129912       151.126       151.256    
  37  0.292342      -1.22983     -0.930758      0.930758       150.349       151.280    
  38  0.596407     -0.516832     -0.391148      0.391148       149.608       149.999    
  39  0.359551      -1.02290     -0.774150      0.774150       150.497       151.271    
  40  0.461849     -0.772517     -0.584655      0.584655       150.469       151.053    
  41  0.662754     -0.411352     -0.311319      0.311319       151.041       151.353    
  42  0.516002     -0.661645     -0.500745      0.500745       149.969       150.469    
  43  0.619599     -0.478683     -0.362276      0.362276       151.361       151.723    
  44  0.811136     -0.209319     -0.158417      0.158417       150.694       150.853    
  45  0.490033     -0.713282     -0.539825      0.539825       151.313       151.853    
  46  0.976838     -0.234348E-01 -0.177359E-01  0.177359E-01   150.153       150.170    
  47  0.963378E-01  -2.33989      -1.77088       1.77088       151.287       153.058    
  48  0.811272     -0.209152     -0.158290      0.158290       151.078       151.237    
  49  0.401456     -0.912658     -0.690716      0.690716       151.846       152.537    
  50  0.910235E-01  -2.39664      -1.81382       1.81382       151.692       153.506    
  51  0.630523     -0.461206     -0.349049      0.349049       150.536       150.885    
  52  0.141261      -1.95715      -1.48120       1.48120       151.560       153.041    
  53  0.262014      -1.33936      -1.01365       1.01365       151.389       152.403    
  54  0.814315     -0.205408     -0.155456      0.155456       148.234       148.390    
  55  0.510597     -0.672174     -0.508714      0.508714       151.607       152.116    
  56  0.329822E-01  -3.41179      -2.58210       2.58210       151.619       154.201    
  57  0.261292      -1.34212      -1.01574       1.01574       152.374       153.390    
  58  0.984526E-02  -4.62077      -3.49708       3.49708       152.254       155.752    
  59  0.106604      -2.23863      -1.69424       1.69424       149.580       151.275    
  60  0.415734     -0.877709     -0.664266      0.664266       152.501       153.165    
  61  0.805083E-01  -2.51939      -1.90672       1.90672       152.640       154.547    
  62  0.952967     -0.481750E-01 -0.364597E-01  0.364597E-01   152.477       152.514    
  63  0.281678      -1.26699     -0.958882      0.958882       150.797       151.756    
  64  0.817607     -0.201373     -0.152403      0.152403       152.547       152.700    
  65  0.931666     -0.707805E-01 -0.535680E-01  0.535680E-01   151.177       151.231    
  66  0.116448E-01  -4.45290      -3.37004       3.37004       151.990       155.360    
  67  0.128886      -2.04883      -1.55059       1.55059       152.720       154.271    
  68  0.599899     -0.510993     -0.386729      0.386729       152.717       153.104    
  69  0.534928     -0.625623     -0.473483      0.473483       152.441       152.914    
  70  0.876726E-01  -2.43415      -1.84221       1.84221       153.690       155.532    
  71  0.889140     -0.117500     -0.889264E-01  0.889264E-01   153.530       153.619    
  72  0.962371E-01  -2.34094      -1.77167       1.77167       152.382       154.153    
  73  0.169322      -1.77595      -1.34407       1.34407       154.398       155.742    
  74  0.484095     -0.725474     -0.549052      0.549052       152.040       152.589    
  75  0.297268      -1.21312     -0.918113      0.918113       150.053       150.971    
loop,thermsimp(1:2)       92   1.29810      0.163505    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    541        148.76          0.87          1.15         25.22          0.13          0.05         27.41
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  540    148.76        1.196     -2.435      3.433     -102.6      1.251    
                      0.3598      1.193     -99.70      3.682    -0.7776E-01
                       2.373     -1.206      1.530     0.1211E+05  2548.    
                     -0.7987E-01  0.000      0.000      0.000     -1.221    

                      -2.500      0.000      0.000      6120.      1599.    
                     -0.5672     -6.270     -4.102     -9.054      6.375    
                      -15.47     -3.327      9849.      0.000     0.1167E+05

                      -3245.     0.1199E+05 -4269.     0.1144E+05  4292.    
                       3181.     0.4650E-01 0.1832      0.000     0.1623    
                     -0.3082    -0.1064     0.1195     0.1090     0.8061E-02

                     -0.5037    -0.7895      0.000     0.1036    -0.8493E-01
                       0.000     0.6202E-01 0.1274    -0.1848    -0.2855E-01
                     -0.1441E-01 0.3902E-03-0.6377     -1.194      4636.    

                      -1.119     -1.292     -2.192     -2.385    -0.2992    
                     -0.3854      9.193      8.676    -0.1548E+05 -4.000    
                     -0.9534     -2.103      9.274      8.850     -9690.    

                      -4.000     0.4869    -0.7387      8.895      9.075    
                     -0.2233E+05 -7.000    -0.7863     -1.040      9.001    
                       8.753    -0.1842E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    148.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       92
neval is:      540
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       93
neval is:      540


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      540     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356532      -1.03133     -0.780530      0.780530       148.113       148.893    
   2  0.156780      -1.85291      -1.40232       1.40232       148.234       149.637    
   3  0.871556     -0.137475     -0.104044      0.104044       148.548       148.652    
   4  0.686712     -0.375840     -0.284443      0.284443       148.856       149.140    
   5  0.980206     -0.199924E-01 -0.151306E-01  0.151306E-01   148.637       148.652    
   6  0.864789     -0.145270     -0.109943      0.109943       149.272       149.382    
   7  0.429178     -0.845883     -0.640179      0.640179       149.274       149.914    
   8  0.562262     -0.575787     -0.435766      0.435766       148.380       148.815    
   9  0.239176      -1.43056      -1.08267       1.08267       149.281       150.363    
  10  0.978598     -0.216345E-01 -0.163734E-01  0.163734E-01   149.307       149.323    
  11  0.938327     -0.636569E-01 -0.481767E-01  0.481767E-01   148.623       148.672    
  12  0.452510     -0.792946     -0.600116      0.600116       149.012       149.612    
  13  0.117352      -2.14257      -1.62154       1.62154       148.996       150.617    
  14  0.947736     -0.536798E-01 -0.406259E-01  0.406259E-01   148.541       148.582    
  15  0.990891     -0.915035E-02 -0.692516E-02  0.692516E-02   148.868       148.875    
  16  0.530083     -0.634722     -0.480369      0.480369       149.126       149.606    
  17  0.464385     -0.767041     -0.580511      0.580511       148.749       149.330    
  18  0.328231E-01  -3.41662      -2.58576       2.58576       148.507       151.093    
  19  0.141399E-01  -4.25876      -3.22311       3.22311       148.625       151.848    
  20  0.673551     -0.395192     -0.299088      0.299088       149.772       150.071    
  21  0.386316E-01  -3.25369      -2.46245       2.46245       149.608       152.070    
  22  0.592304     -0.523735     -0.396373      0.396373       150.153       150.549    
  23  0.755966     -0.279758     -0.211726      0.211726       150.039       150.251    
  24  0.397655     -0.922171     -0.697916      0.697916       150.127       150.825    
  25  0.636306     -0.452076     -0.342140      0.342140       150.154       150.496    
  26  0.610031     -0.494246     -0.374055      0.374055       149.969       150.343    
  27  0.424783     -0.856176     -0.647970      0.647970       149.762       150.410    
  28  0.748792     -0.289294     -0.218943      0.218943       148.964       149.183    
  29  0.481989     -0.729833     -0.552351      0.552351       148.549       149.101    
  30  0.711380     -0.340548     -0.257733      0.257733       150.694       150.952    
  31  0.853958     -0.157873     -0.119481      0.119481       149.129       149.249    
  32  0.194550      -1.63706      -1.23896       1.23896       150.536       151.775    
  33  0.972044     -0.283541E-01 -0.214589E-01  0.214589E-01   150.503       150.524    
  34  0.292837      -1.22814     -0.929478      0.929478       150.944       151.874    
  35  0.100865      -2.29397      -1.73612       1.73612       150.053       151.789    
  36  0.768654     -0.263114     -0.199129      0.199129       150.469       150.668    
  37  0.401537     -0.912456     -0.690563      0.690563       150.890       151.580    
  38  0.809292     -0.211595     -0.160139      0.160139       151.177       151.337    
  39  0.427839     -0.849009     -0.642546      0.642546       151.078       151.721    
  40  0.350578      -1.04817     -0.793275      0.793275       151.126       151.919    
  41  0.709565     -0.343104     -0.259667      0.259667       150.497       150.757    
  42  0.925864     -0.770281E-01 -0.582963E-01  0.582963E-01   149.580       149.639    
  43  0.470142     -0.754721     -0.571187      0.571187       150.349       150.920    
  44  0.168112      -1.78312      -1.34950       1.34950       151.041       152.391    
  45  0.858320     -0.152778     -0.115625      0.115625       150.015       150.130    
  46  0.209215      -1.56439      -1.18396       1.18396       149.932       151.116    
  47  0.925371     -0.775610E-01 -0.586996E-01  0.586996E-01   151.361       151.420    
  48  0.226229E-01  -3.78879      -2.86743       2.86743       150.797       153.664    
  49  0.414630     -0.880370     -0.666280      0.666280       150.072       150.738    
  50  0.588747     -0.529758     -0.400931      0.400931       151.313       151.714    
  51  0.190202      -1.65967      -1.25607       1.25607       151.607       152.863    
  52  0.669939     -0.400569     -0.303158      0.303158       151.216       151.519    
  53  0.662360     -0.411945     -0.311768      0.311768       149.818       150.130    
  54  0.491671E-01  -3.01253      -2.27994       2.27994       151.389       153.669    
  55  0.102120      -2.28160      -1.72676       1.72676       152.477       154.204    
  56  0.132651      -2.02004      -1.52880       1.52880       151.846       153.375    
  57  0.260061      -1.34684      -1.01931       1.01931       152.040       153.059    
  58  0.538873     -0.618275     -0.467922      0.467922       152.547       153.015    
  59  0.346643E-01  -3.36205      -2.54446       2.54446       152.441       154.985    
  60  0.282252      -1.26495     -0.957341      0.957341       151.560       152.517    
  61  0.184457      -1.69034      -1.27928       1.27928       151.287       152.566    
  62  0.129436      -2.04457      -1.54736       1.54736       152.717       154.265    
  63  0.803502     -0.218776     -0.165574      0.165574       152.501       152.666    
  64  0.299569      -1.20541     -0.912277      0.912277       152.374       153.286    
  65  0.298055      -1.21048     -0.916112      0.916112       151.180       152.096    
  66  0.174638      -1.74504      -1.32068       1.32068       151.692       153.013    
  67  0.901236     -0.103988     -0.786998E-01  0.786998E-01   153.530       153.609    
  68  0.249101      -1.38990      -1.05190       1.05190       152.382       153.434    
  69  0.118937      -2.12916      -1.61139       1.61139       151.619       153.230    
  70  0.456636     -0.783869     -0.593247      0.593247       152.720       153.314    
  71  0.826930     -0.190036     -0.143822      0.143822       152.640       152.784    
  72  0.268549      -1.31472     -0.995006      0.995006       151.990       152.985    
  73  0.734985     -0.307905     -0.233028      0.233028       153.690       153.923    
  74  0.449433     -0.799769     -0.605280      0.605280       154.398       155.003    
  75  0.684293     -0.379369     -0.287113      0.287113       148.757       149.044    
loop,thermsimp(1:2)       93  0.780530       1.40232    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    542        154.24          0.87          1.15         25.23          0.12          0.05         27.42
Just calling func    0   0         27.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    154.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       93
neval is:      541
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       94
neval is:      541


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      541     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.799794     -0.223401     -0.169074      0.169074       148.541       148.710    
   2  0.812618     -0.207494     -0.157036      0.157036       148.637       148.794    
   3  0.153451      -1.87438      -1.41856       1.41856       148.548       149.967    
   4  0.191065      -1.65514      -1.25264       1.25264       148.623       149.876    
   5  0.619921     -0.478164     -0.361883      0.361883       148.380       148.741    
   6  0.788743     -0.237315     -0.179605      0.179605       148.868       149.048    
   7  0.897459     -0.108188     -0.818785E-01  0.818785E-01   148.113       148.194    
   8  0.153705      -1.87272      -1.41731       1.41731       148.757       150.174    
   9  0.996049     -0.395849E-02 -0.299586E-02  0.299586E-02   148.549       148.552    
  10  0.560813E-01  -2.88095      -2.18036       2.18036       148.856       151.036    
  11  0.188305      -1.66969      -1.26365       1.26365       148.964       150.228    
  12  0.135074      -2.00193      -1.51510       1.51510       149.129       150.645    
  13  0.485175     -0.723245     -0.547365      0.547365       149.307       149.854    
  14  0.690741     -0.369991     -0.280016      0.280016       148.749       149.029    
  15  0.742932     -0.297150     -0.224889      0.224889       149.272       149.497    
  16  0.780541     -0.247768     -0.187516      0.187516       149.126       149.313    
  17  0.518671E-01  -2.95907      -2.23948       2.23948       149.012       151.252    
  18  0.968635     -0.318676E-01 -0.241180E-01  0.241180E-01   148.234       148.259    
  19  0.878004     -0.130104     -0.984650E-01  0.984650E-01   149.580       149.679    
  20  0.868279     -0.141242     -0.106895      0.106895       149.274       149.381    
  21  0.554456     -0.589768     -0.446347      0.446347       149.772       150.219    
  22  0.114030      -2.17129      -1.64328       1.64328       149.818       151.462    
  23  0.397460     -0.922661     -0.698287      0.698287       150.015       150.713    
  24  0.299789      -1.20467     -0.911720      0.911720       150.039       150.951    
  25  0.214585      -1.53905      -1.16478       1.16478       149.969       151.133    
  26  0.583444     -0.538806     -0.407778      0.407778       149.281       149.688    
  27  0.399403     -0.917786     -0.694597      0.694597       149.762       150.457    
  28  0.421825     -0.863165     -0.653259      0.653259       150.154       150.807    
  29  0.102868      -2.27431      -1.72124       1.72124       150.503       152.224    
  30  0.774422     -0.255639     -0.193472      0.193472       150.153       150.346    
  31  0.564329     -0.572118     -0.432989      0.432989       148.996       149.429    
  32  0.206718      -1.57640      -1.19305       1.19305       150.469       151.662    
  33  0.407431     -0.897885     -0.679536      0.679536       150.072       150.751    
  34  0.505624     -0.681961     -0.516121      0.516121       150.497       151.013    
  35  0.451161     -0.795932     -0.602376      0.602376       150.127       150.729    
  36  0.619041     -0.479583     -0.362957      0.362957       150.349       150.712    
  37  0.326941      -1.11798     -0.846105      0.846105       150.694       151.540    
  38  0.750232     -0.287372     -0.217489      0.217489       148.507       148.725    
  39  0.718810     -0.330159     -0.249870      0.249870       149.932       150.182    
  40  0.366798      -1.00294     -0.759046      0.759046       151.177       151.936    
  41  0.467420     -0.760527     -0.575581      0.575581       151.361       151.937    
  42  0.854905     -0.156764     -0.118642      0.118642       151.216       151.335    
  43  0.248161      -1.39368      -1.05476       1.05476       150.890       151.945    
  44  0.201563      -1.60165      -1.21216       1.21216       151.313       152.525    
  45  0.108988      -2.21652      -1.67750       1.67750       151.078       152.756    
  46  0.988176     -0.118946E-01 -0.900202E-02  0.900202E-02   150.536       150.545    
  47  0.639214     -0.447517     -0.338689      0.338689       150.053       150.392    
  48  0.165897E-01  -4.09897      -3.10218       3.10218       148.625       151.727    
  49  0.235415      -1.44641      -1.09467       1.09467       150.944       152.039    
  50  0.140842      -1.96012      -1.48345       1.48345       151.126       152.610    
  51  0.110985      -2.19836      -1.66376       1.66376       149.608       151.272    
  52  0.913750     -0.901977E-01 -0.682633E-01  0.682633E-01   151.180       151.248    
  53  0.841658E-01  -2.47497      -1.87310       1.87310       151.041       152.914    
  54  0.639761     -0.446660     -0.338040      0.338040       151.560       151.898    
  55  0.526985E-01  -2.94317      -2.22744       2.22744       151.287       153.514    
  56  0.523686     -0.646862     -0.489557      0.489557       152.501       152.990    
  57  0.992660     -0.736704E-02 -0.557551E-02  0.557551E-02   152.640       152.646    
  58  0.879505     -0.128396     -0.971725E-01  0.971725E-01   151.607       151.705    
  59  0.535415     -0.624714     -0.472795      0.472795       151.990       152.463    
  60  0.386986     -0.949366     -0.718497      0.718497       151.692       152.411    
  61  0.724451     -0.322341     -0.243953      0.243953       152.547       152.791    
  62  0.461855     -0.772505     -0.584646      0.584646       152.040       152.625    
  63  0.319705      -1.14036     -0.863042      0.863042       151.619       152.482    
  64  0.935782     -0.663723E-01 -0.502318E-01  0.502318E-01   152.374       152.424    
  65  0.461068     -0.774211     -0.585937      0.585937       152.720       153.306    
  66  0.141600      -1.95475      -1.47939       1.47939       151.846       153.325    
  67  0.745515     -0.293681     -0.222263      0.222263       152.382       152.604    
  68  0.902458     -0.102633     -0.776746E-01  0.776746E-01   153.530       153.608    
  69  0.822097     -0.195897     -0.148259      0.148259       150.797       150.945    
  70  0.495466     -0.702257     -0.531481      0.531481       151.389       151.921    
  71  0.401745     -0.911937     -0.690171      0.690171       153.690       154.380    
  72  0.576813E-02  -5.15541      -3.90171       3.90171       152.477       156.379    
  73  0.285471      -1.25362     -0.948759      0.948759       152.717       153.666    
  74  0.420843E-02  -5.47067      -4.14030       4.14030       152.441       156.581    
  75  0.841907     -0.172086     -0.130238      0.130238       154.243       154.373    
loop,thermsimp(1:2)       94  0.169074      0.157036    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    543        148.71          0.87          1.15         25.29          0.19          0.05         27.55
Just calling func    0   0         27.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    544        161.04          0.87          1.15         25.28          0.45          0.05         27.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       94
neval is:      543
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    48.4364      0.500000    
T0,tstep,tfreq (these do not change):             74
current SAtemp,tstepnext are:   0.756818               593
loop is:       95
neval is:      543


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      593
neval,tstepnext:      543     593

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.253064      -1.37411      -1.03995       1.03995       148.113       149.153    
   2  0.229389      -1.47233      -1.11429       1.11429       148.234       149.349    
   3  0.571162     -0.560083     -0.423881      0.423881       148.549       148.973    
   4  0.537902     -0.620079     -0.469287      0.469287       148.541       149.011    
   5  0.112268      -2.18686      -1.65506       1.65506       148.507       150.162    
   6  0.988186     -0.118842E-01 -0.899421E-02  0.899421E-02   148.380       148.389    
   7  0.358165      -1.02676     -0.777071      0.777071       148.637       149.414    
   8  0.768403     -0.263441     -0.199377      0.199377       148.749       148.948    
   9  0.493061     -0.707122     -0.535163      0.535163       148.868       149.403    
  10  0.755030     -0.280998     -0.212665      0.212665       149.126       149.338    
  11  0.380853     -0.965342     -0.730589      0.730589       149.274       150.004    
  12  0.131667      -2.02748      -1.53443       1.53443       148.996       150.530    
  13  0.812799     -0.207272     -0.156867      0.156867       149.272       149.429    
  14  0.390991     -0.939070     -0.710705      0.710705       149.580       150.291    
  15  0.782458     -0.245315     -0.185659      0.185659       149.281       149.466    
  16  0.348518E-01  -3.35665      -2.54037       2.54037       149.307       151.847    
  17  0.671068     -0.398885     -0.301884      0.301884       148.623       148.925    
  18  0.848918     -0.163793     -0.123962      0.123962       148.548       148.672    
  19  0.246224      -1.40151      -1.06069       1.06069       148.757       149.817    
  20  0.548254     -0.601017     -0.454861      0.454861       149.932       150.387    
  21  0.496910     -0.699346     -0.529278      0.529278       149.772       150.302    
  22  0.621299     -0.475942     -0.360202      0.360202       148.964       149.324    
  23  0.222686      -1.50199      -1.13674       1.13674       150.153       151.289    
  24  0.541907     -0.612662     -0.463674      0.463674       150.053       150.517    
  25  0.599206     -0.512150     -0.387604      0.387604       149.762       150.150    
  26  0.147915      -1.91112      -1.44637       1.44637       150.536       151.982    
  27  0.952413     -0.487561E-01 -0.368995E-01  0.368995E-01   149.129       149.166    
  28  0.981186     -0.189927E-01 -0.143740E-01  0.143740E-01   150.349       150.364    
  29  0.560306     -0.579272     -0.438404      0.438404       150.015       150.453    
  30  0.892317     -0.113934     -0.862273E-01  0.862273E-01   150.127       150.213    
  31  0.936237E-03  -6.97364      -5.27778       5.27778       150.072       155.349    
  32  0.367075      -1.00219     -0.758474      0.758474       150.154       150.912    
  33  0.440672     -0.819456     -0.620179      0.620179       150.797       151.417    
  34  0.928002     -0.747214E-01 -0.565506E-01  0.565506E-01   150.039       150.096    
  35  0.424766     -0.856216     -0.648000      0.648000       150.497       151.145    
  36  0.846974     -0.166085     -0.125696      0.125696       148.856       148.981    
  37  0.581252     -0.542571     -0.410628      0.410628       149.969       150.379    
  38  0.316247      -1.15123     -0.871274      0.871274       151.180       152.051    
  39  0.211145E-01  -3.85779      -2.91965       2.91965       149.012       151.932    
  40  0.698864     -0.358299     -0.271167      0.271167       149.608       149.879    
  41  0.616376     -0.483899     -0.366224      0.366224       151.216       151.582    
  42  0.744369     -0.295219     -0.223427      0.223427       149.818       150.042    
  43  0.165839      -1.79674      -1.35981       1.35981       150.694       152.054    
  44  0.605775     -0.501246     -0.379352      0.379352       150.469       150.848    
  45  0.594138     -0.520643     -0.394032      0.394032       151.607       152.001    
  46  0.120602      -2.11526      -1.60087       1.60087       148.625       150.226    
  47  0.614289     -0.487290     -0.368790      0.368790       151.560       151.929    
  48  0.128959E-01  -4.35085      -3.29280       3.29280       151.389       154.682    
  49  0.863875     -0.146327     -0.110743      0.110743       151.177       151.288    
  50  0.984175     -0.159514E-01 -0.120723E-01  0.120723E-01   151.361       151.373    
  51  0.193234      -1.64385      -1.24410       1.24410       150.890       152.134    
  52  0.821829     -0.196223     -0.148505      0.148505       150.944       151.093    
  53  0.513646     -0.666220     -0.504208      0.504208       150.503       151.007    
  54  0.572807     -0.557207     -0.421704      0.421704       151.692       152.114    
  55  0.298452      -1.20915     -0.915105      0.915105       152.374       153.289    
  56  0.604405     -0.503511     -0.381066      0.381066       151.990       152.371    
  57  0.786763     -0.239828     -0.181506      0.181506       151.619       151.800    
  58  0.761650     -0.272268     -0.206057      0.206057       151.313       151.519    
  59  0.970170     -0.302843E-01 -0.229197E-01  0.229197E-01   152.382       152.405    
  60  0.823313     -0.194418     -0.147139      0.147139       151.126       151.273    
  61  0.632020     -0.458835     -0.347255      0.347255       152.040       152.387    
  62  0.146333      -1.92187      -1.45451       1.45451       152.640       154.095    
  63  0.626222     -0.468050     -0.354229      0.354229       151.078       151.433    
  64  0.772069     -0.258681     -0.195774      0.195774       152.547       152.743    
  65  0.265373      -1.32662      -1.00401       1.00401       151.041       152.045    
  66  0.165877      -1.79651      -1.35963       1.35963       152.501       153.861    
  67  0.270922      -1.30593     -0.988348      0.988348       152.720       153.709    
  68  0.993960     -0.605821E-02 -0.458496E-02  0.458496E-02   151.846       151.850    
  69  0.270418      -1.30779     -0.989756      0.989756       151.287       152.277    
  70  0.329078E-01  -3.41404      -2.58381       2.58381       153.530       156.114    
  71  0.993879     -0.613984E-02 -0.464674E-02  0.464674E-02   152.717       152.722    
  72  0.998306     -0.169562E-02 -0.128328E-02  0.128328E-02   154.243       154.244    
  73  0.169594      -1.77435      -1.34286       1.34286       153.690       155.033    
  74  0.761839     -0.272020     -0.205869      0.205869       152.477       152.683    
  75  0.297427E-01  -3.51517      -2.66035       2.66035       148.713       151.374    
loop,thermsimp(1:2)       95   1.03995       1.11429    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    545        148.77          0.87          1.15         25.27          0.08          0.05         27.42
Just calling func    0   0         27.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    546        160.81          0.86          1.13         25.25          0.10          0.05         27.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    148.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.756818               593
loop is:       95
neval is:      545
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   1.43313    

hmean,hstd :    150.365       1.43313    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    150.365       1.43313    
h(1),h(best1),h(np1) :    148.380       148.113       148.769    
htherm(1),htherm(best1),htherm(np1) :    148.389       149.153       156.114    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    547        148.41          0.87          1.15         25.23          0.23          0.05         27.54

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    1.0039      -2.1748       3.2193      -102.61       1.1610      0.31771    
    1.2971      -99.703       3.6185      0.51379E-01   2.1664      -1.2586    
    1.5304       6702.3       2794.3     -0.23876       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       0.0000       0.0000       5879.8    

    917.49     -0.56724      -6.4722      -4.3800      -9.0199       6.2070    
   -15.267      -3.2315       7097.9       0.0000       8902.8      -318.46    
    9079.6      -1798.2       8815.5       4468.0       4938.2      0.26685E-01
   0.14567       0.0000      0.13871     -0.24499     -0.93505E-01  0.11143    

   0.70496E-01 -0.14167E-01 -0.42208     -0.82806       0.0000      0.55839E-01
  -0.74346E-01   0.0000      0.32805E-01  0.68556E-01 -0.16567     -0.12295E-01
  -0.15809E-01 -0.31568E-03 -0.56830      -1.1440       4421.6     -0.96102    
   -1.1128      -2.2964      -2.3786     -0.19450     -0.13471E-01   9.1631    

    8.7136      -16645.      -4.0000     -0.76102      -1.4860       9.2798    
    8.8329      -13614.      -4.0000      0.32745     -0.77357       8.9166    
    9.0335      -21365.      -7.0000     -0.72461     -0.98675       9.0397    
    8.7663      -19628.      -7.0000    
 Function value at centroid =   148.409    

 Minimum found after  546 function evaluations
 Minimum at
   1.00393     -2.17476      3.21926     -102.605      1.16096     0.317708    
   1.29715     -99.7026      3.61850     0.513791E-01  2.16636     -1.25860    
   1.53040      6702.27      2794.26    -0.238758      0.00000      0.00000    
   0.00000     -1.22100     -2.50000      0.00000      0.00000      5879.76    

   917.494    -0.567238     -6.47217     -4.37995     -9.01988      6.20700    
  -15.2671     -3.23153      7097.94      0.00000      8902.76     -318.462    
   9079.58     -1798.23      8815.50      4468.01      4938.19     0.266854E-01
  0.145675      0.00000     0.138710    -0.244985    -0.935051E-01 0.111427    

  0.704964E-01-0.141673E-01-0.422078    -0.828058      0.00000     0.558392E-01
 -0.743462E-01  0.00000     0.328053E-01 0.685564E-01-0.165667    -0.122952E-01
 -0.158094E-01-0.315681E-03-0.568302     -1.14395      4421.62    -0.961020    
  -1.11282     -2.29637     -2.37856    -0.194500    -0.134706E-01  9.16309    

   8.71363     -16645.2     -4.00000    -0.761019     -1.48598      9.27981    
   8.83289     -13614.4     -4.00000     0.327446    -0.773566      8.91663    
   9.03352     -21364.6     -7.00000    -0.724615    -0.986752      9.03972    
   8.76631     -19627.7     -7.00000    
 Function value at minimum =   148.409    
 out of minim now and here is ifault            0
run time:       15050.95
