nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    359.938      0.500000    
Tfreq:   52
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    359.938      0.500000    
Tfreq:   52
 Estimating   52 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2       1199.79          3.96          1.09         21.80          0.16          0.04         27.06
iter,obj,time:      3       1300.11          0.86          1.11         21.91          0.00          0.05         23.94
iter,obj,time:      4       1185.53          0.84          1.11         21.88          0.00          0.05         23.89
iter,obj,time:      5       1229.32          0.86          1.12         21.93          0.00          0.04         23.96
iter,obj,time:      6       1312.42          0.84          1.11         21.90          0.02          0.05         23.91
iter,obj,time:      7       1170.34          0.86          1.11         21.86          0.00          0.05         23.88
iter,obj,time:      8       1308.52          0.86          1.12         21.91          0.02          0.05         23.96
iter,obj,time:      9       1301.53          0.86          1.11         21.88          0.00          0.05         23.90
iter,obj,time:     10       1304.78          0.86          1.11         22.15          0.02          0.05         24.18
iter,obj,time:     11       1289.15          0.86          1.12         21.99          0.00          0.05         24.02
iter,obj,time:     12       1222.56          0.85          1.11         21.89          0.00          0.05         23.89
iter,obj,time:     13       1108.69          0.86          1.11         21.93          0.01          0.05         23.95
iter,obj,time:     14       1209.97          0.86          1.11         21.86          0.00          0.05         23.88
iter,obj,time:     15       1449.59          0.85          1.11         22.06          0.02          0.05         24.08
iter,obj,time:     16       1199.96          0.86          1.12         21.87          0.01          0.05         23.91
iter,obj,time:     17       1199.90          0.85          1.11         21.87          0.00          0.05         23.89
iter,obj,time:     18       1199.79          0.86          1.11         21.94          0.01          0.05         23.97
iter,obj,time:     19       1178.01          0.86          1.11         21.89          0.01          0.05         23.91
iter,obj,time:     20       1220.24          0.84          1.11         21.92          0.00          0.05         23.93
iter,obj,time:     21       1162.70          0.86          1.11         21.90          0.00          0.05         23.93
iter,obj,time:     22       1182.78          0.85          1.11         21.98          0.00          0.05         24.00
iter,obj,time:     23       1147.61          0.86          1.12         22.19          0.00          0.05         24.22
iter,obj,time:     24       1185.57          0.86          1.12         21.89          0.00          0.05         23.91
iter,obj,time:     25       1173.33          0.84          1.11         21.91          0.00          0.05         23.91
iter,obj,time:     26       1174.18          0.86          1.11         21.89          0.00          0.05         23.91
iter,obj,time:     27       1196.20          0.85          1.11         21.88          0.00          0.05         23.89
iter,obj,time:     28       1261.72          0.86          1.11         21.91          0.02          0.05         23.95
iter,obj,time:     29       1190.50          0.86          1.11         21.91          0.00          0.05         23.94
iter,obj,time:     30       1180.16          0.87          1.12         22.01          0.00          0.05         24.05
iter,obj,time:     31       1148.70          0.84          1.11         21.89          0.02          0.05         23.91
iter,obj,time:     32       1210.89          0.86          1.12         21.84          0.01          0.05         23.88
iter,obj,time:     33       1156.03          0.86          1.11         21.98          0.01          0.05         24.00
iter,obj,time:     34       1185.18          0.86          1.12         21.86          0.00          0.05         23.88
iter,obj,time:     35       1171.67          0.84          1.11         22.07          0.00          0.05         24.06
iter,obj,time:     36       1159.55          0.86          1.12         21.88          0.01          0.05         23.91
iter,obj,time:     37       1189.55          0.86          1.11         22.12          0.00          0.05         24.14
iter,obj,time:     38       1207.37          0.86          1.12         22.11          0.01          0.05         24.14
iter,obj,time:     39       1791.19          0.86          1.11         21.88          0.01          0.05         23.91
iter,obj,time:     40       1629.96          0.84          1.11         21.92          0.02          0.05         23.93
iter,obj,time:     41       1122.66          0.86          1.12         21.92          0.02          0.05         23.97
iter,obj,time:     42       1130.23          0.86          1.11         21.90          0.00          0.05         23.92
iter,obj,time:     43       1166.27          0.85          1.10         21.93          0.02          0.05         23.94
iter,obj,time:     44       1199.38          0.86          1.11         21.89          0.01          0.05         23.92
iter,obj,time:     45       1143.60          0.86          1.12         21.90          0.00          0.05         23.93
iter,obj,time:     46       1145.94          0.85          1.11         21.89          0.00          0.05         23.91
iter,obj,time:     47       1306.36          0.86          1.10         21.84          0.11          0.05         23.96
iter,obj,time:     48       1193.47          0.86          1.11         22.24          0.09          0.05         24.34
iter,obj,time:     49       1155.88          0.87          1.11         22.09          0.01          0.05         24.12
iter,obj,time:     50       1219.09          0.84          1.11         21.91          0.01          0.05         23.92
iter,obj,time:     51       1220.91          0.86          1.11         21.84          0.06          0.05         23.92
iter,obj,time:     52       1209.55          0.86          1.10         21.78          0.11          0.05         23.90
iter,obj,time:     53       1139.93          0.86          1.11         21.94          0.00          0.04         23.96
iter,obj,time:     54       1140.92          0.85          1.12         21.86          0.00          0.05         23.88

    1    1199.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    2    1300.1      -0.6850     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    3    1185.5        1.315     -4.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    4    1229.3        1.315     -2.102      1.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    5    1312.4        1.315     -2.102      3.011     -102.6    -0.9390    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    6    1170.3        1.315     -2.102      3.011     -102.6      1.061    
                      -1.148      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    7    1308.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518    -0.5920     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    8    1301.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      1.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    9    1304.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     -1.541    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   10    1289.1        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                      0.1570     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   11    1222.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -3.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   12    1108.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -1.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   13    1210.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500    -0.9650     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   14    1449.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965      1.382     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   15    1200.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -3.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   16    1199.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      11.41    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   17    1199.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -9.390     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   18    1178.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3110     0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   19    1220.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.5544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   20    1162.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544     0.2665     0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   21    1182.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.4510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   22    1147.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486     0.1554     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   23    1185.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.4394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   24    1173.3        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.3804     0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   25    1174.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.3916    



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   26    1196.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                      0.4970E-01-0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   27    1261.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503      0.000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   28    1190.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.3846    -0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   29    1180.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01 0.2607    

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   30    1148.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                      0.2530     0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   31    1210.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.4431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   32    1156.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116     0.1859     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   33    1185.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.5695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   34    1171.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3329     0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   35    1159.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.3015    -0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   36    1189.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.3074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   37    1207.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074    -0.9290      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   38    1791.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   39    1630.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239    -0.1590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   40    1122.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.604      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   41    1130.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      9.120    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   42    1166.3        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                      0.5712     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   43    1199.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -1.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   44    1143.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.754      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   45    1145.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      9.208    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   46    1306.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000      1.585    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   47    1193.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846     0.6307      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   48    1155.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      9.265      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   49    1219.1        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.457    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   50    1220.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000     0.3511    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   51    1209.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489     0.3668      9.076    

                       8.777    -0.1891E+05 -6.000    

   52    1139.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.476    

                       8.777    -0.1891E+05 -6.000    

   53    1140.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       9.177    -0.1891E+05 -6.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          53          53

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        1
neval is:       53


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       53     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -531.238       531.238       1199.79       1731.03    
   2  0.709707     -0.342904      -123.424       123.424       1300.11       1423.53    
   3  0.151889      -1.88460      -678.340       678.340       1185.53       1863.87    
   4  0.456170E-01  -3.08747      -1111.30       1111.30       1229.32       2340.61    
   5  0.882557     -0.124932      -44.9677       44.9677       1312.42       1357.38    
   6  0.711292     -0.340672      -122.621       122.621       1170.34       1292.96    
   7  0.241669      -1.42019      -511.179       511.179       1308.52       1819.70    
   8  0.682871     -0.381450      -137.298       137.298       1301.53       1438.83    
   9  0.500657     -0.691834      -249.017       249.017       1304.78       1553.80    
  10  0.494633     -0.703939      -253.374       253.374       1289.15       1542.52    
  11  0.437126     -0.827535      -297.861       297.861       1222.56       1520.42    
  12  0.462981     -0.770069      -277.177       277.177       1108.69       1385.87    
  13  0.988878     -0.111840E-01  -4.02554       4.02554       1209.97       1213.99    
  14  0.878158     -0.129929      -46.7664       46.7664       1449.59       1496.36    
  15  0.825605     -0.191638      -68.9779       68.9779       1199.96       1268.94    
  16  0.966665     -0.339033E-01  -12.2031       12.2031       1199.90       1212.10    
  17  0.340930      -1.07608      -387.321       387.321       1199.79       1587.11    
  18  0.288920      -1.24161      -446.901       446.901       1178.01       1624.92    
  19  0.442843     -0.814539      -293.184       293.184       1220.24       1513.42    
  20  0.878635     -0.129386      -46.5708       46.5708       1162.70       1209.27    
  21  0.198777E-01  -3.91816      -1410.29       1410.29       1182.78       2593.07    
  22  0.315829      -1.15255      -414.848       414.848       1147.61       1562.46    
  23  0.208690      -1.56690      -563.988       563.988       1185.57       1749.56    
  24  0.849393     -0.163234      -58.7540       58.7540       1173.33       1232.09    
  25  0.945818     -0.557056E-01  -20.0506       20.0506       1174.18       1194.23    
  26  0.567839     -0.565917      -203.695       203.695       1196.20       1399.89    
  27  0.718388     -0.330745      -119.048       119.048       1261.72       1380.77    
  28  0.115406      -2.15930      -777.213       777.213       1190.50       1967.71    
  29  0.659869E-01  -2.71830      -978.419       978.419       1180.16       2158.58    
  30  0.171393      -1.76380      -634.858       634.858       1148.70       1783.55    
  31  0.161953      -1.82045      -655.249       655.249       1210.89       1866.14    
  32  0.455406     -0.786566      -283.115       283.115       1156.03       1439.15    
  33  0.788693     -0.237378      -85.4412       85.4412       1185.18       1270.62    
  34  0.157754      -1.84672      -664.704       664.704       1171.67       1836.37    
  35  0.126279      -2.06926      -744.805       744.805       1159.55       1904.35    
  36  0.646962     -0.435467      -156.741       156.741       1189.55       1346.29    
  37  0.730769     -0.313658      -112.897       112.897       1207.37       1320.27    
  38  0.443446E-01  -3.11577      -1121.48       1121.48       1791.19       2912.67    
  39  0.219048      -1.51847      -546.553       546.553       1629.96       2176.51    
  40  0.311223E-01  -3.46983      -1248.92       1248.92       1122.66       2371.58    
  41  0.864417     -0.145700      -52.4430       52.4430       1130.23       1182.67    
  42  0.372606     -0.987233      -355.343       355.343       1166.27       1521.61    
  43  0.599250E-01  -2.81466      -1013.10       1013.10       1199.38       2212.48    
  44  0.250528      -1.38418      -498.220       498.220       1143.60       1641.82    
  45  0.404968E-01  -3.20653      -1154.15       1154.15       1145.94       2300.10    
  46  0.792822     -0.232156      -83.5618       83.5618       1306.36       1389.92    
  47  0.826691     -0.190324      -68.5048       68.5048       1193.47       1261.97    
  48  0.258424      -1.35316      -487.052       487.052       1155.88       1642.93    
  49  0.713620     -0.337405      -121.445       121.445       1219.09       1340.53    
  50  0.936186     -0.659413E-01  -23.7348       23.7348       1220.91       1244.65    
  51  0.655367E-01  -2.72514      -980.883       980.883       1209.55       2190.43    
  52  0.178790      -1.72154      -619.649       619.649       1139.93       1759.58    
  53  0.110644E-01  -4.50403      -1621.17       1621.17       1140.92       2762.09    
loop,thermsimp(1:2)        1   531.238       123.424    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     55       1145.94          0.84          1.15         21.88          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     56       1190.25          0.84          1.14         21.77          0.09          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1145.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        1
neval is:       55
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        2
neval is:       55


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       55     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -375.071       375.071       1130.23       1505.30    
   2  0.440787     -0.819193      -294.859       294.859       1174.18       1469.04    
   3  0.685789     -0.377185      -135.763       135.763       1162.70       1298.46    
   4  0.673104     -0.395856      -142.484       142.484       1199.90       1342.38    
   5  0.655536     -0.422301      -152.002       152.002       1209.97       1361.97    
   6  0.422838     -0.860766      -309.822       309.822       1173.33       1483.15    
   7  0.300870      -1.20108      -432.313       432.313       1220.91       1653.23    
   8  0.776987     -0.252331      -90.8235       90.8235       1193.47       1284.29    
   9  0.170551      -1.76872      -636.629       636.629       1199.96       1836.59    
  10  0.587497     -0.531884      -191.445       191.445       1185.18       1376.63    
  11  0.250425      -1.38459      -498.368       498.368       1170.34       1668.71    
  12  0.776362E-01  -2.55572      -919.901       919.901       1207.37       2127.27    
  13  0.766647     -0.265729      -95.6459       95.6459       1219.09       1314.73    
  14  0.480193     -0.733568      -264.039       264.039       1189.55       1453.58    
  15  0.434643     -0.833231      -299.911       299.911       1312.42       1612.33    
  16  0.815924E-01  -2.50602      -902.011       902.011       1261.72       2163.73    
  17  0.724257E-01  -2.62519      -944.907       944.907       1108.69       2053.60    
  18  0.573795     -0.555483      -199.939       199.939       1306.36       1506.30    
  19  0.196096      -1.62915      -586.393       586.393       1196.20       1782.59    
  20  0.240673      -1.42432      -512.665       512.665       1300.11       1812.77    
  21  0.194228      -1.63872      -589.839       589.839       1301.53       1891.37    
  22  0.236387      -1.44229      -519.134       519.134       1156.03       1675.17    
  23  0.261662      -1.34070      -482.569       482.569       1449.59       1932.16    
  24  0.146321      -1.92195      -691.784       691.784       1220.24       1912.02    
  25  0.169637      -1.77410      -638.564       638.564       1222.56       1861.12    
  26  0.886717     -0.120229      -43.2750       43.2750       1166.27       1209.54    
  27  0.253412      -1.37274      -494.101       494.101       1289.15       1783.25    
  28  0.470820     -0.753279      -271.134       271.134       1304.78       1575.91    
  29  0.329871      -1.10905      -399.191       399.191       1147.61       1546.80    
  30  0.726784     -0.319126      -114.865       114.865       1199.79       1314.66    
  31  0.612351     -0.490450      -176.532       176.532       1178.01       1354.55    
  32  0.146573      -1.92023      -691.164       691.164       1143.60       1834.77    
  33  0.812633     -0.207476      -74.6784       74.6784       1155.88       1230.56    
  34  0.486789     -0.719925      -259.128       259.128       1199.79       1458.92    
  35  0.653508     -0.425400      -153.118       153.118       1185.57       1338.69    
  36  0.180127      -1.71409      -616.967       616.967       1139.93       1756.90    
  37  0.155218      -1.86292      -670.537       670.537       1148.70       1819.23    
  38  0.830615     -0.185589      -66.8005       66.8005       1308.52       1375.33    
  39  0.728345     -0.316980      -114.093       114.093       1171.67       1285.76    
  40  0.262318      -1.33820      -481.668       481.668       1185.53       1667.20    
  41  0.234222      -1.45148      -522.444       522.444       1210.89       1733.34    
  42  0.250201      -1.38549      -498.691       498.691       1159.55       1658.24    
  43  0.898433     -0.107103      -38.5506       38.5506       1190.50       1229.05    
  44  0.580277     -0.544250      -195.896       195.896       1180.16       1376.06    
  45  0.823617     -0.194050      -69.8458       69.8458       1629.96       1699.80    
  46  0.820676     -0.197627      -71.1334       71.1334       1209.55       1280.68    
  47  0.502494     -0.688171      -247.699       247.699       1199.38       1447.08    
  48  0.751016     -0.286329      -103.061       103.061       1145.94       1249.00    
  49  0.360461      -1.02037      -367.270       367.270       1229.32       1596.59    
  50  0.948712     -0.526497E-01  -18.9506       18.9506       1122.66       1141.61    
  51  0.452918     -0.792045      -285.087       285.087       1182.78       1467.87    
  52  0.182886      -1.69889      -611.497       611.497       1140.92       1752.42    
  53  0.986780     -0.133085E-01  -4.79024       4.79024       1145.94       1150.73    
loop,thermsimp(1:2)        2   375.071       294.859    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     57       1139.30          0.85          1.15         21.90          0.02          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     58       1206.72          0.86          1.15         22.17          0.02          0.05         24.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1139.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        2
neval is:       57
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        3
neval is:       57


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       57     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -642.273       642.273       1122.66       1764.93    
   2  0.274399      -1.29317      -465.462       465.462       1145.94       1611.40    
   3  0.597410E-01  -2.81774      -1014.21       1014.21       1166.27       2180.48    
   4  0.283115E-01  -3.56449      -1282.99       1282.99       1190.50       2473.49    
   5  0.901069     -0.104174      -37.4962       37.4962       1155.88       1193.37    
   6  0.717939     -0.331371      -119.273       119.273       1145.94       1265.22    
   7  0.294866      -1.22123      -439.568       439.568       1209.55       1649.12    
   8  0.935651     -0.665127E-01  -23.9405       23.9405       1193.47       1217.41    
   9  0.314362      -1.15721      -416.524       416.524       1171.67       1588.19    
  10  0.807729     -0.213529      -76.8572       76.8572       1162.70       1239.55    
  11  0.757191     -0.278140      -100.113       100.113       1199.79       1299.91    
  12  0.508654     -0.675987      -243.313       243.313       1219.09       1462.40    
  13  0.722060     -0.325647      -117.213       117.213       1185.57       1302.78    
  14  0.424032     -0.857947      -308.808       308.808       1199.90       1508.71    
  15  0.786154     -0.240602      -86.6019       86.6019       1178.01       1264.62    
  16  0.399894     -0.916557      -329.903       329.903       1209.97       1539.87    
  17  0.757416     -0.277843      -100.006       100.006       1308.52       1408.53    
  18  0.637270     -0.450563      -162.175       162.175       1180.16       1342.34    
  19  0.586055     -0.534342      -192.330       192.330       1185.18       1377.51    
  20  0.821724     -0.196351      -70.6742       70.6742       1199.38       1270.06    
  21  0.921558     -0.816897E-01  -29.4032       29.4032       1189.55       1218.95    
  22  0.985596     -0.145083E-01  -5.22210       5.22210       1199.79       1205.02    
  23  0.257194      -1.35793      -488.769       488.769       1182.78       1671.55    
  24  0.921438E-01  -2.38440      -858.238       858.238       1174.18       2032.42    
  25  0.114653      -2.16584      -779.569       779.569       1173.33       1952.90    
  26  0.379827     -0.968040      -348.434       348.434       1130.23       1478.66    
  27  0.541451     -0.613503      -220.823       220.823       1306.36       1527.18    
  28  0.544274     -0.608302      -218.951       218.951       1147.61       1366.56    
  29  0.934365     -0.678883E-01  -24.4356       24.4356       1304.78       1329.21    
  30  0.266419E-01  -3.62527      -1304.87       1304.87       1229.32       2534.19    
  31  0.919572     -0.838466E-01  -30.1796       30.1796       1312.42       1342.60    
  32  0.864639     -0.145444      -52.3507       52.3507       1220.91       1273.26    
  33  0.341156      -1.07542      -387.083       387.083       1159.55       1546.63    
  34  0.803175     -0.219182      -78.8920       78.8920       1185.53       1264.42    
  35  0.699424     -0.357498      -128.677       128.677       1170.34       1299.02    
  36  0.223868E-01  -3.79928      -1367.51       1367.51       1156.03       2523.54    
  37  0.605689     -0.501389      -180.469       180.469       1629.96       1810.43    
  38  0.312349      -1.16363      -418.836       418.836       1210.89       1629.73    
  39  0.437501     -0.826675      -297.552       297.552       1140.92       1438.47    
  40  0.303330      -1.19293      -429.382       429.382       1139.93       1569.31    
  41  0.129735      -2.04226      -735.086       735.086       1196.20       1931.29    
  42  0.954352     -0.467224E-01  -16.8172       16.8172       1289.15       1305.96    
  43  0.519807     -0.654297      -235.506       235.506       1300.11       1535.61    
  44  0.950560     -0.507036E-01  -18.2501       18.2501       1148.70       1166.95    
  45  0.443941     -0.812064      -292.293       292.293       1143.60       1435.90    
  46  0.911446     -0.927229E-01  -33.3745       33.3745       1199.96       1233.33    
  47  0.782475     -0.245293      -88.2902       88.2902       1222.56       1310.85    
  48  0.412534     -0.885438      -318.703       318.703       1301.53       1620.24    
  49  0.843850     -0.169780      -61.1104       61.1104       1220.24       1281.35    
  50  0.149432      -1.90091      -684.211       684.211       1449.59       2133.80    
  51  0.292747      -1.22845      -442.165       442.165       1108.69       1550.86    
  52  0.579908E-02  -5.15006      -1853.70       1853.70       1207.37       3061.07    
  53  0.164431      -1.80526      -649.782       649.782       1139.30       1789.08    
loop,thermsimp(1:2)        3   642.273       465.462    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     59       1132.94          0.86          1.15         21.82          0.02          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     60       1097.97          0.84          1.14         21.84          0.05          0.05         23.92
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1097.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        3
neval is:       59
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        4
neval is:       59


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       59     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -44.6906       44.6906       1148.70       1193.39    
   2  0.114178      -2.16999      -781.063       781.063       1155.88       1936.94    
   3  0.217017      -1.52778      -549.905       549.905       1199.79       1749.70    
   4  0.138317      -1.97821      -712.031       712.031       1193.47       1905.50    
   5  0.832728     -0.183048      -65.8859       65.8859       1189.55       1255.43    
   6  0.390825     -0.939496      -338.160       338.160       1199.96       1538.12    
   7  0.283633      -1.26007      -453.549       453.549       1162.70       1616.24    
   8  0.725809     -0.320468      -115.349       115.349       1185.53       1300.88    
   9  0.506121     -0.680979      -245.110       245.110       1178.01       1423.12    
  10  0.216234      -1.53139      -551.207       551.207       1145.94       1697.15    
  11  0.637942     -0.449509      -161.795       161.795       1199.38       1361.18    
  12  0.536707     -0.622302      -223.990       223.990       1220.91       1444.90    
  13  0.231844      -1.46169      -526.118       526.118       1220.24       1746.36    
  14  0.491379     -0.710540      -255.750       255.750       1170.34       1426.09    
  15  0.825774     -0.191434      -68.9045       68.9045       1199.79       1268.70    
  16  0.671593     -0.398102      -143.292       143.292       1185.57       1328.86    
  17  0.549103     -0.599470      -215.772       215.772       1289.15       1504.92    
  18  0.659287     -0.416597      -149.949       149.949       1222.56       1372.50    
  19  0.205012      -1.58469      -570.389       570.389       1304.78       1875.17    
  20  0.400541E-02  -5.52011      -1986.90       1986.90       1180.16       3167.06    
  21  0.750831     -0.286575      -103.149       103.149       1312.42       1415.56    
  22  0.619921     -0.478162      -172.109       172.109       1147.61       1319.72    
  23  0.435226     -0.831889      -299.428       299.428       1185.18       1484.61    
  24  0.460974     -0.774414      -278.741       278.741       1308.52       1587.27    
  25  0.891582E-01  -2.41734      -870.093       870.093       1143.60       2013.70    
  26  0.589618E-01  -2.83087      -1018.94       1018.94       1140.92       2159.85    
  27  0.541391     -0.613613      -220.863       220.863       1219.09       1439.95    
  28  0.545108E-01  -2.90936      -1047.19       1047.19       1130.23       2177.42    
  29  0.744722     -0.294744      -106.090       106.090       1199.90       1305.99    
  30  0.712477     -0.339008      -122.022       122.022       1306.36       1428.38    
  31  0.563836     -0.572992      -206.241       206.241       1300.11       1506.35    
  32  0.161455      -1.82353      -656.357       656.357       1209.97       1866.32    
  33  0.640738     -0.445135      -160.221       160.221       1159.55       1319.77    
  34  0.157494      -1.84837      -665.297       665.297       1108.69       1773.99    
  35  0.695323     -0.363378      -130.794       130.794       1139.93       1270.72    
  36  0.792798     -0.232186      -83.5727       83.5727       1171.67       1255.24    
  37  0.940634     -0.612017E-01  -22.0288       22.0288       1145.94       1167.97    
  38  0.750008     -0.287672      -103.544       103.544       1301.53       1405.08    
  39  0.298939E-01  -3.51010      -1263.42       1263.42       1210.89       2474.31    
  40  0.633510     -0.456480      -164.304       164.304       1209.55       1373.85    
  41  0.465723     -0.764164      -275.052       275.052       1182.78       1457.83    
  42  0.916259     -0.874560E-01  -31.4787       31.4787       1122.66       1154.14    
  43  0.451376     -0.795456      -286.315       286.315       1139.30       1425.61    
  44  0.414090     -0.881672      -317.347       317.347       1629.96       1947.30    
  45  0.273092      -1.29795      -467.180       467.180       1196.20       1663.38    
  46  0.361379      -1.01783      -366.355       366.355       1173.33       1539.69    
  47  0.548848     -0.599934      -215.939       215.939       1174.18       1390.12    
  48  0.832309     -0.183552      -66.0674       66.0674       1449.59       1515.66    
  49  0.673017     -0.395985      -142.530       142.530       1166.27       1308.80    
  50  0.692516     -0.367425      -132.250       132.250       1190.50       1322.75    
  51  0.354468E-01  -3.33972      -1202.09       1202.09       1156.03       2358.13    
  52  0.987850     -0.122240E-01  -4.39987       4.39987       1229.32       1233.71    
  53  0.659676     -0.416007      -149.737       149.737       1097.97       1247.71    
loop,thermsimp(1:2)        4   44.6906       781.063    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     61       1178.26          0.85          1.15         21.82          0.02          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     62       1390.12          0.85          1.14         21.81          0.05          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   60    1178.3        1.226     -2.191      2.922     -102.6     0.9717    
                      0.7625      1.319     -99.70      3.463     0.3695    

                       2.068     -2.040      1.540      7000.      7000.    

                      -1.955      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.742     -3.395     -8.409      6.636    

                      -14.17     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2445E-01 0.2678    -0.2008E-01 0.1644    

                     -0.2486    -0.1312     0.1528     0.9385E-01 0.1050    



                     -0.4280    -0.5199      0.000     0.9797E-01-0.3374    

                     -0.3357E-01 0.1565    -0.7116    -0.1007     0.2829    

                      0.4628E-01 0.1493E-01-0.5940     -1.263      7000.    



                      -1.282     -1.114     -2.142     -1.982    -0.3807    

                     -0.3252      9.222      8.738    -0.1672E+05 -6.000    

                     -0.3841     -2.336      9.372      8.826    -0.1969E+05



                      -6.000     0.6293    -0.3246      8.883      9.075    

                     -0.1944E+05 -6.000    -0.6042    -0.5885      9.094    

                       8.795    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1178.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        4
neval is:       61
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        5
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       61     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -11.6360       11.6360       1122.66       1134.29    
   2  0.384676     -0.955353      -343.868       343.868       1145.94       1489.81    
   3  0.472770     -0.749146      -269.646       269.646       1148.70       1418.34    
   4  0.131186      -2.03114      -731.083       731.083       1229.32       1960.40    
   5  0.387497     -0.948046      -341.238       341.238       1097.97       1439.21    
   6  0.474858     -0.744739      -268.060       268.060       1171.67       1439.73    
   7  0.654056     -0.424563      -152.816       152.816       1189.55       1342.36    
   8  0.375266     -0.980119      -352.782       352.782       1199.79       1552.58    
   9  0.605577     -0.501574      -180.535       180.535       1139.93       1320.46    
  10  0.485605     -0.722360      -260.005       260.005       1185.53       1445.53    
  11  0.503843     -0.685490      -246.734       246.734       1199.90       1446.63    
  12  0.374521     -0.982108      -353.498       353.498       1166.27       1519.76    
  13  0.955542E-01  -2.34806      -845.157       845.157       1147.61       1992.77    
  14  0.902567     -0.102512      -36.8980       36.8980       1159.55       1196.45    
  15  0.347215      -1.05781      -380.746       380.746       1190.50       1571.24    
  16  0.893138     -0.113014      -40.6781       40.6781       1185.57       1226.25    
  17  0.561145     -0.577776      -207.963       207.963       1199.38       1407.34    
  18  0.667287     -0.404536      -145.608       145.608       1222.56       1368.16    
  19  0.601102     -0.508991      -183.205       183.205       1209.55       1392.75    
  20  0.569928     -0.562245      -202.373       202.373       1174.18       1376.55    
  21  0.655926     -0.421708      -151.789       151.789       1301.53       1453.32    
  22  0.355892      -1.03313      -371.862       371.862       1312.42       1684.28    
  23  0.208013      -1.57015      -565.158       565.158       1178.01       1743.17    
  24  0.879772     -0.128093      -46.1055       46.1055       1139.30       1185.40    
  25  0.114206E-01  -4.47233      -1609.76       1609.76       1170.34       2780.11    
  26  0.950245     -0.510357E-01  -18.3697       18.3697       1306.36       1324.73    
  27  0.321268      -1.13548      -408.702       408.702       1219.09       1627.79    
  28  0.379005     -0.970207      -349.214       349.214       1220.91       1570.13    
  29  0.117960      -2.13741      -769.336       769.336       1182.78       1952.12    
  30  0.822558     -0.195337      -70.3091       70.3091       1185.18       1255.49    
  31  0.671085     -0.398860      -143.565       143.565       1289.15       1432.71    
  32  0.220279      -1.51286      -544.536       544.536       1300.11       1844.64    
  33  0.836335     -0.178727      -64.3305       64.3305       1449.59       1513.92    
  34  0.982442E-01  -2.32030      -835.164       835.164       1199.96       2035.12    
  35  0.912526     -0.915389E-01  -32.9483       32.9483       1173.33       1206.28    
  36  0.758802     -0.276015      -99.3481       99.3481       1308.52       1407.87    
  37  0.562651     -0.575096      -206.999       206.999       1162.70       1369.69    
  38  0.248142      -1.39375      -501.665       501.665       1196.20       1697.86    
  39  0.864881     -0.145163      -52.2497       52.2497       1145.94       1198.19    
  40  0.495151     -0.702893      -252.998       252.998       1220.24       1473.24    
  41  0.112352E-01  -4.48870      -1615.65       1615.65       1199.79       2815.45    
  42  0.745500     -0.293700      -105.714       105.714       1108.69       1214.41    
  43  0.405071     -0.903693      -325.273       325.273       1209.97       1535.24    
  44  0.617259     -0.482466      -173.658       173.658       1304.78       1478.44    
  45  0.992755     -0.727089E-02  -2.61707       2.61707       1193.47       1196.08    
  46  0.888739     -0.117952      -42.4555       42.4555       1155.88       1198.33    
  47  0.976701     -0.235748E-01  -8.48546       8.48546       1629.96       1638.44    
  48  0.461976     -0.772242      -277.959       277.959       1143.60       1421.56    
  49  0.150581      -1.89325      -681.453       681.453       1140.92       1822.37    
  50  0.726286E-01  -2.62240      -943.900       943.900       1130.23       2074.13    
  51  0.280837      -1.26998      -457.114       457.114       1156.03       1613.15    
  52  0.727959     -0.317510      -114.284       114.284       1210.89       1325.18    
  53  0.565225     -0.570532      -205.356       205.356       1178.26       1383.62    
loop,thermsimp(1:2)        5   11.6360       343.868    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     63       1119.93          0.85          1.15         21.86          0.01          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     64       1071.52          0.86          1.14         21.81          0.10          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1071.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        5
neval is:       63
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        6
neval is:       63


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       63     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -77.5241       77.5241       1122.66       1200.18    
   2  0.337878      -1.08507      -390.558       390.558       1139.30       1529.85    
   3  0.930612     -0.719127E-01  -25.8841       25.8841       1193.47       1219.35    
   4  0.843645     -0.170024      -61.1980       61.1980       1159.55       1220.75    
   5  0.757799     -0.277337      -99.8240       99.8240       1145.94       1245.77    
   6  0.627925     -0.465335      -167.492       167.492       1155.88       1323.37    
   7  0.412314     -0.885971      -318.894       318.894       1173.33       1492.23    
   8  0.282274      -1.26488      -455.277       455.277       1108.69       1563.97    
   9  0.426609E-01  -3.15447      -1135.41       1135.41       1185.57       2320.98    
  10  0.484876     -0.723862      -260.545       260.545       1185.18       1445.73    
  11  0.372210     -0.988296      -355.725       355.725       1139.93       1495.65    
  12  0.740507     -0.300421      -108.133       108.133       1306.36       1414.49    
  13  0.361519      -1.01744      -366.216       366.216       1210.89       1577.11    
  14  0.421034     -0.865042      -311.361       311.361       1189.55       1500.91    
  15  0.780595     -0.247699      -89.1564       89.1564       1222.56       1311.71    
  16  0.758410     -0.276531      -99.5339       99.5339       1162.70       1262.23    
  17  0.522921E-01  -2.95091      -1062.14       1062.14       1174.18       2236.33    
  18  0.609673     -0.494833      -178.109       178.109       1178.26       1356.37    
  19  0.204029      -1.58949      -572.118       572.118       1209.55       1781.67    
  20  0.516385     -0.660902      -237.884       237.884       1199.38       1437.26    
  21  0.323918      -1.12726      -405.745       405.745       1308.52       1714.27    
  22  0.671820     -0.397765      -143.171       143.171       1148.70       1291.87    
  23  0.850344     -0.162114      -58.3509       58.3509       1143.60       1201.96    
  24  0.515631     -0.662364      -238.410       238.410       1289.15       1527.56    
  25  0.919408     -0.840249E-01  -30.2438       30.2438       1097.97       1128.22    
  26  0.516519     -0.660643      -237.790       237.790       1171.67       1409.46    
  27  0.986900     -0.131869E-01  -4.74645       4.74645       1185.53       1190.28    
  28  0.127351      -2.06081      -741.763       741.763       1199.90       1941.66    
  29  0.775028E-01  -2.55744      -920.520       920.520       1301.53       2222.05    
  30  0.778307     -0.250634      -90.2127       90.2127       1220.24       1310.45    
  31  0.548570     -0.600441      -216.121       216.121       1304.78       1520.90    
  32  0.191672      -1.65197      -594.607       594.607       1145.94       1740.54    
  33  0.593733     -0.521326      -187.645       187.645       1449.59       1637.23    
  34  0.612853     -0.489631      -176.237       176.237       1166.27       1342.50    
  35  0.872749     -0.136107      -48.9900       48.9900       1209.97       1258.96    
  36  0.291105E-01  -3.53666      -1272.98       1272.98       1199.79       2472.77    
  37  0.310804      -1.16859      -420.621       420.621       1220.91       1641.53    
  38  0.238051      -1.43527      -516.608       516.608       1190.50       1707.10    
  39  0.600295     -0.510334      -183.688       183.688       1156.03       1339.72    
  40  0.856575     -0.154813      -55.7231       55.7231       1219.09       1274.81    
  41  0.127990      -2.05580      -739.962       739.962       1629.96       2369.92    
  42  0.390396E-01  -3.24318      -1167.34       1167.34       1312.42       2479.76    
  43  0.469298E-01  -3.05910      -1101.09       1101.09       1196.20       2297.29    
  44  0.170208      -1.77073      -637.354       637.354       1178.01       1815.37    
  45  0.457801     -0.781320      -281.227       281.227       1140.92       1422.15    
  46  0.451589     -0.794982      -286.144       286.144       1300.11       1586.25    
  47  0.601844     -0.507757      -182.761       182.761       1182.78       1365.54    
  48  0.923684     -0.793857E-01  -28.5739       28.5739       1229.32       1257.89    
  49  0.113154      -2.17901      -784.307       784.307       1147.61       1931.92    
  50  0.652894     -0.426340      -153.456       153.456       1199.96       1353.42    
  51  0.600010     -0.510809      -183.859       183.859       1130.23       1314.09    
  52  0.768679     -0.263082      -94.6932       94.6932       1170.34       1265.04    
  53  0.999310     -0.690144E-03 -0.248409      0.248409       1071.52       1071.77    
loop,thermsimp(1:2)        6   77.5241       390.558    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     65       1127.65          0.85          1.15         21.84          0.01          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     66       1245.55          0.84          1.14         21.83          0.03          0.05         23.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1127.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        6
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        7
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       65     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -770.085       770.085       1071.52       1841.61    
   2  0.421875     -0.863045      -310.643       310.643       1097.97       1408.62    
   3  0.700103     -0.356528      -128.328       128.328       1185.53       1313.86    
   4  0.209367      -1.56367      -562.823       562.823       1122.66       1685.48    
   5  0.117251      -2.14344      -771.504       771.504       1143.60       1915.11    
   6  0.898330     -0.107218      -38.5917       38.5917       1193.47       1232.06    
   7  0.209806      -1.56157      -562.069       562.069       1159.55       1721.62    
   8  0.917155     -0.864790E-01  -31.1271       31.1271       1145.94       1177.07    
   9  0.120514E-01  -4.41857      -1590.41       1590.41       1229.32       2819.73    
  10  0.189983      -1.66082      -597.793       597.793       1209.97       1807.76    
  11  0.257131      -1.35817      -488.856       488.856       1162.70       1651.55    
  12  0.913158E-01  -2.39343      -861.487       861.487       1170.34       2031.83    
  13  0.336531      -1.08906      -391.996       391.996       1219.09       1611.08    
  14  0.318351      -1.14460      -411.985       411.985       1148.70       1560.68    
  15  0.919606     -0.838101E-01  -30.1664       30.1664       1220.24       1250.40    
  16  0.719771E-01  -2.63141      -947.143       947.143       1222.56       2169.70    
  17  0.788730E-01  -2.53992      -914.212       914.212       1130.23       2044.44    
  18  0.905929     -0.987941E-01  -35.5597       35.5597       1155.88       1191.44    
  19  0.665501     -0.407215      -146.572       146.572       1156.03       1302.61    
  20  0.812159     -0.208059      -74.8885       74.8885       1166.27       1241.15    
  21  0.412726E-01  -3.18756      -1147.32       1147.32       1199.96       2347.28    
  22  0.256064      -1.36233      -490.353       490.353       1178.26       1668.62    
  23  0.277519      -1.28187      -461.392       461.392       1182.78       1644.17    
  24  0.279550      -1.27457      -458.767       458.767       1171.67       1630.43    
  25  0.857884     -0.153286      -55.1735       55.1735       1306.36       1361.53    
  26  0.205158      -1.58398      -570.133       570.133       1140.92       1711.05    
  27  0.482085     -0.729635      -262.623       262.623       1199.38       1462.00    
  28  0.494966E-01  -3.00585      -1081.92       1081.92       1185.18       2267.10    
  29  0.338791      -1.08237      -389.587       389.587       1173.33       1562.92    
  30  0.249491E-01  -3.69092      -1328.50       1328.50       1139.93       2468.43    
  31  0.480710     -0.732491      -263.651       263.651       1189.55       1453.20    
  32  0.908951E-01  -2.39805      -863.149       863.149       1304.78       2167.93    
  33  0.283223      -1.26152      -454.070       454.070       1289.15       1743.22    
  34  0.277734      -1.28109      -461.113       461.113       1139.30       1600.41    
  35  0.504407     -0.684372      -246.332       246.332       1108.69       1355.03    
  36  0.251881      -1.37880      -496.282       496.282       1210.89       1707.17    
  37  0.568193     -0.565294      -203.471       203.471       1300.11       1503.58    
  38  0.186135      -1.68128      -605.157       605.157       1449.59       2054.75    
  39  0.964582     -0.360604E-01  -12.9795       12.9795       1220.91       1233.89    
  40  0.493045     -0.707155      -254.532       254.532       1190.50       1445.03    
  41  0.477950     -0.738248      -265.724       265.724       1308.52       1574.25    
  42  0.114879      -2.16388      -778.861       778.861       1145.94       1924.80    
  43  0.324003      -1.12700      -405.650       405.650       1209.55       1615.20    
  44  0.720573     -0.327708      -117.955       117.955       1178.01       1295.97    
  45  0.934913     -0.673019E-01  -24.2245       24.2245       1147.61       1171.84    
  46  0.516467     -0.660745      -237.827       237.827       1199.90       1437.73    
  47  0.351513      -1.04551      -376.318       376.318       1301.53       1677.85    
  48  0.310221      -1.17047      -421.297       421.297       1174.18       1595.48    
  49  0.467571     -0.760204      -273.626       273.626       1196.20       1469.83    
  50  0.700644     -0.355756      -128.050       128.050       1185.57       1313.62    
  51  0.608579E-01  -2.79921      -1007.54       1007.54       1629.96       2637.50    
  52  0.360106      -1.02136      -367.625       367.625       1199.79       1567.42    
  53  0.355744      -1.03354      -372.012       372.012       1127.65       1499.67    
loop,thermsimp(1:2)        7   770.085       310.643    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67       1107.02          0.85          1.15         21.83          0.01          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     68       1059.84          0.85          1.14         22.11          0.05          0.05         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1059.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        7
neval is:       67
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        8
neval is:       67


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       67     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -258.676       258.676       1147.61       1406.29    
   2  0.568497     -0.564760      -203.279       203.279       1145.94       1349.22    
   3  0.632037E-01  -2.76139      -993.930       993.930       1155.88       2149.81    
   4  0.184325      -1.69105      -608.674       608.674       1193.47       1802.14    
   5  0.949772     -0.515332E-01  -18.5487       18.5487       1220.91       1239.46    
   6  0.512179     -0.669081      -240.828       240.828       1166.27       1407.09    
   7  0.573767     -0.555532      -199.957       199.957       1220.24       1420.20    
   8  0.590189     -0.527312      -189.800       189.800       1178.01       1367.81    
   9  0.323917      -1.12727      -405.747       405.747       1156.03       1561.78    
  10  0.246420E-01  -3.70330      -1332.96       1332.96       1185.57       2518.53    
  11  0.923153E-01  -2.38255      -857.569       857.569       1185.53       2043.10    
  12  0.236043      -1.44374      -519.658       519.658       1108.69       1628.35    
  13  0.885388     -0.121730      -43.8151       43.8151       1306.36       1350.17    
  14  0.617726     -0.481710      -173.386       173.386       1097.97       1271.36    
  15  0.349992      -1.04985      -377.879       377.879       1199.90       1577.78    
  16  0.892028     -0.114257      -41.1256       41.1256       1190.50       1231.62    
  17  0.382423     -0.961227      -345.982       345.982       1189.55       1535.53    
  18  0.850527     -0.161899      -58.2738       58.2738       1199.38       1257.65    
  19  0.653461     -0.425472      -153.143       153.143       1196.20       1349.34    
  20  0.413959     -0.881988      -317.461       317.461       1127.65       1445.12    
  21  0.807813     -0.213424      -76.8195       76.8195       1300.11       1376.93    
  22  0.348045      -1.05542      -379.887       379.887       1148.70       1528.58    
  23  0.435267     -0.831795      -299.395       299.395       1173.33       1472.73    
  24  0.434284     -0.834056      -300.208       300.208       1199.79       1500.00    
  25  0.983564     -0.165728E-01  -5.96519       5.96519       1308.52       1314.49    
  26  0.545923     -0.605277      -217.862       217.862       1174.18       1392.04    
  27  0.227140      -1.48219      -533.496       533.496       1139.30       1672.79    
  28  0.965085     -0.355395E-01  -12.7920       12.7920       1219.09       1231.88    
  29  0.183882      -1.69346      -609.540       609.540       1209.55       1819.09    
  30  0.187300E-02  -6.28022      -2260.49       2260.49       1171.67       3432.15    
  31  0.428736     -0.846914      -304.836       304.836       1182.78       1487.62    
  32  0.459764     -0.777041      -279.687       279.687       1162.70       1442.38    
  33  0.914786     -0.890649E-01  -32.0578       32.0578       1178.26       1210.32    
  34  0.872236     -0.136696      -49.2019       49.2019       1301.53       1350.74    
  35  0.789367     -0.236524      -85.1339       85.1339       1122.66       1207.79    
  36  0.619233E-01  -2.78186      -1001.30       1001.30       1210.89       2212.19    
  37  0.138004E-01  -4.28306      -1541.64       1541.64       1140.92       2682.55    
  38  0.287035      -1.24815      -449.257       449.257       1159.55       1608.81    
  39  0.138758E-01  -4.27761      -1539.67       1539.67       1289.15       2828.82    
  40  0.593330     -0.522005      -187.889       187.889       1209.97       1397.86    
  41  0.399445     -0.917679      -330.307       330.307       1071.52       1401.83    
  42  0.982947     -0.172001E-01  -6.19099       6.19099       1143.60       1149.80    
  43  0.259534      -1.34887      -485.508       485.508       1145.94       1631.45    
  44  0.816592E-01  -2.50520      -901.717       901.717       1170.34       2072.06    
  45  0.166083      -1.79527      -646.185       646.185       1130.23       1776.41    
  46  0.967370     -0.331741E-01  -11.9406       11.9406       1449.59       1461.53    
  47  0.371024     -0.991488      -356.874       356.874       1304.78       1661.65    
  48  0.941964     -0.597885E-01  -21.5202       21.5202       1222.56       1244.08    
  49  0.130219      -2.03854      -733.746       733.746       1185.18       1918.93    
  50  0.599455     -0.511734      -184.193       184.193       1199.96       1384.15    
  51  0.519323     -0.655230      -235.842       235.842       1139.93       1375.77    
  52  0.829175     -0.187324      -67.4252       67.4252       1629.96       1697.38    
  53  0.341525      -1.07433      -386.693       386.693       1059.84       1446.54    
loop,thermsimp(1:2)        8   258.676       203.279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     69       1152.66          0.86          1.15         21.95          0.02          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     70       1305.30          0.85          1.14         21.87          0.02          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1152.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        8
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:        9
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       69     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -875.501       875.501       1143.60       2019.11    
   2  0.192227      -1.64908      -593.566       593.566       1122.66       1716.22    
   3  0.872733     -0.136126      -48.9969       48.9969       1178.26       1227.26    
   4  0.444113     -0.811675      -292.153       292.153       1190.50       1482.65    
   5  0.194382      -1.63793      -589.554       589.554       1219.09       1808.64    
   6  0.358074      -1.02702      -369.662       369.662       1220.91       1590.58    
   7  0.461693     -0.772855      -278.180       278.180       1222.56       1500.73    
   8  0.180202      -1.71368      -616.818       616.818       1199.38       1816.20    
   9  0.944954     -0.566187E-01  -20.3792       20.3792       1097.97       1118.35    
  10  0.738770     -0.302769      -108.978       108.978       1308.52       1417.50    
  11  0.822491E-01  -2.49800      -899.126       899.126       1145.94       2045.07    
  12  0.313602      -1.15963      -417.395       417.395       1196.20       1613.59    
  13  0.978185     -0.220567E-01  -7.93904       7.93904       1306.36       1314.30    
  14  0.540591E-01  -2.91768      -1050.18       1050.18       1301.53       2351.72    
  15  0.872885     -0.135951      -48.9339       48.9339       1178.01       1226.95    
  16  0.209079      -1.56504      -563.318       563.318       1139.93       1703.25    
  17  0.789205E-01  -2.53931      -913.995       913.995       1300.11       2214.10    
  18  0.746404     -0.292489      -105.278       105.278       1199.96       1305.24    
  19  0.110219      -2.20529      -793.767       793.767       1174.18       1967.95    
  20  0.656016     -0.421570      -151.739       151.739       1209.97       1361.71    
  21  0.665675     -0.406953      -146.478       146.478       1071.52       1218.00    
  22  0.563292     -0.573957      -206.589       206.589       1147.61       1354.20    
  23  0.615044     -0.486062      -174.952       174.952       1166.27       1341.22    
  24  0.128081      -2.05509      -739.705       739.705       1220.24       1959.94    
  25  0.459916     -0.776711      -279.568       279.568       1162.70       1442.26    
  26  0.433297     -0.836332      -301.028       301.028       1127.65       1428.68    
  27  0.225675      -1.48866      -535.825       535.825       1059.84       1595.67    
  28  0.808805     -0.212197      -76.3778       76.3778       1449.59       1525.97    
  29  0.578238     -0.547770      -197.163       197.163       1173.33       1370.50    
  30  0.569572     -0.562871      -202.599       202.599       1182.78       1385.38    
  31  0.291272      -1.23350      -443.982       443.982       1199.79       1643.78    
  32  0.144426      -1.93499      -696.475       696.475       1148.70       1845.17    
  33  0.908321     -0.961572E-01  -34.6106       34.6106       1189.55       1224.16    
  34  0.593166     -0.522281      -187.989       187.989       1156.03       1344.02    
  35  0.327630      -1.11587      -401.645       401.645       1199.90       1601.54    
  36  0.823214E-01  -2.49712      -898.810       898.810       1159.55       2058.36    
  37  0.742531     -0.297691      -107.150       107.150       1108.69       1215.84    
  38  0.476201E-01  -3.04450      -1095.83       1095.83       1145.94       2241.77    
  39  0.183829      -1.69375      -609.645       609.645       1304.78       1914.42    
  40  0.417257     -0.874053      -314.605       314.605       1139.30       1453.90    
  41  0.647723E-01  -2.73688      -985.106       985.106       1629.96       2615.06    
  42  0.123950E-01  -4.39046      -1580.29       1580.29       1130.23       2710.52    
  43  0.281372E-01  -3.57066      -1285.22       1285.22       1193.47       2478.68    
  44  0.883044     -0.124380      -44.7691       44.7691       1209.55       1254.32    
  45  0.445413     -0.808754      -291.101       291.101       1185.18       1476.28    
  46  0.418101     -0.872031      -313.877       313.877       1185.53       1499.41    
  47  0.301534      -1.19887      -431.520       431.520       1170.34       1601.86    
  48  0.674500     -0.393783      -141.737       141.737       1155.88       1297.62    
  49  0.732783     -0.310905      -111.907       111.907       1210.89       1322.80    
  50  0.970355     -0.300929E-01  -10.8316       10.8316       1185.57       1196.40    
  51  0.981589     -0.185824E-01  -6.68851       6.68851       1140.92       1147.61    
  52  0.677253     -0.389711      -140.272       140.272       1289.15       1429.42    
  53  0.800731     -0.222230      -79.9891       79.9891       1152.66       1232.65    
loop,thermsimp(1:2)        9   875.501       593.566    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71       1252.50          0.86          1.15         21.80          0.03          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     72       1597.17          0.85          1.14         21.71          0.11          0.05         23.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1252.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:        9
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       10
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       71     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -176.852       176.852       1097.97       1274.82    
   2  0.877337     -0.130865      -47.1032       47.1032       1140.92       1188.02    
   3  0.821280     -0.196891      -70.8687       70.8687       1185.57       1256.44    
   4  0.989636     -0.104181E-01  -3.74987       3.74987       1108.69       1112.44    
   5  0.492813     -0.707625      -254.701       254.701       1071.52       1326.22    
   6  0.904083     -0.100835      -36.2942       36.2942       1189.55       1225.84    
   7  0.490620     -0.712086      -256.307       256.307       1178.01       1434.32    
   8  0.572439     -0.557850      -200.791       200.791       1178.26       1379.05    
   9  0.588753     -0.529749      -190.677       190.677       1152.66       1343.33    
  10  0.341799      -1.07353      -386.405       386.405       1209.55       1595.95    
  11  0.449605     -0.799385      -287.729       287.729       1155.88       1443.61    
  12  0.740720     -0.300132      -108.029       108.029       1199.96       1307.99    
  13  0.173164E-01  -4.05610      -1459.94       1459.94       1306.36       2766.30    
  14  0.828389     -0.188272      -67.7662       67.7662       1210.89       1278.66    
  15  0.110451      -2.20318      -793.010       793.010       1166.27       1959.28    
  16  0.646816     -0.435693      -156.823       156.823       1156.03       1312.86    
  17  0.857676     -0.153529      -55.2608       55.2608       1147.61       1202.87    
  18  0.691202E-02  -4.97449      -1790.51       1790.51       1209.97       3000.48    
  19  0.530885     -0.633210      -227.916       227.916       1173.33       1401.25    
  20  0.742957     -0.297117      -106.944       106.944       1182.78       1289.72    
  21  0.883526E-01  -2.42642      -873.360       873.360       1308.52       2181.89    
  22  0.599138     -0.512263      -184.383       184.383       1127.65       1312.04    
  23  0.476407     -0.741482      -266.888       266.888       1289.15       1556.03    
  24  0.509994E-01  -2.97594      -1071.15       1071.15       1162.70       2233.85    
  25  0.669768     -0.400824      -144.272       144.272       1139.30       1283.57    
  26  0.874430     -0.134183      -48.2975       48.2975       1185.18       1233.48    
  27  0.830739     -0.185440      -66.7467       66.7467       1190.50       1257.24    
  28  0.166673      -1.79172      -644.909       644.909       1185.53       1830.44    
  29  0.578742     -0.546898      -196.849       196.849       1222.56       1419.40    
  30  0.433531     -0.835791      -300.833       300.833       1449.59       1750.42    
  31  0.979127     -0.210935E-01  -7.59235       7.59235       1220.91       1228.51    
  32  0.310252      -1.17037      -421.261       421.261       1059.84       1481.10    
  33  0.686879     -0.375597      -135.192       135.192       1199.90       1335.09    
  34  0.243104      -1.41427      -509.048       509.048       1170.34       1679.39    
  35  0.459407     -0.777818      -279.966       279.966       1196.20       1476.17    
  36  0.332163      -1.10213      -396.698       396.698       1199.79       1596.49    
  37  0.512243     -0.668956      -240.783       240.783       1139.93       1380.71    
  38  0.323240      -1.12936      -406.500       406.500       1122.66       1529.16    
  39  0.667455     -0.404284      -145.517       145.517       1219.09       1364.61    
  40  0.460037     -0.776449      -279.473       279.473       1199.38       1478.85    
  41  0.227415      -1.48098      -533.060       533.060       1148.70       1681.76    
  42  0.636494     -0.451780      -162.613       162.613       1304.78       1467.39    
  43  0.432078     -0.839149      -302.042       302.042       1220.24       1522.28    
  44  0.609015     -0.495913      -178.498       178.498       1174.18       1352.68    
  45  0.427755     -0.849205      -305.661       305.661       1143.60       1449.27    
  46  0.496712     -0.699745      -251.865       251.865       1145.94       1397.81    
  47  0.295308      -1.21974      -439.030       439.030       1159.55       1598.58    
  48  0.928979     -0.736692E-01  -26.5163       26.5163       1300.11       1326.62    
  49  0.245696E-01  -3.70625      -1334.02       1334.02       1145.94       2479.96    
  50  0.833617E-01  -2.48457      -894.290       894.290       1301.53       2195.82    
  51  0.499690     -0.693767      -249.713       249.713       1193.47       1443.18    
  52  0.320552      -1.13771      -409.505       409.505       1629.96       2039.46    
  53  0.151030E-01  -4.19286      -1509.17       1509.17       1252.50       2761.67    
loop,thermsimp(1:2)       10   176.852       47.1032    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73       1107.10          0.85          1.15         21.90          0.02          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     74       1051.40          0.84          1.14         21.81          0.04          0.05         23.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1051.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       10
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       11
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       73     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -370.965       370.965       1108.69       1479.66    
   2  0.318207      -1.14505      -412.149       412.149       1140.92       1553.07    
   3  0.410972E-01  -3.19181      -1148.86       1148.86       1147.61       2296.47    
   4  0.217948      -1.52350      -548.364       548.364       1189.55       1737.91    
   5  0.460755     -0.774888      -278.912       278.912       1220.91       1499.83    
   6  0.694214     -0.364975      -131.368       131.368       1185.18       1316.55    
   7  0.237764      -1.43648      -517.042       517.042       1185.57       1702.61    
   8  0.635477     -0.453379      -163.188       163.188       1190.50       1353.68    
   9  0.882831E-01  -2.42721      -873.644       873.644       1097.97       1971.62    
  10  0.889613     -0.116969      -42.1015       42.1015       1210.89       1252.99    
  11  0.236395      -1.44225      -519.121       519.121       1139.30       1658.42    
  12  0.785560     -0.241359      -86.8741       86.8741       1182.78       1269.65    
  13  0.253594      -1.37202      -493.843       493.843       1199.96       1693.80    
  14  0.767743     -0.264300      -95.1318       95.1318       1127.65       1222.79    
  15  0.425111     -0.855405      -307.893       307.893       1156.03       1463.93    
  16  0.334680E-01  -3.39717      -1222.77       1222.77       1071.52       2294.29    
  17  0.737903     -0.303943      -109.401       109.401       1300.11       1409.51    
  18  0.530906     -0.633170      -227.902       227.902       1199.90       1427.80    
  19  0.811772     -0.208536      -75.0601       75.0601       1152.66       1227.72    
  20  0.781494     -0.246548      -88.7420       88.7420       1174.18       1262.92    
  21  0.668871     -0.402164      -144.754       144.754       1219.09       1363.84    
  22  0.609633     -0.494898      -178.132       178.132       1178.26       1356.40    
  23  0.732795E-01  -2.61347      -940.689       940.689       1139.93       2080.62    
  24  0.999755     -0.244962E-03 -0.881711E-01  0.881711E-01   1145.94       1146.03    
  25  0.556911     -0.585350      -210.690       210.690       1173.33       1384.02    
  26  0.381942     -0.962485      -346.435       346.435       1222.56       1568.99    
  27  0.230973      -1.46546      -527.473       527.473       1178.01       1705.49    
  28  0.791084     -0.234351      -84.3520       84.3520       1193.47       1277.82    
  29  0.122039      -2.10341      -757.098       757.098       1155.88       1912.98    
  30  0.411383     -0.888231      -319.708       319.708       1143.60       1463.31    
  31  0.753656     -0.282819      -101.797       101.797       1304.78       1406.58    
  32  0.846821     -0.166266      -59.8455       59.8455       1196.20       1256.04    
  33  0.577745     -0.548622      -197.470       197.470       1199.38       1396.85    
  34  0.859903     -0.150936      -54.3275       54.3275       1059.84       1114.17    
  35  0.915816     -0.879395E-01  -31.6528       31.6528       1220.24       1251.89    
  36  0.220499      -1.51186      -544.176       544.176       1122.66       1666.83    
  37  0.539962     -0.616256      -221.814       221.814       1289.15       1510.96    
  38  0.810725     -0.209827      -75.5246       75.5246       1209.55       1285.07    
  39  0.901567     -0.103621      -37.2970       37.2970       1199.79       1237.09    
  40  0.196148      -1.62888      -586.297       586.297       1159.55       1745.85    
  41  0.413437     -0.883250      -317.915       317.915       1170.34       1488.26    
  42  0.192892      -1.64562      -592.322       592.322       1148.70       1741.02    
  43  0.194290      -1.63840      -589.723       589.723       1449.59       2039.31    
  44  0.988313     -0.117563E-01  -4.23154       4.23154       1185.53       1189.76    
  45  0.917980     -0.855792E-01  -30.8032       30.8032       1166.27       1197.07    
  46  0.136083      -1.99449      -717.892       717.892       1629.96       2347.85    
  47  0.847126     -0.165905      -59.7157       59.7157       1308.52       1368.24    
  48  0.513003     -0.667474      -240.249       240.249       1301.53       1541.78    
  49  0.562161     -0.575967      -207.312       207.312       1162.70       1370.01    
  50  0.926079     -0.767957E-01  -27.6417       27.6417       1145.94       1173.58    
  51  0.890313     -0.116182      -41.8183       41.8183       1252.50       1294.32    
  52  0.857665     -0.153542      -55.2654       55.2654       1306.36       1361.62    
  53  0.599877     -0.511031      -183.939       183.939       1051.40       1235.34    
loop,thermsimp(1:2)       11   370.965       412.149    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75       1161.04          0.86          1.15         21.84          0.02          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1161.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       11
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       12
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       74     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -927.667       927.667       1059.84       1987.51    
   2  0.804470     -0.217571      -78.3121       78.3121       1145.94       1224.26    
   3  0.984017     -0.161120E-01  -5.79932       5.79932       1145.94       1151.74    
   4  0.587639     -0.531643      -191.358       191.358       1185.53       1376.89    
   5  0.523810     -0.646626      -232.745       232.745       1166.27       1399.01    
   6  0.930607     -0.719181E-01  -25.8860       25.8860       1127.65       1153.54    
   7  0.360114E-01  -3.32392      -1196.40       1196.40       1152.66       2349.06    
   8  0.963815     -0.368556E-01  -13.2657       13.2657       1051.40       1064.66    
   9  0.201264E-01  -3.90572      -1405.82       1405.82       1199.79       2605.61    
  10  0.954897     -0.461522E-01  -16.6119       16.6119       1220.24       1236.85    
  11  0.374160     -0.983071      -353.845       353.845       1210.89       1564.74    
  12  0.174967      -1.74316      -627.428       627.428       1196.20       1823.63    
  13  0.381618     -0.963335      -346.741       346.741       1174.18       1520.92    
  14  0.191097      -1.65498      -595.689       595.689       1182.78       1778.47    
  15  0.425287     -0.854991      -307.744       307.744       1193.47       1501.21    
  16  0.426180     -0.852893      -306.989       306.989       1209.55       1516.54    
  17  0.615671     -0.485042      -174.585       174.585       1252.50       1427.09    
  18  0.787264     -0.239192      -86.0942       86.0942       1185.18       1271.28    
  19  0.812636     -0.207472      -74.6771       74.6771       1190.50       1265.17    
  20  0.917241E-01  -2.38897      -859.881       859.881       1178.26       2038.14    
  21  0.671310     -0.398525      -143.444       143.444       1306.36       1449.80    
  22  0.548174     -0.601162      -216.381       216.381       1219.09       1435.47    
  23  0.134851      -2.00359      -721.167       721.167       1308.52       2029.69    
  24  0.373236     -0.985545      -354.735       354.735       1162.70       1517.43    
  25  0.578774     -0.546843      -196.830       196.830       1173.33       1370.16    
  26  0.910021     -0.942872E-01  -33.9375       33.9375       1199.38       1233.32    
  27  0.192323      -1.64858      -593.386       593.386       1304.78       1898.16    
  28  0.366342      -1.00419      -361.445       361.445       1300.11       1661.55    
  29  0.686994     -0.375430      -135.131       135.131       1199.90       1335.03    
  30  0.486551     -0.720414      -259.304       259.304       1143.60       1402.91    
  31  0.256801      -1.35945      -489.319       489.319       1156.03       1645.35    
  32  0.284977      -1.25535      -451.847       451.847       1108.69       1560.54    
  33  0.903072     -0.101953      -36.6966       36.6966       1170.34       1207.04    
  34  0.226450      -1.48523      -534.591       534.591       1220.91       1755.50    
  35  0.446078     -0.807261      -290.564       290.564       1289.15       1579.71    
  36  0.152634      -1.87971      -676.580       676.580       1301.53       1978.11    
  37  0.511955     -0.669518      -240.985       240.985       1140.92       1381.90    
  38  0.513138     -0.667210      -240.154       240.154       1222.56       1462.71    
  39  0.637309     -0.450501      -162.152       162.152       1139.30       1301.45    
  40  0.861477     -0.149107      -53.6692       53.6692       1122.66       1176.33    
  41  0.817364     -0.201671      -72.5890       72.5890       1199.96       1272.55    
  42  0.793820     -0.230898      -83.1089       83.1089       1185.57       1268.68    
  43  0.253309      -1.37315      -494.247       494.247       1178.01       1672.26    
  44  0.702532     -0.353065      -127.081       127.081       1189.55       1316.63    
  45  0.822324     -0.195620      -70.4111       70.4111       1148.70       1219.11    
  46  0.720485     -0.327831      -117.999       117.999       1159.55       1277.55    
  47  0.881589     -0.126029      -45.3628       45.3628       1155.88       1201.24    
  48  0.584479     -0.537035      -193.299       193.299       1097.97       1291.27    
  49  0.697197     -0.360688      -129.825       129.825       1449.59       1579.41    
  50  0.320931      -1.13653      -409.080       409.080       1139.93       1549.01    
  51  0.780071     -0.248371      -89.3980       89.3980       1071.52       1160.92    
  52  0.318322E-01  -3.44728      -1240.81       1240.81       1147.61       2388.42    
  53  0.693387     -0.366167      -131.797       131.797       1161.04       1292.84    
loop,thermsimp(1:2)       12   927.667       78.3121    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76       1095.38          0.85          1.15         21.84          0.03          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77       1027.88          0.86          1.14         21.78          0.04          0.05         23.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1027.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       12
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       13
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       76     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -49.1195       49.1195       1051.40       1100.52    
   2  0.311340      -1.16687      -420.001       420.001       1145.94       1565.94    
   3  0.293828      -1.22476      -440.838       440.838       1127.65       1568.49    
   4  0.586668     -0.533296      -191.954       191.954       1071.52       1263.48    
   5  0.360311      -1.02079      -367.420       367.420       1122.66       1490.08    
   6  0.315643      -1.15314      -415.060       415.060       1155.88       1570.94    
   7  0.481464     -0.730923      -263.087       263.087       1170.34       1433.43    
   8  0.720279     -0.328116      -118.102       118.102       1148.70       1266.80    
   9  0.551471     -0.595166      -214.223       214.223       1145.94       1360.17    
  10  0.524434     -0.645435      -232.317       232.317       1199.38       1431.70    
  11  0.781600     -0.246412      -88.6930       88.6930       1220.24       1308.93    
  12  0.353648      -1.03945      -374.138       374.138       1190.50       1564.63    
  13  0.451044     -0.796190      -286.579       286.579       1185.57       1472.15    
  14  0.325353      -1.12284      -404.154       404.154       1185.18       1589.34    
  15  0.312157      -1.16425      -419.057       419.057       1199.96       1619.02    
  16  0.432418     -0.838362      -301.758       301.758       1159.55       1461.31    
  17  0.296543      -1.21556      -437.527       437.527       1097.97       1535.50    
  18  0.705416     -0.348967      -125.607       125.607       1161.04       1286.65    
  19  0.146505      -1.92069      -691.330       691.330       1139.30       1830.63    
  20  0.471608     -0.751607      -270.532       270.532       1189.55       1460.08    
  21  0.633095     -0.457134      -164.540       164.540       1199.90       1364.44    
  22  0.754855     -0.281230      -101.225       101.225       1173.33       1274.56    
  23  0.444501E-01  -3.11339      -1120.63       1120.63       1185.53       2306.16    
  24  0.160973      -1.82652      -657.433       657.433       1140.92       1798.35    
  25  0.943694     -0.579536E-01  -20.8597       20.8597       1166.27       1187.13    
  26  0.187304      -1.67502      -602.905       602.905       1143.60       1746.51    
  27  0.840922     -0.173257      -62.3616       62.3616       1252.50       1314.86    
  28  0.888648     -0.118054      -42.4920       42.4920       1219.09       1261.58    
  29  0.920614E-01  -2.38530      -858.560       858.560       1306.36       2164.92    
  30  0.906493     -0.981722E-01  -35.3359       35.3359       1222.56       1257.89    
  31  0.221761      -1.50616      -542.123       542.123       1193.47       1735.59    
  32  0.248725      -1.39141      -500.820       500.820       1209.55       1710.37    
  33  0.315928      -1.15224      -414.736       414.736       1162.70       1577.43    
  34  0.949967     -0.513283E-01  -18.4750       18.4750       1174.18       1192.66    
  35  0.802748     -0.219715      -79.0837       79.0837       1139.93       1219.01    
  36  0.558987     -0.581628      -209.350       209.350       1108.69       1318.04    
  37  0.638133     -0.449209      -161.687       161.687       1210.89       1372.58    
  38  0.637852     -0.449648      -161.845       161.845       1449.59       1611.43    
  39  0.382908     -0.959961      -345.526       345.526       1289.15       1634.67    
  40  0.982834     -0.173149E-01  -6.23230       6.23230       1156.03       1162.27    
  41  0.497022     -0.699120      -251.640       251.640       1300.11       1551.75    
  42  0.263620      -1.33325      -479.886       479.886       1178.01       1657.90    
  43  0.296939      -1.21423      -437.047       437.047       1220.91       1657.96    
  44  0.784161     -0.243141      -87.5157       87.5157       1182.78       1270.30    
  45  0.545321     -0.606380      -218.259       218.259       1196.20       1414.46    
  46  0.770080     -0.261260      -94.0375       94.0375       1304.78       1398.82    
  47  0.358755      -1.02511      -368.978       368.978       1301.53       1670.51    
  48  0.325126      -1.12354      -404.406       404.406       1059.84       1464.25    
  49  0.599396     -0.511832      -184.228       184.228       1308.52       1492.75    
  50  0.323708      -1.12791      -405.979       405.979       1178.26       1584.24    
  51  0.329142      -1.11127      -399.986       399.986       1152.66       1552.64    
  52  0.685661     -0.377371      -135.830       135.830       1147.61       1283.44    
  53  0.360361      -1.02065      -367.370       367.370       1027.88       1395.25    
loop,thermsimp(1:2)       13   49.1195       420.001    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78       1261.17          0.84          1.15         21.94          0.02          0.05         24.00
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1261.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       13
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       14
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       77     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -383.471       383.471       1051.40       1434.87    
   2  0.267720      -1.31781      -474.331       474.331       1156.03       1630.37    
   3  0.279825      -1.27359      -458.414       458.414       1166.27       1624.68    
   4  0.281095      -1.26906      -456.784       456.784       1174.18       1630.96    
   5  0.245867      -1.40297      -504.981       504.981       1139.93       1644.91    
   6  0.914239     -0.896636E-01  -32.2733       32.2733       1222.56       1254.83    
   7  0.180116      -1.71415      -616.989       616.989       1219.09       1836.08    
   8  0.567917     -0.565780      -203.646       203.646       1071.52       1275.17    
   9  0.431941     -0.839465      -302.155       302.155       1148.70       1450.85    
  10  0.877920     -0.130199      -46.8637       46.8637       1182.78       1229.64    
  11  0.280355      -1.27170      -457.732       457.732       1173.33       1631.06    
  12  0.486947     -0.719601      -259.012       259.012       1147.61       1406.63    
  13  0.216546      -1.52995      -550.687       550.687       1161.04       1711.73    
  14  0.483718E-02  -5.33142      -1918.98       1918.98       1220.24       3139.22    
  15  0.785152E-03  -7.14963      -2573.42       2573.42       1252.50       3825.93    
  16  0.300781      -1.20137      -432.419       432.419       1108.69       1541.11    
  17  0.869691     -0.139618      -50.2537       50.2537       1145.94       1196.20    
  18  0.694261E-01  -2.66749      -960.132       960.132       1199.90       2160.03    
  19  0.635475     -0.453382      -163.190       163.190       1210.89       1374.08    
  20  0.894977     -0.110958      -39.9378       39.9378       1027.88       1067.82    
  21  0.442267     -0.815841      -293.652       293.652       1304.78       1598.43    
  22  0.283362      -1.26103      -453.892       453.892       1196.20       1650.09    
  23  0.518611     -0.656601      -236.336       236.336       1199.38       1435.72    
  24  0.858122E-01  -2.45559      -883.861       883.861       1170.34       2054.21    
  25  0.461153     -0.774026      -278.601       278.601       1189.55       1468.15    
  26  0.180026      -1.71465      -617.169       617.169       1159.55       1776.72    
  27  0.446938E-01  -3.10792      -1118.66       1118.66       1059.84       2178.50    
  28  0.152352      -1.88156      -677.245       677.245       1185.57       1862.81    
  29  0.163937E-01  -4.11086      -1479.65       1479.65       1122.66       2602.31    
  30  0.721347     -0.326635      -117.568       117.568       1308.52       1426.09    
  31  0.813323     -0.206626      -74.3727       74.3727       1097.97       1172.35    
  32  0.569343     -0.563273      -202.743       202.743       1300.11       1502.85    
  33  0.275899      -1.28772      -463.499       463.499       1152.66       1616.16    
  34  0.933187     -0.691492E-01  -24.8894       24.8894       1190.50       1215.39    
  35  0.716570     -0.333279      -119.960       119.960       1145.94       1265.90    
  36  0.405413     -0.902848      -324.969       324.969       1127.65       1452.62    
  37  0.907528     -0.970314E-01  -34.9253       34.9253       1155.88       1190.80    
  38  0.554651     -0.589416      -212.153       212.153       1162.70       1374.85    
  39  0.419962     -0.867592      -312.279       312.279       1178.26       1490.54    
  40  0.824173     -0.193375      -69.6030       69.6030       1185.18       1254.78    
  41  0.865647     -0.144278      -51.9313       51.9313       1449.59       1501.52    
  42  0.300944      -1.20083      -432.225       432.225       1199.96       1632.18    
  43  0.339688      -1.07973      -388.635       388.635       1289.15       1677.78    
  44  0.217032      -1.52771      -549.882       549.882       1178.01       1727.90    
  45  0.792618E-01  -2.53500      -912.442       912.442       1220.91       2133.36    
  46  0.997677     -0.232582E-02 -0.837151      0.837151       1301.53       1302.37    
  47  0.174239      -1.74733      -628.929       628.929       1209.55       1838.48    
  48  0.834084     -0.181422      -65.3005       65.3005       1193.47       1258.77    
  49  0.324404      -1.12577      -405.206       405.206       1143.60       1548.81    
  50  0.927598     -0.751564E-01  -27.0516       27.0516       1140.92       1167.97    
  51  0.981384     -0.187911E-01  -6.76364       6.76364       1139.30       1146.06    
  52  0.849105     -0.163572      -58.8758       58.8758       1306.36       1365.23    
  53  0.148698      -1.90584      -685.984       685.984       1261.17       1947.16    
loop,thermsimp(1:2)       14   383.471       474.331    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79       1111.92          0.86          1.15         22.20          0.01          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80       1545.05          0.84          1.15         21.94          0.01          0.05         23.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1111.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       14
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       15
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       79     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -529.072       529.072       1027.88       1556.95    
   2  0.322822      -1.13066      -406.966       406.966       1139.30       1546.26    
   3  0.327586      -1.11601      -401.693       401.693       1140.92       1542.61    
   4  0.799078     -0.224296      -80.7328       80.7328       1097.97       1178.71    
   5  0.698072     -0.359433      -129.374       129.374       1155.88       1285.25    
   6  0.733871     -0.309421      -111.373       111.373       1145.94       1257.32    
   7  0.823872     -0.193740      -69.7345       69.7345       1190.50       1260.23    
   8  0.800045     -0.223087      -80.2975       80.2975       1182.78       1263.08    
   9  0.162010      -1.82010      -655.121       655.121       1185.18       1840.30    
  10  0.113138      -2.17915      -784.358       784.358       1222.56       2006.91    
  11  0.973966     -0.263784E-01  -9.49458       9.49458       1193.47       1202.96    
  12  0.998107     -0.189521E-02 -0.682156      0.682156       1145.94       1146.62    
  13  0.631351     -0.459893      -165.533       165.533       1071.52       1237.06    
  14  0.698229     -0.359208      -129.293       129.293       1301.53       1430.83    
  15  0.359252      -1.02373      -368.480       368.480       1306.36       1674.84    
  16  0.936266     -0.658562E-01  -23.7041       23.7041       1210.89       1234.60    
  17  0.843107     -0.170662      -61.4276       61.4276       1162.70       1224.12    
  18  0.181284      -1.70769      -614.663       614.663       1147.61       1762.28    
  19  0.354246      -1.03777      -373.531       373.531       1308.52       1682.06    
  20  0.981540     -0.186324E-01  -6.70651       6.70651       1051.40       1058.11    
  21  0.582284E-01  -2.84338      -1023.44       1023.44       1199.38       2222.82    
  22  0.935088     -0.671143E-01  -24.1570       24.1570       1148.70       1172.85    
  23  0.682144     -0.382515      -137.682       137.682       1127.65       1265.34    
  24  0.441439     -0.817715      -294.327       294.327       1189.55       1483.87    
  25  0.325829      -1.12138      -403.628       403.628       1178.26       1581.89    
  26  0.956968E-01  -2.34657      -844.620       844.620       1449.59       2294.21    
  27  0.465124E-01  -3.06804      -1104.30       1104.30       1300.11       2404.41    
  28  0.645503     -0.437726      -157.554       157.554       1108.69       1266.25    
  29  0.184751      -1.68875      -607.843       607.843       1143.60       1751.45    
  30  0.676303     -0.391115      -140.777       140.777       1304.78       1445.55    
  31  0.408248     -0.895880      -322.461       322.461       1152.66       1475.12    
  32  0.215511      -1.53474      -552.413       552.413       1166.27       1718.68    
  33  0.762109     -0.271666      -97.7830       97.7830       1156.03       1253.82    
  34  0.445022     -0.809632      -291.417       291.417       1174.18       1465.60    
  35  0.667113     -0.404797      -145.702       145.702       1173.33       1319.03    
  36  0.995785     -0.422376E-02  -1.52029       1.52029       1199.96       1201.48    
  37  0.278840      -1.27712      -459.683       459.683       1139.93       1599.61    
  38  0.624255     -0.471196      -169.601       169.601       1196.20       1365.80    
  39  0.368212     -0.999097      -359.613       359.613       1289.15       1648.76    
  40  0.330266      -1.10786      -398.760       398.760       1161.04       1559.80    
  41  0.969155     -0.313304E-01  -11.2770       11.2770       1178.01       1189.29    
  42  0.686816     -0.375688      -135.224       135.224       1159.55       1294.77    
  43  0.201053      -1.60419      -577.407       577.407       1219.09       1796.50    
  44  0.481166     -0.731544      -263.310       263.310       1209.55       1472.86    
  45  0.992829     -0.719725E-02  -2.59056       2.59056       1185.57       1188.16    
  46  0.665697     -0.406921      -146.466       146.466       1261.17       1407.64    
  47  0.991934E-02  -4.61327      -1660.49       1660.49       1170.34       2830.83    
  48  0.211644      -1.55285      -558.930       558.930       1220.91       1779.84    
  49  0.908243E-01  -2.39883      -863.429       863.429       1199.90       2063.33    
  50  0.643762     -0.440426      -158.526       158.526       1059.84       1218.37    
  51  0.568794E-01  -2.86682      -1031.88       1031.88       1122.66       2154.54    
  52  0.159466      -1.83592      -660.818       660.818       1220.24       1881.06    
  53  0.918851     -0.846310E-01  -30.4619       30.4619       1111.92       1142.38    
loop,thermsimp(1:2)       15   529.072       406.966    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81       1237.79          0.86          1.14         21.82          0.01          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    1237.8        1.168     -2.087      3.277     -102.6      1.136    
                       2.781      1.261     -99.70      3.405     0.3114    

                       2.010     -2.098      1.540      7000.      7000.    

                      -1.926      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.542     -3.250     -8.264      6.781    

                      -14.87     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3316E-01 0.2765    -0.1137E-01 0.1731    

                     -0.2486    -0.1225     0.1615     0.1026     0.1137    



                     -0.4135    -0.5328      0.000     0.1067    -0.5457E-01

                     -0.2486E-01 0.1652    -0.7116    -0.9199E-01 0.2916    

                      0.2511E-01 0.2363E-01-0.5853     -1.285      7000.    



                      -1.310     -1.176     -2.142     -1.982    -0.3807    

                     -0.3252      9.233      8.741    -0.1672E+05 -6.000    

                     -0.3551     -2.307      9.383      8.837    -0.1969E+05



                      -6.000     0.6583    -0.2956      8.894      9.086    

                     -0.1944E+05 -6.000    -0.5752    -0.5595      9.105    

                       8.806    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1237.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       15
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       16
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       80     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -210.113       210.113       1051.40       1261.51    
   2  0.850944     -0.161409      -58.0972       58.0972       1111.92       1170.01    
   3  0.343999      -1.06712      -384.095       384.095       1145.94       1530.03    
   4  0.481777E-02  -5.33544      -1920.43       1920.43       1148.70       3069.13    
   5  0.146991      -1.91738      -690.138       690.138       1097.97       1788.11    
   6  0.545677     -0.605728      -218.024       218.024       1185.57       1403.59    
   7  0.761940     -0.271888      -97.8627       97.8627       1178.01       1275.88    
   8  0.944477     -0.571238E-01  -20.5610       20.5610       1199.96       1220.52    
   9  0.965249     -0.353688E-01  -12.7306       12.7306       1193.47       1206.20    
  10  0.634176     -0.455429      -163.926       163.926       1059.84       1223.77    
  11  0.793205     -0.231673      -83.3881       83.3881       1162.70       1246.08    
  12  0.743605     -0.296246      -106.630       106.630       1210.89       1317.52    
  13  0.983069E-01  -2.31966      -834.934       834.934       1071.52       1906.46    
  14  0.618437     -0.480560      -172.972       172.972       1156.03       1329.01    
  15  0.429182     -0.845875      -304.462       304.462       1145.94       1450.41    
  16  0.771528     -0.259382      -93.3614       93.3614       1190.50       1283.86    
  17  0.218286      -1.52195      -547.807       547.807       1182.78       1730.59    
  18  0.556408     -0.586254      -211.015       211.015       1127.65       1338.67    
  19  0.526292     -0.641899      -231.044       231.044       1108.69       1339.74    
  20  0.665532     -0.407169      -146.556       146.556       1155.88       1302.43    
  21  0.261756      -1.34034      -482.441       482.441       1159.55       1641.99    
  22  0.975508     -0.247971E-01  -8.92542       8.92542       1173.33       1182.26    
  23  0.257613      -1.35630      -488.182       488.182       1196.20       1684.38    
  24  0.981555E-01  -2.32120      -835.489       835.489       1261.17       2096.66    
  25  0.955054     -0.459870E-01  -16.5525       16.5525       1301.53       1318.09    
  26  0.887906     -0.118890      -42.7930       42.7930       1304.78       1347.57    
  27  0.407043     -0.898837      -323.526       323.526       1174.18       1497.71    
  28  0.876870     -0.131396      -47.2945       47.2945       1209.55       1256.84    
  29  0.957152     -0.437935E-01  -15.7630       15.7630       1152.66       1168.42    
  30  0.827730     -0.189068      -68.0527       68.0527       1189.55       1257.60    
  31  0.289027      -1.24124      -446.768       446.768       1140.92       1587.69    
  32  0.125230      -2.07760      -747.808       747.808       1139.30       1887.10    
  33  0.242443      -1.41699      -510.028       510.028       1027.88       1537.91    
  34  0.654103     -0.424490      -152.790       152.790       1161.04       1313.83    
  35  0.811871     -0.208414      -75.0160       75.0160       1178.26       1253.28    
  36  0.145201E-01  -4.23222      -1523.34       1523.34       1139.93       2663.27    
  37  0.344449      -1.06581      -383.625       383.625       1289.15       1672.77    
  38  0.265532      -1.32602      -477.285       477.285       1306.36       1783.64    
  39  0.811851     -0.208438      -75.0248       75.0248       1308.52       1383.55    
  40  0.983290E-01  -2.31944      -834.853       834.853       1166.27       2001.12    
  41  0.347314      -1.05753      -380.644       380.644       1143.60       1524.25    
  42  0.923773     -0.792888E-01  -28.5390       28.5390       1147.61       1176.15    
  43  0.690375     -0.370520      -133.364       133.364       1220.91       1354.28    
  44  0.227523      -1.48051      -532.890       532.890       1219.09       1751.98    
  45  0.652275     -0.427289      -153.797       153.797       1185.18       1338.98    
  46  0.669640     -0.401014      -144.340       144.340       1220.24       1364.58    
  47  0.288804      -1.24201      -447.045       447.045       1222.56       1669.60    
  48  0.404648     -0.904738      -325.650       325.650       1199.90       1525.55    
  49  0.371042     -0.991440      -356.857       356.857       1122.66       1479.52    
  50  0.308424      -1.17628      -423.388       423.388       1199.38       1622.77    
  51  0.911221     -0.929703E-01  -33.4636       33.4636       1449.59       1483.05    
  52  0.615436     -0.485425      -174.723       174.723       1300.11       1474.83    
  53  0.780328     -0.248041      -89.2792       89.2792       1237.79       1327.07    
loop,thermsimp(1:2)       16   210.113       58.0972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82       1182.52          0.85          1.15         21.82          0.02          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     83       1480.29          0.85          1.14         21.85          0.04          0.05         23.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1182.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       16
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       17
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       82     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -108.480       108.480       1152.66       1261.14    
   2  0.527958     -0.638738      -229.906       229.906       1111.92       1341.82    
   3  0.326119      -1.12049      -403.308       403.308       1147.61       1550.92    
   4  0.647061     -0.435314      -156.686       156.686       1173.33       1330.02    
   5  0.419805     -0.867966      -312.414       312.414       1193.47       1505.88    
   6  0.218417      -1.52135      -547.590       547.590       1199.96       1747.55    
   7  0.168864      -1.77866      -640.208       640.208       1059.84       1700.05    
   8  0.761417     -0.272575      -98.1099       98.1099       1162.70       1260.81    
   9  0.383989     -0.957143      -344.512       344.512       1178.26       1522.77    
  10  0.104774      -2.25595      -812.002       812.002       1209.55       2021.55    
  11  0.167912      -1.78432      -642.244       642.244       1189.55       1831.79    
  12  0.997930     -0.207190E-02 -0.745755      0.745755       1051.40       1052.14    
  13  0.493294     -0.706650      -254.350       254.350       1178.01       1432.36    
  14  0.483048     -0.727639      -261.905       261.905       1190.50       1452.40    
  15  0.715967     -0.334121      -120.263       120.263       1155.88       1276.14    
  16  0.595423E-01  -2.82107      -1015.41       1015.41       1161.04       2176.45    
  17  0.636569     -0.451662      -162.570       162.570       1210.89       1373.46    
  18  0.482980     -0.727779      -261.955       261.955       1301.53       1563.49    
  19  0.500121     -0.692905      -249.403       249.403       1237.79       1487.19    
  20  0.426980     -0.851018      -306.314       306.314       1156.03       1462.35    
  21  0.546576     -0.604082      -217.432       217.432       1127.65       1345.09    
  22  0.142720      -1.94687      -700.754       700.754       1185.18       1885.94    
  23  0.473622     -0.747346      -268.998       268.998       1108.69       1377.69    
  24  0.892718E-01  -2.41607      -869.635       869.635       1304.78       2174.41    
  25  0.660659     -0.414518      -149.201       149.201       1220.91       1370.11    
  26  0.328755      -1.11244      -400.411       400.411       1220.24       1620.65    
  27  0.544150     -0.608530      -219.033       219.033       1308.52       1527.56    
  28  0.199068      -1.61411      -580.980       580.980       1185.57       1766.55    
  29  0.685070     -0.378234      -136.141       136.141       1145.94       1282.08    
  30  0.500258     -0.692632      -249.304       249.304       1300.11       1549.41    
  31  0.130607      -2.03556      -732.676       732.676       1122.66       1855.33    
  32  0.982013E-01  -2.32074      -835.321       835.321       1449.59       2284.91    
  33  0.581494E-01  -2.84474      -1023.93       1023.93       1174.18       2198.11    
  34  0.841391     -0.172699      -62.1610       62.1610       1143.60       1205.77    
  35  0.838937E-01  -2.47820      -892.000       892.000       1199.90       2091.90    
  36  0.729848     -0.314919      -113.351       113.351       1145.94       1259.29    
  37  0.748292     -0.289962      -104.368       104.368       1027.88       1132.25    
  38  0.229216      -1.47309      -530.221       530.221       1140.92       1671.14    
  39  0.710713     -0.341487      -122.914       122.914       1199.38       1322.30    
  40  0.511506     -0.670395      -241.301       241.301       1159.55       1400.85    
  41  0.106756      -2.23721      -805.255       805.255       1222.56       2027.81    
  42  0.583466     -0.538770      -193.924       193.924       1289.15       1483.07    
  43  0.993140E-01  -2.30947      -831.266       831.266       1196.20       2027.46    
  44  0.461224     -0.773871      -278.545       278.545       1182.78       1461.33    
  45  0.574465     -0.554316      -199.519       199.519       1219.09       1418.61    
  46  0.715977     -0.334107      -120.258       120.258       1306.36       1426.62    
  47  0.877584     -0.130583      -47.0017       47.0017       1097.97       1144.97    
  48  0.492354     -0.708558      -255.037       255.037       1139.30       1394.33    
  49  0.874926     -0.133616      -48.0936       48.0936       1071.52       1119.62    
  50  0.800367     -0.222685      -80.1527       80.1527       1166.27       1246.42    
  51  0.507308     -0.678636      -244.267       244.267       1261.17       1505.44    
  52  0.727831     -0.317686      -114.347       114.347       1139.93       1254.28    
  53  0.899777E-01  -2.40819      -866.800       866.800       1182.52       2049.32    
loop,thermsimp(1:2)       17   108.480       229.906    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84       1088.10          0.85          1.14         21.77          0.05          0.05         23.87
Just calling func    0   0         23.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85       1031.63          0.86          1.14         21.86          0.07          0.05         23.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1031.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       17
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       18
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       84     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -345.571       345.571       1051.40       1396.97    
   2  0.293468      -1.22599      -441.280       441.280       1071.52       1512.80    
   3  0.954036     -0.470539E-01  -16.9365       16.9365       1027.88       1044.81    
   4  0.452934     -0.792010      -285.074       285.074       1097.97       1383.05    
   5  0.251692      -1.37955      -496.552       496.552       1143.60       1640.16    
   6  0.881081     -0.126605      -45.5701       45.5701       1166.27       1211.84    
   7  0.855311     -0.156290      -56.2546       56.2546       1139.93       1196.18    
   8  0.576474     -0.550824      -198.263       198.263       1145.94       1344.20    
   9  0.433835     -0.835090      -300.581       300.581       1162.70       1463.28    
  10  0.298626      -1.20856      -435.008       435.008       1152.66       1587.67    
  11  0.269991      -1.30937      -471.291       471.291       1155.88       1627.17    
  12  0.884826     -0.122364      -44.0435       44.0435       1145.94       1189.99    
  13  0.664124     -0.409287      -147.318       147.318       1199.38       1346.70    
  14  0.580836     -0.543287      -195.550       195.550       1173.33       1368.88    
  15  0.285501      -1.25351      -451.185       451.185       1111.92       1563.10    
  16  0.690757     -0.369967      -133.165       133.165       1127.65       1260.82    
  17  0.578320     -0.547628      -197.112       197.112       1220.91       1418.03    
  18  0.563230     -0.574067      -206.629       206.629       1210.89       1417.52    
  19  0.681565     -0.383363      -137.987       137.987       1108.69       1246.68    
  20  0.453362     -0.791065      -284.734       284.734       1139.30       1424.03    
  21  0.645457     -0.437797      -157.580       157.580       1159.55       1317.13    
  22  0.982222E-01  -2.32052      -835.244       835.244       1219.09       2054.33    
  23  0.843064     -0.170712      -61.4459       61.4459       1306.36       1367.80    
  24  0.505683     -0.681845      -245.422       245.422       1178.01       1423.44    
  25  0.350376      -1.04875      -377.485       377.485       1190.50       1567.98    
  26  0.367167      -1.00194      -360.636       360.636       1182.78       1543.42    
  27  0.268175      -1.31611      -473.719       473.719       1156.03       1629.75    
  28  0.989085E-01  -2.31356      -832.738       832.738       1289.15       2121.88    
  29  0.349392      -1.05156      -378.497       378.497       1237.79       1616.29    
  30  0.945468     -0.560755E-01  -20.1837       20.1837       1261.17       1281.36    
  31  0.305400      -1.18613      -426.934       426.934       1193.47       1620.40    
  32  0.942706     -0.590006E-01  -21.2366       21.2366       1178.26       1199.50    
  33  0.778346     -0.250584      -90.1947       90.1947       1308.52       1398.72    
  34  0.256449      -1.36083      -489.813       489.813       1300.11       1789.92    
  35  0.338120      -1.08436      -390.301       390.301       1147.61       1537.91    
  36  0.644609     -0.439112      -158.053       158.053       1301.53       1459.59    
  37  0.420837     -0.865509      -311.529       311.529       1220.24       1531.77    
  38  0.793406     -0.231421      -83.2970       83.2970       1140.92       1224.22    
  39  0.685561     -0.377517      -135.883       135.883       1059.84       1195.73    
  40  0.278740      -1.27748      -459.812       459.812       1199.96       1659.77    
  41  0.414078     -0.881700      -317.357       317.357       1185.57       1502.93    
  42  0.999720     -0.280334E-03 -0.100903      0.100903       1189.55       1189.65    
  43  0.714259     -0.336509      -121.122       121.122       1122.66       1243.78    
  44  0.713371     -0.337753      -121.570       121.570       1185.18       1306.75    
  45  0.451360     -0.795490      -286.327       286.327       1209.55       1495.88    
  46  0.887280     -0.119595      -43.0468       43.0468       1196.20       1239.25    
  47  0.234319      -1.45107      -522.296       522.296       1222.56       1744.85    
  48  0.277567E-01  -3.58428      -1290.12       1290.12       1182.52       2472.64    
  49  0.582411     -0.540579      -194.575       194.575       1199.90       1394.47    
  50  0.969019     -0.314707E-01  -11.3275       11.3275       1304.78       1316.11    
  51  0.441889     -0.816696      -293.960       293.960       1161.04       1455.00    
  52  0.150247      -1.89548      -682.254       682.254       1174.18       1856.43    
  53  0.901555E-01  -2.40622      -866.090       866.090       1031.63       1897.72    
loop,thermsimp(1:2)       18   345.571       441.280    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86       1141.40          0.85          1.15         21.87          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87       1690.68          0.85          1.15         21.82          0.00          0.05         23.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1141.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       18
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       19
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       86     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -374.807       374.807       1027.88       1402.68    
   2  0.270835E-01  -3.60883      -1298.96       1298.96       1189.55       2488.50    
   3  0.923755     -0.793087E-01  -28.5462       28.5462       1145.94       1174.49    
   4  0.535520     -0.624517      -224.787       224.787       1059.84       1284.63    
   5  0.629344     -0.463078      -166.679       166.679       1139.93       1306.61    
   6  0.572648E-01  -2.86007      -1029.45       1029.45       1178.26       2207.71    
   7  0.353113E-01  -3.34355      -1203.47       1203.47       1166.27       2369.74    
   8  0.580838     -0.543283      -195.548       195.548       1140.92       1336.47    
   9  0.370403     -0.993164      -357.477       357.477       1196.20       1553.68    
  10  0.443010     -0.814162      -293.048       293.048       1122.66       1415.71    
  11  0.188704      -1.66757      -600.223       600.223       1108.69       1708.92    
  12  0.177608      -1.72818      -622.037       622.037       1127.65       1749.69    
  13  0.694998     -0.363847      -130.962       130.962       1261.17       1392.14    
  14  0.160742      -1.82796      -657.951       657.951       1185.18       1843.13    
  15  0.290050      -1.23770      -445.496       445.496       1304.78       1750.27    
  16  0.441138E-01  -3.12098      -1123.36       1123.36       1159.55       2282.91    
  17  0.372461     -0.987622      -355.483       355.483       1145.94       1501.42    
  18  0.652779     -0.426517      -153.520       153.520       1199.38       1352.90    
  19  0.998108     -0.189387E-02 -0.681677      0.681677       1306.36       1307.04    
  20  0.741140     -0.299566      -107.825       107.825       1173.33       1281.16    
  21  0.623042     -0.473141      -170.302       170.302       1097.97       1268.27    
  22  0.504617     -0.683955      -246.181       246.181       1199.90       1446.08    
  23  0.872499     -0.136394      -49.0934       49.0934       1051.40       1100.49    
  24  0.142620      -1.94757      -701.005       701.005       1308.52       2009.53    
  25  0.580285     -0.544236      -195.891       195.891       1210.89       1406.78    
  26  0.860063E-01  -2.45334      -883.048       883.048       1220.91       2103.96    
  27  0.401846     -0.911687      -328.151       328.151       1178.01       1506.16    
  28  0.161242      -1.82485      -656.833       656.833       1139.30       1796.13    
  29  0.550753     -0.596469      -214.692       214.692       1161.04       1375.73    
  30  0.815012     -0.204553      -73.6262       73.6262       1301.53       1375.16    
  31  0.438663     -0.824024      -296.597       296.597       1162.70       1459.29    
  32  0.542283     -0.611968      -220.270       220.270       1209.55       1429.82    
  33  0.943132E-01  -2.36113      -849.862       849.862       1185.57       2035.43    
  34  0.236587      -1.44144      -518.828       518.828       1071.52       1590.35    
  35  0.283068      -1.26207      -454.266       454.266       1220.24       1674.50    
  36  0.973178     -0.271886E-01  -9.78620       9.78620       1147.61       1157.40    
  37  0.596723     -0.516302      -185.837       185.837       1182.78       1368.62    
  38  0.595114     -0.519003      -186.809       186.809       1111.92       1298.72    
  39  0.948736     -0.526250E-01  -18.9417       18.9417       1190.50       1209.44    
  40  0.216072E-01  -3.83473      -1380.26       1380.26       1152.66       2532.92    
  41  0.440213     -0.820496      -295.328       295.328       1237.79       1533.12    
  42  0.905197     -0.996023E-01  -35.8507       35.8507       1193.47       1229.32    
  43  0.158396      -1.84266      -663.243       663.243       1155.88       1819.12    
  44  0.287789      -1.24553      -448.312       448.312       1156.03       1604.35    
  45  0.238244      -1.43446      -516.317       516.317       1143.60       1659.92    
  46  0.363881      -1.01093      -363.871       363.871       1199.96       1563.83    
  47  0.828805     -0.187771      -67.5859       67.5859       1222.56       1290.14    
  48  0.587140     -0.532492      -191.664       191.664       1300.11       1491.77    
  49  0.141687      -1.95414      -703.368       703.368       1174.18       1877.55    
  50  0.879115     -0.128839      -46.3740       46.3740       1031.63       1078.00    
  51  0.742190     -0.298150      -107.316       107.316       1219.09       1326.40    
  52  0.218958      -1.51887      -546.700       546.700       1289.15       1835.85    
  53  0.333192      -1.09904      -395.585       395.585       1141.40       1536.99    
loop,thermsimp(1:2)       19   374.807       1298.96    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88       1144.36          0.86          1.16         21.90          0.01          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89       1553.35          0.86          1.15         21.86          0.00          0.05         23.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1144.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       19
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       20
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       88     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -225.308       225.308       1031.63       1256.93    
   2  0.288348      -1.24359      -447.615       447.615       1051.40       1499.01    
   3  0.910112E-01  -2.39677      -862.689       862.689       1147.61       2010.30    
   4  0.213812      -1.54266      -555.261       555.261       1145.94       1701.20    
   5  0.575222     -0.552999      -199.045       199.045       1190.50       1389.54    
   6  0.855707     -0.155827      -56.0881       56.0881       1193.47       1249.55    
   7  0.818692     -0.200047      -72.0047       72.0047       1097.97       1169.98    
   8  0.309911      -1.17147      -421.657       421.657       1173.33       1594.99    
   9  0.773438     -0.256910      -92.4716       92.4716       1059.84       1152.32    
  10  0.440502E-01  -3.12243      -1123.88       1123.88       1222.56       2346.43    
  11  0.211655      -1.55280      -558.911       558.911       1111.92       1670.83    
  12  0.713577     -0.337465      -121.467       121.467       1139.93       1261.40    
  13  0.927405     -0.753650E-01  -27.1267       27.1267       1306.36       1333.48    
  14  0.360229      -1.02101      -367.502       367.502       1219.09       1586.59    
  15  0.911872     -0.922553E-01  -33.2062       33.2062       1140.92       1174.13    
  16  0.800691     -0.222280      -80.0071       80.0071       1199.38       1279.39    
  17  0.169830      -1.77296      -638.155       638.155       1182.78       1820.94    
  18  0.581014     -0.542980      -195.439       195.439       1301.53       1496.97    
  19  0.869395     -0.139958      -50.3761       50.3761       1161.04       1211.42    
  20  0.773880     -0.256338      -92.2658       92.2658       1261.17       1353.44    
  21  0.496085     -0.701008      -252.320       252.320       1027.88       1280.20    
  22  0.530037     -0.634809      -228.492       228.492       1210.89       1439.38    
  23  0.239414      -1.42956      -514.554       514.554       1122.66       1637.21    
  24  0.595728     -0.517972      -186.438       186.438       1209.55       1395.99    
  25  0.170793      -1.76730      -636.120       636.120       1199.90       1836.02    
  26  0.983027     -0.171183E-01  -6.16152       6.16152       1162.70       1168.86    
  27  0.608714     -0.496407      -178.676       178.676       1300.11       1478.78    
  28  0.518727     -0.656378      -236.255       236.255       1145.94       1382.19    
  29  0.887918     -0.118876      -42.7879       42.7879       1178.01       1220.80    
  30  0.140498      -1.96256      -706.401       706.401       1237.79       1944.19    
  31  0.256308      -1.36138      -490.011       490.011       1141.40       1631.41    
  32  0.887238     -0.119642      -43.0636       43.0636       1196.20       1239.26    
  33  0.306042      -1.18403      -426.178       426.178       1199.96       1626.14    
  34  0.993873     -0.614632E-02  -2.21229       2.21229       1071.52       1073.73    
  35  0.275412E-01  -3.59207      -1292.92       1292.92       1156.03       2448.96    
  36  0.698960     -0.358161      -128.916       128.916       1143.60       1272.52    
  37  0.268424      -1.31519      -473.385       473.385       1220.24       1693.62    
  38  0.580935E-01  -2.84570      -1024.28       1024.28       1108.69       2132.97    
  39  0.242705      -1.41591      -509.639       509.639       1127.65       1637.29    
  40  0.443517     -0.813019      -292.636       292.636       1304.78       1597.41    
  41  0.904179     -0.100728      -36.2557       36.2557       1139.30       1175.55    
  42  0.454025     -0.789603      -284.208       284.208       1155.88       1440.09    
  43  0.592994     -0.522572      -188.093       188.093       1289.15       1477.24    
  44  0.401796     -0.911812      -328.196       328.196       1185.18       1513.38    
  45  0.130776      -2.03427      -732.211       732.211       1174.18       1906.39    
  46  0.709753     -0.342839      -123.401       123.401       1308.52       1431.93    
  47  0.388071     -0.946568      -340.706       340.706       1185.57       1526.27    
  48  0.362521      -1.01467      -365.219       365.219       1220.91       1586.13    
  49  0.285379      -1.25394      -451.339       451.339       1178.26       1629.60    
  50  0.286508      -1.24999      -449.918       449.918       1159.55       1609.47    
  51  0.951542     -0.496714E-01  -17.8786       17.8786       1166.27       1184.14    
  52  0.122933      -2.09612      -754.473       754.473       1189.55       1944.02    
  53  0.210928      -1.55624      -560.149       560.149       1144.36       1704.51    
loop,thermsimp(1:2)       20   225.308       447.615    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90       1142.24          0.85          1.15         21.81          0.02          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91       1286.96          0.86          1.14         21.87          0.04          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1142.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       20
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       21
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       90     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -436.462       436.462       1071.52       1507.98    
   2  0.663536     -0.410173      -147.637       147.637       1059.84       1207.48    
   3  0.263982      -1.33188      -479.393       479.393       1162.70       1642.09    
   4  0.792402     -0.232686      -83.7526       83.7526       1097.97       1181.73    
   5  0.624731     -0.470434      -169.327       169.327       1140.92       1310.25    
   6  0.170977      -1.76622      -635.731       635.731       1139.30       1775.03    
   7  0.362487      -1.01477      -365.253       365.253       1166.27       1531.52    
   8  0.659245     -0.416659      -149.972       149.972       1161.04       1311.01    
   9  0.746481E-03  -7.20014      -2591.60       2591.60       1178.01       3769.62    
  10  0.690046     -0.370998      -133.536       133.536       1196.20       1329.74    
  11  0.905636     -0.991173E-01  -35.6761       35.6761       1193.47       1229.14    
  12  0.317643      -1.14683      -412.787       412.787       1031.63       1444.41    
  13  0.321948      -1.13336      -407.941       407.941       1139.93       1547.87    
  14  0.293974      -1.22426      -440.659       440.659       1143.60       1584.26    
  15  0.679275     -0.386729      -139.198       139.198       1199.38       1338.58    
  16  0.180340      -1.71291      -616.542       616.542       1027.88       1644.42    
  17  0.539600     -0.616927      -222.056       222.056       1306.36       1528.41    
  18  0.260315      -1.34586      -484.427       484.427       1261.17       1745.60    
  19  0.256777      -1.35955      -489.353       489.353       1145.94       1635.29    
  20  0.518851     -0.656138      -236.169       236.169       1190.50       1426.66    
  21  0.485887     -0.721780      -259.796       259.796       1209.55       1469.34    
  22  0.562814     -0.574805      -206.894       206.894       1308.52       1515.42    
  23  0.906369     -0.983082E-01  -35.3849       35.3849       1210.89       1246.28    
  24  0.332143      -1.10219      -396.720       396.720       1155.88       1552.60    
  25  0.912001E-01  -2.39470      -861.943       861.943       1289.15       2151.09    
  26  0.302569      -1.19545      -430.286       430.286       1300.11       1730.39    
  27  0.362040      -1.01600      -365.697       365.697       1301.53       1667.23    
  28  0.630870     -0.460656      -165.808       165.808       1051.40       1217.21    
  29  0.685312     -0.377881      -136.014       136.014       1185.18       1321.20    
  30  0.329910      -1.10894      -399.148       399.148       1185.57       1584.72    
  31  0.906630E-01  -2.40061      -864.069       864.069       1220.91       2084.98    
  32  0.339749      -1.07955      -388.571       388.571       1219.09       1607.66    
  33  0.783039     -0.244573      -88.0310       88.0310       1173.33       1261.36    
  34  0.322673      -1.13112      -407.132       407.132       1304.78       1711.91    
  35  0.255311      -1.36527      -491.413       491.413       1159.55       1650.96    
  36  0.645921     -0.437078      -157.321       157.321       1199.96       1357.28    
  37  0.240122      -1.42661      -513.490       513.490       1178.26       1691.75    
  38  0.224638      -1.49326      -537.482       537.482       1141.40       1678.89    
  39  0.682659     -0.381760      -137.410       137.410       1122.66       1260.07    
  40  0.533856     -0.627629      -225.907       225.907       1127.65       1353.56    
  41  0.439620E-02  -5.42701      -1953.39       1953.39       1111.92       3065.30    
  42  0.409891     -0.891863      -321.015       321.015       1220.24       1541.25    
  43  0.379406     -0.969149      -348.833       348.833       1145.94       1494.78    
  44  0.982111     -0.180514E-01  -6.49738       6.49738       1144.36       1150.86    
  45  0.243530      -1.41251      -508.417       508.417       1182.78       1691.20    
  46  0.709323     -0.343445      -123.619       123.619       1199.90       1323.52    
  47  0.212014      -1.55110      -558.301       558.301       1174.18       1732.48    
  48  0.530919     -0.633146      -227.893       227.893       1189.55       1417.44    
  49  0.439600     -0.821890      -295.829       295.829       1237.79       1533.62    
  50  0.304385      -1.18946      -428.132       428.132       1147.61       1575.75    
  51  0.850253     -0.162221      -58.3895       58.3895       1108.69       1167.08    
  52  0.686564     -0.376055      -135.356       135.356       1222.56       1357.91    
  53  0.894299     -0.111715      -40.2104       40.2104       1142.24       1182.45    
loop,thermsimp(1:2)       21   436.462       147.637    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92       1105.28          0.85          1.15         22.05          0.00          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93       1202.45          0.84          1.14         22.10          0.02          0.05         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1105.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       21
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       22
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       92     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -344.809       344.809       1144.36       1489.17    
   2  0.741480     -0.299107      -107.660       107.660       1108.69       1216.35    
   3  0.138898      -1.97401      -710.523       710.523       1097.97       1808.50    
   4  0.751974E-01  -2.58764      -931.389       931.389       1142.24       2073.63    
   5  0.824485     -0.192996      -69.4666       69.4666       1059.84       1129.31    
   6  0.982900     -0.172482E-01  -6.20829       6.20829       1051.40       1057.61    
   7  0.693409     -0.366136      -131.786       131.786       1193.47       1325.25    
   8  0.941572     -0.602045E-01  -21.6699       21.6699       1210.89       1232.56    
   9  0.812713     -0.207378      -74.6431       74.6431       1122.66       1197.30    
  10  0.879507     -0.128393      -46.2136       46.2136       1173.33       1219.55    
  11  0.418958     -0.869984      -313.140       313.140       1140.92       1454.06    
  12  0.314952      -1.15533      -415.848       415.848       1161.04       1576.89    
  13  0.812426     -0.207731      -74.7703       74.7703       1185.18       1259.95    
  14  0.213788      -1.54277      -555.301       555.301       1199.90       1755.20    
  15  0.521629     -0.650798      -234.247       234.247       1196.20       1430.45    
  16  0.287143      -1.24777      -449.122       449.122       1199.38       1648.50    
  17  0.518340     -0.657125      -236.524       236.524       1127.65       1364.18    
  18  0.712802E-02  -4.94372      -1779.43       1779.43       1199.96       2979.39    
  19  0.579935     -0.544838      -196.108       196.108       1222.56       1418.66    
  20  0.508101E-02  -5.28224      -1901.28       1901.28       1189.55       3090.83    
  21  0.984466     -0.156557E-01  -5.63509       5.63509       1190.50       1196.13    
  22  0.394325     -0.930579      -334.951       334.951       1031.63       1366.58    
  23  0.837309     -0.177562      -63.9113       63.9113       1209.55       1273.46    
  24  0.683519     -0.380501      -136.957       136.957       1145.94       1282.90    
  25  0.892337     -0.113912      -41.0012       41.0012       1071.52       1112.52    
  26  0.297675      -1.21175      -436.156       436.156       1308.52       1744.68    
  27  0.566054     -0.569065      -204.828       204.828       1306.36       1511.19    
  28  0.325499E-01  -3.42498      -1232.78       1232.78       1166.27       2399.05    
  29  0.721169     -0.326882      -117.657       117.657       1237.79       1355.45    
  30  0.370449     -0.993040      -357.433       357.433       1220.24       1577.67    
  31  0.398952     -0.918913      -330.752       330.752       1139.93       1470.68    
  32  0.942469     -0.592518E-01  -21.3270       21.3270       1155.88       1177.21    
  33  0.379045     -0.970101      -349.176       349.176       1147.61       1496.79    
  34  0.218373      -1.52155      -547.663       547.663       1143.60       1691.27    
  35  0.413944     -0.882024      -317.474       317.474       1185.57       1503.04    
  36  0.452532     -0.792896      -285.393       285.393       1219.09       1504.48    
  37  0.938896     -0.630505E-01  -22.6943       22.6943       1145.94       1168.63    
  38  0.389299     -0.943409      -339.569       339.569       1162.70       1502.26    
  39  0.943794     -0.578471E-01  -20.8214       20.8214       1027.88       1048.70    
  40  0.706887     -0.346884      -124.857       124.857       1159.55       1284.41    
  41  0.274873      -1.29145      -464.840       464.840       1301.53       1766.37    
  42  0.343864      -1.06751      -384.237       384.237       1141.40       1525.64    
  43  0.869527E-01  -2.44239      -879.109       879.109       1182.78       2061.89    
  44  0.859615     -0.151271      -54.4480       54.4480       1178.26       1232.71    
  45  0.264079      -1.33151      -479.260       479.260       1304.78       1784.04    
  46  0.494871     -0.703457      -253.201       253.201       1300.11       1553.31    
  47  0.112943      -2.18087      -784.979       784.979       1174.18       1959.16    
  48  0.358273      -1.02646      -369.462       369.462       1261.17       1630.64    
  49  0.215257      -1.53592      -552.836       552.836       1139.30       1692.13    
  50  0.441681     -0.817166      -294.129       294.129       1220.91       1515.04    
  51  0.888276     -0.118473      -42.6430       42.6430       1289.15       1331.79    
  52  0.780286     -0.248095      -89.2988       89.2988       1111.92       1201.21    
  53  0.488747     -0.715911      -257.683       257.683       1105.28       1362.96    
loop,thermsimp(1:2)       22   344.809       107.660    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94       1084.83          0.85          1.15         21.80          0.04          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95       1053.15          0.85          1.14         21.79          0.05          0.05         23.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1053.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       22
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       23
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       94     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -401.616       401.616       1027.88       1429.49    
   2  0.736029     -0.306486      -110.316       110.316       1051.40       1161.71    
   3  0.608436     -0.496864      -178.840       178.840       1071.52       1250.36    
   4  0.584882     -0.536346      -193.051       193.051       1059.84       1252.90    
   5  0.617514     -0.482053      -173.509       173.509       1145.94       1319.45    
   6  0.376473     -0.976909      -351.627       351.627       1155.88       1507.50    
   7  0.535145     -0.625218      -225.040       225.040       1190.50       1415.54    
   8  0.341783      -1.07358      -386.422       386.422       1122.66       1509.08    
   9  0.804208E-01  -2.52048      -907.217       907.217       1111.92       2019.13    
  10  0.660499     -0.414760      -149.288       149.288       1108.69       1257.98    
  11  0.739860E-01  -2.60388      -937.235       937.235       1173.33       2110.57    
  12  0.203251      -1.59331      -573.493       573.493       1210.89       1784.39    
  13  0.637025     -0.450946      -162.313       162.313       1178.26       1340.58    
  14  0.687460     -0.374752      -134.887       134.887       1185.18       1320.07    
  15  0.663581     -0.410105      -147.612       147.612       1209.55       1357.16    
  16  0.579690     -0.545263      -196.261       196.261       1145.94       1342.20    
  17  0.775653     -0.254050      -91.4424       91.4424       1159.55       1250.99    
  18  0.284124      -1.25834      -452.926       452.926       1193.47       1646.39    
  19  0.317710      -1.14662      -412.710       412.710       1289.15       1701.86    
  20  0.958871     -0.419990E-01  -15.1170       15.1170       1237.79       1252.91    
  21  0.582932     -0.539685      -194.253       194.253       1105.28       1299.53    
  22  0.905476     -0.992942E-01  -35.7397       35.7397       1127.65       1163.39    
  23  0.225214      -1.49070      -536.560       536.560       1031.63       1568.19    
  24  0.618260     -0.480846      -173.075       173.075       1222.56       1395.63    
  25  0.608706     -0.496420      -178.680       178.680       1196.20       1374.88    
  26  0.651052     -0.429165      -154.473       154.473       1140.92       1295.39    
  27  0.138439E-02  -6.58249      -2369.29       2369.29       1139.93       3509.22    
  28  0.157375      -1.84913      -665.570       665.570       1144.36       1809.93    
  29  0.168063      -1.78342      -641.919       641.919       1147.61       1789.53    
  30  0.924354     -0.786598E-01  -28.3127       28.3127       1162.70       1191.01    
  31  0.985585     -0.145204E-01  -5.22645       5.22645       1185.57       1190.79    
  32  0.540844E-01  -2.91721      -1050.01       1050.01       1219.09       2269.10    
  33  0.535345     -0.624843      -224.905       224.905       1306.36       1531.26    
  34  0.736351     -0.306048      -110.158       110.158       1220.91       1331.07    
  35  0.283062E-01  -3.56467      -1283.06       1283.06       1141.40       2424.47    
  36  0.690743     -0.369987      -133.172       133.172       1300.11       1433.28    
  37  0.260994      -1.34326      -483.489       483.489       1161.04       1644.53    
  38  0.243637      -1.41208      -508.260       508.260       1220.24       1728.50    
  39  0.850226     -0.162253      -58.4011       58.4011       1261.17       1319.57    
  40  0.589307     -0.528809      -190.338       190.338       1199.38       1389.72    
  41  0.515087     -0.663420      -238.790       238.790       1143.60       1382.39    
  42  0.348855      -1.05310      -379.051       379.051       1139.30       1518.35    
  43  0.791407     -0.233943      -84.2050       84.2050       1308.52       1392.73    
  44  0.370775     -0.992160      -357.116       357.116       1199.90       1557.01    
  45  0.676021     -0.391531      -140.927       140.927       1301.53       1442.46    
  46  0.125601      -2.07465      -746.744       746.744       1304.78       2051.52    
  47  0.582904     -0.539733      -194.270       194.270       1097.97       1292.24    
  48  0.818994     -0.199679      -71.8720       71.8720       1174.18       1246.05    
  49  0.291406      -1.23304      -443.817       443.817       1182.78       1626.60    
  50  0.887104     -0.119794      -43.1183       43.1183       1142.24       1185.36    
  51  0.666242     -0.406102      -146.172       146.172       1166.27       1312.44    
  52  0.931047     -0.714460E-01  -25.7161       25.7161       1199.96       1225.68    
  53  0.169651      -1.77401      -638.534       638.534       1053.15       1691.69    
loop,thermsimp(1:2)       23   401.616       110.316    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96       1131.18          0.86          1.14         21.81          0.04          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97       1209.82          0.85          1.14         21.82          0.04          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1131.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       23
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       24
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       96     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -443.698       443.698       1051.40       1495.10    
   2  0.991852     -0.818183E-02  -2.94495       2.94495       1127.65       1130.60    
   3  0.317368      -1.14769      -413.099       413.099       1142.24       1555.34    
   4  0.737330     -0.304720      -109.680       109.680       1185.57       1295.25    
   5  0.834641     -0.180753      -65.0599       65.0599       1162.70       1227.76    
   6  0.464401     -0.767007      -276.075       276.075       1199.96       1476.03    
   7  0.592116     -0.524053      -188.627       188.627       1174.18       1362.81    
   8  0.464372     -0.767069      -276.097       276.097       1071.52       1347.62    
   9  0.636055E-01  -2.75505      -991.649       991.649       1159.55       2151.20    
  10  0.712927     -0.338376      -121.794       121.794       1059.84       1181.64    
  11  0.265597      -1.32578      -477.197       477.197       1237.79       1714.99    
  12  0.152318      -1.88178      -677.325       677.325       1108.69       1786.02    
  13  0.629580     -0.462703      -166.544       166.544       1097.97       1264.52    
  14  0.849464     -0.163150      -58.7237       58.7237       1140.92       1199.64    
  15  0.487816     -0.717817      -258.370       258.370       1105.28       1363.65    
  16  0.374667     -0.981718      -353.358       353.358       1166.27       1519.62    
  17  0.657383     -0.419488      -150.990       150.990       1145.94       1296.93    
  18  0.846901     -0.166172      -59.8115       59.8115       1261.17       1320.98    
  19  0.201185      -1.60353      -577.172       577.172       1185.18       1762.35    
  20  0.771980     -0.258797      -93.1509       93.1509       1220.91       1314.06    
  21  0.507739     -0.677788      -243.962       243.962       1178.26       1422.22    
  22  0.280262      -1.27203      -457.852       457.852       1145.94       1603.80    
  23  0.285359      -1.25401      -451.365       451.365       1209.55       1660.91    
  24  0.246191      -1.40165      -504.505       504.505       1196.20       1700.70    
  25  0.559989E-01  -2.88242      -1037.49       1037.49       1143.60       2181.10    
  26  0.330462      -1.10726      -398.546       398.546       1199.38       1597.93    
  27  0.899405     -0.106022      -38.1614       38.1614       1308.52       1346.69    
  28  0.637003     -0.450981      -162.325       162.325       1222.56       1384.88    
  29  0.699726E-01  -2.65965      -957.310       957.310       1190.50       2147.81    
  30  0.677191     -0.389802      -140.305       140.305       1027.88       1168.18    
  31  0.649507     -0.431542      -155.328       155.328       1300.11       1455.44    
  32  0.527986     -0.638685      -229.887       229.887       1301.53       1531.42    
  33  0.374870E-01  -3.28376      -1181.95       1181.95       1155.88       2337.83    
  34  0.448697     -0.801407      -288.457       288.457       1122.66       1411.12    
  35  0.809612     -0.211200      -76.0188       76.0188       1139.30       1215.32    
  36  0.836235     -0.178846      -64.3734       64.3734       1306.36       1370.73    
  37  0.198161      -1.61867      -582.622       582.622       1199.90       1782.52    
  38  0.222702      -1.50192      -540.598       540.598       1031.63       1572.22    
  39  0.888863     -0.117812      -42.4050       42.4050       1182.78       1225.19    
  40  0.868267     -0.141256      -50.8433       50.8433       1161.04       1211.88    
  41  0.164066      -1.80749      -650.583       650.583       1193.47       1844.05    
  42  0.163797      -1.80912      -651.172       651.172       1053.15       1704.33    
  43  0.883498     -0.123867      -44.5843       44.5843       1289.15       1333.73    
  44  0.749983     -0.287705      -103.556       103.556       1220.24       1323.79    
  45  0.666691     -0.405428      -145.929       145.929       1210.89       1356.82    
  46  0.978530     -0.217038E-01  -7.81201       7.81201       1147.61       1155.43    
  47  0.442024     -0.816391      -293.850       293.850       1144.36       1438.21    
  48  0.228080      -1.47806      -532.010       532.010       1111.92       1643.93    
  49  0.226174      -1.48645      -535.029       535.029       1304.78       1839.81    
  50  0.388394     -0.945736      -340.406       340.406       1173.33       1513.74    
  51  0.257425      -1.35703      -488.445       488.445       1219.09       1707.53    
  52  0.707288     -0.346317      -124.653       124.653       1141.40       1266.06    
  53  0.518387     -0.657032      -236.491       236.491       1131.18       1367.67    
loop,thermsimp(1:2)       24   443.698       2.94495    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98       1413.69          0.84          1.14         21.86          0.02          0.05         23.91
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99       2885.10          0.85          1.14         21.88          0.04          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1413.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       24
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       25
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:       98     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -692.816       692.816       1127.65       1820.47    
   2  0.438196     -0.825090      -296.981       296.981       1147.61       1444.59    
   3  0.637359     -0.450422      -162.124       162.124       1027.88       1190.00    
   4  0.122813      -2.09709      -754.823       754.823       1059.84       1814.67    
   5  0.926899     -0.759107E-01  -27.3231       27.3231       1140.92       1168.24    
   6  0.456580     -0.783992      -282.189       282.189       1161.04       1443.23    
   7  0.988763     -0.113008E-01  -4.06760       4.06760       1139.30       1143.36    
   8  0.499609     -0.693930      -249.772       249.772       1182.78       1432.55    
   9  0.432617     -0.837902      -301.593       301.593       1162.70       1464.29    
  10  0.403570     -0.907406      -326.610       326.610       1097.97       1424.58    
  11  0.435824     -0.830517      -298.935       298.935       1141.40       1440.34    
  12  0.504807     -0.683579      -246.046       246.046       1185.57       1431.61    
  13  0.778763     -0.250048      -90.0018       90.0018       1145.94       1235.94    
  14  0.429140     -0.845972      -304.497       304.497       1220.91       1525.41    
  15  0.597763     -0.514562      -185.210       185.210       1261.17       1446.38    
  16  0.425932     -0.853476      -307.198       307.198       1220.24       1527.44    
  17  0.825778     -0.191430      -68.9029       68.9029       1289.15       1358.05    
  18  0.448772     -0.801241      -288.397       288.397       1308.52       1596.92    
  19  0.701335     -0.354770      -127.695       127.695       1071.52       1199.22    
  20  0.425857     -0.853651      -307.261       307.261       1210.89       1518.15    
  21  0.800815     -0.222126      -79.9514       79.9514       1174.18       1254.13    
  22  0.724239     -0.322634      -116.128       116.128       1105.28       1221.41    
  23  0.312194      -1.16413      -419.015       419.015       1131.18       1550.19    
  24  0.796592     -0.227412      -81.8543       81.8543       1306.36       1388.21    
  25  0.164146      -1.80700      -650.408       650.408       1222.56       1872.96    
  26  0.503041     -0.687083      -247.307       247.307       1122.66       1369.97    
  27  0.640838     -0.444978      -160.165       160.165       1178.26       1338.43    
  28  0.327752      -1.11550      -401.510       401.510       1144.36       1545.87    
  29  0.720325     -0.328053      -118.079       118.079       1300.11       1418.19    
  30  0.447570     -0.803922      -289.362       289.362       1199.96       1489.32    
  31  0.377461     -0.974289      -350.684       350.684       1051.40       1402.08    
  32  0.951264     -0.499633E-01  -17.9837       17.9837       1173.33       1191.32    
  33  0.610405     -0.493632      -177.677       177.677       1166.27       1343.94    
  34  0.564697     -0.571466      -205.692       205.692       1301.53       1507.23    
  35  0.993998     -0.601974E-02  -2.16673       2.16673       1142.24       1144.41    
  36  0.908032     -0.964757E-01  -34.7253       34.7253       1031.63       1066.35    
  37  0.731210     -0.313055      -112.680       112.680       1199.38       1312.06    
  38  0.818812     -0.199901      -71.9520       71.9520       1145.94       1217.90    
  39  0.423172     -0.859976      -309.538       309.538       1111.92       1421.45    
  40  0.554414     -0.589843      -212.307       212.307       1209.55       1421.86    
  41  0.244903E-01  -3.70948      -1335.18       1335.18       1196.20       2531.38    
  42  0.337898      -1.08501      -390.536       390.536       1053.15       1443.69    
  43  0.634521E-01  -2.75747      -992.518       992.518       1219.09       2211.61    
  44  0.824978     -0.192398      -69.2514       69.2514       1237.79       1307.04    
  45  0.954123     -0.469622E-01  -16.9035       16.9035       1185.18       1202.09    
  46  0.807852     -0.213376      -76.8021       76.8021       1199.90       1276.70    
  47  0.335430      -1.09234      -393.175       393.175       1108.69       1501.87    
  48  0.266194      -1.32353      -476.389       476.389       1304.78       1781.17    
  49  0.797818     -0.225874      -81.3008       81.3008       1193.47       1274.77    
  50  0.710601     -0.341644      -122.971       122.971       1190.50       1313.47    
  51  0.469059     -0.757026      -272.482       272.482       1159.55       1432.03    
  52  0.256457E-01  -3.66338      -1318.59       1318.59       1143.60       2462.19    
  53  0.620630     -0.477020      -171.698       171.698       1413.69       1585.39    
loop,thermsimp(1:2)       25   692.816       296.981    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       1087.34          0.85          1.14         21.80          0.03          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101       1053.75          0.86          1.14         21.83          0.05          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    1053.7       0.9058     -2.035      3.750     -102.6      1.270    
                      0.8843     0.9988     -99.70      3.143     0.4957E-01

                       1.748     -2.360      1.540      7000.      7000.    

                      -1.795      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.708     -4.713     -7.609      7.436    

                      -15.84     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1780E-01 0.3158     0.2790E-01 0.2124    

                     -0.2486    -0.8322E-01 0.2008     0.1418     0.1530    



                      -1.886    -0.5911      0.000     0.1460    -0.8168E-01

                      0.9527E-02 0.2045    -0.7116    -0.1094     0.3309    

                      0.6804E-01 0.6291E-01-0.6475     -1.383      7000.    



                      -1.436     -1.221     -2.142     -1.982    -0.3807    

                     -0.3252      9.286      8.778    -0.1672E+05 -6.000    

                     -0.2242     -2.176      9.436      8.890    -0.1969E+05



                      -6.000     0.7892    -0.1647      8.884      9.139    

                     -0.1944E+05 -6.000    -0.4443    -0.4286      9.093    

                       8.859    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1053.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       25
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       26
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:      100     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -88.9500       88.9500       1031.63       1120.58    
   2  0.928800     -0.738619E-01  -26.5857       26.5857       1139.30       1165.88    
   3  0.727994     -0.317462      -114.267       114.267       1142.24       1256.51    
   4  0.109723E-01  -4.51238      -1624.18       1624.18       1140.92       2765.10    
   5  0.160096      -1.83198      -659.399       659.399       1027.88       1687.28    
   6  0.497079     -0.699006      -251.599       251.599       1173.33       1424.93    
   7  0.789473     -0.236389      -85.0854       85.0854       1071.52       1156.61    
   8  0.763780     -0.269476      -96.9945       96.9945       1185.18       1282.18    
   9  0.217288      -1.52653      -549.457       549.457       1145.94       1695.40    
  10  0.867642     -0.141976      -51.1027       51.1027       1105.28       1156.38    
  11  0.740966     -0.299800      -107.909       107.909       1145.94       1253.85    
  12  0.999757     -0.242662E-03 -0.873433E-01  0.873433E-01   1174.18       1174.27    
  13  0.587476     -0.531920      -191.458       191.458       1193.47       1384.92    
  14  0.703619     -0.351518      -126.525       126.525       1199.90       1326.42    
  15  0.740946     -0.299828      -107.919       107.919       1237.79       1345.71    
  16  0.335927      -1.09086      -392.642       392.642       1199.38       1592.02    
  17  0.736553     -0.305774      -110.060       110.060       1190.50       1300.56    
  18  0.597397     -0.515174      -185.431       185.431       1178.26       1363.69    
  19  0.126601      -2.06672      -743.890       743.890       1166.27       1910.16    
  20  0.990194     -0.985477E-02  -3.54710       3.54710       1289.15       1292.69    
  21  0.716453     -0.333443      -120.019       120.019       1122.66       1242.68    
  22  0.279233E-01  -3.57829      -1287.96       1287.96       1306.36       2594.32    
  23  0.413932     -0.882054      -317.485       317.485       1051.40       1368.88    
  24  0.109516      -2.21168      -796.068       796.068       1300.11       2096.18    
  25  0.440749     -0.819279      -294.890       294.890       1111.92       1406.81    
  26  0.412115     -0.886453      -319.068       319.068       1209.55       1528.62    
  27  0.146963      -1.91758      -690.209       690.209       1097.97       1788.18    
  28  0.345919      -1.06155      -382.092       382.092       1185.57       1567.66    
  29  0.343614      -1.06824      -384.498       384.498       1159.55       1544.05    
  30  0.600334E-01  -2.81285      -1012.45       1012.45       1182.78       2195.23    
  31  0.751538     -0.285634      -102.810       102.810       1141.40       1244.21    
  32  0.878119     -0.129973      -46.7823       46.7823       1161.04       1207.82    
  33  0.544046     -0.608721      -219.102       219.102       1053.15       1272.26    
  34  0.931023     -0.714714E-01  -25.7253       25.7253       1147.61       1173.34    
  35  0.131968      -2.02520      -728.946       728.946       1261.17       1990.12    
  36  0.826694E-01  -2.49291      -897.291       897.291       1162.70       2059.99    
  37  0.174702E-02  -6.34984      -2285.55       2285.55       1199.96       3485.51    
  38  0.233470      -1.45470      -523.603       523.603       1108.69       1632.30    
  39  0.232927      -1.45703      -524.440       524.440       1301.53       1825.97    
  40  0.958279     -0.426163E-01  -15.3392       15.3392       1210.89       1226.23    
  41  0.820100     -0.198330      -71.3863       71.3863       1220.91       1292.30    
  42  0.305797      -1.18483      -426.467       426.467       1220.24       1646.71    
  43  0.260853      -1.34380      -483.684       483.684       1144.36       1628.04    
  44  0.960408     -0.403967E-01  -14.5403       14.5403       1131.18       1145.72    
  45  0.318957      -1.14270      -411.301       411.301       1413.69       1825.00    
  46  0.146887      -1.91809      -690.394       690.394       1308.52       1998.92    
  47  0.787623     -0.238735      -85.9299       85.9299       1304.78       1390.71    
  48  0.452412     -0.793163      -285.489       285.489       1059.84       1345.33    
  49  0.218339      -1.52170      -547.719       547.719       1127.65       1675.37    
  50  0.177672      -1.72782      -621.907       621.907       1222.56       1844.46    
  51  0.928922     -0.737304E-01  -26.5384       26.5384       1219.09       1245.63    
  52  0.341447      -1.07456      -386.776       386.776       1143.60       1530.38    
  53  0.462674     -0.770732      -277.416       277.416       1053.75       1331.16    
loop,thermsimp(1:2)       26   88.9500       26.5857    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102       1076.21          0.86          1.14         21.80          0.03          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    103       1036.72          0.85          1.14         21.92          0.06          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1036.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       26
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       27
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:      102     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -72.0852       72.0852       1031.63       1103.71    
   2  0.309452      -1.17295      -422.190       422.190       1131.18       1553.37    
   3  0.303638      -1.19192      -429.017       429.017       1105.28       1534.30    
   4  0.754457     -0.281757      -101.415       101.415       1071.52       1172.94    
   5  0.623133     -0.472996      -170.249       170.249       1139.30       1309.55    
   6  0.989422E-01  -2.31322      -832.615       832.615       1147.61       1980.23    
   7  0.695126     -0.363662      -130.896       130.896       1174.18       1305.08    
   8  0.832210E-01  -2.48626      -894.898       894.898       1161.04       2055.94    
   9  0.869521     -0.139813      -50.3241       50.3241       1210.89       1261.22    
  10  0.488136     -0.717160      -258.133       258.133       1122.66       1380.79    
  11  0.579877     -0.544940      -196.145       196.145       1141.40       1337.55    
  12  0.480435     -0.733064      -263.857       263.857       1219.09       1482.95    
  13  0.792626     -0.232404      -83.6510       83.6510       1145.94       1229.59    
  14  0.870230     -0.138998      -50.0306       50.0306       1142.24       1192.27    
  15  0.886361     -0.120631      -43.4196       43.4196       1053.15       1096.57    
  16  0.358181      -1.02672      -369.555       369.555       1185.18       1554.74    
  17  0.560125     -0.579594      -208.618       208.618       1220.91       1429.53    
  18  0.546151     -0.604859      -217.712       217.712       1289.15       1506.86    
  19  0.732086     -0.311858      -112.249       112.249       1190.50       1302.75    
  20  0.590102     -0.527460      -189.853       189.853       1199.90       1389.75    
  21  0.867355     -0.142307      -51.2218       51.2218       1053.75       1104.97    
  22  0.749758     -0.288005      -103.664       103.664       1059.84       1163.51    
  23  0.721970     -0.325772      -117.258       117.258       1237.79       1355.05    
  24  0.596865     -0.516065      -185.751       185.751       1178.26       1364.01    
  25  0.878161     -0.129925      -46.7649       46.7649       1051.40       1098.16    
  26  0.558752E-01  -2.88463      -1038.29       1038.29       1193.47       2231.75    
  27  0.555543     -0.587810      -211.575       211.575       1304.78       1516.35    
  28  0.597562     -0.514897      -185.331       185.331       1111.92       1297.25    
  29  0.995329     -0.468202E-02  -1.68524       1.68524       1173.33       1175.02    
  30  0.206787      -1.57606      -567.286       567.286       1209.55       1776.83    
  31  0.645457     -0.437797      -157.580       157.580       1143.60       1301.18    
  32  0.871352     -0.137710      -49.5669       49.5669       1159.55       1209.12    
  33  0.701360     -0.354733      -127.682       127.682       1185.57       1313.25    
  34  0.936151     -0.659784E-01  -23.7481       23.7481       1199.38       1223.13    
  35  0.590091     -0.527478      -189.859       189.859       1144.36       1334.22    
  36  0.750433     -0.287105      -103.340       103.340       1108.69       1212.03    
  37  0.326255      -1.12007      -403.157       403.157       1220.24       1623.40    
  38  0.873133     -0.135668      -48.8320       48.8320       1127.65       1176.49    
  39  0.621627     -0.475415      -171.120       171.120       1027.88       1199.00    
  40  0.153041      -1.87705      -675.621       675.621       1145.94       1821.56    
  41  0.196696      -1.62610      -585.294       585.294       1097.97       1683.27    
  42  0.365028      -1.00778      -362.739       362.739       1413.69       1776.43    
  43  0.398429     -0.920226      -331.224       331.224       1301.53       1632.76    
  44  0.549691     -0.598399      -215.387       215.387       1222.56       1437.94    
  45  0.994179     -0.583795E-02  -2.10130       2.10130       1166.27       1168.37    
  46  0.147335E-01  -4.21763      -1518.09       1518.09       1261.17       2779.26    
  47  0.224737      -1.49282      -537.324       537.324       1308.52       1845.85    
  48  0.182172      -1.70281      -612.905       612.905       1162.70       1775.60    
  49  0.230919      -1.46569      -527.557       527.557       1300.11       1827.67    
  50  0.491818     -0.709647      -255.429       255.429       1182.78       1438.21    
  51  0.370754     -0.992217      -357.136       357.136       1306.36       1663.49    
  52  0.785622     -0.241279      -86.8455       86.8455       1140.92       1227.76    
  53  0.476284     -0.741742      -266.981       266.981       1036.72       1303.70    
loop,thermsimp(1:2)       27   72.0852       422.190    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104       1147.62          0.86          1.16         21.85          0.02          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    105       1242.18          0.85          1.15         21.84          0.02          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1147.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       27
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       28
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:      104     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -76.4438       76.4438       1053.15       1129.60    
   2  0.162004E-01  -4.12272      -1483.92       1483.92       1051.40       2535.32    
   3  0.446841E-01  -3.10814      -1118.74       1118.74       1031.63       2150.36    
   4  0.757954     -0.277132      -99.7505       99.7505       1053.75       1153.50    
   5  0.525315     -0.643757      -231.713       231.713       1059.84       1291.56    
   6  0.229940      -1.46994      -529.087       529.087       1166.27       1695.35    
   7  0.273310E-01  -3.59973      -1295.68       1295.68       1071.52       2367.20    
   8  0.228047      -1.47820      -532.061       532.061       1173.33       1705.39    
   9  0.963384E-01  -2.33989      -842.215       842.215       1127.65       1969.87    
  10  0.495504     -0.702179      -252.741       252.741       1142.24       1394.99    
  11  0.930436     -0.721018E-01  -25.9522       25.9522       1027.88       1053.83    
  12  0.138744      -1.97513      -710.923       710.923       1159.55       1870.47    
  13  0.676381     -0.390999      -140.735       140.735       1108.69       1249.43    
  14  0.763696     -0.269586      -97.0342       97.0342       1199.38       1296.42    
  15  0.282468      -1.26419      -455.030       455.030       1140.92       1595.95    
  16  0.359172      -1.02395      -368.560       368.560       1145.94       1514.50    
  17  0.392258     -0.935834      -336.842       336.842       1210.89       1547.73    
  18  0.524686     -0.644955      -232.144       232.144       1111.92       1344.06    
  19  0.850465     -0.161972      -58.2999       58.2999       1143.60       1201.90    
  20  0.227056      -1.48256      -533.628       533.628       1190.50       1724.12    
  21  0.942039     -0.597082E-01  -21.4912       21.4912       1036.72       1058.21    
  22  0.807336     -0.214016      -77.0324       77.0324       1174.18       1251.21    
  23  0.345853      -1.06174      -382.161       382.161       1139.30       1521.46    
  24  0.762940     -0.270575      -97.3904       97.3904       1185.57       1282.96    
  25  0.589959     -0.527702      -189.940       189.940       1144.36       1334.30    
  26  0.563539     -0.573518      -206.431       206.431       1141.40       1347.83    
  27  0.812044     -0.208201      -74.9395       74.9395       1237.79       1312.73    
  28  0.735850     -0.306729      -110.404       110.404       1178.26       1288.67    
  29  0.396292     -0.925605      -333.160       333.160       1122.66       1455.82    
  30  0.623568     -0.472298      -169.998       169.998       1199.90       1369.90    
  31  0.925937     -0.769486E-01  -27.6967       27.6967       1220.91       1248.61    
  32  0.880074     -0.127749      -45.9819       45.9819       1222.56       1268.54    
  33  0.379958     -0.967693      -348.310       348.310       1182.78       1531.09    
  34  0.842940E-01  -2.47344      -890.287       890.287       1219.09       2109.38    
  35  0.199092      -1.61399      -580.936       580.936       1289.15       1870.08    
  36  0.625899     -0.468566      -168.655       168.655       1304.78       1473.43    
  37  0.888337     -0.118405      -42.6183       42.6183       1105.28       1147.90    
  38  0.959633     -0.412048E-01  -14.8312       14.8312       1131.18       1146.01    
  39  0.289813      -1.23852      -445.790       445.790       1185.18       1630.97    
  40  0.889440     -0.117163      -42.1715       42.1715       1220.24       1262.41    
  41  0.797260     -0.226575      -81.5528       81.5528       1301.53       1383.09    
  42  0.451097     -0.796073      -286.537       286.537       1306.36       1592.89    
  43  0.609578     -0.494989      -178.165       178.165       1097.97       1276.14    
  44  0.910850     -0.933770E-01  -33.6099       33.6099       1162.70       1196.31    
  45  0.448191     -0.802536      -288.863       288.863       1413.69       1702.56    
  46  0.831229     -0.184850      -66.5344       66.5344       1209.55       1276.08    
  47  0.246260      -1.40137      -504.406       504.406       1145.94       1650.35    
  48  0.280480      -1.27125      -457.572       457.572       1300.11       1757.68    
  49  0.161513      -1.82317      -656.228       656.228       1308.52       1964.75    
  50  0.337020      -1.08761      -391.473       391.473       1147.61       1539.09    
  51  0.160136      -1.83173      -659.309       659.309       1161.04       1820.35    
  52  0.268039      -1.31662      -473.903       473.903       1193.47       1667.37    
  53  0.907744     -0.967928E-01  -34.8394       34.8394       1147.62       1182.46    
loop,thermsimp(1:2)       28   76.4438       1483.92    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106       2008.01          0.86          1.15         21.82          0.04          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2008.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       28
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       29
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      105
neval,tstepnext:      105     105

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -775.721       775.721       1027.88       1803.60    
   2  0.685048     -0.378267      -136.152       136.152       1036.72       1172.87    
   3  0.739526     -0.301746      -108.610       108.610       1053.15       1161.76    
   4  0.161448      -1.82357      -656.372       656.372       1131.18       1787.55    
   5  0.819608     -0.198929      -71.6021       71.6021       1105.28       1176.88    
   6  0.750679     -0.286777      -103.222       103.222       1053.75       1156.97    
   7  0.797409     -0.226388      -81.4855       81.4855       1147.62       1229.11    
   8  0.193123      -1.64443      -591.893       591.893       1162.70       1754.59    
   9  0.189346E-01  -3.96676      -1427.79       1427.79       1143.60       2571.39    
  10  0.715264     -0.335103      -120.616       120.616       1220.91       1341.53    
  11  0.384856     -0.954886      -343.700       343.700       1108.69       1452.39    
  12  0.268023      -1.31668      -473.924       473.924       1174.18       1648.10    
  13  0.777164     -0.252104      -90.7417       90.7417       1220.24       1310.98    
  14  0.707495E-01  -2.64861      -953.335       953.335       1222.56       2175.89    
  15  0.233610      -1.45410      -523.387       523.387       1209.55       1732.93    
  16  0.193057      -1.64477      -592.016       592.016       1097.97       1689.99    
  17  0.486879     -0.719739      -259.062       259.062       1185.57       1444.63    
  18  0.735370     -0.307381      -110.638       110.638       1178.26       1288.90    
  19  0.147509      -1.91387      -688.873       688.873       1059.84       1748.72    
  20  0.739111     -0.302308      -108.812       108.812       1199.38       1308.19    
  21  0.886241     -0.120766      -43.4682       43.4682       1237.79       1281.26    
  22  0.158672      -1.84092      -662.615       662.615       1144.36       1806.97    
  23  0.143658      -1.94032      -698.395       698.395       1111.92       1810.31    
  24  0.637431E-02  -5.05548      -1819.66       1819.66       1141.40       2961.06    
  25  0.753372     -0.283196      -101.933       101.933       1199.90       1301.83    
  26  0.555831     -0.587292      -211.389       211.389       1301.53       1512.92    
  27  0.280013      -1.27292      -458.172       458.172       1142.24       1600.42    
  28  0.811304     -0.209112      -75.2675       75.2675       1122.66       1197.93    
  29  0.972296E-02  -4.63327      -1667.69       1667.69       1304.78       2972.47    
  30  0.713459     -0.337631      -121.526       121.526       1145.94       1267.46    
  31  0.194621      -1.63670      -589.110       589.110       1139.30       1728.41    
  32  0.492587     -0.708083      -254.866       254.866       1182.78       1437.65    
  33  0.759094E-01  -2.57821      -927.997       927.997       1147.61       2075.61    
  34  0.494544     -0.704119      -253.439       253.439       1210.89       1464.33    
  35  0.297023      -1.21395      -436.945       436.945       1306.36       1743.30    
  36  0.429878E-01  -3.14684      -1132.67       1132.67       1140.92       2273.59    
  37  0.490931     -0.711452      -256.078       256.078       1185.18       1441.26    
  38  0.534417     -0.626578      -225.529       225.529       1145.94       1371.47    
  39  0.254967      -1.36662      -491.898       491.898       1193.47       1685.36    
  40  0.995945     -0.406335E-02  -1.46255       1.46255       1166.27       1167.73    
  41  0.428814E-01  -3.14932      -1133.56       1133.56       1413.69       2547.25    
  42  0.332915      -1.09987      -395.884       395.884       1173.33       1569.22    
  43  0.657266     -0.419666      -151.054       151.054       1190.50       1341.55    
  44  0.301071      -1.20041      -432.072       432.072       1300.11       1732.18    
  45  0.998178     -0.182349E-02 -0.656345      0.656345       1161.04       1161.70    
  46  0.533372     -0.628536      -226.234       226.234       1289.15       1515.38    
  47  0.244746      -1.40753      -506.625       506.625       1159.55       1666.17    
  48  0.345321      -1.06328      -382.716       382.716       1308.52       1691.24    
  49  0.339541      -1.08016      -388.791       388.791       1127.65       1516.45    
  50  0.456434     -0.784311      -282.303       282.303       1219.09       1501.39    
  51  0.510210     -0.672933      -242.214       242.214       1031.63       1273.84    
  52  0.678441     -0.387958      -139.641       139.641       1071.52       1211.16    
  53  0.802552     -0.219958      -79.1712       79.1712       2008.01       2087.18    
loop,thermsimp(1:2)       29   775.721       136.152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107       1052.74          0.85          1.15         21.86          0.06          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108       1004.20          0.86          1.14         22.16          0.08          0.05         24.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1004.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    359.938               105
loop is:       29
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    359.938               105
loop is:       30
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    179.969               157

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      107     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -580.930       580.930       1053.75       1634.68    
   2  0.712690     -0.338709      -60.9571       60.9571       1161.04       1222.00    
   3  0.284498      -1.25703      -226.226       226.226       1053.15       1279.38    
   4  0.132414      -2.02182      -363.865       363.865       1166.27       1530.13    
   5  0.868558     -0.140920      -25.3613       25.3613       1036.72       1062.08    
   6  0.695240     -0.363498      -65.4183       65.4183       1105.28       1170.70    
   7  0.777362     -0.251849      -45.3250       45.3250       1122.66       1167.98    
   8  0.302494      -1.19569      -215.188       215.188       1071.52       1286.71    
   9  0.710188     -0.342225      -61.5900       61.5900       1147.62       1209.21    
  10  0.884530     -0.122698      -22.0819       22.0819       1145.94       1168.02    
  11  0.146421E-01  -4.22386      -760.163       760.163       1031.63       1791.79    
  12  0.834801     -0.180562      -32.4955       32.4955       1237.79       1270.28    
  13  0.414011     -0.881863      -158.708       158.708       1178.26       1336.97    
  14  0.655777     -0.421935      -75.9352       75.9352       1199.90       1275.83    
  15  0.530106     -0.634679      -114.223       114.223       1199.38       1313.60    
  16  0.325231      -1.12322      -202.145       202.145       1220.24       1422.38    
  17  0.293550      -1.22571      -220.590       220.590       1220.91       1441.50    
  18  0.194161      -1.63907      -294.982       294.982       1190.50       1485.48    
  19  0.589029E-01  -2.83186      -509.648       509.648       1145.94       1655.59    
  20  0.385142     -0.954143      -171.716       171.716       1182.78       1354.50    
  21  0.287461      -1.24667      -224.362       224.362       1185.18       1409.54    
  22  0.528518     -0.637678      -114.762       114.762       1185.57       1300.33    
  23  0.517042     -0.659630      -118.713       118.713       1108.69       1227.41    
  24  0.453375     -0.791035      -142.362       142.362       1210.89       1353.25    
  25  0.695596     -0.362986      -65.3262       65.3262       1219.09       1284.42    
  26  0.645178     -0.438228      -78.8675       78.8675       1301.53       1380.40    
  27  0.696076     -0.362297      -65.2022       65.2022       1289.15       1354.35    
  28  0.483522     -0.726659      -130.776       130.776       1127.65       1258.43    
  29  0.155396E-01  -4.16436      -749.456       749.456       1173.33       1922.79    
  30  0.883154     -0.124256      -22.3622       22.3622       1142.24       1164.61    
  31  0.525944     -0.642561      -115.641       115.641       1174.18       1289.82    
  32  0.746799     -0.291959      -52.5435       52.5435       1159.55       1212.09    
  33  0.458658     -0.779449      -140.277       140.277       1193.47       1333.74    
  34  0.614284     -0.487298      -87.6986       87.6986       1097.97       1185.67    
  35  0.581412     -0.542295      -97.5963       97.5963       1308.52       1406.12    
  36  0.820935     -0.197312      -35.5100       35.5100       1139.30       1174.81    
  37  0.852366     -0.159739      -28.7481       28.7481       1300.11       1328.86    
  38  0.527059     -0.640443      -115.260       115.260       1209.55       1324.81    
  39  0.376404     -0.977092      -175.846       175.846       1306.36       1482.20    
  40  0.729525E-01  -2.61795      -471.149       471.149       1059.84       1530.99    
  41  0.342258      -1.07219      -192.961       192.961       1162.70       1355.66    
  42  0.955065     -0.459761E-01  -8.27427       8.27427       1131.18       1139.45    
  43  0.508654E-01  -2.97857      -536.051       536.051       1027.88       1563.93    
  44  0.471716     -0.751379      -135.225       135.225       1144.36       1279.58    
  45  0.137118      -1.98691      -357.583       357.583       1111.92       1469.50    
  46  0.844826     -0.168625      -30.3472       30.3472       1147.61       1177.96    
  47  0.841708     -0.172322      -31.0126       31.0126       2008.01       2039.02    
  48  0.360396E-01  -3.32314      -598.062       598.062       1222.56       1820.62    
  49  0.953282     -0.478444E-01  -8.61050       8.61050       1140.92       1149.53    
  50  0.503408     -0.686355      -123.523       123.523       1413.69       1537.22    
  51  0.593854     -0.521122      -93.7858       93.7858       1143.60       1237.39    
  52  0.524910     -0.644528      -115.995       115.995       1141.40       1257.40    
  53  0.730244     -0.314377      -56.5780       56.5780       1004.20       1060.78    
loop,thermsimp(1:2)       30   580.930       60.9571    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109       1039.24          0.86          1.15         21.89          0.00          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110       1173.69          0.84          1.14         21.85          0.02          0.05         23.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1039.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       30
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       31
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      109     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -250.515       250.515       1004.20       1254.72    
   2  0.247647      -1.39575      -251.192       251.192       1036.72       1287.91    
   3  0.396263     -0.925678      -166.593       166.593       1131.18       1297.77    
   4  0.386461     -0.950723      -171.101       171.101       1140.92       1312.02    
   5  0.729285     -0.315691      -56.8145       56.8145       1142.24       1199.06    
   6  0.665866     -0.406667      -73.1875       73.1875       1122.66       1195.85    
   7  0.385122     -0.954194      -171.725       171.725       1145.94       1317.66    
   8  0.625701     -0.468883      -84.3843       84.3843       1105.28       1189.66    
   9  0.392668     -0.934792      -168.234       168.234       1139.30       1307.53    
  10  0.698356     -0.359026      -64.6136       64.6136       1147.61       1212.23    
  11  0.537534E-01  -2.92335      -526.112       526.112       1097.97       1624.08    
  12  0.289307      -1.24027      -223.210       223.210       1147.62       1370.83    
  13  0.138460E-01  -4.27976      -770.224       770.224       1159.55       1929.77    
  14  0.824110     -0.193451      -34.8151       34.8151       1161.04       1195.85    
  15  0.560983     -0.578065      -104.034       104.034       1108.69       1212.73    
  16  0.116087E-01  -4.45600      -801.942       801.942       1143.60       1945.55    
  17  0.218033      -1.52311      -274.112       274.112       1141.40       1415.52    
  18  0.893705E-01  -2.41497      -434.619       434.619       1127.65       1562.27    
  19  0.304886      -1.18782      -213.770       213.770       1237.79       1451.56    
  20  0.179833      -1.71573      -308.778       308.778       1199.90       1508.68    
  21  0.867378     -0.142281      -25.6061       25.6061       1053.15       1078.76    
  22  0.243287      -1.41351      -254.388       254.388       1144.36       1398.75    
  23  0.772489     -0.258138      -46.4568       46.4568       1219.09       1265.55    
  24  0.321011      -1.13628      -204.495       204.495       1071.52       1276.02    
  25  0.499417     -0.694314      -124.955       124.955       1174.18       1299.14    
  26  0.396806     -0.924307      -166.347       166.347       1185.57       1351.91    
  27  0.580203E-01  -2.84696      -512.365       512.365       1199.38       1711.75    
  28  0.854206     -0.157583      -28.3600       28.3600       1209.55       1237.91    
  29  0.914649     -0.892145E-01  -16.0558       16.0558       1300.11       1316.16    
  30  0.167601      -1.78617      -321.455       321.455       1193.47       1514.92    
  31  0.350137      -1.04943      -188.865       188.865       1178.26       1367.13    
  32  0.522932     -0.648304      -116.675       116.675       1210.89       1327.57    
  33  0.538779     -0.618450      -111.302       111.302       1289.15       1400.45    
  34  0.693066     -0.366629      -65.9819       65.9819       1182.78       1248.76    
  35  0.361961      -1.01622      -182.888       182.888       1162.70       1345.58    
  36  0.310665      -1.16904      -210.391       210.391       1301.53       1511.92    
  37  0.818669     -0.200076      -36.0075       36.0075       1308.52       1344.53    
  38  0.582861     -0.539807      -97.1485       97.1485       1185.18       1282.33    
  39  0.401728     -0.911979      -164.128       164.128       1220.24       1384.37    
  40  0.171089      -1.76557      -317.748       317.748       1220.91       1538.66    
  41  0.980174     -0.200248E-01  -3.60384       3.60384       1111.92       1115.52    
  42  0.495496     -0.702196      -126.374       126.374       1306.36       1432.73    
  43  0.436683     -0.828549      -149.113       149.113       1190.50       1339.61    
  44  0.910411     -0.938588E-01  -16.8917       16.8917       1166.27       1183.16    
  45  0.649932     -0.430887      -77.5463       77.5463       1059.84       1137.39    
  46  0.755226     -0.280738      -50.5241       50.5241       1413.69       1464.22    
  47  0.927352     -0.754221E-01  -13.5736       13.5736       1027.88       1041.45    
  48  0.848028     -0.164842      -29.6664       29.6664       1053.75       1083.41    
  49  0.146193      -1.92283      -346.050       346.050       1145.94       1491.99    
  50  0.571278     -0.559879      -100.761       100.761       1031.63       1132.39    
  51  0.244418      -1.40888      -253.554       253.554       1222.56       1476.11    
  52  0.979014     -0.212091E-01  -3.81697       3.81697       1173.33       1177.15    
  53  0.235747      -1.44500      -260.055       260.055       1039.24       1299.29    
loop,thermsimp(1:2)       31   250.515       251.192    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111       1148.57          0.86          1.14         21.87          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112       1350.72          0.84          1.14         21.88          0.00          0.05         23.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1148.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       31
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       32
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      111     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.708645      0.708645       1027.88       1028.59    
   2  0.758684E-02  -4.88134      -878.490       878.490       1053.15       1931.64    
   3  0.404439     -0.905254      -162.918       162.918       1053.75       1216.67    
   4  0.947917E-01  -2.35607      -424.020       424.020       1111.92       1535.94    
   5  0.834417     -0.181022      -32.5784       32.5784       1031.63       1064.21    
   6  0.891274     -0.115104      -20.7151       20.7151       1059.84       1080.56    
   7  0.744451     -0.295108      -53.1103       53.1103       1173.33       1226.44    
   8  0.559638     -0.580466      -104.466       104.466       1166.27       1270.73    
   9  0.821724     -0.196351      -35.3370       35.3370       1105.28       1140.61    
  10  0.847292     -0.165710      -29.8226       29.8226       1122.66       1152.48    
  11  0.661676     -0.412979      -74.3235       74.3235       1161.04       1235.36    
  12  0.993427     -0.659478E-02  -1.18686       1.18686       1142.24       1143.43    
  13  0.425996     -0.853326      -153.572       153.572       1147.61       1301.19    
  14  0.673132     -0.395813      -71.2341       71.2341       1108.69       1179.93    
  15  0.234810      -1.44898      -260.771       260.771       1209.55       1470.32    
  16  0.122926      -2.09617      -377.246       377.246       1182.78       1560.03    
  17  0.523553     -0.647118      -116.461       116.461       1004.20       1120.66    
  18  0.959317     -0.415333E-01  -7.47471       7.47471       1219.09       1226.56    
  19  0.321726      -1.13406      -204.095       204.095       1071.52       1275.62    
  20  0.493112     -0.707018      -127.241       127.241       1185.18       1312.42    
  21  0.416134     -0.876748      -157.787       157.787       1036.72       1194.51    
  22  0.409432     -0.892985      -160.710       160.710       1131.18       1291.89    
  23  0.657956     -0.418617      -75.3381       75.3381       1174.18       1249.52    
  24  0.904324     -0.100567      -18.0990       18.0990       1039.24       1057.34    
  25  0.714426     -0.336276      -60.5193       60.5193       1139.30       1199.82    
  26  0.150521      -1.89365      -340.798       340.798       1140.92       1481.72    
  27  0.758740     -0.276096      -49.6887       49.6887       1300.11       1349.80    
  28  0.359105      -1.02414      -184.314       184.314       1145.94       1330.25    
  29  0.666937     -0.405060      -72.8982       72.8982       1210.89       1283.79    
  30  0.343213      -1.06940      -192.459       192.459       1190.50       1382.96    
  31  0.484849     -0.723918      -130.283       130.283       1308.52       1438.81    
  32  0.874661     -0.133919      -24.1012       24.1012       1162.70       1186.80    
  33  0.994710     -0.530415E-02 -0.954582      0.954582       1185.57       1186.52    
  34  0.821923     -0.196109      -35.2936       35.2936       1178.26       1213.56    
  35  0.954096E-02  -4.65216      -837.245       837.245       1147.62       1984.87    
  36  0.240030      -1.42699      -256.814       256.814       1220.24       1477.05    
  37  0.279003      -1.27653      -229.736       229.736       1144.36       1374.10    
  38  0.553830     -0.590898      -106.343       106.343       1289.15       1395.49    
  39  0.400809     -0.914271      -164.540       164.540       1141.40       1305.94    
  40  0.146125      -1.92330      -346.134       346.134       1306.36       1652.49    
  41  0.811879     -0.208403      -37.5061       37.5061       1237.79       1275.29    
  42  0.349149      -1.05226      -189.374       189.374       1413.69       1603.07    
  43  0.897422     -0.108229      -19.4778       19.4778       1222.56       1242.03    
  44  0.114492      -2.16725      -390.038       390.038       1145.94       1535.98    
  45  0.831901E-01  -2.48663      -447.516       447.516       1199.90       1647.41    
  46  0.721169     -0.326882      -58.8286       58.8286       1301.53       1360.36    
  47  0.801724     -0.220991      -39.7715       39.7715       1193.47       1233.24    
  48  0.466569     -0.762349      -137.199       137.199       1220.91       1358.11    
  49  0.103404      -2.26911      -408.370       408.370       1127.65       1536.02    
  50  0.417206     -0.874175      -157.324       157.324       1097.97       1255.30    
  51  0.267666      -1.31802      -237.202       237.202       1199.38       1436.58    
  52  0.670232     -0.400131      -72.0111       72.0111       1159.55       1231.56    
  53  0.161265      -1.82470      -328.390       328.390       1148.57       1476.96    
loop,thermsimp(1:2)       32  0.708645       878.490    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113       1247.31          0.85          1.14         21.87          0.01          0.04         23.91
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1247.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       32
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       33
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      112     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -141.484       141.484       1027.88       1169.36    
   2  0.588265E-01  -2.83316      -509.881       509.881       1039.24       1549.12    
   3  0.787103E-01  -2.54198      -457.478       457.478       1031.63       1489.10    
   4  0.597713     -0.514644      -92.6199       92.6199       1059.84       1152.46    
   5  0.110741      -2.20056      -396.033       396.033       1004.20       1400.24    
   6  0.677861     -0.388813      -69.9742       69.9742       1105.28       1175.25    
   7  0.307724      -1.17855      -212.103       212.103       1142.24       1354.35    
   8  0.550587     -0.596770      -107.400       107.400       1122.66       1230.06    
   9  0.601295     -0.508669      -91.5447       91.5447       1108.69       1200.24    
  10  0.487121     -0.719243      -129.441       129.441       1185.57       1315.01    
  11  0.146295      -1.92213      -345.923       345.923       1162.70       1508.62    
  12  0.714050     -0.336802      -60.6139       60.6139       1036.72       1097.33    
  13  0.723089     -0.324223      -58.3501       58.3501       1139.30       1197.65    
  14  0.805432     -0.216376      -38.9410       38.9410       1178.26       1217.20    
  15  0.123280      -2.09329      -376.728       376.728       1053.75       1430.48    
  16  0.853039     -0.158950      -28.6061       28.6061       1173.33       1201.94    
  17  0.288289      -1.24379      -223.844       223.844       1219.09       1442.93    
  18  0.705126     -0.349379      -62.8774       62.8774       1159.55       1222.43    
  19  0.772420     -0.258227      -46.4728       46.4728       1193.47       1239.94    
  20  0.962845     -0.378631E-01  -6.81419       6.81419       1161.04       1167.85    
  21  0.245802      -1.40323      -252.537       252.537       1222.56       1475.09    
  22  0.752702     -0.284087      -51.1268       51.1268       1174.18       1225.31    
  23  0.729896     -0.314853      -56.6637       56.6637       1097.97       1154.64    
  24  0.869278     -0.140092      -25.2123       25.2123       1166.27       1191.48    
  25  0.597817E-01  -2.81706      -506.983       506.983       1237.79       1744.77    
  26  0.984108     -0.160195E-01  -2.88302       2.88302       1071.52       1074.41    
  27  0.278288      -1.27910      -230.198       230.198       1210.89       1441.09    
  28  0.588278     -0.530555      -95.4835       95.4835       1131.18       1226.66    
  29  0.807614     -0.213671      -38.4542       38.4542       1147.61       1186.07    
  30  0.428679     -0.847047      -152.442       152.442       1141.40       1293.85    
  31  0.452991     -0.791883      -142.514       142.514       1185.18       1327.70    
  32  0.678742     -0.387514      -69.7405       69.7405       1145.94       1215.68    
  33  0.504500     -0.684188      -123.133       123.133       1300.11       1423.24    
  34  0.894800     -0.111155      -20.0044       20.0044       1220.91       1240.92    
  35  0.854311     -0.157461      -28.3380       28.3380       1301.53       1329.87    
  36  0.756230     -0.279410      -50.2851       50.2851       1144.36       1194.64    
  37  0.744369     -0.295219      -53.1302       53.1302       1190.50       1243.63    
  38  0.435758     -0.830668      -149.494       149.494       1289.15       1438.64    
  39  0.677387     -0.389513      -70.1002       70.1002       1199.38       1269.48    
  40  0.504989     -0.683219      -122.958       122.958       1308.52       1431.48    
  41  0.325676      -1.12185      -201.899       201.899       1209.55       1411.45    
  42  0.147207      -1.91591      -344.805       344.805       1148.57       1493.38    
  43  0.432041     -0.839234      -151.036       151.036       1220.24       1371.27    
  44  0.615972     -0.484555      -87.2048       87.2048       1140.92       1228.12    
  45  0.150867      -1.89136      -340.386       340.386       1111.92       1452.30    
  46  0.464307     -0.767210      -138.074       138.074       1145.94       1284.02    
  47  0.379753     -0.968234      -174.252       174.252       1127.65       1301.91    
  48  0.886192     -0.120822      -21.7442       21.7442       1182.78       1204.52    
  49  0.231751E-01  -3.76468      -677.525       677.525       1413.69       2091.22    
  50  0.257662      -1.35611      -244.057       244.057       1199.90       1443.96    
  51  0.470381E-01  -3.05680      -550.129       550.129       1306.36       1856.49    
  52  0.972366     -0.280233E-01  -5.04333       5.04333       1053.15       1058.20    
  53  0.242054      -1.41860      -255.303       255.303       1247.31       1502.61    
loop,thermsimp(1:2)       33   141.484       509.881    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114       1123.66          0.85          1.15         21.83          0.00          0.05         23.88
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    115       2244.10          0.84          1.15         22.13          0.00          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1123.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       33
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       34
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      114     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -421.442       421.442       1053.15       1474.60    
   2  0.298819      -1.20792      -217.388       217.388       1071.52       1288.91    
   3  0.706385     -0.347595      -62.5564       62.5564       1036.72       1099.28    
   4  0.958764     -0.421100E-01  -7.57848       7.57848       1059.84       1067.42    
   5  0.306496      -1.18255      -212.822       212.822       1097.97       1310.79    
   6  0.905447     -0.993270E-01  -17.8758       17.8758       1161.04       1178.91    
   7  0.234113      -1.45195      -261.306       261.306       1027.88       1289.18    
   8  0.704141     -0.350777      -63.1290       63.1290       1105.28       1168.41    
   9  0.908200     -0.962902E-01  -17.3292       17.3292       1147.61       1164.94    
  10  0.656383     -0.421011      -75.7690       75.7690       1166.27       1242.03    
  11  0.967894     -0.326327E-01  -5.87287       5.87287       1144.36       1150.23    
  12  0.754670     -0.281475      -50.6567       50.6567       1139.30       1189.95    
  13  0.488960     -0.715475      -128.763       128.763       1108.69       1237.46    
  14  0.451577     -0.795009      -143.077       143.077       1173.33       1316.41    
  15  0.387599E-01  -3.25037      -584.965       584.965       1182.78       1767.75    
  16  0.210942E-02  -6.16134      -1108.85       1108.85       1145.94       2254.79    
  17  0.656530     -0.420787      -75.7285       75.7285       1178.26       1253.99    
  18  0.181246      -1.70790      -307.369       307.369       1159.55       1466.92    
  19  0.758879     -0.275913      -49.6558       49.6558       1174.18       1223.84    
  20  0.392052     -0.936362      -168.516       168.516       1131.18       1299.69    
  21  0.406710     -0.899654      -161.910       161.910       1140.92       1302.83    
  22  0.830107     -0.186201      -33.5103       33.5103       1122.66       1156.17    
  23  0.311833      -1.16529      -209.716       209.716       1193.47       1403.18    
  24  0.945407     -0.561396E-01  -10.1034       10.1034       1220.91       1231.02    
  25  0.303319      -1.19297      -214.698       214.698       1190.50       1405.19    
  26  0.284230      -1.25797      -226.396       226.396       1199.38       1425.78    
  27  0.292492      -1.22932      -221.239       221.239       1145.94       1367.18    
  28  0.401496     -0.912557      -164.232       164.232       1141.40       1305.64    
  29  0.379648     -0.968510      -174.302       174.302       1127.65       1301.96    
  30  0.723496E-01  -2.62625      -472.643       472.643       1185.57       1658.21    
  31  0.940338     -0.615157E-01  -11.0709       11.0709       1185.18       1196.25    
  32  0.766237     -0.266264      -47.9192       47.9192       1301.53       1349.45    
  33  0.984920     -0.151946E-01  -2.73455       2.73455       1142.24       1144.98    
  34  0.552546     -0.593218      -106.761       106.761       1220.24       1327.00    
  35  0.735557     -0.307128      -55.2735       55.2735       1004.20       1059.48    
  36  0.142195      -1.95056      -351.039       351.039       1209.55       1560.59    
  37  0.304783      -1.18816      -213.831       213.831       1300.11       1513.94    
  38  0.868582     -0.140894      -25.3565       25.3565       1053.75       1079.10    
  39  0.382741     -0.960397      -172.842       172.842       1308.52       1481.37    
  40  0.273812      -1.29531      -233.116       233.116       1289.15       1522.26    
  41  0.601920     -0.507631      -91.3579       91.3579       1210.89       1302.25    
  42  0.827744     -0.189051      -34.0234       34.0234       1219.09       1253.11    
  43  0.881186E-01  -2.42907      -437.157       437.157       1199.90       1637.06    
  44  0.386744     -0.949994      -170.969       170.969       1111.92       1282.89    
  45  0.852312     -0.159803      -28.7596       28.7596       1222.56       1251.31    
  46  0.830189     -0.186102      -33.4927       33.4927       1031.63       1065.12    
  47  0.216531      -1.53002      -275.357       275.357       1148.57       1423.93    
  48  0.835540     -0.179677      -32.3363       32.3363       1247.31       1279.65    
  49  0.962152     -0.385824E-01  -6.94364       6.94364       1162.70       1169.64    
  50  0.866477     -0.143320      -25.7931       25.7931       1039.24       1065.03    
  51  0.640111     -0.446114      -80.2866       80.2866       1237.79       1318.08    
  52  0.103467      -2.26850      -408.260       408.260       1306.36       1714.62    
  53  0.746080     -0.292923      -52.7170       52.7170       1123.66       1176.37    
loop,thermsimp(1:2)       34   421.442       217.388    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116       1632.31          0.87          1.15         22.06          0.00          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1632.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       34
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       35
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      115     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -189.917       189.917       1004.20       1194.12    
   2  0.175000      -1.74297      -313.681       313.681       1039.24       1352.92    
   3  0.131587      -2.02809      -364.993       364.993       1031.63       1396.62    
   4  0.301717      -1.19826      -215.650       215.650       1059.84       1275.49    
   5  0.166877      -1.79050      -322.235       322.235       1053.75       1375.98    
   6  0.481073     -0.731736      -131.690       131.690       1036.72       1168.41    
   7  0.706381     -0.347600      -62.5573       62.5573       1142.24       1204.80    
   8  0.702617     -0.352943      -63.5188       63.5188       1144.36       1207.88    
   9  0.552795     -0.592767      -106.680       106.680       1122.66       1229.34    
  10  0.495420     -0.702349      -126.401       126.401       1147.61       1274.01    
  11  0.479343     -0.735339      -132.338       132.338       1105.28       1237.62    
  12  0.462659     -0.770765      -138.714       138.714       1162.70       1301.41    
  13  0.631315E-01  -2.76253      -497.171       497.171       1123.66       1620.83    
  14  0.785681     -0.241205      -43.4094       43.4094       1161.04       1204.45    
  15  0.767932     -0.264055      -47.5217       47.5217       1139.30       1186.82    
  16  0.262689E-01  -3.63937      -654.973       654.973       1185.18       1840.16    
  17  0.871353     -0.137708      -24.7832       24.7832       1174.18       1198.96    
  18  0.618350     -0.480701      -86.5113       86.5113       1220.91       1307.43    
  19  0.196090      -1.62918      -293.203       293.203       1108.69       1401.90    
  20  0.925050     -0.779078E-01  -14.0210       14.0210       1166.27       1180.29    
  21  0.903269     -0.101735      -18.3092       18.3092       1222.56       1240.86    
  22  0.958828     -0.420436E-01  -7.56654       7.56654       1219.09       1226.66    
  23  0.969274     -0.312081E-01  -5.61649       5.61649       1178.26       1183.88    
  24  0.313932      -1.15858      -208.508       208.508       1247.31       1455.82    
  25  0.106324      -2.24126      -403.358       403.358       1111.92       1515.27    
  26  0.718705     -0.330304      -59.4445       59.4445       1071.52       1130.97    
  27  0.751116     -0.286195      -51.5062       51.5062       1027.88       1079.38    
  28  0.996391     -0.361592E-02 -0.650753      0.650753       1131.18       1131.83    
  29  0.313387      -1.16032      -208.821       208.821       1127.65       1336.48    
  30  0.305057      -1.18726      -213.669       213.669       1210.89       1424.56    
  31  0.408833     -0.894447      -160.973       160.973       1140.92       1301.89    
  32  0.589856     -0.527877      -95.0015       95.0015       1141.40       1236.40    
  33  0.808683     -0.212349      -38.2162       38.2162       1097.97       1136.19    
  34  0.481635     -0.730569      -131.480       131.480       1173.33       1304.81    
  35  0.677481     -0.389374      -70.0752       70.0752       1237.79       1307.86    
  36  0.673605     -0.395111      -71.1077       71.1077       1220.24       1291.35    
  37  0.409374E-01  -3.19571      -575.129       575.129       1301.53       1876.66    
  38  0.362144      -1.01571      -182.797       182.797       1145.94       1328.74    
  39  0.364718E-01  -3.31122      -595.916       595.916       1193.47       1789.38    
  40  0.280272      -1.27199      -228.919       228.919       1190.50       1419.42    
  41  0.532528     -0.630120      -113.402       113.402       1148.57       1261.98    
  42  0.901591     -0.103595      -18.6438       18.6438       1199.38       1218.02    
  43  0.262858      -1.33614      -240.464       240.464       1159.55       1400.01    
  44  0.168755      -1.77931      -320.221       320.221       1053.15       1373.37    
  45  0.504619     -0.683952      -123.090       123.090       1308.52       1431.62    
  46  0.900650     -0.104639      -18.8317       18.8317       1300.11       1318.94    
  47  0.438495     -0.824406      -148.367       148.367       1289.15       1437.51    
  48  0.984597     -0.155233E-01  -2.79372       2.79372       1209.55       1212.34    
  49  0.469739     -0.755579      -135.981       135.981       1199.90       1335.88    
  50  0.252111      -1.37789      -247.977       247.977       1185.57       1433.54    
  51  0.764692     -0.268282      -48.2825       48.2825       1306.36       1354.64    
  52  0.848445     -0.164351      -29.5780       29.5780       1182.78       1212.36    
  53  0.705739     -0.348509      -62.7209       62.7209       1632.31       1695.03    
loop,thermsimp(1:2)       35   189.917       313.681    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117       1038.48          0.86          1.15         21.98          0.00          0.04         24.04
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118       1015.46          0.85          1.14         22.18          0.00          0.05         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1015.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       35
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       36
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      117     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -464.281       464.281       1027.88       1492.16    
   2  0.962370     -0.383559E-01  -6.90287       6.90287       1071.52       1078.43    
   3  0.356737      -1.03076      -185.504       185.504       1131.18       1316.68    
   4  0.884319     -0.122937      -22.1249       22.1249       1097.97       1120.10    
   5  0.919725E-01  -2.38627      -429.454       429.454       1036.72       1466.17    
   6  0.900184     -0.105156      -18.9248       18.9248       1166.27       1185.19    
   7  0.390055     -0.941468      -169.435       169.435       1178.26       1347.70    
   8  0.263976      -1.33190      -239.700       239.700       1139.30       1379.00    
   9  0.898455     -0.107078      -19.2708       19.2708       1004.20       1023.47    
  10  0.697674E-01  -2.66259      -479.183       479.183       1174.18       1653.36    
  11  0.888938     -0.117727      -21.1873       21.1873       1161.04       1182.23    
  12  0.824147     -0.193406      -34.8071       34.8071       1142.24       1177.05    
  13  0.941109     -0.606968E-01  -10.9235       10.9235       1144.36       1155.28    
  14  0.885654     -0.121429      -21.8534       21.8534       1209.55       1231.40    
  15  0.798208     -0.225386      -40.5624       40.5624       1182.78       1223.34    
  16  0.365331      -1.00695      -181.220       181.220       1199.38       1380.60    
  17  0.519490     -0.654907      -117.863       117.863       1219.09       1336.95    
  18  0.922741     -0.804065E-01  -14.4707       14.4707       1122.66       1137.13    
  19  0.877443     -0.130744      -23.5298       23.5298       1141.40       1164.93    
  20  0.584844     -0.536410      -96.5372       96.5372       1105.28       1201.82    
  21  0.671390     -0.398406      -71.7007       71.7007       1222.56       1294.26    
  22  0.203335      -1.59290      -286.672       286.672       1148.57       1435.25    
  23  0.330236E-01  -3.41053      -613.790       613.790       1147.61       1761.40    
  24  0.879725     -0.128146      -23.0624       23.0624       1059.84       1082.91    
  25  0.833976     -0.181550      -32.6735       32.6735       1220.24       1252.91    
  26  0.901698     -0.103475      -18.6223       18.6223       1162.70       1181.32    
  27  0.692847     -0.366946      -66.0389       66.0389       1140.92       1206.96    
  28  0.550572     -0.596797      -107.405       107.405       1173.33       1280.74    
  29  0.158383E-01  -4.14532      -746.029       746.029       1220.91       1966.94    
  30  0.503246     -0.686677      -123.581       123.581       1237.79       1361.37    
  31  0.648812     -0.432612      -77.8568       77.8568       1300.11       1377.97    
  32  0.306980      -1.18097      -212.538       212.538       1145.94       1358.48    
  33  0.205188      -1.58383      -285.040       285.040       1199.90       1484.94    
  34  0.265146      -1.32748      -238.904       238.904       1127.65       1366.56    
  35  0.272730E-01  -3.60186      -648.223       648.223       1039.24       1687.46    
  36  0.262990E-01  -3.63823      -654.768       654.768       1306.36       1961.13    
  37  0.492753     -0.707748      -127.373       127.373       1053.15       1180.53    
  38  0.255065      -1.36624      -245.880       245.880       1053.75       1299.63    
  39  0.623259     -0.472794      -85.0882       85.0882       1031.63       1116.72    
  40  0.949296     -0.520343E-01  -9.36456       9.36456       1159.55       1168.91    
  41  0.982394     -0.177630E-01  -3.19679       3.19679       1108.69       1111.89    
  42  0.566450     -0.568366      -102.288       102.288       1190.50       1292.78    
  43  0.557613     -0.584090      -105.118       105.118       1210.89       1316.01    
  44  0.900731     -0.104549      -18.8155       18.8155       1308.52       1327.34    
  45  0.671339     -0.398481      -71.7141       71.7141       1185.57       1257.28    
  46  0.650454     -0.430084      -77.4018       77.4018       1289.15       1366.55    
  47  0.749315     -0.288595      -51.9382       51.9382       1247.31       1299.25    
  48  0.667497     -0.404220      -72.7470       72.7470       1111.92       1184.66    
  49  0.132870      -2.01838      -363.247       363.247       1123.66       1486.90    
  50  0.964787     -0.358480E-01  -6.45153       6.45153       1632.31       1638.76    
  51  0.835780     -0.179390      -32.2846       32.2846       1193.47       1225.75    
  52  0.601609     -0.508148      -91.4508       91.4508       1185.18       1276.63    
  53  0.937321     -0.647298E-01  -11.6494       11.6494       1015.46       1027.11    
loop,thermsimp(1:2)       36   464.281       6.90287    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119       1039.96          0.85          1.15         21.85          0.02          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120       1050.42          0.84          1.14         21.86          0.04          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1039.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       36
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       37
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      119     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -11.2957       11.2957       1004.20       1015.50    
   2  0.112532E-01  -4.48710      -807.539       807.539       1015.46       1823.00    
   3  0.907929     -0.965891E-01  -17.3830       17.3830       1071.52       1088.91    
   4  0.478640     -0.736807      -132.602       132.602       1059.84       1192.45    
   5  0.737686     -0.304237      -54.7532       54.7532       1108.69       1163.45    
   6  0.114880      -2.16387      -389.429       389.429       1031.63       1421.06    
   7  0.309837      -1.17171      -210.871       210.871       1097.97       1308.84    
   8  0.469091     -0.756958      -136.229       136.229       1122.66       1258.89    
   9  0.721151     -0.326907      -58.8331       58.8331       1144.36       1203.19    
  10  0.557251     -0.584740      -105.235       105.235       1141.40       1246.64    
  11  0.581534     -0.542085      -97.5586       97.5586       1159.55       1257.11    
  12  0.501412     -0.690326      -124.237       124.237       1142.24       1266.48    
  13  0.783062     -0.244543      -44.0102       44.0102       1053.15       1097.16    
  14  0.571322     -0.559803      -100.747       100.747       1162.70       1263.44    
  15  0.902729E-01  -2.40492      -432.811       432.811       1161.04       1593.85    
  16  0.695403E-01  -2.66585      -479.770       479.770       1111.92       1591.69    
  17  0.128872      -2.04894      -368.745       368.745       1166.27       1535.01    
  18  0.940828E-01  -2.36358      -425.371       425.371       1105.28       1530.65    
  19  0.326350      -1.11979      -201.527       201.527       1140.92       1342.45    
  20  0.102915      -2.27385      -409.223       409.223       1182.78       1592.00    
  21  0.324524      -1.12540      -202.536       202.536       1193.47       1396.00    
  22  0.259454      -1.34918      -242.810       242.810       1209.55       1452.36    
  23  0.782812     -0.244863      -44.0677       44.0677       1220.24       1264.31    
  24  0.383591     -0.958178      -172.442       172.442       1185.57       1358.01    
  25  0.626880     -0.466999      -84.0454       84.0454       1185.18       1269.23    
  26  0.292269      -1.23008      -221.376       221.376       1173.33       1394.71    
  27  0.448852     -0.801062      -144.166       144.166       1190.50       1334.66    
  28  0.685432     -0.377706      -67.9754       67.9754       1222.56       1290.53    
  29  0.995399     -0.461118E-02 -0.829869      0.829869       1247.31       1248.14    
  30  0.163323      -1.81203      -326.109       326.109       1053.75       1379.86    
  31  0.952940     -0.482038E-01  -8.67518       8.67518       1210.89       1219.57    
  32  0.861306     -0.149306      -26.8704       26.8704       1131.18       1158.05    
  33  0.587276     -0.532261      -95.7905       95.7905       1308.52       1404.32    
  34  0.908704     -0.957357E-01  -17.2295       17.2295       1219.09       1236.32    
  35  0.585935     -0.534546      -96.2017       96.2017       1178.26       1274.46    
  36  0.429836     -0.844352      -151.957       151.957       1145.94       1297.90    
  37  0.726203     -0.319926      -57.5768       57.5768       1237.79       1295.37    
  38  0.151145E-01  -4.19210      -754.448       754.448       1289.15       2043.59    
  39  0.927869     -0.748646E-01  -13.4733       13.4733       1127.65       1141.13    
  40  0.961645     -0.391099E-01  -7.03857       7.03857       1300.11       1307.15    
  41  0.253977      -1.37051      -246.649       246.649       1139.30       1385.95    
  42  0.768038     -0.263917      -47.4968       47.4968       1199.38       1246.88    
  43  0.569441E-01  -2.86569      -515.734       515.734       1148.57       1664.31    
  44  0.103919      -2.26415      -407.476       407.476       1036.72       1444.19    
  45  0.312226      -1.16403      -209.489       209.489       1199.90       1409.39    
  46  0.473636E-02  -5.35249      -963.281       963.281       1123.66       2086.94    
  47  0.192099      -1.64975      -296.903       296.903       1027.88       1324.78    
  48  0.799429     -0.223858      -40.2875       40.2875       1632.31       1672.60    
  49  0.164379      -1.80558      -324.949       324.949       1174.18       1499.13    
  50  0.421896     -0.862996      -155.313       155.313       1039.24       1194.55    
  51  0.361660      -1.01705      -183.038       183.038       1147.61       1330.65    
  52  0.346541      -1.05975      -190.723       190.723       1306.36       1497.08    
  53  0.728715     -0.316473      -56.9553       56.9553       1039.96       1096.92    
loop,thermsimp(1:2)       37   11.2957       807.539    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121       1382.81          0.87          1.15         21.85          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    1382.8        1.083     -2.059      3.450     -102.6      1.190    
                      0.8781      1.176     -99.70      3.645     0.2853    

                       1.925     -2.183      1.540      7000.      7000.    

                      -1.884      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.985     -4.277     -8.200      6.994    

                      -15.26     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1391E-01 0.2893     0.1378E-02 0.1859    

                     -0.2486    -0.1097     0.1743     0.1153     0.1264    



                     -0.4083    -0.5549      0.000     0.1194    -0.6508E-01

                     -0.1497E-01 0.1780    -0.7116    -0.1125     0.3044    

                      0.5249E-01 0.3638E-01-0.6320     -1.320      7000.    



                      -1.266     -1.199     -2.142     -1.982    -0.3807    

                     -0.3252      9.250      8.753    -0.1672E+05 -6.000    

                     -0.3126     -2.265      9.395      8.854    -0.1969E+05



                      -6.000     0.7008    -0.2531      8.494      9.103    

                     -0.1944E+05 -6.000    -0.6111    -0.5170      9.084    

                       8.823    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1382.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       37
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       38
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      120     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -178.084       178.084       1004.20       1182.29    
   2  0.687927     -0.374072      -67.3214       67.3214       1071.52       1138.84    
   3  0.288957      -1.24148      -223.427       223.427       1039.96       1263.39    
   4  0.192838      -1.64590      -296.211       296.211       1053.15       1349.36    
   5  0.369869     -0.994607      -178.998       178.998       1127.65       1306.65    
   6  0.735973     -0.306562      -55.1716       55.1716       1131.18       1186.35    
   7  0.637144     -0.450760      -81.1228       81.1228       1108.69       1189.82    
   8  0.703934     -0.351071      -63.1818       63.1818       1059.84       1123.03    
   9  0.864279     -0.145859      -26.2501       26.2501       1039.24       1065.49    
  10  0.473452     -0.747705      -134.564       134.564       1144.36       1278.92    
  11  0.242010      -1.41877      -255.335       255.335       1210.89       1466.23    
  12  0.510769     -0.671838      -120.910       120.910       1219.09       1340.00    
  13  0.829624     -0.186782      -33.6150       33.6150       1141.40       1175.02    
  14  0.228911      -1.47442      -265.351       265.351       1199.38       1464.73    
  15  0.310006      -1.17116      -210.773       210.773       1247.31       1458.08    
  16  0.248341      -1.39295      -250.688       250.688       1159.55       1410.24    
  17  0.723214     -0.324050      -58.3189       58.3189       1122.66       1180.98    
  18  0.420900     -0.865360      -155.738       155.738       1162.70       1318.43    
  19  0.133903      -2.01064      -361.852       361.852       1220.24       1582.09    
  20  0.571916     -0.558763      -100.560       100.560       1142.24       1242.80    
  21  0.609104     -0.495766      -89.2224       89.2224       1185.18       1274.40    
  22  0.582057     -0.541186      -97.3967       97.3967       1178.26       1275.66    
  23  0.440731     -0.819321      -147.452       147.452       1222.56       1370.01    
  24  0.211006      -1.55587      -280.008       280.008       1237.79       1517.80    
  25  0.665769     -0.406813      -73.2137       73.2137       1145.94       1219.16    
  26  0.766062     -0.266493      -47.9604       47.9604       1300.11       1348.07    
  27  0.321416E-01  -3.43760      -618.662       618.662       1097.97       1716.63    
  28  0.165897E-01  -4.09897      -737.688       737.688       1027.88       1765.57    
  29  0.634553     -0.454835      -81.8562       81.8562       1147.61       1229.47    
  30  0.981834     -0.183335E-01  -3.29946       3.29946       1190.50       1193.80    
  31  0.511720     -0.669978      -120.575       120.575       1140.92       1261.49    
  32  0.426358     -0.852477      -153.419       153.419       1185.57       1338.99    
  33  0.500527     -0.692094      -124.555       124.555       1053.75       1178.30    
  34  0.100483      -2.29777      -413.528       413.528       1139.30       1552.82    
  35  0.837324     -0.177545      -31.9525       31.9525       1173.33       1205.28    
  36  0.257741      -1.35580      -244.002       244.002       1193.47       1437.47    
  37  0.437184     -0.827401      -148.907       148.907       1308.52       1457.43    
  38  0.707529     -0.345976      -62.2650       62.2650       1199.90       1262.16    
  39  0.538379     -0.619193      -111.436       111.436       1031.63       1143.06    
  40  0.611820     -0.491317      -88.4217       88.4217       1036.72       1125.14    
  41  0.404533     -0.905022      -162.876       162.876       1209.55       1372.42    
  42  0.902499     -0.102588      -18.4627       18.4627       1306.36       1324.82    
  43  0.704299     -0.350552      -63.0885       63.0885       1174.18       1237.27    
  44  0.511818     -0.669786      -120.541       120.541       1105.28       1225.82    
  45  0.748131     -0.290178      -52.2230       52.2230       1166.27       1218.49    
  46  0.296598      -1.21538      -218.730       218.730       1111.92       1330.65    
  47  0.805122     -0.216762      -39.0104       39.0104       1182.78       1221.79    
  48  0.525063     -0.644236      -115.943       115.943       1161.04       1276.98    
  49  0.192567      -1.64731      -296.465       296.465       1148.57       1445.04    
  50  0.991898     -0.813527E-02  -1.46410       1.46410       1632.31       1633.78    
  51  0.238175      -1.43475      -258.210       258.210       1015.46       1273.67    
  52  0.627675     -0.465733      -83.8174       83.8174       1289.15       1372.96    
  53  0.328849      -1.11216      -200.153       200.153       1382.81       1582.96    
loop,thermsimp(1:2)       38   178.084       67.3214    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122       1257.35          0.85          1.15         21.84          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1257.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       38
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       39
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      121     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -58.0579       58.0579       1039.24       1097.29    
   2  0.309663      -1.17227      -210.972       210.972       1059.84       1270.82    
   3  0.688114     -0.373801      -67.2725       67.2725       1036.72       1103.99    
   4  0.677876     -0.388791      -69.9703       69.9703       1071.52       1141.49    
   5  0.283701      -1.25984      -226.731       226.731       1031.63       1258.36    
   6  0.183733      -1.69427      -304.916       304.916       1141.40       1446.32    
   7  0.243414      -1.41299      -254.295       254.295       1053.75       1308.04    
   8  0.785389     -0.241576      -43.4761       43.4761       1122.66       1166.13    
   9  0.258033      -1.35467      -243.798       243.798       1004.20       1248.00    
  10  0.137887      -1.98132      -356.577       356.577       1131.18       1487.75    
  11  0.386520     -0.950573      -171.074       171.074       1108.69       1279.77    
  12  0.882934     -0.124505      -22.4071       22.4071       1190.50       1212.90    
  13  0.395106     -0.928602      -167.119       167.119       1173.33       1340.45    
  14  0.107633      -2.22903      -401.157       401.157       1166.27       1567.42    
  15  0.434094     -0.834495      -150.183       150.183       1145.94       1296.13    
  16  0.558484     -0.582529      -104.837       104.837       1182.78       1287.62    
  17  0.102706      -2.27589      -409.589       409.589       1105.28       1514.87    
  18  0.325804      -1.12146      -201.828       201.828       1147.61       1349.44    
  19  0.693871     -0.365469      -65.7730       65.7730       1174.18       1239.95    
  20  0.832622     -0.183176      -32.9660       32.9660       1142.24       1175.21    
  21  0.691207     -0.369316      -66.4654       66.4654       1140.92       1207.38    
  22  0.903946     -0.100985      -18.1742       18.1742       1199.90       1218.07    
  23  0.258785E-01  -3.65434      -657.668       657.668       1039.96       1697.63    
  24  0.247338      -1.39700      -251.417       251.417       1015.46       1266.88    
  25  0.861464     -0.149122      -26.8374       26.8374       1185.18       1212.02    
  26  0.954919     -0.461290E-01  -8.30179       8.30179       1178.26       1186.56    
  27  0.579638     -0.545352      -98.1465       98.1465       1161.04       1259.19    
  28  0.537182     -0.621418      -111.836       111.836       1144.36       1256.20    
  29  0.407710     -0.897199      -161.468       161.468       1127.65       1289.12    
  30  0.958466     -0.424211E-01  -7.63448       7.63448       1162.70       1170.33    
  31  0.884674     -0.122536      -22.0527       22.0527       1306.36       1328.41    
  32  0.395055     -0.928731      -167.143       167.143       1111.92       1279.06    
  33  0.325425      -1.12262      -202.037       202.037       1185.57       1387.60    
  34  0.679842     -0.385895      -69.4492       69.4492       1219.09       1288.54    
  35  0.765292     -0.267498      -48.1413       48.1413       1300.11       1348.25    
  36  0.217460      -1.52574      -274.586       274.586       1053.15       1327.74    
  37  0.181189      -1.70822      -307.426       307.426       1222.56       1529.98    
  38  0.518456     -0.656899      -118.222       118.222       1209.55       1327.77    
  39  0.249864E-01  -3.68942      -663.982       663.982       1289.15       1953.13    
  40  0.336654      -1.08870      -195.932       195.932       1159.55       1355.48    
  41  0.873801     -0.134903      -24.2783       24.2783       1193.47       1217.74    
  42  0.478904     -0.736255      -132.503       132.503       1148.57       1281.08    
  43  0.819950     -0.198512      -35.7260       35.7260       1308.52       1344.25    
  44  0.966813     -0.337500E-01  -6.07396       6.07396       1247.31       1253.39    
  45  0.514109     -0.665319      -119.737       119.737       1199.38       1319.12    
  46  0.483734     -0.726221      -130.697       130.697       1210.89       1341.59    
  47  0.227743E-01  -3.78212      -680.665       680.665       1237.79       1918.45    
  48  0.409495     -0.892830      -160.682       160.682       1139.30       1299.98    
  49  0.198361      -1.61767      -291.130       291.130       1220.24       1511.37    
  50  0.925767     -0.771331E-01  -13.8816       13.8816       1382.81       1396.69    
  51  0.842113     -0.171842      -30.9262       30.9262       1632.31       1663.24    
  52  0.347114E-01  -3.36069      -604.819       604.819       1097.97       1702.79    
  53  0.215814      -1.53334      -275.953       275.953       1257.35       1533.30    
loop,thermsimp(1:2)       39   58.0579       210.972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123       1051.91          0.84          1.14         21.94          0.02          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124       1055.25          0.86          1.14         22.16          0.01          0.05         24.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1051.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       39
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       40
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      123     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -8.35589       8.35589       1039.24       1047.59    
   2  0.450411     -0.797594      -143.542       143.542       1036.72       1180.26    
   3  0.691912E-01  -2.67088      -480.676       480.676       1071.52       1552.20    
   4  0.740935     -0.299842      -53.9622       53.9622       1122.66       1176.62    
   5  0.452531     -0.792898      -142.697       142.697       1162.70       1305.39    
   6  0.461330     -0.773642      -139.232       139.232       1142.24       1281.48    
   7  0.102999      -2.27303      -409.076       409.076       1178.26       1587.34    
   8  0.475106     -0.744217      -133.936       133.936       1140.92       1274.85    
   9  0.240275      -1.42597      -256.630       256.630       1185.18       1441.81    
  10  0.276707E-01  -3.58738      -645.617       645.617       1190.50       1836.11    
  11  0.132701E-01  -4.32224      -777.869       777.869       1193.47       1971.33    
  12  0.997219     -0.278509E-02 -0.501229      0.501229       1199.90       1200.40    
  13  0.563305     -0.573934      -103.290       103.290       1174.18       1277.47    
  14  0.347949      -1.05570      -189.993       189.993       1004.20       1194.20    
  15  0.546018     -0.605103      -108.900       108.900       1247.31       1356.21    
  16  0.343968      -1.06721      -192.064       192.064       1144.36       1336.42    
  17  0.945234     -0.563230E-01  -10.1364       10.1364       1031.63       1041.76    
  18  0.346208      -1.06072      -190.896       190.896       1161.04       1351.94    
  19  0.406433     -0.900337      -162.033       162.033       1015.46       1177.49    
  20  0.632259     -0.458455      -82.5078       82.5078       1059.84       1142.35    
  21  0.983930     -0.162002E-01  -2.91553       2.91553       1111.92       1114.83    
  22  0.200798      -1.60546      -288.932       288.932       1108.69       1397.63    
  23  0.223962      -1.49628      -269.283       269.283       1148.57       1417.86    
  24  0.594322     -0.520335      -93.6441       93.6441       1182.78       1276.42    
  25  0.875298     -0.133191      -23.9702       23.9702       1219.09       1243.06    
  26  0.327822      -1.11529      -200.717       200.717       1127.65       1328.37    
  27  0.215105      -1.53663      -276.545       276.545       1145.94       1422.49    
  28  0.905181     -0.996198E-01  -17.9285       17.9285       1139.30       1157.22    
  29  0.699086     -0.357981      -64.4256       64.4256       1053.75       1118.17    
  30  0.747401     -0.291154      -52.3987       52.3987       1199.38       1251.78    
  31  0.699189     -0.357834      -64.3989       64.3989       1053.15       1117.55    
  32  0.563488     -0.573610      -103.232       103.232       1209.55       1312.78    
  33  0.155576      -1.86062      -334.854       334.854       1306.36       1641.21    
  34  0.380593     -0.966025      -173.854       173.854       1173.33       1347.19    
  35  0.626112     -0.468226      -84.2661       84.2661       1210.89       1295.16    
  36  0.372369     -0.987870      -177.786       177.786       1308.52       1486.31    
  37  0.517531     -0.658686      -118.543       118.543       1300.11       1418.65    
  38  0.673247     -0.395643      -71.2034       71.2034       1147.61       1218.82    
  39  0.741527     -0.299044      -53.8186       53.8186       1159.55       1213.37    
  40  0.280982      -1.26947      -228.464       228.464       1185.57       1414.03    
  41  0.331745      -1.10339      -198.576       198.576       1382.81       1581.38    
  42  0.712030     -0.339635      -61.1238       61.1238       1141.40       1202.53    
  43  0.200581      -1.60654      -289.127       289.127       1131.18       1420.30    
  44  0.989915     -0.101357E-01  -1.82411       1.82411       1220.24       1222.06    
  45  0.808031     -0.213155      -38.3613       38.3613       1105.28       1143.64    
  46  0.893446     -0.112670      -20.2771       20.2771       1222.56       1242.83    
  47  0.364885      -1.00817      -181.440       181.440       1257.35       1438.79    
  48  0.923731     -0.793347E-01  -14.2778       14.2778       1166.27       1180.54    
  49  0.504880     -0.683434      -122.997       122.997       1632.31       1755.31    
  50  0.724988     -0.321600      -57.8781       57.8781       1039.96       1097.84    
  51  0.927322     -0.754540E-01  -13.5794       13.5794       1097.97       1111.55    
  52  0.857721     -0.153476      -27.6210       27.6210       1237.79       1265.41    
  53  0.943333     -0.583361E-01  -10.4987       10.4987       1051.91       1062.41    
loop,thermsimp(1:2)       40   8.35589       143.542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125       1053.10          0.85          1.16         21.99          0.00          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126       1054.57          0.85          1.16         21.87          0.03          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1053.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       40
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       41
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      125     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -184.886       184.886       1031.63       1216.51    
   2  0.414955     -0.879585      -158.298       158.298       1039.24       1197.54    
   3  0.407443     -0.897854      -161.586       161.586       1051.91       1213.49    
   4  0.883897     -0.123414      -22.2108       22.2108       1039.96       1062.17    
   5  0.520045     -0.653840      -117.671       117.671       1097.97       1215.64    
   6  0.634521     -0.454885      -81.8651       81.8651       1111.92       1193.78    
   7  0.344406      -1.06594      -191.835       191.835       1053.15       1244.99    
   8  0.545595     -0.605879      -109.039       109.039       1053.75       1162.79    
   9  0.766876     -0.265430      -47.7691       47.7691       1059.84       1107.61    
  10  0.639043     -0.447783      -80.5871       80.5871       1105.28       1185.87    
  11  0.850701     -0.161694      -29.1000       29.1000       1139.30       1168.40    
  12  0.832060     -0.183851      -33.0875       33.0875       1122.66       1155.75    
  13  0.728209     -0.317167      -57.0801       57.0801       1015.46       1072.54    
  14  0.531327     -0.632378      -113.808       113.808       1036.72       1150.53    
  15  0.188974E-01  -3.96873      -714.248       714.248       1166.27       1880.51    
  16  0.246817      -1.39911      -251.796       251.796       1004.20       1256.00    
  17  0.935336     -0.668496E-01  -12.0308       12.0308       1199.90       1211.93    
  18  0.730823     -0.313585      -56.4355       56.4355       1141.40       1197.84    
  19  0.482288     -0.729213      -131.236       131.236       1159.55       1290.78    
  20  0.782974E-04  -9.45500      -1701.61       1701.61       1147.61       2849.22    
  21  0.258744      -1.35192      -243.303       243.303       1220.24       1463.54    
  22  0.389044     -0.944063      -169.902       169.902       1222.56       1392.46    
  23  0.611459E-01  -2.79449      -502.922       502.922       1219.09       1722.01    
  24  0.124922      -2.08006      -374.347       374.347       1199.38       1573.73    
  25  0.253683      -1.37167      -246.858       246.858       1237.79       1484.65    
  26  0.781437     -0.246621      -44.3841       44.3841       1140.92       1185.30    
  27  0.835634     -0.179565      -32.3161       32.3161       1182.78       1215.10    
  28  0.542030     -0.612434      -110.219       110.219       1174.18       1284.40    
  29  0.463443     -0.769071      -138.409       138.409       1142.24       1280.65    
  30  0.120587      -2.11538      -380.703       380.703       1210.89       1591.60    
  31  0.733316     -0.310178      -55.8225       55.8225       1162.70       1218.52    
  32  0.955530     -0.454889E-01  -8.18658       8.18658       1209.55       1217.73    
  33  0.419735     -0.868132      -156.237       156.237       1127.65       1283.89    
  34  0.284829      -1.25587      -226.017       226.017       1144.36       1370.38    
  35  0.924079     -0.789582E-01  -14.2100       14.2100       1173.33       1187.54    
  36  0.432674     -0.837770      -150.773       150.773       1161.04       1311.81    
  37  0.155293      -1.86244      -335.181       335.181       1247.31       1582.49    
  38  0.634342     -0.455168      -81.9161       81.9161       1108.69       1190.61    
  39  0.935635     -0.665293E-01  -11.9732       11.9732       1185.57       1197.54    
  40  0.931832     -0.706024E-01  -12.7062       12.7062       1148.57       1161.28    
  41  0.875970     -0.132424      -23.8322       23.8322       1300.11       1323.94    
  42  0.273544      -1.29629      -233.292       233.292       1131.18       1364.47    
  43  0.799596     -0.223649      -40.2499       40.2499       1145.94       1186.19    
  44  0.772883     -0.257628      -46.3650       46.3650       1257.35       1303.71    
  45  0.274276      -1.29362      -232.812       232.812       1185.18       1417.99    
  46  0.116034      -2.15387      -387.630       387.630       1308.52       1696.16    
  47  0.700214     -0.356369      -64.1354       64.1354       1071.52       1135.66    
  48  0.704184E-01  -2.65330      -477.512       477.512       1382.81       1860.32    
  49  0.699980E-01  -2.65929      -478.590       478.590       1178.26       1656.85    
  50  0.186964      -1.67684      -301.779       301.779       1306.36       1608.14    
  51  0.342641      -1.07107      -192.760       192.760       1632.31       1825.07    
  52  0.989806     -0.102462E-01  -1.84399       1.84399       1190.50       1192.34    
  53  0.216227      -1.53143      -275.609       275.609       1053.10       1328.71    
loop,thermsimp(1:2)       41   184.886       158.298    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127       1124.44          0.85          1.14         21.83          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128       1408.37          0.85          1.14         21.91          0.01          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1124.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       41
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       42
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      127     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -518.932       518.932       1039.96       1558.89    
   2  0.688513     -0.373221      -67.1682       67.1682       1015.46       1082.63    
   3  0.530653     -0.633647      -114.037       114.037       1059.84       1173.88    
   4  0.542886     -0.610856      -109.935       109.935       1071.52       1181.46    
   5  0.603382     -0.505205      -90.9212       90.9212       1036.72       1127.64    
   6  0.478412     -0.737283      -132.688       132.688       1122.66       1255.35    
   7  0.809657     -0.211144      -37.9994       37.9994       1148.57       1186.57    
   8  0.764585     -0.268422      -48.3076       48.3076       1053.75       1102.06    
   9  0.228600      -1.47578      -265.595       265.595       1139.30       1404.89    
  10  0.495526     -0.702136      -126.363       126.363       1140.92       1267.28    
  11  0.368264     -0.998954      -179.781       179.781       1105.28       1285.06    
  12  0.407647     -0.897355      -161.496       161.496       1145.94       1307.44    
  13  0.316165      -1.15149      -207.233       207.233       1173.33       1380.56    
  14  0.458518     -0.779756      -140.332       140.332       1108.69       1249.03    
  15  0.643610     -0.440663      -79.3056       79.3056       1190.50       1269.80    
  16  0.316553E-01  -3.45285      -621.406       621.406       1111.92       1733.32    
  17  0.570171     -0.561819      -101.110       101.110       1039.24       1140.35    
  18  0.448642E-01  -3.10412      -558.644       558.644       1185.57       1744.21    
  19  0.128957      -2.04828      -368.627       368.627       1141.40       1510.03    
  20  0.159422      -1.83620      -330.459       330.459       1199.90       1530.36    
  21  0.154083      -1.87026      -336.589       336.589       1051.91       1388.50    
  22  0.696997     -0.360974      -64.9641       64.9641       1182.78       1247.74    
  23  0.579421     -0.545727      -98.2139       98.2139       1097.97       1196.19    
  24  0.528206     -0.638269      -114.869       114.869       1031.63       1146.50    
  25  0.322914      -1.13037      -203.431       203.431       1209.55       1412.98    
  26  0.369562     -0.995437      -179.148       179.148       1162.70       1341.84    
  27  0.134248      -2.00806      -361.389       361.389       1053.15       1414.54    
  28  0.950150     -0.511358E-01  -9.20285       9.20285       1004.20       1013.41    
  29  0.138040      -1.98021      -356.377       356.377       1142.24       1498.62    
  30  0.316838      -1.14936      -206.850       206.850       1127.65       1334.50    
  31  0.151783      -1.88530      -339.296       339.296       1174.18       1513.48    
  32  0.338674      -1.08272      -194.856       194.856       1159.55       1354.40    
  33  0.814165     -0.205592      -37.0002       37.0002       1257.35       1294.35    
  34  0.578183     -0.547865      -98.5986       98.5986       1161.04       1259.64    
  35  0.208707      -1.56682      -281.980       281.980       1300.11       1582.09    
  36  0.540561     -0.615147      -110.707       110.707       1053.10       1163.81    
  37  0.910129     -0.941686E-01  -16.9474       16.9474       1131.18       1148.12    
  38  0.907740     -0.967972E-01  -17.4205       17.4205       1144.36       1161.78    
  39  0.549661     -0.598453      -107.703       107.703       1222.56       1330.26    
  40  0.193889      -1.64047      -295.234       295.234       1185.18       1480.42    
  41  0.807651     -0.213625      -38.4459       38.4459       1220.24       1258.68    
  42  0.613777     -0.488124      -87.8471       87.8471       1237.79       1325.64    
  43  0.664452     -0.408793      -73.5700       73.5700       1199.38       1272.95    
  44  0.584630     -0.536776      -96.6030       96.6030       1247.31       1343.91    
  45  0.618915     -0.479787      -86.3468       86.3468       1210.89       1297.24    
  46  0.542097     -0.612311      -110.197       110.197       1306.36       1416.55    
  47  0.133641      -2.01260      -362.206       362.206       1178.26       1540.47    
  48  0.479627     -0.734747      -132.232       132.232       1308.52       1440.76    
  49  0.225939      -1.48749      -267.702       267.702       1219.09       1486.79    
  50  0.324869      -1.12433      -202.345       202.345       1632.31       1834.66    
  51  0.669051     -0.401895      -72.3287       72.3287       1382.81       1455.13    
  52  0.602039     -0.507434      -91.3223       91.3223       1166.27       1257.59    
  53  0.143076      -1.94438      -349.928       349.928       1124.44       1474.37    
loop,thermsimp(1:2)       42   518.932       67.1682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129       1128.78          0.85          1.15         21.82          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130       1284.85          0.84          1.15         21.89          0.00          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1128.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       42
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       43
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      129     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -42.7417       42.7417       1004.20       1046.94    
   2  0.796559     -0.227454      -40.9347       40.9347       1015.46       1056.39    
   3  0.784232     -0.243051      -43.7416       43.7416       1053.75       1097.49    
   4  0.503549     -0.686074      -123.472       123.472       1036.72       1160.19    
   5  0.468337     -0.758566      -136.518       136.518       1039.24       1175.76    
   6  0.198518      -1.61688      -290.988       290.988       1031.63       1322.61    
   7  0.857529     -0.153700      -27.6612       27.6612       1131.18       1158.84    
   8  0.845427     -0.167913      -30.2191       30.2191       1144.36       1174.58    
   9  0.710919     -0.341197      -61.4049       61.4049       1053.10       1114.50    
  10  0.934107     -0.681640E-01  -12.2674       12.2674       1059.84       1072.11    
  11  0.565087     -0.570775      -102.722       102.722       1071.52       1174.24    
  12  0.147377      -1.91476      -344.598       344.598       1148.57       1493.17    
  13  0.471965     -0.750851      -135.130       135.130       1097.97       1233.10    
  14  0.287319      -1.24716      -224.450       224.450       1182.78       1407.23    
  15  0.526906     -0.640733      -115.312       115.312       1108.69       1224.01    
  16  0.176999      -1.73161      -311.636       311.636       1122.66       1434.29    
  17  0.868579     -0.140897      -25.3570       25.3570       1166.27       1191.62    
  18  0.621282     -0.475971      -85.6600       85.6600       1220.24       1305.90    
  19  0.181881      -1.70440      -306.740       306.740       1161.04       1467.78    
  20  0.565209     -0.570560      -102.683       102.683       1140.92       1243.60    
  21  0.927617     -0.751364E-01  -13.5222       13.5222       1190.50       1204.02    
  22  0.296120      -1.21699      -219.020       219.020       1199.38       1418.40    
  23  0.152389      -1.88132      -338.579       338.579       1105.28       1443.86    
  24  0.508731     -0.675835      -121.629       121.629       1257.35       1378.98    
  25  0.389654     -0.942496      -169.620       169.620       1210.89       1380.51    
  26  0.770754     -0.260386      -46.8614       46.8614       1145.94       1192.81    
  27  0.144347      -1.93554      -348.336       348.336       1237.79       1586.13    
  28  0.690124     -0.370884      -66.7477       66.7477       1222.56       1289.30    
  29  0.882429     -0.125077      -22.5100       22.5100       1127.65       1150.16    
  30  0.781105     -0.247045      -44.4605       44.4605       1162.70       1207.16    
  31  0.331946      -1.10278      -198.466       198.466       1247.31       1445.78    
  32  0.157011      -1.85144      -333.201       333.201       1159.55       1492.75    
  33  0.734200     -0.308973      -55.6056       55.6056       1173.33       1228.94    
  34  0.563390     -0.573784      -103.263       103.263       1051.91       1155.17    
  35  0.349498      -1.05126      -189.194       189.194       1139.30       1328.49    
  36  0.256822      -1.35937      -244.644       244.644       1209.55       1454.19    
  37  0.563556     -0.573488      -103.210       103.210       1053.15       1156.36    
  38  0.945419E-01  -2.35871      -424.495       424.495       1306.36       1730.85    
  39  0.571450     -0.559577      -100.707       100.707       1308.52       1409.23    
  40  0.583029E-01  -2.84210      -511.490       511.490       1382.81       1894.30    
  41  0.428808     -0.846746      -152.388       152.388       1124.44       1276.83    
  42  0.628450     -0.464499      -83.5953       83.5953       1185.18       1268.78    
  43  0.152789      -1.87869      -338.107       338.107       1219.09       1557.20    
  44  0.787004E-01  -2.54211      -457.500       457.500       1142.24       1599.74    
  45  0.170927E-01  -4.06911      -732.313       732.313       1141.40       1873.72    
  46  0.531078     -0.632847      -113.893       113.893       1174.18       1288.07    
  47  0.206082E-01  -3.88206      -698.651       698.651       1199.90       1898.55    
  48  0.909565     -0.947891E-01  -17.0591       17.0591       1178.26       1195.32    
  49  0.456291     -0.784625      -141.208       141.208       1039.96       1181.17    
  50  0.997425E-02  -4.60775      -829.252       829.252       1300.11       2129.36    
  51  0.251070      -1.38202      -248.721       248.721       1111.92       1360.64    
  52  0.548517     -0.600536      -108.078       108.078       1185.57       1293.65    
  53  0.210242      -1.55950      -280.661       280.661       1128.78       1409.44    
loop,thermsimp(1:2)       43   42.7417       40.9347    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131       1019.48          0.83          1.14         21.89          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    132       1033.93          0.84          1.14         21.87          0.01          0.05         23.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1019.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       43
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       44
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      131     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -405.636       405.636       1004.20       1409.84    
   2  0.780131E-01  -2.55088      -459.079       459.079       1015.46       1474.54    
   3  0.723689     -0.323394      -58.2009       58.2009       1059.84       1118.05    
   4  0.439896     -0.821218      -147.794       147.794       1053.75       1201.54    
   5  0.967364     -0.331803E-01  -5.97142       5.97142       1053.10       1059.07    
   6  0.235884      -1.44441      -259.950       259.950       1127.65       1387.60    
   7  0.311956      -1.16489      -209.645       209.645       1051.91       1261.55    
   8  0.600573     -0.509870      -91.7608       91.7608       1053.15       1144.91    
   9  0.781739     -0.246234      -44.3145       44.3145       1131.18       1175.49    
  10  0.505036     -0.683126      -122.941       122.941       1036.72       1159.66    
  11  0.896130     -0.109670      -19.7372       19.7372       1071.52       1091.26    
  12  0.545040     -0.606897      -109.223       109.223       1144.36       1253.58    
  13  0.338019      -1.08465      -195.204       195.204       1039.24       1234.44    
  14  0.200467      -1.60711      -289.229       289.229       1039.96       1329.19    
  15  0.548763     -0.600089      -107.997       107.997       1166.27       1274.26    
  16  0.897241     -0.108431      -19.5142       19.5142       1145.94       1165.46    
  17  0.229905      -1.47009      -264.570       264.570       1178.26       1442.83    
  18  0.387828     -0.947193      -170.465       170.465       1190.50       1360.96    
  19  0.789400     -0.236482      -42.5595       42.5595       1162.70       1205.25    
  20  0.495667     -0.701851      -126.311       126.311       1108.69       1235.01    
  21  0.818926     -0.199761      -35.9508       35.9508       1173.33       1209.28    
  22  0.181319      -1.70750      -307.296       307.296       1097.97       1405.27    
  23  0.901986     -0.103156      -18.5649       18.5649       1140.92       1159.48    
  24  0.933790E-01  -2.37109      -426.722       426.722       1185.18       1611.90    
  25  0.171523      -1.76304      -317.292       317.292       1124.44       1441.74    
  26  0.648450     -0.433170      -77.9571       77.9571       1174.18       1252.14    
  27  0.777448     -0.251739      -45.3051       45.3051       1222.56       1267.86    
  28  0.777670     -0.251453      -45.2537       45.2537       1185.57       1230.82    
  29  0.972420     -0.279672E-01  -5.03323       5.03323       1220.24       1225.27    
  30  0.825305     -0.192002      -34.5543       34.5543       1031.63       1066.18    
  31  0.470649     -0.753642      -135.632       135.632       1139.30       1274.93    
  32  0.263953      -1.33198      -239.715       239.715       1111.92       1351.63    
  33  0.857551     -0.153675      -27.6568       27.6568       1257.35       1285.01    
  34  0.950157     -0.511279E-01  -9.20143       9.20143       1210.89       1220.09    
  35  0.866482     -0.143314      -25.7920       25.7920       1182.78       1208.57    
  36  0.904889     -0.999433E-01  -17.9867       17.9867       1308.52       1326.51    
  37  0.297565      -1.21212      -218.144       218.144       1128.78       1346.92    
  38  0.902696     -0.102369      -18.4233       18.4233       1199.38       1217.80    
  39  0.800054     -0.223076      -40.1468       40.1468       1122.66       1162.81    
  40  0.534162     -0.627057      -112.851       112.851       1105.28       1218.13    
  41  0.593018     -0.522530      -94.0391       94.0391       1247.31       1341.35    
  42  0.682417E-01  -2.68470      -483.163       483.163       1209.55       1692.71    
  43  0.336048      -1.09050      -196.256       196.256       1161.04       1357.30    
  44  0.576540     -0.550710      -99.1107       99.1107       1159.55       1258.66    
  45  0.217955      -1.52347      -274.177       274.177       1148.57       1422.75    
  46  0.281607      -1.26724      -228.064       228.064       1219.09       1447.15    
  47  0.306631      -1.18211      -212.743       212.743       1237.79       1450.53    
  48  0.676335E-01  -2.69365      -484.774       484.774       1142.24       1627.02    
  49  0.145631      -1.92668      -346.742       346.742       1306.36       1653.10    
  50  0.820952     -0.197291      -35.5062       35.5062       1141.40       1176.91    
  51  0.224137      -1.49550      -269.143       269.143       1382.81       1651.95    
  52  0.738282     -0.303430      -54.6080       54.6080       1199.90       1254.51    
  53  0.364089      -1.01036      -181.833       181.833       1019.48       1201.31    
loop,thermsimp(1:2)       44   405.636       459.079    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133       1029.43          0.85          1.15         21.84          0.06          0.05         23.95
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    134       1051.21          0.86          1.15         21.75          0.12          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1029.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       44
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       45
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      133     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -24.5228       24.5228       1053.10       1077.62    
   2  0.990306     -0.974175E-02  -1.75321       1.75321       1031.63       1033.38    
   3  0.488656     -0.716096      -128.875       128.875       1071.52       1200.40    
   4  0.865115E-01  -2.44748      -440.470       440.470       1059.84       1500.31    
   5  0.234262      -1.45132      -261.192       261.192       1053.15       1314.35    
   6  0.906541     -0.981186E-01  -17.6583       17.6583       1140.92       1158.58    
   7  0.680454     -0.384995      -69.2871       69.2871       1036.72       1106.01    
   8  0.575574     -0.552388      -99.4127       99.4127       1122.66       1222.07    
   9  0.537443E-02  -5.22610      -940.536       940.536       1145.94       2086.48    
  10  0.421676     -0.863518      -155.407       155.407       1131.18       1286.58    
  11  0.297588      -1.21204      -218.130       218.130       1141.40       1359.53    
  12  0.119337      -2.12581      -382.579       382.579       1019.48       1402.06    
  13  0.958276     -0.426192E-01  -7.67013       7.67013       1053.75       1061.42    
  14  0.115549      -2.15806      -388.383       388.383       1162.70       1551.08    
  15  0.104220      -2.26125      -406.956       406.956       1182.78       1589.74    
  16  0.719503     -0.329194      -59.2447       59.2447       1173.33       1232.58    
  17  0.875656     -0.132782      -23.8966       23.8966       1199.38       1223.28    
  18  0.578760     -0.546868      -98.4192       98.4192       1105.28       1203.70    
  19  0.923704     -0.793639E-01  -14.2830       14.2830       1210.89       1225.18    
  20  0.457980     -0.780930      -140.543       140.543       1220.24       1360.78    
  21  0.783173     -0.244401      -43.9847       43.9847       1185.57       1229.55    
  22  0.764479     -0.268561      -48.3326       48.3326       1039.24       1087.57    
  23  0.496891     -0.699384      -125.867       125.867       1108.69       1234.56    
  24  0.554859     -0.589041      -106.009       106.009       1174.18       1280.19    
  25  0.734503E-02  -4.91373      -884.319       884.319       1144.36       2028.68    
  26  0.117643      -2.14010      -385.152       385.152       1199.90       1585.05    
  27  0.145440      -1.92799      -346.979       346.979       1159.55       1506.53    
  28  0.375449     -0.979633      -176.304       176.304       1051.91       1228.21    
  29  0.954324E-01  -2.34934      -422.808       422.808       1222.56       1645.36    
  30  0.449085     -0.800543      -144.073       144.073       1166.27       1310.34    
  31  0.354483      -1.03709      -186.645       186.645       1139.30       1325.94    
  32  0.153971      -1.87099      -336.720       336.720       1257.35       1594.07    
  33  0.871598     -0.137427      -24.7325       24.7325       1308.52       1333.26    
  34  0.633061     -0.457188      -82.2796       82.2796       1039.96       1122.24    
  35  0.947022E-01  -2.35702      -424.190       424.190       1247.31       1671.50    
  36  0.793812     -0.230909      -41.5565       41.5565       1128.78       1170.34    
  37  0.760585     -0.273667      -49.2516       49.2516       1111.92       1161.17    
  38  0.124312      -2.08496      -375.229       375.229       1161.04       1536.27    
  39  0.961605E-03  -6.94691      -1250.23       1250.23       1190.50       2440.72    
  40  0.672529     -0.396710      -71.3955       71.3955       1127.65       1199.05    
  41  0.749847E-01  -2.59047      -466.204       466.204       1097.97       1564.18    
  42  0.982441     -0.177147E-01  -3.18810       3.18810       1004.20       1007.39    
  43  0.340727      -1.07667      -193.768       193.768       1148.57       1342.34    
  44  0.915043     -0.887846E-01  -15.9785       15.9785       1124.44       1140.42    
  45  0.150614      -1.89303      -340.687       340.687       1178.26       1518.95    
  46  0.892785     -0.113409      -20.4101       20.4101       1219.09       1239.50    
  47  0.844073     -0.169516      -30.5076       30.5076       1237.79       1268.30    
  48  0.469949     -0.755131      -135.900       135.900       1015.46       1151.36    
  49  0.389072     -0.943991      -169.889       169.889       1185.18       1355.07    
  50  0.738049     -0.303745      -54.6647       54.6647       1142.24       1196.91    
  51  0.250173      -1.38560      -249.366       249.366       1382.81       1632.17    
  52  0.383245     -0.959081      -172.605       172.605       1306.36       1478.96    
  53  0.384434     -0.955983      -172.047       172.047       1029.43       1201.48    
loop,thermsimp(1:2)       45   24.5228       1.75321    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    135       1041.31          0.86          1.14         21.85          0.00          0.05         23.90
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    136       1125.98          0.84          1.14         21.96          0.00          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1041.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       45
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       46
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      135     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -437.286       437.286       1004.20       1441.49    
   2  0.312747      -1.16236      -209.189       209.189       1031.63       1240.82    
   3  0.317683      -1.14670      -206.370       206.370       1053.75       1260.12    
   4  0.693053     -0.366649      -65.9855       65.9855       1053.10       1119.08    
   5  0.361881      -1.01644      -182.927       182.927       1039.24       1222.16    
   6  0.127478      -2.05981      -370.702       370.702       1036.72       1407.42    
   7  0.718706     -0.330302      -59.4442       59.4442       1039.96       1099.40    
   8  0.609419E-01  -2.79783      -503.523       503.523       1124.44       1627.97    
   9  0.320798      -1.13695      -204.615       204.615       1015.46       1220.07    
  10  0.343503      -1.06856      -192.308       192.308       1140.92       1333.23    
  11  0.671828     -0.397753      -71.5832       71.5832       1111.92       1183.50    
  12  0.616702     -0.483369      -86.9915       86.9915       1128.78       1215.77    
  13  0.806358E-01  -2.51781      -453.128       453.128       1142.24       1595.37    
  14  0.997284     -0.271972E-02 -0.489466      0.489466       1127.65       1128.14    
  15  0.554344     -0.589969      -106.176       106.176       1071.52       1177.70    
  16  0.411057     -0.889023      -159.996       159.996       1029.43       1189.43    
  17  0.846258E-01  -2.46952      -444.436       444.436       1105.28       1549.71    
  18  0.737439     -0.304571      -54.8134       54.8134       1122.66       1177.47    
  19  0.393790     -0.931939      -167.720       167.720       1199.38       1367.10    
  20  0.965947     -0.346467E-01  -6.23533       6.23533       1210.89       1217.13    
  21  0.150166      -1.89601      -341.223       341.223       1051.91       1393.13    
  22  0.212005      -1.55114      -279.158       279.158       1185.57       1464.73    
  23  0.615060     -0.486036      -87.4714       87.4714       1173.33       1260.80    
  24  0.382142     -0.961962      -173.123       173.123       1108.69       1281.82    
  25  0.249044      -1.39013      -250.180       250.180       1219.09       1469.27    
  26  0.245943      -1.40266      -252.435       252.435       1237.79       1490.22    
  27  0.108882      -2.21749      -399.080       399.080       1174.18       1573.26    
  28  0.199835      -1.61026      -289.797       289.797       1131.18       1420.97    
  29  0.863954     -0.146235      -26.3179       26.3179       1166.27       1192.58    
  30  0.392842     -0.934347      -168.153       168.153       1053.15       1221.31    
  31  0.770596     -0.260592      -46.8984       46.8984       1139.30       1186.19    
  32  0.149868      -1.89800      -341.582       341.582       1308.52       1650.11    
  33  0.234154      -1.45178      -261.274       261.274       1148.57       1409.85    
  34  0.611512     -0.491821      -88.5124       88.5124       1185.18       1273.69    
  35  0.518093E-01  -2.96019      -532.741       532.741       1141.40       1674.14    
  36  0.567953     -0.565716      -101.811       101.811       1220.24       1322.05    
  37  0.190847      -1.65628      -298.080       298.080       1019.48       1317.56    
  38  0.104561      -2.25798      -406.367       406.367       1306.36       1712.72    
  39  0.135276      -2.00044      -360.017       360.017       1059.84       1419.86    
  40  0.262364      -1.33802      -240.803       240.803       1159.55       1400.35    
  41  0.463951     -0.767976      -138.212       138.212       1178.26       1316.47    
  42  0.419672     -0.868282      -156.264       156.264       1161.04       1317.30    
  43  0.897011     -0.108687      -19.5602       19.5602       1162.70       1182.26    
  44  0.818933     -0.199754      -35.9494       35.9494       1097.97       1133.92    
  45  0.136906      -1.98846      -357.862       357.862       1199.90       1557.76    
  46  0.561722     -0.576748      -103.797       103.797       1182.78       1286.58    
  47  0.991681     -0.835368E-02  -1.50340       1.50340       1257.35       1258.85    
  48  0.653388     -0.425585      -76.5921       76.5921       1382.81       1459.40    
  49  0.578557     -0.547219      -98.4824       98.4824       1222.56       1321.04    
  50  0.784121     -0.243191      -43.7669       43.7669       1247.31       1291.08    
  51  0.827307     -0.189579      -34.1184       34.1184       1144.36       1178.48    
  52  0.994261     -0.575522E-02  -1.03576       1.03576       1145.94       1146.98    
  53  0.274030      -1.29452      -232.973       232.973       1041.31       1274.28    
loop,thermsimp(1:2)       46   437.286       209.189    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137       1034.31          0.86          1.16         21.85          0.00          0.04         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138       1146.46          0.84          1.16         22.12          0.00          0.05         24.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1034.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       46
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       47
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      137     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -570.910       570.910       1039.96       1610.87    
   2  0.581082     -0.542864      -97.6987       97.6987       1053.10       1150.80    
   3  0.690143     -0.370857      -66.7427       66.7427       1127.65       1194.40    
   4  0.958690     -0.421877E-01  -7.59247       7.59247       1097.97       1105.56    
   5  0.947492     -0.539367E-01  -9.70694       9.70694       1145.94       1155.65    
   6  0.253816E-01  -3.67373      -661.158       661.158       1122.66       1783.82    
   7  0.811950     -0.208316      -37.4904       37.4904       1071.52       1109.01    
   8  0.448512     -0.801821      -144.303       144.303       1144.36       1288.66    
   9  0.625244     -0.469613      -84.5158       84.5158       1162.70       1247.21    
  10  0.557627     -0.584065      -105.114       105.114       1111.92       1217.03    
  11  0.762657     -0.270947      -48.7621       48.7621       1139.30       1188.06    
  12  0.579328     -0.545887      -98.2427       98.2427       1029.43       1127.67    
  13  0.168395      -1.78144      -320.605       320.605       1166.27       1486.87    
  14  0.993282     -0.674111E-02  -1.21319       1.21319       1128.78       1129.99    
  15  0.573458     -0.556070      -100.075       100.075       1210.89       1310.97    
  16  0.900456     -0.104854      -18.8704       18.8704       1015.46       1034.33    
  17  0.961937     -0.388068E-01  -6.98402       6.98402       1053.15       1060.14    
  18  0.685702     -0.377312      -67.9045       67.9045       1039.24       1107.14    
  19  0.335644      -1.09171      -196.473       196.473       1031.63       1228.10    
  20  0.726392     -0.319666      -57.5299       57.5299       1257.35       1314.88    
  21  0.523515     -0.647189      -116.474       116.474       1053.75       1170.22    
  22  0.877914     -0.130206      -23.4331       23.4331       1173.33       1196.77    
  23  0.893563     -0.112539      -20.2535       20.2535       1185.18       1205.44    
  24  0.829449     -0.186994      -33.6532       33.6532       1041.31       1074.96    
  25  0.454457     -0.788653      -141.933       141.933       1108.69       1250.63    
  26  0.261407      -1.34168      -241.460       241.460       1182.78       1424.24    
  27  0.144225      -1.93638      -348.489       348.489       1247.31       1595.80    
  28  0.963744     -0.369299E-01  -6.64623       6.64623       1178.26       1184.91    
  29  0.267843      -1.31735      -237.083       237.083       1161.04       1398.12    
  30  0.251943E-01  -3.68114      -662.491       662.491       1019.48       1681.97    
  31  0.321532      -1.13466      -204.203       204.203       1222.56       1426.76    
  32  0.440903     -0.818930      -147.382       147.382       1220.24       1367.62    
  33  0.214416      -1.53984      -277.123       277.123       1140.92       1418.04    
  34  0.212185      -1.55030      -279.006       279.006       1199.38       1478.39    
  35  0.948253E-01  -2.35572      -423.956       423.956       1051.91       1475.87    
  36  0.507627     -0.678008      -122.020       122.020       1159.55       1281.57    
  37  0.415074     -0.879299      -158.247       158.247       1036.72       1194.97    
  38  0.768069     -0.263876      -47.4895       47.4895       1148.57       1196.06    
  39  0.462999E-01  -3.07261      -552.975       552.975       1059.84       1612.82    
  40  0.835390     -0.179856      -32.3686       32.3686       1131.18       1163.55    
  41  0.678734     -0.387526      -69.7427       69.7427       1004.20       1073.95    
  42  0.363569      -1.01179      -182.090       182.090       1382.81       1564.90    
  43  0.677161     -0.389846      -70.1601       70.1601       1185.57       1255.73    
  44  0.506668     -0.679899      -122.361       122.361       1219.09       1341.45    
  45  0.875658     -0.132779      -23.8961       23.8961       1237.79       1261.68    
  46  0.924863     -0.781102E-01  -14.0574       14.0574       1105.28       1119.34    
  47  0.794570E-01  -2.53254      -455.779       455.779       1199.90       1655.68    
  48  0.449212     -0.800261      -144.022       144.022       1174.18       1318.20    
  49  0.658987     -0.417051      -75.0563       75.0563       1142.24       1217.30    
  50  0.674357     -0.393995      -70.9069       70.9069       1124.44       1195.35    
  51  0.436334     -0.829348      -149.257       149.257       1308.52       1457.78    
  52  0.331871      -1.10301      -198.507       198.507       1141.40       1339.91    
  53  0.233029      -1.45659      -262.142       262.142       1034.31       1296.46    
loop,thermsimp(1:2)       47   570.910       97.6987    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139       1154.25          0.86          1.14         22.05          0.00          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1154.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       47
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       48
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      138     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -102.172       102.172       1015.46       1117.63    
   2  0.216137      -1.53184      -275.684       275.684       1053.15       1328.84    
   3  0.476425     -0.741444      -133.437       133.437       1004.20       1137.64    
   4  0.184047      -1.69256      -304.609       304.609       1041.31       1345.92    
   5  0.722630     -0.324858      -58.4644       58.4644       1097.97       1156.44    
   6  0.887750     -0.119065      -21.4280       21.4280       1039.24       1060.66    
   7  0.236344      -1.44247      -259.599       259.599       1071.52       1331.12    
   8  0.798055     -0.225578      -40.5969       40.5969       1105.28       1145.87    
   9  0.425454     -0.854597      -153.801       153.801       1029.43       1183.23    
  10  0.605701     -0.501368      -90.2307       90.2307       1128.78       1219.01    
  11  0.742456     -0.297792      -53.5934       53.5934       1053.10       1106.69    
  12  0.378462E-01  -3.27423      -589.259       589.259       1145.94       1735.20    
  13  0.341910      -1.07321      -193.144       193.144       1131.18       1324.32    
  14  0.794971E-01  -2.53203      -455.688       455.688       1053.75       1509.44    
  15  0.586423     -0.533715      -96.0521       96.0521       1178.26       1274.32    
  16  0.990523     -0.952170E-02  -1.71361       1.71361       1139.30       1141.01    
  17  0.348475      -1.05419      -189.721       189.721       1127.65       1317.38    
  18  0.998034     -0.196755E-02 -0.354098      0.354098       1036.72       1037.07    
  19  0.616072     -0.484391      -87.1754       87.1754       1124.44       1211.62    
  20  0.427239     -0.850411      -153.048       153.048       1148.57       1301.62    
  21  0.598160     -0.513898      -92.4856       92.4856       1173.33       1265.82    
  22  0.642831     -0.441873      -79.5234       79.5234       1185.18       1264.71    
  23  0.392766     -0.934541      -168.188       168.188       1111.92       1280.10    
  24  0.738407     -0.303260      -54.5774       54.5774       1142.24       1196.82    
  25  0.334341      -1.09559      -197.173       197.173       1031.63       1228.80    
  26  0.997912     -0.208996E-02 -0.376127      0.376127       1162.70       1163.07    
  27  0.492305E-01  -3.01124      -541.930       541.930       1108.69       1650.62    
  28  0.304734      -1.18832      -213.860       213.860       1185.57       1399.43    
  29  0.159886      -1.83330      -329.936       329.936       1237.79       1567.73    
  30  0.991331     -0.870666E-02  -1.56693       1.56693       1159.55       1161.12    
  31  0.735164     -0.307662      -55.3697       55.3697       1144.36       1199.73    
  32  0.279948      -1.27315      -229.128       229.128       1034.31       1263.44    
  33  0.457260     -0.782502      -140.826       140.826       1210.89       1351.72    
  34  0.678170     -0.388358      -69.8923       69.8923       1257.35       1327.24    
  35  0.689603     -0.371639      -66.8835       66.8835       1174.18       1241.06    
  36  0.468470     -0.758283      -136.467       136.467       1141.40       1277.87    
  37  0.937429     -0.646141E-01  -11.6285       11.6285       1219.09       1230.72    
  38  0.115915      -2.15490      -387.815       387.815       1220.24       1608.05    
  39  0.125789      -2.07315      -373.102       373.102       1161.04       1534.14    
  40  0.137562      -1.98368      -357.001       357.001       1140.92       1497.92    
  41  0.273901      -1.29499      -233.057       233.057       1182.78       1415.84    
  42  0.934963     -0.672484E-01  -12.1026       12.1026       1222.56       1234.66    
  43  0.450296     -0.797850      -143.588       143.588       1308.52       1452.11    
  44  0.681645     -0.383246      -68.9724       68.9724       1051.91       1120.88    
  45  0.282914E-01  -3.56520      -641.625       641.625       1199.38       1841.01    
  46  0.962226     -0.385062E-01  -6.92992       6.92992       1166.27       1173.20    
  47  0.771412     -0.259533      -46.7078       46.7078       1382.81       1429.51    
  48  0.778208     -0.250761      -45.1293       45.1293       1247.31       1292.44    
  49  0.945686     -0.558450E-01  -10.0504       10.0504       1039.96       1050.01    
  50  0.648669     -0.432833      -77.8965       77.8965       1059.84       1137.74    
  51  0.214283      -1.54046      -277.234       277.234       1199.90       1477.13    
  52  0.692999     -0.366726      -65.9994       65.9994       1019.48       1085.48    
  53  0.966323     -0.342573E-01  -6.16525       6.16525       1154.25       1160.41    
loop,thermsimp(1:2)       48   102.172       275.684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       1024.69          0.85          1.15         21.81          0.00          0.05         23.86
Just calling func    0   0         23.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141       1060.77          0.84          1.14         21.86          0.01          0.05         23.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    1060.8       0.8901     -1.954      4.453     -102.6      1.473    
                      0.9951     0.6184     -99.70      3.749     0.8028    

                       1.791     -2.741      1.540      7000.      7000.    

                      -1.605      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -9.110     -6.117     -9.529      8.387    

                      -14.23     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1411E-01 0.3728     0.8497E-01 0.2694    

                     -0.2486    -0.8515E-01 0.2578     0.1989     0.2100    



                     -0.5621    -0.6783      0.000     0.1523    -0.1224    

                      0.6116E-01 0.2615    -0.7116    -0.1155     0.3879    

                      0.1100     0.1200    -0.7032     -1.529      7000.    



                      -1.553     -1.289     -2.142     -1.982    -0.3807    

                     -0.3252      9.299      8.846    -0.1672E+05 -6.000    

                     -0.3398E-01 -5.063      9.407      8.966    -0.1969E+05



                      -6.000     0.8166    -0.1787      8.900      9.215    

                     -0.1944E+05 -6.000    -0.4916    -0.4140      9.096    

                       8.935    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1024.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       48
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       49
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      140     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -307.643       307.643       1036.72       1344.36    
   2  0.335083      -1.09338      -196.774       196.774       1039.96       1236.73    
   3  0.585160     -0.535871      -96.4401       96.4401       1039.24       1135.68    
   4  0.445729     -0.808044      -145.423       145.423       1019.48       1164.90    
   5  0.963605     -0.370741E-01  -6.67218       6.67218       1053.10       1059.77    
   6  0.538074     -0.619758      -111.537       111.537       1015.46       1127.00    
   7  0.971443     -0.289729E-01  -5.21423       5.21423       1051.91       1057.12    
   8  0.817136     -0.201950      -36.3447       36.3447       1004.20       1040.55    
   9  0.216943      -1.52812      -275.015       275.015       1059.84       1334.86    
  10  0.572311     -0.558074      -100.436       100.436       1139.30       1239.73    
  11  0.511761     -0.669897      -120.561       120.561       1105.28       1225.84    
  12  0.331920E-01  -3.40545      -612.875       612.875       1097.97       1710.85    
  13  0.662680     -0.411462      -74.0505       74.0505       1154.25       1228.30    
  14  0.578679     -0.547007      -98.4442       98.4442       1159.55       1257.99    
  15  0.473979     -0.746592      -134.363       134.363       1162.70       1297.06    
  16  0.243750      -1.41161      -254.046       254.046       1166.27       1420.31    
  17  0.784227     -0.243057      -43.7428       43.7428       1029.43       1073.17    
  18  0.215065      -1.53682      -276.579       276.579       1142.24       1418.82    
  19  0.813272     -0.206689      -37.1977       37.1977       1144.36       1181.56    
  20  0.877336     -0.130865      -23.5517       23.5517       1124.44       1148.00    
  21  0.911070     -0.931357E-01  -16.7615       16.7615       1128.78       1145.54    
  22  0.424500     -0.856844      -154.205       154.205       1031.63       1185.83    
  23  0.122508      -2.09958      -377.859       377.859       1219.09       1596.95    
  24  0.173199      -1.75331      -315.542       315.542       1222.56       1538.10    
  25  0.243010      -1.41465      -254.594       254.594       1174.18       1428.77    
  26  0.618804     -0.479966      -86.3790       86.3790       1034.31       1120.69    
  27  0.365303      -1.00703      -181.234       181.234       1185.18       1366.42    
  28  0.178054      -1.72567      -310.567       310.567       1173.33       1483.90    
  29  0.416122     -0.876776      -157.792       157.792       1178.26       1336.06    
  30  0.789287     -0.236625      -42.5852       42.5852       1141.40       1183.99    
  31  0.786736     -0.239863      -43.1679       43.1679       1111.92       1155.08    
  32  0.295880      -1.21780      -219.166       219.166       1247.31       1466.48    
  33  0.418649     -0.870722      -156.703       156.703       1148.57       1305.28    
  34  0.706992     -0.346736      -62.4017       62.4017       1127.65       1190.06    
  35  0.281863      -1.26633      -227.901       227.901       1131.18       1359.08    
  36  0.357290      -1.02921      -185.226       185.226       1257.35       1442.58    
  37  0.174180      -1.74767      -314.526       314.526       1053.15       1367.68    
  38  0.190924      -1.65588      -298.007       298.007       1071.52       1369.53    
  39  0.630369     -0.461449      -83.0465       83.0465       1041.31       1124.36    
  40  0.252261      -1.37729      -247.870       247.870       1210.89       1458.76    
  41  0.359213      -1.02384      -184.260       184.260       1185.57       1369.83    
  42  0.740344     -0.300640      -54.1060       54.1060       1182.78       1236.89    
  43  0.283211      -1.26156      -227.042       227.042       1382.81       1609.85    
  44  0.965119     -0.355039E-01  -6.38959       6.38959       1308.52       1314.91    
  45  0.389600     -0.942634      -169.645       169.645       1199.90       1369.54    
  46  0.598383     -0.513525      -92.4185       92.4185       1140.92       1233.34    
  47  0.631795     -0.459190      -82.6400       82.6400       1053.75       1136.39    
  48  0.997460     -0.254363E-02 -0.457775      0.457775       1161.04       1161.50    
  49  0.192532      -1.64749      -296.498       296.498       1237.79       1534.29    
  50  0.769348     -0.262212      -47.1900       47.1900       1220.24       1267.43    
  51  0.740745     -0.300099      -54.0085       54.0085       1108.69       1162.70    
  52  0.590587     -0.526639      -94.7787       94.7787       1145.94       1240.72    
  53  0.628310E-01  -2.76731      -498.029       498.029       1024.69       1522.72    
loop,thermsimp(1:2)       49   307.643       196.774    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142       1187.05          0.85          1.15         21.83          0.00          0.04         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1187.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       49
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       50
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      141     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -621.023       621.023       1004.20       1625.23    
   2  0.601445     -0.508421      -91.5000       91.5000       1051.91       1143.41    
   3  0.651191     -0.428952      -77.1980       77.1980       1053.10       1130.30    
   4  0.187303      -1.67503      -301.453       301.453       1029.43       1330.88    
   5  0.664603     -0.408566      -73.5291       73.5291       1034.31       1107.84    
   6  0.945236     -0.563208E-01  -10.1360       10.1360       1041.31       1051.45    
   7  0.865870     -0.144020      -25.9191       25.9191       1015.46       1041.38    
   8  0.674117     -0.394351      -70.9710       70.9710       1039.24       1110.21    
   9  0.959689E-01  -2.34373      -421.799       421.799       1053.75       1475.55    
  10  0.663337     -0.410472      -73.8722       73.8722       1128.78       1202.65    
  11  0.384854     -0.954891      -171.851       171.851       1124.44       1296.30    
  12  0.892338     -0.113910      -20.5003       20.5003       1111.92       1132.42    
  13  0.470837     -0.753243      -135.560       135.560       1161.04       1296.60    
  14  0.262618      -1.33706      -240.628       240.628       1108.69       1349.32    
  15  0.877143     -0.131085      -23.5912       23.5912       1019.48       1043.07    
  16  0.262102      -1.33902      -240.982       240.982       1144.36       1385.34    
  17  0.306130      -1.18375      -213.038       213.038       1141.40       1354.44    
  18  0.251844      -1.37895      -248.168       248.168       1031.63       1279.79    
  19  0.371147     -0.991157      -178.378       178.378       1127.65       1306.03    
  20  0.244393E-01  -3.71156      -667.966       667.966       1105.28       1773.24    
  21  0.550903     -0.596197      -107.297       107.297       1154.25       1261.54    
  22  0.509078     -0.675154      -121.507       121.507       1140.92       1262.43    
  23  0.741178     -0.299515      -53.9034       53.9034       1039.96       1093.86    
  24  0.585965     -0.534496      -96.1927       96.1927       1182.78       1278.97    
  25  0.602491     -0.506683      -91.1872       91.1872       1139.30       1230.48    
  26  0.532366     -0.630423      -113.457       113.457       1145.94       1259.40    
  27  0.264247      -1.33087      -239.515       239.515       1159.55       1399.06    
  28  0.468512     -0.758194      -136.451       136.451       1220.24       1356.69    
  29  0.338122      -1.08435      -195.149       195.149       1162.70       1357.84    
  30  0.815455     -0.204008      -36.7152       36.7152       1148.57       1185.29    
  31  0.126007      -2.07142      -372.791       372.791       1308.52       1681.32    
  32  0.391435     -0.937937      -168.800       168.800       1059.84       1228.64    
  33  0.477179     -0.739864      -133.153       133.153       1178.26       1311.42    
  34  0.926058     -0.768180E-01  -13.8248       13.8248       1036.72       1050.54    
  35  0.305992E-01  -3.48678      -627.513       627.513       1131.18       1758.69    
  36  0.142122      -1.95107      -351.132       351.132       1185.18       1536.31    
  37  0.934627E-01  -2.37019      -426.561       426.561       1053.15       1479.71    
  38  0.933240     -0.690924E-01  -12.4345       12.4345       1071.52       1083.96    
  39  0.551354     -0.595378      -107.150       107.150       1199.90       1307.05    
  40  0.167646      -1.78590      -321.407       321.407       1185.57       1506.97    
  41  0.657770     -0.418900      -75.3891       75.3891       1142.24       1217.63    
  42  0.937012     -0.650587E-01  -11.7085       11.7085       1166.27       1177.97    
  43  0.435130     -0.832109      -149.754       149.754       1174.18       1323.93    
  44  0.346278E-01  -3.36310      -605.253       605.253       1257.35       1862.60    
  45  0.529273     -0.636251      -114.505       114.505       1210.89       1325.40    
  46  0.543808     -0.609159      -109.630       109.630       1247.31       1356.94    
  47  0.476993     -0.740254      -133.223       133.223       1173.33       1306.56    
  48  0.602365     -0.506891      -91.2247       91.2247       1024.69       1115.91    
  49  0.429141     -0.845970      -152.248       152.248       1237.79       1390.04    
  50  0.161300E-01  -4.12707      -742.745       742.745       1222.56       1965.30    
  51  0.806405     -0.215169      -38.7238       38.7238       1219.09       1257.81    
  52  0.577848E-01  -2.85103      -513.097       513.097       1382.81       1895.90    
  53  0.992308     -0.772154E-02  -1.38964       1.38964       1187.05       1188.44    
loop,thermsimp(1:2)       50   621.023       91.5000    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143       1049.34          0.85          1.14         21.89          0.01          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144       1372.01          0.86          1.14         21.94          0.00          0.05         23.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1049.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       50
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       51
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      143     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -13.1969       13.1969       1015.46       1028.66    
   2  0.669511     -0.401208      -72.2050       72.2050       1019.48       1091.69    
   3  0.863337E-01  -2.44954      -440.840       440.840       1036.72       1477.56    
   4  0.279945      -1.27316      -229.130       229.130       1041.31       1270.44    
   5  0.832640     -0.183154      -32.9621       32.9621       1071.52       1104.48    
   6  0.848933     -0.163775      -29.4745       29.4745       1039.96       1069.44    
   7  0.141794      -1.95338      -351.548       351.548       1034.31       1385.86    
   8  0.208764      -1.56655      -281.931       281.931       1039.24       1321.17    
   9  0.755787     -0.279996      -50.3906       50.3906       1024.69       1075.08    
  10  0.177416      -1.72926      -311.213       311.213       1053.10       1364.31    
  11  0.405148     -0.903503      -162.602       162.602       1111.92       1274.52    
  12  0.640380     -0.445693      -80.2109       80.2109       1051.91       1132.12    
  13  0.548060     -0.601370      -108.228       108.228       1166.27       1274.49    
  14  0.773287     -0.257105      -46.2709       46.2709       1148.57       1194.84    
  15  0.180768      -1.71054      -307.844       307.844       1187.05       1494.90    
  16  0.135846      -1.99624      -359.260       359.260       1128.78       1488.04    
  17  0.601016     -0.509133      -91.6282       91.6282       1142.24       1233.87    
  18  0.302263      -1.19646      -215.325       215.325       1059.84       1275.17    
  19  0.189428      -1.66374      -299.422       299.422       1139.30       1438.72    
  20  0.737158     -0.304953      -54.8821       54.8821       1219.09       1273.97    
  21  0.790680     -0.234862      -42.2679       42.2679       1145.94       1188.21    
  22  0.177192E-01  -4.03310      -725.834       725.834       1154.25       1880.08    
  23  0.236042      -1.44375      -259.829       259.829       1140.92       1400.75    
  24  0.459229     -0.778206      -140.053       140.053       1182.78       1322.83    
  25  0.586479E-01  -2.83620      -510.428       510.428       1031.63       1542.06    
  26  0.263766      -1.33269      -239.843       239.843       1124.44       1364.29    
  27  0.942550     -0.591663E-01  -10.6481       10.6481       1161.04       1171.69    
  28  0.106855      -2.23628      -402.461       402.461       1127.65       1530.12    
  29  0.710700     -0.341505      -61.4602       61.4602       1173.33       1234.79    
  30  0.207109E-01  -3.87709      -697.757       697.757       1199.90       1897.66    
  31  0.901203     -0.104025      -18.7213       18.7213       1178.26       1196.98    
  32  0.949751     -0.515555E-01  -9.27840       9.27840       1174.18       1183.46    
  33  0.343487      -1.06861      -192.316       192.316       1210.89       1403.21    
  34  0.875043     -0.133483      -24.0227       24.0227       1029.43       1053.45    
  35  0.122447E-01  -4.40266      -792.343       792.343       1108.69       1901.04    
  36  0.820650     -0.197659      -35.5725       35.5725       1141.40       1176.98    
  37  0.748866     -0.289195      -52.0461       52.0461       1220.24       1272.28    
  38  0.594525     -0.519992      -93.5824       93.5824       1247.31       1340.89    
  39  0.927863E-01  -2.37746      -427.868       427.868       1162.70       1590.56    
  40  0.631335     -0.459918      -82.7710       82.7710       1144.36       1227.13    
  41  0.282620      -1.26365      -227.418       227.418       1237.79       1465.21    
  42  0.707811     -0.345578      -62.1933       62.1933       1159.55       1221.74    
  43  0.930463     -0.720730E-01  -12.9709       12.9709       1053.75       1066.72    
  44  0.988563     -0.115032E-01  -2.07023       2.07023       1053.15       1055.22    
  45  0.869439     -0.139907      -25.1790       25.1790       1185.57       1210.75    
  46  0.693921     -0.365397      -65.7601       65.7601       1185.18       1250.94    
  47  0.731753     -0.312312      -56.2065       56.2065       1004.20       1060.41    
  48  0.848712     -0.164035      -29.5212       29.5212       1308.52       1338.05    
  49  0.174447      -1.74613      -314.250       314.250       1131.18       1445.43    
  50  0.313212      -1.16087      -208.921       208.921       1105.28       1314.20    
  51  0.880789     -0.126937      -22.8447       22.8447       1257.35       1280.19    
  52  0.441967     -0.816520      -146.948       146.948       1382.81       1529.75    
  53  0.624106     -0.471435      -84.8436       84.8436       1049.34       1134.19    
loop,thermsimp(1:2)       51   13.1969       72.2050    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145       1129.28          0.84          1.14         21.85          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1129.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       51
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       52
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      144     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -75.3174       75.3174       1015.46       1090.78    
   2  0.385391     -0.953496      -171.600       171.600       1029.43       1201.03    
   3  0.323679      -1.12800      -203.005       203.005       1053.15       1256.16    
   4  0.402516E-01  -3.21260      -578.169       578.169       1004.20       1582.37    
   5  0.866022     -0.143846      -25.8877       25.8877       1053.75       1079.64    
   6  0.560147     -0.579555      -104.302       104.302       1039.96       1144.26    
   7  0.389098     -0.943925      -169.877       169.877       1024.69       1194.57    
   8  0.470755     -0.753417      -135.592       135.592       1019.48       1155.07    
   9  0.794299     -0.230295      -41.4460       41.4460       1071.52       1112.97    
  10  0.897132     -0.108553      -19.5361       19.5361       1051.91       1071.44    
  11  0.359474      -1.02311      -184.129       184.129       1049.34       1233.47    
  12  0.604694     -0.503032      -90.5302       90.5302       1161.04       1251.57    
  13  0.101554      -2.28717      -411.619       411.619       1141.40       1553.02    
  14  0.274480      -1.29288      -232.677       232.677       1174.18       1406.86    
  15  0.916086     -0.876445E-01  -15.7733       15.7733       1145.94       1161.72    
  16  0.820070E-01  -2.50095      -450.093       450.093       1148.57       1598.67    
  17  0.975902     -0.243929E-01  -4.38997       4.38997       1178.26       1182.65    
  18  0.131665      -2.02750      -364.887       364.887       1185.57       1550.45    
  19  0.751313     -0.285933      -51.4591       51.4591       1159.55       1211.01    
  20  0.775324     -0.254475      -45.7975       45.7975       1144.36       1190.16    
  21  0.237000      -1.43969      -259.100       259.100       1142.24       1401.34    
  22  0.113641      -2.17471      -391.380       391.380       1173.33       1564.71    
  23  0.762281     -0.271440      -48.8507       48.8507       1185.18       1234.03    
  24  0.783730     -0.243690      -43.8567       43.8567       1041.31       1085.17    
  25  0.492891     -0.707468      -127.322       127.322       1220.24       1347.56    
  26  0.471904     -0.750980      -135.153       135.153       1219.09       1354.24    
  27  0.855781     -0.155740      -28.0284       28.0284       1166.27       1194.29    
  28  0.636473     -0.451814      -81.3124       81.3124       1111.92       1193.23    
  29  0.433340     -0.836232      -150.496       150.496       1059.84       1210.34    
  30  0.482236     -0.729321      -131.255       131.255       1257.35       1388.60    
  31  0.855143E-01  -2.45907      -442.557       442.557       1105.28       1547.83    
  32  0.916579     -0.871071E-01  -15.6766       15.6766       1039.24       1054.91    
  33  0.232519      -1.45878      -262.536       262.536       1182.78       1445.32    
  34  0.283977      -1.25886      -226.556       226.556       1308.52       1535.08    
  35  0.401228E-01  -3.21581      -578.746       578.746       1247.31       1826.06    
  36  0.235231      -1.44719      -260.449       260.449       1124.44       1384.89    
  37  0.233426      -1.45489      -261.835       261.835       1053.10       1314.93    
  38  0.903594     -0.101376      -18.2445       18.2445       1034.31       1052.56    
  39  0.857571     -0.153651      -27.6524       27.6524       1140.92       1168.57    
  40  0.444085     -0.811739      -146.088       146.088       1210.89       1356.98    
  41  0.151055      -1.89011      -340.162       340.162       1139.30       1479.46    
  42  0.745694     -0.293440      -52.8100       52.8100       1131.18       1183.99    
  43  0.470647E-01  -3.05623      -550.027       550.027       1237.79       1787.82    
  44  0.344459      -1.06578      -191.808       191.808       1036.72       1228.53    
  45  0.592738     -0.523004      -94.1244       94.1244       1128.78       1222.90    
  46  0.754292     -0.281975      -50.7468       50.7468       1187.05       1237.80    
  47  0.162950      -1.81431      -326.520       326.520       1382.81       1709.33    
  48  0.939100     -0.628333E-01  -11.3081       11.3081       1127.65       1138.96    
  49  0.966845     -0.337175E-01  -6.06811       6.06811       1031.63       1037.69    
  50  0.287323      -1.24715      -224.448       224.448       1162.70       1387.14    
  51  0.835081     -0.180227      -32.4352       32.4352       1154.25       1186.68    
  52  0.836052     -0.179064      -32.2260       32.2260       1199.90       1232.12    
  53  0.382321     -0.961495      -173.039       173.039       1129.28       1302.32    
loop,thermsimp(1:2)       52   75.3174       171.600    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146       1074.82          0.85          1.15         21.94          0.00          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1074.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       52
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       53
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      145     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -97.4922       97.4922       1031.63       1129.12    
   2  0.307993      -1.17768      -211.945       211.945       1034.31       1246.26    
   3  0.551684     -0.594779      -107.042       107.042       1039.24       1146.28    
   4  0.969976     -0.304835E-01  -5.48609       5.48609       1051.91       1057.39    
   5  0.401714     -0.912015      -164.134       164.134       1053.75       1217.88    
   6  0.336211      -1.09002      -196.169       196.169       1041.31       1237.48    
   7  0.649191     -0.432028      -77.7516       77.7516       1015.46       1093.21    
   8  0.426986     -0.851005      -153.155       153.155       1071.52       1224.68    
   9  0.479997     -0.733976      -132.093       132.093       1127.65       1259.75    
  10  0.441527     -0.817516      -147.128       147.128       1039.96       1187.09    
  11  0.218988      -1.51874      -273.326       273.326       1019.48       1292.81    
  12  0.935549     -0.666221E-01  -11.9899       11.9899       1145.94       1157.93    
  13  0.159996      -1.83261      -329.813       329.813       1140.92       1470.73    
  14  0.486870     -0.719759      -129.534       129.534       1178.26       1307.80    
  15  0.835520     -0.179701      -32.3405       32.3405       1131.18       1163.52    
  16  0.643759     -0.440431      -79.2639       79.2639       1154.25       1233.51    
  17  0.177188      -1.73054      -311.444       311.444       1144.36       1455.80    
  18  0.408356     -0.895617      -161.183       161.183       1111.92       1273.10    
  19  0.463768     -0.768371      -138.283       138.283       1166.27       1304.55    
  20  0.616820     -0.483178      -86.9570       86.9570       1024.69       1111.64    
  21  0.377083     -0.975289      -175.522       175.522       1029.43       1204.95    
  22  0.278016      -1.28008      -230.374       230.374       1059.84       1290.22    
  23  0.746435     -0.292446      -52.6312       52.6312       1159.55       1212.18    
  24  0.872234     -0.136697      -24.6012       24.6012       1128.78       1153.38    
  25  0.887073E-01  -2.42241      -435.959       435.959       1036.72       1472.68    
  26  0.124913      -2.08014      -374.360       374.360       1199.90       1574.26    
  27  0.918160     -0.853835E-01  -15.3664       15.3664       1049.34       1064.71    
  28  0.924603     -0.783912E-01  -14.1080       14.1080       1185.18       1199.29    
  29  0.863214     -0.147092      -26.4721       26.4721       1187.05       1213.53    
  30  0.823499E-02  -4.79936      -863.736       863.736       1161.04       2024.78    
  31  0.548113     -0.601275      -108.211       108.211       1053.15       1161.36    
  32  0.800553     -0.222452      -40.0345       40.0345       1129.28       1169.32    
  33  0.180829      -1.71020      -307.783       307.783       1053.10       1360.88    
  34  0.968975E-01  -2.33410      -420.066       420.066       1220.24       1640.30    
  35  0.749847     -0.287886      -51.8106       51.8106       1219.09       1270.90    
  36  0.902028     -0.103110      -18.5566       18.5566       1210.89       1229.45    
  37  0.312083      -1.16449      -209.571       209.571       1124.44       1334.02    
  38  0.472691     -0.749313      -134.853       134.853       1162.70       1297.55    
  39  0.970346     -0.301026E-01  -5.41753       5.41753       1257.35       1262.77    
  40  0.485853     -0.721850      -129.911       129.911       1142.24       1272.15    
  41  0.604658     -0.503092      -90.5410       90.5410       1174.18       1264.72    
  42  0.172238      -1.75888      -316.544       316.544       1182.78       1499.32    
  43  0.359079E-01  -3.32680      -598.720       598.720       1139.30       1738.02    
  44  0.464923     -0.765884      -137.835       137.835       1308.52       1446.36    
  45  0.293512      -1.22584      -220.613       220.613       1105.28       1325.89    
  46  0.572788     -0.557239      -100.286       100.286       1185.57       1285.85    
  47  0.931713     -0.707300E-01  -12.7292       12.7292       1141.40       1154.13    
  48  0.983012     -0.171340E-01  -3.08359       3.08359       1173.33       1176.42    
  49  0.572194     -0.558278      -100.473       100.473       1004.20       1104.68    
  50  0.272189      -1.30126      -234.186       234.186       1148.57       1382.76    
  51  0.521081     -0.651849      -117.313       117.313       1382.81       1500.12    
  52  0.560075     -0.579685      -104.325       104.325       1237.79       1342.11    
  53  0.442251     -0.815877      -146.833       146.833       1074.82       1221.65    
loop,thermsimp(1:2)       53   97.4922       211.945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147       1519.83          0.84          1.15         21.81          0.01          0.05         23.86
Just calling func    0   0         23.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1519.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       53
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       54
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      146     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -102.442       102.442       1051.91       1154.35    
   2  0.698829     -0.358349      -64.4917       64.4917       1049.34       1113.84    
   3  0.550231     -0.597418      -107.517       107.517       1015.46       1122.98    
   4  0.844966     -0.168459      -30.3173       30.3173       1004.20       1034.52    
   5  0.139804      -1.96751      -354.091       354.091       1024.69       1378.78    
   6  0.119451      -2.12485      -382.407       382.407       1031.63       1414.03    
   7  0.474112     -0.746312      -134.313       134.313       1039.24       1173.55    
   8  0.293024      -1.22750      -220.912       220.912       1128.78       1349.69    
   9  0.760137     -0.274256      -49.3576       49.3576       1141.40       1190.76    
  10  0.216376      -1.53074      -275.485       275.485       1145.94       1421.43    
  11  0.837069     -0.177849      -32.0073       32.0073       1053.15       1085.16    
  12  0.969258     -0.312245E-01  -5.61945       5.61945       1131.18       1136.80    
  13  0.335918      -1.09089      -196.326       196.326       1129.28       1325.61    
  14  0.966643     -0.339265E-01  -6.10572       6.10572       1173.33       1179.44    
  15  0.723887     -0.323119      -58.1514       58.1514       1039.96       1098.11    
  16  0.459929E-01  -3.07927      -554.173       554.173       1185.18       1739.35    
  17  0.536724     -0.622271      -111.990       111.990       1029.43       1141.42    
  18  0.432574     -0.838001      -150.814       150.814       1159.55       1310.36    
  19  0.160308      -1.83066      -329.462       329.462       1187.05       1516.52    
  20  0.885158     -0.121989      -21.9542       21.9542       1053.75       1075.70    
  21  0.753783     -0.282650      -50.8683       50.8683       1074.82       1125.69    
  22  0.135562      -1.99832      -359.636       359.636       1071.52       1431.16    
  23  0.817964     -0.200937      -36.1624       36.1624       1210.89       1247.05    
  24  0.286617      -1.24961      -224.891       224.891       1154.25       1379.14    
  25  0.319126      -1.14217      -205.555       205.555       1041.31       1246.86    
  26  0.104479E-01  -4.56135      -820.902       820.902       1034.31       1855.22    
  27  0.671407     -0.398379      -71.6959       71.6959       1127.65       1199.35    
  28  0.782955     -0.244680      -44.0349       44.0349       1257.35       1301.38    
  29  0.186689      -1.67831      -302.044       302.044       1174.18       1476.22    
  30  0.462519     -0.771067      -138.768       138.768       1219.09       1357.86    
  31  0.203171      -1.59371      -286.818       286.818       1142.24       1429.06    
  32  0.851762E-01  -2.46303      -443.270       443.270       1111.92       1555.19    
  33  0.702824     -0.352649      -63.4658       63.4658       1185.57       1249.03    
  34  0.747923     -0.290456      -52.2730       52.2730       1059.84       1112.12    
  35  0.224450      -1.49410      -268.892       268.892       1019.48       1288.37    
  36  0.243563E-02  -6.01755      -1082.97       1082.97       1162.70       2245.67    
  37  0.160790      -1.82766      -328.922       328.922       1166.27       1495.19    
  38  0.880431     -0.127343      -22.9178       22.9178       1178.26       1201.18    
  39  0.507306     -0.678640      -122.134       122.134       1105.28       1227.41    
  40  0.266019      -1.32419      -238.313       238.313       1124.44       1362.76    
  41  0.310751      -1.16876      -210.341       210.341       1237.79       1448.13    
  42  0.945006     -0.565640E-01  -10.1798       10.1798       1053.10       1063.28    
  43  0.265699E-01  -3.62797      -652.923       652.923       1148.57       1801.50    
  44  0.652842     -0.426420      -76.7423       76.7423       1308.52       1385.27    
  45  0.799409     -0.223882      -40.2919       40.2919       1144.36       1184.65    
  46  0.543529     -0.609672      -109.722       109.722       1140.92       1250.64    
  47  0.361947      -1.01626      -182.895       182.895       1036.72       1219.61    
  48  0.398721     -0.919492      -165.480       165.480       1182.78       1348.26    
  49  0.349489      -1.05128      -189.198       189.198       1382.81       1572.00    
  50  0.948739     -0.526212E-01  -9.47019       9.47019       1199.90       1209.37    
  51  0.346176      -1.06081      -190.913       190.913       1220.24       1411.15    
  52  0.678244     -0.388248      -69.8726       69.8726       1139.30       1209.17    
  53  0.858518     -0.152547      -27.4538       27.4538       1519.83       1547.28    
loop,thermsimp(1:2)       54   102.442       64.4917    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148       1081.09          0.85          1.14         21.91          0.00          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1081.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       54
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       55
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      147     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -294.798       294.798       1004.20       1299.00    
   2  0.875287     -0.133204      -23.9725       23.9725       1053.10       1077.07    
   3  0.103612      -2.26710      -408.007       408.007       1053.75       1461.76    
   4  0.159072      -1.83840      -330.855       330.855       1053.15       1384.01    
   5  0.118738      -2.13084      -383.485       383.485       1039.96       1423.45    
   6  0.294105      -1.22382      -220.249       220.249       1059.84       1280.09    
   7  0.967643     -0.328919E-01  -5.91953       5.91953       1049.34       1055.26    
   8  0.675183     -0.392772      -70.6868       70.6868       1015.46       1086.15    
   9  0.170112      -1.77130      -318.779       318.779       1074.82       1393.60    
  10  0.990992     -0.904902E-02  -1.62854       1.62854       1131.18       1132.81    
  11  0.198513      -1.61690      -290.992       290.992       1029.43       1320.42    
  12  0.404817E-01  -3.20690      -577.143       577.143       1051.91       1629.05    
  13  0.834933E-01  -2.48299      -446.861       446.861       1039.24       1486.10    
  14  0.458935     -0.778848      -140.168       140.168       1173.33       1313.50    
  15  0.929311     -0.733118E-01  -13.1939       13.1939       1144.36       1157.55    
  16  0.593071     -0.522440      -94.0230       94.0230       1141.40       1235.43    
  17  0.963359E-01  -2.33991      -421.112       421.112       1127.65       1548.77    
  18  0.383119E-01  -3.26200      -587.058       587.058       1178.26       1765.32    
  19  0.841843     -0.172161      -30.9837       30.9837       1139.30       1170.28    
  20  0.874261     -0.134376      -24.1836       24.1836       1199.90       1224.08    
  21  0.706443     -0.347513      -62.5416       62.5416       1036.72       1099.26    
  22  0.423649E-01  -3.16143      -568.960       568.960       1105.28       1674.24    
  23  0.904835     -0.100003      -17.9974       17.9974       1041.31       1059.31    
  24  0.728800     -0.316356      -56.9343       56.9343       1210.89       1267.83    
  25  0.764304     -0.268790      -48.3739       48.3739       1185.57       1233.94    
  26  0.578519     -0.547284      -98.4941       98.4941       1140.92       1239.41    
  27  0.321737      -1.13402      -204.089       204.089       1019.48       1223.57    
  28  0.592944     -0.522656      -94.0618       94.0618       1257.35       1351.41    
  29  0.159596      -1.83511      -330.263       330.263       1159.55       1489.81    
  30  0.797332     -0.226484      -40.7601       40.7601       1129.28       1170.04    
  31  0.263979      -1.33189      -239.698       239.698       1182.78       1422.48    
  32  0.449355     -0.799942      -143.965       143.965       1128.78       1272.75    
  33  0.859901     -0.150938      -27.1641       27.1641       1219.09       1246.25    
  34  0.730093     -0.314584      -56.6153       56.6153       1124.44       1181.06    
  35  0.484666     -0.724295      -130.351       130.351       1024.69       1155.04    
  36  0.180217      -1.71359      -308.393       308.393       1154.25       1462.64    
  37  0.857397     -0.153854      -27.6890       27.6890       1308.52       1336.21    
  38  0.502370     -0.688418      -123.894       123.894       1220.24       1344.13    
  39  0.245408      -1.40484      -252.827       252.827       1031.63       1284.45    
  40  0.134540      -2.00590      -360.999       360.999       1145.94       1506.94    
  41  0.468137     -0.758995      -136.596       136.596       1142.24       1278.84    
  42  0.864548E-01  -2.44813      -440.588       440.588       1071.52       1512.11    
  43  0.178791      -1.72154      -309.824       309.824       1237.79       1547.61    
  44  0.690351     -0.370555      -66.6884       66.6884       1174.18       1240.87    
  45  0.731648     -0.312455      -56.2323       56.2323       1166.27       1222.50    
  46  0.857623     -0.153591      -27.6416       27.6416       1187.05       1214.69    
  47  0.754956     -0.281095      -50.5884       50.5884       1519.83       1570.41    
  48  0.355557      -1.03407      -186.101       186.101       1111.92       1298.02    
  49  0.200964      -1.60463      -288.784       288.784       1382.81       1671.59    
  50  0.243499      -1.41264      -254.232       254.232       1185.18       1439.41    
  51  0.796288     -0.227794      -40.9959       40.9959       1148.57       1189.57    
  52  0.256937      -1.35892      -244.564       244.564       1034.31       1278.88    
  53  0.591760     -0.524655      -94.4216       94.4216       1081.09       1175.51    
loop,thermsimp(1:2)       55   294.798       23.9725    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149       1057.07          0.85          1.15         21.82          0.00          0.05         23.88
Just calling func    0   0         23.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150       1360.10          0.84          1.14         21.86          0.00          0.05         23.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1057.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       55
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       56
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      149     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -352.178       352.178       1049.34       1401.52    
   2  0.197548      -1.62177      -291.869       291.869       1041.31       1333.18    
   3  0.774000     -0.256183      -46.1050       46.1050       1053.10       1099.20    
   4  0.170284      -1.77029      -318.597       318.597       1015.46       1334.06    
   5  0.250636      -1.38376      -249.033       249.033       1036.72       1285.75    
   6  0.907951     -0.965652E-01  -17.3787       17.3787       1131.18       1148.56    
   7  0.611678     -0.491549      -88.4636       88.4636       1024.69       1113.15    
   8  0.735945E-02  -4.91177      -883.966       883.966       1144.36       2028.33    
   9  0.309131      -1.17399      -211.282       211.282       1129.28       1340.56    
  10  0.577854     -0.548434      -98.7010       98.7010       1139.30       1238.00    
  11  0.931529     -0.709274E-01  -12.7647       12.7647       1081.09       1093.86    
  12  0.665703     -0.406912      -73.2316       73.2316       1124.44       1197.68    
  13  0.585695     -0.534955      -96.2753       96.2753       1148.57       1244.85    
  14  0.295001      -1.22078      -219.702       219.702       1187.05       1406.76    
  15  0.317712E-01  -3.44920      -620.748       620.748       1166.27       1787.01    
  16  0.222963      -1.50075      -270.088       270.088       1019.48       1289.57    
  17  0.325931      -1.12107      -201.758       201.758       1199.90       1401.66    
  18  0.785098     -0.241947      -43.5429       43.5429       1185.57       1229.11    
  19  0.550467     -0.596988      -107.439       107.439       1141.40       1248.84    
  20  0.780222     -0.248176      -44.6640       44.6640       1140.92       1185.58    
  21  0.130712      -2.03476      -366.193       366.193       1174.18       1540.37    
  22  0.873397     -0.135365      -24.3615       24.3615       1219.09       1243.45    
  23  0.366975      -1.00246      -180.412       180.412       1210.89       1391.30    
  24  0.813244     -0.206724      -37.2039       37.2039       1128.78       1165.98    
  25  0.782660E-01  -2.54764      -458.496       458.496       1142.24       1600.74    
  26  0.700327     -0.356208      -64.1064       64.1064       1034.31       1098.42    
  27  0.437766     -0.826071      -148.667       148.667       1059.84       1208.51    
  28  0.508966E-01  -2.97796      -535.940       535.940       1031.63       1567.57    
  29  0.276850      -1.28428      -231.130       231.130       1111.92       1343.05    
  30  0.792031     -0.233154      -41.9605       41.9605       1004.20       1046.16    
  31  0.174747      -1.74441      -313.941       313.941       1173.33       1487.27    
  32  0.469718     -0.755623      -135.989       135.989       1029.43       1165.42    
  33  0.252316      -1.37707      -247.830       247.830       1308.52       1556.35    
  34  0.980061     -0.201409E-01  -3.62473       3.62473       1220.24       1223.86    
  35  0.838300     -0.176379      -31.7428       31.7428       1257.35       1289.09    
  36  0.369385     -0.995915      -179.234       179.234       1053.15       1232.39    
  37  0.923139     -0.799751E-01  -14.3930       14.3930       1074.82       1089.21    
  38  0.592446     -0.523496      -94.2131       94.2131       1182.78       1276.99    
  39  0.348787      -1.05329      -189.560       189.560       1039.96       1229.52    
  40  0.569584     -0.562850      -101.296       101.296       1185.18       1286.48    
  41  0.543034E-01  -2.91317      -524.280       524.280       1053.75       1578.03    
  42  0.582662     -0.540148      -97.2099       97.2099       1154.25       1251.46    
  43  0.702825     -0.352648      -63.4657       63.4657       1039.24       1102.70    
  44  0.941375     -0.604140E-01  -10.8726       10.8726       1159.55       1170.42    
  45  0.258857      -1.35148      -243.224       243.224       1145.94       1389.17    
  46  0.116535      -2.14956      -386.855       386.855       1071.52       1458.38    
  47  0.102671      -2.27622      -409.650       409.650       1237.79       1647.44    
  48  0.172023      -1.76013      -316.768       316.768       1127.65       1444.42    
  49  0.434982E-01  -3.13504      -564.209       564.209       1519.83       2084.04    
  50  0.852122     -0.160026      -28.7997       28.7997       1051.91       1080.71    
  51  0.583521     -0.538675      -96.9447       96.9447       1382.81       1479.75    
  52  0.843374     -0.170345      -30.6568       30.6568       1105.28       1135.93    
  53  0.194743      -1.63607      -294.442       294.442       1057.07       1351.52    
loop,thermsimp(1:2)       56   352.178       291.869    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151       1143.67          0.84          1.14         21.87          0.01          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1143.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       56
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       57
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      150     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -74.1621       74.1621       1004.20       1078.37    
   2  0.724212     -0.322671      -58.0708       58.0708       1051.91       1109.98    
   3  0.633711     -0.456163      -82.0951       82.0951       1074.82       1156.92    
   4  0.448566     -0.801700      -144.281       144.281       1081.09       1225.37    
   5  0.964228     -0.364273E-01  -6.55579       6.55579       1034.31       1040.87    
   6  0.714306     -0.336444      -60.5495       60.5495       1053.10       1113.65    
   7  0.528330     -0.638035      -114.826       114.826       1039.24       1154.06    
   8  0.654127     -0.424453      -76.3884       76.3884       1024.69       1101.08    
   9  0.368899     -0.997232      -179.471       179.471       1105.28       1284.75    
  10  0.227697      -1.47974      -266.307       266.307       1131.18       1397.48    
  11  0.612266     -0.490588      -88.2906       88.2906       1029.43       1117.72    
  12  0.313777      -1.15907      -208.597       208.597       1128.78       1337.38    
  13  0.258526      -1.35276      -243.455       243.455       1159.55       1403.00    
  14  0.119298      -2.12613      -382.638       382.638       1140.92       1523.56    
  15  0.213331      -1.54491      -278.036       278.036       1124.44       1402.48    
  16  0.294218      -1.22343      -220.180       220.180       1059.84       1280.02    
  17  0.352988      -1.04132      -187.406       187.406       1220.24       1407.64    
  18  0.348706      -1.05353      -189.602       189.602       1185.57       1375.17    
  19  0.449249     -0.800179      -144.007       144.007       1039.96       1183.97    
  20  0.879121     -0.128833      -23.1859       23.1859       1053.15       1076.34    
  21  0.464081     -0.767695      -138.161       138.161       1139.30       1277.46    
  22  0.497582     -0.697995      -125.617       125.617       1219.09       1344.71    
  23  0.920207     -0.831566E-01  -14.9656       14.9656       1148.57       1163.54    
  24  0.811773     -0.208535      -37.5298       37.5298       1141.40       1178.93    
  25  0.190651      -1.65731      -298.264       298.264       1154.25       1452.51    
  26  0.645174     -0.438235      -78.8688       78.8688       1182.78       1261.65    
  27  0.668343     -0.402954      -72.5193       72.5193       1036.72       1109.24    
  28  0.765111     -0.267735      -48.1840       48.1840       1185.18       1233.37    
  29  0.991779     -0.825499E-02  -1.48564       1.48564       1257.35       1258.84    
  30  0.136888      -1.98859      -357.885       357.885       1019.48       1377.37    
  31  0.645145E-01  -2.74086      -493.271       493.271       1041.31       1534.58    
  32  0.408515E-01  -3.19781      -575.507       575.507       1015.46       1590.97    
  33  0.264109      -1.33140      -239.610       239.610       1129.28       1368.89    
  34  0.382737     -0.960407      -172.843       172.843       1111.92       1284.76    
  35  0.402738E-02  -5.51464      -992.464       992.464       1057.07       2049.54    
  36  0.318074      -1.14547      -206.149       206.149       1145.94       1352.09    
  37  0.245237      -1.40553      -252.952       252.952       1210.89       1463.84    
  38  0.519766     -0.654377      -117.768       117.768       1049.34       1167.11    
  39  0.255147      -1.36592      -245.823       245.823       1199.90       1445.72    
  40  0.833841     -0.181712      -32.7025       32.7025       1187.05       1219.76    
  41  0.696242E-01  -2.66464      -479.553       479.553       1127.65       1607.21    
  42  0.487295     -0.718886      -129.377       129.377       1071.52       1200.90    
  43  0.276229E-01  -3.58911      -645.929       645.929       1382.81       2028.73    
  44  0.638327     -0.448905      -80.7889       80.7889       1173.33       1254.12    
  45  0.206684      -1.57657      -283.733       283.733       1174.18       1457.91    
  46  0.736003     -0.306521      -55.1643       55.1643       1308.52       1363.69    
  47  0.217444E-01  -3.82840      -688.993       688.993       1031.63       1720.62    
  48  0.956929     -0.440260E-01  -7.92332       7.92332       1053.75       1061.67    
  49  0.883561     -0.123795      -22.2792       22.2792       1142.24       1164.52    
  50  0.700901     -0.355388      -63.9589       63.9589       1237.79       1301.75    
  51  0.201997      -1.59950      -287.861       287.861       1166.27       1454.13    
  52  0.412152     -0.886362      -159.518       159.518       1144.36       1303.88    
  53  0.890450     -0.116029      -20.8816       20.8816       1143.67       1164.55    
loop,thermsimp(1:2)       57   74.1621       58.0708    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152       1175.75          0.86          1.15         21.95          0.00          0.05         24.01
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    153       1620.27          0.85          1.15         22.19          0.00          0.05         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1175.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       57
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       58
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      152     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -510.924       510.924       1034.31       1545.24    
   2  0.104884      -2.25490      -405.813       405.813       1053.75       1459.56    
   3  0.784254     -0.243023      -43.7365       43.7365       1053.15       1096.89    
   4  0.813133     -0.206861      -37.2286       37.2286       1004.20       1041.43    
   5  0.490778     -0.711764      -128.095       128.095       1024.69       1152.78    
   6  0.168573      -1.78039      -320.414       320.414       1036.72       1357.13    
   7  0.450161     -0.798149      -143.642       143.642       1051.91       1195.55    
   8  0.828233     -0.188461      -33.9171       33.9171       1053.10       1087.02    
   9  0.994731     -0.528342E-02 -0.950852      0.950852       1029.43       1030.38    
  10  0.813340     -0.206606      -37.1827       37.1827       1039.24       1076.42    
  11  0.776133     -0.253432      -45.6099       45.6099       1074.82       1120.43    
  12  0.729556     -0.315319      -56.7476       56.7476       1148.57       1205.32    
  13  0.530451     -0.634028      -114.105       114.105       1142.24       1256.35    
  14  0.752564E-01  -2.58685      -465.553       465.553       1143.67       1609.23    
  15  0.918457     -0.850597E-01  -15.3081       15.3081       1049.34       1064.65    
  16  0.162642      -1.81621      -326.861       326.861       1141.40       1468.26    
  17  0.725851     -0.320411      -57.6640       57.6640       1039.96       1097.62    
  18  0.322292      -1.13230      -203.778       203.778       1071.52       1275.30    
  19  0.838064     -0.176661      -31.7935       31.7935       1187.05       1218.85    
  20  0.346062E-01  -3.36372      -605.365       605.365       1081.09       1686.46    
  21  0.442915     -0.814377      -146.563       146.563       1185.18       1331.74    
  22  0.143708      -1.93997      -349.135       349.135       1173.33       1522.47    
  23  0.940845     -0.609769E-01  -10.9740       10.9740       1257.35       1268.32    
  24  0.972503     -0.278816E-01  -5.01783       5.01783       1182.78       1187.80    
  25  0.291831      -1.23158      -221.646       221.646       1139.30       1360.94    
  26  0.211976      -1.55128      -279.183       279.183       1059.84       1339.03    
  27  0.695427     -0.363229      -65.3700       65.3700       1105.28       1170.65    
  28  0.982540E-01  -2.32020      -417.564       417.564       1111.92       1529.48    
  29  0.730742     -0.313695      -56.4553       56.4553       1237.79       1294.24    
  30  0.417794     -0.872766      -157.071       157.071       1144.36       1301.43    
  31  0.868385     -0.141121      -25.3973       25.3973       1128.78       1154.18    
  32  0.300897      -1.20099      -216.140       216.140       1219.09       1435.23    
  33  0.917219     -0.864093E-01  -15.5510       15.5510       1145.94       1161.49    
  34  0.304394      -1.18943      -214.061       214.061       1308.52       1522.59    
  35  0.856500     -0.154901      -27.8775       27.8775       1129.28       1157.16    
  36  0.310652      -1.16908      -210.398       210.398       1185.57       1395.97    
  37  0.846275     -0.166911      -30.0389       30.0389       1019.48       1049.52    
  38  0.206825      -1.57588      -283.610       283.610       1131.18       1414.79    
  39  0.606376     -0.500256      -90.0305       90.0305       1124.44       1214.48    
  40  0.840015     -0.174336      -31.3750       31.3750       1159.55       1190.92    
  41  0.348835      -1.05315      -189.535       189.535       1220.24       1409.77    
  42  0.857325     -0.153939      -27.7042       27.7042       1199.90       1227.60    
  43  0.308035E-01  -3.48013      -626.315       626.315       1154.25       1780.56    
  44  0.400632     -0.914711      -164.620       164.620       1166.27       1330.89    
  45  0.242237      -1.41784      -255.167       255.167       1174.18       1429.35    
  46  0.407771     -0.897050      -161.441       161.441       1210.89       1372.33    
  47  0.430691     -0.842364      -151.599       151.599       1140.92       1292.52    
  48  0.415503     -0.878266      -158.061       158.061       1041.31       1199.37    
  49  0.593575     -0.521591      -93.8702       93.8702       1015.46       1109.33    
  50  0.973620     -0.267342E-01  -4.81132       4.81132       1127.65       1132.47    
  51  0.510257     -0.672840      -121.090       121.090       1031.63       1152.72    
  52  0.796475     -0.227560      -40.9537       40.9537       1382.81       1423.76    
  53  0.213576      -1.54376      -277.829       277.829       1175.75       1453.58    
loop,thermsimp(1:2)       58   510.924       405.813    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154       1088.88          0.85          1.15         21.91          0.01          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1088.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       58
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       59
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      153     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -199.508       199.508       1029.43       1228.94    
   2  0.939148     -0.627826E-01  -11.2989       11.2989       1004.20       1015.50    
   3  0.130906      -2.03328      -365.927       365.927       1019.48       1385.41    
   4  0.664370     -0.408916      -73.5922       73.5922       1049.34       1122.94    
   5  0.490908     -0.711498      -128.048       128.048       1039.24       1167.28    
   6  0.711731     -0.340055      -61.1993       61.1993       1053.10       1114.30    
   7  0.676080     -0.391444      -70.4478       70.4478       1053.15       1123.60    
   8  0.611139     -0.492432      -88.6224       88.6224       1039.96       1128.58    
   9  0.614246     -0.487359      -87.7095       87.7095       1015.46       1103.17    
  10  0.988045     -0.120275E-01  -2.16458       2.16458       1074.82       1076.99    
  11  0.232883      -1.45722      -262.254       262.254       1127.65       1389.91    
  12  0.450825     -0.796675      -143.377       143.377       1031.63       1175.00    
  13  0.493319     -0.706599      -127.166       127.166       1024.69       1151.85    
  14  0.191184      -1.65452      -297.762       297.762       1128.78       1426.54    
  15  0.894136     -0.111897      -20.1381       20.1381       1129.28       1149.42    
  16  0.391751     -0.937128      -168.654       168.654       1145.94       1314.60    
  17  0.236278      -1.44275      -259.650       259.650       1105.28       1364.93    
  18  0.496874E-01  -3.00200      -540.268       540.268       1182.78       1723.05    
  19  0.784524     -0.242678      -43.6746       43.6746       1159.55       1203.22    
  20  0.292328      -1.22988      -221.340       221.340       1051.91       1273.25    
  21  0.832247E-01  -2.48621      -447.441       447.441       1041.31       1488.75    
  22  0.423133     -0.860069      -154.786       154.786       1148.57       1303.36    
  23  0.234472      -1.45042      -261.030       261.030       1124.44       1385.48    
  24  0.868463     -0.141031      -25.3811       25.3811       1187.05       1212.43    
  25  0.122969      -2.09582      -377.183       377.183       1199.90       1577.08    
  26  0.811771     -0.208537      -37.5302       37.5302       1142.24       1179.77    
  27  0.786834     -0.239738      -43.1455       43.1455       1257.35       1300.49    
  28  0.163144      -1.81312      -326.305       326.305       1071.52       1397.83    
  29  0.571103     -0.560186      -100.816       100.816       1140.92       1241.73    
  30  0.769982     -0.261388      -47.0416       47.0416       1237.79       1284.83    
  31  0.471769     -0.751265      -135.204       135.204       1144.36       1279.56    
  32  0.584935     -0.536254      -96.5091       96.5091       1166.27       1262.77    
  33  0.416140     -0.876734      -157.785       157.785       1185.18       1342.97    
  34  0.106525E-01  -4.54196      -817.412       817.412       1059.84       1877.26    
  35  0.595424     -0.518482      -93.3106       93.3106       1036.72       1130.03    
  36  0.302400      -1.19600      -215.244       215.244       1139.30       1354.54    
  37  0.629701     -0.462510      -83.2374       83.2374       1210.89       1294.13    
  38  0.939026E-01  -2.36550      -425.716       425.716       1185.57       1611.28    
  39  0.911727     -0.924151E-01  -16.6318       16.6318       1220.24       1236.87    
  40  0.289502      -1.23959      -223.088       223.088       1131.18       1354.27    
  41  0.326571      -1.11911      -201.405       201.405       1382.81       1584.21    
  42  0.972366     -0.280231E-01  -5.04328       5.04328       1174.18       1179.22    
  43  0.823413     -0.194297      -34.9674       34.9674       1219.09       1254.06    
  44  0.790717     -0.234815      -42.2594       42.2594       1175.75       1218.01    
  45  0.167922      -1.78426      -321.111       321.111       1053.75       1374.86    
  46  0.804665     -0.217329      -39.1125       39.1125       1141.40       1180.52    
  47  0.154714      -1.86617      -335.854       335.854       1173.33       1509.19    
  48  0.240456      -1.42522      -256.495       256.495       1308.52       1565.02    
  49  0.351787      -1.04473      -188.019       188.019       1111.92       1299.93    
  50  0.666429E-01  -2.70841      -487.429       487.429       1034.31       1521.74    
  51  0.484113     -0.725437      -130.556       130.556       1143.67       1274.23    
  52  0.298509      -1.20896      -217.574       217.574       1081.09       1298.67    
  53  0.982136     -0.180253E-01  -3.24399       3.24399       1088.88       1092.12    
loop,thermsimp(1:2)       59   199.508       11.2989    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155       2359.12          0.85          1.14         21.88          0.01          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    156       1167.35          0.84          1.15         21.88          0.00          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1167.35
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       59
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       60
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      155     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -214.214       214.214       1004.20       1218.42    
   2  0.843344     -0.170380      -30.6631       30.6631       1074.82       1105.48    
   3  0.457815     -0.781289      -140.608       140.608       1088.88       1229.48    
   4  0.933709     -0.685899E-01  -12.3441       12.3441       1015.46       1027.80    
   5  0.887159     -0.119731      -21.5478       21.5478       1053.10       1074.65    
   6  0.786211     -0.240530      -43.2880       43.2880       1049.34       1092.63    
   7  0.794803     -0.229661      -41.3319       41.3319       1053.15       1094.49    
   8  0.573435E-01  -2.85870      -514.477       514.477       1039.96       1554.44    
   9  0.647106     -0.435245      -78.3305       78.3305       1036.72       1115.05    
  10  0.110118      -2.20620      -397.048       397.048       1129.28       1526.33    
  11  0.339548      -1.08014      -194.392       194.392       1024.69       1219.08    
  12  0.635246     -0.453742      -81.6595       81.6595       1039.24       1120.90    
  13  0.488392     -0.716638      -128.973       128.973       1031.63       1160.60    
  14  0.602571     -0.506549      -91.1631       91.1631       1174.18       1265.34    
  15  0.710041     -0.342433      -61.6274       61.6274       1142.24       1203.87    
  16  0.585763     -0.534840      -96.2546       96.2546       1141.40       1237.66    
  17  0.288010      -1.24476      -224.018       224.018       1159.55       1383.57    
  18  0.455238     -0.786934      -141.624       141.624       1187.05       1328.68    
  19  0.723984     -0.322986      -58.1274       58.1274       1175.75       1233.88    
  20  0.554067     -0.590470      -106.266       106.266       1029.43       1135.70    
  21  0.646516     -0.436157      -78.4947       78.4947       1220.24       1298.73    
  22  0.271985      -1.30201      -234.321       234.321       1140.92       1375.24    
  23  0.901636E-02  -4.70871      -847.422       847.422       1219.09       2066.51    
  24  0.383616     -0.958114      -172.431       172.431       1166.27       1338.70    
  25  0.443516     -0.813022      -146.319       146.319       1051.91       1198.23    
  26  0.223023      -1.50048      -270.040       270.040       1143.67       1413.71    
  27  0.123255      -2.09350      -376.765       376.765       1144.36       1521.12    
  28  0.817485     -0.201523      -36.2679       36.2679       1237.79       1274.06    
  29  0.333893      -1.09693      -197.414       197.414       1210.89       1408.31    
  30  0.867877     -0.141706      -25.5026       25.5026       1081.09       1106.59    
  31  0.365747      -1.00581      -181.015       181.015       1111.92       1292.93    
  32  0.429445     -0.845262      -152.121       152.121       1257.35       1409.47    
  33  0.856620     -0.154761      -27.8522       27.8522       1148.57       1176.43    
  34  0.729532     -0.315352      -56.7536       56.7536       1145.94       1202.70    
  35  0.315845      -1.15251      -207.415       207.415       1185.18       1392.60    
  36  0.547596     -0.602217      -108.380       108.380       1131.18       1239.56    
  37  0.752130     -0.284846      -51.2635       51.2635       1139.30       1190.56    
  38  0.806451     -0.215112      -38.7135       38.7135       1105.28       1143.99    
  39  0.618613     -0.480275      -86.4346       86.4346       1053.75       1140.18    
  40  0.630350     -0.461480      -83.0520       83.0520       1019.48       1102.53    
  41  0.251741      -1.37935      -248.241       248.241       1124.44       1372.69    
  42  0.846504     -0.166640      -29.9900       29.9900       1127.65       1157.64    
  43  0.830791     -0.185377      -33.3620       33.3620       1071.52       1104.88    
  44  0.566838     -0.567681      -102.165       102.165       1128.78       1230.95    
  45  0.499450E-01  -2.99683      -539.337       539.337       1041.31       1580.65    
  46  0.976301     -0.239838E-01  -4.31635       4.31635       1173.33       1177.65    
  47  0.401049     -0.913672      -164.433       164.433       1034.31       1198.75    
  48  0.709931E-01  -2.64517      -476.049       476.049       1308.52       1784.57    
  49  0.920370E-02  -4.68815      -843.721       843.721       1199.90       2043.62    
  50  0.379723     -0.968314      -174.267       174.267       1382.81       1557.07    
  51  0.207569      -1.57229      -282.964       282.964       1185.57       1468.53    
  52  0.745673     -0.293468      -52.8151       52.8151       1182.78       1235.60    
  53  0.915877     -0.878737E-01  -15.8145       15.8145       1167.35       1183.16    
loop,thermsimp(1:2)       60   214.214       30.6631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157       1222.10          0.85          1.15         21.84          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1222.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       60
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       61
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      156     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -33.6025       33.6025       1015.46       1049.06    
   2  0.735850     -0.306729      -55.2017       55.2017       1053.10       1108.30    
   3  0.828786     -0.187793      -33.7970       33.7970       1049.34       1083.14    
   4  0.592078     -0.524118      -94.3249       94.3249       1053.15       1147.48    
   5  0.691797E-01  -2.67105      -480.706       480.706       1019.48       1500.19    
   6  0.772335     -0.258337      -46.4926       46.4926       1071.52       1118.02    
   7  0.504563     -0.684063      -123.110       123.110       1074.82       1197.93    
   8  0.700615     -0.355797      -64.0324       64.0324       1081.09       1145.12    
   9  0.764596     -0.268408      -48.3051       48.3051       1036.72       1085.02    
  10  0.459614     -0.777368      -139.902       139.902       1039.24       1179.14    
  11  0.931193     -0.712882E-01  -12.8297       12.8297       1029.43       1042.26    
  12  0.502482E-01  -2.99078      -538.248       538.248       1053.75       1592.00    
  13  0.498197     -0.696760      -125.395       125.395       1105.28       1230.67    
  14  0.551534E-01  -2.89764      -521.485       521.485       1127.65       1649.14    
  15  0.172209      -1.75905      -316.574       316.574       1031.63       1348.20    
  16  0.238868E-01  -3.73443      -672.082       672.082       1148.57       1820.66    
  17  0.699366     -0.357581      -64.3534       64.3534       1173.33       1237.69    
  18  0.764093     -0.269066      -48.4236       48.4236       1167.35       1215.77    
  19  0.465633     -0.764357      -137.561       137.561       1139.30       1276.86    
  20  0.209906      -1.56110      -280.949       280.949       1051.91       1332.86    
  21  0.216891      -1.52836      -275.057       275.057       1034.31       1309.37    
  22  0.795854E-01  -2.53092      -455.488       455.488       1145.94       1601.43    
  23  0.701683     -0.354273      -63.7582       63.7582       1142.24       1206.00    
  24  0.574425     -0.554385      -99.7721       99.7721       1004.20       1103.98    
  25  0.674968     -0.393090      -70.7440       70.7440       1024.69       1095.43    
  26  0.684189     -0.379521      -68.3021       68.3021       1088.88       1157.18    
  27  0.541862     -0.612745      -110.275       110.275       1128.78       1239.06    
  28  0.668027     -0.403426      -72.6042       72.6042       1175.75       1248.36    
  29  0.353251      -1.04058      -187.271       187.271       1182.78       1370.05    
  30  0.778708     -0.250119      -45.0137       45.0137       1141.40       1186.42    
  31  0.829283     -0.187194      -33.6891       33.6891       1131.18       1164.87    
  32  0.679297     -0.386697      -69.5934       69.5934       1174.18       1243.77    
  33  0.536301     -0.623060      -112.131       112.131       1237.79       1349.92    
  34  0.247738      -1.39538      -251.125       251.125       1111.92       1363.04    
  35  0.271399      -1.30416      -234.709       234.709       1220.24       1454.95    
  36  0.284124      -1.25835      -226.463       226.463       1187.05       1413.52    
  37  0.664442     -0.408808      -73.5728       73.5728       1166.27       1239.84    
  38  0.874508     -0.134094      -24.1327       24.1327       1124.44       1148.58    
  39  0.916444     -0.872538E-01  -15.7030       15.7030       1140.92       1156.62    
  40  0.295165      -1.22022      -219.602       219.602       1159.55       1379.15    
  41  0.242592      -1.41637      -254.903       254.903       1185.18       1440.09    
  42  0.396124     -0.926028      -166.656       166.656       1210.89       1377.55    
  43  0.509193E-01  -2.97751      -535.860       535.860       1257.35       1793.21    
  44  0.778911     -0.249858      -44.9667       44.9667       1143.67       1188.64    
  45  0.351009      -1.04694      -188.417       188.417       1185.57       1373.99    
  46  0.480934     -0.732025      -131.742       131.742       1144.36       1276.10    
  47  0.908579     -0.958731E-01  -17.2542       17.2542       1129.28       1146.54    
  48  0.898885     -0.106600      -19.1847       19.1847       1039.96       1059.15    
  49  0.561121     -0.577819      -103.989       103.989       1382.81       1486.79    
  50  0.851109     -0.161215      -29.0138       29.0138       1041.31       1070.32    
  51  0.975854     -0.244425E-01  -4.39889       4.39889       1308.52       1312.92    
  52  0.187829      -1.67223      -300.949       300.949       1199.90       1500.85    
  53  0.962131     -0.386049E-01  -6.94768       6.94768       1222.10       1229.05    
loop,thermsimp(1:2)       61   33.6025       55.2017    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158       1064.83          0.85          1.15         21.91          0.00          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159       1378.75          0.84          1.16         21.85          0.00          0.05         23.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1064.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    179.969               157
loop is:       61
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    179.969               157
loop is:       62
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    89.9845               209

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      158     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -7.75816       7.75816       1029.43       1037.19    
   2  0.899579E-01  -2.40841      -216.720       216.720       1015.46       1232.18    
   3  0.997625     -0.237830E-02 -0.214010      0.214010       1039.96       1040.17    
   4  0.224083      -1.49574      -134.593       134.593       1041.31       1175.90    
   5  0.120769      -2.11388      -190.216       190.216       1049.34       1239.56    
   6  0.302676E-01  -3.49768      -314.737       314.737       1036.72       1351.46    
   7  0.315161      -1.15467      -103.902       103.902       1024.69       1128.59    
   8  0.155895      -1.85857      -167.243       167.243       1004.20       1171.45    
   9  0.467639     -0.760060      -68.3936       68.3936       1053.10       1121.49    
  10  0.277823      -1.28077      -115.249       115.249       1071.52       1186.77    
  11  0.712282     -0.339281      -30.5300       30.5300       1081.09       1111.62    
  12  0.929560     -0.730437E-01  -6.57280       6.57280       1129.28       1135.85    
  13  0.499024     -0.695101      -62.5483       62.5483       1053.15       1115.70    
  14  0.940347     -0.615066E-01  -5.53464       5.53464       1124.44       1129.98    
  15  0.714006     -0.336864      -30.3125       30.3125       1140.92       1171.23    
  16  0.162603      -1.81644      -163.452       163.452       1088.88       1252.33    
  17  0.663729     -0.409881      -36.8829       36.8829       1131.18       1168.06    
  18  0.314148      -1.15789      -104.192       104.192       1039.24       1143.43    
  19  0.497386     -0.698388      -62.8441       62.8441       1141.40       1204.25    
  20  0.368387     -0.998622      -89.8605       89.8605       1143.67       1233.53    
  21  0.326342      -1.11981      -100.765       100.765       1074.82       1175.59    
  22  0.442952     -0.814294      -73.2738       73.2738       1142.24       1215.52    
  23  0.929694     -0.729000E-01  -6.55987       6.55987       1167.35       1173.91    
  24  0.945450E-01  -2.35868      -212.245       212.245       1222.10       1434.35    
  25  0.407158     -0.898555      -80.8560       80.8560       1105.28       1186.13    
  26  0.706679     -0.347179      -31.2407       31.2407       1173.33       1204.57    
  27  0.657848     -0.418781      -37.6838       37.6838       1128.78       1166.46    
  28  0.968040     -0.324817E-01  -2.92285       2.92285       1166.27       1169.19    
  29  0.330387      -1.10749      -99.6569       99.6569       1174.18       1273.84    
  30  0.756161     -0.279501      -25.1508       25.1508       1175.75       1200.90    
  31  0.307772      -1.17840      -106.037       106.037       1144.36       1250.40    
  32  0.759008E-01  -2.57833      -232.009       232.009       1139.30       1371.31    
  33  0.615618E-01  -2.78771      -250.851       250.851       1034.31       1285.17    
  34  0.545984     -0.605166      -54.4556       54.4556       1308.52       1362.98    
  35  0.339865      -1.07921      -97.1118       97.1118       1051.91       1149.02    
  36  0.816477     -0.202757      -18.2450       18.2450       1031.63       1049.87    
  37  0.932889     -0.694691E-01  -6.25114       6.25114       1237.79       1244.04    
  38  0.667042     -0.404902      -36.4349       36.4349       1111.92       1148.35    
  39  0.583049     -0.539484      -48.5452       48.5452       1182.78       1231.33    
  40  0.210192      -1.55973      -140.352       140.352       1185.57       1325.92    
  41  0.158846      -1.83982      -165.556       165.556       1210.89       1376.45    
  42  0.360401      -1.02054      -91.8325       91.8325       1159.55       1251.38    
  43  0.508154     -0.676971      -60.9169       60.9169       1187.05       1247.97    
  44  0.873303     -0.135473      -12.1905       12.1905       1185.18       1197.37    
  45  0.650524     -0.429977      -38.6913       38.6913       1220.24       1258.93    
  46  0.805601     -0.216166      -19.4516       19.4516       1382.81       1402.26    
  47  0.312590E-03  -8.07062      -726.230       726.230       1019.48       1745.71    
  48  0.892261     -0.113997      -10.2579       10.2579       1199.90       1210.16    
  49  0.504672     -0.683846      -61.5355       61.5355       1053.75       1115.28    
  50  0.269834      -1.30995      -117.875       117.875       1145.94       1263.82    
  51  0.752889     -0.283838      -25.5410       25.5410       1127.65       1153.20    
  52  0.952800     -0.483498E-01  -4.35073       4.35073       1257.35       1261.70    
  53  0.147189E-01  -4.21863      -379.611       379.611       1064.83       1444.44    
loop,thermsimp(1:2)       62   7.75816       216.720    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160       1225.47          0.85          1.15         21.83          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161       1526.10          0.84          1.16         21.88          0.02          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    1526.1       -4.516     -2.369      2.294     -102.6      1.084    
                      0.9478      1.470     -99.70      3.704     0.5099    

                       2.258     -1.483      1.540      7000.      7000.    

                      -2.226      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.149     -3.937     -8.893      6.259    

                      -14.29     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.2442E-02 0.2451    -0.9918E-01 0.1417    

                     -0.2486    -0.1593     0.1301     0.7120E-01 0.8232E-01



                     -0.4772    -0.4865      0.000     0.6034E-02-0.3983E-01

                     -0.5660E-01 0.1338    -0.7116    -0.1278     0.2602    

                      0.2788E-01-0.7727E-02-0.6245     -1.030      7000.    



                      -1.203     -1.192     -2.142     -1.982    -0.3807    

                     -0.3252      9.173      8.714    -0.1672E+05 -6.000    

                     -0.4596     -2.631      9.403      8.796    -0.1969E+05



                      -6.000     0.3314    -0.4189      8.849      8.980    

                     -0.1944E+05 -6.000    -0.7016    -0.9039      9.059    

                       8.765    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1225.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       62
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       63
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      160     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -43.4238       43.4238       1029.43       1072.86    
   2  0.828850     -0.187716      -16.8915       16.8915       1039.96       1056.85    
   3  0.138898      -1.97402      -177.631       177.631       1031.63       1209.26    
   4  0.174947      -1.74327      -156.868       156.868       1081.09       1237.96    
   5  0.452367E-01  -3.09585      -278.578       278.578       1053.75       1332.33    
   6  0.982229     -0.179305E-01  -1.61346       1.61346       1053.15       1054.77    
   7  0.855728     -0.155803      -14.0198       14.0198       1053.10       1067.12    
   8  0.350750      -1.04768      -94.2751       94.2751       1024.69       1118.96    
   9  0.880054     -0.127772      -11.4975       11.4975       1124.44       1135.94    
  10  0.106511      -2.23950      -201.521       201.521       1129.28       1330.80    
  11  0.336060      -1.09047      -98.1251       98.1251       1039.24       1137.36    
  12  0.904819     -0.100020      -9.00026       9.00026       1111.92       1120.92    
  13  0.765597     -0.267099      -24.0347       24.0347       1051.91       1075.94    
  14  0.551789     -0.594589      -53.5038       53.5038       1127.65       1181.16    
  15  0.832435     -0.183400      -16.5031       16.5031       1128.78       1145.28    
  16  0.353494      -1.03989      -93.5740       93.5740       1131.18       1224.75    
  17  0.510104     -0.673140      -60.5722       60.5722       1166.27       1226.84    
  18  0.523162     -0.647863      -58.2976       58.2976       1140.92       1199.22    
  19  0.953043     -0.480957E-01  -4.32787       4.32787       1004.20       1008.53    
  20  0.267001E-01  -3.62309      -326.022       326.022       1167.35       1493.37    
  21  0.280924      -1.26967      -114.251       114.251       1074.82       1189.07    
  22  0.956868     -0.440901E-01  -3.96743       3.96743       1041.31       1045.28    
  23  0.779725     -0.248814      -22.3894       22.3894       1105.28       1127.67    
  24  0.901061     -0.104183      -9.37484       9.37484       1071.52       1080.90    
  25  0.533391     -0.628501      -56.5554       56.5554       1185.18       1241.74    
  26  0.642536     -0.442333      -39.8031       39.8031       1175.75       1215.55    
  27  0.520565E-01  -2.95543      -265.942       265.942       1141.40       1407.35    
  28  0.330080      -1.10842      -99.7406       99.7406       1173.33       1273.07    
  29  0.280801      -1.27011      -114.290       114.290       1199.90       1314.19    
  30  0.144013      -1.93785      -174.376       174.376       1142.24       1316.62    
  31  0.201537      -1.60178      -144.135       144.135       1182.78       1326.92    
  32  0.920188     -0.831777E-01  -7.48470       7.48470       1015.46       1022.94    
  33  0.747222     -0.291393      -26.2208       26.2208       1143.67       1169.89    
  34  0.697959     -0.359595      -32.3580       32.3580       1049.34       1081.70    
  35  0.492949     -0.707349      -63.6504       63.6504       1237.79       1301.44    
  36  0.378001     -0.972857      -87.5421       87.5421       1187.05       1274.60    
  37  0.936484     -0.656225E-01  -5.90501       5.90501       1144.36       1150.26    
  38  0.458232     -0.780381      -70.2221       70.2221       1159.55       1229.77    
  39  0.286796      -1.24898      -112.389       112.389       1088.88       1201.27    
  40  0.524458     -0.645389      -58.0750       58.0750       1220.24       1278.31    
  41  0.126679      -2.06610      -185.917       185.917       1257.35       1443.27    
  42  0.645270     -0.438086      -39.4209       39.4209       1145.94       1185.36    
  43  0.996049     -0.395919E-02 -0.356266      0.356266       1174.18       1174.54    
  44  0.470695     -0.753545      -67.8073       67.8073       1034.31       1102.12    
  45  0.783048     -0.244561      -22.0067       22.0067       1185.57       1207.57    
  46  0.682425     -0.382103      -34.3833       34.3833       1036.72       1071.10    
  47  0.623779     -0.471960      -42.4690       42.4690       1308.52       1350.99    
  48  0.138146      -1.97945      -178.119       178.119       1139.30       1317.42    
  49  0.317697      -1.14666      -103.181       103.181       1210.89       1314.07    
  50  0.215616      -1.53426      -138.059       138.059       1382.81       1520.86    
  51  0.392653     -0.934829      -84.1201       84.1201       1222.10       1306.22    
  52  0.311957      -1.16489      -104.822       104.822       1064.83       1169.65    
  53  0.665567     -0.407116      -36.6341       36.6341       1225.47       1262.10    
loop,thermsimp(1:2)       63   43.4238       16.8915    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162       1078.35          0.86          1.15         21.83          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1078.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       63
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       64
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      161     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -18.2371       18.2371       1004.20       1022.44    
   2  0.209930      -1.56098      -140.464       140.464       1015.46       1155.92    
   3  0.710991     -0.341096      -30.6933       30.6933       1041.31       1072.00    
   4  0.967365     -0.331789E-01  -2.98558       2.98558       1053.15       1056.14    
   5  0.650635E-01  -2.73239      -245.873       245.873       1039.96       1285.83    
   6  0.578340     -0.547593      -49.2749       49.2749       1053.10       1102.37    
   7  0.928890E-01  -2.37635      -213.835       213.835       1036.72       1250.55    
   8  0.486974     -0.719546      -64.7479       64.7479       1029.43       1094.18    
   9  0.560625     -0.578703      -52.0743       52.0743       1051.91       1103.98    
  10  0.552834     -0.592698      -53.3336       53.3336       1071.52       1124.86    
  11  0.744529E-01  -2.59759      -233.743       233.743       1049.34       1283.09    
  12  0.937600     -0.644318E-01  -5.79786       5.79786       1034.31       1040.11    
  13  0.154459      -1.86783      -168.076       168.076       1024.69       1192.76    
  14  0.186893E-02  -6.28239      -565.317       565.317       1111.92       1677.23    
  15  0.250797      -1.38311      -124.459       124.459       1105.28       1229.74    
  16  0.924847E-01  -2.38071      -214.227       214.227       1124.44       1338.67    
  17  0.476680     -0.740911      -66.6705       66.6705       1039.24       1105.91    
  18  0.266527      -1.32228      -118.984       118.984       1128.78       1247.76    
  19  0.369755     -0.994916      -89.5270       89.5270       1144.36       1233.89    
  20  0.595561     -0.518252      -46.6346       46.6346       1064.83       1111.46    
  21  0.636070     -0.452447      -40.7132       40.7132       1143.67       1184.39    
  22  0.447294     -0.804540      -72.3961       72.3961       1174.18       1246.58    
  23  0.964945     -0.356839E-01  -3.21100       3.21100       1127.65       1130.87    
  24  0.752421     -0.284460      -25.5969       25.5969       1145.94       1171.54    
  25  0.705556     -0.348769      -31.3838       31.3838       1074.82       1106.20    
  26  0.943467     -0.581939E-01  -5.23655       5.23655       1140.92       1146.16    
  27  0.272564      -1.29988      -116.969       116.969       1088.88       1205.85    
  28  0.215815      -1.53333      -137.976       137.976       1185.57       1323.54    
  29  0.756955     -0.278452      -25.0564       25.0564       1031.63       1056.68    
  30  0.538381     -0.619189      -55.7174       55.7174       1175.75       1231.47    
  31  0.182967      -1.69845      -152.834       152.834       1131.18       1284.01    
  32  0.644758     -0.438881      -39.4925       39.4925       1166.27       1205.76    
  33  0.939477     -0.624320E-01  -5.61791       5.61791       1159.55       1165.17    
  34  0.663186     -0.410699      -36.9566       36.9566       1081.09       1118.05    
  35  0.795014     -0.229396      -20.6421       20.6421       1185.18       1205.82    
  36  0.630792     -0.460779      -41.4630       41.4630       1225.47       1266.93    
  37  0.151039      -1.89022      -170.090       170.090       1173.33       1343.42    
  38  0.668306     -0.403009      -36.2646       36.2646       1187.05       1223.32    
  39  0.683820     -0.380061      -34.1996       34.1996       1220.24       1254.44    
  40  0.122229      -2.10186      -189.135       189.135       1237.79       1426.92    
  41  0.664453     -0.408791      -36.7848       36.7848       1222.10       1258.89    
  42  0.548687     -0.600228      -54.0112       54.0112       1210.89       1264.90    
  43  0.931535     -0.709210E-01  -6.38179       6.38179       1199.90       1206.28    
  44  0.139742      -1.96796      -177.086       177.086       1142.24       1319.33    
  45  0.429142     -0.845967      -76.1239       76.1239       1139.30       1215.42    
  46  0.531147     -0.632717      -56.9347       56.9347       1182.78       1239.72    
  47  0.575558     -0.552416      -49.7089       49.7089       1129.28       1178.99    
  48  0.336537      -1.08905      -97.9972       97.9972       1053.75       1151.75    
  49  0.324486      -1.12551      -101.279       101.279       1308.52       1409.80    
  50  0.652768     -0.426534      -38.3814       38.3814       1141.40       1179.78    
  51  0.537860     -0.620158      -55.8046       55.8046       1257.35       1313.15    
  52  0.415288     -0.878782      -79.0767       79.0767       1167.35       1246.42    
  53  0.771827     -0.258995      -23.3056       23.3056       1078.35       1101.66    
loop,thermsimp(1:2)       64   18.2371       140.464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163       1093.40          0.85          1.14         21.89          0.00          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164       1171.53          0.84          1.14         21.88          0.00          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1093.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       64
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       65
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      163     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -90.0720       90.0720       1004.20       1094.28    
   2  0.298218      -1.20993      -108.875       108.875       1034.31       1143.19    
   3  0.374092     -0.983254      -88.4776       88.4776       1053.15       1141.63    
   4  0.417366     -0.873791      -78.6277       78.6277       1031.63       1110.25    
   5  0.299382      -1.20604      -108.525       108.525       1041.31       1149.83    
   6  0.373029     -0.986099      -88.7336       88.7336       1029.43       1118.17    
   7  0.628224     -0.464858      -41.8300       41.8300       1078.35       1120.18    
   8  0.111397      -2.19465      -197.485       197.485       1053.10       1250.58    
   9  0.983555     -0.165818E-01  -1.49210       1.49210       1051.91       1053.40    
  10  0.394578     -0.929938      -83.6800       83.6800       1039.24       1122.92    
  11  0.410639     -0.890042      -80.0900       80.0900       1074.82       1154.91    
  12  0.700680     -0.355705      -32.0079       32.0079       1064.83       1096.84    
  13  0.223946      -1.49635      -134.648       134.648       1081.09       1215.74    
  14  0.651113E-01  -2.73166      -245.807       245.807       1071.52       1317.33    
  15  0.704010     -0.350963      -31.5812       31.5812       1127.65       1159.24    
  16  0.172411      -1.75787      -158.181       158.181       1140.92       1299.10    
  17  0.567412     -0.566670      -50.9915       50.9915       1053.75       1104.74    
  18  0.186334      -1.68021      -151.193       151.193       1015.46       1166.65    
  19  0.677524     -0.389310      -35.0319       35.0319       1159.55       1194.58    
  20  0.362270      -1.01537      -91.3671       91.3671       1145.94       1237.31    
  21  0.603880     -0.504381      -45.3864       45.3864       1129.28       1174.67    
  22  0.782208     -0.245635      -22.1033       22.1033       1141.40       1163.51    
  23  0.129808      -2.04170      -183.721       183.721       1143.67       1327.39    
  24  0.284816      -1.25591      -113.013       113.013       1024.69       1137.70    
  25  0.246930      -1.39865      -125.857       125.857       1166.27       1292.12    
  26  0.256917      -1.35900      -122.289       122.289       1185.18       1307.47    
  27  0.240545      -1.42485      -128.214       128.214       1088.88       1217.09    
  28  0.218018      -1.52318      -137.062       137.062       1199.90       1336.96    
  29  0.235583E-01  -3.74828      -337.287       337.287       1139.30       1476.58    
  30  0.114660      -2.16578      -194.887       194.887       1187.05       1381.94    
  31  0.119129      -2.12755      -191.447       191.447       1105.28       1296.72    
  32  0.471707     -0.751398      -67.6141       67.6141       1175.75       1243.37    
  33  0.607413     -0.498546      -44.8614       44.8614       1144.36       1189.22    
  34  0.568731     -0.564347      -50.7825       50.7825       1182.78       1233.56    
  35  0.587492     -0.531893      -47.8622       47.8622       1167.35       1215.21    
  36  0.411259     -0.888533      -79.9542       79.9542       1174.18       1254.13    
  37  0.836192     -0.178897      -16.0979       16.0979       1128.78       1144.88    
  38  0.152977      -1.87747      -168.943       168.943       1036.72       1205.66    
  39  0.941831     -0.599291E-01  -5.39269       5.39269       1220.24       1225.63    
  40  0.936595     -0.655045E-01  -5.89439       5.89439       1222.10       1228.00    
  41  0.856621     -0.154759      -13.9259       13.9259       1210.89       1224.82    
  42  0.484786     -0.724047      -65.1530       65.1530       1225.47       1290.62    
  43  0.188261      -1.66993      -150.267       150.267       1049.34       1199.61    
  44  0.957606     -0.433189E-01  -3.89803       3.89803       1131.18       1135.07    
  45  0.234891      -1.44863      -130.355       130.355       1039.96       1170.32    
  46  0.758920     -0.275858      -24.8230       24.8230       1257.35       1282.17    
  47  0.135340      -1.99997      -179.966       179.966       1142.24       1322.21    
  48  0.779121E-01  -2.55217      -229.656       229.656       1185.57       1415.22    
  49  0.573767     -0.555531      -49.9892       49.9892       1124.44       1174.43    
  50  0.982512     -0.176424E-01  -1.58754       1.58754       1173.33       1174.92    
  51  0.109579      -2.21111      -198.966       198.966       1308.52       1507.49    
  52  0.714543     -0.336113      -30.2449       30.2449       1237.79       1268.03    
  53  0.573216     -0.556492      -50.0756       50.0756       1093.40       1143.48    
loop,thermsimp(1:2)       65   90.0720       108.875    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165       1007.29          0.87          1.15         21.89          0.00          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166       1070.26          0.84          1.14         21.94          0.00          0.05         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1007.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       65
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       66
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      165     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -122.800       122.800       1051.91       1174.71    
   2  0.513427E-01  -2.96923      -267.185       267.185       1004.20       1271.39    
   3  0.288453      -1.24322      -111.871       111.871       1064.83       1176.70    
   4  0.107044      -2.23452      -201.072       201.072       1053.75       1254.82    
   5  0.756779     -0.278684      -25.0772       25.0772       1031.63       1056.70    
   6  0.333762      -1.09733      -98.7425       98.7425       1029.43       1128.17    
   7  0.270335      -1.30809      -117.708       117.708       1078.35       1196.06    
   8  0.666278E-01  -2.70863      -243.735       243.735       1039.24       1282.97    
   9  0.517510     -0.658727      -59.2752       59.2752       1131.18       1190.45    
  10  0.719680     -0.328949      -29.6003       29.6003       1024.69       1054.29    
  11  0.401542     -0.912442      -82.1056       82.1056       1053.15       1135.26    
  12  0.408125     -0.896181      -80.6424       80.6424       1034.31       1114.96    
  13  0.481086     -0.731710      -65.8425       65.8425       1093.40       1159.24    
  14  0.166952E-01  -4.09263      -368.273       368.273       1128.78       1497.05    
  15  0.913266     -0.907286E-01  -8.16417       8.16417       1041.31       1049.47    
  16  0.972084     -0.283134E-01  -2.54777       2.54777       1074.82       1077.37    
  17  0.889421     -0.117184      -10.5448       10.5448       1127.65       1138.20    
  18  0.171754      -1.76169      -158.525       158.525       1141.40       1299.93    
  19  0.925876     -0.770155E-01  -6.93020       6.93020       1015.46       1022.39    
  20  0.992897     -0.712866E-02 -0.641469      0.641469       1039.96       1040.60    
  21  0.118575E-01  -4.43479      -399.063       399.063       1124.44       1523.51    
  22  0.492413     -0.708438      -63.7484       63.7484       1129.28       1193.03    
  23  0.952433     -0.487360E-01  -4.38549       4.38549       1173.33       1177.72    
  24  0.591826     -0.524543      -47.2007       47.2007       1144.36       1191.56    
  25  0.762199     -0.271548      -24.4351       24.4351       1159.55       1183.98    
  26  0.613492     -0.488588      -43.9653       43.9653       1049.34       1093.31    
  27  0.134863      -2.00350      -180.284       180.284       1036.72       1217.00    
  28  0.633670     -0.456227      -41.0533       41.0533       1167.35       1208.40    
  29  0.829625     -0.186782      -16.8075       16.8075       1081.09       1097.90    
  30  0.148219      -1.90906      -171.786       171.786       1088.88       1260.66    
  31  0.198093      -1.61902      -145.687       145.687       1210.89       1356.58    
  32  0.321318      -1.13532      -102.161       102.161       1220.24       1322.40    
  33  0.475408     -0.743582      -66.9108       66.9108       1222.10       1289.01    
  34  0.196520      -1.62699      -146.404       146.404       1182.78       1329.18    
  35  0.637413     -0.450337      -40.5234       40.5234       1145.94       1186.47    
  36  0.596751     -0.516255      -46.4550       46.4550       1175.75       1222.21    
  37  0.351361      -1.04594      -94.1186       94.1186       1053.10       1147.22    
  38  0.111764      -2.19136      -197.189       197.189       1174.18       1371.37    
  39  0.213579      -1.54375      -138.913       138.913       1237.79       1376.70    
  40  0.799647     -0.223585      -20.1192       20.1192       1257.35       1277.47    
  41  0.670682     -0.399460      -35.9452       35.9452       1225.47       1261.41    
  42  0.104235      -2.26111      -203.465       203.465       1166.27       1369.73    
  43  0.607160E-01  -2.80155      -252.096       252.096       1105.28       1357.37    
  44  0.462312     -0.771516      -69.4245       69.4245       1140.92       1210.34    
  45  0.269658      -1.31060      -117.934       117.934       1185.18       1303.12    
  46  0.678606     -0.387714      -34.8882       34.8882       1071.52       1106.41    
  47  0.669051     -0.401895      -36.1643       36.1643       1142.24       1178.41    
  48  0.551912     -0.594367      -53.4838       53.4838       1143.67       1197.16    
  49  0.116070E-01  -4.45614      -400.984       400.984       1199.90       1600.88    
  50  0.911337     -0.928428E-01  -8.35441       8.35441       1187.05       1195.41    
  51  0.302404      -1.19599      -107.621       107.621       1185.57       1293.19    
  52  0.527926     -0.638800      -57.4821       57.4821       1139.30       1196.78    
  53  0.204835      -1.58555      -142.675       142.675       1007.29       1149.97    
loop,thermsimp(1:2)       66   122.800       267.185    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167        993.95          0.86          1.14         21.84          0.01          0.06         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168       1081.32          0.83          1.14         21.92          0.00          0.05         23.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    993.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       66
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       67
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      167     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -108.967       108.967       1015.46       1124.43    
   2  0.840396     -0.173882      -15.6466       15.6466       1039.96       1055.61    
   3  0.165782      -1.79708      -161.709       161.709       1041.31       1203.02    
   4  0.516202E-01  -2.96384      -266.700       266.700       1024.69       1291.39    
   5  0.163201      -1.81278      -163.122       163.122       1031.63       1194.75    
   6  0.201529      -1.60182      -144.139       144.139       1074.82       1218.96    
   7  0.791805     -0.233441      -21.0060       21.0060       1049.34       1070.35    
   8  0.306466      -1.18265      -106.420       106.420       1081.09       1187.51    
   9  0.625963     -0.468465      -42.1546       42.1546       1071.52       1113.68    
  10  0.255827      -1.36325      -122.672       122.672       1034.31       1156.99    
  11  0.275269      -1.29001      -116.081       116.081       1029.43       1145.51    
  12  0.546374     -0.604451      -54.3912       54.3912       1053.15       1107.54    
  13  0.738275E-01  -2.60602      -234.502       234.502       1127.65       1362.16    
  14  0.459460     -0.777704      -69.9813       69.9813       1053.10       1123.08    
  15  0.245891      -1.40287      -126.236       126.236       1007.29       1133.53    
  16  0.818144E-01  -2.50330      -225.258       225.258       1093.40       1318.66    
  17  0.791963     -0.233241      -20.9881       20.9881       1051.91       1072.90    
  18  0.652560     -0.426852      -38.4101       38.4101       1064.83       1103.24    
  19  0.743237     -0.296740      -26.7020       26.7020       1173.33       1200.03    
  20  0.146095      -1.92350      -173.085       173.085       1142.24       1315.33    
  21  0.747148     -0.291492      -26.2298       26.2298       1159.55       1185.78    
  22  0.935024E-01  -2.36977      -213.242       213.242       1145.94       1359.19    
  23  0.924202     -0.788243E-01  -7.09297       7.09297       1131.18       1138.27    
  24  0.193934      -1.64024      -147.596       147.596       1144.36       1291.96    
  25  0.112499      -2.18481      -196.599       196.599       1129.28       1325.88    
  26  0.609079     -0.495807      -44.6150       44.6150       1187.05       1231.67    
  27  0.387822     -0.947210      -85.2342       85.2342       1078.35       1163.59    
  28  0.151976      -1.88403      -169.534       169.534       1139.30       1308.83    
  29  0.820125     -0.198299      -17.8438       17.8438       1143.67       1161.52    
  30  0.100865      -2.29397      -206.422       206.422       1167.35       1373.77    
  31  0.246930      -1.39865      -125.857       125.857       1140.92       1266.78    
  32  0.101973      -2.28305      -205.439       205.439       1036.72       1242.16    
  33  0.389401     -0.943145      -84.8685       84.8685       1175.75       1260.62    
  34  0.573635     -0.555762      -50.0099       50.0099       1053.75       1103.76    
  35  0.730896E-01  -2.61607      -235.406       235.406       1088.88       1324.28    
  36  0.260104      -1.34667      -121.180       121.180       1225.47       1346.65    
  37  0.562102     -0.576073      -51.8376       51.8376       1004.20       1056.04    
  38  0.159056      -1.83850      -165.437       165.437       1257.35       1422.79    
  39  0.779134E-02  -4.85474      -436.851       436.851       1039.24       1476.09    
  40  0.693208     -0.366425      -32.9726       32.9726       1222.10       1255.08    
  41  0.600279     -0.510361      -45.9246       45.9246       1185.57       1231.49    
  42  0.419387     -0.868962      -78.1931       78.1931       1141.40       1219.60    
  43  0.952036     -0.491524E-01  -4.42295       4.42295       1185.18       1189.60    
  44  0.613955     -0.487834      -43.8975       43.8975       1220.24       1264.14    
  45  0.842752     -0.171082      -15.3948       15.3948       1182.78       1198.18    
  46  0.733219     -0.310311      -27.9232       27.9232       1210.89       1238.82    
  47  0.776088     -0.253489      -22.8101       22.8101       1105.28       1128.09    
  48  0.965215     -0.354047E-01  -3.18587       3.18587       1166.27       1169.45    
  49  0.487812     -0.717826      -64.5932       64.5932       1174.18       1238.77    
  50  0.864492     -0.145613      -13.1029       13.1029       1237.79       1250.89    
  51  0.334607      -1.09480      -98.5149       98.5149       1128.78       1227.30    
  52  0.267438      -1.31887      -118.678       118.678       1124.44       1243.12    
  53  0.333561      -1.09793      -98.7966       98.7966       993.949       1092.75    
loop,thermsimp(1:2)       67   108.967       15.6466    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169       1789.73          0.86          1.15         22.11          0.00          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    170       1106.52          0.85          1.15         21.92          0.00          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1106.52
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       67
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       68
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      169     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -419.551       419.551       1039.96       1459.51    
   2  0.714357     -0.336373      -30.2683       30.2683       1004.20       1034.47    
   3  0.997096     -0.290808E-02 -0.261683      0.261683       1049.34       1049.61    
   4  0.905437     -0.993373E-01  -8.93882       8.93882       1051.91       1060.85    
   5  0.307060      -1.18071      -106.246       106.246       993.949       1100.20    
   6  0.179061      -1.72003      -154.776       154.776       1064.83       1219.61    
   7  0.384312     -0.956301      -86.0522       86.0522       1053.75       1139.80    
   8  0.901101     -0.104138      -9.37084       9.37084       1053.15       1062.52    
   9  0.606170     -0.500594      -45.0457       45.0457       1071.52       1116.57    
  10  0.515234     -0.663133      -59.6717       59.6717       1053.10       1112.77    
  11  0.639447     -0.447152      -40.2367       40.2367       1015.46       1055.70    
  12  0.820429     -0.197928      -17.8104       17.8104       1105.28       1123.09    
  13  0.521739     -0.650587      -58.5428       58.5428       1007.29       1065.84    
  14  0.767979     -0.263993      -23.7553       23.7553       1131.18       1154.93    
  15  0.530366     -0.634187      -57.0670       57.0670       1029.43       1086.50    
  16  0.732471     -0.311332      -28.0151       28.0151       1034.31       1062.33    
  17  0.440461     -0.819933      -73.7812       73.7812       1143.67       1217.45    
  18  0.595715     -0.517993      -46.6113       46.6113       1078.35       1124.96    
  19  0.407958     -0.896592      -80.6794       80.6794       1166.27       1246.95    
  20  0.544683     -0.607550      -54.6701       54.6701       1159.55       1214.22    
  21  0.611386E-01  -2.79461      -251.472       251.472       1081.09       1332.56    
  22  0.135041      -2.00218      -180.165       180.165       1185.18       1365.35    
  23  0.547242     -0.602864      -54.2484       54.2484       1031.63       1085.88    
  24  0.214436      -1.53975      -138.553       138.553       1182.78       1321.33    
  25  0.340220      -1.07816      -97.0179       97.0179       1173.33       1270.35    
  26  0.270394      -1.30787      -117.688       117.688       1041.31       1159.00    
  27  0.605229     -0.502149      -45.1856       45.1856       1074.82       1120.01    
  28  0.630206     -0.461709      -41.5466       41.5466       1141.40       1182.95    
  29  0.942476     -0.592449E-01  -5.33112       5.33112       1128.78       1134.11    
  30  0.293125      -1.22716      -110.425       110.425       1185.57       1295.99    
  31  0.526210     -0.642056      -57.7751       57.7751       1187.05       1244.83    
  32  0.972201     -0.281927E-01  -2.53690       2.53690       1174.18       1176.72    
  33  0.570000     -0.562119      -50.5820       50.5820       1210.89       1261.47    
  34  0.752945     -0.283763      -25.5343       25.5343       1036.72       1062.25    
  35  0.333005      -1.09960      -98.9467       98.9467       1124.44       1223.39    
  36  0.430444     -0.842939      -75.8514       75.8514       1237.79       1313.64    
  37  0.106505      -2.23957      -201.526       201.526       1222.10       1423.63    
  38  0.327953      -1.11488      -100.322       100.322       1175.75       1276.07    
  39  0.586631     -0.533359      -47.9941       47.9941       1220.24       1268.23    
  40  0.563274     -0.573989      -51.6501       51.6501       1140.92       1192.57    
  41  0.802100     -0.220522      -19.8435       19.8435       1024.69       1044.53    
  42  0.594871     -0.519411      -46.7389       46.7389       1144.36       1191.10    
  43  0.816066     -0.203261      -18.2903       18.2903       1139.30       1157.59    
  44  0.170795E-01  -4.06987      -366.226       366.226       1142.24       1508.47    
  45  0.554958     -0.588864      -52.9886       52.9886       1093.40       1146.39    
  46  0.674023     -0.394492      -35.4981       35.4981       1088.88       1124.37    
  47  0.371758     -0.989512      -89.0407       89.0407       1129.28       1218.32    
  48  0.309440      -1.17299      -105.551       105.551       1225.47       1331.02    
  49  0.182337      -1.70190      -153.144       153.144       1145.94       1299.09    
  50  0.443504     -0.813049      -73.1618       73.1618       1127.65       1200.82    
  51  0.407824     -0.896918      -80.7087       80.7087       1167.35       1248.06    
  52  0.140254      -1.96430      -176.756       176.756       1257.35       1434.11    
  53  0.801043     -0.221840      -19.9622       19.9622       1106.52       1126.48    
loop,thermsimp(1:2)       68   419.551       30.2683    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171       1024.24          0.85          1.15         21.89          0.00          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    172       1210.62          0.84          1.15         21.86          0.00          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1024.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       68
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       69
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      171     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -58.6621       58.6621       1004.20       1062.87    
   2  0.554375     -0.589913      -53.0831       53.0831       1024.69       1077.77    
   3  0.404373     -0.905418      -81.4736       81.4736       1049.34       1130.82    
   4  0.632877     -0.457478      -41.1660       41.1660       1015.46       1056.63    
   5  0.395261     -0.928209      -83.5244       83.5244       1051.91       1135.43    
   6  0.715068     -0.335378      -30.1788       30.1788       1036.72       1066.90    
   7  0.918313     -0.852174E-01  -7.66824       7.66824       1034.31       1041.98    
   8  0.529514E-01  -2.93838      -264.409       264.409       1053.15       1317.56    
   9  0.284219      -1.25801      -113.201       113.201       1007.29       1120.50    
  10  0.809402     -0.211460      -19.0281       19.0281       1031.63       1050.65    
  11  0.604758     -0.502928      -45.2557       45.2557       1029.43       1074.69    
  12  0.624772     -0.470369      -42.3259       42.3259       993.949       1036.28    
  13  0.622683     -0.473718      -42.6273       42.6273       1053.10       1095.73    
  14  0.491656     -0.709976      -63.8868       63.8868       1071.52       1135.41    
  15  0.823484     -0.194211      -17.4760       17.4760       1074.82       1092.30    
  16  0.185629E-01  -3.98659      -358.731       358.731       1105.28       1464.01    
  17  0.911253     -0.929346E-01  -8.36268       8.36268       1088.88       1097.24    
  18  0.825116     -0.192231      -17.2978       17.2978       1078.35       1095.65    
  19  0.902913     -0.102129      -9.19006       9.19006       1106.52       1115.71    
  20  0.869925     -0.139348      -12.5392       12.5392       1128.78       1141.32    
  21  0.135445      -1.99919      -179.896       179.896       1053.75       1233.64    
  22  0.516840     -0.660022      -59.3918       59.3918       1093.40       1152.79    
  23  0.127583      -2.05899      -185.277       185.277       1131.18       1316.45    
  24  0.237062E-01  -3.74202      -336.724       336.724       1139.30       1476.02    
  25  0.456233     -0.784753      -70.6156       70.6156       1041.31       1111.93    
  26  0.547397     -0.602581      -54.2230       54.2230       1174.18       1228.40    
  27  0.231746E-02  -6.06728      -545.961       545.961       1141.40       1687.36    
  28  0.467213     -0.760969      -68.4754       68.4754       1144.36       1212.83    
  29  0.397333     -0.922981      -83.0540       83.0540       1140.92       1223.97    
  30  0.291343      -1.23325      -110.974       110.974       1127.65       1238.63    
  31  0.964262     -0.363922E-01  -3.27473       3.27473       1159.55       1162.82    
  32  0.260485      -1.34521      -121.048       121.048       1143.67       1264.72    
  33  0.868574     -0.140902      -12.6790       12.6790       1129.28       1141.96    
  34  0.832573     -0.183235      -16.4883       16.4883       1064.83       1081.32    
  35  0.240383      -1.42552      -128.275       128.275       1124.44       1252.72    
  36  0.878342     -0.129719      -11.6727       11.6727       1187.05       1198.73    
  37  0.168707      -1.77959      -160.136       160.136       1166.27       1326.40    
  38  0.348015      -1.05551      -94.9796       94.9796       1167.35       1262.33    
  39  0.846224     -0.166971      -15.0248       15.0248       1210.89       1225.92    
  40  0.842580     -0.171286      -15.4131       15.4131       1220.24       1235.65    
  41  0.230401      -1.46794      -132.091       132.091       1173.33       1305.42    
  42  0.441962     -0.816531      -73.4751       73.4751       1175.75       1249.23    
  43  0.772036     -0.258724      -23.2812       23.2812       1185.57       1208.85    
  44  0.970063     -0.303946E-01  -2.73504       2.73504       1145.94       1148.68    
  45  0.610535     -0.493419      -44.4001       44.4001       1237.79       1282.19    
  46  0.548201     -0.601114      -54.0909       54.0909       1182.78       1236.87    
  47  0.322533      -1.13155      -101.822       101.822       1225.47       1327.29    
  48  0.194318E-01  -3.94084      -354.615       354.615       1081.09       1435.71    
  49  0.219930      -1.51445      -136.277       136.277       1185.18       1321.46    
  50  0.538995E-01  -2.92063      -262.812       262.812       1222.10       1484.92    
  51  0.189941      -1.66104      -149.468       149.468       1257.35       1406.82    
  52  0.339787      -1.07944      -97.1327       97.1327       1039.96       1137.09    
  53  0.783417     -0.244091      -21.9644       21.9644       1024.24       1046.21    
loop,thermsimp(1:2)       69   58.6621       53.0831    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       1058.50          0.86          1.15         21.86          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    174       1332.60          0.84          1.14         21.93          0.01          0.04         23.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1058.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       69
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       70
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      173     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -127.606       127.606       993.949       1121.56    
   2  0.384023     -0.957054      -86.1200       86.1200       1034.31       1120.43    
   3  0.672379     -0.396933      -35.7178       35.7178       1024.24       1059.96    
   4  0.204591      -1.58674      -142.782       142.782       1031.63       1174.41    
   5  0.145151      -1.92998      -173.668       173.668       1015.46       1189.13    
   6  0.235757      -1.44495      -130.023       130.023       1004.20       1134.23    
   7  0.882595     -0.124889      -11.2381       11.2381       1036.72       1047.96    
   8  0.215562      -1.53451      -138.082       138.082       1029.43       1167.51    
   9  0.248905      -1.39068      -125.140       125.140       1024.69       1149.83    
  10  0.695481     -0.363152      -32.6780       32.6780       1064.83       1097.51    
  11  0.515786     -0.662063      -59.5754       59.5754       1074.82       1134.40    
  12  0.956817     -0.441428E-01  -3.97217       3.97217       1078.35       1082.32    
  13  0.256477      -1.36072      -122.443       122.443       1053.10       1175.54    
  14  0.870409     -0.138792      -12.4891       12.4891       1088.88       1101.37    
  15  0.296335      -1.21627      -109.445       109.445       1041.31       1150.75    
  16  0.563087     -0.574322      -51.6801       51.6801       1106.52       1158.20    
  17  0.860973     -0.149692      -13.4699       13.4699       1007.29       1020.76    
  18  0.336353      -1.08959      -98.0465       98.0465       1049.34       1147.39    
  19  0.432238     -0.838780      -75.4772       75.4772       1071.52       1147.00    
  20  0.411587     -0.887734      -79.8823       79.8823       1051.91       1131.79    
  21  0.685679     -0.377346      -33.9552       33.9552       1039.96       1073.92    
  22  0.178038E-01  -4.02835      -362.489       362.489       1128.78       1491.27    
  23  0.330516      -1.10710      -99.6219       99.6219       1129.28       1228.90    
  24  0.987115     -0.129685E-01  -1.16696       1.16696       1145.94       1147.11    
  25  0.702947     -0.352474      -31.7172       31.7172       1093.40       1125.12    
  26  0.159040      -1.83860      -165.445       165.445       1159.55       1324.99    
  27  0.329714      -1.10953      -99.8406       99.8406       1187.05       1286.89    
  28  0.542452     -0.611656      -55.0396       55.0396       1185.57       1240.61    
  29  0.484074     -0.725518      -65.2854       65.2854       1144.36       1209.64    
  30  0.574330     -0.554551      -49.9010       49.9010       1140.92       1190.82    
  31  0.987944     -0.121288E-01  -1.09141       1.09141       1210.89       1211.98    
  32  0.565195E-01  -2.87317      -258.541       258.541       1174.18       1432.72    
  33  0.662626     -0.411545      -37.0326       37.0326       1053.75       1090.78    
  34  0.462195     -0.771769      -69.4472       69.4472       1220.24       1289.69    
  35  0.413957     -0.881994      -79.3658       79.3658       1182.78       1262.15    
  36  0.627825     -0.465493      -41.8872       41.8872       1127.65       1169.54    
  37  0.373783E-01  -3.28667      -295.749       295.749       1175.75       1471.50    
  38  0.318481      -1.14419      -102.960       102.960       1124.44       1227.40    
  39  0.193037      -1.64487      -148.013       148.013       1167.35       1315.36    
  40  0.246573      -1.40010      -125.987       125.987       1143.67       1269.66    
  41  0.913643     -0.903152E-01  -8.12697       8.12697       1237.79       1245.92    
  42  0.593287     -0.522077      -46.9788       46.9788       1173.33       1220.31    
  43  0.323913      -1.12728      -101.438       101.438       1131.18       1232.61    
  44  0.270579E-01  -3.60978      -324.824       324.824       1053.15       1377.98    
  45  0.684823     -0.378595      -34.0677       34.0677       1185.18       1219.25    
  46  0.279340      -1.27532      -114.759       114.759       1166.27       1281.03    
  47  0.285511      -1.25348      -112.793       112.793       1225.47       1338.26    
  48  0.361874      -1.01646      -91.4655       91.4655       1257.35       1348.81    
  49  0.779291     -0.249370      -22.4395       22.4395       1081.09       1103.53    
  50  0.590933     -0.526053      -47.3366       47.3366       1105.28       1152.61    
  51  0.493821E-01  -3.00817      -270.688       270.688       1139.30       1409.98    
  52  0.736348     -0.306053      -27.5400       27.5400       1222.10       1249.64    
  53  0.300670      -1.20174      -108.138       108.138       1058.50       1166.64    
loop,thermsimp(1:2)       70   127.606       86.1200    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175       1545.34          0.85          1.15         21.82          0.00          0.05         23.87
Just calling func    0   0         23.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1545.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       70
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       71
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      174     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -18.9277       18.9277       1007.29       1026.22    
   2  0.601567     -0.508218      -45.7317       45.7317       1036.72       1082.45    
   3  0.190401      -1.65862      -149.250       149.250       1024.24       1173.49    
   4  0.827263     -0.189632      -17.0640       17.0640       1039.96       1057.02    
   5  0.581677     -0.541840      -48.7572       48.7572       1078.35       1127.11    
   6  0.680336     -0.385169      -34.6592       34.6592       1053.75       1088.41    
   7  0.641383     -0.444128      -39.9647       39.9647       1064.83       1104.79    
   8  0.593931     -0.520992      -46.8812       46.8812       1088.88       1135.76    
   9  0.326400      -1.11963      -100.750       100.750       1081.09       1181.84    
  10  0.964323     -0.363286E-01  -3.26901       3.26901       1034.31       1037.58    
  11  0.481751     -0.730328      -65.7182       65.7182       993.949       1059.67    
  12  0.230624E-01  -3.76955      -339.201       339.201       1093.40       1432.60    
  13  0.214859      -1.53777      -138.376       138.376       1051.91       1190.28    
  14  0.325804      -1.12146      -100.914       100.914       1004.20       1105.12    
  15  0.668745     -0.402353      -36.2055       36.2055       1074.82       1111.03    
  16  0.803263     -0.219073      -19.7131       19.7131       1071.52       1091.24    
  17  0.465531     -0.764577      -68.8000       68.8000       1145.94       1214.74    
  18  0.589796     -0.527978      -47.5099       47.5099       1049.34       1096.85    
  19  0.783335     -0.244195      -21.9738       21.9738       1024.69       1046.66    
  20  0.937099     -0.649659E-01  -5.84592       5.84592       1041.31       1047.16    
  21  0.504081     -0.685019      -61.6410       61.6410       1105.28       1166.92    
  22  0.368431E-01  -3.30109      -297.046       297.046       1106.52       1403.57    
  23  0.462712     -0.770651      -69.3466       69.3466       1058.50       1127.84    
  24  0.172447      -1.75767      -158.163       158.163       1029.43       1187.59    
  25  0.361979      -1.01617      -91.4396       91.4396       1127.65       1219.09    
  26  0.616189     -0.484202      -43.5707       43.5707       1031.63       1075.20    
  27  0.495582     -0.702023      -63.1712       63.1712       1053.10       1116.27    
  28  0.492859     -0.707532      -63.6669       63.6669       1015.46       1079.13    
  29  0.189027      -1.66586      -149.902       149.902       1140.92       1290.82    
  30  0.336237      -1.08994      -98.0776       98.0776       1144.36       1242.44    
  31  0.997382     -0.262184E-02 -0.235924      0.235924       1210.89       1211.13    
  32  0.629287     -0.463168      -41.6779       41.6779       1185.18       1226.86    
  33  0.226178      -1.48644      -133.756       133.756       1173.33       1307.09    
  34  0.522315     -0.649483      -58.4434       58.4434       1124.44       1182.89    
  35  0.238835E-02  -6.03715      -543.250       543.250       1129.28       1672.53    
  36  0.123092E-01  -4.39741      -395.699       395.699       1131.18       1526.88    
  37  0.488141     -0.717152      -64.5325       64.5325       1185.57       1250.10    
  38  0.925188     -0.777584E-01  -6.99705       6.99705       1237.79       1244.79    
  39  0.676413     -0.390952      -35.1796       35.1796       1222.10       1257.28    
  40  0.638827     -0.448121      -40.3240       40.3240       1182.78       1223.10    
  41  0.789998     -0.235725      -21.2116       21.2116       1143.67       1164.88    
  42  0.453703E-01  -3.09290      -278.313       278.313       1166.27       1444.58    
  43  0.866893     -0.142840      -12.8534       12.8534       1187.05       1199.91    
  44  0.122493E-01  -4.40228      -396.137       396.137       1220.24       1616.38    
  45  0.172311      -1.75846      -158.234       158.234       1167.35       1325.58    
  46  0.899580     -0.105827      -9.52277       9.52277       1159.55       1169.07    
  47  0.857845     -0.153332      -13.7975       13.7975       1225.47       1239.27    
  48  0.176813      -1.73266      -155.913       155.913       1257.35       1413.26    
  49  0.795271E-01  -2.53166      -227.810       227.810       1053.15       1280.96    
  50  0.461368     -0.773559      -69.6083       69.6083       1139.30       1208.90    
  51  0.727625     -0.317970      -28.6123       28.6123       1174.18       1202.79    
  52  0.106879      -2.23606      -201.211       201.211       1175.75       1376.96    
  53  0.169411      -1.77543      -159.761       159.761       1545.34       1705.10    
loop,thermsimp(1:2)       71   18.9277       45.7317    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176       1128.78          0.85          1.15         21.88          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    177       1453.11          0.84          1.15         21.84          0.00          0.05         23.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1128.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       71
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       72
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      176     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -12.4973       12.4973       1007.29       1019.79    
   2  0.470451     -0.754063      -67.8540       67.8540       1034.31       1102.17    
   3  0.615627     -0.485114      -43.6528       43.6528       1024.69       1068.34    
   4  0.291899      -1.23135      -110.802       110.802       1041.31       1152.11    
   5  0.584822     -0.536448      -48.2720       48.2720       1039.96       1088.23    
   6  0.681731     -0.383120      -34.4749       34.4749       993.949       1028.42    
   7  0.680149     -0.385444      -34.6840       34.6840       1031.63       1066.31    
   8  0.560478     -0.578966      -52.0980       52.0980       1015.46       1067.56    
   9  0.392299     -0.935730      -84.2012       84.2012       1036.72       1120.92    
  10  0.586793     -0.533083      -47.9692       47.9692       1053.75       1101.72    
  11  0.461418     -0.773452      -69.5987       69.5987       1071.52       1141.12    
  12  0.142886      -1.94571      -175.084       175.084       1049.34       1224.43    
  13  0.960325     -0.404831E-01  -3.64285       3.64285       1064.83       1068.47    
  14  0.547176     -0.602984      -54.2592       54.2592       1004.20       1058.46    
  15  0.817596     -0.201386      -18.1217       18.1217       1074.82       1092.94    
  16  0.184065      -1.69247      -152.296       152.296       1053.10       1205.39    
  17  0.763954     -0.269247      -24.2281       24.2281       1078.35       1102.58    
  18  0.740640     -0.300240      -27.0169       27.0169       1058.50       1085.52    
  19  0.257299      -1.35751      -122.155       122.155       1088.88       1211.03    
  20  0.274950      -1.29117      -116.185       116.185       1143.67       1259.86    
  21  0.850599     -0.161814      -14.5608       14.5608       1105.28       1119.84    
  22  0.265651      -1.32557      -119.281       119.281       1159.55       1278.83    
  23  0.388810     -0.944665      -85.0052       85.0052       1024.24       1109.25    
  24  0.921262     -0.820106E-01  -7.37968       7.37968       1081.09       1088.47    
  25  0.622168     -0.474545      -42.7017       42.7017       1124.44       1167.15    
  26  0.831499     -0.184526      -16.6044       16.6044       1029.43       1046.04    
  27  0.777776     -0.251317      -22.6146       22.6146       1051.91       1074.52    
  28  0.519638     -0.654624      -58.9060       58.9060       1187.05       1245.96    
  29  0.343480      -1.06863      -96.1599       96.1599       1174.18       1270.34    
  30  0.379182     -0.969738      -87.2613       87.2613       1139.30       1226.56    
  31  0.509964     -0.673415      -60.5969       60.5969       1210.89       1271.49    
  32  0.457294E-01  -3.08501      -277.603       277.603       1145.94       1423.55    
  33  0.952238     -0.489400E-01  -4.40384       4.40384       1127.65       1132.06    
  34  0.198116      -1.61890      -145.676       145.676       1182.78       1328.46    
  35  0.863922     -0.146273      -13.1623       13.1623       1185.18       1198.34    
  36  0.765944     -0.266646      -23.9940       23.9940       1225.47       1249.46    
  37  0.849389     -0.163238      -14.6889       14.6889       1144.36       1159.05    
  38  0.488339     -0.716745      -64.4959       64.4959       1237.79       1302.28    
  39  0.969632     -0.308388E-01  -2.77501       2.77501       1185.57       1188.34    
  40  0.971690     -0.287184E-01  -2.58421       2.58421       1222.10       1224.69    
  41  0.690522     -0.370307      -33.3219       33.3219       1053.15       1086.48    
  42  0.266028      -1.32415      -119.153       119.153       1140.92       1260.07    
  43  0.581296     -0.542495      -48.8161       48.8161       1173.33       1222.15    
  44  0.636654     -0.451529      -40.6306       40.6306       1167.35       1207.98    
  45  0.947680     -0.537383E-01  -4.83562       4.83562       1175.75       1180.59    
  46  0.792806     -0.232176      -20.8923       20.8923       1106.52       1127.41    
  47  0.420588     -0.866101      -77.9357       77.9357       1257.35       1335.29    
  48  0.780043     -0.248407      -22.3527       22.3527       1093.40       1115.75    
  49  0.834700E-01  -2.48327      -223.456       223.456       1166.27       1389.72    
  50  0.707823     -0.345562      -31.0952       31.0952       1131.18       1162.27    
  51  0.836500     -0.178529      -16.0649       16.0649       1220.24       1236.30    
  52  0.111614      -2.19271      -197.309       197.309       1129.28       1326.59    
  53  0.690314     -0.370608      -33.3490       33.3490       1128.78       1162.13    
loop,thermsimp(1:2)       72   12.4973       67.8540    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178       1007.03          0.85          1.15         21.93          0.00          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    179       1069.48          0.84          1.14         21.93          0.01          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1007.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       72
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       73
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      178     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -26.8629       26.8629       1007.29       1034.16    
   2  0.823468     -0.194230      -17.4777       17.4777       993.949       1011.43    
   3  0.352913      -1.04153      -93.7220       93.7220       1029.43       1123.15    
   4  0.268511      -1.31486      -118.317       118.317       1004.20       1122.52    
   5  0.137541      -1.98383      -178.514       178.514       1031.63       1210.14    
   6  0.953738     -0.473661E-01  -4.26222       4.26222       1015.46       1019.72    
   7  0.366602      -1.00348      -90.2974       90.2974       1024.69       1114.99    
   8  0.861530     -0.149046      -13.4118       13.4118       1064.83       1078.24    
   9  0.190086      -1.66028      -149.399       149.399       1051.91       1201.31    
  10  0.931621     -0.708293E-01  -6.37354       6.37354       1058.50       1064.87    
  11  0.135562      -1.99833      -179.819       179.819       1053.15       1232.97    
  12  0.577052     -0.549824      -49.4756       49.4756       1039.96       1089.44    
  13  0.937511     -0.645266E-01  -5.80639       5.80639       1081.09       1086.90    
  14  0.836727     -0.178258      -16.0404       16.0404       1074.82       1090.86    
  15  0.124731      -2.08159      -187.311       187.311       1053.75       1241.06    
  16  0.830758     -0.185417      -16.6847       16.6847       1034.31       1051.00    
  17  0.925849     -0.770442E-01  -6.93278       6.93278       1078.35       1085.28    
  18  0.945668     -0.558633E-01  -5.02683       5.02683       1024.24       1029.27    
  19  0.700762     -0.355587      -31.9973       31.9973       1093.40       1125.40    
  20  0.585168E-01  -2.83844      -255.416       255.416       1105.28       1360.69    
  21  0.241985      -1.41888      -127.677       127.677       1036.72       1164.40    
  22  0.426115     -0.853047      -76.7609       76.7609       1106.52       1183.28    
  23  0.730656     -0.313813      -28.2383       28.2383       1127.65       1155.89    
  24  0.227460      -1.48078      -133.247       133.247       1071.52       1204.77    
  25  0.824070     -0.193500      -17.4120       17.4120       1041.31       1058.72    
  26  0.912829     -0.912064E-01  -8.20716       8.20716       1144.36       1152.57    
  27  0.130860      -2.03363      -182.995       182.995       1128.78       1311.78    
  28  0.126999      -2.06358      -185.690       185.690       1131.18       1316.87    
  29  0.394828E-01  -3.23189      -290.820       290.820       1124.44       1415.26    
  30  0.927793     -0.749466E-01  -6.74403       6.74403       1175.75       1182.50    
  31  0.161762      -1.82163      -163.918       163.918       1185.57       1349.49    
  32  0.510374     -0.672611      -60.5246       60.5246       1185.18       1245.71    
  33  0.930607     -0.719186E-01  -6.47156       6.47156       1053.10       1059.57    
  34  0.825283E-01  -2.49461      -224.477       224.477       1167.35       1391.82    
  35  0.569143     -0.563624      -50.7174       50.7174       1088.88       1139.59    
  36  0.732951     -0.310676      -27.9560       27.9560       1173.33       1201.29    
  37  0.554950     -0.588877      -52.9898       52.9898       1049.34       1102.33    
  38  0.614368     -0.487160      -43.8369       43.8369       1222.10       1265.94    
  39  0.127889      -2.05659      -185.062       185.062       1139.30       1324.36    
  40  0.510007     -0.673330      -60.5892       60.5892       1220.24       1280.83    
  41  0.206107      -1.57936      -142.118       142.118       1187.05       1329.17    
  42  0.812962E-01  -2.50966      -225.830       225.830       1225.47       1451.30    
  43  0.711913     -0.339799      -30.5767       30.5767       1143.67       1174.25    
  44  0.649899     -0.430939      -38.7778       38.7778       1140.92       1179.70    
  45  0.102708      -2.27587      -204.793       204.793       1174.18       1378.97    
  46  0.152702      -1.87927      -169.105       169.105       1210.89       1380.00    
  47  0.827734     -0.189064      -17.0128       17.0128       1159.55       1176.56    
  48  0.558329     -0.582808      -52.4436       52.4436       1237.79       1290.23    
  49  0.174746      -1.74442      -156.971       156.971       1129.28       1286.25    
  50  0.107247      -2.23262      -200.902       200.902       1182.78       1383.68    
  51  0.988891     -0.111711E-01  -1.00522       1.00522       1257.35       1258.35    
  52  0.388651     -0.945075      -85.0421       85.0421       1166.27       1251.31    
  53  0.580190     -0.544399      -48.9874       48.9874       1007.03       1056.01    
loop,thermsimp(1:2)       73   26.8629       17.4777    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180        997.67          0.84          1.14         21.88          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181       1031.27          0.84          1.14         22.11          0.03          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    1031.3        6.721     -1.913      4.414     -102.6      1.428    
                       1.017      1.063     -99.70      3.787     0.8754    

                       1.875     -2.731      1.540      7000.      7000.    

                      -1.611      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.796     -5.948     -9.787      7.311    

                      -13.88     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5583E-02 0.3625     0.8291E-01 0.2591    

                     -0.2486    -0.9758E-01 0.2475     0.1885     0.1997    



                     -0.5885    -0.6623      0.000     0.2028    -0.1140    

                      0.2734E-02 0.2512    -0.7116    -0.7125E-01 0.3776    

                      0.1100     0.1096    -0.7102     -1.528      7000.    



                      -1.534     -1.280     -2.142     -1.982    -0.3807    

                     -0.3252      9.351      8.766    -0.1672E+05 -6.000    

                     -0.6850E-01 -1.989      9.380      8.889    -0.1969E+05



                      -6.000     0.9776    -0.2204      8.965      9.211    

                     -0.1944E+05 -6.000    -0.5186    -0.2377      9.085    

                       8.921    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    997.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       73
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       74
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      180     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -16.1230       16.1230       993.949       1010.07    
   2  0.439366     -0.822423      -74.0053       74.0053       1015.46       1089.47    
   3  0.603094     -0.505682      -45.5035       45.5035       1024.24       1069.75    
   4  0.695854E-01  -2.66520      -239.827       239.827       1007.29       1247.12    
   5  0.273021      -1.29821      -116.819       116.819       1034.31       1151.13    
   6  0.418319     -0.871511      -78.4224       78.4224       1007.03       1085.45    
   7  0.688437     -0.373331      -33.5940       33.5940       1041.31       1074.90    
   8  0.400930     -0.913969      -82.2430       82.2430       1053.10       1135.34    
   9  0.569492     -0.563010      -50.6622       50.6622       1058.50       1109.16    
  10  0.812441     -0.207712      -18.6908       18.6908       1064.83       1083.52    
  11  0.222094      -1.50465      -135.395       135.395       1078.35       1213.75    
  12  0.695761     -0.362749      -32.6418       32.6418       1081.09       1113.73    
  13  0.909536E-01  -2.39741      -215.729       215.729       1039.96       1255.69    
  14  0.297191      -1.21338      -109.185       109.185       1074.82       1184.01    
  15  0.806729     -0.214767      -19.3257       19.3257       1049.34       1068.67    
  16  0.407021     -0.898891      -80.8862       80.8862       1024.69       1105.57    
  17  0.520426     -0.653107      -58.7695       58.7695       1004.20       1062.97    
  18  0.826852     -0.190129      -17.1087       17.1087       1029.43       1046.54    
  19  0.729268     -0.315714      -28.4094       28.4094       1093.40       1121.81    
  20  0.344086      -1.06687      -96.0013       96.0013       1088.88       1184.88    
  21  0.280849      -1.26994      -114.275       114.275       1144.36       1258.63    
  22  0.301244E-01  -3.50242      -315.164       315.164       1127.65       1442.82    
  23  0.503253     -0.686663      -61.7890       61.7890       1036.72       1098.51    
  24  0.549007     -0.599644      -53.9586       53.9586       1143.67       1197.63    
  25  0.814230     -0.205513      -18.4930       18.4930       1159.55       1178.04    
  26  0.641489     -0.443963      -39.9498       39.9498       1140.92       1180.87    
  27  0.248696      -1.39152      -125.216       125.216       1175.75       1300.97    
  28  0.684472     -0.379107      -34.1137       34.1137       1106.52       1140.64    
  29  0.815126     -0.204413      -18.3940       18.3940       1173.33       1191.73    
  30  0.388210     -0.946208      -85.1440       85.1440       1051.91       1137.05    
  31  0.670538     -0.399675      -35.9645       35.9645       1071.52       1107.49    
  32  0.851104     -0.161221      -14.5074       14.5074       1031.63       1046.13    
  33  0.381078     -0.964752      -86.8127       86.8127       1053.15       1139.97    
  34  0.776256     -0.253273      -22.7906       22.7906       1053.75       1076.54    
  35  0.168040      -1.78355      -160.492       160.492       1185.18       1345.67    
  36  0.229069      -1.47373      -132.613       132.613       1166.27       1298.88    
  37  0.917563     -0.860337E-01  -7.74170       7.74170       1257.35       1265.09    
  38  0.161815      -1.82130      -163.889       163.889       1222.10       1385.99    
  39  0.355170      -1.03516      -93.1482       93.1482       1220.24       1313.39    
  40  0.221709      -1.50639      -135.552       135.552       1129.28       1264.83    
  41  0.424436     -0.856993      -77.1161       77.1161       1237.79       1314.90    
  42  0.337698      -1.08560      -97.6875       97.6875       1128.78       1226.47    
  43  0.574481     -0.554289      -49.8774       49.8774       1131.18       1181.05    
  44  0.614536     -0.486888      -43.8123       43.8123       1139.30       1183.11    
  45  0.345602      -1.06247      -95.6057       95.6057       1187.05       1282.66    
  46  0.330006      -1.10864      -99.7608       99.7608       1185.57       1285.33    
  47  0.934389     -0.678626E-01  -6.10658       6.10658       1105.28       1111.38    
  48  0.884466     -0.122771      -11.0475       11.0475       1174.18       1185.23    
  49  0.928979     -0.736686E-01  -6.62904       6.62904       1210.89       1217.52    
  50  0.788461     -0.237672      -21.3868       21.3868       1182.78       1204.17    
  51  0.963462     -0.372219E-01  -3.34939       3.34939       1167.35       1170.70    
  52  0.630201     -0.461716      -41.5473       41.5473       1124.44       1165.99    
  53  0.797085     -0.226794      -20.4079       20.4079       997.671       1018.08    
loop,thermsimp(1:2)       74   16.1230       74.0053    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182       1106.41          0.86          1.14         22.05          0.00          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1106.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       74
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       75
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      181     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -88.3132       88.3132       993.949       1082.26    
   2  0.269095      -1.31269      -118.122       118.122       997.671       1115.79    
   3  0.301960      -1.19746      -107.753       107.753       1031.63       1139.38    
   4  0.927593     -0.751619E-01  -6.76340       6.76340       1029.43       1036.20    
   5  0.783450     -0.244048      -21.9605       21.9605       1004.20       1026.16    
   6  0.716705     -0.333091      -29.9730       29.9730       1049.34       1079.32    
   7  0.728578     -0.316661      -28.4946       28.4946       1024.24       1052.74    
   8  0.752541     -0.284300      -25.5826       25.5826       1041.31       1066.89    
   9  0.111710      -2.19185      -197.232       197.232       1053.75       1250.98    
  10  0.202752E-01  -3.89836      -350.792       350.792       1064.83       1415.62    
  11  0.967738     -0.327937E-01  -2.95092       2.95092       1007.03       1009.98    
  12  0.530869     -0.633240      -56.9818       56.9818       1015.46       1072.44    
  13  0.752699E-01  -2.58668      -232.761       232.761       1036.72       1269.48    
  14  0.658334     -0.418043      -37.6174       37.6174       1024.69       1062.31    
  15  0.383542     -0.958305      -86.2326       86.2326       1071.52       1157.75    
  16  0.280803      -1.27010      -114.290       114.290       1058.50       1172.79    
  17  0.976909     -0.233616E-01  -2.10218       2.10218       1105.28       1107.38    
  18  0.611898     -0.491189      -44.1994       44.1994       1081.09       1125.29    
  19  0.860469     -0.150278      -13.5227       13.5227       1093.40       1106.92    
  20  0.375446     -0.979641      -88.1525       88.1525       1053.10       1141.25    
  21  0.964573     -0.360702E-01  -3.24576       3.24576       1051.91       1055.15    
  22  0.865663     -0.144259      -12.9811       12.9811       1053.15       1066.13    
  23  0.498009     -0.697137      -62.7315       62.7315       1106.52       1169.25    
  24  0.732547     -0.311228      -28.0057       28.0057       1034.31       1062.32    
  25  0.293766      -1.22497      -110.228       110.228       1124.44       1234.67    
  26  0.805097     -0.216793      -19.5080       19.5080       1167.35       1186.85    
  27  0.236791      -1.44058      -129.630       129.630       1159.55       1289.18    
  28  0.759809     -0.274688      -24.7177       24.7177       1140.92       1165.64    
  29  0.279804      -1.27367      -114.610       114.610       1131.18       1245.79    
  30  0.862550     -0.147862      -13.3053       13.3053       1139.30       1152.60    
  31  0.784800     -0.242327      -21.8056       21.8056       1074.82       1096.63    
  32  0.231425      -1.46350      -131.692       131.692       1088.88       1220.57    
  33  0.839725     -0.174681      -15.7186       15.7186       1174.18       1189.90    
  34  0.204862      -1.58542      -142.663       142.663       1173.33       1316.00    
  35  0.741170     -0.299525      -26.9526       26.9526       1143.67       1170.63    
  36  0.838703     -0.175898      -15.8281       15.8281       1182.78       1198.61    
  37  0.287711      -1.24580      -112.102       112.102       1078.35       1190.45    
  38  0.937479     -0.645611E-01  -5.80950       5.80950       1210.89       1216.70    
  39  0.188655      -1.66783      -150.079       150.079       1128.78       1278.86    
  40  0.818317     -0.200505      -18.0424       18.0424       1007.29       1025.34    
  41  0.903487     -0.101493      -9.13280       9.13280       1039.96       1049.09    
  42  0.148828      -1.90496      -171.417       171.417       1144.36       1315.78    
  43  0.573616E-01  -2.85838      -257.210       257.210       1129.28       1386.49    
  44  0.792726E-01  -2.53486      -228.098       228.098       1257.35       1485.45    
  45  0.150401      -1.89445      -170.471       170.471       1187.05       1357.52    
  46  0.511444     -0.670518      -60.3362       60.3362       1185.57       1245.90    
  47  0.179810      -1.71585      -154.400       154.400       1166.27       1320.67    
  48  0.167282      -1.78808      -160.899       160.899       1175.75       1336.65    
  49  0.589016     -0.529302      -47.6289       47.6289       1220.24       1267.87    
  50  0.974997     -0.253206E-01  -2.27847       2.27847       1237.79       1240.07    
  51  0.750240     -0.287363      -25.8582       25.8582       1185.18       1211.04    
  52  0.695153     -0.363624      -32.7205       32.7205       1222.10       1254.82    
  53  0.166976      -1.78991      -161.064       161.064       1106.41       1267.47    
loop,thermsimp(1:2)       75   88.3132       118.122    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183        983.68          0.85          1.14         21.91          0.00          0.06         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184       1176.75          0.84          1.14         21.89          0.00          0.05         23.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    983.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       75
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       76
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      183     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -270.059       270.059       1007.03       1277.09    
   2  0.604222     -0.503814      -45.3354       45.3354       1007.29       1052.63    
   3  0.106168      -2.24273      -201.811       201.811       1004.20       1206.01    
   4  0.342113      -1.07261      -96.5185       96.5185       1029.43       1125.95    
   5  0.473442     -0.747725      -67.2836       67.2836       1039.96       1107.24    
   6  0.100866E-01  -4.59655      -413.618       413.618       1024.24       1437.86    
   7  0.911848     -0.922817E-01  -8.30392       8.30392       1051.91       1060.21    
   8  0.633547     -0.456421      -41.0708       41.0708       1024.69       1065.76    
   9  0.729024     -0.316048      -28.4394       28.4394       1034.31       1062.75    
  10  0.620163     -0.477772      -42.9921       42.9921       1053.15       1096.15    
  11  0.867018     -0.142695      -12.8404       12.8404       1041.31       1054.15    
  12  0.969344E-01  -2.33372      -209.999       209.999       1015.46       1225.46    
  13  0.358466      -1.02592      -92.3170       92.3170       1049.34       1141.66    
  14  0.953168     -0.479638E-01  -4.31599       4.31599       993.949       998.265    
  15  0.684510     -0.379052      -34.1088       34.1088       1074.82       1108.93    
  16  0.482047     -0.729713      -65.6628       65.6628       1093.40       1159.06    
  17  0.974791     -0.255318E-01  -2.29747       2.29747       1105.28       1107.58    
  18  0.978669     -0.215619E-01  -1.94024       1.94024       997.671       999.611    
  19  0.929785     -0.728022E-01  -6.55107       6.55107       1081.09       1087.64    
  20  0.715020     -0.335444      -30.1848       30.1848       1031.63       1061.81    
  21  0.598247     -0.513752      -46.2297       46.2297       1053.10       1099.33    
  22  0.107080      -2.23418      -201.042       201.042       1139.30       1340.34    
  23  0.559093     -0.581439      -52.3205       52.3205       1071.52       1123.84    
  24  0.933094     -0.692491E-01  -6.23135       6.23135       1140.92       1147.15    
  25  0.470169E-01  -3.05725      -275.105       275.105       1106.52       1381.63    
  26  0.166768      -1.79115      -161.176       161.176       1143.67       1304.85    
  27  0.331277      -1.10480      -99.4149       99.4149       1058.50       1157.91    
  28  0.961755     -0.389952E-01  -3.50897       3.50897       1167.35       1170.86    
  29  0.464366E-01  -3.06967      -276.222       276.222       1174.18       1450.40    
  30  0.966136E-03  -6.94221      -624.691       624.691       1078.35       1703.04    
  31  0.941012     -0.607999E-01  -5.47105       5.47105       1182.78       1188.25    
  32  0.201947E-01  -3.90233      -351.150       351.150       1185.18       1536.33    
  33  0.679249     -0.386768      -34.8031       34.8031       1210.89       1245.70    
  34  0.318772      -1.14328      -102.877       102.877       1088.88       1191.75    
  35  0.388100     -0.946493      -85.1696       85.1696       1124.44       1209.61    
  36  0.658606     -0.417629      -37.5801       37.5801       1237.79       1275.37    
  37  0.774362     -0.255715      -23.0104       23.0104       1131.18       1154.19    
  38  0.704871     -0.349740      -31.4712       31.4712       1185.57       1217.04    
  39  0.274189      -1.29394      -116.434       116.434       1053.75       1170.18    
  40  0.881806     -0.125783      -11.3185       11.3185       1222.10       1233.42    
  41  0.198448      -1.61723      -145.525       145.525       1106.41       1251.94    
  42  0.342590      -1.07122      -96.3933       96.3933       1220.24       1316.63    
  43  0.603787     -0.504534      -45.4002       45.4002       1036.72       1082.12    
  44  0.667409     -0.404353      -36.3855       36.3855       1128.78       1165.17    
  45  0.317014      -1.14881      -103.375       103.375       1159.55       1262.92    
  46  0.368458     -0.998429      -89.8431       89.8431       1144.36       1234.20    
  47  0.139912      -1.96674      -176.976       176.976       1173.33       1350.31    
  48  0.537645     -0.620557      -55.8405       55.8405       1166.27       1222.11    
  49  0.159021      -1.83872      -165.456       165.456       1175.75       1341.21    
  50  0.729011     -0.316067      -28.4411       28.4411       1187.05       1215.49    
  51  0.802486     -0.220041      -19.8003       19.8003       1129.28       1149.08    
  52  0.249203      -1.38949      -125.032       125.032       1064.83       1189.86    
  53  0.282362      -1.26456      -113.791       113.791       983.679       1097.47    
loop,thermsimp(1:2)       76   270.059       45.3354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185       1300.13          0.81          1.14         21.86          0.01          0.05         23.87
Just calling func    0   0         23.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1300.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       76
neval is:      184
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       77
neval is:      184


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      184     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -46.4534       46.4534       993.949       1040.40    
   2  0.476930     -0.740385      -66.6232       66.6232       997.671       1064.29    
   3  0.845382     -0.167966      -15.1143       15.1143       1007.29       1022.41    
   4  0.397814     -0.921770      -82.9450       82.9450       1041.31       1124.25    
   5  0.249923      -1.38660      -124.773       124.773       1051.91       1176.68    
   6  0.591552     -0.525005      -47.2423       47.2423       1031.63       1078.87    
   7  0.143111      -1.94414      -174.942       174.942       1034.31       1209.26    
   8  0.306099      -1.18385      -106.528       106.528       1024.69       1131.22    
   9  0.441827     -0.816836      -73.5026       73.5026       1036.72       1110.22    
  10  0.504521     -0.684146      -61.5625       61.5625       1081.09       1142.65    
  11  0.127660      -2.05839      -185.223       185.223       1053.15       1238.38    
  12  0.333524      -1.09804      -98.8067       98.8067       983.679       1082.49    
  13  0.130890      -2.03340      -182.974       182.974       1053.10       1236.07    
  14  0.307732      -1.17853      -106.049       106.049       1039.96       1146.01    
  15  0.154434E-01  -4.17057      -375.287       375.287       1105.28       1480.56    
  16  0.357863      -1.02761      -92.4685       92.4685       1074.82       1167.29    
  17  0.271898      -1.30233      -117.189       117.189       1071.52       1188.71    
  18  0.906228E-01  -2.40105      -216.057       216.057       1029.43       1245.49    
  19  0.344142      -1.06670      -95.9865       95.9865       1049.34       1145.33    
  20  0.392886     -0.934237      -84.0668       84.0668       1140.92       1224.99    
  21  0.454318     -0.788958      -70.9940       70.9940       1129.28       1200.27    
  22  0.384129     -0.956778      -86.0951       86.0951       1131.18       1217.27    
  23  0.354037      -1.03835      -93.4357       93.4357       1058.50       1151.93    
  24  0.154212      -1.86943      -168.220       168.220       1093.40       1261.62    
  25  0.816320     -0.202949      -18.2623       18.2623       1128.78       1147.04    
  26  0.994970     -0.504291E-02 -0.453783      0.453783       1053.75       1054.20    
  27  0.374719E-01  -3.28416      -295.524       295.524       1167.35       1462.87    
  28  0.227113      -1.48231      -133.385       133.385       1182.78       1316.17    
  29  0.410587     -0.890167      -80.1013       80.1013       1064.83       1144.93    
  30  0.104540E-01  -4.56077      -410.399       410.399       1088.88       1499.27    
  31  0.994826     -0.518730E-02 -0.466776      0.466776       1004.20       1004.67    
  32  0.738930     -0.302553      -27.2250       27.2250       1124.44       1151.67    
  33  0.715904     -0.334209      -30.0736       30.0736       1187.05       1217.13    
  34  0.128324      -2.05320      -184.756       184.756       1185.57       1370.32    
  35  0.856095     -0.155374      -13.9812       13.9812       1166.27       1180.25    
  36  0.423967     -0.858099      -77.2156       77.2156       1015.46       1092.68    
  37  0.504650     -0.683890      -61.5395       61.5395       1222.10       1283.64    
  38  0.347036      -1.05833      -95.2331       95.2331       1144.36       1239.59    
  39  0.906779     -0.978566E-01  -8.80557       8.80557       1210.89       1219.70    
  40  0.616911     -0.483030      -43.4652       43.4652       1106.41       1149.88    
  41  0.540209     -0.615800      -55.4124       55.4124       1159.55       1214.96    
  42  0.772932     -0.257564      -23.1767       23.1767       1237.79       1260.97    
  43  0.544989     -0.606989      -54.6196       54.6196       1007.03       1061.65    
  44  0.951523     -0.496917E-01  -4.47149       4.47149       1143.67       1148.14    
  45  0.172505      -1.75733      -158.133       158.133       1220.24       1378.37    
  46  0.871391     -0.137665      -12.3877       12.3877       1139.30       1151.68    
  47  0.127604      -2.05882      -185.262       185.262       1175.75       1361.01    
  48  0.785934     -0.240882      -21.6757       21.6757       1173.33       1195.01    
  49  0.815977     -0.203369      -18.3001       18.3001       1106.52       1124.82    
  50  0.350587      -1.04815      -94.3169       94.3169       1024.24       1118.56    
  51  0.739645     -0.301584      -27.1379       27.1379       1174.18       1201.32    
  52  0.996274     -0.373345E-02 -0.335952      0.335952       1185.18       1185.52    
  53  0.303822      -1.19131      -107.200       107.200       1300.13       1407.33    
loop,thermsimp(1:2)       77   46.4534       66.6232    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186       1095.98          0.84          1.14         21.95          0.01          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1095.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       77
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       78
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      185     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -5.38770       5.38770       1004.20       1009.59    
   2  0.368209     -0.999105      -89.9040       89.9040       1007.29       1097.20    
   3  0.508630     -0.676034      -60.8325       60.8325       993.949       1054.78    
   4  0.744324     -0.295279      -26.5706       26.5706       1053.75       1080.32    
   5  0.401586     -0.912333      -82.0958       82.0958       1007.03       1089.12    
   6  0.712794     -0.338563      -30.4654       30.4654       997.671       1028.14    
   7  0.186976      -1.67678      -150.884       150.884       1031.63       1182.51    
   8  0.688451     -0.373311      -33.5922       33.5922       983.679       1017.27    
   9  0.668652     -0.402492      -36.2180       36.2180       1015.46       1051.68    
  10  0.656767     -0.420426      -37.8319       37.8319       1036.72       1074.55    
  11  0.853336     -0.158602      -14.2717       14.2717       1024.24       1038.51    
  12  0.556440     -0.586195      -52.7485       52.7485       1041.31       1094.06    
  13  0.258558E-01  -3.65522      -328.913       328.913       1106.52       1435.43    
  14  0.121003E-01  -4.41452      -397.238       397.238       1024.69       1421.93    
  15  0.150890      -1.89120      -170.179       170.179       1081.09       1251.27    
  16  0.820074     -0.198360      -17.8494       17.8494       1064.83       1082.68    
  17  0.151452      -1.88748      -169.844       169.844       1049.34       1219.19    
  18  0.305465      -1.18592      -106.715       106.715       1039.96       1146.68    
  19  0.533202     -0.628854      -56.5871       56.5871       1128.78       1185.37    
  20  0.143416      -1.94201      -174.751       174.751       1143.67       1318.42    
  21  0.687081     -0.375303      -33.7714       33.7714       1106.41       1140.18    
  22  0.546247     -0.604685      -54.4122       54.4122       1124.44       1178.86    
  23  0.356987      -1.03006      -92.6891       92.6891       1139.30       1231.99    
  24  0.545718     -0.605653      -54.4994       54.4994       1058.50       1113.00    
  25  0.789688     -0.236117      -21.2468       21.2468       1074.82       1096.07    
  26  0.752086     -0.284904      -25.6370       25.6370       1051.91       1077.55    
  27  0.388816     -0.944650      -85.0038       85.0038       1166.27       1251.27    
  28  0.988428     -0.116395E-01  -1.04738       1.04738       1185.18       1186.23    
  29  0.124991      -2.07952      -187.124       187.124       1071.52       1258.65    
  30  0.568214     -0.565257      -50.8644       50.8644       1173.33       1224.20    
  31  0.551032     -0.595962      -53.6273       53.6273       1129.28       1182.91    
  32  0.423622     -0.858913      -77.2889       77.2889       1174.18       1251.47    
  33  0.647554     -0.434553      -39.1030       39.1030       1034.31       1073.42    
  34  0.686255     -0.376506      -33.8797       33.8797       1159.55       1193.43    
  35  0.548072     -0.601349      -54.1121       54.1121       1187.05       1241.17    
  36  0.880777     -0.126951      -11.4236       11.4236       1131.18       1142.60    
  37  0.894918     -0.111023      -9.99033       9.99033       1210.89       1220.88    
  38  0.241077      -1.42264      -128.015       128.015       1140.92       1268.93    
  39  0.546141     -0.604877      -54.4296       54.4296       1053.10       1107.53    
  40  0.266590      -1.32204      -118.963       118.963       1053.15       1172.12    
  41  0.575085     -0.553238      -49.7828       49.7828       1144.36       1194.14    
  42  0.907139     -0.974596E-01  -8.76985       8.76985       1029.43       1038.20    
  43  0.469109     -0.756920      -68.1111       68.1111       1237.79       1305.90    
  44  0.738008     -0.303801      -27.3374       27.3374       1093.40       1120.74    
  45  0.557598     -0.584116      -52.5614       52.5614       1222.10       1274.66    
  46  0.305677      -1.18523      -106.652       106.652       1182.78       1289.43    
  47  0.392927     -0.934131      -84.0573       84.0573       1175.75       1259.81    
  48  0.121997      -2.10376      -189.305       189.305       1185.57       1374.87    
  49  0.712082     -0.339563      -30.5554       30.5554       1220.24       1250.79    
  50  0.342132      -1.07256      -96.5135       96.5135       1300.13       1396.64    
  51  0.288307      -1.24373      -111.916       111.916       1167.35       1279.26    
  52  0.554777     -0.589188      -53.0178       53.0178       1105.28       1158.30    
  53  0.116597E-01  -4.45161      -400.576       400.576       1095.98       1496.56    
loop,thermsimp(1:2)       78   5.38770       89.9040    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187       1088.88          0.85          1.15         21.82          0.00          0.05         23.88
Just calling func    0   0         23.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1088.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       78
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       79
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      186     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -238.165       238.165       1004.20       1242.37    
   2  0.952063     -0.491245E-01  -4.42044       4.42044       983.679       988.100    
   3  0.207928      -1.57057      -141.327       141.327       997.671       1139.00    
   4  0.564009     -0.572686      -51.5328       51.5328       1029.43       1080.96    
   5  0.461636     -0.772979      -69.5561       69.5561       1024.24       1093.80    
   6  0.683812     -0.380072      -34.2005       34.2005       1015.46       1049.66    
   7  0.153569      -1.87360      -168.595       168.595       993.949       1162.54    
   8  0.605650     -0.501453      -45.1230       45.1230       1034.31       1079.44    
   9  0.257296      -1.35753      -122.157       122.157       1036.72       1158.88    
  10  0.517987     -0.657805      -59.1922       59.1922       1051.91       1111.10    
  11  0.571129     -0.560140      -50.4040       50.4040       1053.75       1104.15    
  12  0.735134     -0.307703      -27.6885       27.6885       1064.83       1092.52    
  13  0.766340E-02  -4.87130      -438.341       438.341       1007.03       1445.37    
  14  0.435932     -0.830269      -74.7113       74.7113       1041.31       1116.02    
  15  0.513945     -0.665639      -59.8972       59.8972       1074.82       1134.72    
  16  0.447046     -0.805095      -72.4460       72.4460       1007.29       1079.74    
  17  0.244813      -1.40726      -126.631       126.631       1053.10       1179.73    
  18  0.183933      -1.69318      -152.360       152.360       1058.50       1210.86    
  19  0.413164     -0.883910      -79.5382       79.5382       1093.40       1172.94    
  20  0.869613     -0.139707      -12.5715       12.5715       1106.41       1118.98    
  21  0.853260     -0.158691      -14.2797       14.2797       1131.18       1145.46    
  22  0.138067      -1.98001      -178.170       178.170       1039.96       1218.13    
  23  0.940528     -0.613134E-01  -5.51725       5.51725       1105.28       1110.80    
  24  0.694939     -0.363931      -32.7482       32.7482       1053.15       1085.90    
  25  0.962776     -0.379346E-01  -3.41353       3.41353       1124.44       1127.86    
  26  0.378266     -0.972158      -87.4792       87.4792       1031.63       1119.11    
  27  0.855922     -0.155576      -13.9994       13.9994       1129.28       1143.28    
  28  0.393452     -0.932797      -83.9372       83.9372       1128.78       1212.72    
  29  0.253590      -1.37204      -123.462       123.462       1185.18       1308.64    
  30  0.777948     -0.251096      -22.5947       22.5947       1159.55       1182.14    
  31  0.654890     -0.423288      -38.0894       38.0894       1144.36       1182.45    
  32  0.690016E-01  -2.67363      -240.585       240.585       1049.34       1289.93    
  33  0.101034      -2.29229      -206.271       206.271       1210.89       1417.16    
  34  0.684533     -0.379019      -34.1058       34.1058       1173.33       1207.44    
  35  0.592603     -0.523230      -47.0826       47.0826       1139.30       1186.38    
  36  0.904830     -0.100009      -8.99922       8.99922       1187.05       1196.05    
  37  0.400244     -0.915681      -82.3970       82.3970       1220.24       1302.64    
  38  0.698191     -0.359263      -32.3281       32.3281       1166.27       1198.59    
  39  0.551449E-01  -2.89779      -260.756       260.756       1081.09       1341.85    
  40  0.500493     -0.692161      -62.2837       62.2837       1174.18       1236.46    
  41  0.289592      -1.23928      -111.516       111.516       1071.52       1183.04    
  42  0.447163     -0.804833      -72.4225       72.4225       1175.75       1248.17    
  43  0.690940     -0.369702      -33.2674       33.2674       1140.92       1174.19    
  44  0.631068     -0.460341      -41.4236       41.4236       1222.10       1263.53    
  45  0.926041     -0.768363E-01  -6.91407       6.91407       1167.35       1174.26    
  46  0.436187     -0.829684      -74.6587       74.6587       1182.78       1257.44    
  47  0.314139      -1.15792      -104.195       104.195       1237.79       1341.98    
  48  0.363110      -1.01305      -91.1588       91.1588       1143.67       1234.83    
  49  0.446982     -0.805238      -72.4589       72.4589       1185.57       1258.03    
  50  0.541529     -0.613360      -55.1928       55.1928       1300.13       1355.32    
  51  0.415529     -0.878202      -79.0245       79.0245       1024.69       1103.71    
  52  0.559792     -0.580190      -52.2081       52.2081       1106.52       1158.73    
  53  0.931332     -0.711389E-01  -6.40140       6.40140       1088.88       1095.28    
loop,thermsimp(1:2)       79   238.165       4.42044    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188       1139.63          0.84          1.14         21.91          0.01          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1139.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       79
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       80
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      187     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -36.2486       36.2486       983.679       1019.93    
   2  0.238500      -1.43339      -128.983       128.983       1015.46       1144.44    
   3  0.689211     -0.372208      -33.4930       33.4930       1034.31       1067.81    
   4  0.540774     -0.614753      -55.3182       55.3182       1007.29       1062.61    
   5  0.178857      -1.72117      -154.879       154.879       1029.43       1184.31    
   6  0.884253     -0.123012      -11.0692       11.0692       1053.15       1064.22    
   7  0.755546     -0.280314      -25.2239       25.2239       1064.83       1090.05    
   8  0.654086E-01  -2.72710      -245.397       245.397       1024.24       1269.64    
   9  0.802958     -0.219452      -19.7473       19.7473       1088.88       1108.62    
  10  0.840665     -0.173562      -15.6178       15.6178       1024.69       1040.31    
  11  0.864930     -0.145107      -13.0573       13.0573       1053.75       1066.81    
  12  0.728243     -0.317120      -28.5359       28.5359       1105.28       1133.81    
  13  0.453086     -0.791672      -71.2382       71.2382       1051.91       1123.15    
  14  0.702549E-01  -2.65563      -238.965       238.965       1041.31       1280.27    
  15  0.610595     -0.493321      -44.3913       44.3913       1106.41       1150.80    
  16  0.728410E-02  -4.92206      -442.909       442.909       1031.63       1474.54    
  17  0.913763     -0.901841E-01  -8.11517       8.11517       1124.44       1132.56    
  18  0.165001      -1.80180      -162.134       162.134       1074.82       1236.96    
  19  0.917747E-01  -2.38842      -214.921       214.921       997.671       1212.59    
  20  0.338507      -1.08321      -97.4722       97.4722       1129.28       1226.75    
  21  0.357666      -1.02815      -92.5180       92.5180       1131.18       1223.69    
  22  0.389441     -0.943044      -84.8593       84.8593       1106.52       1191.38    
  23  0.879897     -0.127950      -11.5135       11.5135       1036.72       1048.23    
  24  0.418897     -0.870129      -78.2981       78.2981       993.949       1072.25    
  25  0.838426     -0.176230      -15.8579       15.8579       1093.40       1109.26    
  26  0.185169      -1.68649      -151.757       151.757       1140.92       1292.68    
  27  0.200952      -1.60469      -144.397       144.397       1167.35       1311.74    
  28  0.877256     -0.130957      -11.7841       11.7841       1053.10       1064.88    
  29  0.386592     -0.950385      -85.5199       85.5199       1159.55       1245.07    
  30  0.888706     -0.117988      -10.6171       10.6171       1144.36       1154.98    
  31  0.105408      -2.24991      -202.457       202.457       1071.52       1273.98    
  32  0.994268     -0.574873E-02 -0.517297      0.517297       1139.30       1139.81    
  33  0.764077     -0.269087      -24.2136       24.2136       1187.05       1211.27    
  34  0.812108     -0.208121      -18.7277       18.7277       1166.27       1184.99    
  35  0.121669      -2.10645      -189.548       189.548       1173.33       1362.88    
  36  0.637909     -0.449559      -40.4533       40.4533       1058.50       1098.95    
  37  0.316007E-02  -5.75716      -518.055       518.055       1128.78       1646.84    
  38  0.229677      -1.47108      -132.375       132.375       1039.96       1172.34    
  39  0.521374     -0.651288      -58.6058       58.6058       1143.67       1202.28    
  40  0.391402     -0.938019      -84.4072       84.4072       1174.18       1258.59    
  41  0.327357      -1.11670      -100.486       100.486       1004.20       1104.69    
  42  0.963139     -0.375576E-01  -3.37960       3.37960       1175.75       1179.13    
  43  0.174261      -1.74720      -157.221       157.221       1182.78       1340.00    
  44  0.331602      -1.10382      -99.3266       99.3266       1185.57       1284.89    
  45  0.526338     -0.641812      -57.7532       57.7532       1222.10       1279.86    
  46  0.413265     -0.883667      -79.5163       79.5163       1049.34       1128.86    
  47  0.541510E-02  -5.21856      -469.590       469.590       1220.24       1689.83    
  48  0.781613     -0.246396      -22.1718       22.1718       1185.18       1207.35    
  49  0.656825     -0.420337      -37.8238       37.8238       1081.09       1118.92    
  50  0.584791     -0.536501      -48.2768       48.2768       1237.79       1286.07    
  51  0.811204     -0.209236      -18.8280       18.8280       1300.13       1318.96    
  52  0.421027     -0.865059      -77.8419       77.8419       1210.89       1288.73    
  53  0.663739     -0.409866      -36.8816       36.8816       1139.63       1176.51    
loop,thermsimp(1:2)       80   36.2486       128.983    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189        996.40          0.85          1.14         21.84          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    190       1182.88          0.85          1.14         21.84          0.00          0.05         23.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    996.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       80
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       81
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      189     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -117.812       117.812       983.679       1101.49    
   2  0.879265     -0.128669      -11.5782       11.5782       1024.69       1036.27    
   3  0.684902     -0.378479      -34.0572       34.0572       1036.72       1070.78    
   4  0.893896     -0.112166      -10.0932       10.0932       1007.29       1017.39    
   5  0.476761     -0.740739      -66.6551       66.6551       1053.15       1119.81    
   6  0.755167     -0.280817      -25.2691       25.2691       1053.10       1078.37    
   7  0.452407     -0.793173      -71.3732       71.3732       1053.75       1125.12    
   8  0.723906     -0.323093      -29.0734       29.0734       1034.31       1063.39    
   9  0.451260     -0.795711      -71.6017       71.6017       993.949       1065.55    
  10  0.668265     -0.403071      -36.2701       36.2701       1064.83       1101.10    
  11  0.777249     -0.251995      -22.6756       22.6756       1058.50       1081.17    
  12  0.342240      -1.07224      -96.4854       96.4854       1004.20       1100.69    
  13  0.639156     -0.447606      -40.2776       40.2776       1088.88       1129.15    
  14  0.166924      -1.79022      -161.092       161.092       1093.40       1254.49    
  15  0.375260     -0.980137      -88.1972       88.1972       1081.09       1169.29    
  16  0.299730      -1.20487      -108.420       108.420       1051.91       1160.33    
  17  0.407119     -0.898650      -80.8646       80.8646       1049.34       1130.21    
  18  0.762992E-01  -2.57309      -231.538       231.538       1124.44       1355.98    
  19  0.281066      -1.26917      -114.205       114.205       1105.28       1219.48    
  20  0.220512      -1.51180      -136.039       136.039       1139.30       1275.33    
  21  0.389846     -0.942004      -84.7658       84.7658       1015.46       1100.23    
  22  0.660048     -0.415443      -37.3834       37.3834       1106.41       1143.79    
  23  0.150026      -1.89695      -170.696       170.696       1144.36       1315.06    
  24  0.113767      -2.17360      -195.590       195.590       1039.96       1235.55    
  25  0.810589     -0.209994      -18.8962       18.8962       1139.63       1158.52    
  26  0.247911      -1.39468      -125.500       125.500       1175.75       1301.25    
  27  0.408875     -0.894345      -80.4772       80.4772       1029.43       1109.91    
  28  0.310528      -1.16948      -105.235       105.235       1166.27       1271.50    
  29  0.663027     -0.410939      -36.9782       36.9782       1106.52       1143.50    
  30  0.798362     -0.225193      -20.2639       20.2639       1143.67       1163.94    
  31  0.564885     -0.571133      -51.3931       51.3931       1185.18       1236.57    
  32  0.473510E-02  -5.35275      -481.665       481.665       1187.05       1668.72    
  33  0.933475E-01  -2.37143      -213.392       213.392       997.671       1211.06    
  34  0.931702     -0.707423E-01  -6.36571       6.36571       1131.18       1137.54    
  35  0.341741      -1.07370      -96.6167       96.6167       1129.28       1225.90    
  36  0.171330      -1.76417      -158.747       158.747       1074.82       1233.57    
  37  0.355860      -1.03322      -92.9736       92.9736       1159.55       1252.52    
  38  0.469639     -0.755790      -68.0094       68.0094       1174.18       1242.19    
  39  0.805376     -0.216446      -19.4768       19.4768       1024.24       1043.72    
  40  0.651615     -0.428301      -38.5405       38.5405       1071.52       1110.06    
  41  0.126831      -2.06490      -185.809       185.809       1222.10       1407.91    
  42  0.715737     -0.334442      -30.0946       30.0946       1041.31       1071.40    
  43  0.444007     -0.811915      -73.0597       73.0597       1185.57       1258.63    
  44  0.887105     -0.119791      -10.7794       10.7794       1237.79       1248.57    
  45  0.492139     -0.708993      -63.7984       63.7984       1210.89       1274.69    
  46  0.590315     -0.527098      -47.4307       47.4307       1140.92       1188.35    
  47  0.313130      -1.16114      -104.484       104.484       1167.35       1271.83    
  48  0.824070     -0.193500      -17.4120       17.4120       1300.13       1317.54    
  49  0.785026     -0.242039      -21.7798       21.7798       1182.78       1204.56    
  50  0.105781      -2.24638      -202.139       202.139       1173.33       1375.47    
  51  0.644933     -0.438608      -39.4679       39.4679       1031.63       1071.09    
  52  0.656932     -0.420175      -37.8093       37.8093       1128.78       1166.59    
  53  0.418239     -0.871703      -78.4398       78.4398       996.403       1074.84    
loop,thermsimp(1:2)       81   117.812       11.5782    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191       1051.03          0.83          1.14         21.95          0.00          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    192       1092.45          0.85          1.14         21.94          0.00          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1051.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       81
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       82
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      191     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -390.775       390.775       1007.29       1398.07    
   2  0.906957E-01  -2.40025      -215.985       215.985       1024.69       1240.67    
   3  0.973677     -0.266758E-01  -2.40041       2.40041       1024.24       1026.64    
   4  0.764409     -0.268653      -24.1746       24.1746       1034.31       1058.49    
   5  0.647718     -0.434300      -39.0803       39.0803       993.949       1033.03    
   6  0.450945     -0.796410      -71.6645       71.6645       1036.72       1108.38    
   7  0.342138      -1.07254      -96.5120       96.5120       1031.63       1128.14    
   8  0.491560     -0.710170      -63.9043       63.9043       1041.31       1105.21    
   9  0.728901     -0.316218      -28.4547       28.4547       996.403       1024.86    
  10  0.361124      -1.01853      -91.6523       91.6523       1053.10       1144.75    
  11  0.187026      -1.67651      -150.860       150.860       1058.50       1209.36    
  12  0.560514     -0.578901      -52.0921       52.0921       1015.46       1067.55    
  13  0.218776      -1.51971      -136.750       136.750       1004.20       1140.95    
  14  0.109271      -2.21392      -199.218       199.218       1064.83       1264.05    
  15  0.263420E-01  -3.63659      -327.237       327.237       983.679       1310.92    
  16  0.654642     -0.423667      -38.1235       38.1235       1029.43       1067.56    
  17  0.975959     -0.243343E-01  -2.18971       2.18971       1071.52       1073.71    
  18  0.107212      -2.23295      -200.931       200.931       1053.15       1254.08    
  19  0.972340     -0.280494E-01  -2.52401       2.52401       1053.75       1056.27    
  20  0.259158      -1.35032      -121.508       121.508       1088.88       1210.38    
  21  0.889970     -0.116568      -10.4893       10.4893       1049.34       1059.83    
  22  0.956672     -0.442943E-01  -3.98580       3.98580       1131.18       1135.16    
  23  0.299261      -1.20644      -108.561       108.561       1106.52       1215.08    
  24  0.114836      -2.16425      -194.749       194.749       1106.41       1301.16    
  25  0.728848     -0.316291      -28.4613       28.4613       1139.63       1168.09    
  26  0.650336     -0.430267      -38.7173       38.7173       1051.91       1090.63    
  27  0.816983     -0.202137      -18.1892       18.1892       1143.67       1161.86    
  28  0.507860     -0.677550      -60.9690       60.9690       1128.78       1189.75    
  29  0.920661     -0.826634E-01  -7.43842       7.43842       1081.09       1088.53    
  30  0.253772      -1.37132      -123.398       123.398       1140.92       1264.32    
  31  0.667512     -0.404198      -36.3715       36.3715       1182.78       1219.15    
  32  0.772715     -0.257844      -23.2020       23.2020       997.671       1020.87    
  33  0.757620     -0.277573      -24.9773       24.9773       1105.28       1130.26    
  34  0.776421     -0.253060      -22.7715       22.7715       1129.28       1152.05    
  35  0.886642     -0.120314      -10.8264       10.8264       1074.82       1085.65    
  36  0.238693E-01  -3.73516      -336.107       336.107       1039.96       1376.07    
  37  0.303957      -1.19087      -107.160       107.160       1185.18       1292.34    
  38  0.875267     -0.133226      -11.9883       11.9883       1174.18       1186.17    
  39  0.144246      -1.93624      -174.231       174.231       1237.79       1412.02    
  40  0.993963     -0.605564E-02 -0.544914      0.544914       1159.55       1160.09    
  41  0.172168      -1.75928      -158.308       158.308       1093.40       1251.71    
  42  0.979713     -0.204952E-01  -1.84425       1.84425       1185.57       1187.41    
  43  0.938694     -0.632658E-01  -5.69294       5.69294       1166.27       1171.96    
  44  0.716061     -0.333990      -30.0539       30.0539       1167.35       1197.40    
  45  0.764601     -0.268402      -24.1520       24.1520       1210.89       1235.04    
  46  0.546951     -0.603396      -54.2963       54.2963       1139.30       1193.59    
  47  0.104442      -2.25912      -203.286       203.286       1175.75       1379.04    
  48  0.669980     -0.400508      -36.0395       36.0395       1144.36       1180.40    
  49  0.255048      -1.36630      -122.946       122.946       1300.13       1423.08    
  50  0.761153     -0.272921      -24.5586       24.5586       1124.44       1149.00    
  51  0.273269      -1.29730      -116.737       116.737       1173.33       1290.07    
  52  0.789047E-01  -2.53951      -228.517       228.517       1222.10       1450.62    
  53  0.723703     -0.323374      -29.0987       29.0987       1051.03       1080.13    
loop,thermsimp(1:2)       82   390.775       215.985    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193       1163.17          0.85          1.15         21.88          0.01          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1163.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       82
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       83
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      192     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -44.6068       44.6068       997.671       1042.28    
   2  0.266275      -1.32323      -119.070       119.070       996.403       1115.47    
   3  0.545538     -0.605984      -54.5291       54.5291       1024.24       1078.77    
   4  0.196234      -1.62845      -146.535       146.535       993.949       1140.48    
   5  0.786411     -0.240275      -21.6211       21.6211       1053.75       1075.37    
   6  0.453912     -0.789853      -71.0745       71.0745       1034.31       1105.39    
   7  0.900549     -0.104751      -9.42594       9.42594       1049.34       1058.77    
   8  0.339919      -1.07905      -97.0975       97.0975       1015.46       1112.56    
   9  0.511643     -0.670128      -60.3011       60.3011       1029.43       1089.73    
  10  0.628202     -0.464894      -41.8332       41.8332       1071.52       1113.36    
  11  0.672886E-01  -2.69876      -242.847       242.847       1051.03       1293.88    
  12  0.518493     -0.656829      -59.1044       59.1044       1074.82       1133.93    
  13  0.994926     -0.508642E-02 -0.457698      0.457698       1081.09       1081.55    
  14  0.733191     -0.310349      -27.9266       27.9266       1051.91       1079.84    
  15  0.952818     -0.483318E-01  -4.34911       4.34911       1041.31       1045.66    
  16  0.735955     -0.306586      -27.5880       27.5880       1036.72       1064.31    
  17  0.743149     -0.296859      -26.7127       26.7127       1031.63       1058.34    
  18  0.549375     -0.598975      -53.8984       53.8984       1105.28       1159.18    
  19  0.355140      -1.03524      -93.1558       93.1558       1131.18       1224.33    
  20  0.482165     -0.729469      -65.6408       65.6408       1004.20       1069.84    
  21  0.577197     -0.549571      -49.4529       49.4529       1053.10       1102.55    
  22  0.107316E-01  -4.53456      -408.040       408.040       1124.44       1532.49    
  23  0.923969     -0.790764E-01  -7.11565       7.11565       1129.28       1136.40    
  24  0.810451     -0.210164      -18.9115       18.9115       1159.55       1178.46    
  25  0.143346      -1.94249      -174.794       174.794       1143.67       1318.47    
  26  0.994184     -0.583318E-02 -0.524896      0.524896       1139.63       1140.15    
  27  0.870737     -0.138415      -12.4552       12.4552       1166.27       1178.72    
  28  0.970691     -0.297469E-01  -2.67676       2.67676       1144.36       1147.04    
  29  0.351269      -1.04620      -94.1421       94.1421       1174.18       1268.32    
  30  0.464982     -0.765756      -68.9061       68.9061       1185.57       1254.47    
  31  0.921785     -0.814432E-01  -7.32862       7.32862       1128.78       1136.11    
  32  0.110512      -2.20263      -198.203       198.203       1139.30       1337.50    
  33  0.261408      -1.34167      -120.730       120.730       1167.35       1288.08    
  34  0.908908     -0.955118E-01  -8.59458       8.59458       1058.50       1067.09    
  35  0.819412     -0.199168      -17.9220       17.9220       1088.88       1106.80    
  36  0.466482     -0.762536      -68.6164       68.6164       1106.52       1175.14    
  37  0.717237     -0.332349      -29.9063       29.9063       1182.78       1212.69    
  38  0.802331     -0.220234      -19.8176       19.8176       1210.89       1230.71    
  39  0.949390     -0.519355E-01  -4.67339       4.67339       1024.69       1029.36    
  40  0.258511      -1.35282      -121.733       121.733       1093.40       1215.13    
  41  0.270423      -1.30777      -117.679       117.679       1053.15       1170.83    
  42  0.366439      -1.00392      -90.3376       90.3376       1064.83       1155.17    
  43  0.934403     -0.678476E-01  -6.10523       6.10523       1140.92       1147.02    
  44  0.956654     -0.443133E-01  -3.98751       3.98751       1173.33       1177.32    
  45  0.377790     -0.973417      -87.5924       87.5924       1185.18       1272.77    
  46  0.203667      -1.59127      -143.190       143.190       1106.41       1249.60    
  47  0.673892     -0.394685      -35.5155       35.5155       983.679       1019.19    
  48  0.347380      -1.05734      -95.1437       95.1437       1039.96       1135.10    
  49  0.144339      -1.93559      -174.173       174.173       1175.75       1349.92    
  50  0.728571     -0.316670      -28.4954       28.4954       1007.29       1035.79    
  51  0.243065      -1.41443      -127.276       127.276       1237.79       1365.07    
  52  0.686711     -0.375841      -33.8199       33.8199       1300.13       1333.95    
  53  0.159440      -1.83609      -165.220       165.220       1163.17       1328.39    
loop,thermsimp(1:2)       83   44.6068       119.070    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194       1020.56          0.85          1.15         22.11          0.00          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    195       1422.05          0.84          1.15         22.00          0.03          0.05         24.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1020.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       83
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       84
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      194     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -50.1682       50.1682       983.679       1033.85    
   2  0.468879     -0.757411      -68.1553       68.1553       1024.69       1092.84    
   3  0.886741E-01  -2.42279      -218.013       218.013       1007.29       1225.31    
   4  0.211783      -1.55219      -139.673       139.673       997.671       1137.34    
   5  0.573306     -0.556336      -50.0616       50.0616       1041.31       1091.37    
   6  0.401711     -0.912021      -82.0678       82.0678       1031.63       1113.69    
   7  0.505706     -0.681800      -61.3514       61.3514       1049.34       1110.70    
   8  0.603045     -0.505763      -45.5109       45.5109       1036.72       1082.23    
   9  0.696575     -0.361580      -32.5366       32.5366       1058.50       1091.03    
  10  0.294614      -1.22209      -109.969       109.969       1004.20       1114.17    
  11  0.527550     -0.639511      -57.5461       57.5461       1053.75       1111.29    
  12  0.657157     -0.419832      -37.7784       37.7784       1024.24       1062.02    
  13  0.627866     -0.465428      -41.8813       41.8813       1051.91       1093.79    
  14  0.993353E-02  -4.61184      -414.994       414.994       1081.09       1496.09    
  15  0.885166E-01  -2.42456      -218.173       218.173       1029.43       1247.61    
  16  0.265764      -1.32515      -119.243       119.243       1053.10       1172.34    
  17  0.446403     -0.806534      -72.5755       72.5755       1034.31       1106.89    
  18  0.287864      -1.24527      -112.055       112.055       1088.88       1200.93    
  19  0.926928E-01  -2.37846      -214.025       214.025       1015.46       1229.48    
  20  0.394849     -0.929252      -83.6183       83.6183       1071.52       1155.14    
  21  0.540746     -0.614805      -55.3229       55.3229       996.403       1051.73    
  22  0.846435     -0.166721      -15.0023       15.0023       1074.82       1089.82    
  23  0.417037     -0.874580      -78.6986       78.6986       1039.96       1118.66    
  24  0.210713      -1.55726      -140.129       140.129       1128.78       1268.91    
  25  0.764669     -0.268312      -24.1439       24.1439       1129.28       1153.42    
  26  0.219471E-01  -3.81912      -343.662       343.662       1139.63       1483.29    
  27  0.200728      -1.60581      -144.498       144.498       993.949       1138.45    
  28  0.572660     -0.557463      -50.1630       50.1630       1140.92       1191.08    
  29  0.599083E-01  -2.81494      -253.301       253.301       1144.36       1397.66    
  30  0.214614      -1.53891      -138.478       138.478       1064.83       1203.31    
  31  0.489389     -0.714598      -64.3027       64.3027       1105.28       1169.58    
  32  0.162616      -1.81636      -163.445       163.445       1053.15       1216.60    
  33  0.710022     -0.342459      -30.8160       30.8160       1106.52       1137.34    
  34  0.753583     -0.282916      -25.4581       25.4581       1173.33       1198.79    
  35  0.743317     -0.296633      -26.6923       26.6923       1159.55       1186.24    
  36  0.155416      -1.86165      -167.520       167.520       1166.27       1333.79    
  37  0.643355     -0.441059      -39.6885       39.6885       1182.78       1222.47    
  38  0.656098     -0.421444      -37.9235       37.9235       1093.40       1131.32    
  39  0.327550      -1.11611      -100.433       100.433       1131.18       1231.61    
  40  0.192244      -1.64899      -148.384       148.384       1210.89       1359.28    
  41  0.433590     -0.835657      -75.1961       75.1961       1106.41       1181.61    
  42  0.788561     -0.237545      -21.3754       21.3754       1185.57       1206.94    
  43  0.978028     -0.222173E-01  -1.99921       1.99921       1174.18       1176.18    
  44  0.110322      -2.20435      -198.358       198.358       1185.18       1383.54    
  45  0.795332     -0.228995      -20.6060       20.6060       1167.35       1187.95    
  46  0.497518E-01  -3.00071      -270.017       270.017       1051.03       1321.05    
  47  0.852459     -0.159631      -14.3643       14.3643       1143.67       1158.04    
  48  0.133240      -2.01560      -181.373       181.373       1163.17       1344.54    
  49  0.671163     -0.398743      -35.8807       35.8807       1300.13       1336.01    
  50  0.245122      -1.40600      -126.518       126.518       1139.30       1265.81    
  51  0.820498     -0.197843      -17.8028       17.8028       1175.75       1193.55    
  52  0.422422     -0.861751      -77.5442       77.5442       1237.79       1315.33    
  53  0.946612E-01  -2.35745      -212.134       212.134       1020.56       1232.70    
loop,thermsimp(1:2)       84   50.1682       68.1553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196       1112.57          0.85          1.15         21.91          0.00          0.04         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    197       2332.47          0.84          1.16         21.84          0.00          0.05         23.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1112.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       84
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       85
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      196     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -145.957       145.957       983.679       1129.64    
   2  0.793097     -0.231809      -20.8592       20.8592       996.403       1017.26    
   3  0.261081      -1.34293      -120.842       120.842       1024.24       1145.08    
   4  0.912198     -0.918984E-01  -8.26943       8.26943       1036.72       1044.99    
   5  0.493539     -0.706153      -63.5428       63.5428       1074.82       1138.36    
   6  0.721001     -0.327115      -29.4352       29.4352       1058.50       1087.93    
   7  0.578790     -0.546816      -49.2050       49.2050       1041.31       1090.51    
   8  0.684127     -0.379612      -34.1592       34.1592       1024.69       1058.85    
   9  0.627712     -0.465674      -41.9034       41.9034       1051.91       1093.81    
  10  0.858540     -0.152522      -13.7246       13.7246       1034.31       1048.04    
  11  0.712254E-01  -2.64191      -237.731       237.731       1049.34       1287.07    
  12  0.927250     -0.755316E-01  -6.79667       6.79667       1053.75       1060.54    
  13  0.458073     -0.780727      -70.2533       70.2533       1031.63       1101.88    
  14  0.940004     -0.618714E-01  -5.56746       5.56746       1004.20       1009.77    
  15  0.322549      -1.13150      -101.818       101.818       1039.96       1141.78    
  16  0.939473     -0.624358E-01  -5.61825       5.61825       1093.40       1099.02    
  17  0.726080     -0.320095      -28.8036       28.8036       1106.52       1135.33    
  18  0.602088E-02  -5.11252      -460.048       460.048       997.671       1457.72    
  19  0.735289     -0.307492      -27.6695       27.6695       993.949       1021.62    
  20  0.847617     -0.165326      -14.8768       14.8768       1129.28       1144.16    
  21  0.747190E-01  -2.59402      -233.422       233.422       1071.52       1304.94    
  22  0.248374      -1.39282      -125.332       125.332       1143.67       1269.00    
  23  0.350184      -1.04930      -94.4203       94.4203       1105.28       1199.70    
  24  0.327739E-03  -8.02329      -721.972       721.972       1053.10       1775.07    
  25  0.130012      -2.04013      -183.580       183.580       1174.18       1357.76    
  26  0.609791     -0.494639      -44.5098       44.5098       1106.41       1150.92    
  27  0.793414     -0.231410      -20.8233       20.8233       1159.55       1180.37    
  28  0.962567     -0.381519E-01  -3.43308       3.43308       1167.35       1170.78    
  29  0.499469     -0.694211      -62.4682       62.4682       1140.92       1203.39    
  30  0.887491     -0.119357      -10.7403       10.7403       1175.75       1186.49    
  31  0.136374      -1.99236      -179.281       179.281       1173.33       1352.61    
  32  0.292356      -1.22978      -110.661       110.661       1088.88       1199.54    
  33  0.301564      -1.19877      -107.871       107.871       1064.83       1172.70    
  34  0.352543      -1.04258      -93.8162       93.8162       1185.57       1279.38    
  35  0.483726     -0.726236      -65.3500       65.3500       1053.15       1118.50    
  36  0.410499     -0.890381      -80.1205       80.1205       1182.78       1262.90    
  37  0.458111     -0.780644      -70.2459       70.2459       1007.29       1077.54    
  38  0.670071     -0.400372      -36.0273       36.0273       1015.46       1051.49    
  39  0.175486      -1.74020      -156.591       156.591       1131.18       1287.77    
  40  0.798907     -0.224511      -20.2025       20.2025       1020.56       1040.77    
  41  0.270487      -1.30753      -117.658       117.658       1029.43       1147.09    
  42  0.480368     -0.733202      -65.9768       65.9768       1139.30       1205.27    
  43  0.658406     -0.417933      -37.6075       37.6075       1128.78       1166.39    
  44  0.937976     -0.640304E-01  -5.76174       5.76174       1237.79       1243.55    
  45  0.710083     -0.342373      -30.8082       30.8082       1051.03       1081.84    
  46  0.567340     -0.566797      -51.0029       51.0029       1166.27       1217.27    
  47  0.201426      -1.60233      -144.185       144.185       1300.13       1444.32    
  48  0.660313     -0.415042      -37.3473       37.3473       1163.17       1200.51    
  49  0.524008     -0.646249      -58.1524       58.1524       1210.89       1269.04    
  50  0.513616     -0.666280      -59.9549       59.9549       1185.18       1245.14    
  51  0.951218     -0.500122E-01  -4.50033       4.50033       1144.36       1148.86    
  52  0.703465     -0.351737      -31.6509       31.6509       1139.63       1171.28    
  53  0.702859     -0.352600      -31.7285       31.7285       1112.57       1144.29    
loop,thermsimp(1:2)       85   145.957       20.8592    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198       1058.79          0.86          1.14         21.86          0.07          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    199       1124.54          0.85          1.12         21.78          0.18          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1058.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       85
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       86
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      198     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -68.9258       68.9258       1004.20       1073.13    
   2  0.948887     -0.524654E-01  -4.72107       4.72107       996.403       1001.12    
   3  0.532332     -0.630488      -56.7341       56.7341       993.949       1050.68    
   4  0.374267     -0.982785      -88.4354       88.4354       1020.56       1109.00    
   5  0.694531     -0.364519      -32.8010       32.8010       1036.72       1069.52    
   6  0.414371     -0.880994      -79.2758       79.2758       1034.31       1113.59    
   7  0.208827E-01  -3.86883      -348.135       348.135       1015.46       1363.59    
   8  0.627187     -0.466511      -41.9787       41.9787       1024.69       1066.67    
   9  0.148799E-01  -4.20774      -378.631       378.631       1053.75       1432.38    
  10  0.809008     -0.211946      -19.0719       19.0719       1007.29       1026.37    
  11  0.647680     -0.434359      -39.0856       39.0856       1051.03       1090.11    
  12  0.289351      -1.24012      -111.591       111.591       1058.50       1170.09    
  13  0.222457      -1.50302      -135.249       135.249       1041.31       1176.56    
  14  0.374268     -0.982782      -88.4352       88.4352       1051.91       1140.34    
  15  0.785765     -0.241097      -21.6950       21.6950       1093.40       1115.10    
  16  0.298051      -1.21049      -108.926       108.926       1031.63       1140.55    
  17  0.725075     -0.321480      -28.9282       28.9282       1053.15       1082.08    
  18  0.386364     -0.950976      -85.5731       85.5731       983.679       1069.25    
  19  0.631686     -0.459363      -41.3355       41.3355       1106.52       1147.86    
  20  0.688282     -0.373557      -33.6144       33.6144       1074.82       1108.44    
  21  0.373817     -0.983990      -88.5438       88.5438       1039.96       1128.50    
  22  0.219845      -1.51483      -136.312       136.312       1129.28       1265.59    
  23  0.926271     -0.765889E-01  -6.89181       6.89181       1112.57       1119.46    
  24  0.618127     -0.481061      -43.2881       43.2881       1024.24       1067.53    
  25  0.176216      -1.73604      -156.217       156.217       1029.43       1185.65    
  26  0.742943     -0.297136      -26.7376       26.7376       1144.36       1171.10    
  27  0.357690      -1.02809      -92.5120       92.5120       1106.41       1198.92    
  28  0.478359     -0.737394      -66.3540       66.3540       1128.78       1195.13    
  29  0.395976     -0.926401      -83.3617       83.3617       1167.35       1250.71    
  30  0.803186     -0.219169      -19.7218       19.7218       1139.63       1159.35    
  31  0.231845      -1.46168      -131.529       131.529       1064.83       1196.36    
  32  0.808968     -0.211996      -19.0764       19.0764       1159.55       1178.62    
  33  0.579217     -0.546078      -49.1385       49.1385       1175.75       1224.89    
  34  0.384357     -0.956183      -86.0417       86.0417       1088.88       1174.92    
  35  0.856367     -0.155057      -13.9527       13.9527       1105.28       1119.23    
  36  0.265661      -1.32553      -119.277       119.277       1163.17       1282.44    
  37  0.288915      -1.24162      -111.727       111.727       1140.92       1252.65    
  38  0.224915      -1.49203      -134.260       134.260       1139.30       1273.56    
  39  0.685944     -0.376959      -33.9205       33.9205       1166.27       1200.19    
  40  0.265936      -1.32450      -119.184       119.184       1237.79       1356.97    
  41  0.412966     -0.884389      -79.5813       79.5813       1185.18       1264.76    
  42  0.440796     -0.819173      -73.7129       73.7129       1182.78       1256.49    
  43  0.572522     -0.557705      -50.1848       50.1848       1143.67       1193.86    
  44  0.798412     -0.225131      -20.2583       20.2583       1210.89       1231.15    
  45  0.127097      -2.06281      -185.620       185.620       1185.57       1371.19    
  46  0.243397      -1.41306      -127.154       127.154       1049.34       1176.50    
  47  0.322195      -1.13260      -101.916       101.916       1131.18       1233.09    
  48  0.512728     -0.668011      -60.1106       60.1106       1071.52       1131.63    
  49  0.786191     -0.240556      -21.6463       21.6463       1173.33       1194.98    
  50  0.733079     -0.310501      -27.9403       27.9403       1174.18       1202.12    
  51  0.601364     -0.508554      -45.7620       45.7620       1300.13       1345.89    
  52  0.348529      -1.05403      -94.8466       94.8466       997.671       1092.52    
  53  0.923986     -0.790584E-01  -7.11403       7.11403       1058.79       1065.90    
loop,thermsimp(1:2)       86   68.9258       4.72107    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200       1142.53          0.86          1.15         21.89          0.00          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1142.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       86
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       87
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      199     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -152.833       152.833       996.403       1149.24    
   2  0.721345     -0.326637      -29.3923       29.3923       1007.29       1036.69    
   3  0.842493     -0.171390      -15.4224       15.4224       993.949       1009.37    
   4  0.260540      -1.34500      -121.029       121.029       1058.79       1179.81    
   5  0.782605     -0.245127      -22.0576       22.0576       1024.69       1046.75    
   6  0.208492      -1.56785      -141.083       141.083       1024.24       1165.32    
   7  0.290568E-01  -3.53850      -318.410       318.410       983.679       1302.09    
   8  0.673682     -0.394997      -35.5436       35.5436       1036.72       1072.26    
   9  0.399393     -0.917808      -82.5885       82.5885       1004.20       1086.79    
  10  0.966971     -0.335863E-01  -3.02225       3.02225       1053.15       1056.18    
  11  0.390645     -0.939956      -84.5815       84.5815       1051.03       1135.61    
  12  0.259548      -1.34881      -121.372       121.372       997.671       1119.04    
  13  0.260765      -1.34413      -120.951       120.951       1074.82       1195.77    
  14  0.110601E-01  -4.50441      -405.327       405.327       1020.56       1425.89    
  15  0.727710     -0.317852      -28.6018       28.6018       1034.31       1062.92    
  16  0.717076     -0.332574      -29.9265       29.9265       1093.40       1123.33    
  17  0.612129     -0.490811      -44.1654       44.1654       1105.28       1149.44    
  18  0.589376     -0.528691      -47.5740       47.5740       1112.57       1160.14    
  19  0.541615     -0.613199      -55.1784       55.1784       1039.96       1095.14    
  20  0.330403      -1.10744      -99.6525       99.6525       1071.52       1171.17    
  21  0.229530      -1.47172      -132.432       132.432       1051.91       1184.34    
  22  0.564010     -0.572684      -51.5327       51.5327       1031.63       1083.16    
  23  0.454226     -0.789161      -71.0122       71.0122       1106.52       1177.53    
  24  0.579528     -0.545541      -49.0902       49.0902       1139.63       1188.72    
  25  0.245500      -1.40446      -126.379       126.379       1058.50       1184.88    
  26  0.708019     -0.345284      -31.0702       31.0702       1144.36       1175.43    
  27  0.300215      -1.20326      -108.275       108.275       1088.88       1197.15    
  28  0.721461     -0.326478      -29.3779       29.3779       1049.34       1078.72    
  29  0.326772      -1.11849      -100.647       100.647       1041.31       1141.96    
  30  0.580879     -0.543212      -48.8807       48.8807       1159.55       1208.43    
  31  0.963075     -0.376241E-01  -3.38559       3.38559       1029.43       1032.82    
  32  0.656935     -0.420170      -37.8087       37.8087       1143.67       1181.48    
  33  0.908335     -0.961416E-01  -8.65125       8.65125       1173.33       1181.98    
  34  0.765938     -0.266654      -23.9948       23.9948       1128.78       1152.78    
  35  0.497301     -0.698561      -62.8596       62.8596       1064.83       1127.69    
  36  0.833603     -0.181997      -16.3769       16.3769       1106.41       1122.79    
  37  0.433057     -0.836886      -75.3067       75.3067       1166.27       1241.57    
  38  0.349547      -1.05112      -94.5842       94.5842       1174.18       1268.76    
  39  0.142838      -1.94604      -175.114       175.114       1175.75       1350.86    
  40  0.326780      -1.11847      -100.645       100.645       1210.89       1311.54    
  41  0.707709     -0.345723      -31.1097       31.1097       1131.18       1162.29    
  42  0.914339     -0.895538E-01  -8.05845       8.05845       1167.35       1175.41    
  43  0.392800     -0.934454      -84.0863       84.0863       1140.92       1225.01    
  44  0.434772     -0.832933      -74.9511       74.9511       1182.78       1257.73    
  45  0.229545      -1.47165      -132.426       132.426       1185.18       1317.61    
  46  0.661281     -0.413577      -37.2155       37.2155       1129.28       1166.50    
  47  0.459966     -0.776602      -69.8822       69.8822       1139.30       1209.18    
  48  0.352439      -1.04288      -93.8427       93.8427       1163.17       1257.01    
  49  0.490345     -0.712647      -64.1271       64.1271       1300.13       1364.26    
  50  0.837788     -0.176990      -15.9264       15.9264       1237.79       1253.72    
  51  0.247493      -1.39637      -125.652       125.652       1015.46       1141.11    
  52  0.221382      -1.50787      -135.685       135.685       1185.57       1321.25    
  53  0.374412     -0.982399      -88.4007       88.4007       1142.53       1230.93    
loop,thermsimp(1:2)       87   152.833       29.3923    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201       1122.64          0.85          1.14         22.18          0.01          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202       1470.24          0.86          1.14         21.90          0.00          0.04         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    1122.6        1.040     -2.057      3.502     -102.6      1.200    
                      0.9190      1.143     -99.70      3.665     0.6455    

                       2.040     -2.223      1.540      7000.      7000.    

                      -1.864      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.032     -4.607     -9.129      7.078    

                      -14.42     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1017E-01 0.2954     0.3177E-01 0.1952    

                     -0.2486    -0.4130     0.1836     0.1246     0.1357    



                     -0.3889    -0.5690      0.000     0.1252    -0.7153E-01

                     -0.1064E-01 0.1873    -0.7116    -0.1125     0.3137    

                      0.6152E-01 0.4569E-01-0.6469     -1.343      7000.    



                      -1.288     -1.221     -2.142     -1.982    -0.3807    

                     -0.3252      9.265      8.761    -0.1672E+05 -6.000    

                     -0.2816     -2.245      9.374      8.866    -0.1969E+05



                      -6.000     0.7206    -0.2290      8.879      9.114    

                     -0.1944E+05 -6.000    -0.5997    -0.4981      9.081    

                       8.836    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1122.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       87
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       88
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      201     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -136.174       136.174       993.949       1130.12    
   2  0.246752E-01  -3.70196      -333.119       333.119       1029.43       1362.55    
   3  0.679039     -0.387076      -34.8309       34.8309       1007.29       1042.13    
   4  0.709027     -0.343862      -30.9422       30.9422       1024.69       1055.63    
   5  0.577754     -0.548608      -49.3662       49.3662       1053.15       1102.52    
   6  0.738694     -0.302871      -27.2537       27.2537       1034.31       1061.57    
   7  0.181723      -1.70527      -153.448       153.448       1036.72       1190.17    
   8  0.103748      -2.26579      -203.886       203.886       1049.34       1253.23    
   9  0.456811E-02  -5.38866      -484.895       484.895       1031.63       1516.52    
  10  0.303247      -1.19321      -107.370       107.370       1004.20       1111.57    
  11  0.284736      -1.25619      -113.038       113.038       1039.96       1153.00    
  12  0.900494     -0.104812      -9.43145       9.43145       997.671       1007.10    
  13  0.691792     -0.368470      -33.1566       33.1566       1106.41       1139.57    
  14  0.502714     -0.687735      -61.8854       61.8854       1093.40       1155.29    
  15  0.305219      -1.18673      -106.787       106.787       1064.83       1171.62    
  16  0.412005     -0.886720      -79.7911       79.7911       1051.03       1130.82    
  17  0.412225     -0.886186      -79.7429       79.7429       1015.46       1095.20    
  18  0.121697      -2.10622      -189.527       189.527       1041.31       1230.84    
  19  0.465374     -0.764915      -68.8304       68.8304       996.403       1065.23    
  20  0.273016      -1.29823      -116.820       116.820       1105.28       1222.10    
  21  0.502763     -0.687636      -61.8766       61.8766       1128.78       1190.66    
  22  0.516442     -0.660793      -59.4611       59.4611       1112.57       1172.03    
  23  0.554333     -0.589990      -53.0900       53.0900       1131.18       1184.27    
  24  0.192397E-01  -3.95078      -355.509       355.509       1024.24       1379.75    
  25  0.451279E-01  -3.09825      -278.795       278.795       1129.28       1408.08    
  26  0.457340     -0.782327      -70.3973       70.3973       1071.52       1141.92    
  27  0.325184      -1.12336      -101.085       101.085       1167.35       1268.43    
  28  0.700952     -0.355315      -31.9729       31.9729       1144.36       1176.33    
  29  0.961087     -0.396906E-01  -3.57154       3.57154       1106.52       1110.09    
  30  0.195966E-02  -6.23498      -561.052       561.052       1058.79       1619.84    
  31  0.766376     -0.266082      -23.9433       23.9433       1143.67       1167.62    
  32  0.398846     -0.919180      -82.7119       82.7119       1173.33       1256.04    
  33  0.675249     -0.392674      -35.3346       35.3346       1051.91       1087.24    
  34  0.189468      -1.66354      -149.693       149.693       1058.50       1208.19    
  35  0.444608     -0.810562      -72.9380       72.9380       1139.63       1212.56    
  36  0.514006     -0.665520      -59.8865       59.8865       1074.82       1134.71    
  37  0.575199     -0.553039      -49.7649       49.7649       1088.88       1138.64    
  38  0.121449      -2.10826      -189.711       189.711       1159.55       1349.26    
  39  0.209130      -1.56480      -140.808       140.808       1139.30       1280.10    
  40  0.466284E-01  -3.06555      -275.852       275.852       1140.92       1416.77    
  41  0.386630E-01  -3.25287      -292.708       292.708       1142.53       1435.24    
  42  0.335751E-01  -3.39397      -305.405       305.405       1166.27       1471.67    
  43  0.878126     -0.129965      -11.6949       11.6949       1237.79       1249.48    
  44  0.652938     -0.426273      -38.3579       38.3579       1163.17       1201.52    
  45  0.932456E-01  -2.37252      -213.490       213.490       1182.78       1396.27    
  46  0.662683     -0.411458      -37.0249       37.0249       1174.18       1211.21    
  47  0.204704      -1.58619      -142.733       142.733       983.679       1126.41    
  48  0.985446     -0.146609E-01  -1.31926       1.31926       1210.89       1212.21    
  49  0.105847      -2.24576      -202.084       202.084       1185.18       1387.27    
  50  0.843201     -0.170550      -15.3468       15.3468       1185.57       1200.91    
  51  0.364087      -1.01036      -90.9170       90.9170       1175.75       1266.67    
  52  0.650651E-01  -2.73237      -245.871       245.871       1300.13       1546.00    
  53  0.968103     -0.324171E-01  -2.91703       2.91703       1122.64       1125.56    
loop,thermsimp(1:2)       88   136.174       333.119    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203       1058.01          0.84          1.15         21.93          0.00          0.05         23.97
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    204       1129.58          0.84          1.16         21.93          0.01          0.05         23.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1058.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       88
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       89
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      203     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -11.8349       11.8349       997.671       1009.51    
   2  0.765270     -0.267527      -24.0733       24.0733       1007.29       1031.37    
   3  0.215687      -1.53393      -138.030       138.030       1024.69       1162.72    
   4  0.999601E-01  -2.30298      -207.233       207.233       1034.31       1241.55    
   5  0.706519     -0.347405      -31.2610       31.2610       996.403       1027.66    
   6  0.201358      -1.60267      -144.216       144.216       1051.91       1196.12    
   7  0.450677     -0.797005      -71.7181       71.7181       1015.46       1087.18    
   8  0.897557     -0.108078      -9.72538       9.72538       1053.15       1062.88    
   9  0.161166      -1.82532      -164.250       164.250       1106.52       1270.77    
  10  0.972556E-01  -2.33041      -209.701       209.701       1004.20       1213.90    
  11  0.742112     -0.298255      -26.8383       26.8383       1122.64       1149.48    
  12  0.172377      -1.75807      -158.199       158.199       983.679       1141.88    
  13  0.658751     -0.417410      -37.5604       37.5604       993.949       1031.51    
  14  0.725340     -0.321114      -28.8953       28.8953       1051.03       1079.92    
  15  0.501488     -0.690175      -62.1050       62.1050       1074.82       1136.93    
  16  0.845372     -0.167978      -15.1155       15.1155       1088.88       1103.99    
  17  0.132369      -2.02216      -181.963       181.963       1106.41       1288.37    
  18  0.734515E-01  -2.61113      -234.961       234.961       1071.52       1306.48    
  19  0.391205     -0.938523      -84.4525       84.4525       1039.96       1124.41    
  20  0.376983     -0.975555      -87.7848       87.7848       1093.40       1181.19    
  21  0.315463      -1.15371      -103.816       103.816       1143.67       1247.49    
  22  0.267113      -1.32008      -118.787       118.787       1064.83       1183.62    
  23  0.965292     -0.353243E-01  -3.17864       3.17864       1112.57       1115.74    
  24  0.954592     -0.464714E-01  -4.18171       4.18171       1144.36       1148.54    
  25  0.992414     -0.761515E-02 -0.685245      0.685245       1131.18       1131.86    
  26  0.867953E-02  -4.74679      -427.137       427.137       1036.72       1463.86    
  27  0.829585     -0.186829      -16.8117       16.8117       1128.78       1145.59    
  28  0.349695      -1.05069      -94.5462       94.5462       1185.57       1280.11    
  29  0.673511     -0.395251      -35.5665       35.5665       1163.17       1198.73    
  30  0.340696      -1.07676      -96.8921       96.8921       1058.50       1155.39    
  31  0.558731     -0.582087      -52.3788       52.3788       1174.18       1226.56    
  32  0.747295     -0.291295      -26.2120       26.2120       1210.89       1237.10    
  33  0.123287      -2.09324      -188.359       188.359       1139.63       1327.99    
  34  0.355051      -1.03549      -93.1783       93.1783       1105.28       1198.46    
  35  0.511895     -0.669636      -60.2568       60.2568       1041.31       1101.57    
  36  0.571856E-01  -2.86145      -257.486       257.486       1237.79       1495.27    
  37  0.507517     -0.678226      -61.0298       61.0298       1049.34       1110.37    
  38  0.326770      -1.11850      -100.647       100.647       1173.33       1273.98    
  39  0.736001     -0.306523      -27.5823       27.5823       1175.75       1203.33    
  40  0.970046     -0.304120E-01  -2.73661       2.73661       1167.35       1170.08    
  41  0.673510     -0.395253      -35.5666       35.5666       1139.30       1174.86    
  42  0.335032      -1.09353      -98.4007       98.4007       1159.55       1257.95    
  43  0.872321E-01  -2.43918      -219.489       219.489       1029.43       1248.92    
  44  0.749956     -0.287741      -25.8922       25.8922       1024.24       1050.13    
  45  0.159001      -1.83884      -165.467       165.467       1185.18       1350.65    
  46  0.529687     -0.635468      -57.1823       57.1823       1182.78       1239.96    
  47  0.142415      -1.94901      -175.381       175.381       1129.28       1304.66    
  48  0.803387     -0.218919      -19.6993       19.6993       1140.92       1160.62    
  49  0.709133     -0.343713      -30.9288       30.9288       1142.53       1173.46    
  50  0.261172      -1.34258      -120.811       120.811       1166.27       1287.08    
  51  0.106599      -2.23868      -201.447       201.447       1031.63       1233.07    
  52  0.955666     -0.453468E-01  -4.08050       4.08050       1300.13       1304.21    
  53  0.376236     -0.977539      -87.9633       87.9633       1058.01       1145.98    
loop,thermsimp(1:2)       89   11.8349       24.0733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205       1049.77          0.85          1.15         21.84          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1049.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       89
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       90
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      204     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -166.395       166.395       997.671       1164.07    
   2  0.894146     -0.111886      -10.0680       10.0680       996.403       1006.47    
   3  0.721270     -0.326741      -29.4017       29.4017       1007.29       1036.70    
   4  0.536866     -0.622006      -55.9709       55.9709       993.949       1049.92    
   5  0.418107     -0.872017      -78.4680       78.4680       1024.24       1102.71    
   6  0.391189     -0.938564      -84.4562       84.4562       1053.15       1137.61    
   7  0.799669     -0.223558      -20.1167       20.1167       1051.03       1071.15    
   8  0.595070     -0.519076      -46.7088       46.7088       1015.46       1062.17    
   9  0.384356E-03  -7.86394      -707.633       707.633       1041.31       1748.94    
  10  0.654302     -0.424187      -38.1702       38.1702       1088.88       1127.05    
  11  0.873355     -0.135413      -12.1851       12.1851       1049.34       1061.53    
  12  0.303212      -1.19332      -107.380       107.380       1112.57       1219.95    
  13  0.434159     -0.834344      -75.0780       75.0780       1039.96       1115.04    
  14  0.970825     -0.296089E-01  -2.66435       2.66435       1131.18       1133.84    
  15  0.405896     -0.901659      -81.1353       81.1353       1074.82       1155.96    
  16  0.250423      -1.38461      -124.593       124.593       983.679       1108.27    
  17  0.517030     -0.659654      -59.3586       59.3586       1128.78       1188.14    
  18  0.165468      -1.79897      -161.880       161.880       1058.01       1219.89    
  19  0.679403     -0.386541      -34.7827       34.7827       1144.36       1179.14    
  20  0.554013     -0.590567      -53.1419       53.1419       1122.64       1175.78    
  21  0.211764E-01  -3.85487      -346.878       346.878       1058.50       1405.38    
  22  0.453828     -0.790038      -71.0911       71.0911       1140.92       1212.01    
  23  0.377409     -0.974426      -87.6832       87.6832       1024.69       1112.37    
  24  0.496879     -0.699408      -62.9359       62.9359       1167.35       1230.28    
  25  0.214619      -1.53889      -138.476       138.476       1142.53       1281.01    
  26  0.724154     -0.322751      -29.0426       29.0426       1139.30       1168.34    
  27  0.385609     -0.952932      -85.7491       85.7491       1093.40       1179.15    
  28  0.777864     -0.251204      -22.6044       22.6044       1064.83       1087.43    
  29  0.709283     -0.343500      -30.9097       30.9097       1051.91       1082.82    
  30  0.191760      -1.65151      -148.610       148.610       1105.28       1253.89    
  31  0.347616      -1.05666      -95.0827       95.0827       1163.17       1258.25    
  32  0.191581      -1.65244      -148.694       148.694       1175.75       1324.45    
  33  0.770989     -0.260081      -23.4033       23.4033       1004.20       1027.61    
  34  0.788566E-01  -2.54012      -228.572       228.572       1174.18       1402.75    
  35  0.229474      -1.47197      -132.454       132.454       1031.63       1164.08    
  36  0.339326      -1.08079      -97.2547       97.2547       1210.89       1308.15    
  37  0.220886      -1.51011      -135.886       135.886       1182.78       1318.67    
  38  0.223644      -1.49770      -134.770       134.770       1034.31       1169.08    
  39  0.138287      -1.97842      -178.027       178.027       1143.67       1321.70    
  40  0.796402     -0.227651      -20.4851       20.4851       1029.43       1049.92    
  41  0.104384      -2.25968      -203.336       203.336       1159.55       1362.88    
  42  0.919642     -0.837713E-01  -7.53811       7.53811       1106.52       1114.06    
  43  0.360767      -1.01952      -91.7413       91.7413       1173.33       1265.07    
  44  0.924300     -0.787181E-01  -7.08340       7.08340       1185.57       1192.65    
  45  0.561139     -0.577786      -51.9918       51.9918       1166.27       1218.26    
  46  0.509073E-01  -2.97775      -267.951       267.951       1106.41       1374.36    
  47  0.715469     -0.334817      -30.1284       30.1284       1300.13       1330.26    
  48  0.294040E-01  -3.52662      -317.341       317.341       1129.28       1446.62    
  49  0.264026E-02  -5.93688      -534.227       534.227       1071.52       1605.75    
  50  0.634029     -0.455661      -41.0024       41.0024       1139.63       1180.63    
  51  0.319148      -1.14210      -102.771       102.771       1185.18       1287.95    
  52  0.495674     -0.701836      -63.1544       63.1544       1036.72       1099.87    
  53  0.838343     -0.176328      -15.8668       15.8668       1049.77       1065.63    
loop,thermsimp(1:2)       90   166.395       10.0680    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206       1094.88          0.85          1.15         21.90          0.00          0.05         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    207       1824.75          0.85          1.15         21.83          0.00          0.05         23.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1094.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       90
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       91
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      206     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -204.638       204.638       996.403       1201.04    
   2  0.846291     -0.166892      -15.0177       15.0177       1004.20       1019.22    
   3  0.167054      -1.78944      -161.021       161.021       1007.29       1168.32    
   4  0.786038     -0.240750      -21.6638       21.6638       1029.43       1051.10    
   5  0.680218     -0.385341      -34.6748       34.6748       993.949       1028.62    
   6  0.843894     -0.169729      -15.2730       15.2730       1049.34       1064.62    
   7  0.295559      -1.21889      -109.681       109.681       1015.46       1125.14    
   8  0.383493     -0.958433      -86.2441       86.2441       1049.77       1136.01    
   9  0.867247     -0.142431      -12.8166       12.8166       1051.03       1063.84    
  10  0.241960      -1.41898      -127.686       127.686       1051.91       1179.60    
  11  0.486925     -0.719645      -64.7569       64.7569       1064.83       1129.59    
  12  0.750166     -0.287460      -25.8670       25.8670       1036.72       1062.59    
  13  0.507045     -0.679156      -61.1135       61.1135       1024.24       1085.36    
  14  0.237743      -1.43656      -129.268       129.268       983.679       1112.95    
  15  0.256837E-01  -3.66190      -329.514       329.514       1024.69       1354.20    
  16  0.776460     -0.253010      -22.7669       22.7669       1106.52       1129.29    
  17  0.316300      -1.15106      -103.578       103.578       1039.96       1143.54    
  18  0.493161     -0.706919      -63.6117       63.6117       1088.88       1152.49    
  19  0.807271     -0.214096      -19.2653       19.2653       1131.18       1150.44    
  20  0.338915      -1.08201      -97.3637       97.3637       1053.15       1150.52    
  21  0.132986      -2.01751      -181.544       181.544       1074.82       1256.37    
  22  0.409975     -0.891659      -80.2355       80.2355       997.671       1077.91    
  23  0.525021     -0.644317      -57.9786       57.9786       1031.63       1089.61    
  24  0.393064     -0.933783      -84.0260       84.0260       1139.30       1223.32    
  25  0.176068      -1.73689      -156.293       156.293       1034.31       1190.61    
  26  0.965490     -0.351191E-01  -3.16018       3.16018       1122.64       1125.80    
  27  0.387767     -0.947350      -85.2468       85.2468       1144.36       1229.61    
  28  0.936248     -0.658753E-01  -5.92775       5.92775       1093.40       1099.33    
  29  0.914720     -0.891370E-01  -8.02095       8.02095       1139.63       1147.65    
  30  0.332171      -1.10211      -99.1724       99.1724       1128.78       1227.95    
  31  0.845314E-01  -2.47063      -222.319       222.319       1185.57       1407.89    
  32  0.687741     -0.374343      -33.6851       33.6851       1140.92       1174.60    
  33  0.899776     -0.105610      -9.50322       9.50322       1166.27       1175.77    
  34  0.558791     -0.581980      -52.3691       52.3691       1058.01       1110.38    
  35  0.882799     -0.124658      -11.2173       11.2173       1112.57       1123.78    
  36  0.235569      -1.44575      -130.095       130.095       1167.35       1297.44    
  37  0.533400     -0.628484      -56.5538       56.5538       1105.28       1161.83    
  38  0.147169      -1.91617      -172.426       172.426       1163.17       1335.59    
  39  0.966208E-01  -2.33696      -210.290       210.290       1173.33       1383.62    
  40  0.952887     -0.482588E-01  -4.34254       4.34254       1142.53       1146.88    
  41  0.155551      -1.86078      -167.441       167.441       1185.18       1352.62    
  42  0.645067     -0.438401      -39.4493       39.4493       1210.89       1250.34    
  43  0.394254     -0.930759      -83.7539       83.7539       1182.78       1266.53    
  44  0.546893     -0.603501      -54.3058       54.3058       1143.67       1197.98    
  45  0.390314     -0.940803      -84.6577       84.6577       1175.75       1260.41    
  46  0.311561      -1.16616      -104.936       104.936       1300.13       1405.07    
  47  0.752427E-01  -2.58704      -232.793       232.793       1159.55       1392.34    
  48  0.144673      -1.93328      -173.965       173.965       1106.41       1280.38    
  49  0.297567      -1.21212      -109.072       109.072       1174.18       1283.25    
  50  0.544131     -0.608565      -54.7614       54.7614       1058.50       1113.26    
  51  0.750603E-01  -2.58946      -233.011       233.011       1129.28       1362.29    
  52  0.127547      -2.05927      -185.303       185.303       1071.52       1256.82    
  53  0.839209     -0.175296      -15.7739       15.7739       1094.88       1110.66    
loop,thermsimp(1:2)       91   204.638       15.0177    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208       1017.12          0.86          1.14         21.91          0.00          0.05         23.96
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    209       1323.29          0.84          1.14         21.88          0.00          0.04         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1017.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       91
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       92
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      208     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -136.812       136.812       1004.20       1141.02    
   2  0.389473     -0.942961      -84.8519       84.8519       993.949       1078.80    
   3  0.919121     -0.843378E-01  -7.58909       7.58909       1029.43       1037.02    
   4  0.970518     -0.299250E-01  -2.69279       2.69279       1036.72       1039.41    
   5  0.713317     -0.337830      -30.3994       30.3994       1051.03       1081.43    
   6  0.639607     -0.446902      -40.2143       40.2143       1049.34       1089.56    
   7  0.712661     -0.338749      -30.4821       30.4821       997.671       1028.15    
   8  0.212311      -1.54970      -139.449       139.449       1024.24       1163.69    
   9  0.831769     -0.184200      -16.5752       16.5752       1031.63       1048.20    
  10  0.794875     -0.229571      -20.6578       20.6578       1093.40       1114.06    
  11  0.909815     -0.945137E-01  -8.50477       8.50477       1058.01       1066.52    
  12  0.753651E-01  -2.58541      -232.647       232.647       1094.88       1327.53    
  13  0.676081     -0.391442      -35.2237       35.2237       983.679       1018.90    
  14  0.597437     -0.515107      -46.3516       46.3516       1058.50       1104.85    
  15  0.146947      -1.91768      -172.562       172.562       1112.57       1285.13    
  16  0.854910     -0.156760      -14.1059       14.1059       1015.46       1029.57    
  17  0.984999     -0.151146E-01  -1.36008       1.36008       1122.64       1124.00    
  18  0.533419     -0.628448      -56.5505       56.5505       1106.52       1163.07    
  19  0.383774     -0.957703      -86.1784       86.1784       1064.83       1151.01    
  20  0.691729     -0.368561      -33.1648       33.1648       1049.77       1082.93    
  21  0.313732E-01  -3.46180      -311.508       311.508       1039.96       1351.47    
  22  0.415635     -0.877947      -79.0016       79.0016       1142.53       1221.54    
  23  0.288746      -1.24221      -111.779       111.779       1139.63       1251.41    
  24  0.176464      -1.73464      -156.090       156.090       1131.18       1287.27    
  25  0.881312     -0.126344      -11.3690       11.3690       1053.15       1064.52    
  26  0.962783     -0.379267E-01  -3.41282       3.41282       1088.88       1092.29    
  27  0.415450     -0.878393      -79.0418       79.0418       1105.28       1184.32    
  28  0.271836      -1.30256      -117.210       117.210       1007.29       1124.50    
  29  0.926655     -0.761736E-01  -6.85444       6.85444       1140.92       1147.77    
  30  0.277790      -1.28089      -115.260       115.260       1166.27       1281.53    
  31  0.189974      -1.66087      -149.452       149.452       1051.91       1201.36    
  32  0.410540     -0.890281      -80.1115       80.1115       1034.31       1114.43    
  33  0.952387     -0.487839E-01  -4.38979       4.38979       1143.67       1148.06    
  34  0.896015     -0.109798      -9.88011       9.88011       996.403       1006.28    
  35  0.121549E-01  -4.41002      -396.833       396.833       1139.30       1536.13    
  36  0.723911     -0.323087      -29.0729       29.0729       1128.78       1157.85    
  37  0.759053     -0.275683      -24.8072       24.8072       1144.36       1169.17    
  38  0.969929     -0.305320E-01  -2.74741       2.74741       1210.89       1213.64    
  39  0.852636     -0.159422      -14.3455       14.3455       1074.82       1089.17    
  40  0.730471     -0.314065      -28.2610       28.2610       1071.52       1099.78    
  41  0.528358     -0.637981      -57.4084       57.4084       1175.75       1233.16    
  42  0.404403     -0.905344      -81.4669       81.4669       1182.78       1264.25    
  43  0.232822      -1.45748      -131.151       131.151       1106.41       1237.56    
  44  0.847643     -0.165296      -14.8740       14.8740       1174.18       1189.05    
  45  0.429393E-01  -3.14797      -283.268       283.268       1167.35       1450.62    
  46  0.673157     -0.395777      -35.6138       35.6138       1163.17       1198.78    
  47  0.806068E-01  -2.51817      -226.596       226.596       1185.18       1411.78    
  48  0.926018     -0.768619E-01  -6.91638       6.91638       1024.69       1031.60    
  49  0.167973      -1.78395      -160.528       160.528       1129.28       1289.81    
  50  0.780773     -0.247471      -22.2686       22.2686       1173.33       1195.60    
  51  0.565702E-01  -2.87227      -258.460       258.460       1159.55       1418.01    
  52  0.646011     -0.436939      -39.3178       39.3178       1300.13       1339.45    
  53  0.455316     -0.786763      -70.7965       70.7965       1017.12       1087.92    
loop,thermsimp(1:2)       92   136.812       84.8519    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210       1053.81          0.83          1.14         22.10          0.00          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    211       1475.36          0.87          1.15         22.21          0.00          0.05         24.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1053.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    89.9845               209
loop is:       92
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    89.9845               209
loop is:       93
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    44.9922               261

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      210     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -85.7792       85.7792       996.403       1082.18    
   2  0.695074     -0.363738      -16.3654       16.3654       983.679       1000.04    
   3  0.541180     -0.614003      -27.6254       27.6254       997.671       1025.30    
   4  0.189791      -1.66183      -74.7695       74.7695       1015.46       1090.23    
   5  0.245553      -1.40424      -63.1800       63.1800       1024.69       1087.87    
   6  0.641474     -0.443986      -19.9759       19.9759       1029.43       1049.41    
   7  0.308462      -1.17616      -52.9179       52.9179       1036.72       1089.64    
   8  0.478005     -0.738133      -33.2103       33.2103       1031.63       1064.84    
   9  0.395759     -0.926951      -41.7056       41.7056       1053.15       1094.86    
  10  0.438776E-01  -3.12635      -140.662       140.662       1058.01       1198.67    
  11  0.294628E-01  -3.52463      -158.581       158.581       993.949       1152.53    
  12  0.331052E-01  -3.40806      -153.336       153.336       1051.03       1204.36    
  13  0.916325E-01  -2.38997      -107.530       107.530       1049.77       1157.30    
  14  0.985908     -0.141919E-01 -0.638524      0.638524       1017.12       1017.76    
  15  0.511724     -0.669970      -30.1434       30.1434       1074.82       1104.96    
  16  0.185695      -1.68365      -75.7512       75.7512       1049.34       1125.10    
  17  0.830711     -0.185474      -8.34487       8.34487       1088.88       1097.22    
  18  0.765179E-04  -9.47799      -426.436       426.436       1071.52       1497.96    
  19  0.129365      -2.04512      -92.0145       92.0145       1058.50       1150.51    
  20  0.796363     -0.227700      -10.2447       10.2447       1093.40       1103.65    
  21  0.589256     -0.528895      -23.7962       23.7962       1034.31       1058.11    
  22  0.770995     -0.260073      -11.7013       11.7013       1122.64       1134.34    
  23  0.685430     -0.377709      -16.9940       16.9940       1007.29       1024.29    
  24  0.487688     -0.718080      -32.3080       32.3080       1004.20       1036.51    
  25  0.114898      -2.16371      -97.3503       97.3503       1140.92       1238.27    
  26  0.165093      -1.80124      -81.0420       81.0420       1143.67       1224.71    
  27  0.302275      -1.19642      -53.8296       53.8296       1064.83       1118.66    
  28  0.123669      -2.09014      -94.0402       94.0402       1128.78       1222.82    
  29  0.960526     -0.402739E-01  -1.81201       1.81201       1106.52       1108.33    
  30  0.744557     -0.294966      -13.2712       13.2712       1024.24       1037.51    
  31  0.418436     -0.871232      -39.1987       39.1987       1144.36       1183.56    
  32  0.624411     -0.470947      -21.1890       21.1890       1105.28       1126.47    
  33  0.920055     -0.833222E-01  -3.74885       3.74885       1174.18       1177.93    
  34  0.330507      -1.10713      -49.8122       49.8122       1173.33       1223.14    
  35  0.889566     -0.117022      -5.26507       5.26507       1163.17       1168.43    
  36  0.269410      -1.31152      -59.0082       59.0082       1051.91       1110.92    
  37  0.458780     -0.779184      -35.0572       35.0572       1210.89       1245.95    
  38  0.952588     -0.485730E-01  -2.18541       2.18541       1142.53       1144.72    
  39  0.213836      -1.54254      -69.4025       69.4025       1175.75       1245.15    
  40  0.460697     -0.775015      -34.8697       34.8697       1106.41       1141.28    
  41  0.571693     -0.559153      -25.1576       25.1576       1139.63       1164.78    
  42  0.201363      -1.60265      -72.1067       72.1067       1182.78       1254.89    
  43  0.707817     -0.345570      -15.5480       15.5480       1166.27       1181.81    
  44  0.927118     -0.756745E-01  -3.40477       3.40477       1112.57       1115.97    
  45  0.288916      -1.24162      -55.8633       55.8633       1131.18       1187.04    
  46  0.702737     -0.352773      -15.8720       15.8720       1129.28       1145.15    
  47  0.253190      -1.37362      -61.8021       61.8021       1094.88       1156.69    
  48  0.709086     -0.343779      -15.4674       15.4674       1300.13       1315.60    
  49  0.399421     -0.917738      -41.2911       41.2911       1039.96       1081.25    
  50  0.837301     -0.177572      -7.98937       7.98937       1185.18       1193.17    
  51  0.906694     -0.979507E-01  -4.40702       4.40702       1159.55       1163.96    
  52  0.479547     -0.734913      -33.0654       33.0654       1167.35       1200.41    
  53  0.573668     -0.555704      -25.0024       25.0024       1053.81       1078.81    
loop,thermsimp(1:2)       93   85.7792       16.3654    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212       1033.79          0.84          1.15         22.16          0.00          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    213       1032.65          0.86          1.15         22.09          0.00          0.05         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1032.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       93
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       94
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      212     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -7.72236       7.72236       983.679       991.402    
   2  0.478368     -0.737375      -33.1762       33.1762       1017.12       1050.30    
   3  0.283498      -1.26055      -56.7150       56.7150       1007.29       1064.01    
   4  0.520516     -0.652935      -29.3770       29.3770       997.671       1027.05    
   5  0.703282E-01  -2.65458      -119.436       119.436       1004.20       1123.64    
   6  0.914137     -0.897748E-01  -4.03917       4.03917       1024.24       1028.28    
   7  0.479535     -0.734938      -33.0665       33.0665       1029.43       1062.50    
   8  0.921875     -0.813456E-01  -3.65992       3.65992       1034.31       1037.97    
   9  0.739547     -0.301718      -13.5750       13.5750       1031.63       1045.20    
  10  0.790753     -0.234770      -10.5628       10.5628       1053.81       1064.37    
  11  0.212247E-01  -3.85259      -173.337       173.337       1039.96       1213.30    
  12  0.286971      -1.24837      -56.1672       56.1672       996.403       1052.57    
  13  0.695666     -0.362886      -16.3270       16.3270       1024.69       1041.02    
  14  0.534590     -0.626255      -28.1766       28.1766       1036.72       1064.90    
  15  0.945577     -0.559603E-01  -2.51778       2.51778       1015.46       1017.98    
  16  0.619446     -0.478930      -21.5481       21.5481       1053.15       1074.70    
  17  0.291083E-01  -3.53673      -159.125       159.125       1088.88       1248.00    
  18  0.372584E-01  -3.28988      -148.019       148.019       1093.40       1241.42    
  19  0.713241     -0.337936      -15.2045       15.2045       1074.82       1090.03    
  20  0.280281      -1.27196      -57.2284       57.2284       1106.52       1163.75    
  21  0.254796      -1.36729      -61.5175       61.5175       1051.91       1113.43    
  22  0.498598     -0.695955      -31.3126       31.3126       1112.57       1143.88    
  23  0.515261E-01  -2.96567      -133.432       133.432       1064.83       1198.26    
  24  0.347627      -1.05662      -47.5399       47.5399       1049.34       1096.88    
  25  0.696212     -0.362102      -16.2918       16.2918       1105.28       1121.57    
  26  0.707749E-01  -2.64825      -119.151       119.151       1122.64       1241.79    
  27  0.364523E-01  -3.31175      -149.003       149.003       1106.41       1255.41    
  28  0.895087E-02  -4.71600      -212.184       212.184       1142.53       1354.72    
  29  0.333194      -1.09903      -49.4479       49.4479       1129.28       1178.73    
  30  0.451375     -0.795457      -35.7894       35.7894       1058.50       1094.29    
  31  0.849961E-01  -2.46515      -110.913       110.913       993.949       1104.86    
  32  0.524791     -0.644756      -29.0090       29.0090       1094.88       1123.89    
  33  0.641068     -0.444619      -20.0044       20.0044       1049.77       1069.77    
  34  0.757376     -0.277895      -12.5031       12.5031       1159.55       1172.05    
  35  0.760597     -0.273651      -12.3122       12.3122       1139.63       1151.94    
  36  0.709070     -0.343801      -15.4684       15.4684       1163.17       1178.63    
  37  0.794718     -0.229768      -10.3378       10.3378       1174.18       1184.52    
  38  0.869679     -0.139632      -6.28233       6.28233       1166.27       1172.55    
  39  0.229100E-01  -3.77618      -169.899       169.899       1144.36       1314.26    
  40  0.935590     -0.665776E-01  -2.99548       2.99548       1131.18       1134.17    
  41  0.889453     -0.117149      -5.27078       5.27078       1185.18       1190.45    
  42  0.529054     -0.636665      -28.6450       28.6450       1058.01       1086.66    
  43  0.907902     -0.966186E-01  -4.34709       4.34709       1167.35       1171.69    
  44  0.693802     -0.365568      -16.4477       16.4477       1051.03       1067.48    
  45  0.883803     -0.123521      -5.55750       5.55750       1128.78       1134.34    
  46  0.275134E-01  -3.59308      -161.661       161.661       1173.33       1334.99    
  47  0.324767      -1.12465      -50.6004       50.6004       1143.67       1194.27    
  48  0.853326     -0.158614      -7.13640       7.13640       1140.92       1148.06    
  49  0.325639      -1.12197      -50.4798       50.4798       1175.75       1226.23    
  50  0.773280     -0.257115      -11.5682       11.5682       1210.89       1222.46    
  51  0.108890      -2.21741      -99.7664       99.7664       1182.78       1282.55    
  52  0.188532E-01  -3.97107      -178.668       178.668       1300.13       1478.80    
  53  0.970927     -0.295045E-01  -1.32747       1.32747       1032.65       1033.98    
loop,thermsimp(1:2)       94   7.72236       33.1762    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214       1057.36          0.85          1.15         22.15          0.00          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1057.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       94
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       95
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      213     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -13.2655       13.2655       983.679       996.945    
   2  0.739179     -0.302215      -13.5973       13.5973       1015.46       1029.06    
   3  0.131167      -2.03128      -91.3919       91.3919       997.671       1089.06    
   4  0.523356     -0.647493      -29.1322       29.1322       1024.24       1053.37    
   5  0.660412     -0.414891      -18.6669       18.6669       1032.65       1051.32    
   6  0.433074E-01  -3.13943      -141.250       141.250       1034.31       1175.56    
   7  0.480352     -0.733236      -32.9899       32.9899       1024.69       1057.68    
   8  0.808114     -0.213053      -9.58571       9.58571       1031.63       1041.21    
   9  0.723804     -0.323235      -14.5431       14.5431       1017.12       1031.66    
  10  0.322682      -1.13109      -50.8901       50.8901       996.403       1047.29    
  11  0.898907     -0.106576      -4.79510       4.79510       1029.43       1034.23    
  12  0.359972      -1.02173      -45.9698       45.9698       1007.29       1053.26    
  13  0.879118     -0.128836      -5.79662       5.79662       1053.81       1059.61    
  14  0.963559     -0.371220E-01  -1.67020       1.67020       1036.72       1038.39    
  15  0.662848     -0.411210      -18.5012       18.5012       1051.03       1069.53    
  16  0.648402     -0.433244      -19.4926       19.4926       1049.77       1069.26    
  17  0.375343     -0.979916      -44.0886       44.0886       1053.15       1097.24    
  18  0.812441     -0.207712      -9.34544       9.34544       1058.01       1067.36    
  19  0.248177E-01  -3.69620      -166.300       166.300       1074.82       1241.12    
  20  0.653530     -0.425366      -19.1382       19.1382       1058.50       1077.64    
  21  0.712244     -0.339334      -15.2674       15.2674       1049.34       1064.61    
  22  0.358229      -1.02658      -46.1882       46.1882       993.949       1040.14    
  23  0.325518      -1.12234      -50.4964       50.4964       1051.91       1102.41    
  24  0.770349     -0.260912      -11.7390       11.7390       1105.28       1117.02    
  25  0.633518E-01  -2.75905      -124.136       124.136       1004.20       1128.34    
  26  0.168796      -1.77907      -80.0441       80.0441       1094.88       1174.93    
  27  0.562007     -0.576241      -25.9264       25.9264       1131.18       1157.10    
  28  0.156316      -1.85588      -83.5001       83.5001       1128.78       1212.28    
  29  0.967732     -0.328002E-01  -1.47576       1.47576       1112.57       1114.04    
  30  0.538071     -0.619766      -27.8846       27.8846       1140.92       1168.80    
  31  0.967495     -0.330453E-01  -1.48678       1.48678       1139.63       1141.11    
  32  0.771619     -0.259265      -11.6649       11.6649       1106.52       1118.19    
  33  0.246044      -1.40225      -63.0902       63.0902       1167.35       1230.44    
  34  0.700731     -0.355631      -16.0007       16.0007       1159.55       1175.55    
  35  0.382714     -0.960468      -43.2136       43.2136       1166.27       1209.48    
  36  0.580395     -0.544047      -24.4779       24.4779       1163.17       1187.64    
  37  0.305131      -1.18701      -53.4064       53.4064       1129.28       1182.69    
  38  0.624250     -0.471204      -21.2005       21.2005       1174.18       1195.38    
  39  0.575432     -0.552634      -24.8642       24.8642       1185.18       1210.05    
  40  0.701335     -0.354770      -15.9619       15.9619       1143.67       1159.63    
  41  0.290211      -1.23715      -55.6620       55.6620       1064.83       1120.49    
  42  0.140976      -1.95916      -88.1471       88.1471       1039.96       1128.11    
  43  0.275714      -1.28839      -57.9676       57.9676       1210.89       1268.86    
  44  0.856479     -0.154925      -6.97044       6.97044       1175.75       1182.72    
  45  0.994286     -0.573084E-02 -0.257843      0.257843       1093.40       1093.66    
  46  0.913008     -0.910102E-01  -4.09475       4.09475       1122.64       1126.73    
  47  0.204063      -1.58933      -71.5075       71.5075       1088.88       1160.38    
  48  0.388833     -0.944605      -42.4999       42.4999       1106.41       1148.91    
  49  0.781619     -0.246387      -11.0855       11.0855       1182.78       1193.87    
  50  0.373421     -0.985049      -44.3196       44.3196       1144.36       1188.68    
  51  0.834918     -0.180422      -8.11758       8.11758       1173.33       1181.45    
  52  0.174969      -1.74315      -78.4281       78.4281       1142.53       1220.96    
  53  0.531353     -0.632329      -28.4499       28.4499       1057.36       1085.81    
loop,thermsimp(1:2)       95   13.2655       13.5973    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215        980.02          0.86          1.14         22.01          0.00          0.06         24.08
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216       1270.75          0.83          1.14         22.16          0.00          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    980.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       95
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   60.4592    

hmean,hstd :    1082.08       60.4592    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1082.08       60.4592    
h(1),h(best1),h(np1) :    983.679       980.018       980.018    
htherm(1),htherm(best1),htherm(np1) :    996.945       1268.86       1268.86    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        1
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      215     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -175.003       175.003       983.679       1158.68    
   2  0.977100     -0.231667E-01  -1.04232       1.04232       1015.46       1016.50    
   3  0.491467     -0.710361      -31.9607       31.9607       1017.12       1049.08    
   4  0.802113E-01  -2.52309      -113.520       113.520       1029.43       1142.95    
   5  0.891044     -0.115361      -5.19036       5.19036       1036.72       1041.91    
   6  0.397551     -0.922433      -41.5023       41.5023       993.949       1035.45    
   7  0.121203      -2.11029      -94.9467       94.9467       1031.63       1126.57    
   8  0.789985E-01  -2.53833      -114.205       114.205       996.403       1110.61    
   9  0.921855     -0.813679E-01  -3.66092       3.66092       1032.65       1036.31    
  10  0.252671      -1.37567      -61.8943       61.8943       1007.29       1069.19    
  11  0.787271     -0.239182      -10.7613       10.7613       1024.24       1035.00    
  12  0.634653     -0.454676      -20.4569       20.4569       1024.69       1045.14    
  13  0.706648     -0.347222      -15.6223       15.6223       1053.81       1069.43    
  14  0.349740E-01  -3.35315      -150.866       150.866       1049.34       1200.21    
  15  0.686787     -0.375731      -16.9050       16.9050       1058.01       1074.92    
  16  0.309348      -1.17329      -52.7888       52.7888       1049.77       1102.55    
  17  0.703748     -0.351336      -15.8074       15.8074       1051.03       1066.84    
  18  0.985092     -0.150207E-01 -0.675817      0.675817       1058.50       1059.17    
  19  0.440741     -0.819298      -36.8621       36.8621       1057.36       1094.22    
  20  0.796112     -0.228015      -10.2589       10.2589       997.671       1007.93    
  21  0.451938     -0.794210      -35.7333       35.7333       1093.40       1129.13    
  22  0.230902      -1.46576      -65.9479       65.9479       1053.15       1119.10    
  23  0.760212     -0.274159      -12.3350       12.3350       1051.91       1064.24    
  24  0.250434E-02  -5.98973      -269.491       269.491       1112.57       1382.06    
  25  0.627913E-01  -2.76794      -124.536       124.536       1105.28       1229.81    
  26  0.263128      -1.33511      -60.0698       60.0698       1106.52       1166.59    
  27  0.177986      -1.72605      -77.6589       77.6589       1064.83       1142.49    
  28  0.919776     -0.836247E-01  -3.76246       3.76246       1122.64       1126.40    
  29  0.854272     -0.157506      -7.08655       7.08655       1039.96       1047.05    
  30  0.648187     -0.433576      -19.5075       19.5075       1004.20       1023.71    
  31  0.853797     -0.158061      -7.11154       7.11154       1139.63       1146.74    
  32  0.484551     -0.724533      -32.5984       32.5984       1106.41       1139.01    
  33  0.423817     -0.858454      -38.6237       38.6237       1131.18       1169.80    
  34  0.932015     -0.704065E-01  -3.16775       3.16775       1143.67       1146.84    
  35  0.161906      -1.82074      -81.9192       81.9192       1088.88       1170.80    
  36  0.812519     -0.207617      -9.34113       9.34113       1140.92       1150.26    
  37  0.346838      -1.05890      -47.6422       47.6422       1094.88       1142.53    
  38  0.477141     -0.739943      -33.2917       33.2917       1159.55       1192.84    
  39  0.931946     -0.704808E-01  -3.17109       3.17109       1034.31       1037.49    
  40  0.189794      -1.66182      -74.7688       74.7688       1173.33       1248.10    
  41  0.361902      -1.01638      -45.7293       45.7293       1129.28       1175.01    
  42  0.775630E-02  -4.85925      -218.629       218.629       1175.75       1394.38    
  43  0.292497      -1.22930      -55.3089       55.3089       1163.17       1218.48    
  44  0.264300      -1.33067      -59.8698       59.8698       1144.36       1204.23    
  45  0.529597     -0.635638      -28.5988       28.5988       1182.78       1211.38    
  46  0.163272      -1.81234      -81.5410       81.5410       1174.18       1255.72    
  47  0.212593      -1.54838      -69.6650       69.6650       1166.27       1235.93    
  48  0.359173      -1.02395      -46.0699       46.0699       1185.18       1231.25    
  49  0.993707     -0.631295E-02 -0.284034      0.284034       1128.78       1129.06    
  50  0.261479      -1.34140      -60.3527       60.3527       1142.53       1202.89    
  51  0.441392     -0.817822      -36.7956       36.7956       1167.35       1204.14    
  52  0.624656     -0.470554      -21.1713       21.1713       1074.82       1095.99    
  53  0.646784     -0.435743      -19.6050       19.6050       980.018       999.623    
loop,thermsimp(1:2)        1   175.003       1.04232    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217        986.24          0.86          1.14         21.96          0.00          0.05         24.01
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218       1285.89          0.84          1.14         21.89          0.01          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    986.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        1
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        2
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      217     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -66.9787       66.9787       980.018       1047.00    
   2  0.726663     -0.319292      -14.3657       14.3657       997.671       1012.04    
   3  0.929061     -0.735808E-01  -3.31057       3.31057       1015.46       1018.77    
   4  0.764703     -0.268268      -12.0700       12.0700       1004.20       1016.27    
   5  0.119617      -2.12346      -95.5393       95.5393       1024.24       1119.78    
   6  0.369672     -0.995138      -44.7735       44.7735       993.949       1038.72    
   7  0.875806     -0.132611      -5.96647       5.96647       1032.65       1038.62    
   8  0.657886     -0.418723      -18.8393       18.8393       1034.31       1053.15    
   9  0.387095E-01  -3.25167      -146.300       146.300       1036.72       1183.02    
  10  0.454078     -0.789485      -35.5207       35.5207       1024.69       1060.21    
  11  0.890470     -0.116006      -5.21935       5.21935       1039.96       1045.18    
  12  0.118445      -2.13331      -95.9822       95.9822       1017.12       1113.10    
  13  0.190238      -1.65948      -74.6638       74.6638       1058.50       1133.16    
  14  0.435624     -0.830976      -37.3875       37.3875       1051.91       1089.30    
  15  0.768655     -0.263114      -11.8381       11.8381       1051.03       1062.87    
  16  0.870896E-01  -2.44082      -109.818       109.818       1007.29       1117.11    
  17  0.936453     -0.656556E-01  -2.95399       2.95399       1053.81       1056.76    
  18  0.159312      -1.83689      -82.6458       82.6458       1058.01       1140.66    
  19  0.988165     -0.119051E-01 -0.535637      0.535637       1057.36       1057.90    
  20  0.713347     -0.337787      -15.1978       15.1978       1074.82       1090.02    
  21  0.417075     -0.874489      -39.3452       39.3452       1049.77       1089.11    
  22  0.719048     -0.329827      -14.8396       14.8396       996.403       1011.24    
  23  0.785519     -0.241411      -10.8616       10.8616       1053.15       1064.02    
  24  0.356994      -1.03004      -46.3436       46.3436       1122.64       1168.98    
  25  0.357951      -1.02736      -46.2232       46.2232       1031.63       1077.85    
  26  0.154816      -1.86552      -83.9338       83.9338       1128.78       1212.71    
  27  0.246912      -1.39872      -62.9317       62.9317       1093.40       1156.33    
  28  0.553458     -0.591570      -26.6160       26.6160       1106.41       1133.03    
  29  0.729602     -0.315256      -14.1841       14.1841       1064.83       1079.01    
  30  0.605470     -0.501750      -22.5749       22.5749       1094.88       1117.46    
  31  0.278987E-01  -3.57918      -161.035       161.035       1029.43       1190.47    
  32  0.187991      -1.67136      -75.1984       75.1984       1139.63       1214.83    
  33  0.543158     -0.610355      -27.4612       27.4612       1143.67       1171.13    
  34  0.996749     -0.325625E-02 -0.146506      0.146506       1140.92       1141.07    
  35  0.540727     -0.614841      -27.6631       27.6631       983.679       1011.34    
  36  0.833271E-01  -2.48498      -111.805       111.805       1106.52       1218.33    
  37  0.404538     -0.905011      -40.7185       40.7185       1131.18       1171.90    
  38  0.147302      -1.91527      -86.1723       86.1723       1088.88       1175.05    
  39  0.364226E-01  -3.31257      -149.040       149.040       1129.28       1278.32    
  40  0.381304     -0.964158      -43.3796       43.3796       1159.55       1202.93    
  41  0.737758     -0.304140      -13.6839       13.6839       1049.34       1063.03    
  42  0.179374      -1.71828      -77.3093       77.3093       1142.53       1219.84    
  43  0.281757      -1.26671      -56.9922       56.9922       1167.35       1224.34    
  44  0.192633      -1.64697      -74.1007       74.1007       1144.36       1218.46    
  45  0.954983     -0.460617E-01  -2.07242       2.07242       1182.78       1184.85    
  46  0.710258     -0.342127      -15.3931       15.3931       1163.17       1178.56    
  47  0.831769     -0.184201      -8.28762       8.28762       1105.28       1113.57    
  48  0.912541     -0.915218E-01  -4.11777       4.11777       1185.18       1189.30    
  49  0.221543      -1.50714      -67.8096       67.8096       1166.27       1234.08    
  50  0.690803E-02  -4.97507      -223.840       223.840       1173.33       1397.17    
  51  0.162616      -1.81637      -81.7223       81.7223       1174.18       1255.90    
  52  0.869433     -0.139913      -6.29502       6.29502       1112.57       1118.86    
  53  0.541563     -0.613295      -27.5935       27.5935       986.238       1013.83    
loop,thermsimp(1:2)        2   66.9787       14.3657    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219       1005.24          0.85          1.14         21.86          0.01          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    220       1385.76          0.84          1.14         21.82          0.01          0.05         23.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1005.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        2
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        3
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      219     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -39.5119       39.5119       996.403       1035.91    
   2  0.117190E-02  -6.74913      -303.658       303.658       983.679       1287.34    
   3  0.432199     -0.838870      -37.7426       37.7426       997.671       1035.41    
   4  0.466381     -0.762753      -34.3180       34.3180       986.238       1020.56    
   5  0.696685     -0.361422      -16.2612       16.2612       1004.20       1020.46    
   6  0.193714      -1.64137      -73.8489       73.8489       1015.46       1089.31    
   7  0.535145     -0.625217      -28.1299       28.1299       1032.65       1060.78    
   8  0.812984     -0.207044      -9.31539       9.31539       993.949       1003.26    
   9  0.956789     -0.441723E-01  -1.98741       1.98741       1039.96       1041.95    
  10  0.496711E-01  -3.00233      -135.082       135.082       980.018       1115.10    
  11  0.206308E-01  -3.88097      -174.614       174.614       1034.31       1208.93    
  12  0.423434     -0.859358      -38.6645       38.6645       1053.81       1092.47    
  13  0.216826      -1.52866      -68.7779       68.7779       1057.36       1126.14    
  14  0.792422     -0.232661      -10.4680       10.4680       1024.69       1035.16    
  15  0.265940      -1.32449      -59.5916       59.5916       1051.03       1110.62    
  16  0.993400     -0.662201E-02 -0.297939      0.297939       1049.34       1049.64    
  17  0.645200E-01  -2.74078      -123.314       123.314       1053.15       1176.47    
  18  0.651527     -0.428436      -19.2763       19.2763       1031.63       1050.90    
  19  0.858875     -0.152131      -6.84473       6.84473       1064.83       1071.67    
  20  0.126056      -2.07103      -93.1801       93.1801       1049.77       1142.95    
  21  0.772661E-01  -2.56050      -115.203       115.203       1051.91       1167.11    
  22  0.441429     -0.817737      -36.7918       36.7918       1074.82       1111.61    
  23  0.166586      -1.79224      -80.6369       80.6369       1017.12       1097.76    
  24  0.217490      -1.52560      -68.6404       68.6404       1105.28       1173.92    
  25  0.632871     -0.457488      -20.5834       20.5834       1007.29       1027.88    
  26  0.201694      -1.60100      -72.0328       72.0328       1094.88       1166.92    
  27  0.282690      -1.26341      -56.8435       56.8435       1112.57       1169.41    
  28  0.255086E-01  -3.66874      -165.065       165.065       1024.24       1189.31    
  29  0.562308     -0.575706      -25.9023       25.9023       1106.41       1132.31    
  30  0.283366E-01  -3.56360      -160.334       160.334       1058.50       1218.83    
  31  0.404254E-01  -3.20830      -144.348       144.348       1058.01       1202.36    
  32  0.170475      -1.76917      -79.5989       79.5989       1140.92       1220.52    
  33  0.141712      -1.95396      -87.9128       87.9128       1093.40       1181.31    
  34  0.773173     -0.257253      -11.5744       11.5744       1122.64       1134.21    
  35  0.255978      -1.36266      -61.3093       61.3093       1143.67       1204.98    
  36  0.823739     -0.193902      -8.72407       8.72407       1131.18       1139.90    
  37  0.166307      -1.79392      -80.7125       80.7125       1088.88       1169.59    
  38  0.676319     -0.391090      -17.5960       17.5960       1163.17       1180.76    
  39  0.144546      -1.93416      -87.0221       87.0221       1036.72       1123.74    
  40  0.593436     -0.521826      -23.4781       23.4781       1182.78       1206.26    
  41  0.762921     -0.270600      -12.1749       12.1749       1185.18       1197.36    
  42  0.855796     -0.155724      -7.00635       7.00635       1029.43       1036.44    
  43  0.433555     -0.835737      -37.6017       37.6017       1159.55       1197.15    
  44  0.252891      -1.37480      -61.8551       61.8551       1128.78       1190.64    
  45  0.942909     -0.587850E-01  -2.64487       2.64487       1139.63       1142.27    
  46  0.432313     -0.838605      -37.7307       37.7307       1106.52       1144.25    
  47  0.975713     -0.245869E-01  -1.10622       1.10622       1144.36       1145.47    
  48  0.541226     -0.613919      -27.6216       27.6216       1142.53       1170.16    
  49  0.255057      -1.36627      -61.4715       61.4715       1167.35       1228.82    
  50  0.202141      -1.59879      -71.9330       71.9330       1166.27       1238.20    
  51  0.949562     -0.517549E-01  -2.32857       2.32857       1174.18       1176.51    
  52  0.255660E-01  -3.66649      -164.964       164.964       1129.28       1294.24    
  53  0.306802      -1.18155      -53.1607       53.1607       1005.24       1058.40    
loop,thermsimp(1:2)        3   39.5119       303.658    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221       1015.09          0.83          1.15         22.18          0.01          0.05         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    222       1172.84          0.86          1.16         22.06          0.00          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    1015.1        1.258     -2.324      2.891     -102.6      1.001    
                      0.8551      1.484     -99.70      3.968     0.8452    

                       2.215     -1.943      1.540      7000.      7000.    

                     -0.9984      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.838     -5.264     -9.859      6.255    

                      -15.72     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1395E-01 0.2565    -0.1839E-01 0.1933    

                     -0.2486    -0.1482     0.1511     0.9925E-01 0.1339    



                     -0.3984    -0.5166      0.000     0.1158    -0.4588E-01

                     -0.5676E-01 0.1601    -0.7116    -0.9135E-01 0.3118    

                      0.6394E-01 0.4384E-01-0.6901     -1.327      7000.    



                      -1.347     -1.282     -2.142     -1.982    -0.3807    

                     -0.3252      9.284      8.695    -0.1672E+05 -6.000    

                     -0.2877     -2.386      9.419      8.858    -0.1969E+05



                      -6.000     0.5840    -0.3830      8.903      9.085    

                     -0.1944E+05 -6.000    -0.6758    -0.6366      9.052    

                       8.833    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1015.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        3
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        4
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      221     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -18.9255       18.9255       993.949       1012.87    
   2  0.880966     -0.126736      -5.70213       5.70213       1004.20       1009.91    
   3  0.854972     -0.156687      -7.04969       7.04969       986.238       993.288    
   4  0.797101     -0.226774      -10.2031       10.2031       1007.29       1017.50    
   5  0.158477      -1.84214      -82.8822       82.8822       1024.69       1107.57    
   6  0.593839     -0.521148      -23.4476       23.4476       997.671       1021.12    
   7  0.817101     -0.201993      -9.08811       9.08811       996.403       1005.49    
   8  0.997190     -0.281377E-02 -0.126598      0.126598       1029.43       1029.56    
   9  0.402857     -0.909174      -40.9058       40.9058       1039.96       1080.87    
  10  0.690455     -0.370405      -16.6654       16.6654       1049.34       1066.01    
  11  0.609635     -0.494895      -22.2664       22.2664       1031.63       1053.89    
  12  0.491117     -0.711073      -31.9928       31.9928       1005.24       1037.23    
  13  0.990676     -0.936814E-02 -0.421493      0.421493       1032.65       1033.08    
  14  0.976919     -0.233519E-01  -1.05065       1.05065       1064.83       1065.88    
  15  0.692556     -0.367366      -16.5286       16.5286       1015.46       1031.99    
  16  0.549694     -0.598394      -26.9231       26.9231       1053.81       1080.73    
  17  0.538267E-01  -2.92199      -131.467       131.467       1017.12       1148.59    
  18  0.602193     -0.507178      -22.8191       22.8191       1051.03       1073.85    
  19  0.537276     -0.621243      -27.9511       27.9511       1074.82       1102.77    
  20  0.338220      -1.08406      -48.7742       48.7742       980.018       1028.79    
  21  0.306772      -1.18165      -53.1652       53.1652       1036.72       1089.88    
  22  0.895389     -0.110497      -4.97153       4.97153       1057.36       1062.33    
  23  0.120096      -2.11946      -95.3593       95.3593       1106.41       1201.77    
  24  0.680166     -0.385418      -17.3408       17.3408       1122.64       1139.98    
  25  0.369434     -0.995782      -44.8025       44.8025       1131.18       1175.98    
  26  0.235484      -1.44611      -65.0638       65.0638       1139.63       1204.69    
  27  0.260836      -1.34386      -60.4634       60.4634       1049.77       1110.23    
  28  0.720259     -0.328144      -14.7640       14.7640       1106.52       1121.29    
  29  0.695069     -0.363744      -16.3657       16.3657       1144.36       1160.73    
  30  0.105076      -2.25307      -101.371       101.371       1094.88       1196.25    
  31  0.968349     -0.321628E-01  -1.44708       1.44708       1051.91       1053.36    
  32  0.974131     -0.262091E-01  -1.17921       1.17921       1112.57       1113.75    
  33  0.647785E-01  -2.73678      -123.134       123.134       1088.88       1212.01    
  34  0.910402     -0.938690E-01  -4.22337       4.22337       1142.53       1146.76    
  35  0.488733     -0.715939      -32.2117       32.2117       1105.28       1137.49    
  36  0.377436E-01  -3.27694      -147.437       147.437       1053.15       1200.59    
  37  0.154608      -1.86686      -83.9943       83.9943       1174.18       1258.17    
  38  0.277804      -1.28084      -57.6278       57.6278       1163.17       1220.79    
  39  0.969547     -0.309263E-01  -1.39144       1.39144       1093.40       1094.79    
  40  0.380083     -0.967367      -43.5240       43.5240       1024.24       1067.77    
  41  0.751822     -0.285256      -12.8343       12.8343       1128.78       1141.61    
  42  0.137692      -1.98274      -89.2078       89.2078       1159.55       1248.76    
  43  0.293470      -1.22598      -55.1596       55.1596       1185.18       1240.34    
  44  0.433705     -0.835390      -37.5860       37.5860       1058.01       1095.60    
  45  0.418034     -0.872194      -39.2419       39.2419       1143.67       1182.91    
  46  0.166728      -1.79139      -80.5988       80.5988       1182.78       1263.38    
  47  0.921960     -0.812537E-01  -3.65579       3.65579       1034.31       1037.97    
  48  0.412601     -0.885275      -39.8305       39.8305       1058.50       1098.33    
  49  0.925181     -0.777655E-01  -3.49885       3.49885       1140.92       1144.42    
  50  0.687711     -0.374386      -16.8445       16.8445       1167.35       1184.19    
  51  0.729890     -0.314862      -14.1664       14.1664       1166.27       1180.43    
  52  0.355028      -1.03556      -46.5921       46.5921       983.679       1030.27    
  53  0.123338      -2.09283      -94.1611       94.1611       1015.09       1109.26    
loop,thermsimp(1:2)        4   18.9255       5.70213    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223       1000.12          0.85          1.15         21.90          0.01          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    224       1425.99          0.84          1.14         21.85          0.00          0.04         23.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1000.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        4
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        5
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      223     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -20.7717       20.7717       986.238       1007.01    
   2  0.876370     -0.131967      -5.93748       5.93748       996.403       1002.34    
   3  0.840080     -0.174259      -7.84029       7.84029       1004.20       1012.04    
   4  0.608986E-01  -2.79854      -125.913       125.913       993.949       1119.86    
   5  0.311901      -1.16507      -52.4190       52.4190       1007.29       1059.71    
   6  0.937552E-01  -2.36707      -106.500       106.500       997.671       1104.17    
   7  0.608418     -0.496893      -22.3563       22.3563       980.018       1002.37    
   8  0.297707      -1.21164      -54.5146       54.5146       1029.43       1083.95    
   9  0.365777      -1.00573      -45.2501       45.2501       983.679       1028.93    
  10  0.194673      -1.63643      -73.6267       73.6267       1015.46       1089.09    
  11  0.941388     -0.604003E-01  -2.71755       2.71755       1032.65       1035.37    
  12  0.984881     -0.152343E-01 -0.685425      0.685425       1005.24       1005.92    
  13  0.750245     -0.287355      -12.9287       12.9287       1034.31       1047.24    
  14  0.437446     -0.826803      -37.1997       37.1997       1051.91       1089.11    
  15  0.174754      -1.74437      -78.4833       78.4833       1031.63       1110.11    
  16  0.300465E-01  -3.50501      -157.698       157.698       1057.36       1215.06    
  17  0.372924     -0.986380      -44.3794       44.3794       1064.83       1109.21    
  18  0.803506     -0.218771      -9.84299       9.84299       1049.34       1059.19    
  19  0.232583      -1.45851      -65.6216       65.6216       1024.24       1089.86    
  20  0.383368     -0.958759      -43.1367       43.1367       1051.03       1094.16    
  21  0.622786     -0.473552      -21.3062       21.3062       1053.81       1075.12    
  22  0.356422      -1.03164      -46.4158       46.4158       1039.96       1086.38    
  23  0.919964     -0.834212E-01  -3.75331       3.75331       1036.72       1040.47    
  24  0.550740     -0.596492      -26.8375       26.8375       1093.40       1120.24    
  25  0.402627     -0.909745      -40.9314       40.9314       1058.01       1098.94    
  26  0.256265      -1.36154      -61.2589       61.2589       1058.50       1119.76    
  27  0.763510     -0.269828      -12.1402       12.1402       1074.82       1086.96    
  28  0.388963     -0.944271      -42.4849       42.4849       1024.69       1067.17    
  29  0.981923     -0.182423E-01 -0.820762      0.820762       1015.09       1015.92    
  30  0.656629     -0.420635      -18.9253       18.9253       1049.77       1068.69    
  31  0.932472     -0.699161E-01  -3.14568       3.14568       1112.57       1115.71    
  32  0.336775      -1.08834      -48.9669       48.9669       1106.52       1155.49    
  33  0.810758     -0.209786      -9.43874       9.43874       1105.28       1114.72    
  34  0.557014     -0.585166      -26.3279       26.3279       1122.64       1148.97    
  35  0.652747     -0.426565      -19.1921       19.1921       1128.78       1147.97    
  36  0.890774     -0.115665      -5.20401       5.20401       1140.92       1146.12    
  37  0.703035     -0.352349      -15.8530       15.8530       1142.53       1158.39    
  38  0.534296     -0.626805      -28.2013       28.2013       1017.12       1045.32    
  39  0.604162     -0.503914      -22.6722       22.6722       1144.36       1167.03    
  40  0.545557     -0.605948      -27.2629       27.2629       1131.18       1158.44    
  41  0.371346     -0.990620      -44.5702       44.5702       1166.27       1210.84    
  42  0.491801     -0.709680      -31.9301       31.9301       1143.67       1175.60    
  43  0.879731     -0.128139      -5.76527       5.76527       1167.35       1173.11    
  44  0.995113     -0.489866E-02 -0.220401      0.220401       1094.88       1095.10    
  45  0.467927     -0.759444      -34.1691       34.1691       1053.15       1087.32    
  46  0.355083      -1.03540      -46.5851       46.5851       1106.41       1153.00    
  47  0.216960      -1.52804      -68.7500       68.7500       1139.63       1208.38    
  48  0.276988      -1.28378      -57.7601       57.7601       1088.88       1146.64    
  49  0.905458     -0.993144E-01  -4.46838       4.46838       1163.17       1167.63    
  50  0.704241     -0.350635      -15.7758       15.7758       1185.18       1200.96    
  51  0.784564     -0.242627      -10.9163       10.9163       1159.55       1170.46    
  52  0.329376      -1.11055      -49.9663       49.9663       1174.18       1224.15    
  53  0.845894     -0.167361      -7.52994       7.52994       1000.12       1007.65    
loop,thermsimp(1:2)        5   20.7717       5.93748    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225        988.08          0.84          1.14         21.84          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    226       1403.62          0.84          1.13         21.99          0.00          0.05         24.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    988.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        5
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        6
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      225     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -68.9545       68.9545       996.403       1065.36    
   2  0.942431     -0.592928E-01  -2.66772       2.66772       980.018       982.686    
   3  0.193824      -1.64081      -73.8235       73.8235       1005.24       1079.06    
   4  0.162512      -1.81700      -81.7511       81.7511       986.238       1067.99    
   5  0.625243     -0.469616      -21.1291       21.1291       1000.12       1021.25    
   6  0.499178     -0.694793      -31.2603       31.2603       1004.20       1035.46    
   7  0.706095     -0.348006      -15.6576       15.6576       1015.09       1030.75    
   8  0.527414     -0.639770      -28.7847       28.7847       983.679       1012.46    
   9  0.575748     -0.552085      -24.8395       24.8395       1032.65       1057.49    
  10  0.490522     -0.712286      -32.0473       32.0473       1036.72       1068.77    
  11  0.306517      -1.18248      -53.2026       53.2026       1017.12       1070.32    
  12  0.798470     -0.225057      -10.1258       10.1258       1034.31       1044.44    
  13  0.333550      -1.09796      -49.3998       49.3998       1049.34       1098.74    
  14  0.166731      -1.79138      -80.5980       80.5980       1007.29       1087.89    
  15  0.443580     -0.812878      -36.5732       36.5732       1024.69       1061.26    
  16  0.669985     -0.400500      -18.0194       18.0194       1049.77       1067.79    
  17  0.339921      -1.07904      -48.5485       48.5485       1053.81       1102.36    
  18  0.201260      -1.60316      -72.1297       72.1297       1029.43       1101.56    
  19  0.772250     -0.258447      -11.6281       11.6281       1039.96       1051.59    
  20  0.401372E-01  -3.21545      -144.670       144.670       1074.82       1219.49    
  21  0.940962     -0.608526E-01  -2.73790       2.73790       1053.15       1055.89    
  22  0.115324      -2.16001      -97.1838       97.1838       1015.46       1112.64    
  23  0.939991E-01  -2.36447      -106.383       106.383       1051.91       1158.29    
  24  0.412221     -0.886196      -39.8719       39.8719       1024.24       1064.11    
  25  0.136462      -1.99171      -89.6115       89.6115       1051.03       1140.64    
  26  0.310095      -1.17088      -52.6803       52.6803       1094.88       1147.56    
  27  0.985727     -0.143755E-01 -0.646785      0.646785       1058.01       1058.66    
  28  0.900161     -0.105182      -4.73236       4.73236       997.671       1002.40    
  29  0.250220      -1.38542      -62.3330       62.3330       1064.83       1127.16    
  30  0.780405     -0.247942      -11.1555       11.1555       1031.63       1042.78    
  31  0.228719      -1.47526      -66.3752       66.3752       1105.28       1171.65    
  32  0.407088     -0.898727      -40.4357       40.4357       1112.57       1153.00    
  33  0.975627     -0.246749E-01  -1.11018       1.11018       1058.50       1059.61    
  34  0.885140     -0.122009      -5.48948       5.48948       993.949       999.439    
  35  0.896135     -0.109664      -4.93404       4.93404       1093.40       1098.33    
  36  0.856661     -0.154713      -6.96089       6.96089       1140.92       1147.88    
  37  0.258643      -1.35231      -60.8434       60.8434       1088.88       1149.72    
  38  0.336283      -1.08980      -49.0326       49.0326       1128.78       1177.81    
  39  0.868205     -0.141327      -6.35862       6.35862       1122.64       1129.00    
  40  0.937935     -0.640747E-01  -2.88286       2.88286       1106.41       1109.29    
  41  0.418906     -0.870109      -39.1482       39.1482       1106.52       1145.67    
  42  0.351040      -1.04685      -47.1003       47.1003       1142.53       1189.63    
  43  0.611628E-01  -2.79422      -125.718       125.718       1131.18       1256.89    
  44  0.153518      -1.87394      -84.3127       84.3127       1144.36       1228.67    
  45  0.938341     -0.636423E-01  -2.86341       2.86341       1163.17       1166.03    
  46  0.598133     -0.513942      -23.1234       23.1234       1159.55       1182.67    
  47  0.795771     -0.228444      -10.2782       10.2782       1167.35       1177.63    
  48  0.295375      -1.21951      -54.8685       54.8685       1143.67       1198.54    
  49  0.804738     -0.217239      -9.77407       9.77407       1185.18       1194.96    
  50  0.260094      -1.34671      -60.5917       60.5917       1139.63       1200.22    
  51  0.640517     -0.445479      -20.0431       20.0431       1166.27       1186.31    
  52  0.221872      -1.50566      -67.7428       67.7428       1057.36       1125.10    
  53  0.837141     -0.177762      -7.99793       7.99793       988.084       996.082    
loop,thermsimp(1:2)        6   68.9545       2.66772    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227        971.91          0.84          1.15         21.85          0.00          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    228       1072.25          0.84          1.15         21.91          0.00          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    971.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        6
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        7
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      227     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -59.8844       59.8844       980.018       1039.90    
   2  0.401807     -0.911784      -41.0232       41.0232       988.084       1029.11    
   3  0.418885     -0.870159      -39.1504       39.1504       993.949       1033.10    
   4  0.753378     -0.283189      -12.7413       12.7413       997.671       1010.41    
   5  0.792066     -0.233111      -10.4882       10.4882       983.679       994.168    
   6  0.868474     -0.141017      -6.34467       6.34467       1000.12       1006.47    
   7  0.318670      -1.14360      -51.4530       51.4530       1015.09       1066.55    
   8  0.863267     -0.147031      -6.61525       6.61525       1004.20       1010.82    
   9  0.589255     -0.528896      -23.7962       23.7962       1031.63       1055.42    
  10  0.632079E-01  -2.76133      -124.238       124.238       1034.31       1158.55    
  11  0.992270     -0.775975E-02 -0.349129      0.349129       1039.96       1040.31    
  12  0.466140     -0.763269      -34.3412       34.3412       1053.15       1087.49    
  13  0.177509      -1.72873      -77.7795       77.7795       1032.65       1110.43    
  14  0.933326     -0.690005E-01  -3.10449       3.10449       1058.01       1061.12    
  15  0.876357     -0.131982      -5.93815       5.93815       1058.50       1064.44    
  16  0.673496     -0.395274      -17.7843       17.7843       1024.69       1042.47    
  17  0.648708     -0.432773      -19.4714       19.4714       1024.24       1043.71    
  18  0.400813     -0.914259      -41.1346       41.1346       996.403       1037.54    
  19  0.763164     -0.270282      -12.1606       12.1606       1049.77       1061.93    
  20  0.196240      -1.62842      -73.2661       73.2661       986.238       1059.50    
  21  0.923666     -0.794046E-01  -3.57259       3.57259       1036.72       1040.29    
  22  0.999600     -0.400298E-03 -0.180103E-01  0.180103E-01   1017.12       1017.14    
  23  0.379715     -0.968335      -43.5676       43.5676       1005.24       1048.81    
  24  0.197375      -1.62265      -73.0066       73.0066       1007.29       1080.30    
  25  0.760736     -0.273468      -12.3040       12.3040       1093.40       1105.70    
  26  0.392182     -0.936030      -42.1141       42.1141       1049.34       1091.46    
  27  0.256208      -1.36177      -61.2689       61.2689       1029.43       1090.70    
  28  0.251796      -1.37914      -62.0504       62.0504       1053.81       1115.86    
  29  0.332089E-01  -3.40494      -153.196       153.196       1106.41       1259.61    
  30  0.970457     -0.299883E-01  -1.34924       1.34924       1015.46       1016.81    
  31  0.467370E-01  -3.06322      -137.821       137.821       1057.36       1195.18    
  32  0.716125     -0.333901      -15.0229       15.0229       1064.83       1079.85    
  33  0.757897     -0.277208      -12.4722       12.4722       1122.64       1135.11    
  34  0.765628     -0.267059      -12.0156       12.0156       1051.03       1063.04    
  35  0.323816      -1.12758      -50.7324       50.7324       1106.52       1157.25    
  36  0.909845     -0.944807E-01  -4.25090       4.25090       1094.88       1099.13    
  37  0.515782     -0.662071      -29.7881       29.7881       1140.92       1170.71    
  38  0.464370     -0.767074      -34.5124       34.5124       1088.88       1123.39    
  39  0.445707     -0.808094      -36.3580       36.3580       1112.57       1148.92    
  40  0.786320     -0.240391      -10.8158       10.8158       1051.91       1062.72    
  41  0.631860     -0.459087      -20.6553       20.6553       1163.17       1183.82    
  42  0.672488     -0.396772      -17.8516       17.8516       1105.28       1123.13    
  43  0.251717E-02  -5.98462      -269.261       269.261       1167.35       1436.61    
  44  0.245023      -1.40640      -63.2773       63.2773       1128.78       1192.06    
  45  0.252688      -1.37560      -61.8913       61.8913       1159.55       1221.44    
  46  0.268946      -1.31324      -59.0858       59.0858       1166.27       1225.35    
  47  0.550357     -0.597189      -26.8689       26.8689       1142.53       1169.40    
  48  0.826205     -0.190912      -8.58956       8.58956       1185.18       1193.77    
  49  0.964276     -0.363780E-01  -1.63673       1.63673       1143.67       1145.31    
  50  0.415479     -0.878324      -39.5178       39.5178       1139.63       1179.14    
  51  0.599143E-01  -2.81484      -126.646       126.646       1074.82       1201.47    
  52  0.348555      -1.05396      -47.4200       47.4200       1144.36       1191.78    
  53  0.243819      -1.41133      -63.4989       63.4989       971.915       1035.41    
loop,thermsimp(1:2)        7   59.8844       41.0232    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229        973.41          0.84          1.14         21.86          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230       1011.72          0.85          1.14         21.96          0.00          0.05         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    973.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        7
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        8
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      229     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -101.056       101.056       983.679       1084.74    
   2  0.476819     -0.740619      -33.3221       33.3221       1000.12       1033.44    
   3  0.564430     -0.571938      -25.7328       25.7328       997.671       1023.40    
   4  0.211741      -1.55239      -69.8456       69.8456       1004.20       1074.05    
   5  0.154226E-01  -4.17192      -187.704       187.704       1015.46       1203.16    
   6  0.489577     -0.714213      -32.1340       32.1340       1017.12       1049.26    
   7  0.583965     -0.537914      -24.2020       24.2020       988.084       1012.29    
   8  0.430258     -0.843370      -37.9451       37.9451       993.949       1031.89    
   9  0.280982      -1.26946      -57.1161       57.1161       971.915       1029.03    
  10  0.535183     -0.625146      -28.1267       28.1267       996.403       1024.53    
  11  0.306750      -1.18172      -53.1684       53.1684       980.018       1033.19    
  12  0.924930     -0.780370E-01  -3.51106       3.51106       1036.72       1040.23    
  13  0.829670E-01  -2.48931      -112.000       112.000       1039.96       1151.96    
  14  0.330275      -1.10783      -49.8437       49.8437       1024.69       1074.53    
  15  0.229751      -1.47076      -66.1727       66.1727       1024.24       1090.41    
  16  0.455737     -0.785839      -35.3567       35.3567       1005.24       1040.59    
  17  0.830949     -0.185187      -8.33199       8.33199       1031.63       1039.96    
  18  0.148624      -1.90634      -85.7705       85.7705       986.238       1072.01    
  19  0.883001     -0.124429      -5.59835       5.59835       1058.01       1063.61    
  20  0.668001     -0.403466      -18.1528       18.1528       1049.77       1067.92    
  21  0.610583     -0.493341      -22.1965       22.1965       1051.91       1074.11    
  22  0.689050     -0.372441      -16.7570       16.7570       1051.03       1067.79    
  23  0.124417      -2.08412      -93.7691       93.7691       1058.50       1152.27    
  24  0.785584E-01  -2.54391      -114.456       114.456       1015.09       1129.55    
  25  0.936565     -0.655366E-01  -2.94864       2.94864       1064.83       1067.78    
  26  0.483719     -0.726252      -32.6757       32.6757       1007.29       1039.97    
  27  0.715685     -0.334515      -15.0506       15.0506       1053.15       1068.20    
  28  0.786437     -0.240243      -10.8091       10.8091       1029.43       1040.24    
  29  0.361023      -1.01881      -45.8387       45.8387       1049.34       1095.18    
  30  0.325559      -1.12221      -50.4908       50.4908       1094.88       1145.37    
  31  0.850460     -0.161978      -7.28775       7.28775       1093.40       1100.69    
  32  0.301358      -1.19946      -53.9663       53.9663       1032.65       1086.62    
  33  0.304725      -1.18834      -53.4663       53.4663       1053.81       1107.28    
  34  0.887065     -0.119838      -5.39176       5.39176       1105.28       1110.67    
  35  0.762822     -0.270730      -12.1808       12.1808       1088.88       1101.06    
  36  0.364130      -1.01024      -45.4532       45.4532       1122.64       1168.09    
  37  0.762041     -0.271754      -12.2268       12.2268       1143.67       1155.90    
  38  0.941180     -0.606207E-01  -2.72746       2.72746       1112.57       1115.29    
  39  0.449403     -0.799835      -35.9864       35.9864       1106.52       1142.51    
  40  0.743855     -0.295910      -13.3136       13.3136       1034.31       1047.63    
  41  0.743104     -0.296920      -13.3591       13.3591       1142.53       1155.89    
  42  0.350527      -1.04832      -47.1661       47.1661       1140.92       1188.08    
  43  0.607240     -0.498831      -22.4435       22.4435       1139.63       1162.07    
  44  0.557347     -0.584567      -26.3010       26.3010       1163.17       1189.47    
  45  0.217970      -1.52340      -68.5410       68.5410       1144.36       1212.90    
  46  0.364570      -1.00904      -45.3988       45.3988       1128.78       1174.18    
  47  0.330900      -1.10594      -49.7587       49.7587       1185.18       1234.94    
  48  0.861127     -0.149514      -6.72695       6.72695       1057.36       1064.09    
  49  0.710764E-01  -2.64400      -118.959       118.959       1074.82       1193.78    
  50  0.264543      -1.32975      -59.8285       59.8285       1159.55       1219.38    
  51  0.985836     -0.142654E-01 -0.641833      0.641833       1166.27       1166.91    
  52  0.296563      -1.21550      -54.6879       54.6879       1106.41       1161.10    
  53  0.875112     -0.133403      -6.00210       6.00210       973.408       979.411    
loop,thermsimp(1:2)        8   101.056       33.3221    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231        968.91          0.82          1.14         22.21          0.03          0.07         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    232       1351.00          0.84          1.14         21.87          0.00          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    968.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        8
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:        9
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      231     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -19.9796       19.9796       973.408       993.388    
   2  0.805197     -0.216668      -9.74837       9.74837       988.084       997.833    
   3  0.976428     -0.238543E-01  -1.07326       1.07326       997.671       998.744    
   4  0.599028     -0.512447      -23.0561       23.0561       996.403       1019.46    
   5  0.591081     -0.525802      -23.6570       23.6570       971.915       995.572    
   6  0.151500      -1.88717      -84.9078       84.9078       993.949       1078.86    
   7  0.565682     -0.569723      -25.6331       25.6331       980.018       1005.65    
   8  0.345258      -1.06346      -47.8476       47.8476       1000.12       1047.97    
   9  0.658101     -0.418397      -18.8246       18.8246       1031.63       1050.45    
  10  0.691977E-01  -2.67079      -120.165       120.165       1007.29       1127.46    
  11  0.289062      -1.24111      -55.8405       55.8405       1036.72       1092.56    
  12  0.949819     -0.514835E-01  -2.31636       2.31636       1029.43       1031.75    
  13  0.791632     -0.233658      -10.5128       10.5128       1005.24       1015.75    
  14  0.400532     -0.914962      -41.1662       41.1662       1034.31       1075.48    
  15  0.241886      -1.41929      -63.8570       63.8570       1017.12       1080.98    
  16  0.383016     -0.959678      -43.1781       43.1781       1058.01       1101.19    
  17  0.993978     -0.604041E-02 -0.271771      0.271771       1057.36       1057.63    
  18  0.807089     -0.214322      -9.64282       9.64282       1064.83       1074.47    
  19  0.732161     -0.311755      -14.0265       14.0265       1051.03       1065.05    
  20  0.176507      -1.73440      -78.0344       78.0344       1049.77       1127.80    
  21  0.628098     -0.465059      -20.9240       20.9240       1053.15       1074.08    
  22  0.383392     -0.958697      -43.1339       43.1339       986.238       1029.37    
  23  0.906421     -0.982517E-01  -4.42057       4.42057       1004.20       1008.62    
  24  0.329288      -1.11082      -49.9785       49.9785       1051.91       1101.89    
  25  0.869436     -0.139911      -6.29490       6.29490       1024.69       1030.98    
  26  0.354994      -1.03565      -46.5964       46.5964       983.679       1030.28    
  27  0.127935      -2.05623      -92.5146       92.5146       1032.65       1125.17    
  28  0.840123     -0.174207      -7.83796       7.83796       1024.24       1032.08    
  29  0.625861     -0.468627      -21.0846       21.0846       1049.34       1070.43    
  30  0.488384     -0.716653      -32.2438       32.2438       1093.40       1125.64    
  31  0.888226E-01  -2.42111      -108.931       108.931       1088.88       1197.81    
  32  0.262955      -1.33577      -60.0993       60.0993       1053.81       1113.91    
  33  0.153205E-01  -4.17856      -188.003       188.003       1105.28       1293.28    
  34  0.432355     -0.838509      -37.7264       37.7264       1112.57       1150.29    
  35  0.225273      -1.49044      -67.0584       67.0584       1015.09       1082.15    
  36  0.812147     -0.208074      -9.36173       9.36173       1106.52       1115.88    
  37  0.832805E-01  -2.48554      -111.830       111.830       1094.88       1206.71    
  38  0.442280     -0.815813      -36.7052       36.7052       1039.96       1076.67    
  39  0.106639      -2.23831      -100.707       100.707       1058.50       1159.20    
  40  0.143053      -1.94454      -87.4891       87.4891       1142.53       1230.02    
  41  0.871774     -0.137225      -6.17407       6.17407       1143.67       1149.85    
  42  0.137692      -1.98273      -89.2076       89.2076       1106.41       1195.62    
  43  0.366512      -1.00372      -45.1598       45.1598       1139.63       1184.79    
  44  0.617157     -0.482633      -21.7147       21.7147       1166.27       1187.98    
  45  0.420337     -0.866700      -38.9948       38.9948       1122.64       1161.63    
  46  0.935846     -0.663044E-01  -2.98318       2.98318       1128.78       1131.76    
  47  0.979912     -0.202925E-01 -0.913003      0.913003       1140.92       1141.83    
  48  0.692793     -0.367024      -16.5133       16.5133       1163.17       1179.68    
  49  0.155424      -1.86160      -83.7576       83.7576       1074.82       1158.58    
  50  0.703218     -0.352088      -15.8412       15.8412       1015.46       1031.30    
  51  0.396734     -0.924489      -41.5949       41.5949       1144.36       1185.95    
  52  0.247863      -1.39488      -62.7588       62.7588       1159.55       1222.31    
  53  0.176690      -1.73336      -77.9878       77.9878       968.905       1046.89    
loop,thermsimp(1:2)        9   19.9796       9.74837    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233        985.71          0.84          1.14         21.93          0.01          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234       1876.58          0.86          1.14         21.85          0.01          0.05         23.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    985.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:        9
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       10
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      233     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -8.21223       8.21223       973.408       981.621    
   2  0.367543      -1.00091      -45.0334       45.0334       971.915       1016.95    
   3  0.528755     -0.637231      -28.6704       28.6704       988.084       1016.75    
   4  0.776829     -0.252535      -11.3621       11.3621       997.671       1009.03    
   5  0.149594E-01  -4.20242      -189.076       189.076       980.018       1169.09    
   6  0.892228     -0.114033      -5.13060       5.13060       1004.20       1009.33    
   7  0.191037      -1.65529      -74.4750       74.4750       1005.24       1079.71    
   8  0.516533     -0.660616      -29.7226       29.7226       996.403       1026.13    
   9  0.273230      -1.29744      -58.3749       58.3749       986.238       1044.61    
  10  0.822225     -0.195741      -8.80684       8.80684       983.679       992.486    
  11  0.359850      -1.02207      -45.9851       45.9851       1024.69       1070.67    
  12  0.611658     -0.491581      -22.1173       22.1173       1015.46       1037.58    
  13  0.249481      -1.38837      -62.4659       62.4659       1029.43       1091.90    
  14  0.441252     -0.818139      -36.8099       36.8099       1024.24       1061.05    
  15  0.910514E-01  -2.39633      -107.816       107.816       968.905       1076.72    
  16  0.745146     -0.294175      -13.2356       13.2356       1000.12       1013.36    
  17  0.758301     -0.276675      -12.4482       12.4482       1031.63       1044.08    
  18  0.638521     -0.448601      -20.1836       20.1836       1057.36       1077.55    
  19  0.150180      -1.89592      -85.3017       85.3017       1051.03       1136.33    
  20  0.144147      -1.93692      -87.1465       87.1465       1049.34       1136.49    
  21  0.104928      -2.25448      -101.434       101.434       1053.15       1154.59    
  22  0.398120     -0.921002      -41.4380       41.4380       1064.83       1106.27    
  23  0.802258     -0.220325      -9.91292       9.91292       1034.31       1044.23    
  24  0.399299     -0.918044      -41.3048       41.3048       1039.96       1081.27    
  25  0.493060     -0.707124      -31.8151       31.8151       993.949       1025.76    
  26  0.504407     -0.684372      -30.7914       30.7914       1017.12       1047.91    
  27  0.762058     -0.271733      -12.2259       12.2259       1015.09       1027.32    
  28  0.430267     -0.843350      -37.9442       37.9442       1036.72       1074.66    
  29  0.993832     -0.618725E-02 -0.278378      0.278378       1058.01       1058.29    
  30  0.705390     -0.349005      -15.7025       15.7025       1051.91       1067.61    
  31  0.969760     -0.307069E-01  -1.38157       1.38157       1053.81       1055.19    
  32  0.245618      -1.40398      -63.1681       63.1681       1106.52       1169.69    
  33  0.685790     -0.377184      -16.9704       16.9704       1032.65       1049.62    
  34  0.905089     -0.997222E-01  -4.48672       4.48672       1093.40       1097.89    
  35  0.414065     -0.881732      -39.6711       39.6711       1007.29       1046.97    
  36  0.714747E-01  -2.63841      -118.708       118.708       1049.77       1168.47    
  37  0.694510     -0.364548      -16.4018       16.4018       1128.78       1145.18    
  38  0.770213E-01  -2.56367      -115.345       115.345       1140.92       1256.26    
  39  0.846173     -0.167031      -7.51510       7.51510       1143.67       1151.19    
  40  0.485012     -0.723582      -32.5556       32.5556       1112.57       1145.12    
  41  0.345787      -1.06193      -47.7788       47.7788       1074.82       1122.60    
  42  0.851861     -0.160332      -7.21368       7.21368       1058.50       1065.71    
  43  0.774151     -0.255989      -11.5175       11.5175       1122.64       1134.16    
  44  0.512382     -0.668685      -30.0856       30.0856       1163.17       1193.25    
  45  0.839798     -0.174594      -7.85539       7.85539       1139.63       1147.48    
  46  0.430550     -0.842692      -37.9146       37.9146       1144.36       1182.27    
  47  0.988263     -0.118067E-01 -0.531209      0.531209       1166.27       1166.80    
  48  0.349495      -1.05127      -47.2988       47.2988       1106.41       1153.71    
  49  0.290701      -1.23546      -55.5861       55.5861       1088.88       1144.46    
  50  0.210466      -1.55843      -70.1173       70.1173       1094.88       1165.00    
  51  0.361038      -1.01877      -45.8368       45.8368       1159.55       1205.39    
  52  0.168890      -1.77851      -80.0191       80.0191       1142.53       1222.55    
  53  0.176000      -1.73727      -78.1637       78.1637       985.710       1063.87    
loop,thermsimp(1:2)       10   8.21223       45.0334    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235        962.53          0.86          1.14         21.83          0.00          0.06         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    236       1240.39          0.83          1.14         21.91          0.00          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    962.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       10
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       11
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      235     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -3.78104       3.78104       973.408       977.189    
   2  0.309089      -1.17413      -52.8266       52.8266       983.679       1036.51    
   3  0.237901      -1.43590      -64.6043       64.6043       997.671       1062.28    
   4  0.542467     -0.611627      -27.5185       27.5185       1004.20       1031.72    
   5  0.523672     -0.646889      -29.1050       29.1050       1000.12       1029.23    
   6  0.850058     -0.162450      -7.30899       7.30899       988.084       995.393    
   7  0.589343     -0.528746      -23.7895       23.7895       971.915       995.704    
   8  0.979269     -0.209490E-01 -0.942540      0.942540       993.949       994.892    
   9  0.110419      -2.20347      -99.1392       99.1392       996.403       1095.54    
  10  0.557914     -0.583550      -26.2552       26.2552       1015.09       1041.35    
  11  0.474464     -0.745569      -33.5448       33.5448       1015.46       1049.00    
  12  0.312482      -1.16321      -52.3353       52.3353       1031.63       1083.96    
  13  0.297011      -1.21399      -54.6200       54.6200       1034.31       1088.93    
  14  0.857571     -0.153651      -6.91312       6.91312       986.238       993.151    
  15  0.792567     -0.232479      -10.4597       10.4597       1007.29       1017.75    
  16  0.963006     -0.376958E-01  -1.69602       1.69602       1017.12       1018.82    
  17  0.294103      -1.22382      -55.0626       55.0626       1032.65       1087.72    
  18  0.403484     -0.907618      -40.8358       40.8358       1053.81       1094.65    
  19  0.449313     -0.800035      -35.9954       35.9954       1058.01       1094.01    
  20  0.721912     -0.325852      -14.6608       14.6608       1024.24       1038.90    
  21  0.512488     -0.668479      -30.0764       30.0764       985.710       1015.79    
  22  0.885190     -0.121953      -5.48693       5.48693       1058.50       1063.99    
  23  0.694751E-01  -2.66679      -119.985       119.985       1051.91       1171.89    
  24  0.820879     -0.197380      -8.88056       8.88056       1024.69       1033.57    
  25  0.211527      -1.55340      -69.8912       69.8912       1036.72       1106.61    
  26  0.937420     -0.646236E-01  -2.90756       2.90756       968.905       971.813    
  27  0.515756E-01  -2.96471      -133.389       133.389       1057.36       1190.75    
  28  0.695222     -0.363525      -16.3558       16.3558       1005.24       1021.59    
  29  0.718776     -0.330205      -14.8567       14.8567       1039.96       1054.82    
  30  0.536080     -0.623471      -28.0514       28.0514       1029.43       1057.48    
  31  0.585855     -0.534682      -24.0566       24.0566       1093.40       1117.46    
  32  0.693572     -0.365900      -16.4627       16.4627       1064.83       1081.29    
  33  0.700823     -0.355500      -15.9947       15.9947       1074.82       1090.82    
  34  0.250985      -1.38236      -62.1955       62.1955       1122.64       1184.83    
  35  0.290600      -1.23581      -55.6017       55.6017       1051.03       1106.63    
  36  0.828609     -0.188007      -8.45887       8.45887       1049.34       1057.80    
  37  0.225820      -1.48802      -66.9493       66.9493       1088.88       1155.83    
  38  0.999674     -0.326354E-03 -0.146834E-01  0.146834E-01   1112.57       1112.58    
  39  0.878216     -0.129862      -5.84280       5.84280       1128.78       1134.62    
  40  0.685898E-01  -2.67961      -120.562       120.562       1139.63       1260.19    
  41  0.273860      -1.29514      -58.2711       58.2711       1143.67       1201.94    
  42  0.697655     -0.360030      -16.1986       16.1986       1106.41       1122.61    
  43  0.293168      -1.22701      -55.2058       55.2058       1053.15       1108.36    
  44  0.319476      -1.14107      -51.3394       51.3394       1094.88       1146.22    
  45  0.874681     -0.133896      -6.02430       6.02430       1166.27       1172.29    
  46  0.408697     -0.894781      -40.2582       40.2582       1049.77       1090.02    
  47  0.142130E-01  -4.25360      -191.379       191.379       980.018       1171.40    
  48  0.164528      -1.80468      -81.1964       81.1964       1106.52       1187.72    
  49  0.652669     -0.426685      -19.1975       19.1975       1144.36       1163.56    
  50  0.492107     -0.709060      -31.9022       31.9022       1163.17       1195.07    
  51  0.542705     -0.611189      -27.4988       27.4988       1159.55       1187.05    
  52  0.798603     -0.224891      -10.1184       10.1184       1142.53       1152.65    
  53  0.474092E-01  -3.04894      -137.179       137.179       962.533       1099.71    
loop,thermsimp(1:2)       11   3.78104       52.8266    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237        944.20          0.85          1.15         21.86          0.00          0.06         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    238       1186.41          0.83          1.14         22.14          0.00          0.05         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    944.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       11
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       12
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      237     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -12.1781       12.1781       968.905       981.083    
   2  0.482922E-01  -3.03048      -136.348       136.348       973.408       1109.76    
   3  0.612960     -0.489456      -22.0217       22.0217       986.238       1008.26    
   4  0.910127     -0.941714E-01  -4.23698       4.23698       993.949       998.186    
   5  0.362433      -1.01492      -45.6634       45.6634       988.084       1033.75    
   6  0.476779     -0.740702      -33.3259       33.3259       971.915       1005.24    
   7  0.179006E-01  -4.02292      -181.000       181.000       985.710       1166.71    
   8  0.589646     -0.528233      -23.7664       23.7664       1007.29       1031.06    
   9  0.926206     -0.766581E-01  -3.44902       3.44902       1017.12       1020.57    
  10  0.492629     -0.707999      -31.8545       31.8545       1005.24       1037.09    
  11  0.661123     -0.413815      -18.6185       18.6185       1000.12       1018.74    
  12  0.542248     -0.612032      -27.5367       27.5367       1004.20       1031.74    
  13  0.216527      -1.53004      -68.8399       68.8399       1024.69       1093.53    
  14  0.549832     -0.598143      -26.9118       26.9118       983.679       1010.59    
  15  0.429556     -0.845003      -38.0186       38.0186       1024.24       1062.26    
  16  0.264838      -1.32864      -59.7783       59.7783       1015.09       1074.87    
  17  0.251706      -1.37949      -62.0665       62.0665       1015.46       1077.53    
  18  0.701724     -0.354215      -15.9369       15.9369       1039.96       1055.90    
  19  0.324289      -1.12612      -50.6666       50.6666       1029.43       1080.10    
  20  0.160749E-02  -6.43308      -289.439       289.439       1049.34       1338.78    
  21  0.533627     -0.628058      -28.2578       28.2578       997.671       1025.93    
  22  0.883065     -0.124357      -5.59508       5.59508       1058.50       1064.09    
  23  0.484824     -0.723969      -32.5730       32.5730       1064.83       1097.40    
  24  0.724157     -0.322747      -14.5211       14.5211       1031.63       1046.15    
  25  0.847375     -0.165612      -7.45127       7.45127       1032.65       1040.11    
  26  0.167586      -1.78626      -80.3678       80.3678       1034.31       1114.68    
  27  0.890079     -0.116445      -5.23911       5.23911       1049.77       1055.01    
  28  0.235223      -1.44722      -65.1138       65.1138       1074.82       1139.93    
  29  0.206112      -1.57934      -71.0579       71.0579       1058.01       1129.07    
  30  0.463385     -0.769198      -34.6079       34.6079       1053.81       1088.42    
  31  0.487880E-01  -3.02027      -135.889       135.889       996.403       1132.29    
  32  0.244157      -1.40994      -63.4365       63.4365       962.533       1025.97    
  33  0.770602     -0.260583      -11.7242       11.7242       1036.72       1048.44    
  34  0.264159      -1.33120      -59.8938       59.8938       1051.03       1110.92    
  35  0.189030E-01  -3.96843      -178.549       178.549       1053.15       1231.70    
  36  0.635342     -0.453592      -20.4081       20.4081       1112.57       1132.97    
  37  0.139550      -1.96933      -88.6046       88.6046       1093.40       1182.01    
  38  0.561566     -0.577026      -25.9617       25.9617       1106.41       1132.37    
  39  0.951789     -0.494118E-01  -2.22315       2.22315       1128.78       1131.00    
  40  0.527693     -0.639242      -28.7609       28.7609       1094.88       1123.64    
  41  0.925337     -0.775972E-01  -3.49127       3.49127       1142.53       1146.02    
  42  0.795352     -0.228971      -10.3019       10.3019       1088.88       1099.18    
  43  0.530799     -0.633371      -28.4968       28.4968       1144.36       1172.86    
  44  0.642763     -0.441979      -19.8856       19.8856       980.018       999.904    
  45  0.485146     -0.723305      -32.5431       32.5431       1051.91       1084.45    
  46  0.795896     -0.228287      -10.2711       10.2711       1166.27       1176.54    
  47  0.519140     -0.655581      -29.4961       29.4961       1122.64       1152.13    
  48  0.694073E-01  -2.66776      -120.029       120.029       1159.55       1279.58    
  49  0.401486     -0.912583      -41.0592       41.0592       1106.52       1147.58    
  50  0.587982E-01  -2.83364      -127.492       127.492       1057.36       1184.85    
  51  0.752652     -0.284152      -12.7846       12.7846       1163.17       1175.95    
  52  0.139929      -1.96662      -88.4828       88.4828       1143.67       1232.16    
  53  0.136759      -1.98953      -89.5135       89.5135       944.199       1033.71    
loop,thermsimp(1:2)       12   12.1781       136.348    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239       1020.60          0.85          1.15         21.85          0.00          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    240       1112.58          0.84          1.15         21.82          0.00          0.04         23.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1020.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       12
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       13
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      239     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -23.5257       23.5257       968.905       992.431    
   2  0.691791     -0.368472      -16.5784       16.5784       993.949       1010.53    
   3  0.688173     -0.373715      -16.8143       16.8143       980.018       996.832    
   4  0.439966     -0.821058      -36.9412       36.9412       971.915       1008.86    
   5  0.945690     -0.558403E-01  -2.51238       2.51238       986.238       988.750    
   6  0.238956      -1.43147      -64.4052       64.4052       983.679       1048.08    
   7  0.280830E-01  -3.57259      -160.739       160.739       1000.12       1160.86    
   8  0.902031E-01  -2.40569      -108.237       108.237       1017.12       1125.36    
   9  0.198361      -1.61767      -72.7824       72.7824       997.671       1070.45    
  10  0.201288      -1.60302      -72.1234       72.1234       962.533       1034.66    
  11  0.710033     -0.342444      -15.4073       15.4073       1007.29       1022.70    
  12  0.182913      -1.69874      -76.4303       76.4303       1004.20       1080.63    
  13  0.817316     -0.201730      -9.07626       9.07626       944.199       953.275    
  14  0.894732     -0.111231      -5.00452       5.00452       988.084       993.089    
  15  0.854000     -0.157824      -7.10086       7.10086       1005.24       1012.34    
  16  0.248066      -1.39406      -62.7219       62.7219       1032.65       1095.38    
  17  0.670877     -0.399170      -17.9595       17.9595       1031.63       1049.59    
  18  0.701473     -0.354573      -15.9530       15.9530       1036.72       1052.67    
  19  0.199467      -1.61210      -72.5322       72.5322       1049.77       1122.30    
  20  0.391533     -0.937685      -42.1886       42.1886       1039.96       1082.15    
  21  0.586761     -0.533138      -23.9871       23.9871       1024.24       1048.23    
  22  0.163799      -1.80912      -81.3962       81.3962       1058.50       1139.89    
  23  0.955964     -0.450353E-01  -2.02624       2.02624       1015.09       1017.12    
  24  0.365727      -1.00587      -45.2562       45.2562       1015.46       1060.72    
  25  0.733577     -0.309822      -13.9396       13.9396       1029.43       1043.37    
  26  0.111597      -2.19286      -98.6617       98.6617       1051.91       1150.57    
  27  0.714895     -0.335619      -15.1003       15.1003       1053.81       1068.91    
  28  0.816688     -0.202498      -9.11083       9.11083       1024.69       1033.80    
  29  0.480603     -0.732714      -32.9664       32.9664       1064.83       1097.80    
  30  0.573891     -0.555316      -24.9849       24.9849       1088.88       1113.86    
  31  0.204452      -1.58742      -71.4217       71.4217       973.408       1044.83    
  32  0.845356E-01  -2.47058      -111.157       111.157       1051.03       1162.19    
  33  0.524789E-01  -2.94734      -132.608       132.608       1034.31       1166.92    
  34  0.631781     -0.459213      -20.6610       20.6610       1094.88       1115.54    
  35  0.620363     -0.477450      -21.4815       21.4815       1058.01       1079.49    
  36  0.553551     -0.591402      -26.6085       26.6085       1128.78       1155.39    
  37  0.546271     -0.604640      -27.2041       27.2041       996.403       1023.61    
  38  0.402204     -0.910797      -40.9788       40.9788       1106.41       1147.39    
  39  0.735174     -0.307648      -13.8418       13.8418       1112.57       1126.41    
  40  0.359565      -1.02286      -46.0207       46.0207       1074.82       1120.84    
  41  0.564111     -0.572504      -25.7583       25.7583       1142.53       1168.29    
  42  0.412661     -0.885128      -39.8239       39.8239       1106.52       1146.35    
  43  0.795853     -0.228341      -10.2736       10.2736       1122.64       1132.91    
  44  0.909991E-01  -2.39691      -107.842       107.842       985.710       1093.55    
  45  0.830687     -0.185502      -8.34616       8.34616       1144.36       1152.71    
  46  0.592588     -0.523256      -23.5425       23.5425       1163.17       1186.71    
  47  0.489472     -0.714427      -32.1437       32.1437       1166.27       1198.41    
  48  0.992056     -0.797586E-02 -0.358852      0.358852       1093.40       1093.76    
  49  0.808208     -0.212936      -9.58045       9.58045       1057.36       1066.94    
  50  0.212569      -1.54849      -69.6700       69.6700       1053.15       1122.82    
  51  0.214041      -1.54159      -69.3596       69.3596       1143.67       1213.03    
  52  0.586527     -0.533536      -24.0050       24.0050       1159.55       1183.55    
  53  0.603460     -0.505075      -22.7244       22.7244       1020.60       1043.32    
loop,thermsimp(1:2)       13   23.5257       16.5784    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241       1285.25          0.85          1.14         21.93          0.00          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    242       1048.77          0.84          1.14         21.82          0.01          0.05         23.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    1285.2        1.108     -2.177      3.771     -102.6      1.182    
                       1.077      1.172     -99.70      4.448      1.414    

                       2.169     -2.256      1.540      7000.      7000.    

                      -1.811      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.197     -7.868     -11.41      7.052    

                      -16.34     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1820E-01 0.3093     0.6763E-01 0.2327    

                     -0.2486    -0.1360     0.2083     0.1597     0.1745    



                     -0.4881    -0.6026      0.000     0.1491    -0.1130    

                     -0.1539E-01 0.2196    -0.7116    -0.1021     0.3557    

                      0.1325     0.1150    -0.8098     -1.425      7000.    



                      -1.520    -0.4108     -2.142     -1.982    -0.3807    

                     -0.3252      9.347      8.769    -0.1672E+05 -6.000    

                     -0.5042E-01 -2.313      9.449      8.918    -0.1969E+05



                      -6.000     0.6512    -0.3481      8.912      9.167    

                     -0.1944E+05 -6.000    -0.6684    -0.5789      9.062    

                       8.895    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1048.77
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       13
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       14
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      241     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -48.6731       48.6731       944.199       992.872    
   2  0.649641     -0.431335      -19.4067       19.4067       986.238       1005.64    
   3  0.930116     -0.724456E-01  -3.25949       3.25949       968.905       972.165    
   4  0.297326      -1.21293      -54.5723       54.5723       988.084       1042.66    
   5  0.751734     -0.285373      -12.8396       12.8396       980.018       992.858    
   6  0.409056     -0.893902      -40.2187       40.2187       971.915       1012.13    
   7  0.115094      -2.16201      -97.2735       97.2735       993.949       1091.22    
   8  0.606681     -0.499753      -22.4850       22.4850       1005.24       1027.72    
   9  0.140571      -1.96204      -88.2768       88.2768       1015.09       1103.37    
  10  0.447669E-01  -3.10629      -139.759       139.759       1007.29       1147.05    
  11  0.517394     -0.658951      -29.6477       29.6477       996.403       1026.05    
  12  0.587057     -0.532633      -23.9644       23.9644       1024.69       1048.65    
  13  0.384993E-01  -3.25712      -146.545       146.545       962.533       1109.08    
  14  0.829105E-01  -2.48999      -112.030       112.030       1020.60       1132.63    
  15  0.382179     -0.961866      -43.2765       43.2765       1029.43       1072.71    
  16  0.269516      -1.31113      -58.9906       58.9906       973.408       1032.40    
  17  0.879580     -0.128311      -5.77299       5.77299       983.679       989.452    
  18  0.760503E-01  -2.57636      -115.916       115.916       1024.24       1140.16    
  19  0.482544     -0.728684      -32.7851       32.7851       1031.63       1064.41    
  20  0.561499     -0.577145      -25.9671       25.9671       1036.72       1062.69    
  21  0.254621      -1.36798      -61.5484       61.5484       1015.46       1077.01    
  22  0.479261     -0.735511      -33.0923       33.0923       1057.36       1090.45    
  23  0.638455     -0.448704      -20.1882       20.1882       1053.81       1074.00    
  24  0.289082      -1.24105      -55.8374       55.8374       997.671       1053.51    
  25  0.656024     -0.421558      -18.9668       18.9668       1058.01       1076.98    
  26  0.597431     -0.515117      -23.1763       23.1763       1004.20       1027.38    
  27  0.859562     -0.151333      -6.80881       6.80881       1039.96       1046.77    
  28  0.554826     -0.589100      -26.5049       26.5049       985.710       1012.21    
  29  0.128413      -2.05250      -92.3468       92.3468       1093.40       1185.75    
  30  0.311170      -1.16742      -52.5247       52.5247       1032.65       1085.18    
  31  0.606679     -0.499755      -22.4851       22.4851       1064.83       1087.32    
  32  0.923238     -0.798686E-01  -3.59347       3.59347       1088.88       1092.47    
  33  0.734154     -0.309037      -13.9043       13.9043       1094.88       1108.79    
  34  0.988670     -0.113947E-01 -0.512674      0.512674       1074.82       1075.33    
  35  0.136308      -1.99284      -89.6622       89.6622       1049.77       1139.43    
  36  0.345839      -1.06178      -47.7720       47.7720       1053.15       1100.93    
  37  0.349440      -1.05142      -47.3059       47.3059       1017.12       1064.43    
  38  0.625658E-01  -2.77154      -124.698       124.698       1112.57       1237.26    
  39  0.394804     -0.929365      -41.8142       41.8142       1122.64       1164.45    
  40  0.899667E-02  -4.71090      -211.954       211.954       1058.50       1270.45    
  41  0.823946     -0.193651      -8.71277       8.71277       1106.52       1115.23    
  42  0.834235     -0.181240      -8.15441       8.15441       1106.41       1114.57    
  43  0.777534     -0.251627      -11.3213       11.3213       1051.91       1063.23    
  44  0.384993     -0.954531      -42.9465       42.9465       1144.36       1187.31    
  45  0.247443E-01  -3.69916      -166.434       166.434       1128.78       1295.21    
  46  0.810695     -0.209863      -9.44221       9.44221       1000.12       1009.56    
  47  0.893618     -0.112477      -5.06058       5.06058       1051.03       1056.09    
  48  0.545617     -0.605837      -27.2580       27.2580       1034.31       1061.57    
  49  0.587193     -0.532402      -23.9540       23.9540       1142.53       1166.49    
  50  0.991207     -0.883185E-02 -0.397365      0.397365       1159.55       1159.95    
  51  0.477440     -0.739316      -33.2635       33.2635       1163.17       1196.43    
  52  0.444858     -0.810000      -36.4437       36.4437       1166.27       1202.71    
  53  0.103440      -2.26876      -102.077       102.077       1048.77       1150.85    
loop,thermsimp(1:2)       14   48.6731       19.4067    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243       1503.65          0.85          1.15         21.89          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    244       1099.06          0.84          1.14         21.85          0.00          0.05         23.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1099.06
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       14
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       15
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      243     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -68.1805       68.1805       968.905       1037.09    
   2  0.894567E-01  -2.41400      -108.611       108.611       983.679       1092.29    
   3  0.863615     -0.146628      -6.59712       6.59712       980.018       986.615    
   4  0.807990     -0.213206      -9.59261       9.59261       944.199       953.792    
   5  0.318173      -1.14516      -51.5233       51.5233       986.238       1037.76    
   6  0.464606     -0.766566      -34.4895       34.4895       1000.12       1034.61    
   7  0.574933     -0.553501      -24.9033       24.9033       971.915       996.818    
   8  0.974939     -0.253802E-01  -1.14191       1.14191       985.710       986.852    
   9  0.415757     -0.877653      -39.4876       39.4876       996.403       1035.89    
  10  0.187109      -1.67606      -75.4098       75.4098       1004.20       1079.61    
  11  0.730515E-01  -2.61659      -117.726       117.726       1005.24       1122.96    
  12  0.209185      -1.56454      -70.3921       70.3921       973.408       1043.80    
  13  0.496690     -0.699790      -31.4851       31.4851       988.084       1019.57    
  14  0.862986     -0.147356      -6.62990       6.62990       1039.96       1046.59    
  15  0.888200     -0.118558      -5.33419       5.33419       1024.69       1030.02    
  16  0.380888     -0.965250      -43.4288       43.4288       997.671       1041.10    
  17  0.135305      -2.00022      -89.9945       89.9945       1051.03       1141.02    
  18  0.927079     -0.757167E-01  -3.40666       3.40666       1034.31       1037.72    
  19  0.603067     -0.505727      -22.7538       22.7538       1036.72       1059.47    
  20  0.136202      -1.99362      -89.6974       89.6974       1051.91       1141.61    
  21  0.954653     -0.464076E-01  -2.08798       2.08798       1031.63       1033.71    
  22  0.151192      -1.88920      -84.9996       84.9996       1017.12       1102.12    
  23  0.449259     -0.800155      -36.0008       36.0008       1029.43       1065.43    
  24  0.780874     -0.247341      -11.1284       11.1284       1053.81       1064.94    
  25  0.456238     -0.784740      -35.3072       35.3072       1074.82       1110.13    
  26  0.163284      -1.81227      -81.5379       81.5379       1058.01       1139.55    
  27  0.821444     -0.196692      -8.84960       8.84960       1015.46       1024.31    
  28  0.861448     -0.149141      -6.71018       6.71018       1032.65       1039.36    
  29  0.924167     -0.788621E-01  -3.54818       3.54818       1064.83       1068.38    
  30  0.195059      -1.63445      -73.5378       73.5378       1057.36       1130.90    
  31  0.375134     -0.980472      -44.1136       44.1136       993.949       1038.06    
  32  0.909862     -0.944628E-01  -4.25009       4.25009       1088.88       1093.13    
  33  0.831459     -0.184574      -8.30439       8.30439       1053.15       1061.46    
  34  0.627278     -0.466365      -20.9828       20.9828       1015.09       1036.08    
  35  0.918890     -0.845891E-01  -3.80585       3.80585       1094.88       1098.69    
  36  0.475784     -0.742791      -33.4198       33.4198       962.533       995.953    
  37  0.344524      -1.06559      -47.9434       47.9434       1106.41       1154.35    
  38  0.286778      -1.24905      -56.1973       56.1973       1106.52       1162.72    
  39  0.336148      -1.09020      -49.0507       49.0507       1020.60       1069.65    
  40  0.709840     -0.342716      -15.4196       15.4196       1049.77       1065.19    
  41  0.219827      -1.51491      -68.1593       68.1593       1024.24       1092.40    
  42  0.347594      -1.05672      -47.5442       47.5442       1007.29       1054.84    
  43  0.905734     -0.990099E-01  -4.45468       4.45468       1048.77       1053.22    
  44  0.826231     -0.190881      -8.58815       8.58815       1159.55       1168.14    
  45  0.400277     -0.915599      -41.1949       41.1949       1122.64       1163.83    
  46  0.555153     -0.588512      -26.4785       26.4785       1142.53       1169.01    
  47  0.864397     -0.145723      -6.55642       6.55642       1093.40       1099.96    
  48  0.277380E-01  -3.58495      -161.295       161.295       1144.36       1305.65    
  49  0.993968     -0.605015E-02 -0.272210      0.272210       1163.17       1163.44    
  50  0.717076     -0.332573      -14.9632       14.9632       1166.27       1181.23    
  51  0.736253     -0.306182      -13.7758       13.7758       1112.57       1126.34    
  52  0.278813      -1.27722      -57.4648       57.4648       1058.50       1115.96    
  53  0.646460     -0.436245      -19.6276       19.6276       1099.06       1118.68    
loop,thermsimp(1:2)       15   68.1805       108.611    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245        983.58          0.85          1.15         22.09          0.00          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    983.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       15
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       16
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      244     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -65.7879       65.7879       944.199       1009.99    
   2  0.641193     -0.444425      -19.9957       19.9957       980.018       1000.01    
   3  0.353033      -1.04119      -46.8457       46.8457       985.710       1032.56    
   4  0.928955     -0.736953E-01  -3.31572       3.31572       962.533       965.849    
   5  0.350257      -1.04909      -47.2008       47.2008       971.915       1019.12    
   6  0.682617     -0.381821      -17.1790       17.1790       988.084       1005.26    
   7  0.162763      -1.81546      -81.6815       81.6815       1015.46       1097.14    
   8  0.874032     -0.134639      -6.05769       6.05769       1024.69       1030.75    
   9  0.518909     -0.656027      -29.5161       29.5161       1031.63       1061.14    
  10  0.461984     -0.772226      -34.7442       34.7442       1000.12       1034.87    
  11  0.449468     -0.799691      -35.9799       35.9799       996.403       1032.38    
  12  0.523281     -0.647637      -29.1387       29.1387       1015.09       1044.23    
  13  0.637377     -0.450394      -20.2643       20.2643       968.905       989.169    
  14  0.596329     -0.516963      -23.2593       23.2593       1034.31       1057.57    
  15  0.286246      -1.25090      -56.2809       56.2809       986.238       1042.52    
  16  0.590425     -0.526913      -23.7070       23.7070       993.949       1017.66    
  17  0.853637     -0.158249      -7.11997       7.11997       1032.65       1039.77    
  18  0.245572      -1.40416      -63.1765       63.1765       997.671       1060.85    
  19  0.375654     -0.979088      -44.0513       44.0513       973.408       1017.46    
  20  0.281654      -1.26708      -57.0086       57.0086       1039.96       1096.97    
  21  0.443392     -0.813302      -36.5923       36.5923       1048.77       1085.36    
  22  0.442934     -0.814335      -36.6387       36.6387       1007.29       1043.93    
  23  0.171790      -1.76149      -79.2532       79.2532       1036.72       1115.97    
  24  0.802582     -0.219921      -9.89476       9.89476       1053.15       1063.05    
  25  0.162733      -1.81564      -81.6899       81.6899       1053.81       1135.50    
  26  0.838320     -0.176355      -7.93460       7.93460       1049.77       1057.70    
  27  0.210754      -1.55706      -70.0558       70.0558       1029.43       1099.49    
  28  0.240377      -1.42554      -64.1385       64.1385       1064.83       1128.97    
  29  0.173042E-01  -4.05680      -182.525       182.525       1020.60       1203.12    
  30  0.640146     -0.446059      -20.0692       20.0692       1004.20       1024.27    
  31  0.749210     -0.288736      -12.9909       12.9909       983.679       996.670    
  32  0.666162     -0.406222      -18.2768       18.2768       1024.24       1042.52    
  33  0.601746     -0.507920      -22.8524       22.8524       1088.88       1111.73    
  34  0.677044     -0.390020      -17.5479       17.5479       1094.88       1112.43    
  35  0.290379      -1.23657      -55.6360       55.6360       1093.40       1149.04    
  36  0.439723     -0.821610      -36.9661       36.9661       1017.12       1054.09    
  37  0.680091     -0.385528      -17.3458       17.3458       1074.82       1092.17    
  38  0.803784     -0.218425      -9.82742       9.82742       1058.50       1068.33    
  39  0.507823     -0.677622      -30.4878       30.4878       1099.06       1129.54    
  40  0.894573     -0.111408      -5.01251       5.01251       1005.24       1010.25    
  41  0.826908     -0.190062      -8.55132       8.55132       1112.57       1121.12    
  42  0.815562     -0.203878      -9.17294       9.17294       1057.36       1066.53    
  43  0.352457      -1.04283      -46.9192       46.9192       1058.01       1104.93    
  44  0.104059      -2.26279      -101.808       101.808       1051.03       1152.84    
  45  0.601892     -0.507677      -22.8415       22.8415       1051.91       1074.75    
  46  0.988184     -0.118862E-01 -0.534786      0.534786       1106.41       1106.95    
  47  0.733912     -0.309366      -13.9191       13.9191       1106.52       1120.44    
  48  0.107394      -2.23125      -100.389       100.389       1163.17       1263.55    
  49  0.592150     -0.523995      -23.5757       23.5757       1122.64       1146.21    
  50  0.821901     -0.196136      -8.82458       8.82458       1159.55       1168.37    
  51  0.400070E-01  -3.21870      -144.817       144.817       1142.53       1287.35    
  52  0.271211      -1.30486      -58.7085       58.7085       1166.27       1224.97    
  53  0.296309      -1.21635      -54.7264       54.7264       983.579       1038.31    
loop,thermsimp(1:2)       16   65.7879       19.9957    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246       1034.59          0.86          1.14         22.14          0.00          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1034.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       16
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       17
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      245     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -11.3573       11.3573       962.533       973.890    
   2  0.350417      -1.04863      -47.1803       47.1803       968.905       1016.09    
   3  0.533846     -0.627648      -28.2393       28.2393       983.679       1011.92    
   4  0.622955     -0.473280      -21.2939       21.2939       980.018       1001.31    
   5  0.661091E-01  -2.71645      -122.219       122.219       988.084       1110.30    
   6  0.759206     -0.275482      -12.3946       12.3946       944.199       956.594    
   7  0.430535     -0.842727      -37.9162       37.9162       1005.24       1043.15    
   8  0.257678      -1.35604      -61.0114       61.0114       973.408       1034.42    
   9  0.296561      -1.21550      -54.6881       54.6881       993.949       1048.64    
  10  0.805929     -0.215760      -9.70751       9.70751       971.915       981.622    
  11  0.421616     -0.863661      -38.8580       38.8580       1004.20       1043.06    
  12  0.767803     -0.264223      -11.8880       11.8880       1024.69       1036.58    
  13  0.605260     -0.502097      -22.5905       22.5905       996.403       1018.99    
  14  0.566784     -0.567776      -25.5455       25.5455       985.710       1011.26    
  15  0.292740      -1.22847      -55.2716       55.2716       1000.12       1055.39    
  16  0.898463     -0.107069      -4.81730       4.81730       983.579       988.396    
  17  0.218067      -1.52295      -68.5211       68.5211       1032.65       1101.17    
  18  0.856756     -0.154603      -6.95592       6.95592       986.238       993.194    
  19  0.338883      -1.08210      -48.6861       48.6861       1024.24       1072.93    
  20  0.796034     -0.228113      -10.2633       10.2633       1007.29       1017.56    
  21  0.778636     -0.250212      -11.2576       11.2576       1015.09       1026.35    
  22  0.575989     -0.551667      -24.8208       24.8208       1017.12       1041.94    
  23  0.355531      -1.03414      -46.5284       46.5284       1034.31       1080.84    
  24  0.164949      -1.80212      -81.0815       81.0815       1049.77       1130.85    
  25  0.315998      -1.15202      -51.8319       51.8319       997.671       1049.50    
  26  0.330933      -1.10584      -49.7542       49.7542       1031.63       1081.38    
  27  0.429436     -0.845283      -38.0312       38.0312       1053.15       1091.18    
  28  0.464808     -0.766130      -34.4699       34.4699       1057.36       1091.83    
  29  0.192211      -1.64916      -74.1995       74.1995       1058.50       1132.70    
  30  0.866849     -0.142891      -6.42896       6.42896       1051.91       1058.34    
  31  0.474973     -0.744498      -33.4966       33.4966       1048.77       1082.27    
  32  0.667713     -0.403897      -18.1722       18.1722       1074.82       1092.99    
  33  0.994155     -0.586200E-02 -0.263745      0.263745       1039.96       1040.22    
  34  0.577739     -0.548634      -24.6843       24.6843       1015.46       1040.14    
  35  0.381919     -0.962546      -43.3071       43.3071       1029.43       1072.74    
  36  0.733204     -0.310331      -13.9625       13.9625       1058.01       1071.98    
  37  0.492382     -0.708500      -31.8770       31.8770       1106.41       1138.29    
  38  0.188899E-01  -3.96913      -178.580       178.580       1088.88       1267.46    
  39  0.741920E-01  -2.60110      -117.029       117.029       1094.88       1211.91    
  40  0.210592      -1.55783      -70.0904       70.0904       1036.72       1106.81    
  41  0.682838     -0.381498      -17.1645       17.1645       1106.52       1123.69    
  42  0.656831     -0.420328      -18.9115       18.9115       1112.57       1131.48    
  43  0.444670     -0.810424      -36.4628       36.4628       1064.83       1101.29    
  44  0.872301     -0.136621      -6.14688       6.14688       1099.06       1105.20    
  45  0.932741     -0.696282E-01  -3.13273       3.13273       1053.81       1056.94    
  46  0.601727     -0.507951      -22.8539       22.8539       1122.64       1145.49    
  47  0.940344     -0.615097E-01  -2.76746       2.76746       1093.40       1096.17    
  48  0.208477E-01  -3.87051      -174.143       174.143       1051.03       1225.17    
  49  0.257831      -1.35545      -60.9847       60.9847       1159.55       1220.53    
  50  0.522803     -0.648550      -29.1797       29.1797       1020.60       1049.78    
  51  0.676437     -0.390915      -17.5882       17.5882       1166.27       1183.85    
  52  0.612346     -0.490458      -22.0668       22.0668       1163.17       1185.23    
  53  0.206854      -1.57574      -70.8962       70.8962       1034.59       1105.48    
loop,thermsimp(1:2)       17   11.3573       47.1803    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247       1001.49          0.84          1.14         21.85          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1001.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       17
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       18
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      246     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -64.1351       64.1351       944.199       1008.33    
   2  0.711556E-02  -4.94547      -222.508       222.508       962.533       1185.04    
   3  0.909796     -0.945347E-01  -4.25333       4.25333       971.915       976.168    
   4  0.659218     -0.416702      -18.7483       18.7483       983.579       1002.33    
   5  0.833482     -0.182144      -8.19505       8.19505       986.238       994.433    
   6  0.726295E-01  -2.62238      -117.987       117.987       980.018       1098.00    
   7  0.687091     -0.375288      -16.8851       16.8851       985.710       1002.59    
   8  0.860775     -0.149922      -6.74532       6.74532       983.679       990.425    
   9  0.846215     -0.166982      -7.51290       7.51290       968.905       976.418    
  10  0.398551     -0.919919      -41.3892       41.3892       1007.29       1048.68    
  11  0.416092     -0.876849      -39.4514       39.4514       996.403       1035.85    
  12  0.463389     -0.769189      -34.6075       34.6075       1015.09       1049.70    
  13  0.207356      -1.57332      -70.7872       70.7872       973.408       1044.20    
  14  0.133003      -2.01738      -90.7666       90.7666       1024.69       1115.45    
  15  0.464971     -0.765779      -34.4541       34.4541       1015.46       1049.91    
  16  0.568281     -0.565140      -25.4269       25.4269       1039.96       1065.39    
  17  0.638811     -0.448147      -20.1631       20.1631       1017.12       1037.28    
  18  0.865664     -0.144259      -6.49053       6.49053       1004.20       1010.69    
  19  0.475002     -0.744436      -33.4939       33.4939       1005.24       1038.73    
  20  0.537086     -0.621597      -27.9671       27.9671       993.949       1021.92    
  21  0.782345     -0.245459      -11.0438       11.0438       997.671       1008.71    
  22  0.725469     -0.320937      -14.4397       14.4397       1020.60       1035.04    
  23  0.701426E-01  -2.65723      -119.555       119.555       1000.12       1119.68    
  24  0.297043      -1.21388      -54.6152       54.6152       1053.81       1108.43    
  25  0.444870     -0.809973      -36.4425       36.4425       1051.91       1088.35    
  26  0.685684     -0.377338      -16.9773       16.9773       1058.01       1074.99    
  27  0.651244     -0.428871      -19.2959       19.2959       1029.43       1048.73    
  28  0.269082      -1.31274      -59.0631       59.0631       1024.24       1083.31    
  29  0.177107      -1.73100      -77.8817       77.8817       1034.31       1112.20    
  30  0.766464     -0.265968      -11.9665       11.9665       1031.63       1043.59    
  31  0.801833     -0.220855      -9.93674       9.93674       1048.77       1058.71    
  32  0.759414     -0.275209      -12.3823       12.3823       1053.15       1065.54    
  33  0.566307     -0.568618      -25.5834       25.5834       1057.36       1082.95    
  34  0.297948      -1.21084      -54.4782       54.4782       1074.82       1129.30    
  35  0.430097E-01  -3.14633      -141.560       141.560       1093.40       1234.96    
  36  0.529414     -0.635984      -28.6143       28.6143       1032.65       1061.27    
  37  0.717133     -0.332494      -14.9596       14.9596       1064.83       1079.79    
  38  0.209457      -1.56323      -70.3334       70.3334       1099.06       1169.39    
  39  0.732428     -0.311390      -14.0101       14.0101       1034.59       1048.60    
  40  0.697782     -0.359849      -16.1904       16.1904       1036.72       1052.91    
  41  0.977227     -0.230362E-01  -1.03645       1.03645       988.084       989.121    
  42  0.744700     -0.294773      -13.2625       13.2625       1106.52       1119.78    
  43  0.713341     -0.337796      -15.1982       15.1982       1049.77       1064.96    
  44  0.497823     -0.697510      -31.3826       31.3826       1112.57       1143.95    
  45  0.968758     -0.317404E-01  -1.42807       1.42807       1058.50       1059.93    
  46  0.287665      -1.24596      -56.0584       56.0584       1106.41       1162.47    
  47  0.964672     -0.359674E-01  -1.61825       1.61825       1122.64       1124.26    
  48  0.733769     -0.309561      -13.9279       13.9279       1166.27       1180.19    
  49  0.692680     -0.367187      -16.5206       16.5206       1163.17       1179.69    
  50  0.328873      -1.11208      -50.0351       50.0351       1094.88       1144.92    
  51  0.744920     -0.294478      -13.2492       13.2492       1159.55       1172.80    
  52  0.655188     -0.422834      -19.0242       19.0242       1051.03       1070.05    
  53  0.255467      -1.36466      -61.3991       61.3991       1001.49       1062.89    
loop,thermsimp(1:2)       18   64.1351       222.508    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248       1039.49          0.86          1.14         21.92          0.00          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1039.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       18
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       19
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      247     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -14.6429       14.6429       971.915       986.558    
   2  0.240049      -1.42691      -64.1999       64.1999       968.905       1033.11    
   3  0.365543      -1.00637      -45.2789       45.2789       988.084       1033.36    
   4  0.399010     -0.918769      -41.3375       41.3375       983.679       1025.02    
   5  0.685268     -0.377945      -17.0046       17.0046       986.238       1003.24    
   6  0.335805E-01  -3.39381      -152.695       152.695       983.579       1136.27    
   7  0.820520     -0.197817      -8.90022       8.90022       985.710       994.610    
   8  0.756560     -0.278973      -12.5516       12.5516       944.199       956.751    
   9  0.869461     -0.139882      -6.29361       6.29361       997.671       1003.96    
  10  0.787378     -0.239047      -10.7552       10.7552       1004.20       1014.96    
  11  0.330926      -1.10586      -49.7551       49.7551       993.949       1043.70    
  12  0.339084E-01  -3.38409      -152.258       152.258       1020.60       1172.86    
  13  0.672805     -0.396300      -17.8304       17.8304       996.403       1014.23    
  14  0.822413     -0.195513      -8.79656       8.79656       1017.12       1025.92    
  15  0.928870     -0.737865E-01  -3.31982       3.31982       1005.24       1008.56    
  16  0.778944     -0.249816      -11.2398       11.2398       1031.63       1042.87    
  17  0.301602E-01  -3.50123      -157.528       157.528       973.408       1130.94    
  18  0.292626      -1.22886      -55.2892       55.2892       1034.59       1089.88    
  19  0.149515      -1.90036      -85.5014       85.5014       1007.29       1092.80    
  20  0.500330E-01  -2.99507      -134.755       134.755       1029.43       1164.19    
  21  0.759114E-01  -2.57819      -115.999       115.999       1015.09       1131.09    
  22  0.613440     -0.488673      -21.9865       21.9865       1015.46       1037.45    
  23  0.132502      -2.02116      -90.9364       90.9364       1036.72       1127.66    
  24  0.189750E-02  -6.26722      -281.976       281.976       1048.77       1330.75    
  25  0.507622     -0.678018      -30.5056       30.5056       1058.50       1089.00    
  26  0.378733     -0.970924      -43.6840       43.6840       1032.65       1076.34    
  27  0.139411      -1.97033      -88.6494       88.6494       1001.49       1090.14    
  28  0.298599      -1.20865      -54.3801       54.3801       1049.77       1104.15    
  29  0.767617     -0.264464      -11.8988       11.8988       1039.96       1051.86    
  30  0.656077     -0.421478      -18.9632       18.9632       1053.15       1072.12    
  31  0.701883     -0.353988      -15.9267       15.9267       1051.03       1066.96    
  32  0.940950     -0.608655E-01  -2.73847       2.73847       1058.01       1060.75    
  33  0.621043     -0.476355      -21.4323       21.4323       1064.83       1086.26    
  34  0.622910     -0.473353      -21.2972       21.2972       1057.36       1078.66    
  35  0.525019     -0.644320      -28.9894       28.9894       1024.24       1053.23    
  36  0.871126     -0.137969      -6.20753       6.20753       1051.91       1058.12    
  37  0.475532     -0.743322      -33.4437       33.4437       980.018       1013.46    
  38  0.320094      -1.13914      -51.2525       51.2525       1053.81       1105.06    
  39  0.688986     -0.372534      -16.7611       16.7611       1034.31       1051.08    
  40  0.831218     -0.184863      -8.31741       8.31741       1024.69       1033.01    
  41  0.639633     -0.446861      -20.1053       20.1053       1000.12       1020.23    
  42  0.628257     -0.464807      -20.9127       20.9127       1106.52       1127.43    
  43  0.925835     -0.770596E-01  -3.46708       3.46708       1122.64       1126.11    
  44  0.611089     -0.492512      -22.1592       22.1592       1074.82       1096.98    
  45  0.423003E-01  -3.16296      -142.309       142.309       1112.57       1254.87    
  46  0.430763     -0.842198      -37.8924       37.8924       1094.88       1132.78    
  47  0.374764     -0.981459      -44.1580       44.1580       1106.41       1150.57    
  48  0.109336      -2.21333      -99.5825       99.5825       1099.06       1198.64    
  49  0.642636E-02  -5.04735      -227.091       227.091       1159.55       1386.64    
  50  0.232984      -1.45679      -65.5440       65.5440       1163.17       1228.71    
  51  0.169005E-01  -4.08041      -183.587       183.587       1166.27       1349.85    
  52  0.183441      -1.69586      -76.3006       76.3006       962.533       1038.83    
  53  0.257429      -1.35701      -61.0550       61.0550       1039.49       1100.55    
loop,thermsimp(1:2)       19   14.6429       64.1999    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249       1018.24          0.86          1.14         21.84          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1018.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       19
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       20
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      248     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -52.4255       52.4255       944.199       996.624    
   2  0.362384      -1.01505      -45.6694       45.6694       971.915       1017.58    
   3  0.900627     -0.104664      -4.70907       4.70907       985.710       990.419    
   4  0.233893      -1.45289      -65.3688       65.3688       986.238       1051.61    
   5  0.183338      -1.69642      -76.3259       76.3259       997.671       1074.00    
   6  0.351708      -1.04495      -47.0148       47.0148       1005.24       1052.25    
   7  0.979617     -0.205938E-01 -0.926560      0.926560       980.018       980.945    
   8  0.801294     -0.221527      -9.96701       9.96701       996.403       1006.37    
   9  0.423893     -0.858275      -38.6157       38.6157       1004.20       1042.82    
  10  0.486446     -0.720630      -32.4228       32.4228       1000.12       1032.54    
  11  0.430531     -0.842736      -37.9166       37.9166       983.679       1021.60    
  12  0.214629      -1.53884      -69.2360       69.2360       1017.12       1086.36    
  13  0.860310     -0.150463      -6.76966       6.76966       1024.69       1031.46    
  14  0.450659     -0.797045      -35.8608       35.8608       968.905       1004.77    
  15  0.867432     -0.142218      -6.39871       6.39871       988.084       994.483    
  16  0.850327     -0.162134      -7.29476       7.29476       1015.46       1022.75    
  17  0.914193     -0.897130E-01  -4.03639       4.03639       962.533       966.569    
  18  0.908448     -0.960172E-01  -4.32003       4.32003       1031.63       1035.95    
  19  0.349788E-01  -3.35301      -150.860       150.860       993.949       1144.81    
  20  0.825048     -0.192314      -8.65265       8.65265       1034.31       1042.97    
  21  0.628933     -0.463730      -20.8642       20.8642       1039.96       1060.82    
  22  0.756366     -0.279229      -12.5632       12.5632       1024.24       1036.81    
  23  0.545707     -0.605674      -27.2506       27.2506       1051.91       1079.16    
  24  0.653619     -0.425231      -19.1321       19.1321       1058.01       1077.14    
  25  0.781643     -0.246357      -11.0841       11.0841       1051.03       1062.11    
  26  0.444411     -0.811005      -36.4889       36.4889       1053.15       1089.64    
  27  0.223111      -1.50008      -67.4921       67.4921       1032.65       1100.15    
  28  0.143901      -1.93863      -87.2233       87.2233       1057.36       1144.59    
  29  0.419282E-01  -3.17180      -142.706       142.706       1064.83       1207.54    
  30  0.407367     -0.898040      -40.4048       40.4048       1058.50       1098.90    
  31  0.722138     -0.325538      -14.6467       14.6467       1034.59       1049.23    
  32  0.290143      -1.23738      -55.6725       55.6725       1001.49       1057.16    
  33  0.236931E-01  -3.74257      -168.387       168.387       1007.29       1175.68    
  34  0.198981      -1.61454      -72.6420       72.6420       1074.82       1147.46    
  35  0.765966     -0.266617      -11.9957       11.9957       1039.49       1051.49    
  36  0.522733     -0.648684      -29.1858       29.1858       1049.77       1078.95    
  37  0.297579E-01  -3.51466      -158.132       158.132       1053.81       1211.94    
  38  0.175475      -1.74026      -78.2980       78.2980       1122.64       1200.94    
  39  0.311931      -1.16497      -52.4147       52.4147       1106.52       1158.94    
  40  0.310920      -1.16822      -52.5609       52.5609       1036.72       1089.28    
  41  0.122272      -2.10150      -94.5514       94.5514       973.408       1067.96    
  42  0.949359     -0.519686E-01  -2.33818       2.33818       1015.09       1017.43    
  43  0.500750     -0.691648      -31.1188       31.1188       1094.88       1126.00    
  44  0.729401E-01  -2.61812      -117.795       117.795       983.579       1101.37    
  45  0.952528     -0.486360E-01  -2.18824       2.18824       1106.41       1108.60    
  46  0.718842     -0.330114      -14.8526       14.8526       1029.43       1044.28    
  47  0.529396     -0.636019      -28.6159       28.6159       1020.60       1049.21    
  48  0.314661      -1.15626      -52.0227       52.0227       1099.06       1151.08    
  49  0.947465     -0.539649E-01  -2.42800       2.42800       1163.17       1165.59    
  50  0.613869     -0.487974      -21.9551       21.9551       1112.57       1134.52    
  51  0.303056      -1.19384      -53.7135       53.7135       1048.77       1102.48    
  52  0.749186     -0.288769      -12.9923       12.9923       1166.27       1179.26    
  53  0.671119E-01  -2.70139      -121.542       121.542       1018.24       1139.78    
loop,thermsimp(1:2)       20   52.4255       45.6694    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250        983.32          0.85          1.15         21.83          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    251       1070.43          0.85          1.14         21.91          0.00          0.05         23.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    983.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       20
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       21
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      250     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -53.1033       53.1033       962.533       1015.64    
   2  0.575213     -0.553015      -24.8814       24.8814       980.018       1004.90    
   3  0.632244     -0.458480      -20.6280       20.6280       985.710       1006.34    
   4  0.819203     -0.199424      -8.97251       8.97251       988.084       997.057    
   5  0.137693E-02  -6.58790      -296.404       296.404       944.199       1240.60    
   6  0.367814      -1.00018      -45.0003       45.0003       968.905       1013.91    
   7  0.452636     -0.792666      -35.6638       35.6638       996.403       1032.07    
   8  0.278102      -1.27977      -57.5797       57.5797       1015.09       1072.67    
   9  0.417803     -0.872745      -39.2668       39.2668       971.915       1011.18    
  10  0.682140     -0.382521      -17.2105       17.2105       983.679       1000.89    
  11  0.204733      -1.58605      -71.3598       71.3598       1015.46       1086.82    
  12  0.637442     -0.450292      -20.2597       20.2597       1024.69       1044.95    
  13  0.114518      -2.16702      -97.4992       97.4992       1000.12       1097.62    
  14  0.724207     -0.322678      -14.5180       14.5180       1031.63       1046.14    
  15  0.461399     -0.773492      -34.8011       34.8011       1024.24       1059.04    
  16  0.731739     -0.312332      -14.0525       14.0525       1004.20       1018.26    
  17  0.773272     -0.257124      -11.5686       11.5686       1034.31       1045.88    
  18  0.789195     -0.236742      -10.6516       10.6516       1029.43       1040.08    
  19  0.762001     -0.271807      -12.2292       12.2292       1020.60       1032.83    
  20  0.933384     -0.689386E-01  -3.10170       3.10170       1034.59       1037.69    
  21  0.694037     -0.365230      -16.4325       16.4325       1039.49       1055.92    
  22  0.423570     -0.859038      -38.6500       38.6500       986.238       1024.89    
  23  0.272919      -1.29858      -58.4260       58.4260       1005.24       1063.66    
  24  0.535843     -0.623914      -28.0713       28.0713       1001.49       1029.56    
  25  0.902288     -0.102822      -4.62617       4.62617       1039.96       1044.59    
  26  0.479374     -0.735275      -33.0816       33.0816       1051.03       1084.11    
  27  0.494900E-01  -3.00599      -135.246       135.246       973.408       1108.65    
  28  0.921867     -0.813539E-01  -3.66029       3.66029       997.671       1001.33    
  29  0.132425      -2.02174      -90.9624       90.9624       1058.01       1148.97    
  30  0.640539     -0.445446      -20.0416       20.0416       1049.77       1069.81    
  31  0.215363      -1.53543      -69.0824       69.0824       1051.91       1120.99    
  32  0.437204E-01  -3.12994      -140.823       140.823       1017.12       1157.94    
  33  0.166028      -1.79560      -80.7881       80.7881       1036.72       1117.51    
  34  0.425825     -0.853727      -38.4111       38.4111       1053.15       1091.56    
  35  0.810393     -0.210235      -9.45896       9.45896       1058.50       1067.96    
  36  0.855958     -0.155534      -6.99784       6.99784       1032.65       1039.65    
  37  0.830452     -0.185786      -8.35891       8.35891       983.579       991.938    
  38  0.658784     -0.417359      -18.7779       18.7779       1048.77       1067.55    
  39  0.910965     -0.932509E-01  -4.19557       4.19557       1106.41       1110.61    
  40  0.603480     -0.505043      -22.7230       22.7230       1094.88       1117.61    
  41  0.702610     -0.352953      -15.8802       15.8802       1112.57       1128.45    
  42  0.329065      -1.11150      -50.0088       50.0088       1018.24       1068.25    
  43  0.790497     -0.235094      -10.5774       10.5774       1057.36       1067.94    
  44  0.641572     -0.443834      -19.9691       19.9691       993.949       1013.92    
  45  0.650683     -0.429733      -19.3347       19.3347       1074.82       1094.16    
  46  0.194049E-02  -6.24481      -280.968       280.968       1099.06       1380.02    
  47  0.662053     -0.412409      -18.5552       18.5552       1106.52       1125.08    
  48  0.294846      -1.22130      -54.9491       54.9491       1163.17       1218.12    
  49  0.709874     -0.342668      -15.4174       15.4174       1007.29       1022.71    
  50  0.700314     -0.356226      -16.0274       16.0274       1166.27       1182.29    
  51  0.639811E-01  -2.74917      -123.691       123.691       1122.64       1246.33    
  52  0.251451      -1.38051      -62.1122       62.1122       1064.83       1126.94    
  53  0.828691     -0.187907      -8.45438       8.45438       983.320       991.774    
loop,thermsimp(1:2)       21   53.1033       24.8814    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252        996.27          0.86          1.14         22.00          0.00          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    253       1176.94          0.84          1.15         21.90          0.02          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    996.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       21
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       22
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      252     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -7.90360       7.90360       983.320       991.223    
   2  0.801853     -0.220830      -9.93564       9.93564       983.579       993.514    
   3  0.768645     -0.263126      -11.8386       11.8386       988.084       999.923    
   4  0.855557     -0.156003      -7.01892       7.01892       983.679       990.698    
   5  0.845591     -0.167720      -7.54609       7.54609       997.671       1005.22    
   6  0.350050      -1.04968      -47.2274       47.2274       980.018       1027.25    
   7  0.927608     -0.751463E-01  -3.38100       3.38100       985.710       989.091    
   8  0.655345E-01  -2.72518      -122.612       122.612       971.915       1094.53    
   9  0.355481      -1.03428      -46.5347       46.5347       968.905       1015.44    
  10  0.728523     -0.316737      -14.2507       14.2507       993.949       1008.20    
  11  0.573220     -0.556486      -25.0375       25.0375       962.533       987.571    
  12  0.112478      -2.18499      -98.3078       98.3078       1004.20       1102.51    
  13  0.338739      -1.08253      -48.7053       48.7053       1007.29       1056.00    
  14  0.239648      -1.42858      -64.2751       64.2751       986.238       1050.51    
  15  0.918959     -0.845134E-01  -3.80245       3.80245       1001.49       1005.29    
  16  0.283771      -1.25959      -56.6717       56.6717       996.403       1053.07    
  17  0.414404     -0.880913      -39.6342       39.6342       1020.60       1060.23    
  18  0.716403     -0.333512      -15.0055       15.0055       1034.59       1049.59    
  19  0.317726      -1.14657      -51.5866       51.5866       1032.65       1084.24    
  20  0.339005      -1.08174      -48.6699       48.6699       1029.43       1078.10    
  21  0.163059      -1.81364      -81.5999       81.5999       1039.96       1121.56    
  22  0.477081     -0.740069      -33.2974       33.2974       1024.69       1057.99    
  23  0.105851      -2.24573      -101.040       101.040       1034.31       1135.36    
  24  0.840431     -0.173840      -7.82145       7.82145       1031.63       1039.45    
  25  0.235315      -1.44683      -65.0962       65.0962       1039.49       1104.59    
  26  0.865464     -0.144489      -6.50090       6.50090       1024.24       1030.74    
  27  0.909462     -0.949026E-01  -4.26988       4.26988       1005.24       1009.51    
  28  0.152105E-01  -4.18577      -188.327       188.327       1048.77       1237.10    
  29  0.962485     -0.382371E-01  -1.72037       1.72037       1057.36       1059.08    
  30  0.259410      -1.34934      -60.7100       60.7100       1058.50       1119.21    
  31  0.364880      -1.00819      -45.3606       45.3606       1018.24       1063.60    
  32  0.467235     -0.760923      -34.2356       34.2356       1049.77       1084.00    
  33  0.844908     -0.168527      -7.58243       7.58243       1015.09       1022.68    
  34  0.188232      -1.67008      -75.1407       75.1407       1051.03       1126.17    
  35  0.496585     -0.700000      -31.4946       31.4946       1015.46       1046.95    
  36  0.410505     -0.890367      -40.0596       40.0596       1053.15       1093.21    
  37  0.533875     -0.627594      -28.2369       28.2369       1074.82       1103.06    
  38  0.610668     -0.493202      -22.1902       22.1902       1000.12       1022.31    
  39  0.241933      -1.41910      -63.8483       63.8483       973.408       1037.26    
  40  0.642629     -0.442188      -19.8950       19.8950       1106.41       1126.31    
  41  0.775072     -0.254799      -11.4640       11.4640       1036.72       1048.18    
  42  0.345343      -1.06322      -47.8365       47.8365       1094.88       1142.72    
  43  0.844097     -0.169488      -7.62564       7.62564       1051.91       1059.53    
  44  0.426886     -0.851239      -38.2992       38.2992       1106.52       1144.82    
  45  0.594109     -0.520693      -23.4272       23.4272       1064.83       1088.26    
  46  0.489527     -0.714316      -32.1387       32.1387       1112.57       1144.70    
  47  0.313882      -1.15874      -52.1343       52.1343       1058.01       1110.15    
  48  0.687066     -0.375325      -16.8867       16.8867       1017.12       1034.01    
  49  0.394505     -0.930124      -41.8484       41.8484       1166.27       1208.11    
  50  0.971200     -0.292233E-01  -1.31482       1.31482       1163.17       1164.48    
  51  0.916939     -0.867145E-01  -3.90148       3.90148       944.199       948.100    
  52  0.968457     -0.320511E-01  -1.44205       1.44205       1122.64       1124.08    
  53  0.437414     -0.826876      -37.2030       37.2030       996.274       1033.48    
loop,thermsimp(1:2)       22   7.90360       9.93564    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254       1008.28          0.85          1.15         21.86          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1008.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       22
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       23
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      253     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -7.39925       7.39925       944.199       951.598    
   2  0.848474     -0.164316      -7.39295       7.39295       962.533       969.926    
   3  0.146795      -1.91872      -86.3274       86.3274       985.710       1072.04    
   4  0.398624     -0.919738      -41.3811       41.3811       983.679       1025.06    
   5  0.888093     -0.118679      -5.33961       5.33961       983.320       988.659    
   6  0.475009     -0.744421      -33.4932       33.4932       983.579       1017.07    
   7  0.120824      -2.11342      -95.0876       95.0876       988.084       1083.17    
   8  0.270052      -1.30914      -58.9012       58.9012       997.671       1056.57    
   9  0.201748E-01  -3.90332      -175.619       175.619       1001.49       1177.11    
  10  0.999386     -0.614559E-03 -0.276504E-01  0.276504E-01   993.949       993.977    
  11  0.212655      -1.54808      -69.6518       69.6518       1005.24       1074.89    
  12  0.197911      -1.61994      -72.8847       72.8847       968.905       1041.79    
  13  0.786394     -0.240297      -10.8115       10.8115       1000.12       1010.93    
  14  0.781263     -0.246844      -11.1061       11.1061       1015.09       1026.20    
  15  0.788011     -0.238244      -10.7191       10.7191       980.018       990.737    
  16  0.956387     -0.445927E-01  -2.00632       2.00632       1024.24       1026.25    
  17  0.717415     -0.332100      -14.9419       14.9419       996.274       1011.22    
  18  0.808756     -0.212258      -9.54996       9.54996       1017.12       1026.67    
  19  0.756838     -0.278606      -12.5351       12.5351       973.408       985.944    
  20  0.570684     -0.560919      -25.2370       25.2370       1031.63       1056.86    
  21  0.946031     -0.554796E-01  -2.49615       2.49615       1015.46       1017.96    
  22  0.678634E-01  -2.69026      -121.041       121.041       1036.72       1157.76    
  23  0.631502     -0.459654      -20.6808       20.6808       1034.59       1055.27    
  24  0.114784E-01  -4.46729      -200.993       200.993       986.238       1187.23    
  25  0.549681     -0.598417      -26.9241       26.9241       996.403       1023.33    
  26  0.846433     -0.166725      -7.50132       7.50132       1007.29       1014.80    
  27  0.441841     -0.816805      -36.7499       36.7499       1024.69       1061.44    
  28  0.299100      -1.20698      -54.3046       54.3046       1057.36       1111.67    
  29  0.378130     -0.972517      -43.7557       43.7557       1051.91       1095.66    
  30  0.830469     -0.185764      -8.35795       8.35795       1020.60       1028.96    
  31  0.675108     -0.392883      -17.6767       17.6767       1018.24       1035.92    
  32  0.997619     -0.238377E-02 -0.107251      0.107251       1029.43       1029.54    
  33  0.897623     -0.108005      -4.85938       4.85938       1049.77       1054.63    
  34  0.591811E-01  -2.82715      -127.200       127.200       1032.65       1159.85    
  35  0.229825      -1.47044      -66.1582       66.1582       1064.83       1130.99    
  36  0.654017     -0.424622      -19.1047       19.1047       1053.15       1072.26    
  37  0.305777      -1.18490      -53.3113       53.3113       971.915       1025.23    
  38  0.936135     -0.659954E-01  -2.96928       2.96928       1004.20       1007.17    
  39  0.698153     -0.359317      -16.1665       16.1665       1074.82       1090.99    
  40  0.829975     -0.186360      -8.38476       8.38476       1039.49       1047.88    
  41  0.951351     -0.498721E-01  -2.24386       2.24386       1058.01       1060.26    
  42  0.883299     -0.124092      -5.58318       5.58318       1058.50       1064.08    
  43  0.910087     -0.942154E-01  -4.23896       4.23896       1039.96       1044.20    
  44  0.590840     -0.526210      -23.6754       23.6754       1122.64       1146.31    
  45  0.146785      -1.91879      -86.3306       86.3306       1051.03       1137.36    
  46  0.830381E-01  -2.48846      -111.961       111.961       1106.41       1218.37    
  47  0.289482      -1.23966      -55.7752       55.7752       1034.31       1090.09    
  48  0.594462     -0.520098      -23.4004       23.4004       1094.88       1118.28    
  49  0.241311      -1.42167      -63.9640       63.9640       1112.57       1176.53    
  50  0.612368     -0.490422      -22.0652       22.0652       1106.52       1128.59    
  51  0.952207     -0.489727E-01  -2.20339       2.20339       1163.17       1165.37    
  52  0.857144     -0.154149      -6.93551       6.93551       1166.27       1173.20    
  53  0.221746      -1.50622      -67.7683       67.7683       1008.28       1076.05    
loop,thermsimp(1:2)       23   7.39925       7.39295    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       1063.79          0.85          1.14         21.88          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1063.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       23
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       24
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      254     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -102.696       102.696       944.199       1046.90    
   2  0.372115     -0.988552      -44.4772       44.4772       962.533       1007.01    
   3  0.732875     -0.310780      -13.9827       13.9827       973.408       987.391    
   4  0.341646      -1.07398      -48.3208       48.3208       983.320       1031.64    
   5  0.406512     -0.900141      -40.4994       40.4994       980.018       1020.52    
   6  0.271848      -1.30251      -58.6029       58.6029       993.949       1052.55    
   7  0.738418     -0.303245      -13.6437       13.6437       1004.20       1017.85    
   8  0.903199     -0.101813      -4.58079       4.58079       1000.12       1004.70    
   9  0.511789     -0.669842      -30.1377       30.1377       996.274       1026.41    
  10  0.202674      -1.59616      -71.8147       71.8147       1007.29       1079.11    
  11  0.325695      -1.12179      -50.4721       50.4721       983.579       1034.05    
  12  0.719720     -0.328893      -14.7976       14.7976       1015.46       1030.26    
  13  0.715609     -0.334622      -15.0554       15.0554       996.403       1011.46    
  14  0.973328     -0.270339E-01  -1.21632       1.21632       983.679       984.896    
  15  0.373998     -0.983504      -44.2501       44.2501       971.915       1016.16    
  16  0.977965     -0.222815E-01  -1.00249       1.00249       1015.09       1016.10    
  17  0.105495      -2.24909      -101.192       101.192       1024.24       1125.43    
  18  0.729809     -0.314973      -14.1713       14.1713       1017.12       1031.29    
  19  0.378008     -0.972839      -43.7702       43.7702       1020.60       1064.37    
  20  0.678326     -0.388127      -17.4627       17.4627       1029.43       1046.89    
  21  0.671993     -0.397507      -17.8848       17.8848       1018.24       1036.13    
  22  0.515926     -0.661792      -29.7755       29.7755       968.905       998.681    
  23  0.363490      -1.01200      -45.5323       45.5323       1039.96       1085.49    
  24  0.206319      -1.57833      -71.0126       71.0126       1039.49       1110.50    
  25  0.755157E-01  -2.58341      -116.234       116.234       1049.77       1166.00    
  26  0.413763     -0.882461      -39.7039       39.7039       1034.59       1074.29    
  27  0.279023      -1.27646      -57.4308       57.4308       997.671       1055.10    
  28  0.506422     -0.680385      -30.6121       30.6121       1031.63       1062.24    
  29  0.643082E-02  -5.04665      -227.060       227.060       1058.01       1285.07    
  30  0.285888E-01  -3.55474      -159.936       159.936       1024.69       1184.62    
  31  0.660419     -0.414880      -18.6664       18.6664       1058.50       1077.16    
  32  0.739369     -0.301959      -13.5858       13.5858       985.710       999.296    
  33  0.270269      -1.30834      -58.8650       58.8650       1053.15       1112.02    
  34  0.663889     -0.409640      -18.4306       18.4306       1005.24       1023.67    
  35  0.898739E-01  -2.40935      -108.402       108.402       1008.28       1116.68    
  36  0.832427     -0.183410      -8.25203       8.25203       988.084       996.336    
  37  0.723106     -0.324200      -14.5865       14.5865       1034.31       1048.90    
  38  0.986274     -0.138207E-01 -0.621825      0.621825       1074.82       1075.44    
  39  0.812861     -0.207195      -9.32217       9.32217       1051.91       1061.23    
  40  0.553236     -0.591971      -26.6341       26.6341       1057.36       1084.00    
  41  0.693785E-01  -2.66818      -120.047       120.047       1094.88       1214.93    
  42  0.117256      -2.14340      -96.4363       96.4363       1106.52       1202.96    
  43  0.807809     -0.213430      -9.60268       9.60268       1064.83       1074.43    
  44  0.900249     -0.105084      -4.72795       4.72795       1051.03       1055.76    
  45  0.753470     -0.283066      -12.7358       12.7358       1122.64       1135.37    
  46  0.127159      -2.06232      -92.7883       92.7883       1036.72       1129.51    
  47  0.535389     -0.624762      -28.1094       28.1094       1032.65       1060.76    
  48  0.957281     -0.436582E-01  -1.96428       1.96428       1163.17       1165.13    
  49  0.227700      -1.47973      -66.5762       66.5762       1166.27       1232.84    
  50  0.636404     -0.451921      -20.3329       20.3329       1112.57       1132.90    
  51  0.905015     -0.998042E-01  -4.49041       4.49041       1001.49       1005.98    
  52  0.555191     -0.588444      -26.4754       26.4754       986.238       1012.71    
  53  0.687780     -0.374286      -16.8400       16.8400       1063.79       1080.63    
loop,thermsimp(1:2)       24   102.696       44.4772    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256        943.92          0.85          1.14         21.84          0.08          0.06         23.97
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    257        999.26          0.83          1.12         21.77          0.19          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    943.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       24
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       25
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      256     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -1.70648       1.70648       983.679       985.386    
   2  0.355374      -1.03458      -46.5482       46.5482       973.408       1019.96    
   3  0.294461      -1.22261      -55.0079       55.0079       988.084       1043.09    
   4  0.644538     -0.439222      -19.7616       19.7616       968.905       988.667    
   5  0.741622     -0.298915      -13.4489       13.4489       985.710       999.159    
   6  0.805913E-01  -2.51837      -113.307       113.307       1000.12       1113.43    
   7  0.498180     -0.696794      -31.3503       31.3503       1001.49       1032.84    
   8  0.771004     -0.260061      -11.7007       11.7007       962.533       974.234    
   9  0.753480     -0.283053      -12.7352       12.7352       996.403       1009.14    
  10  0.460525     -0.775387      -34.8864       34.8864       986.238       1021.12    
  11  0.918626     -0.848759E-01  -3.81876       3.81876       1015.09       1018.91    
  12  0.355379      -1.03457      -46.5476       46.5476       971.915       1018.46    
  13  0.664646     -0.408501      -18.3794       18.3794       1004.20       1022.58    
  14  0.328018      -1.11469      -50.1523       50.1523       980.018       1030.17    
  15  0.529583     -0.635665      -28.6000       28.6000       1005.24       1033.84    
  16  0.259823      -1.34775      -60.6384       60.6384       996.274       1056.91    
  17  0.463690E-01  -3.07112      -138.177       138.177       1015.46       1153.64    
  18  0.366509      -1.00373      -45.1601       45.1601       1017.12       1062.28    
  19  0.794534     -0.229999      -10.3482       10.3482       983.320       993.668    
  20  0.669373     -0.401413      -18.0605       18.0605       983.579       1001.64    
  21  0.798901     -0.224518      -10.1016       10.1016       1018.24       1028.34    
  22  0.610403     -0.493636      -22.2098       22.2098       1029.43       1051.64    
  23  0.267818      -1.31745      -59.2749       59.2749       944.199       1003.47    
  24  0.663049     -0.410906      -18.4876       18.4876       1034.31       1052.80    
  25  0.782871     -0.244788      -11.0135       11.0135       993.949       1004.96    
  26  0.706545     -0.347368      -15.6289       15.6289       997.671       1013.30    
  27  0.120119      -2.11927      -95.3507       95.3507       1051.03       1146.38    
  28  0.270575      -1.30721      -58.8142       58.8142       1032.65       1091.47    
  29  0.505391     -0.682422      -30.7037       30.7037       1051.91       1082.61    
  30  0.665734     -0.406865      -18.3058       18.3058       1031.63       1049.93    
  31  0.836788     -0.178185      -8.01694       8.01694       1020.60       1028.61    
  32  0.866983     -0.142736      -6.42202       6.42202       1034.59       1041.01    
  33  0.552904     -0.592571      -26.6611       26.6611       1064.83       1091.49    
  34  0.554153     -0.590314      -26.5596       26.5596       1074.82       1101.38    
  35  0.592407E-01  -2.82615      -127.155       127.155       1058.50       1185.65    
  36  0.902163     -0.102960      -4.63239       4.63239       1007.29       1011.93    
  37  0.266638E-01  -3.62445      -163.072       163.072       1063.79       1226.86    
  38  0.897053     -0.108640      -4.88796       4.88796       1057.36       1062.25    
  39  0.840496     -0.173763      -7.81798       7.81798       1039.96       1047.78    
  40  0.288358      -1.24355      -55.9502       55.9502       1039.49       1095.44    
  41  0.835972E-01  -2.48175      -111.659       111.659       1053.15       1164.81    
  42  0.412070     -0.886563      -39.8885       39.8885       1008.28       1048.17    
  43  0.725010     -0.321570      -14.4681       14.4681       1024.24       1038.71    
  44  0.316556      -1.15026      -51.7526       51.7526       1036.72       1088.47    
  45  0.486178     -0.721181      -32.4476       32.4476       1112.57       1145.01    
  46  0.143341      -1.94253      -87.3988       87.3988       1122.64       1210.04    
  47  0.956913     -0.440430E-01  -1.98159       1.98159       1163.17       1165.15    
  48  0.362697      -1.01419      -45.6305       45.6305       1049.77       1095.40    
  49  0.951746     -0.494572E-01  -2.22519       2.22519       1024.69       1026.91    
  50  0.511140     -0.671112      -30.1948       30.1948       1106.52       1136.72    
  51  0.364891E-01  -3.31074      -148.958       148.958       1094.88       1243.84    
  52  0.377076     -0.975308      -43.8813       43.8813       1166.27       1210.15    
  53  0.670030E-01  -2.70302      -121.615       121.615       943.917       1065.53    
loop,thermsimp(1:2)       25   1.70648       46.5482    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258        978.96          0.86          1.14         22.05          0.01          0.05         24.11
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    259       1318.99          0.85          1.14         22.21          0.04          0.05         24.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    978.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       25
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       26
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      258     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.564872      0.564872       962.533       963.098    
   2  0.516099     -0.661457      -29.7604       29.7604       983.679       1013.44    
   3  0.202206      -1.59847      -71.9188       71.9188       968.905       1040.82    
   4  0.240260      -1.42603      -64.1605       64.1605       983.320       1047.48    
   5  0.717263E-01  -2.63490      -118.550       118.550       985.710       1104.26    
   6  0.395382     -0.927902      -41.7484       41.7484       983.579       1025.33    
   7  0.494348     -0.704516      -31.6978       31.6978       944.199       975.897    
   8  0.970815     -0.296196E-01  -1.33265       1.33265       993.949       995.282    
   9  0.992795     -0.723105E-02 -0.325341      0.325341       996.403       996.728    
  10  0.387320     -0.948503      -42.6753       42.6753       1007.29       1049.97    
  11  0.586568     -0.533466      -24.0018       24.0018       997.671       1021.67    
  12  0.119144      -2.12742      -95.7176       95.7176       971.915       1067.63    
  13  0.145144      -1.93003      -86.8363       86.8363       1015.09       1101.93    
  14  0.767931     -0.264056      -11.8805       11.8805       973.408       985.289    
  15  0.415014     -0.879442      -39.5681       39.5681       986.238       1025.81    
  16  0.994477     -0.553801E-02 -0.249167      0.249167       1004.20       1004.45    
  17  0.757243     -0.278071      -12.5111       12.5111       1024.69       1037.20    
  18  0.669290     -0.401537      -18.0661       18.0661       1018.24       1036.31    
  19  0.112026      -2.18903      -98.4892       98.4892       1020.60       1119.09    
  20  0.434244     -0.834148      -37.5302       37.5302       980.018       1017.55    
  21  0.491828     -0.709627      -31.9277       31.9277       1001.49       1033.42    
  22  0.517535     -0.658677      -29.6354       29.6354       1005.24       1034.87    
  23  0.411147     -0.888804      -39.9893       39.9893       1024.24       1064.23    
  24  0.250164      -1.38564      -62.3430       62.3430       1034.59       1096.93    
  25  0.109742E-01  -4.51221      -203.014       203.014       988.084       1191.10    
  26  0.559459     -0.580786      -26.1308       26.1308       1039.96       1066.09    
  27  0.289677      -1.23899      -55.7449       55.7449       1008.28       1064.02    
  28  0.835809     -0.179356      -8.06962       8.06962       1031.63       1039.70    
  29  0.236182      -1.44315      -64.9306       64.9306       1029.43       1094.36    
  30  0.700988     -0.355264      -15.9841       15.9841       1034.31       1050.30    
  31  0.886914     -0.120007      -5.39940       5.39940       996.274       1001.67    
  32  0.182911      -1.69875      -76.4307       76.4307       1057.36       1133.79    
  33  0.693089     -0.366597      -16.4940       16.4940       1017.12       1033.62    
  34  0.108523      -2.22079      -99.9183       99.9183       943.917       1043.84    
  35  0.141600      -1.95475      -87.9484       87.9484       1051.91       1139.86    
  36  0.168348E-01  -4.08431      -183.762       183.762       1036.72       1220.48    
  37  0.419419E-01  -3.17147      -142.692       142.692       1032.65       1175.35    
  38  0.244896      -1.40692      -63.3006       63.3006       1064.83       1128.13    
  39  0.360662      -1.01981      -45.8838       45.8838       1049.77       1095.65    
  40  0.927013     -0.757879E-01  -3.40987       3.40987       1039.49       1042.90    
  41  0.869067     -0.140335      -6.31398       6.31398       1074.82       1081.14    
  42  0.827083     -0.189851      -8.54181       8.54181       1000.12       1008.66    
  43  0.928403     -0.742893E-01  -3.34244       3.34244       1106.52       1109.86    
  44  0.513193     -0.667103      -30.0145       30.0145       1112.57       1142.58    
  45  0.809080     -0.211858      -9.53196       9.53196       1051.03       1060.56    
  46  0.341224E-02  -5.68039      -255.573       255.573       1015.46       1271.03    
  47  0.734431     -0.308659      -13.8873       13.8873       1053.15       1067.04    
  48  0.688454     -0.373307      -16.7959       16.7959       1163.17       1179.96    
  49  0.990614     -0.943067E-02 -0.424307      0.424307       1058.50       1058.92    
  50  0.143408      -1.94206      -87.3777       87.3777       1122.64       1210.02    
  51  0.868596     -0.140878      -6.33840       6.33840       1166.27       1172.60    
  52  0.244103      -1.41016      -63.4465       63.4465       1063.79       1127.24    
  53  0.207986      -1.57029      -70.6506       70.6506       978.958       1049.61    
loop,thermsimp(1:2)       26  0.564872       29.7604    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260       1295.56          0.85          1.16         21.82          0.02          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1295.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       26
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       27
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      259     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -72.5003       72.5003       962.533       1035.03    
   2  0.983274     -0.168677E-01 -0.758914      0.758914       944.199       944.958    
   3  0.569108     -0.563685      -25.3614       25.3614       973.408       998.770    
   4  0.411179     -0.888728      -39.9859       39.9859       993.949       1033.94    
   5  0.889241     -0.117387      -5.28148       5.28148       996.403       1001.68    
   6  0.109537      -2.21149      -99.5001       99.5001       996.274       1095.77    
   7  0.658027     -0.418509      -18.8297       18.8297       1004.20       1023.03    
   8  0.427534     -0.849722      -38.2309       38.2309       1000.12       1038.35    
   9  0.277803      -1.28084      -57.6279       57.6279       983.679       1041.31    
  10  0.568421     -0.564892      -25.4158       25.4158       980.018       1005.43    
  11  0.368489     -0.998346      -44.9178       44.9178       997.671       1042.59    
  12  0.100945E-01  -4.59576      -206.774       206.774       983.579       1190.35    
  13  0.811445     -0.208939      -9.40062       9.40062       986.238       995.638    
  14  0.135138      -2.00146      -90.0500       90.0500       1001.49       1091.54    
  15  0.600340     -0.510258      -22.9577       22.9577       1017.12       1040.08    
  16  0.537538     -0.620755      -27.9292       27.9292       1005.24       1033.17    
  17  0.923261     -0.798434E-01  -3.59233       3.59233       1018.24       1021.83    
  18  0.296505      -1.21569      -54.6967       54.6967       1024.69       1079.38    
  19  0.975666     -0.246348E-01  -1.10838       1.10838       1031.63       1032.74    
  20  0.102971      -2.27331      -102.281       102.281       968.905       1071.19    
  21  0.110137      -2.20603      -99.2543       99.2543       1039.49       1138.75    
  22  0.874539     -0.134058      -6.03157       6.03157       943.917       949.949    
  23  0.887507     -0.119339      -5.36935       5.36935       983.320       988.689    
  24  0.811767     -0.208543      -9.38279       9.38279       978.958       988.341    
  25  0.304283      -1.18980      -53.5316       53.5316       1007.29       1060.83    
  26  0.304144      -1.19025      -53.5522       53.5522       1034.31       1087.87    
  27  0.854538     -0.157194      -7.07251       7.07251       1058.50       1065.57    
  28  0.543001     -0.610645      -27.4743       27.4743       1051.03       1078.50    
  29  0.808766     -0.212246      -9.54943       9.54943       1008.28       1017.83    
  30  0.286176      -1.25115      -56.2920       56.2920       1024.24       1080.53    
  31  0.328161      -1.11425      -50.1326       50.1326       1039.96       1090.09    
  32  0.563264     -0.574006      -25.8258       25.8258       1053.15       1078.98    
  33  0.180895      -1.70984      -76.9295       76.9295       971.915       1048.84    
  34  0.977796     -0.224538E-01  -1.01024       1.01024       1074.82       1075.83    
  35  0.650784     -0.429577      -19.3276       19.3276       1029.43       1048.76    
  36  0.350586      -1.04815      -47.1585       47.1585       1049.77       1096.92    
  37  0.852996E-01  -2.46159      -110.752       110.752       1034.59       1145.34    
  38  0.363921      -1.01082      -45.4790       45.4790       1015.09       1060.57    
  39  0.715496E-01  -2.63737      -118.661       118.661       985.710       1104.37    
  40  0.540542     -0.615184      -27.6785       27.6785       1106.52       1134.20    
  41  0.458744E-02  -5.38443      -242.258       242.258       1020.60       1262.86    
  42  0.684509     -0.379054      -17.0545       17.0545       1063.79       1080.85    
  43  0.827193     -0.189717      -8.53580       8.53580       1064.83       1073.37    
  44  0.430712     -0.842315      -37.8977       37.8977       1057.36       1095.26    
  45  0.925073     -0.778822E-01  -3.50410       3.50410       1051.91       1055.41    
  46  0.139567      -1.96921      -88.5993       88.5993       1112.57       1201.17    
  47  0.905138     -0.996680E-01  -4.48428       4.48428       1166.27       1170.75    
  48  0.230323      -1.46827      -66.0608       66.0608       1032.65       1098.71    
  49  0.854981     -0.156676      -7.04919       7.04919       1163.17       1170.22    
  50  0.526676     -0.641170      -28.8477       28.8477       988.084       1016.93    
  51  0.425904     -0.853542      -38.4028       38.4028       1122.64       1161.04    
  52  0.770395     -0.260852      -11.7363       11.7363       1036.72       1048.46    
  53  0.222399      -1.50328      -67.6360       67.6360       1295.56       1363.19    
loop,thermsimp(1:2)       27   72.5003      0.758914    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261       1015.46          0.85          1.14         21.89          0.05          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    1015.5       0.7852     -2.039      4.002     -102.6      1.350    
                      0.9141     0.8782     -99.70      9.176     0.6865    

                       1.627     -2.481      1.540      7000.      7000.    

                      -1.735      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -8.105     -5.132     -9.226      7.737    

                      -16.36     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1729E-01 0.3339     0.4598E-01 0.2305    

                     -0.2486    -0.6514E-01 0.2189     0.1599     0.1710    



                     -0.5244    -0.6236      0.000     0.1640    -0.9722E-01

                      0.2594E-01 0.2226    -0.7116    -0.1107     0.3490    

                      0.7855E-01 0.8099E-01-0.6639     -1.435      7000.    



                      -1.343     -1.249     -2.142     -1.982    -0.3807    

                     -0.3252      9.310      8.796    -0.1672E+05 -6.000    

                     -0.1639     -2.116      9.390      8.914    -0.1969E+05



                      -6.000     0.8495    -0.1044      8.950      9.163    

                     -0.1944E+05 -6.000    -0.3840    -0.3683      9.095    

                       8.883    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1015.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       27
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       28
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      260     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -65.7993       65.7993       944.199       1010.00    
   2  0.922423     -0.807516E-01  -3.63320       3.63320       943.917       947.550    
   3  0.556007     -0.586974      -26.4093       26.4093       978.958       1005.37    
   4  0.921345     -0.819211E-01  -3.68582       3.68582       983.320       987.005    
   5  0.623358     -0.472635      -21.2649       21.2649       986.238       1007.50    
   6  0.967150     -0.334012E-01  -1.50279       1.50279       973.408       974.911    
   7  0.239844      -1.42777      -64.2384       64.2384       996.403       1060.64    
   8  0.707370     -0.346201      -15.5764       15.5764       980.018       995.594    
   9  0.375591     -0.979256      -44.0589       44.0589       988.084       1032.14    
  10  0.164915      -1.80233      -81.0907       81.0907       1008.28       1089.37    
  11  0.634729     -0.454558      -20.4516       20.4516       1018.24       1038.69    
  12  0.956585     -0.443852E-01  -1.99699       1.99699       1004.20       1006.20    
  13  0.281051      -1.26922      -57.1050       57.1050       1031.63       1088.73    
  14  0.332446      -1.10128      -49.5490       49.5490       1005.24       1054.79    
  15  0.417901     -0.872510      -39.2562       39.2562       993.949       1033.21    
  16  0.454459     -0.788647      -35.4830       35.4830       962.533       998.016    
  17  0.163150      -1.81309      -81.5749       81.5749       1000.12       1081.70    
  18  0.412675     -0.885095      -39.8224       39.8224       1017.12       1056.94    
  19  0.510076     -0.673195      -30.2886       30.2886       983.679       1013.97    
  20  0.159872E-02  -6.43855      -289.685       289.685       997.671       1287.36    
  21  0.279094      -1.27620      -57.4193       57.4193       1036.72       1094.14    
  22  0.229843E-01  -3.77294      -169.753       169.753       1029.43       1199.19    
  23  0.829240E-02  -4.79242      -215.622       215.622       971.915       1187.54    
  24  0.722732     -0.324717      -14.6098       14.6098       1051.91       1066.52    
  25  0.399402     -0.917787      -41.2933       41.2933       1015.09       1056.39    
  26  0.321457      -1.13489      -51.0613       51.0613       1007.29       1058.36    
  27  0.103147      -2.27160      -102.204       102.204       1058.50       1160.70    
  28  0.488570     -0.716273      -32.2267       32.2267       968.905       1001.13    
  29  0.775391     -0.254388      -11.4455       11.4455       1064.83       1076.28    
  30  0.264831      -1.32866      -59.7796       59.7796       1074.82       1134.60    
  31  0.291634      -1.23225      -55.4419       55.4419       1051.03       1106.47    
  32  0.754799E-02  -4.88647      -219.853       219.853       1053.15       1273.01    
  33  0.403715     -0.907047      -40.8101       40.8101       1024.69       1065.50    
  34  0.794963     -0.229460      -10.3239       10.3239       1024.24       1034.57    
  35  0.482612E-01  -3.03113      -136.377       136.377       1063.79       1200.17    
  36  0.309506      -1.17278      -52.7659       52.7659       1034.31       1087.08    
  37  0.265676      -1.32548      -59.6361       59.6361       1039.96       1099.60    
  38  0.793358     -0.231480      -10.4148       10.4148       1001.49       1011.91    
  39  0.603192E-01  -2.80811      -126.343       126.343       1057.36       1183.70    
  40  0.516664     -0.660363      -29.7112       29.7112       996.274       1025.99    
  41  0.524892E-01  -2.94715      -132.599       132.599       1049.77       1182.36    
  42  0.581500     -0.542144      -24.3923       24.3923       1032.65       1057.05    
  43  0.403805     -0.906823      -40.8000       40.8000       985.710       1026.51    
  44  0.447829     -0.803344      -36.1442       36.1442       1106.52       1142.67    
  45  0.470604     -0.753737      -33.9123       33.9123       1039.49       1073.40    
  46  0.479088     -0.735871      -33.1085       33.1085       1034.59       1067.69    
  47  0.959223     -0.416322E-01  -1.87312       1.87312       1122.64       1124.51    
  48  0.527403     -0.639789      -28.7856       28.7856       1163.17       1191.95    
  49  0.731687     -0.312402      -14.0557       14.0557       1166.27       1180.32    
  50  0.682707     -0.381689      -17.1731       17.1731       983.579       1000.75    
  51  0.386616     -0.950322      -42.7571       42.7571       1112.57       1155.32    
  52  0.120332      -2.11750      -95.2713       95.2713       1020.60       1115.87    
  53  0.285899      -1.25212      -56.3355       56.3355       1015.46       1071.80    
loop,thermsimp(1:2)       28   65.7993       3.63320    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262       1000.42          0.85          1.15         21.86          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1000.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       28
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       29
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      261     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -49.6025       49.6025       943.917       993.520    
   2  0.991191     -0.884791E-02 -0.398087      0.398087       973.408       973.807    
   3  0.752830     -0.283916      -12.7740       12.7740       983.320       996.094    
   4  0.718872     -0.330071      -14.8507       14.8507       980.018       994.869    
   5  0.362244      -1.01544      -45.6869       45.6869       962.533       1008.22    
   6  0.993342E-01  -2.30927      -103.899       103.899       983.579       1087.48    
   7  0.734379     -0.308729      -13.8904       13.8904       968.905       982.795    
   8  0.190509      -1.65806      -74.5996       74.5996       978.958       1053.56    
   9  0.113713      -2.17408      -97.8166       97.8166       1004.20       1102.02    
  10  0.582158     -0.541014      -24.3414       24.3414       986.238       1010.58    
  11  0.100405E-01  -4.60113      -207.015       207.015       944.199       1151.21    
  12  0.614877     -0.486333      -21.8812       21.8812       1001.49       1023.37    
  13  0.996806     -0.319890E-02 -0.143926      0.143926       983.679       983.823    
  14  0.439871E-01  -3.12386      -140.549       140.549       996.274       1136.82    
  15  0.610456     -0.493549      -22.2059       22.2059       985.710       1007.92    
  16  0.676471     -0.390866      -17.5859       17.5859       988.084       1005.67    
  17  0.263829      -1.33246      -59.9501       59.9501       993.949       1053.90    
  18  0.761962     -0.271858      -12.2315       12.2315       1024.24       1036.47    
  19  0.405295     -0.903140      -40.6343       40.6343       1018.24       1058.88    
  20  0.184680      -1.68913      -75.9979       75.9979       1005.24       1081.24    
  21  0.695434     -0.363219      -16.3421       16.3421       1015.09       1031.44    
  22  0.597154     -0.515580      -23.1971       23.1971       1017.12       1040.32    
  23  0.254276      -1.36933      -61.6094       61.6094       1032.65       1094.26    
  24  0.777974     -0.251062      -11.2959       11.2959       1007.29       1018.59    
  25  0.597236     -0.515443      -23.1909       23.1909       996.403       1019.59    
  26  0.658168     -0.418295      -18.8200       18.8200       1024.69       1043.51    
  27  0.917953     -0.856086E-01  -3.85172       3.85172       1051.91       1055.76    
  28  0.167567      -1.78637      -80.3730       80.3730       1034.59       1114.96    
  29  0.867739E-02  -4.74703      -213.580       213.580       1015.46       1229.04    
  30  0.157469      -1.84853      -83.1695       83.1695       1039.49       1122.66    
  31  0.947458     -0.539724E-01  -2.42834       2.42834       1064.83       1067.26    
  32  0.883772     -0.123556      -5.55905       5.55905       1000.12       1005.68    
  33  0.873100     -0.135705      -6.10566       6.10566       1034.31       1040.42    
  34  0.138043      -1.98019      -89.0930       89.0930       1031.63       1120.72    
  35  0.833185     -0.182500      -8.21106       8.21106       1008.28       1016.49    
  36  0.907894     -0.966275E-01  -4.34749       4.34749       1036.72       1041.07    
  37  0.858432     -0.152648      -6.86798       6.86798       1039.96       1046.83    
  38  0.192050      -1.65000      -74.2372       74.2372       1051.03       1125.27    
  39  0.890666     -0.115786      -5.20945       5.20945       1020.60       1025.81    
  40  0.389935     -0.941775      -42.3726       42.3726       1122.64       1165.01    
  41  0.842362     -0.171545      -7.71821       7.71821       1074.82       1082.54    
  42  0.143912      -1.93855      -87.2197       87.2197       1106.52       1193.74    
  43  0.678545     -0.387804      -17.4482       17.4482       1112.57       1130.01    
  44  0.621021     -0.476390      -21.4339       21.4339       1058.50       1079.93    
  45  0.533199     -0.628861      -28.2939       28.2939       1166.27       1194.56    
  46  0.891703     -0.114623      -5.15713       5.15713       1049.77       1054.92    
  47  0.675469     -0.392349      -17.6526       17.6526       1057.36       1075.01    
  48  0.757471     -0.277770      -12.4975       12.4975       971.915       984.412    
  49  0.855441     -0.156139      -7.02503       7.02503       1163.17       1170.19    
  50  0.737982     -0.303836      -13.6703       13.6703       1029.43       1043.10    
  51  0.630328     -0.461515      -20.7646       20.7646       1063.79       1084.56    
  52  0.701612     -0.354375      -15.9441       15.9441       1053.15       1069.10    
  53  0.161537E-01  -4.12561      -185.620       185.620       1000.42       1186.04    
loop,thermsimp(1:2)       29   49.6025      0.398087    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263       1299.75          0.85          1.15         21.88          0.01          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    264       1104.99          0.86          1.15         22.00          0.00          0.05         24.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1104.99
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    44.9922               261
loop is:       29
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    44.9922               261
loop is:       30
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    22.4961               313

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      263     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -41.5721       41.5721       973.408       1014.98    
   2  0.553200     -0.592035      -13.3185       13.3185       968.905       982.224    
   3  0.825049     -0.192313      -4.32629       4.32629       983.679       988.006    
   4  0.767336     -0.264830      -5.95765       5.95765       971.915       977.872    
   5  0.966534     -0.340385E-01 -0.765733      0.765733       943.917       944.683    
   6  0.954430     -0.466410E-01  -1.04924       1.04924       980.018       981.067    
   7  0.780674     -0.247598      -5.56999       5.56999       983.320       988.890    
   8  0.312863      -1.16199      -26.1403       26.1403       988.084       1014.22    
   9  0.990226     -0.982218E-02 -0.220961      0.220961       1000.12       1000.34    
  10  0.893872     -0.112193      -2.52390       2.52390       985.710       988.234    
  11  0.322320      -1.13221      -25.4703       25.4703       962.533       988.003    
  12  0.927465     -0.752997E-01  -1.69395       1.69395       986.238       987.932    
  13  0.539466     -0.617176      -13.8841       13.8841       1008.28       1022.16    
  14  0.461474     -0.773330      -17.3969       17.3969       1007.29       1024.69    
  15  0.745701     -0.293430      -6.60104       6.60104       996.403       1003.00    
  16  0.703580     -0.351573      -7.90903       7.90903       1001.49       1009.40    
  17  0.917420E-01  -2.38878      -53.7382       53.7382       1020.60       1074.34    
  18  0.671661     -0.398001      -8.95349       8.95349       1015.09       1024.05    
  19  0.845179     -0.168207      -3.78401       3.78401       1024.24       1028.03    
  20  0.283605E-01  -3.56276      -80.1483       80.1483       1017.12       1097.27    
  21  0.108883E-01  -4.52006      -101.684       101.684       1034.31       1136.00    
  22  0.506006     -0.681208      -15.3245       15.3245       1036.72       1052.04    
  23  0.353918      -1.03869      -23.3665       23.3665       1029.43       1052.80    
  24  0.656862     -0.420282      -9.45471       9.45471       1024.69       1034.14    
  25  0.691560     -0.368806      -8.29669       8.29669       1039.96       1048.26    
  26  0.445402     -0.808779      -18.1944       18.1944       978.958       997.152    
  27  0.832700     -0.183081      -4.11862       4.11862       993.949       998.068    
  28  0.963063     -0.376360E-01 -0.846665      0.846665       1049.77       1050.61    
  29  0.422212     -0.862247      -19.3972       19.3972       1051.91       1071.31    
  30  0.917895     -0.856720E-01  -1.92729       1.92729       1018.24       1020.17    
  31  0.767210     -0.264994      -5.96134       5.96134       1064.83       1070.79    
  32  0.360836      -1.01933      -22.9310       22.9310       1053.15       1076.08    
  33  0.635930     -0.452667      -10.1832       10.1832       1057.36       1067.55    
  34  0.687292     -0.374995      -8.43594       8.43594       1058.50       1066.93    
  35  0.833832     -0.181724      -4.08808       4.08808       1005.24       1009.33    
  36  0.362075      -1.01590      -22.8539       22.8539       1074.82       1097.67    
  37  0.385764     -0.952530      -21.4282       21.4282       1063.79       1085.22    
  38  0.752556     -0.284279      -6.39518       6.39518       983.579       989.974    
  39  0.547433     -0.602515      -13.5542       13.5542       1032.65       1046.21    
  40  0.171004      -1.76607      -39.7297       39.7297       1004.20       1043.93    
  41  0.159022      -1.83871      -41.3639       41.3639       1034.59       1075.95    
  42  0.850806     -0.161571      -3.63471       3.63471       1031.63       1035.26    
  43  0.926075     -0.768001E-01  -1.72770       1.72770       1039.49       1041.22    
  44  0.584885     -0.536340      -12.0656       12.0656       1051.03       1063.09    
  45  0.547650     -0.602120      -13.5454       13.5454       1112.57       1126.11    
  46  0.864296     -0.145840      -3.28084       3.28084       996.274       999.555    
  47  0.384639     -0.955450      -21.4939       21.4939       944.199       965.693    
  48  0.359776      -1.02227      -22.9972       22.9972       1122.64       1145.64    
  49  0.147032      -1.91711      -43.1275       43.1275       1163.17       1206.29    
  50  0.649806     -0.431082      -9.69767       9.69767       1000.42       1010.12    
  51  0.909946     -0.943695E-01  -2.12295       2.12295       1106.52       1108.64    
  52  0.740699     -0.300161      -6.75246       6.75246       1166.27       1173.02    
  53  0.959446     -0.413992E-01 -0.931321      0.931321       1104.99       1105.92    
loop,thermsimp(1:2)       30   41.5721       13.3185    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265       1003.49          0.84          1.14         21.86          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1003.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       30
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       31
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      264     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -28.8375       28.8375       943.917       972.755    
   2  0.202445      -1.59728      -35.9327       35.9327       944.199       980.132    
   3  0.927152     -0.756373E-01  -1.70155       1.70155       971.915       973.616    
   4  0.403144     -0.908460      -20.4368       20.4368       980.018       1000.45    
   5  0.791838     -0.233398      -5.25056       5.25056       968.905       974.156    
   6  0.292576      -1.22903      -27.6484       27.6484       986.238       1013.89    
   7  0.135578      -1.99821      -44.9520       44.9520       962.533       1007.49    
   8  0.516570     -0.660545      -14.8597       14.8597       983.679       998.539    
   9  0.730579     -0.313918      -7.06194       7.06194       985.710       992.772    
  10  0.508248     -0.676786      -15.2251       15.2251       983.320       998.545    
  11  0.928455     -0.742338E-01  -1.66997       1.66997       983.579       985.249    
  12  0.696477     -0.361721      -8.13731       8.13731       978.958       987.095    
  13  0.465556     -0.764522      -17.1988       17.1988       993.949       1011.15    
  14  0.194653      -1.63654      -36.8157       36.8157       996.274       1033.09    
  15  0.650312     -0.430303      -9.68016       9.68016       1000.12       1009.80    
  16  0.555802     -0.587343      -13.2129       13.2129       996.403       1009.62    
  17  0.985517     -0.145893E-01 -0.328203      0.328203       1005.24       1005.57    
  18  0.923066     -0.800544E-01  -1.80091       1.80091       1001.49       1003.29    
  19  0.658765     -0.417388      -9.38961       9.38961       1000.42       1009.81    
  20  0.197878      -1.62010      -36.4461       36.4461       988.084       1024.53    
  21  0.449673     -0.799236      -17.9797       17.9797       973.408       991.388    
  22  0.208093      -1.56977      -35.3138       35.3138       1018.24       1053.56    
  23  0.102791      -2.27506      -51.1800       51.1800       1008.28       1059.46    
  24  0.650538     -0.429955      -9.67233       9.67233       1015.09       1024.77    
  25  0.223365      -1.49895      -33.7205       33.7205       1007.29       1041.01    
  26  0.520729     -0.652525      -14.6793       14.6793       1024.24       1038.92    
  27  0.919707E-01  -2.38629      -53.6822       53.6822       1024.69       1078.37    
  28  0.788427     -0.237716      -5.34768       5.34768       1031.63       1036.97    
  29  0.395754     -0.926961      -20.8530       20.8530       1039.49       1060.35    
  30  0.903388     -0.101603      -2.28568       2.28568       1004.20       1006.49    
  31  0.569415     -0.563145      -12.6686       12.6686       1032.65       1045.32    
  32  0.974677     -0.256496E-01 -0.577016      0.577016       1039.96       1040.54    
  33  0.376411     -0.977073      -21.9803       21.9803       1049.77       1071.75    
  34  0.309090      -1.17412      -26.4132       26.4132       1036.72       1063.13    
  35  0.248039      -1.39417      -31.3634       31.3634       1029.43       1060.80    
  36  0.941329     -0.604621E-01  -1.36016       1.36016       1051.03       1052.39    
  37  0.131879      -2.02587      -45.5743       45.5743       1058.50       1104.07    
  38  0.188022      -1.67120      -37.5955       37.5955       1057.36       1094.96    
  39  0.898649E-01  -2.40945      -54.2032       54.2032       1064.83       1119.03    
  40  0.853893     -0.157949      -3.55324       3.55324       1051.91       1055.46    
  41  0.643577     -0.440714      -9.91436       9.91436       1020.60       1030.51    
  42  0.664391     -0.408885      -9.19833       9.19833       1034.59       1043.78    
  43  0.825262     -0.192054      -4.32048       4.32048       1053.15       1057.47    
  44  0.611498     -0.491843      -11.0646       11.0646       1063.79       1074.86    
  45  0.284000      -1.25878      -28.3177       28.3177       1017.12       1045.44    
  46  0.108174      -2.22402      -50.0317       50.0317       1074.82       1124.85    
  47  0.293070      -1.22734      -27.6105       27.6105       1104.99       1132.60    
  48  0.412045     -0.886623      -19.9456       19.9456       1106.52       1126.47    
  49  0.464041     -0.767783      -17.2721       17.2721       1112.57       1129.84    
  50  0.711768     -0.340003      -7.64874       7.64874       1034.31       1041.96    
  51  0.919970     -0.834138E-01  -1.87649       1.87649       1122.64       1124.51    
  52  0.551321     -0.595437      -13.3950       13.3950       1166.27       1179.66    
  53  0.720690E-01  -2.63013      -59.1677       59.1677       1003.49       1062.65    
loop,thermsimp(1:2)       31   28.8375       35.9327    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266       1019.02          0.85          1.15         22.06          0.01          0.05         24.11
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1019.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       31
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       32
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      265     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -7.98069       7.98069       943.917       951.898    
   2  0.779682     -0.248869      -5.59859       5.59859       971.915       977.513    
   3  0.611645     -0.491604      -11.0592       11.0592       968.905       979.964    
   4  0.380626     -0.965937      -21.7298       21.7298       944.199       965.929    
   5  0.986599     -0.134915E-01 -0.303506      0.303506       983.579       983.882    
   6  0.699021     -0.358075      -8.05529       8.05529       978.958       987.013    
   7  0.981217E-01  -2.32155      -52.2258       52.2258       973.408       1025.63    
   8  0.221199      -1.50869      -33.9397       33.9397       985.710       1019.65    
   9  0.802460     -0.220073      -4.95079       4.95079       983.679       988.630    
  10  0.623430     -0.472519      -10.6298       10.6298       983.320       993.949    
  11  0.669862     -0.400684      -9.01383       9.01383       980.018       989.032    
  12  0.957999     -0.429090E-01 -0.965286      0.965286       1001.49       1002.46    
  13  0.569879E-01  -2.86492      -64.4495       64.4495       1005.24       1069.69    
  14  0.245244      -1.40550      -31.6183       31.6183       1004.20       1035.82    
  15  0.870123     -0.139121      -3.12968       3.12968       962.533       965.663    
  16  0.429679     -0.844716      -19.0028       19.0028       996.403       1015.41    
  17  0.369880     -0.994577      -22.3741       22.3741       1000.12       1022.50    
  18  0.964882     -0.357490E-01 -0.804215      0.804215       1000.42       1001.23    
  19  0.625983     -0.468432      -10.5379       10.5379       993.949       1004.49    
  20  0.508652     -0.675991      -15.2072       15.2072       986.238       1001.45    
  21  0.694697     -0.364279      -8.19486       8.19486       988.084       996.279    
  22  0.817819     -0.201114      -4.52428       4.52428       1015.09       1019.62    
  23  0.655732     -0.422003      -9.49343       9.49343       1020.60       1030.09    
  24  0.658757     -0.417401      -9.38989       9.38989       996.274       1005.66    
  25  0.325934      -1.12106      -25.2195       25.2195       1031.63       1056.85    
  26  0.849137     -0.163535      -3.67890       3.67890       1024.24       1027.92    
  27  0.953435     -0.476843E-01  -1.07271       1.07271       1039.96       1041.03    
  28  0.435049     -0.832297      -18.7234       18.7234       1007.29       1026.02    
  29  0.155341E-01  -4.16472      -93.6900       93.6900       1034.31       1128.00    
  30  0.390095     -0.941364      -21.1770       21.1770       1034.59       1055.76    
  31  0.400867E-02  -5.51929      -124.163       124.163       1032.65       1156.82    
  32  0.989750     -0.103025E-01 -0.231767      0.231767       1017.12       1017.35    
  33  0.194149      -1.63913      -36.8740       36.8740       1051.03       1087.90    
  34  0.573547     -0.555915      -12.5059       12.5059       1018.24       1030.75    
  35  0.570216     -0.561740      -12.6370       12.6370       1051.91       1064.55    
  36  0.802122     -0.220494      -4.96027       4.96027       1053.15       1058.11    
  37  0.831214E-01  -2.48745      -55.9580       55.9580       1008.28       1064.24    
  38  0.280368      -1.27165      -28.6072       28.6072       1039.49       1068.10    
  39  0.568263     -0.565171      -12.7142       12.7142       1029.43       1042.15    
  40  0.570544     -0.561165      -12.6240       12.6240       1003.49       1016.11    
  41  0.524202     -0.645877      -14.5297       14.5297       1036.72       1051.25    
  42  0.625335E-01  -2.77205      -62.3604       62.3604       1049.77       1112.13    
  43  0.717146     -0.332476      -7.47943       7.47943       1063.79       1071.27    
  44  0.234175      -1.45169      -32.6573       32.6573       1024.69       1057.35    
  45  0.366320      -1.00425      -22.5917       22.5917       1057.36       1079.95    
  46  0.458915     -0.778891      -17.5220       17.5220       1058.50       1076.02    
  47  0.379536     -0.968806      -21.7944       21.7944       1064.83       1086.62    
  48  0.854466     -0.157278      -3.53816       3.53816       1122.64       1126.18    
  49  0.452738E-01  -3.09503      -69.6261       69.6261       1074.82       1144.45    
  50  0.966525     -0.340477E-01 -0.765941      0.765941       1106.52       1107.29    
  51  0.400949     -0.913920      -20.5597       20.5597       1112.57       1133.13    
  52  0.563096     -0.574305      -12.9196       12.9196       1104.99       1117.91    
  53  0.612298     -0.490536      -11.0352       11.0352       1019.02       1030.05    
loop,thermsimp(1:2)       32   7.98069       5.59859    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267       1085.74          0.85          1.14         22.14          0.02          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1085.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       32
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       33
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      266     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -20.3908       20.3908       943.917       964.308    
   2  0.598662     -0.513057      -11.5418       11.5418       962.533       974.075    
   3  0.165178      -1.80073      -40.5094       40.5094       944.199       984.708    
   4  0.785331     -0.241651      -5.43620       5.43620       971.915       977.351    
   5  0.422061     -0.862604      -19.4053       19.4053       968.905       988.310    
   6  0.343624      -1.06821      -24.0305       24.0305       983.579       1007.61    
   7  0.988862     -0.112001E-01 -0.251959      0.251959       978.958       979.210    
   8  0.586093E-01  -2.83686      -63.8184       63.8184       983.679       1047.50    
   9  0.324880      -1.12430      -25.2924       25.2924       980.018       1005.31    
  10  0.869373     -0.139983      -3.14908       3.14908       983.320       986.469    
  11  0.314362      -1.15721      -26.0327       26.0327       988.084       1014.12    
  12  0.635265     -0.453712      -10.2068       10.2068       1000.42       1010.63    
  13  0.800738     -0.222221      -4.99911       4.99911       986.238       991.237    
  14  0.234515      -1.45024      -32.6247       32.6247       1001.49       1034.12    
  15  0.818766     -0.199957      -4.49826       4.49826       993.949       998.448    
  16  0.480807     -0.732289      -16.4737       16.4737       996.274       1012.75    
  17  0.173083      -1.75398      -39.4578       39.4578       996.403       1035.86    
  18  0.544835     -0.607272      -13.6613       13.6613       1003.49       1017.15    
  19  0.955728     -0.452816E-01  -1.01866       1.01866       1017.12       1018.14    
  20  0.909631     -0.947157E-01  -2.13074       2.13074       1015.09       1017.23    
  21  0.538276     -0.619384      -13.9337       13.9337       985.710       999.644    
  22  0.640373     -0.445705      -10.0266       10.0266       1000.12       1010.15    
  23  0.588429     -0.530300      -11.9297       11.9297       973.408       985.338    
  24  0.954392     -0.466804E-01  -1.05013       1.05013       1007.29       1008.34    
  25  0.976738     -0.235363E-01 -0.529476      0.529476       1024.24       1024.77    
  26  0.801897     -0.220775      -4.96658       4.96658       1019.02       1023.98    
  27  0.679499     -0.386400      -8.69251       8.69251       1020.60       1029.29    
  28  0.303686      -1.19176      -26.8100       26.8100       1018.24       1045.05    
  29  0.907562     -0.969936E-01  -2.18198       2.18198       1004.20       1006.39    
  30  0.117971E-01  -4.43990      -99.8806       99.8806       1039.96       1139.84    
  31  0.324683      -1.12491      -25.3060       25.3060       1029.43       1054.74    
  32  0.662106     -0.412329      -9.27581       9.27581       1036.72       1045.99    
  33  0.334080      -1.09637      -24.6642       24.6642       1034.59       1059.25    
  34  0.307577      -1.17903      -26.5236       26.5236       1031.63       1058.15    
  35  0.539029     -0.617986      -13.9023       13.9023       1024.69       1038.59    
  36  0.822737     -0.195119      -4.38942       4.38942       1053.15       1057.54    
  37  0.973480     -0.268776E-01 -0.604643      0.604643       1008.28       1008.88    
  38  0.918970     -0.845018E-01  -1.90096       1.90096       1051.91       1053.81    
  39  0.203072      -1.59419      -35.8632       35.8632       1039.49       1075.36    
  40  0.467655     -0.760024      -17.0976       17.0976       1005.24       1022.34    
  41  0.323145      -1.12965      -25.4128       25.4128       1063.79       1089.20    
  42  0.505961     -0.681295      -15.3265       15.3265       1058.50       1073.82    
  43  0.699853E-01  -2.65947      -59.8278       59.8278       1057.36       1117.19    
  44  0.188263      -1.66991      -37.5666       37.5666       1064.83       1102.40    
  45  0.663178     -0.410711      -9.23941       9.23941       1051.03       1060.27    
  46  0.680233     -0.385320      -8.66820       8.66820       1106.52       1115.19    
  47  0.717812     -0.331548      -7.45853       7.45853       1049.77       1057.22    
  48  0.319374      -1.14139      -25.6769       25.6769       1104.99       1130.67    
  49  0.667076     -0.404851      -9.10757       9.10757       1122.64       1131.75    
  50  0.755360     -0.280560      -6.31152       6.31152       1034.31       1040.63    
  51  0.105804      -2.24617      -50.5301       50.5301       1112.57       1163.10    
  52  0.432752     -0.837590      -18.8425       18.8425       1074.82       1093.66    
  53  0.258710      -1.35205      -30.4158       30.4158       1085.74       1116.16    
loop,thermsimp(1:2)       33   20.3908       11.5418    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       1063.79          0.86          1.14         21.91          0.01          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1063.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       33
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       34
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      267     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -33.1675       33.1675       943.917       977.085    
   2  0.299376      -1.20605      -27.1315       27.1315       962.533       989.665    
   3  0.220114      -1.51361      -34.0503       34.0503       971.915       1005.97    
   4  0.229209      -1.47312      -33.1396       33.1396       978.958       1012.10    
   5  0.902477     -0.102612      -2.30838       2.30838       944.199       946.507    
   6  0.659052     -0.416953      -9.37982       9.37982       973.408       982.788    
   7  0.100321E-01  -4.60197      -103.526       103.526       983.320       1086.85    
   8  0.588837     -0.529606      -11.9141       11.9141       968.905       980.819    
   9  0.270943      -1.30585      -29.3765       29.3765       986.238       1015.61    
  10  0.505518     -0.682171      -15.3462       15.3462       993.949       1009.30    
  11  0.264565      -1.32967      -29.9124       29.9124       985.710       1015.62    
  12  0.806386     -0.215193      -4.84102       4.84102       980.018       984.859    
  13  0.340560      -1.07716      -24.2320       24.2320       1004.20       1028.44    
  14  0.906186     -0.985106E-01  -2.21611       2.21611       983.579       985.795    
  15  0.786070     -0.240709      -5.41502       5.41502       1007.29       1012.71    
  16  0.540508     -0.615247      -13.8407       13.8407       1008.28       1022.12    
  17  0.935065     -0.671392E-01  -1.51037       1.51037       1000.12       1001.63    
  18  0.915359     -0.884391E-01  -1.98954       1.98954       1000.42       1002.41    
  19  0.958261     -0.426353E-01 -0.959129      0.959129       996.274       997.234    
  20  0.935110     -0.670907E-01  -1.50928       1.50928       988.084       989.593    
  21  0.637755     -0.449800      -10.1188       10.1188       1003.49       1013.60    
  22  0.975714     -0.245861E-01 -0.553093      0.553093       1015.09       1015.65    
  23  0.797424     -0.226369      -5.09243       5.09243       1017.12       1022.21    
  24  0.214179      -1.54094      -34.6653       34.6653       1005.24       1039.90    
  25  0.372145     -0.988472      -22.2368       22.2368       1019.02       1041.25    
  26  0.925208     -0.777367E-01  -1.74877       1.74877       1024.24       1025.99    
  27  0.175897      -1.73786      -39.0950       39.0950       1020.60       1059.69    
  28  0.952033     -0.491554E-01  -1.10581       1.10581       1001.49       1002.60    
  29  0.158274E-01  -4.14601      -93.2692       93.2692       996.403       1089.67    
  30  0.799308     -0.224008      -5.03932       5.03932       1024.69       1029.73    
  31  0.248227      -1.39341      -31.3463       31.3463       1034.31       1065.66    
  32  0.244914      -1.40685      -31.6486       31.6486       1018.24       1049.89    
  33  0.390842     -0.939452      -21.1340       21.1340       1036.72       1057.85    
  34  0.146784      -1.91879      -43.1654       43.1654       983.679       1026.84    
  35  0.500975     -0.691199      -15.5493       15.5493       1051.91       1067.46    
  36  0.480131E-01  -3.03628      -68.3046       68.3046       1029.43       1097.74    
  37  0.124503      -2.08343      -46.8690       46.8690       1049.77       1096.63    
  38  0.670304     -0.400024      -8.99900       8.99900       1053.15       1062.15    
  39  0.997449     -0.255468E-02 -0.574704E-01  0.574704E-01   1031.63       1031.68    
  40  0.681761     -0.383076      -8.61772       8.61772       1034.59       1043.20    
  41  0.440529     -0.819778      -18.4418       18.4418       1051.03       1069.47    
  42  0.342489      -1.07152      -24.1050       24.1050       1058.50       1082.60    
  43  0.735753     -0.306861      -6.90318       6.90318       1039.49       1046.40    
  44  0.614752     -0.486537      -10.9452       10.9452       1063.79       1074.74    
  45  0.351660      -1.04509      -23.5105       23.5105       1074.82       1098.33    
  46  0.777165     -0.252103      -5.67133       5.67133       1064.83       1070.50    
  47  0.392618     -0.934919      -21.0320       21.0320       1106.52       1127.55    
  48  0.385647     -0.952832      -21.4350       21.4350       1085.74       1107.17    
  49  0.834392     -0.181052      -4.07298       4.07298       1057.36       1061.43    
  50  0.469158     -0.756815      -17.0254       17.0254       1104.99       1122.02    
  51  0.697320     -0.360511      -8.11010       8.11010       1122.64       1130.75    
  52  0.987150     -0.129333E-01 -0.290948      0.290948       1039.96       1040.25    
  53  0.512413     -0.668624      -15.0415       15.0415       1063.79       1078.83    
loop,thermsimp(1:2)       34   33.1675       27.1315    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269        934.44          0.84          1.15         21.89          0.00          0.06         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    270       1847.35          0.83          1.15         21.82          0.00          0.05         23.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    934.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       34
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       35
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      269     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -23.7952       23.7952       944.199       967.994    
   2  0.621479     -0.475653      -10.7004       10.7004       943.917       954.618    
   3  0.221273      -1.50836      -33.9322       33.9322       968.905       1002.84    
   4  0.180626E-01  -4.01391      -90.2975       90.2975       973.408       1063.71    
   5  0.216093      -1.53205      -34.4652       34.4652       980.018       1014.48    
   6  0.351343      -1.04599      -23.5308       23.5308       983.579       1007.11    
   7  0.360847      -1.01930      -22.9303       22.9303       988.084       1011.01    
   8  0.439525     -0.822061      -18.4932       18.4932       962.533       981.026    
   9  0.910616E-01  -2.39622      -53.9056       53.9056       996.274       1050.18    
  10  0.549745     -0.598300      -13.4594       13.4594       1000.12       1013.58    
  11  0.619825     -0.478318      -10.7603       10.7603       1000.42       1011.18    
  12  0.548169E-01  -2.90376      -65.3232       65.3232       1001.49       1066.81    
  13  0.947163     -0.542842E-01  -1.22118       1.22118       971.915       973.136    
  14  0.725459     -0.320951      -7.22015       7.22015       993.949       1001.17    
  15  0.481613     -0.730615      -16.4360       16.4360       978.958       995.394    
  16  0.866286     -0.143540      -3.22910       3.22910       1007.29       1010.52    
  17  0.221988E-01  -3.80772      -85.6589       85.6589       1003.49       1089.14    
  18  0.980823     -0.193630E-01 -0.435593      0.435593       986.238       986.673    
  19  0.332549      -1.10097      -24.7675       24.7675       985.710       1010.48    
  20  0.989035     -0.110256E-01 -0.248033      0.248033       1015.09       1015.34    
  21  0.364016      -1.01056      -22.7336       22.7336       1008.28       1031.01    
  22  0.861799     -0.148733      -3.34592       3.34592       1017.12       1020.47    
  23  0.622306     -0.474324      -10.6704       10.6704       1024.24       1034.91    
  24  0.575476     -0.552558      -12.4304       12.4304       983.679       996.110    
  25  0.205536      -1.58213      -35.5918       35.5918       1004.20       1039.80    
  26  0.124037      -2.08718      -46.9534       46.9534       1024.69       1071.64    
  27  0.467008     -0.761408      -17.1287       17.1287       1031.63       1048.76    
  28  0.273870      -1.29510      -29.1348       29.1348       1005.24       1034.37    
  29  0.842780     -0.171050      -3.84795       3.84795       1039.96       1043.81    
  30  0.709315     -0.343455      -7.72641       7.72641       1019.02       1026.74    
  31  0.677144     -0.389871      -8.77058       8.77058       1034.59       1043.36    
  32  0.656062     -0.421500      -9.48212       9.48212       1039.49       1048.97    
  33  0.721592     -0.326295      -7.34038       7.34038       1018.24       1025.58    
  34  0.120172      -2.11883      -47.6655       47.6655       1036.72       1084.38    
  35  0.832403     -0.183439      -4.12666       4.12666       1020.60       1024.72    
  36  0.607577     -0.498276      -11.2093       11.2093       1057.36       1068.57    
  37  0.169814      -1.77305      -39.8867       39.8867       1053.15       1093.04    
  38  0.578085     -0.548034      -12.3286       12.3286       1034.31       1046.64    
  39  0.201144      -1.60373      -36.0778       36.0778       1051.91       1087.99    
  40  0.922823     -0.803178E-01  -1.80684       1.80684       1051.03       1052.84    
  41  0.136644      -1.99038      -44.7758       44.7758       1064.83       1109.61    
  42  0.836366     -0.178689      -4.01980       4.01980       1063.79       1067.81    
  43  0.590669     -0.526499      -11.8442       11.8442       1063.79       1075.63    
  44  0.745946     -0.293102      -6.59366       6.59366       1058.50       1065.09    
  45  0.874736     -0.133833      -3.01072       3.01072       983.320       986.330    
  46  0.370232     -0.993625      -22.3527       22.3527       996.403       1018.76    
  47  0.832293     -0.183570      -4.12962       4.12962       1049.77       1053.90    
  48  0.351566      -1.04536      -23.5165       23.5165       1029.43       1052.95    
  49  0.705870     -0.348324      -7.83594       7.83594       1074.82       1082.66    
  50  0.323816      -1.12758      -25.3662       25.3662       1085.74       1111.11    
  51  0.197269      -1.62319      -36.5154       36.5154       1104.99       1141.51    
  52  0.140686      -1.96123      -44.1200       44.1200       1106.52       1150.64    
  53  0.913651     -0.903067E-01  -2.03155       2.03155       934.437       936.469    
loop,thermsimp(1:2)       35   23.7952       10.7004    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271        986.17          0.85          1.14         21.94          0.00          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272       1464.75          0.84          1.14         21.86          0.02          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    986.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       35
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       36
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      271     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -32.7019       32.7019       934.437       967.139    
   2  0.607568     -0.498291      -11.2096       11.2096       943.917       955.127    
   3  0.905785     -0.989529E-01  -2.22606       2.22606       944.199       946.425    
   4  0.995938E-01  -2.30666      -51.8908       51.8908       971.915       1023.81    
   5  0.851360     -0.160920      -3.62008       3.62008       962.533       966.153    
   6  0.730583     -0.313913      -7.06182       7.06182       983.320       990.381    
   7  0.426216     -0.852810      -19.1849       19.1849       986.238       1005.42    
   8  0.285108      -1.25489      -28.2301       28.2301       978.958       1007.19    
   9  0.839246     -0.175251      -3.94248       3.94248       983.679       987.622    
  10  0.217639      -1.52492      -34.3047       34.3047       993.949       1028.25    
  11  0.183996E-02  -6.29801      -141.681       141.681       968.905       1110.59    
  12  0.682631     -0.381801      -8.58904       8.58904       983.579       992.168    
  13  0.203596      -1.59162      -35.8053       35.8053       985.710       1021.52    
  14  0.881164     -0.126512      -2.84603       2.84603       1007.29       1010.14    
  15  0.711431     -0.340477      -7.65940       7.65940       988.084       995.744    
  16  0.874326     -0.134302      -3.02127       3.02127       1000.42       1003.44    
  17  0.814222     -0.205523      -4.62347       4.62347       1000.12       1004.75    
  18  0.995668     -0.434126E-02 -0.976616E-01  0.976616E-01   980.018       980.116    
  19  0.693805     -0.365564      -8.22378       8.22378       1015.09       1023.32    
  20  0.958584     -0.422984E-01 -0.951550      0.951550       996.403       997.354    
  21  0.748022     -0.290323      -6.53115       6.53115       1017.12       1023.65    
  22  0.696703     -0.361396      -8.13001       8.13001       1020.60       1028.73    
  23  0.732990     -0.310623      -6.98782       6.98782       1018.24       1025.23    
  24  0.534749     -0.625958      -14.0816       14.0816       1019.02       1033.10    
  25  0.691641     -0.368688      -8.29405       8.29405       1008.28       1016.57    
  26  0.300458      -1.20245      -27.0504       27.0504       1005.24       1032.29    
  27  0.977116     -0.231502E-01 -0.520790      0.520790       1024.24       1024.76    
  28  0.542581     -0.611418      -13.7545       13.7545       1004.20       1017.96    
  29  0.266111      -1.32384      -29.7813       29.7813       1034.59       1064.37    
  30  0.692298     -0.367738      -8.27268       8.27268       1039.96       1048.23    
  31  0.664047     -0.409403      -9.20998       9.20998       1034.31       1043.52    
  32  0.542186     -0.612146      -13.7709       13.7709       1031.63       1045.40    
  33  0.362243      -1.01544      -22.8434       22.8434       1039.49       1062.34    
  34  0.578658     -0.547044      -12.3064       12.3064       996.274       1008.58    
  35  0.489298     -0.714783      -16.0798       16.0798       1051.03       1067.11    
  36  0.617485     -0.482100      -10.8454       10.8454       1029.43       1040.28    
  37  0.368651     -0.997905      -22.4490       22.4490       1049.77       1072.21    
  38  0.198936      -1.61477      -36.3261       36.3261       973.408       1009.73    
  39  0.505263     -0.682676      -15.3576       15.3576       1058.50       1073.86    
  40  0.983997     -0.161325E-01 -0.362918      0.362918       1001.49       1001.85    
  41  0.630553     -0.461159      -10.3743       10.3743       1063.79       1074.17    
  42  0.423821E-01  -3.16103      -71.1109       71.1109       1057.36       1128.47    
  43  0.488935     -0.715526      -16.0966       16.0966       1024.69       1040.78    
  44  0.402078     -0.911110      -20.4964       20.4964       1063.79       1084.28    
  45  0.380878     -0.965277      -21.7150       21.7150       1074.82       1096.54    
  46  0.260585E-01  -3.64741      -82.0526       82.0526       1036.72       1118.77    
  47  0.681660     -0.383224      -8.62105       8.62105       1051.91       1060.53    
  48  0.489074     -0.715241      -16.0901       16.0901       1003.49       1019.58    
  49  0.752363     -0.284536      -6.40097       6.40097       1053.15       1059.55    
  50  0.978934     -0.212911E-01 -0.478968      0.478968       1064.83       1065.31    
  51  0.297789      -1.21137      -27.2512       27.2512       1085.74       1112.99    
  52  0.551604     -0.594926      -13.3835       13.3835       1104.99       1118.38    
  53  0.546413     -0.604381      -13.5962       13.5962       986.168       999.764    
loop,thermsimp(1:2)       36   32.7019       11.2096    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273       1090.74          0.84          1.14         21.92          0.01          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1090.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       36
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       37
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      272     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -19.9863       19.9863       944.199       964.185    
   2  0.697205     -0.360676      -8.11382       8.11382       943.917       952.031    
   3  0.314648E-01  -3.45889      -77.8115       77.8115       962.533       1040.34    
   4  0.857269     -0.154003      -3.46447       3.46447       934.437       937.902    
   5  0.652165     -0.427457      -9.61614       9.61614       980.018       989.634    
   6  0.510145     -0.673060      -15.1412       15.1412       983.679       998.821    
   7  0.175175      -1.74197      -39.1875       39.1875       983.320       1022.51    
   8  0.373803     -0.984025      -22.1368       22.1368       983.579       1005.72    
   9  0.514972     -0.663642      -14.9294       14.9294       988.084       1003.01    
  10  0.548235     -0.601051      -13.5213       13.5213       996.403       1009.92    
  11  0.541310     -0.613763      -13.8073       13.8073       986.168       999.975    
  12  0.734083     -0.309133      -6.95429       6.95429       1001.49       1008.45    
  13  0.422599     -0.861332      -19.3766       19.3766       1000.42       1019.80    
  14  0.287055      -1.24808      -28.0770       28.0770       1000.12       1028.20    
  15  0.885133     -0.122017      -2.74491       2.74491       986.238       988.983    
  16  0.391075     -0.938857      -21.1206       21.1206       978.958       1000.08    
  17  0.473784     -0.747003      -16.8047       16.8047       996.274       1013.08    
  18  0.691812     -0.368440      -8.28848       8.28848       973.408       981.697    
  19  0.644447     -0.439363      -9.88397       9.88397       1007.29       1017.18    
  20  0.805933     -0.215754      -4.85363       4.85363       1008.28       1013.13    
  21  0.393766     -0.931998      -20.9664       20.9664       1004.20       1025.17    
  22  0.907098E-01  -2.40009      -53.9927       53.9927       1003.49       1057.48    
  23  0.376515     -0.976796      -21.9741       21.9741       985.710       1007.68    
  24  0.819190     -0.199439      -4.48661       4.48661       1015.09       1019.58    
  25  0.692438     -0.367536      -8.26813       8.26813       1017.12       1025.39    
  26  0.188370      -1.66935      -37.5539       37.5539       971.915       1009.47    
  27  0.500532     -0.692083      -15.5692       15.5692       1024.24       1039.81    
  28  0.282311      -1.26475      -28.4519       28.4519       1018.24       1046.69    
  29  0.338061      -1.08453      -24.3977       24.3977       993.949       1018.35    
  30  0.466208     -0.763123      -17.1673       17.1673       1020.60       1037.77    
  31  0.893084     -0.113075      -2.54374       2.54374       1005.24       1007.78    
  32  0.818806     -0.199908      -4.49717       4.49717       1019.02       1023.51    
  33  0.585066     -0.536031      -12.0586       12.0586       1029.43       1041.49    
  34  0.527412     -0.639774      -14.3924       14.3924       1024.69       1039.08    
  35  0.994295     -0.572143E-02 -0.128710      0.128710       1034.31       1034.44    
  36  0.739278     -0.302082      -6.79567       6.79567       1031.63       1038.42    
  37  0.230995      -1.46536      -32.9649       32.9649       1039.96       1072.93    
  38  0.414929     -0.879648      -19.7887       19.7887       1053.15       1072.94    
  39  0.378446     -0.971682      -21.8591       21.8591       1051.91       1073.77    
  40  0.368620     -0.997990      -22.4509       22.4509       1039.49       1061.94    
  41  0.301312      -1.19961      -26.9865       26.9865       1034.59       1061.57    
  42  0.105882E-01  -4.54801      -102.313       102.313       1064.83       1167.14    
  43  0.481885     -0.730049      -16.4233       16.4233       1051.03       1067.45    
  44  0.446716     -0.805833      -18.1281       18.1281       1049.77       1067.89    
  45  0.482098     -0.729608      -16.4134       16.4134       1058.50       1074.91    
  46  0.278892      -1.27693      -28.7260       28.7260       1063.79       1092.52    
  47  0.756484     -0.279074      -6.27809       6.27809       1063.79       1070.06    
  48  0.662766     -0.411334      -9.25342       9.25342       1074.82       1084.07    
  49  0.433861E-01  -3.13762      -70.5842       70.5842       968.905       1039.49    
  50  0.825649E-02  -4.79676      -107.908       107.908       1085.74       1193.65    
  51  0.476679     -0.740911      -16.6676       16.6676       1104.99       1121.66    
  52  0.128614      -2.05094      -46.1382       46.1382       1036.72       1082.86    
  53  0.609086     -0.495797      -11.1535       11.1535       1090.74       1101.89    
loop,thermsimp(1:2)       37   19.9863       8.11382    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274       1010.64          0.85          1.15         21.86          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1010.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       37
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       38
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      273     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -20.1206       20.1206       934.437       954.558    
   2  0.259700      -1.34823      -30.3299       30.3299       943.917       974.247    
   3  0.681144E-01  -2.68657      -60.4373       60.4373       944.199       1004.64    
   4  0.158140      -1.84427      -41.4890       41.4890       973.408       1014.90    
   5  0.497681     -0.697796      -15.6977       15.6977       986.238       1001.94    
   6  0.800218     -0.222871      -5.01372       5.01372       980.018       985.032    
   7  0.831967     -0.183962      -4.13844       4.13844       983.679       987.818    
   8  0.707345     -0.346237      -7.78898       7.78898       986.168       993.957    
   9  0.265927      -1.32454      -29.7969       29.7969       978.958       1008.75    
  10  0.659046     -0.416962      -9.38002       9.38002       988.084       997.464    
  11  0.654587E-01  -2.72634      -61.3320       61.3320       983.579       1044.91    
  12  0.223329      -1.49911      -33.7242       33.7242       985.710       1019.43    
  13  0.996019     -0.398855E-02 -0.897269E-01  0.897269E-01   1005.24       1005.33    
  14  0.553910     -0.590753      -13.2896       13.2896       1001.49       1014.78    
  15  0.218863      -1.51931      -34.1786       34.1786       971.915       1006.09    
  16  0.414020     -0.881841      -19.8380       19.8380       996.403       1016.24    
  17  0.229117      -1.47352      -33.1485       33.1485       996.274       1029.42    
  18  0.341764      -1.07363      -24.1526       24.1526       1008.28       1032.43    
  19  0.357052      -1.02987      -23.1681       23.1681       1007.29       1030.46    
  20  0.780779     -0.247463      -5.56697       5.56697       993.949       999.516    
  21  0.382234     -0.961721      -21.6350       21.6350       1015.09       1036.73    
  22  0.123899      -2.08829      -46.9785       46.9785       1000.42       1047.40    
  23  0.393312     -0.933152      -20.9923       20.9923       983.320       1004.31    
  24  0.481741     -0.730349      -16.4300       16.4300       1019.02       1035.45    
  25  0.120001      -2.12026      -47.6975       47.6975       1004.20       1051.90    
  26  0.506023     -0.681173      -15.3238       15.3238       1017.12       1032.44    
  27  0.891157     -0.115235      -2.59234       2.59234       1000.12       1002.71    
  28  0.584674     -0.536701      -12.0737       12.0737       1034.31       1046.39    
  29  0.313196      -1.16093      -26.1163       26.1163       1020.60       1046.71    
  30  0.507340     -0.678574      -15.2653       15.2653       1031.63       1046.89    
  31  0.985030     -0.150835E-01 -0.339321      0.339321       1024.69       1025.03    
  32  0.186570      -1.67895      -37.7698       37.7698       968.905       1006.67    
  33  0.992622     -0.740493E-02 -0.166582      0.166582       1024.24       1024.41    
  34  0.344152      -1.06667      -23.9960       23.9960       962.533       986.529    
  35  0.327214      -1.11714      -25.1314       25.1314       1029.43       1054.56    
  36  0.722008     -0.325719      -7.32742       7.32742       1018.24       1025.57    
  37  0.471441     -0.751960      -16.9162       16.9162       1003.49       1020.40    
  38  0.483594     -0.726510      -16.3437       16.3437       1034.59       1050.93    
  39  0.799410     -0.223881      -5.03645       5.03645       1039.49       1044.53    
  40  0.864070     -0.146101      -3.28671       3.28671       1051.03       1054.31    
  41  0.326419      -1.11957      -25.1861       25.1861       1049.77       1074.95    
  42  0.970166E-01  -2.33287      -52.4806       52.4806       1063.79       1116.27    
  43  0.822479     -0.195432      -4.39647       4.39647       1039.96       1044.36    
  44  0.719858     -0.328701      -7.39451       7.39451       1053.15       1060.55    
  45  0.359763      -1.02231      -22.9980       22.9980       1051.91       1074.91    
  46  0.879180     -0.128765      -2.89672       2.89672       1058.50       1061.39    
  47  0.152514      -1.88050      -42.3039       42.3039       1036.72       1079.02    
  48  0.379430     -0.969085      -21.8007       21.8007       1074.82       1096.62    
  49  0.444703     -0.810349      -18.2297       18.2297       1063.79       1082.02    
  50  0.240485      -1.42510      -32.0592       32.0592       1090.74       1122.80    
  51  0.682479     -0.382024      -8.59406       8.59406       1104.99       1113.59    
  52  0.989508     -0.105479E-01 -0.237287      0.237287       1064.83       1065.07    
  53  0.626329E-01  -2.77046      -62.3247       62.3247       1010.64       1072.96    
loop,thermsimp(1:2)       38   20.1206       30.3299    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275       1051.07          0.85          1.15         21.82          0.00          0.05         23.87
Just calling func    0   0         23.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1051.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       38
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       39
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      274     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -46.7670       46.7670       934.437       981.204    
   2  0.274837      -1.29158      -29.0554       29.0554       943.917       972.973    
   3  0.305931E-01  -3.48698      -78.4435       78.4435       980.018       1058.46    
   4  0.929157     -0.734779E-01  -1.65297       1.65297       962.533       964.186    
   5  0.995956     -0.405208E-02 -0.911560E-01  0.911560E-01   983.679       983.771    
   6  0.904971     -0.998521E-01  -2.24628       2.24628       986.168       988.414    
   7  0.189758      -1.66200      -37.3887       37.3887       988.084       1025.47    
   8  0.134931      -2.00299      -45.0596       45.0596       993.949       1039.01    
   9  0.302412      -1.19596      -26.9046       26.9046       986.238       1013.14    
  10  0.389155     -0.943777      -21.2313       21.2313       1000.12       1021.35    
  11  0.947428     -0.540040E-01  -1.21488       1.21488       983.320       984.535    
  12  0.338357      -1.08365      -24.3780       24.3780       944.199       968.577    
  13  0.937476     -0.645645E-01  -1.45245       1.45245       1005.24       1006.69    
  14  0.399493     -0.917560      -20.6415       20.6415       971.915       992.556    
  15  0.527586     -0.639444      -14.3850       14.3850       968.905       983.290    
  16  0.297740      -1.21153      -27.2548       27.2548       978.958       1006.21    
  17  0.557978     -0.583436      -13.1250       13.1250       1001.49       1014.62    
  18  0.267521      -1.31856      -29.6624       29.6624       973.408       1003.07    
  19  0.637637     -0.449986      -10.1229       10.1229       996.403       1006.53    
  20  0.838569     -0.176059      -3.96064       3.96064       985.710       989.671    
  21  0.132199E-01  -4.32603      -97.3190       97.3190       1003.49       1100.80    
  22  0.745606     -0.293557      -6.60390       6.60390       1024.24       1030.85    
  23  0.334504      -1.09511      -24.6356       24.6356       1024.69       1049.32    
  24  0.118852      -2.12987      -47.9139       47.9139       1018.24       1066.16    
  25  0.319911      -1.13971      -25.6391       25.6391       996.274       1021.91    
  26  0.638302E-01  -2.75153      -61.8987       61.8987       1007.29       1069.19    
  27  0.173204      -1.75329      -39.4422       39.4422       1008.28       1047.72    
  28  0.885640     -0.121444      -2.73203       2.73203       1017.12       1019.85    
  29  0.710758     -0.341423      -7.68069       7.68069       1019.02       1026.70    
  30  0.938919     -0.630265E-01  -1.41785       1.41785       1015.09       1016.51    
  31  0.217740      -1.52445      -34.2942       34.2942       1039.96       1074.25    
  32  0.130036      -2.03994      -45.8908       45.8908       1039.49       1085.38    
  33  0.331090      -1.10537      -24.8665       24.8665       983.579       1008.45    
  34  0.453525E-01  -3.09329      -69.5870       69.5870       1034.31       1103.90    
  35  0.494600     -0.704006      -15.8374       15.8374       1020.60       1036.44    
  36  0.488771E-01  -3.01845      -67.9033       67.9033       1031.63       1099.53    
  37  0.262916E-01  -3.63850      -81.8522       81.8522       1000.42       1082.27    
  38  0.975293     -0.250177E-01 -0.562802      0.562802       1034.59       1035.15    
  39  0.521026     -0.651955      -14.6664       14.6664       1004.20       1018.87    
  40  0.210960      -1.55609      -35.0059       35.0059       1051.03       1086.03    
  41  0.475166E-02  -5.34926      -120.338       120.338       1029.43       1149.77    
  42  0.675859     -0.391771      -8.81332       8.81332       1053.15       1061.97    
  43  0.691418     -0.369011      -8.30131       8.30131       1058.50       1066.80    
  44  0.425152     -0.855309      -19.2411       19.2411       1064.83       1084.07    
  45  0.141313      -1.95678      -44.0199       44.0199       1010.64       1054.65    
  46  0.902170     -0.102952      -2.31602       2.31602       1051.91       1054.22    
  47  0.794321     -0.230268      -5.18014       5.18014       1049.77       1054.95    
  48  0.685387     -0.377772      -8.49841       8.49841       1036.72       1045.22    
  49  0.273223      -1.29747      -29.1879       29.1879       1063.79       1092.98    
  50  0.784111     -0.243205      -5.47117       5.47117       1074.82       1080.29    
  51  0.824524     -0.192949      -4.34061       4.34061       1104.99       1109.33    
  52  0.855082     -0.156558      -3.52195       3.52195       1063.79       1067.31    
  53  0.744692E-01  -2.59737      -58.4308       58.4308       1051.07       1109.50    
loop,thermsimp(1:2)       39   46.7670       29.0554    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276        946.47          0.85          1.14         21.89          0.05          0.05         23.98
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    277       1046.06          0.85          1.12         21.73          0.14          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    946.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       39
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       40
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      276     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -17.1957       17.1957       962.533       979.729    
   2  0.310178      -1.17061      -26.3341       26.3341       944.199       970.533    
   3  0.883713     -0.123623      -2.78104       2.78104       943.917       946.698    
   4  0.641465     -0.444001      -9.98830       9.98830       934.437       944.426    
   5  0.458576E-01  -3.08222      -69.3379       69.3379       968.905       1038.24    
   6  0.611421     -0.491970      -11.0674       11.0674       983.679       994.747    
   7  0.292603      -1.22894      -27.6464       27.6464       983.320       1010.97    
   8  0.180818      -1.71026      -38.4743       38.4743       986.168       1024.64    
   9  0.490648     -0.712028      -16.0179       16.0179       985.710       1001.73    
  10  0.538601     -0.618781      -13.9202       13.9202       971.915       985.835    
  11  0.451209     -0.795824      -17.9030       17.9030       973.408       991.311    
  12  0.610260     -0.493870      -11.1102       11.1102       978.958       990.068    
  13  0.425113     -0.855401      -19.2432       19.2432       996.403       1015.65    
  14  0.647858     -0.434084      -9.76521       9.76521       1005.24       1015.00    
  15  0.394937     -0.929029      -20.8995       20.8995       983.579       1004.48    
  16  0.452279E-01  -3.09604      -69.6489       69.6489       986.238       1055.89    
  17  0.954905     -0.461437E-01  -1.03805       1.03805       1001.49       1002.53    
  18  0.362548      -1.01460      -22.8245       22.8245       1015.09       1037.92    
  19  0.808078     -0.213097      -4.79386       4.79386       1004.20       1009.00    
  20  0.219348      -1.51709      -34.1287       34.1287       1017.12       1051.25    
  21  0.206981      -1.57513      -35.4342       35.4342       1000.12       1035.56    
  22  0.719933     -0.328597      -7.39216       7.39216       996.274       1003.67    
  23  0.950238     -0.510432E-01  -1.14827       1.14827       988.084       989.232    
  24  0.845993     -0.167244      -3.76234       3.76234       1019.02       1022.78    
  25  0.157926      -1.84563      -41.5195       41.5195       1024.24       1065.76    
  26  0.430020     -0.843924      -18.9850       18.9850       1034.59       1053.57    
  27  0.624159     -0.471350      -10.6035       10.6035       1020.60       1031.20    
  28  0.355386      -1.03455      -23.2734       23.2734       993.949       1017.22    
  29  0.297353      -1.21284      -27.2841       27.2841       1036.72       1064.00    
  30  0.185476      -1.68483      -37.9021       37.9021       1008.28       1046.18    
  31  0.406569     -0.900002      -20.2466       20.2466       1024.69       1044.93    
  32  0.147052      -1.91697      -43.1244       43.1244       1051.91       1095.03    
  33  0.205955      -1.58010      -35.5460       35.5460       1010.64       1046.18    
  34  0.383503     -0.958409      -21.5605       21.5605       1049.77       1071.33    
  35  0.514677E-01  -2.96680      -66.7415       66.7415       980.018       1046.76    
  36  0.499194     -0.694760      -15.6294       15.6294       1053.15       1068.78    
  37  0.103172E-01  -4.57394      -102.896       102.896       1018.24       1121.14    
  38  0.470163     -0.754676      -16.9773       16.9773       1058.50       1075.48    
  39  0.983694     -0.164404E-01 -0.369844      0.369844       1063.79       1064.16    
  40  0.880425     -0.127351      -2.86490       2.86490       1007.29       1010.16    
  41  0.969759     -0.307072E-01 -0.690793      0.690793       1039.96       1040.65    
  42  0.761826E-01  -2.57462      -57.9190       57.9190       1074.82       1132.74    
  43  0.124427      -2.08404      -46.8827       46.8827       1000.42       1047.30    
  44  0.997702     -0.230032E-02 -0.517483E-01  0.517483E-01   1064.83       1064.88    
  45  0.213939      -1.54206      -34.6904       34.6904       1039.49       1074.18    
  46  0.471369     -0.752113      -16.9196       16.9196       1051.03       1067.95    
  47  0.421561E-01  -3.16638      -71.2312       71.2312       1063.79       1135.02    
  48  0.693092     -0.366592      -8.24690       8.24690       1031.63       1039.87    
  49  0.375157     -0.980409      -22.0554       22.0554       1003.49       1025.54    
  50  0.285659      -1.25296      -28.1867       28.1867       1034.31       1062.50    
  51  0.338951      -1.08190      -24.3386       24.3386       1104.99       1129.33    
  52  0.930127E-01  -2.37502      -53.4287       53.4287       1051.07       1104.50    
  53  0.840878     -0.173309      -3.89878       3.89878       946.467       950.365    
loop,thermsimp(1:2)       40   17.1957       26.3341    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278       1054.72          0.85          1.15         21.89          0.00          0.05         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1054.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       40
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       41
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      277     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -32.9571       32.9571       934.437       967.394    
   2  0.984723     -0.153953E-01 -0.346335      0.346335       943.917       944.264    
   3  0.689569     -0.371688      -8.36154       8.36154       946.467       954.828    
   4  0.539532     -0.617054      -13.8813       13.8813       944.199       958.080    
   5  0.103859      -2.26472      -50.9475       50.9475       962.533       1013.48    
   6  0.403261     -0.908171      -20.4303       20.4303       971.915       992.345    
   7  0.545138     -0.606716      -13.6488       13.6488       988.084       1001.73    
   8  0.211198      -1.55496      -34.9806       34.9806       978.958       1013.94    
   9  0.533123     -0.629004      -14.1501       14.1501       973.408       987.559    
  10  0.891214     -0.115171      -2.59089       2.59089       983.679       986.270    
  11  0.604806     -0.502847      -11.3121       11.3121       985.710       997.022    
  12  0.176166      -1.73633      -39.0607       39.0607       1001.49       1040.55    
  13  0.733693     -0.309664      -6.96624       6.96624       996.274       1003.24    
  14  0.248504      -1.39230      -31.3213       31.3213       983.579       1014.90    
  15  0.183808      -1.69387      -38.1054       38.1054       1004.20       1042.31    
  16  0.308674E-02  -5.78064      -130.042       130.042       1007.29       1137.34    
  17  0.651025     -0.429207      -9.65549       9.65549       983.320       992.975    
  18  0.864353     -0.145775      -3.27936       3.27936       1005.24       1008.52    
  19  0.547352     -0.602664      -13.5576       13.5576       996.403       1009.96    
  20  0.631248     -0.460057      -10.3495       10.3495       993.949       1004.30    
  21  0.344368E-01  -3.36863      -75.7811       75.7811       1019.02       1094.80    
  22  0.876828     -0.131444      -2.95699       2.95699       986.168       989.125    
  23  0.884538     -0.122690      -2.76006       2.76006       1003.49       1006.25    
  24  0.926808     -0.760084E-01  -1.70989       1.70989       1020.60       1022.31    
  25  0.823462     -0.194237      -4.36959       4.36959       1000.12       1004.49    
  26  0.852580     -0.159489      -3.58788       3.58788       1015.09       1018.68    
  27  0.577707     -0.548689      -12.3434       12.3434       968.905       981.248    
  28  0.510093     -0.673163      -15.1436       15.1436       1031.63       1046.77    
  29  0.890288     -0.116210      -2.61427       2.61427       1039.96       1042.57    
  30  0.304875      -1.18785      -26.7221       26.7221       1024.69       1051.41    
  31  0.152164      -1.88279      -42.3555       42.3555       1008.28       1050.63    
  32  0.718687     -0.330329      -7.43113       7.43113       1010.64       1018.07    
  33  0.488128     -0.717177      -16.1337       16.1337       980.018       996.152    
  34  0.373052     -0.986038      -22.1820       22.1820       1000.42       1022.60    
  35  0.247351      -1.39695      -31.4259       31.4259       1017.12       1048.55    
  36  0.532108     -0.630909      -14.1930       14.1930       1034.59       1048.78    
  37  0.828879E-02  -4.79285      -107.821       107.821       986.238       1094.06    
  38  0.168277      -1.78214      -40.0913       40.0913       1034.31       1074.41    
  39  0.253216      -1.37351      -30.8987       30.8987       1036.72       1067.62    
  40  0.458588     -0.779602      -17.5380       17.5380       1063.79       1081.32    
  41  0.725692     -0.320630      -7.21292       7.21292       1064.83       1072.04    
  42  0.283543      -1.26039      -28.3539       28.3539       1024.24       1052.60    
  43  0.798055     -0.225578      -5.07463       5.07463       1051.03       1056.10    
  44  0.805371     -0.216453      -4.86934       4.86934       1053.15       1058.02    
  45  0.580747     -0.543441      -12.2253       12.2253       1049.77       1061.99    
  46  0.581119     -0.542799      -12.2109       12.2109       1039.49       1051.70    
  47  0.305196      -1.18680      -26.6984       26.6984       1058.50       1085.20    
  48  0.905702     -0.990454E-01  -2.22814       2.22814       1051.91       1054.14    
  49  0.265633E-01  -3.62822      -81.6210       81.6210       1051.07       1132.69    
  50  0.114529E-01  -4.46951      -100.547       100.547       1018.24       1118.79    
  51  0.990634     -0.941033E-02 -0.211696      0.211696       1104.99       1105.20    
  52  0.609564     -0.495011      -11.1358       11.1358       1074.82       1085.96    
  53  0.380905     -0.965204      -21.7134       21.7134       1054.72       1076.44    
loop,thermsimp(1:2)       41   32.9571      0.346335    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279       1069.83          0.85          1.14         21.86          0.00          0.05         23.91
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1069.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       41
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       42
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      278     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -70.1174       70.1174       943.917       1014.03    
   2  0.196215      -1.62854      -36.6359       36.6359       946.467       983.102    
   3  0.501152     -0.690846      -15.5414       15.5414       944.199       959.740    
   4  0.288339      -1.24362      -27.9766       27.9766       934.437       962.414    
   5  0.773132     -0.257306      -5.78839       5.78839       968.905       974.693    
   6  0.417683     -0.873033      -19.6399       19.6399       983.679       1003.32    
   7  0.229479      -1.47195      -33.1131       33.1131       973.408       1006.52    
   8  0.964123     -0.365367E-01 -0.821933      0.821933       986.168       986.990    
   9  0.263782      -1.33263      -29.9791       29.9791       971.915       1001.89    
  10  0.102960      -2.27342      -51.1430       51.1430       983.320       1034.46    
  11  0.828790     -0.187788      -4.22451       4.22451       980.018       984.243    
  12  0.738697     -0.302868      -6.81335       6.81335       985.710       992.523    
  13  0.458595     -0.779589      -17.5377       17.5377       988.084       1005.62    
  14  0.905176     -0.996260E-01  -2.24120       2.24120       996.274       998.516    
  15  0.147067      -1.91687      -43.1220       43.1220       993.949       1037.07    
  16  0.142365      -1.94936      -43.8530       43.8530       1000.12       1043.98    
  17  0.483147     -0.727435      -16.3645       16.3645       1003.49       1019.85    
  18  0.640417     -0.445636      -10.0251       10.0251       1005.24       1015.26    
  19  0.719349     -0.329408      -7.41041       7.41041       996.403       1003.81    
  20  0.714234     -0.336545      -7.57095       7.57095       962.533       970.104    
  21  0.825507     -0.191757      -4.31379       4.31379       978.958       983.272    
  22  0.155188      -1.86312      -41.9129       41.9129       983.579       1025.49    
  23  0.248874      -1.39081      -31.2878       31.2878       1010.64       1041.92    
  24  0.107953      -2.22606      -50.0777       50.0777       1015.09       1065.17    
  25  0.349169      -1.05220      -23.6704       23.6704       1020.60       1044.27    
  26  0.967311     -0.332356E-01 -0.747672      0.747672       1000.42       1001.17    
  27  0.519506     -0.654877      -14.7322       14.7322       1001.49       1016.22    
  28  0.462662     -0.770758      -17.3391       17.3391       1004.20       1021.54    
  29  0.811438     -0.208948      -4.70051       4.70051       1039.96       1044.66    
  30  0.394710E-01  -3.23219      -72.7117       72.7117       1031.63       1104.34    
  31  0.482930     -0.727884      -16.3746       16.3746       1017.12       1033.50    
  32  0.520883     -0.652231      -14.6727       14.6727       1034.59       1049.26    
  33  0.980978E-01  -2.32179      -52.2313       52.2313       1008.28       1060.51    
  34  0.626549     -0.467529      -10.5176       10.5176       1024.69       1035.21    
  35  0.618402     -0.480616      -10.8120       10.8120       1039.49       1050.30    
  36  0.681438     -0.383550      -8.62838       8.62838       1024.24       1032.87    
  37  0.816820     -0.202336      -4.55177       4.55177       1051.91       1056.46    
  38  0.578487     -0.547340      -12.3130       12.3130       1051.03       1063.34    
  39  0.349734      -1.05058      -23.6340       23.6340       1053.15       1076.79    
  40  0.945672     -0.558596E-01  -1.25662       1.25662       1049.77       1051.02    
  41  0.767680     -0.264382      -5.94756       5.94756       1036.72       1042.67    
  42  0.122064      -2.10321      -47.3140       47.3140       1064.83       1112.14    
  43  0.211623      -1.55295      -34.9353       34.9353       1034.31       1069.25    
  44  0.969992E-01  -2.33305      -52.4846       52.4846       1054.72       1107.21    
  45  0.877482     -0.130699      -2.94023       2.94023       1063.79       1066.73    
  46  0.448991     -0.800752      -18.0138       18.0138       1058.50       1076.51    
  47  0.833113     -0.182586      -4.10748       4.10748       1074.82       1078.93    
  48  0.691765     -0.368508      -8.29001       8.29001       986.238       994.528    
  49  0.310664      -1.16904      -26.2990       26.2990       1019.02       1045.31    
  50  0.422283     -0.862080      -19.3935       19.3935       1104.99       1124.39    
  51  0.382184E-01  -3.26444      -73.4372       73.4372       1018.24       1091.68    
  52  0.679614E-01  -2.68882      -60.4879       60.4879       1051.07       1111.56    
  53  0.580404     -0.544031      -12.2386       12.2386       1069.83       1082.06    
loop,thermsimp(1:2)       42   70.1174       36.6359    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280        975.40          0.84          1.14         22.03          0.01          0.05         24.08
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    975.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       42
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       43
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      279     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -27.1904       27.1904       944.199       971.389    
   2  0.383173     -0.959268      -21.5798       21.5798       934.437       956.017    
   3  0.386205     -0.951387      -21.4025       21.4025       962.533       983.936    
   4  0.362178      -1.01562      -22.8475       22.8475       968.905       991.753    
   5  0.394462     -0.930233      -20.9266       20.9266       946.467       967.393    
   6  0.883072     -0.124349      -2.79736       2.79736       978.958       981.755    
   7  0.571477     -0.559531      -12.5873       12.5873       980.018       992.605    
   8  0.944036     -0.575912E-01  -1.29558       1.29558       986.168       987.464    
   9  0.326573      -1.11910      -25.1755       25.1755       985.710       1010.89    
  10  0.467297     -0.760791      -17.1148       17.1148       986.238       1003.35    
  11  0.828365     -0.188301      -4.23604       4.23604       996.274       1000.51    
  12  0.826991     -0.189962      -4.27341       4.27341       1000.42       1004.69    
  13  0.675447E-01  -2.69497      -60.6263       60.6263       971.915       1032.54    
  14  0.924113     -0.789214E-01  -1.77542       1.77542       983.679       985.455    
  15  0.810131     -0.210560      -4.73678       4.73678       996.403       1001.14    
  16  0.410286     -0.890900      -20.0418       20.0418       988.084       1008.13    
  17  0.334977      -1.09369      -24.6039       24.6039       973.408       998.012    
  18  0.119017      -2.12849      -47.8827       47.8827       943.917       991.800    
  19  0.447328     -0.804463      -18.0973       18.0973       1005.24       1023.34    
  20  0.324388E-02  -5.73098      -128.925       128.925       1001.49       1130.42    
  21  0.158272      -1.84344      -41.4703       41.4703       1003.49       1044.96    
  22  0.241219      -1.42205      -31.9906       31.9906       1004.20       1036.19    
  23  0.259790      -1.34788      -30.3221       30.3221       983.579       1013.90    
  24  0.521973     -0.650139      -14.6256       14.6256       1024.24       1038.87    
  25  0.336335      -1.08965      -24.5128       24.5128       1017.12       1041.63    
  26  0.642248     -0.442780      -9.96084       9.96084       983.320       993.280    
  27  0.984615     -0.155047E-01 -0.348796      0.348796       1024.69       1025.04    
  28  0.373782     -0.984082      -22.1380       22.1380       993.949       1016.09    
  29  0.932479     -0.699087E-01  -1.57267       1.57267       1010.64       1012.21    
  30  0.711360     -0.340577      -7.66166       7.66166       1036.72       1044.38    
  31  0.315363      -1.15403      -25.9612       25.9612       1000.12       1026.08    
  32  0.528583     -0.637556      -14.3425       14.3425       1020.60       1034.94    
  33  0.622355E-01  -2.77683      -62.4679       62.4679       1039.96       1102.43    
  34  0.144849      -1.93206      -43.4639       43.4639       1019.02       1062.48    
  35  0.868928     -0.140495      -3.16058       3.16058       1034.59       1037.75    
  36  0.243398      -1.41306      -31.7883       31.7883       1039.49       1071.28    
  37  0.936928     -0.651491E-01  -1.46560       1.46560       1049.77       1051.23    
  38  0.979804E-01  -2.32299      -52.2582       52.2582       1051.91       1104.17    
  39  0.805773     -0.215953      -4.85810       4.85810       1008.28       1013.14    
  40  0.210751      -1.55708      -35.0282       35.0282       1051.03       1086.06    
  41  0.497104     -0.698956      -15.7238       15.7238       1015.09       1030.82    
  42  0.532106     -0.630913      -14.1931       14.1931       1063.79       1077.98    
  43  0.898420     -0.107117      -2.40972       2.40972       1034.31       1036.72    
  44  0.579370     -0.545814      -12.2787       12.2787       1058.50       1070.78    
  45  0.191213      -1.65437      -37.2168       37.2168       1053.15       1090.37    
  46  0.491633     -0.710023      -15.9728       15.9728       1074.82       1090.79    
  47  0.989123     -0.109370E-01 -0.246040      0.246040       1069.83       1070.07    
  48  0.576855     -0.550164      -12.3765       12.3765       1018.24       1030.62    
  49  0.133368      -2.01464      -45.3216       45.3216       1031.63       1076.95    
  50  0.708426     -0.344710      -7.75463       7.75463       1054.72       1062.48    
  51  0.183469      -1.69571      -38.1469       38.1469       1051.07       1089.22    
  52  0.951201     -0.500300E-01  -1.12548       1.12548       1064.83       1065.96    
  53  0.380646E-01  -3.26847      -73.5279       73.5279       975.399       1048.93    
loop,thermsimp(1:2)       43   27.1904       21.5798    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281        988.09          0.83          1.14         22.16          0.06          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    988.09        1.048     -2.352      3.583     -102.6      1.207    
                      0.8248      1.103     -99.70      3.697     0.8409    

                       2.141     -2.009      1.540      7000.      7000.    

                      -1.942      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.425     -5.410     -9.803      6.776    

                      -15.29     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1262E-01 0.2789    -0.4067E-01 0.1824    

                     -0.2486    -0.1123     0.1636     0.1097     0.1239    



                     -0.5294    -0.5946      0.000     0.8948E-01-0.5308E-01

                     -0.2951E-01 0.1701    -0.7116    -0.9993E-01 0.3046    

                      0.5096E-01 0.1882E-01-0.6966     -1.270      7000.    



                      -1.417     -1.286     -2.142     -1.982    -0.3807    

                     -0.3252      9.641      8.793    -0.1672E+05 -6.000    

                     -0.3387     -2.424      9.407      8.859    -0.1969E+05



                      -6.000     0.6091    -0.2453      8.895      9.082    

                     -0.1944E+05 -6.000    -0.6456    -0.5308      9.090    

                       8.826    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    988.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       43
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       44
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      280     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -28.0779       28.0779       934.437       962.515    
   2  0.260243      -1.34614      -30.2829       30.2829       946.467       976.749    
   3  0.646915     -0.435540      -9.79795       9.79795       944.199       953.997    
   4  0.572447     -0.557835      -12.5491       12.5491       978.958       991.507    
   5  0.105907      -2.24520      -50.5082       50.5082       962.533       1013.04    
   6  0.693038     -0.366671      -8.24867       8.24867       983.679       991.928    
   7  0.329408      -1.11046      -24.9810       24.9810       986.168       1011.15    
   8  0.187221      -1.67546      -37.6914       37.6914       968.905       1006.60    
   9  0.545731     -0.605630      -13.6243       13.6243       943.917       957.542    
  10  0.752820     -0.283930      -6.38732       6.38732       980.018       986.405    
  11  0.153542      -1.87378      -42.1527       42.1527       983.320       1025.47    
  12  0.400659     -0.914645      -20.5760       20.5760       973.408       993.984    
  13  0.306182      -1.18357      -26.6258       26.6258       996.274       1022.90    
  14  0.270957E-01  -3.60838      -81.1746       81.1746       996.403       1077.58    
  15  0.776765     -0.252618      -5.68292       5.68292       986.238       991.921    
  16  0.711945     -0.339755      -7.64317       7.64317       1000.42       1008.06    
  17  0.217190      -1.52698      -34.3512       34.3512       988.084       1022.44    
  18  0.285226      -1.25447      -28.2208       28.2208       985.710       1013.93    
  19  0.348904      -1.05296      -23.6875       23.6875       1010.64       1034.32    
  20  0.686414     -0.376275      -8.46473       8.46473       1008.28       1016.74    
  21  0.212825      -1.54729      -34.8079       34.8079       983.579       1018.39    
  22  0.501697     -0.689760      -15.5169       15.5169       993.949       1009.47    
  23  0.363771      -1.01123      -22.7488       22.7488       1005.24       1027.99    
  24  0.789273     -0.236642      -5.32354       5.32354       1024.69       1030.01    
  25  0.232884      -1.45721      -32.7816       32.7816       1000.12       1032.90    
  26  0.754896     -0.281175      -6.32534       6.32534       1018.24       1024.57    
  27  0.639358     -0.447290      -10.0623       10.0623       1015.09       1025.16    
  28  0.532505     -0.630163      -14.1762       14.1762       971.915       986.091    
  29  0.759813     -0.274683      -6.17930       6.17930       1020.60       1026.78    
  30  0.768360     -0.263497      -5.92766       5.92766       1004.20       1010.13    
  31  0.245116      -1.40602      -31.6300       31.6300       1034.31       1065.94    
  32  0.672517     -0.396727      -8.92482       8.92482       1034.59       1043.51    
  33  0.910675     -0.935691E-01  -2.10494       2.10494       1024.24       1026.35    
  34  0.441618     -0.817310      -18.3863       18.3863       1017.12       1035.51    
  35  0.212980      -1.54656      -34.7916       34.7916       1036.72       1071.51    
  36  0.471690     -0.751434      -16.9043       16.9043       1003.49       1020.39    
  37  0.968545     -0.319606E-01 -0.718989      0.718989       975.399       976.118    
  38  0.711169     -0.340845      -7.66768       7.66768       1049.77       1057.43    
  39  0.222170      -1.50431      -33.8412       33.8412       1054.72       1088.56    
  40  0.896100     -0.109703      -2.46790       2.46790       1019.02       1021.48    
  41  0.898054     -0.107525      -2.41889       2.41889       1064.83       1067.25    
  42  0.981364     -0.188122E-01 -0.423201      0.423201       1069.83       1070.25    
  43  0.238126      -1.43496      -32.2809       32.2809       1058.50       1090.78    
  44  0.884882     -0.122301      -2.75131       2.75131       1039.49       1042.24    
  45  0.206421      -1.57784      -35.4953       35.4953       1031.63       1067.12    
  46  0.421939     -0.862894      -19.4118       19.4118       1063.79       1083.20    
  47  0.334170E-01  -3.39869      -76.4573       76.4573       1051.03       1127.49    
  48  0.940374     -0.614772E-01  -1.38300       1.38300       1051.07       1052.45    
  49  0.119361      -2.12561      -47.8179       47.8179       1053.15       1100.97    
  50  0.493355     -0.706527      -15.8941       15.8941       1074.82       1090.72    
  51  0.239498      -1.42921      -32.1517       32.1517       1039.96       1072.11    
  52  0.779094     -0.249623      -5.61555       5.61555       1051.91       1057.52    
  53  0.993851     -0.616759E-02 -0.138747      0.138747       988.093       988.232    
loop,thermsimp(1:2)       44   28.0779       30.2829    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282       1078.55          0.86          1.15         21.88          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1078.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       44
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       45
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      281     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -35.7274       35.7274       944.199       979.926    
   2  0.455846E-01  -3.08818      -69.4722       69.4722       943.917       1013.39    
   3  0.655807     -0.421889      -9.49086       9.49086       934.437       943.928    
   4  0.902989     -0.102045      -2.29562       2.29562       975.399       977.694    
   5  0.826012     -0.191146      -4.30003       4.30003       946.467       950.767    
   6  0.160871      -1.82715      -41.1038       41.1038       971.915       1013.02    
   7  0.516410     -0.660854      -14.8667       14.8667       980.018       994.885    
   8  0.506939     -0.679364      -15.2830       15.2830       988.093       1003.38    
   9  0.728359     -0.316962      -7.13041       7.13041       978.958       986.088    
  10  0.453162     -0.791506      -17.8058       17.8058       986.238       1004.04    
  11  0.837994     -0.176745      -3.97607       3.97607       983.679       987.655    
  12  0.118024      -2.13686      -48.0711       48.0711       973.408       1021.48    
  13  0.274030      -1.29452      -29.1217       29.1217       968.905       998.027    
  14  0.402227     -0.910738      -20.4881       20.4881       1000.42       1020.91    
  15  0.444245     -0.811380      -18.2529       18.2529       993.949       1012.20    
  16  0.594880     -0.519396      -11.6844       11.6844       1004.20       1015.89    
  17  0.548806     -0.600010      -13.4979       13.4979       986.168       999.666    
  18  0.222827      -1.50136      -33.7747       33.7747       962.533       996.308    
  19  0.152541      -1.88032      -42.2999       42.2999       985.710       1028.01    
  20  0.816533     -0.202688      -4.55969       4.55969       1008.28       1012.84    
  21  0.525417     -0.643564      -14.4777       14.4777       983.579       998.056    
  22  0.661450     -0.413320      -9.29811       9.29811       1003.49       1012.78    
  23  0.437535     -0.826598      -18.5952       18.5952       1019.02       1037.61    
  24  0.464442     -0.766918      -17.2527       17.2527       988.084       1005.34    
  25  0.683975     -0.379834      -8.54479       8.54479       996.274       1004.82    
  26  0.407919     -0.896688      -20.1720       20.1720       1018.24       1038.41    
  27  0.934669     -0.675632E-01  -1.51991       1.51991       1015.09       1016.61    
  28  0.866891     -0.142842      -3.21338       3.21338       983.320       986.533    
  29  0.145435E-01  -4.23061      -95.1724       95.1724       1024.24       1119.41    
  30  0.514599     -0.664368      -14.9457       14.9457       1020.60       1035.54    
  31  0.370591     -0.992656      -22.3309       22.3309       1005.24       1027.57    
  32  0.251726      -1.37941      -31.0314       31.0314       1024.69       1055.72    
  33  0.959470     -0.413742E-01 -0.930758      0.930758       1000.12       1001.05    
  34  0.344885E-01  -3.36713      -75.7474       75.7474       1010.64       1086.38    
  35  0.348690      -1.05357      -23.7013       23.7013       1017.12       1040.82    
  36  0.610898     -0.492826      -11.0867       11.0867       1039.49       1050.58    
  37  0.440567     -0.819693      -18.4399       18.4399       1034.59       1053.03    
  38  0.340409      -1.07761      -24.2420       24.2420       1051.07       1075.31    
  39  0.345015E-01  -3.36675      -75.7389       75.7389       1049.77       1125.50    
  40  0.667224     -0.404630      -9.10261       9.10261       1051.91       1061.01    
  41  0.138336      -1.97807      -44.4990       44.4990       1034.31       1078.81    
  42  0.412023     -0.886676      -19.9468       19.9468       1031.63       1051.57    
  43  0.578410     -0.547473      -12.3160       12.3160       1064.83       1077.15    
  44  0.972817     -0.275594E-01 -0.619980      0.619980       1069.83       1070.45    
  45  0.152341      -1.88163      -42.3295       42.3295       1036.72       1079.05    
  46  0.764264     -0.268842      -6.04790       6.04790       1039.96       1046.01    
  47  0.898082E-01  -2.41008      -54.2174       54.2174       996.403       1050.62    
  48  0.205097      -1.58427      -35.6400       35.6400       1063.79       1099.43    
  49  0.249611E-01  -3.69044      -83.0205       83.0205       1054.72       1137.74    
  50  0.999211     -0.789000E-03 -0.177494E-01  0.177494E-01   1074.82       1074.84    
  51  0.622898E-01  -2.77596      -62.4483       62.4483       1058.50       1120.95    
  52  0.588779     -0.529705      -11.9163       11.9163       1053.15       1065.07    
  53  0.395562     -0.927447      -20.8640       20.8640       1078.55       1099.42    
loop,thermsimp(1:2)       45   35.7274       69.4722    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283       1065.49          0.86          1.14         21.91          0.00          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1065.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       45
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       46
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      282     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -5.17448       5.17448       934.437       939.612    
   2  0.338444      -1.08340      -24.3722       24.3722       946.467       970.839    
   3  0.563800     -0.573055      -12.8915       12.8915       975.399       988.290    
   4  0.295284      -1.21982      -27.4411       27.4411       944.199       971.640    
   5  0.506481     -0.680269      -15.3034       15.3034       978.958       994.261    
   6  0.345803      -1.06189      -23.8883       23.8883       983.320       1007.21    
   7  0.741641     -0.298890      -6.72386       6.72386       983.679       990.403    
   8  0.182310      -1.70204      -38.2894       38.2894       980.018       1018.31    
   9  0.315187      -1.15459      -25.9737       25.9737       962.533       988.507    
  10  0.598844     -0.512755      -11.5350       11.5350       968.905       980.440    
  11  0.659119     -0.416852      -9.37755       9.37755       983.579       992.956    
  12  0.247481      -1.39642      -31.4141       31.4141       986.168       1017.58    
  13  0.255298      -1.36532      -30.7144       30.7144       1000.12       1030.84    
  14  0.876488     -0.131833      -2.96572       2.96572       988.093       991.059    
  15  0.358010      -1.02719      -23.1079       23.1079       986.238       1009.35    
  16  0.317480      -1.14734      -25.8107       25.8107       996.274       1022.09    
  17  0.153422      -1.87456      -42.1704       42.1704       988.084       1030.25    
  18  0.296162      -1.21685      -27.3744       27.3744       993.949       1021.32    
  19  0.629760     -0.462417      -10.4026       10.4026       1003.49       1013.89    
  20  0.458345E-01  -3.08272      -69.3492       69.3492       1008.28       1077.63    
  21  0.209534      -1.56287      -35.1584       35.1584       971.915       1007.07    
  22  0.490210E-01  -3.01551      -67.8372       67.8372       943.917       1011.75    
  23  0.144817      -1.93229      -43.4690       43.4690       1004.20       1047.67    
  24  0.764061     -0.269107      -6.05387       6.05387       1015.09       1021.15    
  25  0.158664      -1.84097      -41.4147       41.4147       1000.42       1041.84    
  26  0.242818      -1.41544      -31.8420       31.8420       973.408       1005.25    
  27  0.779950     -0.248525      -5.59085       5.59085       1005.24       1010.83    
  28  0.763580     -0.269737      -6.06804       6.06804       985.710       991.778    
  29  0.817639     -0.201335      -4.52925       4.52925       1020.60       1025.13    
  30  0.656802     -0.420373      -9.45677       9.45677       1019.02       1028.47    
  31  0.202192      -1.59854      -35.9609       35.9609       1018.24       1054.20    
  32  0.469647     -0.755773      -17.0020       17.0020       1017.12       1034.12    
  33  0.107456      -2.23067      -50.1814       50.1814       1039.96       1090.14    
  34  0.709118     -0.343734      -7.73268       7.73268       1039.49       1047.22    
  35  0.988480     -0.115868E-01 -0.260659      0.260659       996.403       996.663    
  36  0.645173     -0.438236      -9.85862       9.85862       1031.63       1041.49    
  37  0.583143     -0.539322      -12.1327       12.1327       1034.59       1046.72    
  38  0.276552E-01  -3.58794      -80.7148       80.7148       1024.69       1105.40    
  39  0.560517     -0.578896      -13.0229       13.0229       1051.91       1064.93    
  40  0.292779      -1.22834      -27.6328       27.6328       1053.15       1080.79    
  41  0.486207     -0.721121      -16.2224       16.2224       1069.83       1086.05    
  42  0.379142E-01  -3.27243      -73.6169       73.6169       1074.82       1148.44    
  43  0.459895     -0.776757      -17.4740       17.4740       1051.07       1068.54    
  44  0.810771     -0.209769      -4.71899       4.71899       1064.83       1069.55    
  45  0.189138      -1.66528      -37.4622       37.4622       1034.31       1071.78    
  46  0.509870     -0.673599      -15.1534       15.1534       1036.72       1051.87    
  47  0.468020E-01  -3.06183      -68.8793       68.8793       1010.64       1079.51    
  48  0.568404     -0.564922      -12.7086       12.7086       1078.55       1091.26    
  49  0.891250     -0.115130      -2.58999       2.58999       1063.79       1066.38    
  50  0.415261     -0.878849      -19.7707       19.7707       1024.24       1044.01    
  51  0.714019     -0.336846      -7.57772       7.57772       1058.50       1066.08    
  52  0.606207     -0.500534      -11.2601       11.2601       1049.77       1061.03    
  53  0.106011      -2.24421      -50.4860       50.4860       1065.49       1115.97    
loop,thermsimp(1:2)       46   5.17448       24.3722    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284       1082.75          0.86          1.14         21.98          0.01          0.05         24.03
Just calling func    0   0         24.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1082.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       46
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       47
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      283     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -9.60417       9.60417       934.437       944.042    
   2  0.474910     -0.744630      -16.7513       16.7513       946.467       963.218    
   3  0.125725      -2.07366      -46.6493       46.6493       944.199       990.848    
   4  0.950967     -0.502756E-01  -1.13100       1.13100       968.905       970.036    
   5  0.562475     -0.575409      -12.9445       12.9445       975.399       988.343    
   6  0.728528     -0.316729      -7.12517       7.12517       962.533       969.658    
   7  0.326058      -1.12068      -25.2110       25.2110       983.679       1008.89    
   8  0.460979     -0.774402      -17.4210       17.4210       988.093       1005.51    
   9  0.186861      -1.67739      -37.7348       37.7348       985.710       1023.44    
  10  0.737773     -0.304119      -6.84150       6.84150       983.579       990.420    
  11  0.254524      -1.36836      -30.7828       30.7828       978.958       1009.74    
  12  0.475390     -0.743621      -16.7286       16.7286       996.403       1013.13    
  13  0.783107     -0.244486      -5.49998       5.49998       973.408       978.908    
  14  0.615536     -0.485261      -10.9165       10.9165       971.915       982.831    
  15  0.600710E-01  -2.81223      -63.2642       63.2642       983.320       1046.58    
  16  0.834417     -0.181022      -4.07230       4.07230       986.238       990.310    
  17  0.270355      -1.30802      -29.4254       29.4254       1005.24       1034.66    
  18  0.408387     -0.895540      -20.1462       20.1462       943.917       964.063    
  19  0.248286      -1.39318      -31.3410       31.3410       1003.49       1034.83    
  20  0.586808E-01  -2.83564      -63.7909       63.7909       986.168       1049.96    
  21  0.747050     -0.291623      -6.56039       6.56039       980.018       986.578    
  22  0.261869E-01  -3.64250      -81.9421       81.9421       1015.09       1097.04    
  23  0.495813     -0.701557      -15.7823       15.7823       993.949       1009.73    
  24  0.600032     -0.510772      -11.4904       11.4904       996.274       1007.76    
  25  0.936456     -0.656531E-01  -1.47694       1.47694       1020.60       1022.07    
  26  0.583260     -0.539121      -12.1281       12.1281       1019.02       1031.14    
  27  0.994266     -0.575021E-02 -0.129357      0.129357       988.084       988.214    
  28  0.149755      -1.89876      -42.7146       42.7146       1000.12       1042.84    
  29  0.751239     -0.286032      -6.43460       6.43460       1017.12       1023.56    
  30  0.703931     -0.351075      -7.89782       7.89782       1031.63       1039.52    
  31  0.998476     -0.152564E-02 -0.343210E-01  0.343210E-01   1000.42       1000.46    
  32  0.501495     -0.690161      -15.5259       15.5259       1024.24       1039.77    
  33  0.446468     -0.806387      -18.1406       18.1406       1034.59       1052.73    
  34  0.321376      -1.13514      -25.5364       25.5364       1039.49       1065.03    
  35  0.850901     -0.161459      -3.63221       3.63221       1004.20       1007.84    
  36  0.975881     -0.244142E-01 -0.549225      0.549225       1036.72       1037.27    
  37  0.386316     -0.951100      -21.3961       21.3961       1018.24       1039.64    
  38  0.782734     -0.244962      -5.51070       5.51070       1049.77       1055.28    
  39  0.142678      -1.94716      -43.8036       43.8036       1051.91       1095.71    
  40  0.509914     -0.673514      -15.1514       15.1514       1058.50       1073.65    
  41  0.211111      -1.55537      -34.9898       34.9898       1063.79       1098.77    
  42  0.212538      -1.54864      -34.8383       34.8383       1051.07       1085.91    
  43  0.889982     -0.116555      -2.62203       2.62203       1064.83       1067.45    
  44  0.769070     -0.262573      -5.90688       5.90688       1034.31       1040.22    
  45  0.792434     -0.232646      -5.23363       5.23363       1008.28       1013.51    
  46  0.250220E-01  -3.68800      -82.9657       82.9657       1010.64       1093.60    
  47  0.190304      -1.65913      -37.3241       37.3241       1053.15       1090.48    
  48  0.579595     -0.545425      -12.2699       12.2699       1069.83       1082.10    
  49  0.373376     -0.985170      -22.1625       22.1625       1039.96       1062.12    
  50  0.933620E-01  -2.37127      -53.3444       53.3444       1078.55       1131.90    
  51  0.628243     -0.464828      -10.4568       10.4568       1024.69       1035.14    
  52  0.737857     -0.304005      -6.83894       6.83894       1065.49       1072.33    
  53  0.430189     -0.843530      -18.9762       18.9762       1082.75       1101.73    
loop,thermsimp(1:2)       47   9.60417       16.7513    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       1034.08          0.85          1.15         21.79          0.02          0.05         23.86
Just calling func    0   0         23.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1034.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       47
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       48
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      284     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -25.9149       25.9149       934.437       960.352    
   2  0.452730     -0.792459      -17.8272       17.8272       946.467       964.294    
   3  0.463916     -0.768051      -17.2782       17.2782       943.917       961.195    
   4  0.531172E-01  -2.93526      -66.0319       66.0319       962.533       1028.56    
   5  0.933113     -0.692290E-01  -1.55738       1.55738       968.905       970.462    
   6  0.107612      -2.22922      -50.1488       50.1488       973.408       1023.56    
   7  0.228017      -1.47833      -33.2568       33.2568       971.915       1005.17    
   8  0.766526     -0.265887      -5.98143       5.98143       980.018       985.999    
   9  0.676418     -0.390944      -8.79472       8.79472       988.084       996.879    
  10  0.220696      -1.51097      -33.9909       33.9909       975.399       1009.39    
  11  0.959946E-01  -2.34346      -52.7188       52.7188       986.238       1038.96    
  12  0.570655     -0.560971      -12.6197       12.6197       983.579       996.198    
  13  0.736426     -0.305947      -6.88261       6.88261       944.199       951.082    
  14  0.966377     -0.342013E-01 -0.769398      0.769398       1000.42       1001.19    
  15  0.797662     -0.226070      -5.08570       5.08570       988.093       993.179    
  16  0.413688     -0.882643      -19.8560       19.8560       996.274       1016.13    
  17  0.200670      -1.60609      -36.1309       36.1309       1004.20       1040.33    
  18  0.843958E-01  -2.47224      -55.6158       55.6158       983.679       1039.30    
  19  0.375580     -0.979284      -22.0301       22.0301       993.949       1015.98    
  20  0.968669     -0.318322E-01 -0.716101      0.716101       978.958       979.674    
  21  0.379263     -0.969525      -21.8105       21.8105       996.403       1018.21    
  22  0.421746     -0.863352      -19.4221       19.4221       1008.28       1027.70    
  23  0.639909     -0.446429      -10.0429       10.0429       1020.60       1030.64    
  24  0.549878     -0.598059      -13.4540       13.4540       985.710       999.164    
  25  0.226469      -1.48515      -33.4101       33.4101       1017.12       1050.53    
  26  0.547044E-02  -5.20840      -117.169       117.169       1019.02       1136.18    
  27  0.372808     -0.986692      -22.1967       22.1967       1005.24       1027.43    
  28  0.406819E-01  -3.20197      -72.0319       72.0319       1003.49       1075.52    
  29  0.664564     -0.408624      -9.19245       9.19245       1024.69       1033.88    
  30  0.708700     -0.344323      -7.74592       7.74592       1036.72       1044.46    
  31  0.863329     -0.146959      -3.30601       3.30601       1031.63       1034.93    
  32  0.406109     -0.901134      -20.2720       20.2720       1018.24       1038.51    
  33  0.101947      -2.28330      -51.3654       51.3654       1024.24       1075.61    
  34  0.660574     -0.414646      -9.32793       9.32793       1034.31       1043.64    
  35  0.839002     -0.175542      -3.94902       3.94902       1000.12       1004.07    
  36  0.735312E-01  -2.61005      -58.7159       58.7159       983.320       1042.04    
  37  0.559917     -0.579967      -13.0470       13.0470       986.168       999.215    
  38  0.922004     -0.812055E-01  -1.82681       1.82681       1034.59       1036.41    
  39  0.891471     -0.114882      -2.58441       2.58441       1049.77       1052.35    
  40  0.489346     -0.714686      -16.0777       16.0777       1039.96       1056.04    
  41  0.583196     -0.539231      -12.1306       12.1306       1039.49       1051.62    
  42  0.989235     -0.108230E-01 -0.243477      0.243477       1064.83       1065.07    
  43  0.844741     -0.168725      -3.79567       3.79567       1065.49       1069.28    
  44  0.734982     -0.307909      -6.92676       6.92676       1058.50       1065.42    
  45  0.913246     -0.907495E-01  -2.04151       2.04151       1069.83       1071.87    
  46  0.605096     -0.502369      -11.3014       11.3014       1051.07       1062.37    
  47  0.623739     -0.472024      -10.6187       10.6187       1053.15       1063.77    
  48  0.780990     -0.247193      -5.56089       5.56089       1010.64       1016.20    
  49  0.615662E-01  -2.78764      -62.7111       62.7111       1051.91       1114.62    
  50  0.646443E-02  -5.04144      -113.413       113.413       1015.09       1128.51    
  51  0.848055     -0.164809      -3.70757       3.70757       1063.79       1067.49    
  52  0.740886     -0.299909      -6.74678       6.74678       1082.75       1089.50    
  53  0.350650      -1.04797      -23.5752       23.5752       1034.08       1057.65    
loop,thermsimp(1:2)       48   25.9149       17.8272    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286       1095.17          0.85          1.14         21.90          0.00          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1095.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       48
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       49
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      285     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.191243      0.191243       944.199       944.390    
   2  0.120199      -2.11861      -47.6604       47.6604       934.437       982.098    
   3  0.825835     -0.191360      -4.30486       4.30486       943.917       948.222    
   4  0.769690     -0.261767      -5.88874       5.88874       946.467       952.355    
   5  0.206534      -1.57729      -35.4829       35.4829       968.905       1004.39    
   6  0.435455     -0.831363      -18.7024       18.7024       978.958       997.660    
   7  0.408718     -0.894731      -20.1280       20.1280       980.018       1000.15    
   8  0.504170E-01  -2.98743      -67.2055       67.2055       988.093       1055.30    
   9  0.943874     -0.577631E-01  -1.29945       1.29945       983.579       984.878    
  10  0.161493      -1.82330      -41.0171       41.0171       988.084       1029.10    
  11  0.248560      -1.39207      -31.3162       31.3162       985.710       1017.03    
  12  0.952734     -0.484195E-01  -1.08925       1.08925       986.168       987.257    
  13  0.349224      -1.05204      -23.6669       23.6669       1000.42       1024.09    
  14  0.245013      -1.40644      -31.6395       31.6395       1000.12       1031.76    
  15  0.713805     -0.337146      -7.58447       7.58447       971.915       979.499    
  16  0.206995      -1.57506      -35.4328       35.4328       975.399       1010.83    
  17  0.573984     -0.555154      -12.4888       12.4888       993.949       1006.44    
  18  0.791297     -0.234082      -5.26595       5.26595       996.274       1001.54    
  19  0.599323     -0.511955      -11.5170       11.5170       1010.64       1022.15    
  20  0.632893     -0.457454      -10.2909       10.2909       996.403       1006.69    
  21  0.920472     -0.828688E-01  -1.86423       1.86423       973.408       975.273    
  22  0.650695     -0.429713      -9.66689       9.66689       1005.24       1014.90    
  23  0.759327     -0.275322      -6.19368       6.19368       1008.28       1014.47    
  24  0.547563     -0.602278      -13.5489       13.5489       962.533       976.082    
  25  0.375945     -0.978312      -22.0082       22.0082       1020.60       1042.61    
  26  0.436593     -0.828753      -18.6437       18.6437       1024.69       1043.33    
  27  0.226348      -1.48568      -33.4220       33.4220       1031.63       1065.05    
  28  0.889061     -0.117589      -2.64530       2.64530       1034.59       1037.23    
  29  0.294563      -1.22226      -27.4961       27.4961       1018.24       1045.74    
  30  0.760606     -0.273640      -6.15584       6.15584       986.238       992.394    
  31  0.131934      -2.02545      -45.5648       45.5648       983.679       1029.24    
  32  0.150887      -1.89123      -42.5453       42.5453       1004.20       1046.75    
  33  0.108814      -2.21811      -49.8989       49.8989       983.320       1033.22    
  34  0.392982     -0.933991      -21.0112       21.0112       1034.31       1055.33    
  35  0.524209     -0.645865      -14.5294       14.5294       1036.72       1051.25    
  36  0.779329     -0.249322      -5.60877       5.60877       1017.12       1022.73    
  37  0.684136     -0.379599      -8.53950       8.53950       1039.49       1048.03    
  38  0.898629     -0.106885      -2.40450       2.40450       1049.77       1052.17    
  39  0.885947E-01  -2.42368      -54.5235       54.5235       1039.96       1094.48    
  40  0.865042     -0.144977      -3.26143       3.26143       1034.08       1037.34    
  41  0.953799     -0.473027E-01  -1.06413       1.06413       1051.07       1052.13    
  42  0.264945      -1.32823      -29.8801       29.8801       1053.15       1083.03    
  43  0.931660     -0.707875E-01  -1.59244       1.59244       1064.83       1066.42    
  44  0.273150      -1.29773      -29.1940       29.1940       1058.50       1087.69    
  45  0.773196     -0.257223      -5.78652       5.78652       1063.79       1069.57    
  46  0.936342     -0.657743E-01  -1.47967       1.47967       1065.49       1066.97    
  47  0.367272      -1.00165      -22.5333       22.5333       1069.83       1092.36    
  48  0.970907     -0.295243E-01 -0.664181      0.664181       1003.49       1004.15    
  49  0.722669     -0.324804      -7.30684       7.30684       1024.24       1031.55    
  50  0.247966      -1.39446      -31.3700       31.3700       1082.75       1114.12    
  51  0.730821     -0.313587      -7.05448       7.05448       1051.91       1058.96    
  52  0.379134     -0.969864      -21.8182       21.8182       1015.09       1036.91    
  53  0.326173      -1.12033      -25.2030       25.2030       1095.17       1120.38    
loop,thermsimp(1:2)       49  0.191243       47.6604    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287       1019.02          0.85          1.14         21.85          0.02          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1019.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       49
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       50
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      286     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -105.495       105.495       944.199       1049.69    
   2  0.902150     -0.102974      -2.31652       2.31652       943.917       946.234    
   3  0.375868     -0.978517      -22.0128       22.0128       946.467       968.479    
   4  0.136549E-01  -4.29366      -96.5906       96.5906       973.408       1070.00    
   5  0.948329     -0.530533E-01  -1.19349       1.19349       962.533       963.727    
   6  0.489379E-01  -3.01720      -67.8754       67.8754       971.915       1039.79    
   7  0.319400      -1.14131      -25.6751       25.6751       934.437       960.112    
   8  0.748008     -0.290342      -6.53156       6.53156       983.579       990.110    
   9  0.468015     -0.759255      -17.0803       17.0803       986.168       1003.25    
  10  0.467420     -0.760527      -17.1089       17.1089       986.238       1003.35    
  11  0.345085      -1.06396      -23.9350       23.9350       978.958       1002.89    
  12  0.598981     -0.512526      -11.5298       11.5298       980.018       991.548    
  13  0.231496      -1.46319      -32.9161       32.9161       996.274       1029.19    
  14  0.685496     -0.377613      -8.49482       8.49482       1003.49       1011.98    
  15  0.225803      -1.48809      -33.4763       33.4763       968.905       1002.38    
  16  0.744991E-01  -2.59697      -58.4217       58.4217       993.949       1052.37    
  17  0.436777     -0.828332      -18.6342       18.6342       996.403       1015.04    
  18  0.241074      -1.42265      -32.0042       32.0042       975.399       1007.40    
  19  0.728071     -0.317357      -7.13931       7.13931       1008.28       1015.42    
  20  0.228500      -1.47622      -33.2092       33.2092       1005.24       1038.45    
  21  0.423678     -0.858781      -19.3193       19.3193       985.710       1005.03    
  22  0.812855     -0.207202      -4.66124       4.66124       1010.64       1015.30    
  23  0.810546     -0.210047      -4.72525       4.72525       1017.12       1021.85    
  24  0.113500      -2.17595      -48.9504       48.9504       1000.42       1049.37    
  25  0.197385      -1.62260      -36.5022       36.5022       988.084       1024.59    
  26  0.101018      -2.29246      -51.5715       51.5715       983.679       1035.25    
  27  0.857009E-01  -2.45689      -55.2705       55.2705       1024.24       1079.51    
  28  0.693668     -0.365762      -8.22822       8.22822       1000.12       1008.35    
  29  0.705918     -0.348256      -7.83441       7.83441       983.320       991.154    
  30  0.309793      -1.17185      -26.3621       26.3621       1015.09       1041.46    
  31  0.144843      -1.93210      -43.4648       43.4648       1034.59       1078.05    
  32  0.412916     -0.884511      -19.8981       19.8981       1034.08       1053.98    
  33  0.916661     -0.870180E-01  -1.95757       1.95757       1020.60       1022.56    
  34  0.933384E-01  -2.37152      -53.3501       53.3501       1024.69       1078.04    
  35  0.937330     -0.647200E-01  -1.45595       1.45595       1018.24       1019.70    
  36  0.958012     -0.428952E-01 -0.964975      0.964975       1004.20       1005.17    
  37  0.692877E-01  -2.66949      -60.0531       60.0531       1039.49       1099.55    
  38  0.228520E-01  -3.77872      -85.0065       85.0065       1036.72       1121.73    
  39  0.188135      -1.67060      -37.5819       37.5819       1051.07       1088.65    
  40  0.122595E-01  -4.40146      -99.0157       99.0157       1049.77       1148.78    
  41  0.776693     -0.252710      -5.68501       5.68501       988.093       993.778    
  42  0.571957     -0.558691      -12.5684       12.5684       1034.31       1046.88    
  43  0.313016      -1.16150      -26.1293       26.1293       1051.91       1078.04    
  44  0.512360     -0.668728      -15.0438       15.0438       1031.63       1046.67    
  45  0.874954     -0.133584      -3.00512       3.00512       1064.83       1067.84    
  46  0.617920     -0.481397      -10.8296       10.8296       1065.49       1076.32    
  47  0.529196     -0.636396      -14.3164       14.3164       1063.79       1078.10    
  48  0.389261E-02  -5.54867      -124.824       124.824       1053.15       1177.98    
  49  0.323386E-01  -3.43149      -77.1953       77.1953       1058.50       1135.69    
  50  0.900641     -0.104648      -2.35418       2.35418       1069.83       1072.18    
  51  0.872638     -0.136235      -3.06476       3.06476       1039.96       1043.03    
  52  0.965349     -0.352660E-01 -0.793349      0.793349       1082.75       1083.55    
  53  0.679490     -0.386413      -8.69279       8.69279       1019.02       1027.71    
loop,thermsimp(1:2)       50   105.495       2.31652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288        950.27          0.85          1.15         22.02          0.00          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    289       1034.43          0.84          1.15         22.16          0.01          0.05         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    950.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       50
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       51
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      288     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -2.28508       2.28508       943.917       946.202    
   2  0.808902     -0.212077      -4.77092       4.77092       934.437       939.208    
   3  0.762147     -0.271616      -6.11031       6.11031       962.533       968.643    
   4  0.287851      -1.24531      -28.0147       28.0147       946.467       974.481    
   5  0.212418      -1.54920      -34.8510       34.8510       983.579       1018.43    
   6  0.380717     -0.965699      -21.7245       21.7245       983.320       1005.04    
   7  0.877795     -0.130342      -2.93219       2.93219       980.018       982.950    
   8  0.836834     -0.178130      -4.00723       4.00723       988.093       992.100    
   9  0.435183     -0.831988      -18.7165       18.7165       968.905       987.622    
  10  0.900166     -0.105177      -2.36606       2.36606       978.958       981.324    
  11  0.175095      -1.74242      -39.1978       39.1978       986.168       1025.37    
  12  0.322232      -1.13248      -25.4765       25.4765       986.238       1011.71    
  13  0.706662     -0.347203      -7.81073       7.81073       985.710       993.521    
  14  0.494297     -0.704618      -15.8512       15.8512       1004.20       1020.05    
  15  0.324383      -1.12583      -25.3268       25.3268       975.399       1000.73    
  16  0.777122     -0.252157      -5.67256       5.67256       1000.12       1005.79    
  17  0.499054E-01  -2.99763      -67.4350       67.4350       1003.49       1070.92    
  18  0.489193E-01  -3.01758      -67.8839       67.8839       996.403       1064.29    
  19  0.480140     -0.733678      -16.5049       16.5049       1010.64       1027.14    
  20  0.914126     -0.897865E-01  -2.01985       2.01985       1008.28       1010.30    
  21  0.613008     -0.489378      -11.0091       11.0091       1018.24       1029.25    
  22  0.470573     -0.753804      -16.9577       16.9577       1017.12       1034.08    
  23  0.614279     -0.487307      -10.9625       10.9625       1020.60       1031.56    
  24  0.410529     -0.890308      -20.0285       20.0285       988.084       1008.11    
  25  0.582759     -0.539981      -12.1475       12.1475       1019.02       1031.16    
  26  0.422753E-01  -3.16355      -71.1677       71.1677       996.274       1067.44    
  27  0.717044     -0.332618      -7.48262       7.48262       983.679       991.162    
  28  0.420765     -0.865682      -19.4745       19.4745       1005.24       1024.71    
  29  0.801392     -0.221405      -4.98075       4.98075       971.915       976.895    
  30  0.426188     -0.852875      -19.1864       19.1864       1015.09       1034.28    
  31  0.338881      -1.08211      -24.3432       24.3432       1039.96       1064.30    
  32  0.398160     -0.920902      -20.7167       20.7167       1031.63       1052.34    
  33  0.938837     -0.631132E-01  -1.41980       1.41980       1034.31       1035.73    
  34  0.411860E-01  -3.18966      -71.7549       71.7549       1000.42       1072.18    
  35  0.180703      -1.71090      -38.4886       38.4886       944.199       982.688    
  36  0.617012     -0.482867      -10.8626       10.8626       993.949       1004.81    
  37  0.788612     -0.237480      -5.34238       5.34238       1034.08       1039.42    
  38  0.381719     -0.963071      -21.6654       21.6654       1064.83       1086.50    
  39  0.376038     -0.978064      -22.0026       22.0026       973.408       995.411    
  40  0.105996      -2.24435      -50.4893       50.4893       1069.83       1120.32    
  41  0.769932E-01  -2.56404      -57.6809       57.6809       1065.49       1123.17    
  42  0.365987      -1.00516      -22.6122       22.6122       1024.69       1047.30    
  43  0.731763     -0.312298      -7.02549       7.02549       1051.91       1058.93    
  44  0.447137     -0.804891      -18.1069       18.1069       1034.59       1052.69    
  45  0.273519      -1.29638      -29.1636       29.1636       1063.79       1092.95    
  46  0.870614     -0.138556      -3.11698       3.11698       1024.24       1027.36    
  47  0.822463     -0.195452      -4.39690       4.39690       1082.75       1087.15    
  48  0.456061     -0.785129      -17.6623       17.6623       1051.07       1068.73    
  49  0.603947     -0.504269      -11.3441       11.3441       1039.49       1050.84    
  50  0.342037      -1.07284      -24.1346       24.1346       1036.72       1060.85    
  51  0.693527     -0.365965      -8.23280       8.23280       1058.50       1066.73    
  52  0.958323     -0.425703E-01 -0.957667      0.957667       1049.77       1050.72    
  53  0.587360     -0.532117      -11.9706       11.9706       950.272       962.242    
loop,thermsimp(1:2)       51   2.28508       4.77092    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290       1051.72          0.86          1.14         21.85          0.00          0.05         23.89
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1051.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       51
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       52
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      289     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -19.4570       19.4570       934.437       953.894    
   2  0.315135      -1.15476      -25.9775       25.9775       943.917       969.895    
   3  0.696708     -0.361389      -8.12985       8.12985       950.272       958.401    
   4  0.922116     -0.810842E-01  -1.82408       1.82408       962.533       964.357    
   5  0.908133     -0.963648E-01  -2.16783       2.16783       946.467       948.634    
   6  0.174132      -1.74794      -39.3219       39.3219       971.915       1011.24    
   7  0.490629     -0.712068      -16.0188       16.0188       978.958       994.976    
   8  0.382604     -0.960755      -21.6133       21.6133       944.199       965.812    
   9  0.985159     -0.149527E-01 -0.336378      0.336378       980.018       980.354    
  10  0.182634      -1.70027      -38.2495       38.2495       968.905       1007.15    
  11  0.554568     -0.589565      -13.2629       13.2629       983.679       996.942    
  12  0.999791     -0.209153E-03 -0.470513E-02  0.470513E-02   988.093       988.098    
  13  0.284621      -1.25660      -28.2686       28.2686       985.710       1013.98    
  14  0.920706E-01  -2.38520      -53.6577       53.6577       973.408       1027.07    
  15  0.243911      -1.41095      -31.7410       31.7410       975.399       1007.14    
  16  0.866829     -0.142914      -3.21500       3.21500       993.949       997.164    
  17  0.640039     -0.446225      -10.0383       10.0383       983.320       993.358    
  18  0.737488E-01  -2.60709      -58.6494       58.6494       1000.12       1058.77    
  19  0.511916     -0.669594      -15.0633       15.0633       988.084       1003.15    
  20  0.870220     -0.139009      -3.12717       3.12717       1008.28       1011.40    
  21  0.594690     -0.519714      -11.6916       11.6916       986.238       997.929    
  22  0.659508     -0.416262      -9.36428       9.36428       983.579       992.943    
  23  0.702023     -0.353789      -7.95889       7.95889       1004.20       1012.16    
  24  0.178121      -1.72529      -38.8124       38.8124       1005.24       1044.05    
  25  0.622271     -0.474379      -10.6717       10.6717       986.168       996.840    
  26  0.877027     -0.131217      -2.95188       2.95188       1010.64       1013.59    
  27  0.206753      -1.57623      -35.4591       35.4591       1024.24       1059.70    
  28  0.927381     -0.753912E-01  -1.69601       1.69601       1018.24       1019.94    
  29  0.610274     -0.493848      -11.1097       11.1097       1019.02       1030.13    
  30  0.453676     -0.790373      -17.7803       17.7803       1020.60       1038.38    
  31  0.203335      -1.59290      -35.8341       35.8341       1017.12       1052.96    
  32  0.558786     -0.581989      -13.0925       13.0925       1015.09       1028.19    
  33  0.685013     -0.378317      -8.51067       8.51067       1034.31       1042.83    
  34  0.753574     -0.282929      -6.36480       6.36480       1034.08       1040.44    
  35  0.736990E-01  -2.60777      -58.6646       58.6646       1024.69       1083.35    
  36  0.719848     -0.328716      -7.39483       7.39483       1049.77       1057.16    
  37  0.177345E-01  -4.03224      -90.7098       90.7098       1039.49       1130.20    
  38  0.277334E-01  -3.58512      -80.6513       80.6513       1031.63       1112.28    
  39  0.228604      -1.47576      -33.1989       33.1989       1034.59       1067.79    
  40  0.874609     -0.133979      -3.01400       3.01400       1051.91       1054.92    
  41  0.875699     -0.132733      -2.98598       2.98598       1036.72       1039.70    
  42  0.540874     -0.614569      -13.8254       13.8254       996.403       1010.23    
  43  0.343108E-01  -3.37230      -75.8636       75.8636       1039.96       1115.82    
  44  0.982551     -0.176027E-01 -0.395993      0.395993       1058.50       1058.89    
  45  0.201823      -1.60037      -36.0020       36.0020       996.274       1032.28    
  46  0.116838      -2.14697      -48.2985       48.2985       1051.07       1099.37    
  47  0.520586     -0.652800      -14.6855       14.6855       1003.49       1018.17    
  48  0.515528     -0.662563      -14.9051       14.9051       1000.42       1015.33    
  49  0.814407     -0.205295      -4.61834       4.61834       1064.83       1069.45    
  50  0.436930     -0.827981      -18.6264       18.6264       1082.75       1101.38    
  51  0.802441     -0.220097      -4.95132       4.95132       1063.79       1068.74    
  52  0.366662      -1.00331      -22.5707       22.5707       1069.83       1092.40    
  53  0.915349     -0.884494E-01  -1.98977       1.98977       1051.72       1053.71    
loop,thermsimp(1:2)       52   19.4570       25.9775    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291        987.25          0.85          1.14         21.93          0.01          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    987.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       52
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       53
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      290     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -76.0110       76.0110       946.467       1022.48    
   2  0.714674     -0.335928      -7.55708       7.55708       934.437       941.994    
   3  0.977792     -0.224587E-01 -0.505234      0.505234       950.272       950.777    
   4  0.771231     -0.259767      -5.84375       5.84375       962.533       968.377    
   5  0.265148      -1.32747      -29.8629       29.8629       944.199       974.062    
   6  0.559491     -0.580728      -13.0641       13.0641       943.917       956.981    
   7  0.934824E-01  -2.36998      -53.3154       53.3154       980.018       1033.33    
   8  0.928182     -0.745278E-01  -1.67659       1.67659       988.093       989.770    
   9  0.464905     -0.765922      -17.2303       17.2303       983.579       1000.81    
  10  0.871919     -0.137059      -3.08329       3.08329       983.320       986.403    
  11  0.982233     -0.179265E-01 -0.403276      0.403276       978.958       979.361    
  12  0.426376     -0.852433      -19.1764       19.1764       986.168       1005.34    
  13  0.471128E-01  -3.05521      -68.7304       68.7304       983.679       1052.41    
  14  0.686439     -0.376238      -8.46391       8.46391       993.949       1002.41    
  15  0.117826      -2.13855      -48.1090       48.1090       986.238       1034.35    
  16  0.756878E-01  -2.58114      -58.0656       58.0656       988.084       1046.15    
  17  0.196211      -1.62856      -36.6364       36.6364       975.399       1012.03    
  18  0.431930     -0.839491      -18.8853       18.8853       968.905       987.790    
  19  0.707794     -0.345602      -7.77471       7.77471       996.403       1004.18    
  20  0.174358E-01  -4.04923      -91.0920       91.0920       971.915       1063.01    
  21  0.267976      -1.31686      -29.6242       29.6242       1008.28       1037.90    
  22  0.793866     -0.230841      -5.19302       5.19302       1004.20       1009.40    
  23  0.135848      -1.99622      -44.9072       44.9072       1010.64       1055.54    
  24  0.663958     -0.409536      -9.21297       9.21297       985.710       994.923    
  25  0.281101      -1.26904      -28.5485       28.5485       1000.42       1028.97    
  26  0.606466     -0.500106      -11.2504       11.2504       1003.49       1014.74    
  27  0.940056     -0.618158E-01  -1.39062       1.39062       1018.24       1019.63    
  28  0.124106      -2.08662      -46.9409       46.9409       973.408       1020.35    
  29  0.205090      -1.58431      -35.6408       35.6408       1015.09       1050.74    
  30  0.852960     -0.159043      -3.57785       3.57785       1019.02       1022.59    
  31  0.241701      -1.42005      -31.9457       31.9457       996.274       1028.22    
  32  0.744368     -0.295220      -6.64131       6.64131       1020.60       1027.24    
  33  0.279909      -1.27329      -28.6441       28.6441       1036.72       1065.36    
  34  0.142971      -1.94511      -43.7575       43.7575       1034.08       1077.84    
  35  0.367233      -1.00176      -22.5357       22.5357       1034.31       1056.85    
  36  0.839044     -0.175493      -3.94790       3.94790       1005.24       1009.19    
  37  0.762369     -0.271325      -6.10376       6.10376       1017.12       1023.22    
  38  0.414704     -0.880189      -19.8008       19.8008       1051.72       1071.52    
  39  0.294445      -1.22266      -27.5052       27.5052       1051.91       1079.41    
  40  0.296874      -1.21445      -27.3203       27.3203       1049.77       1077.09    
  41  0.834777     -0.180590      -4.06258       4.06258       1000.12       1004.18    
  42  0.399354     -0.917907      -20.6493       20.6493       1058.50       1079.15    
  43  0.948666     -0.526981E-01  -1.18550       1.18550       1024.24       1025.43    
  44  0.306553E-01  -3.48495      -78.3979       78.3979       1034.59       1112.98    
  45  0.768324E-01  -2.56613      -57.7280       57.7280       1063.79       1121.51    
  46  0.723813     -0.323222      -7.27124       7.27124       1064.83       1072.10    
  47  0.912222     -0.918720E-01  -2.06676       2.06676       1024.69       1026.75    
  48  0.846322     -0.166855      -3.75359       3.75359       1069.83       1073.58    
  49  0.704090     -0.350850      -7.89276       7.89276       1051.07       1058.96    
  50  0.443839     -0.812294      -18.2735       18.2735       1082.75       1101.03    
  51  0.790462     -0.235137      -5.28967       5.28967       1031.63       1036.92    
  52  0.134239      -2.00813      -45.1751       45.1751       1039.96       1085.14    
  53  0.720618     -0.327646      -7.37076       7.37076       987.251       994.622    
loop,thermsimp(1:2)       53   76.0110       7.55708    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292       1077.95          0.84          1.15         21.84          0.01          0.05         23.89
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1077.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       53
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       54
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      291     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -10.9361       10.9361       934.437       945.373    
   2  0.438442     -0.824528      -18.5487       18.5487       950.272       968.820    
   3  0.666371     -0.405908      -9.13137       9.13137       943.917       953.049    
   4  0.419797     -0.867984      -19.5263       19.5263       962.533       982.059    
   5  0.662493     -0.411746      -9.26268       9.26268       944.199       953.462    
   6  0.261021      -1.34315      -30.2157       30.2157       978.958       1009.17    
   7  0.451731     -0.794667      -17.8769       17.8769       983.320       1001.20    
   8  0.858047     -0.153096      -3.44407       3.44407       968.905       972.349    
   9  0.678039     -0.388550      -8.74087       8.74087       988.093       996.834    
  10  0.257304      -1.35750      -30.5384       30.5384       987.251       1017.79    
  11  0.379774     -0.968178      -21.7803       21.7803       985.710       1007.49    
  12  0.200314      -1.60787      -36.1708       36.1708       983.579       1019.75    
  13  0.702955E-01  -2.65505      -59.7283       59.7283       993.949       1053.68    
  14  0.846007     -0.167228      -3.76198       3.76198       996.403       1000.16    
  15  0.692217     -0.367856      -8.27534       8.27534       1000.12       1008.40    
  16  0.830541     -0.185678      -4.17704       4.17704       986.168       990.345    
  17  0.162133E-02  -6.42451      -144.526       144.526       1005.24       1149.76    
  18  0.829216     -0.187275      -4.21295       4.21295       1004.20       1008.42    
  19  0.464918     -0.765894      -17.2297       17.2297       975.399       992.628    
  20  0.204157      -1.58887      -35.7433       35.7433       1003.49       1039.23    
  21  0.203429      -1.59244      -35.8237       35.8237       1018.24       1054.07    
  22  0.403935     -0.906500      -20.3927       20.3927       973.408       993.801    
  23  0.508037     -0.677201      -15.2344       15.2344       946.467       961.701    
  24  0.337702      -1.08559      -24.4216       24.4216       1019.02       1043.44    
  25  0.375672     -0.979039      -22.0246       22.0246       1017.12       1039.15    
  26  0.218755      -1.51980      -34.1897       34.1897       1024.24       1058.43    
  27  0.803422     -0.218876      -4.92385       4.92385       1024.69       1029.61    
  28  0.324101      -1.12670      -25.3464       25.3464       1020.60       1045.94    
  29  0.804001     -0.218155      -4.90763       4.90763       996.274       1001.18    
  30  0.727676     -0.317899      -7.15150       7.15150       1000.42       1007.57    
  31  0.769479     -0.262042      -5.89493       5.89493       980.018       985.913    
  32  0.632293     -0.458402      -10.3123       10.3123       986.238       996.550    
  33  0.300459      -1.20244      -27.0503       27.0503       1031.63       1058.68    
  34  0.567362     -0.566759      -12.7499       12.7499       1008.28       1021.03    
  35  0.803345     -0.218971      -4.92600       4.92600       988.084       993.010    
  36  0.764706     -0.268264      -6.03491       6.03491       1015.09       1021.13    
  37  0.159444      -1.83606      -41.3043       41.3043       983.679       1024.98    
  38  0.951670     -0.495367E-01  -1.11438       1.11438       1010.64       1011.75    
  39  0.769198     -0.262407      -5.90313       5.90313       1034.31       1040.22    
  40  0.916532     -0.871588E-01  -1.96073       1.96073       1051.07       1053.03    
  41  0.146117E-01  -4.22593      -95.0671       95.0671       971.915       1066.98    
  42  0.196164      -1.62880      -36.6418       36.6418       1036.72       1073.36    
  43  0.399482     -0.917586      -20.6421       20.6421       1051.72       1072.36    
  44  0.646732     -0.435823      -9.80433       9.80433       1064.83       1074.63    
  45  0.207790      -1.57122      -35.3465       35.3465       1069.83       1105.17    
  46  0.276388      -1.28595      -28.9289       28.9289       1049.77       1078.69    
  47  0.410494     -0.890394      -20.0304       20.0304       1034.08       1054.11    
  48  0.437747     -0.826115      -18.5844       18.5844       1058.50       1077.08    
  49  0.414886     -0.879752      -19.7910       19.7910       1051.91       1071.70    
  50  0.453890     -0.789901      -17.7697       17.7697       1039.96       1057.73    
  51  0.141383      -1.95628      -44.0088       44.0088       1082.75       1126.76    
  52  0.264375      -1.33039      -29.9286       29.9286       1034.59       1064.52    
  53  0.598599     -0.513163      -11.5442       11.5442       1077.95       1089.50    
loop,thermsimp(1:2)       54   10.9361       18.5487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293       1002.55          0.85          1.15         21.90          0.00          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1002.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       54
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       55
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      292     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -10.5336       10.5336       934.437       944.971    
   2  0.909442     -0.949244E-01  -2.13543       2.13543       943.917       946.053    
   3  0.449837     -0.798870      -17.9715       17.9715       944.199       962.170    
   4  0.761598     -0.272336      -6.12650       6.12650       946.467       952.593    
   5  0.706800     -0.347007      -7.80632       7.80632       950.272       958.078    
   6  0.214343      -1.54018      -34.6480       34.6480       968.905       1003.55    
   7  0.855661     -0.155881      -3.50671       3.50671       962.533       966.040    
   8  0.432924E-01  -3.13978      -70.6328       70.6328       980.018       1050.65    
   9  0.902784     -0.102271      -2.30071       2.30071       986.168       988.469    
  10  0.706965     -0.346774      -7.80107       7.80107       975.399       983.200    
  11  0.826667     -0.190354      -4.28222       4.28222       988.084       992.366    
  12  0.824436     -0.193055      -4.34300       4.34300       973.408       977.751    
  13  0.442772     -0.814700      -18.3276       18.3276       986.238       1004.57    
  14  0.416355     -0.876217      -19.7115       19.7115       988.093       1007.80    
  15  0.268464      -1.31504      -29.5833       29.5833       996.403       1025.99    
  16  0.779742     -0.248792      -5.59685       5.59685       996.274       1001.87    
  17  0.406799E-01  -3.20202      -72.0331       72.0331       983.320       1055.35    
  18  0.975397     -0.249106E-01 -0.560392      0.560392       985.710       986.270    
  19  0.425150E-01  -3.15790      -71.0405       71.0405       1000.42       1071.46    
  20  0.302481      -1.19574      -26.8994       26.8994       1000.12       1027.02    
  21  0.732033     -0.311930      -7.01721       7.01721       1004.20       1011.22    
  22  0.774561     -0.255459      -5.74684       5.74684       978.958       984.705    
  23  0.899897     -0.105475      -2.37278       2.37278       1010.64       1013.01    
  24  0.549624     -0.598520      -13.4644       13.4644       987.251       1000.72    
  25  0.143543      -1.94112      -43.6677       43.6677       983.579       1027.25    
  26  0.229055      -1.47379      -33.1547       33.1547       1008.28       1041.43    
  27  0.334206      -1.09600      -24.6557       24.6557       1015.09       1039.75    
  28  0.301620      -1.19859      -26.9636       26.9636       983.679       1010.64    
  29  0.856030     -0.155449      -3.49701       3.49701       1024.69       1028.18    
  30  0.978878     -0.213482E-01 -0.480251      0.480251       1017.12       1017.60    
  31  0.890790E-01  -2.41823      -54.4008       54.4008       1003.49       1057.89    
  32  0.275076      -1.29071      -29.0359       29.0359       1034.31       1063.35    
  33  0.506865     -0.679511      -15.2864       15.2864       1019.02       1034.30    
  34  0.628553     -0.464334      -10.4457       10.4457       1020.60       1031.04    
  35  0.787972     -0.238293      -5.36066       5.36066       1051.07       1056.43    
  36  0.746168     -0.292804      -6.58696       6.58696       993.949       1000.54    
  37  0.116954      -2.14598      -48.2762       48.2762       1018.24       1066.52    
  38  0.245368      -1.40500      -31.6070       31.6070       1034.08       1065.68    
  39  0.873952     -0.134729      -3.03089       3.03089       1039.96       1042.99    
  40  0.850596     -0.161818      -3.64027       3.64027       1024.24       1027.88    
  41  0.455763     -0.785783      -17.6771       17.6771       1031.63       1049.30    
  42  0.984333     -0.157910E-01 -0.355236      0.355236       1034.59       1034.94    
  43  0.956700     -0.442655E-01 -0.995802      0.995802       971.915       972.910    
  44  0.186161      -1.68114      -37.8192       37.8192       1051.91       1089.73    
  45  0.791379     -0.233979      -5.26361       5.26361       1051.72       1056.98    
  46  0.262937      -1.33584      -30.0513       30.0513       1036.72       1066.77    
  47  0.115228E-01  -4.46342      -100.410       100.410       1064.83       1165.24    
  48  0.324912      -1.12420      -25.2901       25.2901       1058.50       1083.79    
  49  0.164288      -1.80613      -40.6310       40.6310       1049.77       1090.40    
  50  0.334193E-02  -5.70121      -128.255       128.255       1077.95       1206.21    
  51  0.189130      -1.66532      -37.4632       37.4632       1069.83       1107.29    
  52  0.157956      -1.84544      -41.5152       41.5152       1082.75       1124.27    
  53  0.414399     -0.880925      -19.8174       19.8174       1002.55       1022.37    
loop,thermsimp(1:2)       55   10.5336       2.13543    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294       1059.08          0.85          1.14         21.84          0.01          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1059.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       55
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       56
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      293     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -31.5635       31.5635       934.437       966.001    
   2  0.963480     -0.372033E-01 -0.836930      0.836930       943.917       944.754    
   3  0.633143     -0.457059      -10.2820       10.2820       946.467       956.749    
   4  0.939850E-02  -4.66721      -104.994       104.994       950.272       1055.27    
   5  0.796978     -0.226928      -5.10500       5.10500       944.199       949.304    
   6  0.229125      -1.47349      -33.1478       33.1478       962.533       995.681    
   7  0.926958     -0.758467E-01  -1.70626       1.70626       971.915       973.621    
   8  0.687512     -0.374676      -8.42876       8.42876       973.408       981.837    
   9  0.695030     -0.363800      -8.18409       8.18409       975.399       983.583    
  10  0.900736     -0.104543      -2.35180       2.35180       978.958       981.310    
  11  0.867179     -0.142510      -3.20592       3.20592       985.710       988.916    
  12  0.879271     -0.128662      -2.89439       2.89439       986.168       989.063    
  13  0.197557      -1.62173      -36.4826       36.4826       988.084       1024.57    
  14  0.790701     -0.234835      -5.28288       5.28288       993.949       999.232    
  15  0.807456     -0.213867      -4.81117       4.81117       987.251       992.062    
  16  0.688117     -0.373796      -8.40896       8.40896       996.274       1004.68    
  17  0.227000      -1.48280      -33.3573       33.3573       968.905       1002.26    
  18  0.374715     -0.981589      -22.0819       22.0819       986.238       1008.32    
  19  0.176077      -1.73683      -39.0720       39.0720       988.093       1027.17    
  20  0.446126E-01  -3.10974      -69.9570       69.9570       983.679       1053.64    
  21  0.997763E-01  -2.30482      -51.8496       51.8496       1004.20       1056.05    
  22  0.142978E-01  -4.24765      -95.5556       95.5556       1010.64       1106.19    
  23  0.652216     -0.427379      -9.61438       9.61438       1017.12       1026.74    
  24  0.909797     -0.945339E-01  -2.12665       2.12665       1002.55       1004.68    
  25  0.145015      -1.93092      -43.4382       43.4382       996.403       1039.84    
  26  0.189723      -1.66219      -37.3929       37.3929       1000.12       1037.52    
  27  0.260997      -1.34324      -30.2178       30.2178       983.579       1013.80    
  28  0.167755      -1.78525      -40.1612       40.1612       1024.24       1064.40    
  29  0.148939      -1.90422      -42.8375       42.8375       1024.69       1067.53    
  30  0.209474      -1.56315      -35.1649       35.1649       1020.60       1055.76    
  31  0.594522     -0.519998      -11.6979       11.6979       1019.02       1030.71    
  32  0.401703     -0.912043      -20.5174       20.5174       1034.59       1055.10    
  33  0.306469      -1.18264      -26.6048       26.6048       1015.09       1041.70    
  34  0.879335     -0.128589      -2.89275       2.89275       1008.28       1011.17    
  35  0.920707     -0.826134E-01  -1.85848       1.85848       1039.96       1041.82    
  36  0.215616      -1.53425      -34.5148       34.5148       1031.63       1066.14    
  37  0.821708     -0.196370      -4.41757       4.41757       980.018       984.436    
  38  0.935240     -0.669517E-01  -1.50615       1.50615       983.320       984.826    
  39  0.691932     -0.368268      -8.28459       8.28459       1051.07       1059.35    
  40  0.493152     -0.706938      -15.9034       15.9034       1051.72       1067.62    
  41  0.362160      -1.01567      -22.8486       22.8486       1003.49       1026.33    
  42  0.636318     -0.452056      -10.1695       10.1695       1034.31       1044.48    
  43  0.178369      -1.72390      -38.7811       38.7811       1034.08       1072.86    
  44  0.987372     -0.127089E-01 -0.285901      0.285901       1018.24       1018.53    
  45  0.557690     -0.583953      -13.1367       13.1367       1036.72       1049.86    
  46  0.434391     -0.833811      -18.7575       18.7575       1000.42       1019.18    
  47  0.759572     -0.275001      -6.18645       6.18645       1058.50       1064.68    
  48  0.578559     -0.547214      -12.3102       12.3102       1051.91       1064.22    
  49  0.262392      -1.33792      -30.0979       30.0979       1049.77       1079.86    
  50  0.615619     -0.485127      -10.9135       10.9135       1069.83       1080.74    
  51  0.580502     -0.543861      -12.2348       12.2348       1082.75       1094.99    
  52  0.434749     -0.832986      -18.7389       18.7389       1064.83       1083.57    
  53  0.741569     -0.298987      -6.72605       6.72605       1059.08       1065.80    
loop,thermsimp(1:2)       56   31.5635      0.836930    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295       1063.13          0.85          1.14         21.87          0.02          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1063.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       56
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       57
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      294     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -26.7941       26.7941       943.917       970.711    
   2  0.729962     -0.314762      -7.08093       7.08093       944.199       951.280    
   3  0.788140     -0.238080      -5.35588       5.35588       946.467       951.822    
   4  0.718031     -0.331242      -7.45167       7.45167       934.437       941.889    
   5  0.603575     -0.504885      -11.3580       11.3580       971.915       983.273    
   6  0.287757      -1.24564      -28.0221       28.0221       978.958       1006.98    
   7  0.690986     -0.369635      -8.31535       8.31535       973.408       981.724    
   8  0.976315     -0.239695E-01 -0.539221      0.539221       975.399       975.938    
   9  0.983892     -0.162393E-01 -0.365321      0.365321       980.018       980.383    
  10  0.858769     -0.152255      -3.42514       3.42514       983.320       986.745    
  11  0.968889     -0.316048E-01 -0.710985      0.710985       985.710       986.421    
  12  0.364921      -1.00807      -22.6778       22.6778       986.168       1008.85    
  13  0.540930     -0.614466      -13.8231       13.8231       987.251       1001.07    
  14  0.812278E-01  -2.51050      -56.4765       56.4765       962.533       1019.01    
  15  0.919841     -0.835539E-01  -1.87964       1.87964       993.949       995.829    
  16  0.275462      -1.28930      -29.0043       29.0043       968.905       997.909    
  17  0.704362     -0.350463      -7.88407       7.88407       1002.55       1010.44    
  18  0.896809     -0.108913      -2.45012       2.45012       996.274       998.725    
  19  0.166873      -1.79052      -40.2799       40.2799       986.238       1026.52    
  20  0.927791E-02  -4.68012      -105.285       105.285       1008.28       1113.56    
  21  0.906733     -0.979074E-01  -2.20254       2.20254       983.579       985.781    
  22  0.575421     -0.552654      -12.4326       12.4326       1018.24       1030.67    
  23  0.975069     -0.252469E-01 -0.567958      0.567958       1000.42       1000.99    
  24  0.610094     -0.494143      -11.1163       11.1163       988.084       999.200    
  25  0.823028     -0.194765      -4.38145       4.38145       1003.49       1007.87    
  26  0.709022     -0.343869      -7.73571       7.73571       1017.12       1024.86    
  27  0.956893     -0.440633E-01 -0.991254      0.991254       988.093       989.085    
  28  0.897850E-01  -2.41034      -54.2232       54.2232       1019.02       1073.24    
  29  0.836996     -0.177936      -4.00288       4.00288       1000.12       1004.13    
  30  0.688664     -0.373001      -8.39109       8.39109       996.403       1004.79    
  31  0.587454     -0.531957      -11.9670       11.9670       1015.09       1027.06    
  32  0.880970     -0.126731      -2.85096       2.85096       1039.96       1042.81    
  33  0.506724     -0.679789      -15.2926       15.2926       1034.31       1049.61    
  34  0.802262     -0.220320      -4.95634       4.95634       1036.72       1041.68    
  35  0.764787E-01  -2.57074      -57.8318       57.8318       983.679       1041.51    
  36  0.907101     -0.975014E-01  -2.19340       2.19340       1034.59       1036.78    
  37  0.797350     -0.226461      -5.09450       5.09450       950.272       955.366    
  38  0.257375      -1.35722      -30.5322       30.5322       1020.60       1051.13    
  39  0.643190     -0.441315      -9.92788       9.92788       1004.20       1014.13    
  40  0.513768     -0.665984      -14.9821       14.9821       1051.07       1066.05    
  41  0.850264     -0.162208      -3.64906       3.64906       1051.91       1055.56    
  42  0.200819      -1.60535      -36.1142       36.1142       1024.24       1060.36    
  43  0.331940      -1.10280      -24.8087       24.8087       1058.50       1083.31    
  44  0.900490     -0.104816      -2.35795       2.35795       1059.08       1061.44    
  45  0.618957     -0.479719      -10.7918       10.7918       1031.63       1042.42    
  46  0.395756     -0.926956      -20.8529       20.8529       1024.69       1045.54    
  47  0.528166     -0.638345      -14.3603       14.3603       1051.72       1066.08    
  48  0.586635     -0.533352      -11.9983       11.9983       1034.08       1046.08    
  49  0.705559     -0.348765      -7.84586       7.84586       1049.77       1057.61    
  50  0.191018      -1.65539      -37.2398       37.2398       1069.83       1107.07    
  51  0.581133     -0.542775      -12.2103       12.2103       1064.83       1077.04    
  52  0.297529      -1.21224      -27.2708       27.2708       1082.75       1110.02    
  53  0.532486     -0.630198      -14.1770       14.1770       1063.13       1077.31    
loop,thermsimp(1:2)       57   26.7941       7.08093    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296       1028.12          0.85          1.14         21.96          0.01          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1028.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       57
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       58
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      295     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -14.2735       14.2735       934.437       948.711    
   2  0.175946E-01  -4.04016      -90.8880       90.8880       944.199       1035.09    
   3  0.419998     -0.867504      -19.5155       19.5155       946.467       965.982    
   4  0.448197E-01  -3.10511      -69.8529       69.8529       950.272       1020.12    
   5  0.501784     -0.689586      -15.5130       15.5130       943.917       959.430    
   6  0.858173     -0.152949      -3.44077       3.44077       975.399       978.839    
   7  0.101932      -2.28345      -51.3689       51.3689       980.018       1031.39    
   8  0.453268     -0.791273      -17.8006       17.8006       973.408       991.209    
   9  0.128092      -2.05501      -46.2297       46.2297       971.915       1018.14    
  10  0.779644     -0.248918      -5.59968       5.59968       983.579       989.178    
  11  0.769943E-01  -2.56402      -57.6806       57.6806       985.710       1043.39    
  12  0.140214      -1.96458      -44.1955       44.1955       983.320       1027.52    
  13  0.571588     -0.559337      -12.5829       12.5829       988.093       1000.68    
  14  0.455096     -0.787247      -17.7100       17.7100       993.949       1011.66    
  15  0.594240     -0.520471      -11.7086       11.7086       968.905       980.614    
  16  0.833288     -0.182376      -4.10275       4.10275       996.274       1000.38    
  17  0.807090E-01  -2.51691      -56.6206       56.6206       988.084       1044.70    
  18  0.430313     -0.843242      -18.9697       18.9697       1000.42       1019.39    
  19  0.990463     -0.958277E-02 -0.215575      0.215575       987.251       987.467    
  20  0.907906     -0.966144E-01  -2.17345       2.17345       1000.12       1002.30    
  21  0.607469     -0.498455      -11.2133       11.2133       996.403       1007.62    
  22  0.927102     -0.756916E-01  -1.70277       1.70277       978.958       980.661    
  23  0.379122     -0.969896      -21.8189       21.8189       1003.49       1025.30    
  24  0.183121E-01  -4.00019      -89.9888       89.9888       986.168       1076.16    
  25  0.561966     -0.576313      -12.9648       12.9648       1002.55       1015.52    
  26  0.638772     -0.448208      -10.0829       10.0829       1004.20       1014.29    
  27  0.234202      -1.45157      -32.6547       32.6547       962.533       995.188    
  28  0.257221      -1.35782      -30.5456       30.5456       1017.12       1047.67    
  29  0.688379     -0.373416      -8.40041       8.40041       986.238       994.638    
  30  0.360237E-01  -3.32358      -74.7676       74.7676       1015.09       1089.86    
  31  0.849177     -0.163487      -3.67783       3.67783       1018.24       1021.92    
  32  0.324868E-01  -3.42692      -77.0924       77.0924       1034.59       1111.68    
  33  0.216483E-01  -3.83283      -86.2237       86.2237       983.679       1069.90    
  34  0.794095     -0.230552      -5.18652       5.18652       1036.72       1041.91    
  35  0.453180     -0.791465      -17.8049       17.8049       1031.63       1049.43    
  36  0.286278      -1.25079      -28.1380       28.1380       1039.96       1068.10    
  37  0.931500     -0.709590E-01  -1.59630       1.59630       1024.69       1026.28    
  38  0.483424     -0.726861      -16.3516       16.3516       1034.08       1050.43    
  39  0.782276     -0.245547      -5.52387       5.52387       1034.31       1039.84    
  40  0.976661     -0.236156E-01 -0.531259      0.531259       1020.60       1021.13    
  41  0.707981     -0.345338      -7.76876       7.76876       1051.91       1059.68    
  42  0.101993      -2.28285      -51.3553       51.3553       1049.77       1101.12    
  43  0.690974E-01  -2.67224      -60.1150       60.1150       1024.24       1084.36    
  44  0.767576E-01  -2.56710      -57.7499       57.7499       1059.08       1116.83    
  45  0.584825     -0.536443      -12.0679       12.0679       1051.07       1063.14    
  46  0.588828     -0.529621      -11.9144       11.9144       1051.72       1063.63    
  47  0.894562     -0.111421      -2.50654       2.50654       1019.02       1021.52    
  48  0.260723      -1.34430      -30.2415       30.2415       1064.83       1095.07    
  49  0.773456E-01  -2.55947      -57.5782       57.5782       1063.13       1120.71    
  50  0.848651E-01  -2.46669      -55.4910       55.4910       1058.50       1113.99    
  51  0.992803     -0.722305E-02 -0.162491      0.162491       1069.83       1069.99    
  52  0.529202     -0.636386      -14.3162       14.3162       1082.75       1097.07    
  53  0.540374     -0.615494      -13.8462       13.8462       1028.12       1041.97    
loop,thermsimp(1:2)       58   14.2735       90.8880    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297       1005.98          0.85          1.15         21.85          0.00          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1005.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       58
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       59
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      296     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01  -1.22697       1.22697       934.437       935.664    
   2  0.224221      -1.49512      -33.6344       33.6344       943.917       977.552    
   3  0.699642     -0.357186      -8.03530       8.03530       946.467       954.502    
   4  0.490916     -0.711482      -16.0056       16.0056       975.399       991.404    
   5  0.204251      -1.58840      -35.7329       35.7329       968.905       1004.64    
   6  0.356522      -1.03136      -23.2016       23.2016       978.958       1002.16    
   7  0.745938     -0.293113      -6.59390       6.59390       987.251       993.845    
   8  0.451533     -0.795107      -17.8868       17.8868       983.579       1001.47    
   9  0.101038      -2.29226      -51.5670       51.5670       973.408       1024.98    
  10  0.826978     -0.189977      -4.27375       4.27375       986.238       990.512    
  11  0.212337      -1.54958      -34.8595       34.8595       962.533       997.393    
  12  0.490540     -0.712248      -16.0228       16.0228       996.274       1012.30    
  13  0.672078     -0.397381      -8.93953       8.93953       988.093       997.033    
  14  0.690580     -0.370223      -8.32858       8.32858       1000.12       1008.45    
  15  0.513190     -0.667108      -15.0073       15.0073       996.403       1011.41    
  16  0.268393      -1.31530      -29.5892       29.5892       993.949       1023.54    
  17  0.896898     -0.108813      -2.44787       2.44787       1004.20       1006.65    
  18  0.911953     -0.921674E-01  -2.07341       2.07341       1002.55       1004.63    
  19  0.355703      -1.03366      -23.2533       23.2533       971.915       995.168    
  20  0.293818      -1.22479      -27.5531       27.5531       1000.42       1027.97    
  21  0.713392     -0.337724      -7.59748       7.59748       950.272       957.869    
  22  0.660627     -0.414565      -9.32611       9.32611       1020.60       1029.92    
  23  0.795097     -0.229291      -5.15815       5.15815       1019.02       1024.17    
  24  0.919484     -0.839428E-01  -1.88839       1.88839       1018.24       1020.13    
  25  0.976382     -0.239014E-01 -0.537688      0.537688       1003.49       1004.02    
  26  0.922195     -0.809991E-01  -1.82217       1.82217       1024.69       1026.51    
  27  0.436062     -0.829970      -18.6711       18.6711       983.320       1001.99    
  28  0.271848      -1.30251      -29.3015       29.3015       980.018       1009.32    
  29  0.389360     -0.943252      -21.2195       21.2195       944.199       965.418    
  30  0.314178E-01  -3.46038      -77.8452       77.8452       1034.31       1112.16    
  31  0.545460     -0.606126      -13.6355       13.6355       1036.72       1050.35    
  32  0.925479E-01  -2.38003      -53.5414       53.5414       1028.12       1081.66    
  33  0.971973     -0.284273E-01 -0.639504      0.639504       985.710       986.349    
  34  0.403500     -0.907578      -20.4170       20.4170       988.084       1008.50    
  35  0.392926     -0.934133      -21.0144       21.0144       1017.12       1038.14    
  36  0.718758     -0.330230      -7.42890       7.42890       1031.63       1039.06    
  37  0.746082     -0.292920      -6.58956       6.58956       1034.08       1040.67    
  38  0.353478      -1.03993      -23.3945       23.3945       1051.91       1075.30    
  39  0.843229     -0.170517      -3.83597       3.83597       1051.07       1054.91    
  40  0.388011     -0.946720      -21.2975       21.2975       1051.72       1073.02    
  41  0.969569     -0.309034E-01 -0.695206      0.695206       1039.96       1040.66    
  42  0.441380E-01  -3.12043      -70.1977       70.1977       983.679       1053.88    
  43  0.533000     -0.629233      -14.1553       14.1553       1069.83       1083.98    
  44  0.288396      -1.24342      -27.9722       27.9722       986.168       1014.14    
  45  0.683115     -0.381092      -8.57309       8.57309       1024.24       1032.82    
  46  0.339511      -1.08025      -24.3014       24.3014       1015.09       1039.40    
  47  0.150420E-01  -4.19691      -94.4141       94.4141       1064.83       1159.24    
  48  0.141026      -1.95881      -44.0656       44.0656       1082.75       1126.82    
  49  0.421666     -0.863541      -19.4263       19.4263       1049.77       1069.19    
  50  0.953496     -0.476201E-01  -1.07127       1.07127       1034.59       1035.66    
  51  0.966647     -0.339215E-01 -0.763102      0.763102       1058.50       1059.26    
  52  0.365434      -1.00667      -22.6462       22.6462       1059.08       1081.72    
  53  0.314209      -1.15770      -26.0437       26.0437       1005.98       1032.03    
loop,thermsimp(1:2)       59   1.22697       33.6344    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298        983.80          0.85          1.14         22.15          0.01          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    983.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       59
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       60
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      297     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -23.8027       23.8027       934.437       958.240    
   2  0.605757     -0.501276      -11.2768       11.2768       946.467       957.743    
   3  0.690633     -0.370146      -8.32685       8.32685       950.272       958.598    
   4  0.400665     -0.914628      -20.5756       20.5756       944.199       964.775    
   5  0.862165     -0.148309      -3.33637       3.33637       943.917       947.254    
   6  0.874011     -0.134662      -3.02938       3.02938       985.710       988.739    
   7  0.389525     -0.942826      -21.2099       21.2099       986.238       1007.45    
   8  0.102225E-01  -4.58317      -103.104       103.104       975.399       1078.50    
   9  0.102697      -2.27597      -51.2005       51.2005       987.251       1038.45    
  10  0.818271     -0.200561      -4.51185       4.51185       971.915       976.427    
  11  0.888768     -0.117920      -2.65273       2.65273       988.093       990.746    
  12  0.539210     -0.617651      -13.8948       13.8948       962.533       976.428    
  13  0.317914      -1.14597      -25.7800       25.7800       983.579       1009.36    
  14  0.437422     -0.826857      -18.6011       18.6011       983.320       1001.92    
  15  0.925263     -0.776773E-01  -1.74744       1.74744       978.958       980.705    
  16  0.422436     -0.861717      -19.3853       19.3853       1003.49       1022.87    
  17  0.965248     -0.353697E-01 -0.795681      0.795681       1002.55       1003.35    
  18  0.771278     -0.259706      -5.84237       5.84237       968.905       974.747    
  19  0.902488     -0.102600      -2.30810       2.30810       1004.20       1006.51    
  20  0.512816     -0.667839      -15.0238       15.0238       1000.12       1015.15    
  21  0.915966     -0.877758E-01  -1.97461       1.97461       988.084       990.059    
  22  0.612605     -0.490035      -11.0239       11.0239       980.018       991.042    
  23  0.323528      -1.12847      -25.3862       25.3862       996.403       1021.79    
  24  0.206646      -1.57675      -35.4707       35.4707       996.274       1031.75    
  25  0.481057     -0.731769      -16.4620       16.4620       986.168       1002.63    
  26  0.287887E-01  -3.54777      -79.8111       79.8111       1018.24       1098.05    
  27  0.996968     -0.303648E-02 -0.683090E-01  0.683090E-01   993.949       994.018    
  28  0.132770      -2.01914      -45.4228       45.4228       1019.02       1064.44    
  29  0.716038     -0.334023      -7.51421       7.51421       973.408       980.923    
  30  0.229552      -1.47162      -33.1058       33.1058       1024.69       1057.79    
  31  0.236358      -1.44241      -32.4486       32.4486       1000.42       1032.87    
  32  0.542780     -0.611051      -13.7463       13.7463       1020.60       1034.34    
  33  0.875156     -0.133353      -2.99992       2.99992       1005.98       1008.98    
  34  0.988730     -0.113343E-01 -0.254978      0.254978       1024.24       1024.50    
  35  0.244332      -1.40923      -31.7022       31.7022       1034.59       1066.29    
  36  0.659246     -0.416659      -9.37321       9.37321       1017.12       1026.49    
  37  0.457872     -0.781166      -17.5732       17.5732       1031.63       1049.20    
  38  0.380652E-01  -3.26846      -73.5276       73.5276       1015.09       1088.62    
  39  0.358843      -1.02487      -23.0556       23.0556       1039.96       1063.02    
  40  0.846233     -0.166960      -3.75595       3.75595       1034.08       1037.83    
  41  0.359308      -1.02358      -23.0265       23.0265       1036.72       1059.75    
  42  0.533329     -0.628617      -14.1415       14.1415       983.679       997.821    
  43  0.645289     -0.438058      -9.85460       9.85460       1051.07       1060.92    
  44  0.311850      -1.16523      -26.2132       26.2132       1058.50       1084.71    
  45  0.270084      -1.30902      -29.4479       29.4479       1049.77       1079.21    
  46  0.530313     -0.634287      -14.2690       14.2690       1051.72       1065.99    
  47  0.975874     -0.244213E-01 -0.549385      0.549385       1051.91       1052.46    
  48  0.313811      -1.15896      -26.0722       26.0722       1028.12       1054.19    
  49  0.932688     -0.696844E-01  -1.56763       1.56763       1059.08       1060.65    
  50  0.357359      -1.02901      -23.1488       23.1488       1069.83       1092.98    
  51  0.545837     -0.605435      -13.6199       13.6199       1034.31       1047.93    
  52  0.954982     -0.460626E-01  -1.03623       1.03623       1082.75       1083.79    
  53  0.470912     -0.753083      -16.9415       16.9415       983.802       1000.74    
loop,thermsimp(1:2)       60   23.8027       11.2768    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299       1029.51          0.85          1.15         22.02          0.00          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1029.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       60
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       61
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      298     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -9.21435       9.21435       943.917       953.132    
   2  0.718953     -0.329960      -7.42281       7.42281       946.467       953.889    
   3  0.454275     -0.789053      -17.7506       17.7506       934.437       952.188    
   4  0.253407E-01  -3.67534      -82.6809       82.6809       950.272       1032.95    
   5  0.611947     -0.491110      -11.0481       11.0481       944.199       955.247    
   6  0.234016      -1.45237      -32.6726       32.6726       968.905       1001.58    
   7  0.359481E-01  -3.32568      -74.8149       74.8149       971.915       1046.73    
   8  0.222118E-01  -3.80713      -85.6457       85.6457       962.533       1048.18    
   9  0.905838E-01  -2.40148      -54.0240       54.0240       978.958       1032.98    
  10  0.791683     -0.233594      -5.25496       5.25496       973.408       978.663    
  11  0.557734     -0.583873      -13.1349       13.1349       985.710       998.845    
  12  0.936048E-01  -2.36867      -53.2860       53.2860       988.084       1041.37    
  13  0.431059     -0.841510      -18.9307       18.9307       988.093       1007.02    
  14  0.225758      -1.48829      -33.4808       33.4808       980.018       1013.50    
  15  0.275181E-01  -3.59291      -80.8266       80.8266       993.949       1074.78    
  16  0.802517     -0.220002      -4.94920       4.94920       983.679       988.629    
  17  0.423872     -0.858323      -19.3089       19.3089       983.802       1003.11    
  18  0.300971      -1.20074      -27.0120       27.0120       983.320       1010.33    
  19  0.479556     -0.734895      -16.5323       16.5323       986.168       1002.70    
  20  0.621838     -0.475076      -10.6874       10.6874       1002.55       1013.24    
  21  0.397654     -0.922172      -20.7453       20.7453       1004.20       1024.95    
  22  0.664976     -0.408004      -9.17851       9.17851       986.238       995.416    
  23  0.288358      -1.24355      -27.9751       27.9751       1005.98       1033.96    
  24  0.442017     -0.816406      -18.3660       18.3660       983.579       1001.94    
  25  0.150763E-01  -4.19463      -94.3630       94.3630       1000.12       1094.49    
  26  0.600886     -0.509350      -11.4584       11.4584       996.403       1007.86    
  27  0.162927      -1.81446      -40.8182       40.8182       1003.49       1044.30    
  28  0.932743     -0.696251E-01  -1.56630       1.56630       1024.24       1025.81    
  29  0.997186     -0.281799E-02 -0.633939E-01  0.633939E-01   1017.12       1017.18    
  30  0.418339     -0.871463      -19.6045       19.6045       996.274       1015.88    
  31  0.694800     -0.364132      -8.19155       8.19155       1000.42       1008.61    
  32  0.852711     -0.159334      -3.58441       3.58441       1020.60       1024.18    
  33  0.624847     -0.470249      -10.5788       10.5788       1034.08       1044.66    
  34  0.427649     -0.849453      -19.1094       19.1094       987.251       1006.36    
  35  0.149871      -1.89798      -42.6972       42.6972       1034.31       1077.01    
  36  0.563430     -0.573713      -12.9063       12.9063       1031.63       1044.53    
  37  0.860100     -0.150706      -3.39030       3.39030       1051.91       1055.30    
  38  0.867090E-01  -2.44520      -55.0075       55.0075       1028.12       1083.13    
  39  0.847848     -0.165054      -3.71307       3.71307       1024.69       1028.40    
  40  0.782599E-01  -2.54772      -57.3138       57.3138       1036.72       1094.03    
  41  0.697889E-01  -2.66228      -59.8910       59.8910       1059.08       1118.97    
  42  0.422765     -0.860939      -19.3678       19.3678       1051.07       1070.44    
  43  0.158365      -1.84286      -41.4571       41.4571       1039.96       1081.42    
  44  0.518935     -0.655976      -14.7569       14.7569       1019.02       1033.77    
  45  0.430406     -0.843027      -18.9648       18.9648       1051.72       1070.68    
  46  0.639805     -0.446592      -10.0466       10.0466       1034.59       1044.63    
  47  0.830453E-01  -2.48837      -55.9786       55.9786       975.399       1031.38    
  48  0.639384     -0.447250      -10.0614       10.0614       1049.77       1059.83    
  49  0.833791     -0.181773      -4.08918       4.08918       1082.75       1086.84    
  50  0.453972     -0.789720      -17.7656       17.7656       1058.50       1076.26    
  51  0.542088     -0.612327      -13.7750       13.7750       1015.09       1028.87    
  52  0.271321      -1.30445      -29.3451       29.3451       1069.83       1099.17    
  53  0.176790      -1.73279      -38.9811       38.9811       1029.51       1068.49    
loop,thermsimp(1:2)       61   9.21435       7.42281    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300       1063.84          0.85          1.15         21.96          0.00          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1063.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       61
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       62
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      299     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.318713      0.318713       934.437       934.756    
   2  0.420912     -0.865330      -19.4666       19.4666       943.917       963.384    
   3  0.617210     -0.482545      -10.8554       10.8554       946.467       957.322    
   4  0.787846     -0.238453      -5.36427       5.36427       944.199       949.563    
   5  0.608770     -0.496315      -11.1652       11.1652       973.408       984.574    
   6  0.925975     -0.769083E-01  -1.73014       1.73014       983.679       985.410    
   7  0.545822     -0.605462      -13.6205       13.6205       986.238       999.858    
   8  0.240142      -1.42653      -32.0913       32.0913       985.710       1017.80    
   9  0.800257     -0.222822      -5.01263       5.01263       968.905       973.918    
  10  0.250149      -1.38570      -31.1729       31.1729       983.579       1014.75    
  11  0.814044     -0.205741      -4.62838       4.62838       986.168       990.797    
  12  0.897552     -0.108084      -2.43147       2.43147       983.802       986.234    
  13  0.807530     -0.213775      -4.80912       4.80912       987.251       992.060    
  14  0.369031     -0.996874      -22.4258       22.4258       988.093       1010.52    
  15  0.892620     -0.113594      -2.55543       2.55543       996.403       998.958    
  16  0.992736     -0.729054E-02 -0.164009      0.164009       1000.42       1000.59    
  17  0.264259      -1.33083      -29.9384       29.9384       983.320       1013.26    
  18  0.164586      -1.80432      -40.5903       40.5903       1002.55       1043.14    
  19  0.594739     -0.519633      -11.6897       11.6897       980.018       991.708    
  20  0.766319     -0.266156      -5.98748       5.98748       996.274       1002.26    
  21  0.392663     -0.934804      -21.0295       21.0295       1017.12       1038.15    
  22  0.900399     -0.104917      -2.36023       2.36023       1020.60       1022.96    
  23  0.853164E-01  -2.46139      -55.3717       55.3717       1004.20       1059.57    
  24  0.753181     -0.283450      -6.37653       6.37653       1024.24       1030.62    
  25  0.801958     -0.220699      -4.96486       4.96486       1024.69       1029.65    
  26  0.840206     -0.174108      -3.91676       3.91676       1015.09       1019.01    
  27  0.899787     -0.105597      -2.37553       2.37553       975.399       977.774    
  28  0.555629     -0.587654      -13.2199       13.2199       950.272       963.492    
  29  0.117481E-01  -4.44406      -99.9742       99.9742       978.958       1078.93    
  30  0.228476      -1.47632      -33.2115       33.2115       1019.02       1052.23    
  31  0.121877      -2.10474      -47.3486       47.3486       1005.98       1053.33    
  32  0.475375     -0.743652      -16.7293       16.7293       988.084       1004.81    
  33  0.208734      -1.56669      -35.2445       35.2445       1003.49       1038.73    
  34  0.680231     -0.385322      -8.66826       8.66826       1031.63       1040.30    
  35  0.211647      -1.55284      -34.9328       34.9328       1034.59       1069.52    
  36  0.982763     -0.173870E-01 -0.391141      0.391141       1034.08       1034.47    
  37  0.819904     -0.198568      -4.46701       4.46701       971.915       976.382    
  38  0.282339      -1.26465      -28.4497       28.4497       962.533       990.983    
  39  0.391986     -0.936529      -21.0683       21.0683       1051.91       1072.98    
  40  0.218050      -1.52303      -34.2623       34.2623       1049.77       1084.03    
  41  0.236244      -1.44289      -32.4595       32.4595       1029.51       1061.97    
  42  0.544673     -0.607570      -13.6680       13.6680       1051.07       1064.74    
  43  0.721937     -0.325818      -7.32963       7.32963       1051.72       1059.05    
  44  0.649728     -0.431202      -9.70037       9.70037       993.949       1003.65    
  45  0.641823     -0.443443      -9.97574       9.97574       1058.50       1068.47    
  46  0.597293     -0.515347      -11.5933       11.5933       1034.31       1045.91    
  47  0.467405     -0.760558      -17.1096       17.1096       1039.96       1057.07    
  48  0.676900     -0.390232      -8.77871       8.77871       1028.12       1036.90    
  49  0.925913     -0.769750E-01  -1.73164       1.73164       1082.75       1084.48    
  50  0.692551     -0.367374      -8.26449       8.26449       1036.72       1044.98    
  51  0.161390      -1.82393      -41.0314       41.0314       1000.12       1041.15    
  52  0.513279     -0.666936      -15.0035       15.0035       1069.83       1084.83    
  53  0.379540     -0.968796      -21.7942       21.7942       1063.84       1085.63    
loop,thermsimp(1:2)       62  0.318713       19.4666    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301       1059.08          0.85          1.14         21.89          0.01          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    1059.1       0.7508     -2.355      4.653     -102.6      1.590    
                      0.7949     0.8062     -99.70      4.009      1.420    

                       1.994     -2.604      1.540      7000.      7000.    

                      -1.615      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -8.610     -8.169     -11.46      7.941    

                      -15.61     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1928E-01 0.3541    -0.2068     0.2518    

                     -0.2486    -0.1326     0.2256     0.2011     0.1945    



                     -0.5703    -0.6838      0.000     0.1746    -0.9806E-01

                      0.3468E-01 0.2363    -0.7116    -0.9434E-01 0.3785    

                      0.1057     0.1237    -0.8191     -1.508      7000.    



                      -1.614     -1.309     -2.142     -1.982    -0.3807    

                     -0.3252      9.324      8.857    -0.1672E+05 -6.000    

                      0.1597E-01 -2.205      9.473      8.962    -0.1969E+05



                      -6.000     0.7433    -0.1630      8.962      9.204    

                     -0.1944E+05 -6.000    -0.5838    -0.4877      9.118    

                       8.927    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1059.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       62
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       63
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      300     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.340400      0.340400       934.437       934.778    
   2  0.760415     -0.273890      -6.16147       6.16147       944.199       950.360    
   3  0.328612      -1.11288      -25.0354       25.0354       946.467       971.502    
   4  0.164880      -1.80254      -40.5501       40.5501       943.917       984.467    
   5  0.706606     -0.347282      -7.81249       7.81249       950.272       958.084    
   6  0.832070     -0.183839      -4.13567       4.13567       968.905       973.041    
   7  0.231505      -1.46315      -32.9153       32.9153       971.915       1004.83    
   8  0.802671E-01  -2.52240      -56.7441       56.7441       975.399       1032.14    
   9  0.116349      -2.15116      -48.3928       48.3928       973.408       1021.80    
  10  0.874222     -0.134421      -3.02396       3.02396       983.679       986.703    
  11  0.729333     -0.315625      -7.10035       7.10035       983.802       990.903    
  12  0.301675      -1.19841      -26.9595       26.9595       986.168       1013.13    
  13  0.496896     -0.699375      -15.7332       15.7332       962.533       978.266    
  14  0.692174     -0.367918      -8.27673       8.27673       980.018       988.295    
  15  0.717718     -0.331678      -7.46147       7.46147       987.251       994.713    
  16  0.867334E-01  -2.44492      -55.0011       55.0011       996.403       1051.40    
  17  0.762934     -0.270584      -6.08708       6.08708       986.238       992.325    
  18  0.966741     -0.338246E-01 -0.760923      0.760923       1000.42       1001.18    
  19  0.375386     -0.979801      -22.0417       22.0417       996.274       1018.32    
  20  0.878716     -0.129293      -2.90859       2.90859       993.949       996.858    
  21  0.238969      -1.43142      -32.2014       32.2014       988.084       1020.29    
  22  0.939578     -0.623249E-01  -1.40207       1.40207       988.093       989.495    
  23  0.694828     -0.364091      -8.19063       8.19063       983.320       991.510    
  24  0.869149     -0.140241      -3.15487       3.15487       983.579       986.734    
  25  0.310010      -1.17115      -26.3464       26.3464       985.710       1012.06    
  26  0.831753     -0.184219      -4.14422       4.14422       1015.09       1019.24    
  27  0.621050     -0.476344      -10.7159       10.7159       1020.60       1031.31    
  28  0.902274     -0.102837      -2.31344       2.31344       1024.69       1027.00    
  29  0.341345      -1.07486      -24.1802       24.1802       1024.24       1048.42    
  30  0.718647     -0.330385      -7.43237       7.43237       1034.08       1041.51    
  31  0.489532     -0.714305      -16.0691       16.0691       1028.12       1044.19    
  32  0.387793     -0.947282      -21.3102       21.3102       1017.12       1038.43    
  33  0.576785     -0.550285      -12.3793       12.3793       1003.49       1015.86    
  34  0.454048     -0.789552      -17.7619       17.7619       1031.63       1049.39    
  35  0.532728     -0.629744      -14.1668       14.1668       1000.12       1014.29    
  36  0.459832     -0.776895      -17.4771       17.4771       1002.55       1020.03    
  37  0.784910     -0.242187      -5.44826       5.44826       1036.72       1042.17    
  38  0.842297     -0.171622      -3.86083       3.86083       1034.31       1038.18    
  39  0.967556     -0.329823E-01 -0.741975      0.741975       1019.02       1019.76    
  40  0.126414      -2.06819      -46.5263       46.5263       1005.98       1052.51    
  41  0.407002     -0.898938      -20.2226       20.2226       1039.96       1060.18    
  42  0.903435     -0.101551      -2.28451       2.28451       1051.72       1054.00    
  43  0.430116     -0.843701      -18.9800       18.9800       1004.20       1023.18    
  44  0.675859     -0.391771      -8.81333       8.81333       1029.51       1038.32    
  45  0.444470     -0.810872      -18.2415       18.2415       1051.07       1069.31    
  46  0.728661     -0.316547      -7.12107       7.12107       1058.50       1065.62    
  47  0.143617      -1.94060      -43.6560       43.6560       1034.59       1078.24    
  48  0.729467E-01  -2.61803      -58.8954       58.8954       1051.91       1110.80    
  49  0.720547     -0.327745      -7.37298       7.37298       978.958       986.331    
  50  0.742905     -0.297187      -6.68555       6.68555       1049.77       1056.45    
  51  0.807330     -0.214023      -4.81469       4.81469       1082.75       1087.57    
  52  0.387442     -0.948190      -21.3306       21.3306       1069.83       1091.16    
  53  0.207045      -1.57482      -35.4273       35.4273       1059.08       1094.51    
loop,thermsimp(1:2)       63  0.340400       6.16147    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302        998.36          0.84          1.14         21.88          0.00          0.05         23.91
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    998.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       63
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       64
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      301     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.817545      0.817545       934.437       935.255    
   2  0.186231      -1.68077      -37.8107       37.8107       944.199       982.010    
   3  0.127308      -2.06115      -46.3678       46.3678       950.272       996.639    
   4  0.305661      -1.18528      -26.6642       26.6642       946.467       973.131    
   5  0.685804     -0.377164      -8.48472       8.48472       968.905       977.390    
   6  0.713250     -0.337923      -7.60196       7.60196       962.533       970.135    
   7  0.562604     -0.575180      -12.9393       12.9393       943.917       956.857    
   8  0.410540     -0.890283      -20.0279       20.0279       978.958       998.986    
   9  0.667633     -0.404017      -9.08882       9.08882       983.679       992.768    
  10  0.111237      -2.19609      -49.4035       49.4035       983.579       1032.98    
  11  0.987129     -0.129550E-01 -0.291437      0.291437       980.018       980.310    
  12  0.525481     -0.643442      -14.4749       14.4749       988.093       1002.57    
  13  0.740553     -0.300358      -6.75689       6.75689       983.802       990.559    
  14  0.456748E-01  -3.08621      -69.4277       69.4277       983.320       1052.75    
  15  0.831796     -0.184168      -4.14308       4.14308       986.238       990.381    
  16  0.798422     -0.225118      -5.06429       5.06429       987.251       992.315    
  17  0.985535     -0.145708E-01 -0.327786      0.327786       993.949       994.277    
  18  0.323340      -1.12905      -25.3992       25.3992       1000.42       1025.82    
  19  0.745026     -0.294336      -6.62142       6.62142       971.915       978.536    
  20  0.711871     -0.339858      -7.64550       7.64550       985.710       993.355    
  21  0.232875      -1.45725      -32.7825       32.7825       986.168       1018.95    
  22  0.118192      -2.13545      -48.0393       48.0393       1000.12       1048.16    
  23  0.310641      -1.16912      -26.3006       26.3006       1003.49       1029.79    
  24  0.220899      -1.51005      -33.9703       33.9703       996.274       1030.24    
  25  0.487797     -0.717856      -16.1490       16.1490       1015.09       1031.24    
  26  0.278848      -1.27709      -28.7295       28.7295       1019.02       1047.74    
  27  0.159355      -1.83662      -41.3168       41.3168       1002.55       1043.87    
  28  0.473156     -0.748329      -16.8345       16.8345       988.084       1004.92    
  29  0.358980      -1.02449      -23.0470       23.0470       973.408       996.455    
  30  0.873266     -0.135515      -3.04856       3.04856       1004.20       1007.25    
  31  0.168201      -1.78260      -40.1015       40.1015       1024.69       1064.79    
  32  0.492581     -0.708096      -15.9294       15.9294       1020.60       1036.53    
  33  0.878329     -0.129734      -2.91852       2.91852       975.399       978.317    
  34  0.266147      -1.32371      -29.7783       29.7783       1034.31       1064.09    
  35  0.510485     -0.672394      -15.1263       15.1263       1029.51       1044.64    
  36  0.810074     -0.210630      -4.73836       4.73836       1017.12       1021.86    
  37  0.950614     -0.506467E-01  -1.13935       1.13935       1034.08       1035.22    
  38  0.329006      -1.11168      -25.0085       25.0085       1036.72       1061.73    
  39  0.934893E-01  -2.36991      -53.3137       53.3137       1028.12       1081.43    
  40  0.686671     -0.375900      -8.45629       8.45629       1024.24       1032.70    
  41  0.888060     -0.118716      -2.67066       2.67066       1031.63       1034.30    
  42  0.749618     -0.288192      -6.48320       6.48320       996.403       1002.89    
  43  0.433754     -0.835279      -18.7905       18.7905       1005.98       1024.77    
  44  0.630341     -0.461494      -10.3818       10.3818       1051.72       1062.10    
  45  0.569388     -0.563194      -12.6697       12.6697       1049.77       1062.44    
  46  0.965872     -0.347242E-01 -0.781159      0.781159       1039.96       1040.74    
  47  0.797995     -0.225653      -5.07632       5.07632       1058.50       1063.57    
  48  0.716091     -0.333948      -7.51253       7.51253       1051.07       1058.58    
  49  0.339849      -1.07925      -24.2790       24.2790       1034.59       1058.87    
  50  0.202757      -1.59575      -35.8981       35.8981       1082.75       1118.65    
  51  0.266068      -1.32400      -29.7849       29.7849       1069.83       1099.61    
  52  0.985546E-01  -2.31715      -52.1268       52.1268       1059.08       1111.20    
  53  0.751309     -0.285938      -6.43251       6.43251       998.357       1004.79    
loop,thermsimp(1:2)       64  0.817545       37.8107    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303       1064.72          0.85          1.15         21.90          0.00          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1064.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       64
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       65
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      302     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -19.2730       19.2730       934.437       953.710    
   2  0.350039      -1.04971      -23.6144       23.6144       943.917       967.532    
   3  0.872911     -0.135921      -3.05770       3.05770       962.533       965.591    
   4  0.829005     -0.187529      -4.21867       4.21867       946.467       950.685    
   5  0.201827      -1.60035      -36.0016       36.0016       968.905       1004.91    
   6  0.735791     -0.306809      -6.90202       6.90202       975.399       982.301    
   7  0.985788     -0.143135E-01 -0.321998      0.321998       971.915       972.237    
   8  0.962727     -0.379858E-01 -0.854533      0.854533       980.018       980.873    
   9  0.796954     -0.226958      -5.10568       5.10568       944.199       949.305    
  10  0.563149     -0.574211      -12.9175       12.9175       986.238       999.155    
  11  0.776846     -0.252513      -5.68057       5.68057       983.802       989.483    
  12  0.921010     -0.822839E-01  -1.85107       1.85107       987.251       989.102    
  13  0.884938     -0.122238      -2.74989       2.74989       983.679       986.429    
  14  0.850974     -0.161373      -3.63027       3.63027       985.710       989.340    
  15  0.391065     -0.938882      -21.1212       21.1212       993.949       1015.07    
  16  0.150921      -1.89100      -42.5401       42.5401       973.408       1015.95    
  17  0.295162      -1.22023      -27.4505       27.4505       950.272       977.722    
  18  0.662567     -0.411634      -9.26017       9.26017       978.958       988.218    
  19  0.893994     -0.112056      -2.52082       2.52082       988.093       990.614    
  20  0.103282      -2.27029      -51.0728       51.0728       996.403       1047.48    
  21  0.416341     -0.876251      -19.7122       19.7122       998.357       1018.07    
  22  0.986101E-01  -2.31658      -52.1141       52.1141       988.084       1040.20    
  23  0.617817E-01  -2.78415      -62.6325       62.6325       1004.20       1066.84    
  24  0.371945     -0.989010      -22.2489       22.2489       986.168       1008.42    
  25  0.884755     -0.122444      -2.75452       2.75452       1017.12       1019.88    
  26  0.584237     -0.537449      -12.0905       12.0905       1005.98       1018.07    
  27  0.239981      -1.42719      -32.1063       32.1063       1000.42       1032.53    
  28  0.106477      -2.23982      -50.3873       50.3873       1003.49       1053.87    
  29  0.142954      -1.94523      -43.7601       43.7601       996.274       1040.03    
  30  0.802284     -0.220292      -4.95572       4.95572       1015.09       1020.05    
  31  0.373571     -0.984648      -22.1508       22.1508       1024.24       1046.39    
  32  0.617091     -0.482739      -10.8598       10.8598       983.579       994.438    
  33  0.813617     -0.206266      -4.64018       4.64018       1031.63       1036.27    
  34  0.219787E-01  -3.81768      -85.8830       85.8830       1034.08       1119.96    
  35  0.398995     -0.918807      -20.6696       20.6696       1020.60       1041.27    
  36  0.906985     -0.976296E-01  -2.19629       2.19629       1039.96       1042.16    
  37  0.259146E-01  -3.65295      -82.1772       82.1772       1002.55       1084.73    
  38  0.347543      -1.05687      -23.7754       23.7754       1029.51       1053.29    
  39  0.879549     -0.128346      -2.88728       2.88728       1019.02       1021.90    
  40  0.618015     -0.481242      -10.8261       10.8261       1000.12       1010.95    
  41  0.173348      -1.75246      -39.4235       39.4235       983.320       1022.74    
  42  0.324418      -1.12572      -25.3244       25.3244       1051.07       1076.39    
  43  0.426503     -0.852135      -19.1697       19.1697       1034.59       1053.76    
  44  0.672650     -0.396530      -8.92039       8.92039       1036.72       1045.64    
  45  0.500711     -0.691727      -15.5612       15.5612       1051.72       1067.28    
  46  0.457446     -0.782097      -17.5941       17.5941       1049.77       1067.36    
  47  0.408507     -0.895245      -20.1395       20.1395       1058.50       1078.64    
  48  0.649058     -0.432234      -9.72359       9.72359       1034.31       1044.04    
  49  0.275220      -1.29018      -29.0241       29.0241       1024.69       1053.71    
  50  0.706820     -0.346979      -7.80568       7.80568       1028.12       1035.93    
  51  0.596044     -0.517441      -11.6404       11.6404       1069.83       1081.47    
  52  0.362601      -1.01445      -22.8212       22.8212       1059.08       1081.90    
  53  0.934637     -0.675969E-01  -1.52067       1.52067       1064.72       1066.24    
loop,thermsimp(1:2)       65   19.2730       23.6144    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304       1052.62          0.86          1.14         21.86          0.00          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1052.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       65
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       66
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      303     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -16.7871       16.7871       944.199       960.986    
   2  0.162949E-01  -4.11691      -92.6144       92.6144       946.467       1039.08    
   3  0.560104     -0.579632      -13.0395       13.0395       934.437       947.477    
   4  0.583629     -0.538490      -12.1139       12.1139       962.533       974.647    
   5  0.794243     -0.230366      -5.18234       5.18234       943.917       949.100    
   6  0.183626E-01  -3.99744      -89.9268       89.9268       971.915       1061.84    
   7  0.642495     -0.442397      -9.95222       9.95222       950.272       960.224    
   8  0.611061E-02  -5.09773      -114.679       114.679       980.018       1094.70    
   9  0.974115E-01  -2.32881      -52.3892       52.3892       975.399       1027.79    
  10  0.817249E-01  -2.50440      -56.3392       56.3392       983.679       1040.02    
  11  0.644422     -0.439401      -9.88481       9.88481       978.958       988.843    
  12  0.378181     -0.972383      -21.8748       21.8748       987.251       1009.13    
  13  0.105422      -2.24978      -50.6113       50.6113       985.710       1036.32    
  14  0.713647     -0.337367      -7.58945       7.58945       983.802       991.392    
  15  0.602100     -0.507333      -11.4130       11.4130       988.093       999.506    
  16  0.746624     -0.292194      -6.57323       6.57323       983.579       990.152    
  17  0.687673     -0.374442      -8.42350       8.42350       986.238       994.661    
  18  0.356323      -1.03192      -23.2142       23.2142       968.905       992.119    
  19  0.631203     -0.460128      -10.3511       10.3511       986.168       996.519    
  20  0.348432      -1.05431      -23.7180       23.7180       1000.12       1023.84    
  21  0.200848      -1.60521      -36.1109       36.1109       993.949       1030.06    
  22  0.863860     -0.146345      -3.29219       3.29219       973.408       976.701    
  23  0.278415      -1.27864      -28.7645       28.7645       998.357       1027.12    
  24  0.871038     -0.138069      -3.10603       3.10603       1005.98       1009.09    
  25  0.581010     -0.542987      -12.2151       12.2151       1017.12       1029.34    
  26  0.960519     -0.402815E-01 -0.906177      0.906177       1015.09       1016.00    
  27  0.104828      -2.25543      -50.7384       50.7384       1019.02       1069.75    
  28  0.907238     -0.973501E-01  -2.19000       2.19000       983.320       985.510    
  29  0.685005     -0.378330      -8.51095       8.51095       1000.42       1008.93    
  30  0.239566E-01  -3.73151      -83.9445       83.9445       1028.12       1112.07    
  31  0.643900     -0.440211      -9.90304       9.90304       1031.63       1041.53    
  32  0.526819     -0.640898      -14.4177       14.4177       996.274       1010.69    
  33  0.463387     -0.769192      -17.3038       17.3038       988.084       1005.39    
  34  0.847158E-01  -2.46845      -55.5306       55.5306       1020.60       1076.13    
  35  0.134368E-01  -4.30976      -96.9529       96.9529       1039.96       1136.91    
  36  0.141068      -1.95851      -44.0589       44.0589       1034.31       1078.37    
  37  0.239867      -1.42767      -32.1170       32.1170       1036.72       1068.84    
  38  0.317049      -1.14870      -25.8413       25.8413       1024.24       1050.08    
  39  0.925847     -0.770459E-01  -1.73323       1.73323       996.403       998.136    
  40  0.939258     -0.626649E-01  -1.40972       1.40972       1029.51       1030.92    
  41  0.111598      -2.19286      -49.3307       49.3307       1024.69       1074.02    
  42  0.357545      -1.02849      -23.1371       23.1371       1034.59       1057.72    
  43  0.902640     -0.102432      -2.30432       2.30432       1003.49       1005.79    
  44  0.914421     -0.894640E-01  -2.01259       2.01259       1064.72       1066.73    
  45  0.320420      -1.13812      -25.6033       25.6033       1004.20       1029.81    
  46  0.341333      -1.07490      -24.1810       24.1810       1051.72       1075.90    
  47  0.509727     -0.673879      -15.1597       15.1597       1049.77       1064.93    
  48  0.130581E-02  -6.64093      -149.395       149.395       1051.07       1200.46    
  49  0.105413      -2.24987      -50.6132       50.6132       1058.50       1109.11    
  50  0.743306     -0.296647      -6.67340       6.67340       1069.83       1076.50    
  51  0.114013      -2.17144      -48.8491       48.8491       1059.08       1107.93    
  52  0.225326      -1.49021      -33.5238       33.5238       1002.55       1036.08    
  53  0.131158      -2.03135      -45.6975       45.6975       1052.62       1098.31    
loop,thermsimp(1:2)       66   16.7871       92.6144    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305       1039.55          0.85          1.14         21.89          0.00          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1039.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       66
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       67
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      304     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -7.66623       7.66623       934.437       942.104    
   2  0.492413     -0.708438      -15.9371       15.9371       943.917       959.854    
   3  0.156563      -1.85430      -41.7145       41.7145       950.272       991.986    
   4  0.185270      -1.68594      -37.9272       37.9272       944.199       982.126    
   5  0.685983     -0.376903      -8.47885       8.47885       962.533       971.012    
   6  0.518581     -0.656659      -14.7723       14.7723       973.408       988.181    
   7  0.430667     -0.842421      -18.9512       18.9512       983.320       1002.27    
   8  0.748228     -0.290047      -6.52494       6.52494       978.958       985.483    
   9  0.348167      -1.05507      -23.7351       23.7351       983.579       1007.31    
  10  0.281980E-01  -3.56850      -80.2775       80.2775       983.802       1064.08    
  11  0.670749     -0.399360      -8.98405       8.98405       968.905       977.889    
  12  0.225031      -1.49152      -33.5534       33.5534       986.238       1019.79    
  13  0.258016      -1.35474      -30.4763       30.4763       986.168       1016.64    
  14  0.122388      -2.10056      -47.2544       47.2544       996.403       1043.66    
  15  0.556210     -0.586609      -13.1964       13.1964       988.093       1001.29    
  16  0.938933     -0.630108E-01  -1.41750       1.41750       988.084       989.502    
  17  0.440352     -0.820180      -18.4509       18.4509       1003.49       1021.94    
  18  0.779048     -0.249683      -5.61690       5.61690       1000.42       1006.04    
  19  0.929725     -0.728667E-01  -1.63922       1.63922       1005.98       1007.62    
  20  0.330740      -1.10642      -24.8902       24.8902       987.251       1012.14    
  21  0.214890      -1.53763      -34.5907       34.5907       996.274       1030.87    
  22  0.363221      -1.01274      -22.7828       22.7828       1015.09       1037.88    
  23  0.681309     -0.383740      -8.63266       8.63266       1000.12       1008.75    
  24  0.107313      -2.23200      -50.2114       50.2114       998.357       1048.57    
  25  0.622524     -0.473973      -10.6625       10.6625       975.399       986.061    
  26  0.532378     -0.630402      -14.1816       14.1816       1017.12       1031.30    
  27  0.298562      -1.20878      -27.1928       27.1928       1004.20       1031.40    
  28  0.432099     -0.839100      -18.8765       18.8765       993.949       1012.83    
  29  0.243978      -1.41068      -31.7348       31.7348       1029.51       1061.25    
  30  0.581243     -0.542587      -12.2061       12.2061       1002.55       1014.76    
  31  0.897127E-01  -2.41114      -54.2414       54.2414       985.710       1039.95    
  32  0.738124     -0.303644      -6.83081       6.83081       946.467       953.297    
  33  0.462727     -0.770619      -17.3359       17.3359       983.679       1001.02    
  34  0.984641E-01  -2.31806      -52.1474       52.1474       1031.63       1083.77    
  35  0.641923     -0.443287      -9.97224       9.97224       1024.24       1034.21    
  36  0.334628      -1.09474      -24.6273       24.6273       1034.59       1059.21    
  37  0.482851     -0.728048      -16.3783       16.3783       971.915       988.293    
  38  0.826279     -0.190822      -4.29276       4.29276       1049.77       1054.06    
  39  0.966417     -0.341596E-01 -0.768459      0.768459       1064.72       1065.49    
  40  0.236833      -1.44040      -32.4034       32.4034       1036.72       1069.12    
  41  0.274744      -1.29192      -29.0631       29.0631       1019.02       1048.08    
  42  0.310307      -1.17019      -26.3248       26.3248       1024.69       1051.01    
  43  0.697298     -0.360543      -8.11081       8.11081       1051.72       1059.83    
  44  0.239072      -1.43099      -32.1917       32.1917       1020.60       1052.79    
  45  0.809729     -0.211055      -4.74792       4.74792       1069.83       1074.57    
  46  0.651880     -0.427895      -9.62597       9.62597       1034.31       1043.94    
  47  0.515020     -0.663550      -14.9273       14.9273       980.018       994.945    
  48  0.359059      -1.02427      -23.0421       23.0421       1052.62       1075.66    
  49  0.516010E-02  -5.26680      -118.483       118.483       1059.08       1177.56    
  50  0.321807      -1.13380      -25.5061       25.5061       1058.50       1084.00    
  51  0.787972     -0.238293      -5.36068       5.36068       1028.12       1033.48    
  52  0.842264     -0.171662      -3.86173       3.86173       1039.96       1043.82    
  53  0.201829      -1.60034      -36.0014       36.0014       1039.55       1075.55    
loop,thermsimp(1:2)       67   7.66623       15.9371    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306       1041.27          0.85          1.15         21.94          0.00          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1041.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       67
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       68
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      305     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -11.6775       11.6775       934.437       946.115    
   2  0.204294      -1.58819      -35.7282       35.7282       946.467       982.195    
   3  0.902141     -0.102985      -2.31675       2.31675       943.917       946.234    
   4  0.317306      -1.14789      -25.8231       25.8231       962.533       988.356    
   5  0.914914E-01  -2.39151      -53.7997       53.7997       968.905       1022.70    
   6  0.362439      -1.01490      -22.8313       22.8313       944.199       967.030    
   7  0.284546      -1.25686      -28.2744       28.2744       978.958       1007.23    
   8  0.752727     -0.284053      -6.39009       6.39009       975.399       981.789    
   9  0.972148     -0.282475E-01 -0.635458      0.635458       973.408       974.044    
  10  0.312417      -1.16342      -26.1723       26.1723       971.915       998.087    
  11  0.772549E-01  -2.56064      -57.6046       57.6046       988.084       1045.69    
  12  0.190763      -1.65672      -37.2699       37.2699       950.272       987.542    
  13  0.829036     -0.187492      -4.21784       4.21784       980.018       984.236    
  14  0.309766      -1.17194      -26.3641       26.3641       983.679       1010.04    
  15  0.691616     -0.368724      -8.29487       8.29487       988.093       996.388    
  16  0.177510      -1.72873      -38.8897       38.8897       983.320       1022.21    
  17  0.848561     -0.164214      -3.69417       3.69417       1000.42       1004.12    
  18  0.464945     -0.765836      -17.2283       17.2283       983.579       1000.81    
  19  0.626682     -0.467316      -10.5128       10.5128       1005.98       1016.49    
  20  0.451266     -0.795699      -17.9001       17.9001       1000.12       1018.02    
  21  0.161179E-01  -4.12783      -92.8601       92.8601       987.251       1080.11    
  22  0.848853     -0.163869      -3.68643       3.68643       993.949       997.636    
  23  0.565946     -0.569256      -12.8061       12.8061       1002.55       1015.36    
  24  0.798567     -0.224937      -5.06021       5.06021       986.168       991.228    
  25  0.282371      -1.26453      -28.4471       28.4471       986.238       1014.68    
  26  0.887219     -0.119663      -2.69196       2.69196       1003.49       1006.18    
  27  0.311981      -1.16481      -26.2038       26.2038       996.274       1022.48    
  28  0.454937     -0.787596      -17.7179       17.7179       1017.12       1034.84    
  29  0.200774E-01  -3.90816      -87.9185       87.9185       1004.20       1092.12    
  30  0.549692     -0.598397      -13.4616       13.4616       1028.12       1041.58    
  31  0.928164     -0.745470E-01  -1.67702       1.67702       1024.24       1025.92    
  32  0.876026     -0.132360      -2.97758       2.97758       1015.09       1018.07    
  33  0.360538      -1.02016      -22.9496       22.9496       985.710       1008.66    
  34  0.810484     -0.210124      -4.72697       4.72697       996.403       1001.13    
  35  0.350387      -1.04872      -23.5921       23.5921       1039.96       1063.55    
  36  0.609257     -0.495514      -11.1471       11.1471       1034.31       1045.46    
  37  0.847473     -0.165497      -3.72303       3.72303       1019.02       1022.74    
  38  0.459433     -0.777763      -17.4966       17.4966       998.357       1015.85    
  39  0.213778      -1.54282      -34.7074       34.7074       1024.69       1059.40    
  40  0.983077     -0.170677E-01 -0.383956      0.383956       1020.60       1020.98    
  41  0.719533     -0.329153      -7.40466       7.40466       1049.77       1057.17    
  42  0.317292      -1.14793      -25.8241       25.8241       1034.59       1060.41    
  43  0.300670      -1.20174      -27.0345       27.0345       1051.72       1078.75    
  44  0.486388     -0.720748      -16.2140       16.2140       1029.51       1045.72    
  45  0.309580      -1.17254      -26.3775       26.3775       983.802       1010.18    
  46  0.111802      -2.19103      -49.2897       49.2897       1064.72       1114.01    
  47  0.913484     -0.904897E-01  -2.03567       2.03567       1036.72       1038.75    
  48  0.438377     -0.824676      -18.5520       18.5520       1069.83       1088.38    
  49  0.773114     -0.257329      -5.78891       5.78891       1039.55       1045.33    
  50  0.248259      -1.39328      -31.3435       31.3435       1052.62       1083.96    
  51  0.502855     -0.687454      -15.4651       15.4651       1031.63       1047.09    
  52  0.827610E-01  -2.49180      -56.0558       56.0558       1058.50       1114.55    
  53  0.528759     -0.637222      -14.3350       14.3350       1041.27       1055.60    
loop,thermsimp(1:2)       68   11.6775       35.7282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307        943.61          0.86          1.14         21.83          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    308       1567.42          0.85          1.14         21.96          0.00          0.05         24.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    943.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       68
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       69
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      307     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -18.4369       18.4369       934.437       952.874    
   2  0.752309     -0.284608      -6.40257       6.40257       943.917       950.320    
   3  0.209108      -1.56490      -35.2043       35.2043       944.199       979.403    
   4  0.842922     -0.170881      -3.84417       3.84417       973.408       977.253    
   5  0.161148      -1.82543      -41.0651       41.0651       975.399       1016.46    
   6  0.601748     -0.507917      -11.4262       11.4262       946.467       957.893    
   7  0.890912     -0.115510      -2.59852       2.59852       980.018       982.617    
   8  0.631939     -0.458963      -10.3249       10.3249       950.272       960.597    
   9  0.144759E-01  -4.23527      -95.2771       95.2771       962.533       1057.81    
  10  0.653698     -0.425110      -9.56333       9.56333       986.168       995.731    
  11  0.401463     -0.912639      -20.5308       20.5308       988.093       1008.62    
  12  0.906126     -0.985765E-01  -2.21759       2.21759       993.949       996.167    
  13  0.480601E-01  -3.03530      -68.2826       68.2826       971.915       1040.20    
  14  0.264260      -1.33082      -29.9383       29.9383       983.579       1013.52    
  15  0.586033     -0.534379      -12.0215       12.0215       996.403       1008.42    
  16  0.323072      -1.12988      -25.4179       25.4179       1000.42       1025.84    
  17  0.785147     -0.241884      -5.44145       5.44145       1003.49       1008.93    
  18  0.139165      -1.97210      -44.3645       44.3645       978.958       1023.32    
  19  0.105818E-01  -4.54862      -102.326       102.326       985.710       1088.04    
  20  0.896943     -0.108763      -2.44675       2.44675       983.679       986.126    
  21  0.854239     -0.157544      -3.54412       3.54412       983.802       987.346    
  22  0.566003     -0.569157      -12.8038       12.8038       986.238       999.042    
  23  0.566387     -0.568477      -12.7885       12.7885       1002.55       1015.34    
  24  0.414905     -0.879707      -19.7900       19.7900       998.357       1018.15    
  25  0.173772      -1.75001      -39.3685       39.3685       1005.98       1045.35    
  26  0.884308E-01  -2.42554      -54.5651       54.5651       1000.12       1054.69    
  27  0.417457     -0.873573      -19.6520       19.6520       1015.09       1034.75    
  28  0.334615      -1.09477      -24.6282       24.6282       1020.60       1045.23    
  29  0.706024E-01  -2.65069      -59.6303       59.6303       983.320       1042.95    
  30  0.996422     -0.358418E-02 -0.806301E-01  0.806301E-01   996.274       996.355    
  31  0.894500     -0.111491      -2.50811       2.50811       968.905       971.413    
  32  0.827855     -0.188917      -4.24990       4.24990       1019.02       1023.27    
  33  0.434964     -0.832492      -18.7278       18.7278       1024.24       1042.97    
  34  0.121450      -2.10825      -47.4275       47.4275       1017.12       1064.55    
  35  0.498977     -0.695195      -15.6392       15.6392       1036.72       1052.36    
  36  0.117961      -2.13740      -48.0832       48.0832       1028.12       1076.20    
  37  0.309211      -1.17373      -26.4044       26.4044       1039.55       1065.95    
  38  0.786265     -0.240461      -5.40945       5.40945       1034.31       1039.72    
  39  0.614330     -0.487222      -10.9606       10.9606       988.084       999.045    
  40  0.820857     -0.197407      -4.44088       4.44088       1029.51       1033.95    
  41  0.670448     -0.399809      -8.99414       8.99414       1031.63       1040.62    
  42  0.742403     -0.297863      -6.70077       6.70077       1041.27       1047.97    
  43  0.760912E-01  -2.57582      -57.9460       57.9460       1049.77       1107.71    
  44  0.709677     -0.342945      -7.71493       7.71493       1024.69       1032.40    
  45  0.943449     -0.582133E-01  -1.30957       1.30957       1034.59       1035.90    
  46  0.176370      -1.73517      -39.0347       39.0347       1039.96       1079.00    
  47  0.866890     -0.142843      -3.21342       3.21342       1051.72       1054.93    
  48  0.711056     -0.341004      -7.67128       7.67128       987.251       994.922    
  49  0.929667E-01  -2.37551      -53.4398       53.4398       1052.62       1106.06    
  50  0.960091     -0.407270E-01 -0.916199      0.916199       1069.83       1070.74    
  51  0.948380     -0.530000E-01  -1.19229       1.19229       1004.20       1005.40    
  52  0.257449      -1.35693      -30.5257       30.5257       1064.72       1095.24    
  53  0.117236      -2.14357      -48.2219       48.2219       943.606       991.828    
loop,thermsimp(1:2)       69   18.4369       6.40257    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309       1044.52          0.85          1.14         21.85          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1044.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       69
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       70
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      308     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.262713      0.262713       943.917       944.180    
   2  0.482301     -0.729186      -16.4039       16.4039       934.437       950.841    
   3  0.546964     -0.603372      -13.5735       13.5735       946.467       960.040    
   4  0.543918     -0.608957      -13.6992       13.6992       950.272       963.971    
   5  0.427641     -0.849472      -19.1098       19.1098       968.905       988.015    
   6  0.498345     -0.696462      -15.6677       15.6677       973.408       989.076    
   7  0.989308     -0.107494E-01 -0.241819      0.241819       944.199       944.441    
   8  0.658822     -0.417302      -9.38767       9.38767       980.018       989.406    
   9  0.917808     -0.857673E-01  -1.92943       1.92943       983.679       985.609    
  10  0.914490E-04  -9.29973      -209.208       209.208       983.802       1193.01    
  11  0.989901     -0.101499E-01 -0.228333      0.228333       943.606       943.834    
  12  0.558183     -0.583069      -13.1168       13.1168       987.251       1000.37    
  13  0.706994     -0.346733      -7.80016       7.80016       986.168       993.968    
  14  0.599152     -0.512240      -11.5234       11.5234       993.949       1005.47    
  15  0.845909     -0.167343      -3.76457       3.76457       996.274       1000.04    
  16  0.655384     -0.422534      -9.50537       9.50537       986.238       995.743    
  17  0.412232E-01  -3.18875      -71.7346       71.7346       988.084       1059.82    
  18  0.495401     -0.702387      -15.8010       15.8010       1004.20       1020.00    
  19  0.378829     -0.970671      -21.8363       21.8363       996.403       1018.24    
  20  0.653665E-02  -5.03033      -113.163       113.163       988.093       1101.26    
  21  0.782670     -0.245045      -5.51256       5.51256       1003.49       1009.00    
  22  0.945547     -0.559921E-01  -1.25961       1.25961       983.579       984.838    
  23  0.969857     -0.306063E-01 -0.688524      0.688524       1002.55       1003.24    
  24  0.822249     -0.195712      -4.40275       4.40275       975.399       979.801    
  25  0.265012E-01  -3.63056      -81.6736       81.6736       998.357       1080.03    
  26  0.360432E-01  -3.32304      -74.7554       74.7554       1019.02       1093.77    
  27  0.796418     -0.227631      -5.12081       5.12081       978.958       984.079    
  28  0.292313E-01  -3.53252      -79.4679       79.4679       1000.42       1079.89    
  29  0.227321      -1.48139      -33.3256       33.3256       1024.69       1058.01    
  30  0.812637     -0.207471      -4.66728       4.66728       1029.51       1034.18    
  31  0.930544     -0.719857E-01  -1.61940       1.61940       1015.09       1016.71    
  32  0.674873     -0.393231      -8.84617       8.84617       1034.59       1043.43    
  33  0.264030      -1.33169      -29.9579       29.9579       1034.31       1064.27    
  34  0.807464     -0.213856      -4.81094       4.81094       971.915       976.726    
  35  0.653731     -0.425060      -9.56220       9.56220       1031.63       1041.19    
  36  0.858536     -0.152527      -3.43126       3.43126       983.320       986.751    
  37  0.538887     -0.618250      -13.9082       13.9082       1024.24       1038.15    
  38  0.468049     -0.759182      -17.0787       17.0787       1020.60       1037.68    
  39  0.401324     -0.912987      -20.5387       20.5387       1005.98       1026.52    
  40  0.363356      -1.01237      -22.7745       22.7745       1041.27       1064.04    
  41  0.924933     -0.780342E-01  -1.75547       1.75547       1036.72       1038.47    
  42  0.797289     -0.226538      -5.09623       5.09623       1000.12       1005.22    
  43  0.200097      -1.60895      -36.1952       36.1952       1051.72       1087.91    
  44  0.686219     -0.376559      -8.47111       8.47111       962.533       971.004    
  45  0.895629     -0.110230      -2.47974       2.47974       1017.12       1019.60    
  46  0.331830      -1.10313      -24.8162       24.8162       1039.55       1064.36    
  47  0.967018     -0.335379E-01 -0.754472      0.754472       1069.83       1070.58    
  48  0.268282      -1.31572      -29.5985       29.5985       1028.12       1057.72    
  49  0.472399     -0.749931      -16.8705       16.8705       1039.96       1056.83    
  50  0.399276E-01  -3.22069      -72.4530       72.4530       985.710       1058.16    
  51  0.956493     -0.444820E-01  -1.00067       1.00067       1064.72       1065.72    
  52  0.444161     -0.811569      -18.2571       18.2571       1052.62       1070.87    
  53  0.308942      -1.17460      -26.4240       26.4240       1044.52       1070.94    
loop,thermsimp(1:2)       70  0.262713       16.4039    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310       1057.90          0.84          1.15         21.82          0.00          0.05         23.86
Just calling func    0   0         23.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1057.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       70
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       71
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      309     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -3.38736       3.38736       943.606       946.993    
   2  0.573661     -0.555717      -12.5015       12.5015       943.917       956.419    
   3  0.499290     -0.694569      -15.6251       15.6251       944.199       959.824    
   4  0.677563     -0.389253      -8.75668       8.75668       934.437       943.194    
   5  0.476566     -0.741149      -16.6730       16.6730       946.467       963.139    
   6  0.153036      -1.87708      -42.2270       42.2270       950.272       992.499    
   7  0.626270     -0.467973      -10.5276       10.5276       962.533       973.061    
   8  0.794744     -0.229735      -5.16815       5.16815       971.915       977.083    
   9  0.111868E-01  -4.49302      -101.076       101.076       975.399       1076.47    
  10  0.643880     -0.440243      -9.90376       9.90376       978.958       988.861    
  11  0.634705     -0.454595      -10.2266       10.2266       983.579       993.805    
  12  0.653568     -0.425308      -9.56779       9.56779       983.679       993.247    
  13  0.888231     -0.118524      -2.66633       2.66633       983.320       985.986    
  14  0.681775E-01  -2.68564      -60.4165       60.4165       968.905       1029.32    
  15  0.241248      -1.42193      -31.9879       31.9879       973.408       1005.40    
  16  0.208857      -1.56610      -35.2313       35.2313       980.018       1015.25    
  17  0.652439     -0.427038      -9.60669       9.60669       986.168       995.775    
  18  0.489833     -0.713691      -16.0553       16.0553       986.238       1002.29    
  19  0.719225     -0.329581      -7.41428       7.41428       996.274       1003.69    
  20  0.924762     -0.782189E-01  -1.75962       1.75962       987.251       989.011    
  21  0.845502     -0.167825      -3.77541       3.77541       1002.55       1006.33    
  22  0.665989     -0.406482      -9.14427       9.14427       1000.12       1009.27    
  23  0.378562     -0.971376      -21.8522       21.8522       993.949       1015.80    
  24  0.396889     -0.924098      -20.7886       20.7886       1003.49       1024.27    
  25  0.158089      -1.84460      -41.4963       41.4963       1015.09       1056.59    
  26  0.590577     -0.526655      -11.8477       11.8477       996.403       1008.25    
  27  0.949513     -0.518061E-01  -1.16544       1.16544       1017.12       1018.29    
  28  0.518198     -0.657398      -14.7889       14.7889       1004.20       1018.99    
  29  0.551080     -0.595875      -13.4049       13.4049       1005.98       1019.39    
  30  0.986285     -0.138097E-01 -0.310666      0.310666       1029.51       1029.82    
  31  0.920142     -0.832276E-01  -1.87230       1.87230       1020.60       1022.47    
  32  0.133201      -2.01590      -45.3499       45.3499       1024.24       1069.59    
  33  0.584507     -0.536987      -12.0801       12.0801       1036.72       1048.80    
  34  0.790583     -0.234984      -5.28623       5.28623       1031.63       1036.91    
  35  0.702664     -0.352876      -7.93834       7.93834       1034.59       1042.52    
  36  0.148885      -1.90458      -42.8457       42.8457       1039.96       1082.81    
  37  0.290436      -1.23637      -27.8136       27.8136       1028.12       1055.93    
  38  0.638249     -0.449027      -10.1014       10.1014       1024.69       1034.79    
  39  0.381605     -0.963369      -21.6721       21.6721       985.710       1007.38    
  40  0.823069     -0.194716      -4.38035       4.38035       988.084       992.465    
  41  0.492318     -0.708630      -15.9414       15.9414       1041.27       1057.21    
  42  0.773199     -0.257218      -5.78642       5.78642       1034.31       1040.10    
  43  0.289475E-01  -3.54227      -79.6874       79.6874       1039.55       1119.23    
  44  0.355683      -1.03371      -23.2546       23.2546       1064.72       1087.97    
  45  0.160396      -1.83011      -41.1704       41.1704       1069.83       1111.00    
  46  0.972861     -0.275140E-01 -0.618959      0.618959       1052.62       1053.23    
  47  0.781938E-02  -4.85115      -109.132       109.132       1044.52       1153.65    
  48  0.225299      -1.49033      -33.5266       33.5266       1000.42       1033.95    
  49  0.631686     -0.459363      -10.3339       10.3339       998.357       1008.69    
  50  0.212316      -1.54968      -34.8617       34.8617       1051.72       1086.58    
  51  0.673664     -0.395024      -8.88651       8.88651       1019.02       1027.90    
  52  0.728322     -0.317012      -7.13155       7.13155       988.093       995.225    
  53  0.368576     -0.998108      -22.4535       22.4535       1057.90       1080.36    
loop,thermsimp(1:2)       71   3.38736       12.5015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311       1056.08          0.85          1.15         21.93          0.00          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1056.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       71
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       72
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      310     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -18.4295       18.4295       934.437       952.867    
   2  0.202294      -1.59803      -35.9495       35.9495       943.606       979.555    
   3  0.873786     -0.134920      -3.03518       3.03518       943.917       946.952    
   4  0.262141      -1.33887      -30.1195       30.1195       944.199       974.318    
   5  0.342005      -1.07293      -24.1367       24.1367       946.467       970.603    
   6  0.421217     -0.864607      -19.4503       19.4503       962.533       981.983    
   7  0.618489     -0.480477      -10.8089       10.8089       971.915       982.724    
   8  0.412552     -0.885393      -19.9179       19.9179       983.320       1003.24    
   9  0.951192     -0.500396E-01  -1.12570       1.12570       978.958       980.083    
  10  0.298546      -1.20883      -27.1940       27.1940       987.251       1014.45    
  11  0.805120     -0.216763      -4.87634       4.87634       988.084       992.960    
  12  0.208146      -1.56951      -35.3080       35.3080       950.272       985.580    
  13  0.924021     -0.790209E-01  -1.77766       1.77766       983.679       985.457    
  14  0.447624     -0.803802      -18.0824       18.0824       983.579       1001.66    
  15  0.667709     -0.403903      -9.08626       9.08626       988.093       997.180    
  16  0.767295E-01  -2.56747      -57.7581       57.7581       986.168       1043.93    
  17  0.301582      -1.19871      -26.9664       26.9664       986.238       1013.20    
  18  0.788580     -0.237522      -5.34332       5.34332       996.274       1001.62    
  19  0.887020     -0.119888      -2.69701       2.69701       973.408       976.105    
  20  0.233035E-01  -3.75915      -84.5663       84.5663       1002.55       1087.12    
  21  0.899320     -0.106116      -2.38721       2.38721       985.710       988.097    
  22  0.144480      -1.93461      -43.5213       43.5213       996.403       1039.92    
  23  0.274629      -1.29233      -29.0725       29.0725       998.357       1027.43    
  24  0.831597     -0.184407      -4.14844       4.14844       1000.12       1004.27    
  25  0.388827     -0.944620      -21.2503       21.2503       980.018       1001.27    
  26  0.257578      -1.35643      -30.5145       30.5145       993.949       1024.46    
  27  0.427791     -0.849120      -19.1019       19.1019       1017.12       1036.22    
  28  0.837664E-01  -2.47972      -55.7842       55.7842       1004.20       1059.99    
  29  0.782727     -0.244972      -5.51091       5.51091       1005.98       1011.49    
  30  0.259676E-01  -3.65091      -82.1312       82.1312       1020.60       1102.73    
  31  0.166181      -1.79468      -40.3733       40.3733       1003.49       1043.86    
  32  0.360749      -1.01957      -22.9364       22.9364       1019.02       1041.95    
  33  0.369697     -0.995071      -22.3852       22.3852       968.905       991.290    
  34  0.959392     -0.414553E-01 -0.932583      0.932583       1029.51       1030.44    
  35  0.449170     -0.800353      -18.0048       18.0048       1000.42       1018.43    
  36  0.655790E-02  -5.02708      -113.090       113.090       1024.69       1137.78    
  37  0.133569      -2.01313      -45.2877       45.2877       1031.63       1076.91    
  38  0.282061      -1.26563      -28.4718       28.4718       1034.31       1062.79    
  39  0.431813     -0.839762      -18.8914       18.8914       1034.59       1053.48    
  40  0.713174     -0.338031      -7.60438       7.60438       1036.72       1044.32    
  41  0.511305     -0.670790      -15.0902       15.0902       1052.62       1067.71    
  42  0.264485      -1.32997      -29.9192       29.9192       1028.12       1058.04    
  43  0.779298     -0.249362      -5.60968       5.60968       1015.09       1020.70    
  44  0.709352E-02  -4.94857      -111.324       111.324       1041.27       1152.59    
  45  0.770402     -0.260843      -5.86795       5.86795       1024.24       1030.11    
  46  0.694393     -0.364718      -8.20473       8.20473       975.399       983.603    
  47  0.589268E-01  -2.83146      -63.6969       63.6969       1057.90       1121.60    
  48  0.817644     -0.201328      -4.52910       4.52910       1039.96       1044.49    
  49  0.990168     -0.988073E-02 -0.222278      0.222278       1051.72       1051.94    
  50  0.733536E-01  -2.61246      -58.7703       58.7703       1064.72       1123.49    
  51  0.781472     -0.246575      -5.54699       5.54699       1069.83       1075.37    
  52  0.582548     -0.540344      -12.1557       12.1557       1039.55       1051.70    
  53  0.644915     -0.438636      -9.86762       9.86762       1056.08       1065.95    
loop,thermsimp(1:2)       72   18.4295       35.9495    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312       1054.29          0.85          1.14         22.11          0.01          0.05         24.16
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1054.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       72
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       73
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      311     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -4.79901       4.79901       943.917       948.716    
   2  0.554495     -0.589697      -13.2659       13.2659       934.437       947.703    
   3  0.997056     -0.294851E-02 -0.663300E-01  0.663300E-01   946.467       946.533    
   4  0.901183E-01  -2.40663      -54.1399       54.1399       944.199       998.339    
   5  0.296736      -1.21491      -27.3308       27.3308       973.408       1000.74    
   6  0.907820     -0.967094E-01  -2.17559       2.17559       943.606       945.782    
   7  0.325542      -1.12226      -25.2466       25.2466       978.958       1004.20    
   8  0.947537     -0.538896E-01  -1.21231       1.21231       962.533       963.745    
   9  0.378276     -0.972130      -21.8692       21.8692       971.915       993.784    
  10  0.985613     -0.144920E-01 -0.326013      0.326013       975.399       975.725    
  11  0.167434      -1.78717      -40.2043       40.2043       983.679       1023.88    
  12  0.693849E-01  -2.66809      -60.0216       60.0216       950.272       1010.29    
  13  0.434983     -0.832447      -18.7268       18.7268       985.710       1004.44    
  14  0.998656     -0.134491E-02 -0.302553E-01  0.302553E-01   968.905       968.935    
  15  0.650302     -0.430318      -9.68048       9.68048       988.084       997.765    
  16  0.152610      -1.87987      -42.2898       42.2898       988.093       1030.38    
  17  0.273947      -1.29482      -29.1284       29.1284       980.018       1009.15    
  18  0.990471     -0.957469E-02 -0.215393      0.215393       996.274       996.490    
  19  0.684493     -0.379077      -8.52776       8.52776       983.579       992.106    
  20  0.864467E-01  -2.44823      -55.0756       55.0756       983.320       1038.40    
  21  0.546085     -0.604980      -13.6097       13.6097       1000.12       1013.73    
  22  0.246642      -1.39982      -31.4904       31.4904       1005.98       1037.47    
  23  0.484505     -0.724627      -16.3013       16.3013       986.238       1002.54    
  24  0.567359     -0.566763      -12.7500       12.7500       987.251       1000.00    
  25  0.564371     -0.572043      -12.8688       12.8688       1000.42       1013.29    
  26  0.825604     -0.191640      -4.31117       4.31117       1015.09       1019.41    
  27  0.302493      -1.19570      -26.8986       26.8986       993.949       1020.85    
  28  0.630396     -0.461407      -10.3799       10.3799       998.357       1008.74    
  29  0.886734     -0.120210      -2.70427       2.70427       1024.24       1026.95    
  30  0.389345     -0.943288      -21.2203       21.2203       1029.51       1050.73    
  31  0.181391      -1.70710      -38.4032       38.4032       1017.12       1055.52    
  32  0.933221     -0.691132E-01  -1.55478       1.55478       996.403       997.957    
  33  0.169237E-01  -4.07904      -91.7626       91.7626       1019.02       1110.78    
  34  0.757788     -0.277351      -6.23933       6.23933       1003.49       1009.72    
  35  0.300993E-01  -3.50325      -78.8096       78.8096       986.168       1064.98    
  36  0.395621     -0.927300      -20.8606       20.8606       1036.72       1057.58    
  37  0.459505     -0.777605      -17.4931       17.4931       1039.96       1057.45    
  38  0.733176     -0.310370      -6.98212       6.98212       1039.55       1046.53    
  39  0.575459     -0.552587      -12.4311       12.4311       1051.72       1064.15    
  40  0.560889     -0.578233      -13.0080       13.0080       1034.59       1047.59    
  41  0.428351     -0.847812      -19.0725       19.0725       1028.12       1047.19    
  42  0.553832     -0.590895      -13.2928       13.2928       1004.20       1017.50    
  43  0.581118     -0.542801      -12.2109       12.2109       1034.31       1046.53    
  44  0.319195E-01  -3.44454      -77.4888       77.4888       1056.08       1133.57    
  45  0.224512E-01  -3.79641      -85.4046       85.4046       1052.62       1138.02    
  46  0.113637E-01  -4.47733      -100.723       100.723       1069.83       1170.55    
  47  0.889134     -0.117508      -2.64347       2.64347       1031.63       1034.27    
  48  0.422937     -0.860531      -19.3586       19.3586       1002.55       1021.91    
  49  0.479928     -0.734119      -16.5148       16.5148       1020.60       1037.11    
  50  0.813133     -0.206861      -4.65356       4.65356       1057.90       1062.56    
  51  0.544683     -0.607551      -13.6675       13.6675       1064.72       1078.38    
  52  0.694184E-01  -2.66760      -60.0107       60.0107       1024.69       1084.70    
  53  0.656508     -0.420820      -9.46681       9.46681       1054.29       1063.76    
loop,thermsimp(1:2)       73   4.79901       13.2659    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313        984.90          0.86          1.14         22.04          0.01          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    984.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       73
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       74
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      312     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889      -2.62955       2.62955       943.606       946.236    
   2  0.480213     -0.733525      -16.5015       16.5015       946.467       962.968    
   3  0.226156      -1.48653      -33.4412       33.4412       934.437       967.879    
   4  0.633402     -0.456651      -10.2729       10.2729       943.917       954.190    
   5  0.925311     -0.776258E-01  -1.74628       1.74628       962.533       964.279    
   6  0.498405     -0.696343      -15.6650       15.6650       968.905       984.570    
   7  0.133283      -2.01528      -45.3360       45.3360       975.399       1020.73    
   8  0.657074E-01  -2.72254      -61.2467       61.2467       983.579       1044.83    
   9  0.726758     -0.319162      -7.17991       7.17991       971.915       979.095    
  10  0.398365     -0.920388      -20.7052       20.7052       996.274       1016.98    
  11  0.321047E-01  -3.43875      -77.3586       77.3586       988.084       1065.44    
  12  0.276307      -1.28624      -28.9355       28.9355       996.403       1025.34    
  13  0.483740     -0.726208      -16.3369       16.3369       944.199       960.536    
  14  0.224589      -1.49348      -33.5976       33.5976       987.251       1020.85    
  15  0.832041     -0.183874      -4.13644       4.13644       973.408       977.545    
  16  0.939301     -0.626192E-01  -1.40869       1.40869       986.238       987.647    
  17  0.624052     -0.471522      -10.6074       10.6074       978.958       989.565    
  18  0.172753      -1.75589      -39.5008       39.5008       985.710       1025.21    
  19  0.468323     -0.758597      -17.0655       17.0655       998.357       1015.42    
  20  0.963461     -0.372229E-01 -0.837371      0.837371       980.018       980.855    
  21  0.812092     -0.208142      -4.68239       4.68239       1003.49       1008.17    
  22  0.376764     -0.976137      -21.9593       21.9593       950.272       972.231    
  23  0.791872E-01  -2.53594      -57.0488       57.0488       1000.42       1057.47    
  24  0.237003      -1.43968      -32.3873       32.3873       1000.12       1032.51    
  25  0.320094      -1.13914      -25.6262       25.6262       1004.20       1029.83    
  26  0.821410E-01  -2.49932      -56.2250       56.2250       1015.09       1071.32    
  27  0.789147     -0.236802      -5.32713       5.32713       993.949       999.276    
  28  0.734353E-01  -2.61135      -58.7452       58.7452       1002.55       1061.30    
  29  0.226401      -1.48545      -33.4168       33.4168       983.679       1017.10    
  30  0.380831     -0.965399      -21.7177       21.7177       1024.24       1045.96    
  31  0.264857      -1.32857      -29.8876       29.8876       988.093       1017.98    
  32  0.246167      -1.40174      -31.5338       31.5338       1031.63       1063.16    
  33  0.142133      -1.95099      -43.8898       43.8898       1020.60       1064.49    
  34  0.123438E-01  -4.39460      -98.8615       98.8615       1005.98       1104.84    
  35  0.853289     -0.158657      -3.56916       3.56916       983.320       986.889    
  36  0.418603     -0.870831      -19.5903       19.5903       1034.31       1053.91    
  37  0.235242      -1.44714      -32.5551       32.5551       1039.55       1072.10    
  38  0.841712     -0.172317      -3.87646       3.87646       1028.12       1032.00    
  39  0.113373      -2.17707      -48.9757       48.9757       1034.59       1083.56    
  40  0.617966     -0.481322      -10.8279       10.8279       1029.51       1040.34    
  41  0.149268      -1.90202      -42.7880       42.7880       1017.12       1059.91    
  42  0.811010     -0.209475      -4.71238       4.71238       1039.96       1044.67    
  43  0.571477     -0.559531      -12.5873       12.5873       1036.72       1049.31    
  44  0.105494      -2.24911      -50.5962       50.5962       1057.90       1108.50    
  45  0.709548     -0.343127      -7.71902       7.71902       1054.29       1062.01    
  46  0.535895     -0.623816      -14.0334       14.0334       1051.72       1065.75    
  47  0.137736      -1.98242      -44.5967       44.5967       986.168       1030.76    
  48  0.666779     -0.405297      -9.11761       9.11761       1064.72       1073.83    
  49  0.326487      -1.11936      -25.1813       25.1813       1024.69       1049.87    
  50  0.461090     -0.774162      -17.4156       17.4156       1019.02       1036.43    
  51  0.246088      -1.40207      -31.5411       31.5411       1056.08       1087.62    
  52  0.308348      -1.17653      -26.4673       26.4673       1052.62       1079.08    
  53  0.921161     -0.821209E-01  -1.84740       1.84740       984.896       986.743    
loop,thermsimp(1:2)       74   2.62955       16.5015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314        995.35          0.85          1.14         21.88          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    995.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       74
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       75
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      313     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -9.83674       9.83674       943.606       953.443    
   2  0.108032      -2.22533      -50.0612       50.0612       943.917       993.978    
   3  0.908790     -0.956413E-01  -2.15156       2.15156       944.199       946.351    
   4  0.987883     -0.121914E-01 -0.274258      0.274258       946.467       946.741    
   5  0.318380      -1.14451      -25.7470       25.7470       962.533       988.280    
   6  0.924426     -0.785824E-01  -1.76780       1.76780       934.437       936.205    
   7  0.965220     -0.353996E-01 -0.796353      0.796353       950.272       951.068    
   8  0.852248     -0.159878      -3.59664       3.59664       973.408       977.005    
   9  0.329186      -1.11113      -24.9962       24.9962       971.915       996.911    
  10  0.282479      -1.26415      -28.4385       28.4385       980.018       1008.46    
  11  0.818943     -0.199740      -4.49339       4.49339       968.905       973.398    
  12  0.842569     -0.171300      -3.85358       3.85358       984.896       988.749    
  13  0.370966     -0.991644      -22.3081       22.3081       983.320       1005.63    
  14  0.362233      -1.01547      -22.8441       22.8441       986.238       1009.08    
  15  0.356944E-01  -3.33276      -74.9742       74.9742       978.958       1053.93    
  16  0.149119      -1.90301      -42.8104       42.8104       993.949       1036.76    
  17  0.127170      -2.06223      -46.3923       46.3923       1003.49       1049.88    
  18  0.589256     -0.528895      -11.8981       11.8981       998.357       1010.26    
  19  0.702139     -0.353624      -7.95517       7.95517       996.274       1004.23    
  20  0.713819     -0.337127      -7.58404       7.58404       983.679       991.263    
  21  0.121783      -2.10552      -47.3660       47.3660       988.093       1035.46    
  22  0.992321     -0.770837E-02 -0.173408      0.173408       975.399       975.572    
  23  0.622746     -0.473616      -10.6545       10.6545       987.251       997.906    
  24  0.388486     -0.945499      -21.2701       21.2701       985.710       1006.98    
  25  0.365204      -1.00730      -22.6603       22.6603       996.403       1019.06    
  26  0.416566     -0.875710      -19.7001       19.7001       1004.20       1023.90    
  27  0.250735      -1.38336      -31.1202       31.1202       986.168       1017.29    
  28  0.243824      -1.41131      -31.7490       31.7490       1028.12       1059.87    
  29  0.177195      -1.73050      -38.9296       38.9296       1000.12       1039.05    
  30  0.723685     -0.323399      -7.27522       7.27522       1019.02       1026.29    
  31  0.157256      -1.84988      -41.6151       41.6151       1029.51       1071.13    
  32  0.941988     -0.597623E-01  -1.34442       1.34442       1039.96       1041.31    
  33  0.110785      -2.20016      -49.4952       49.4952       983.579       1033.07    
  34  0.200758      -1.60566      -36.1210       36.1210       1024.24       1060.36    
  35  0.873323     -0.135450      -3.04710       3.04710       1036.72       1039.77    
  36  0.842283     -0.171639      -3.86121       3.86121       1024.69       1028.55    
  37  0.326633      -1.11892      -25.1713       25.1713       1034.31       1059.49    
  38  0.648559     -0.433003      -9.74089       9.74089       1000.42       1010.16    
  39  0.460689E-01  -3.07762      -69.2344       69.2344       1017.12       1086.36    
  40  0.676614     -0.390654      -8.78819       8.78819       1002.55       1011.34    
  41  0.863029     -0.147307      -3.31384       3.31384       1054.29       1057.61    
  42  0.646727     -0.435831      -9.80451       9.80451       1031.63       1041.43    
  43  0.310616      -1.16920      -26.3024       26.3024       1020.60       1046.90    
  44  0.521840     -0.650394      -14.6314       14.6314       988.084       1002.72    
  45  0.381245     -0.964312      -21.6933       21.6933       1051.72       1073.41    
  46  0.815908     -0.203453      -4.57691       4.57691       1015.09       1019.67    
  47  0.209395E-01  -3.86612      -86.9727       86.9727       1039.55       1126.52    
  48  0.800991E-01  -2.52449      -56.7912       56.7912       1064.72       1121.51    
  49  0.824204     -0.193337      -4.34934       4.34934       1052.62       1056.96    
  50  0.828636     -0.187975      -4.22870       4.22870       1034.59       1038.82    
  51  0.609810     -0.494608      -11.1268       11.1268       1056.08       1067.21    
  52  0.793631     -0.231137      -5.19969       5.19969       1005.98       1011.18    
  53  0.450040E-01  -3.10100      -69.7605       69.7605       995.346       1065.11    
loop,thermsimp(1:2)       75   9.83674       50.0612    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315       1046.80          0.84          1.15         21.81          0.01          0.05         23.86
Just calling func    0   0         23.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1046.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    22.4961               313
loop is:       75
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    22.4961               313
loop is:       76
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    11.2481               365

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      314     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -17.9669       17.9669       934.437       952.404    
   2  0.337724      -1.08553      -12.2101       12.2101       944.199       956.409    
   3  0.870295     -0.138923      -1.56262       1.56262       946.467       948.029    
   4  0.837087     -0.177827      -2.00021       2.00021       950.272       952.272    
   5  0.512110     -0.669215      -7.52737       7.52737       943.606       951.133    
   6  0.998742     -0.125879E-02 -0.141590E-01  0.141590E-01   968.905       968.919    
   7  0.203490      -1.59214      -17.9085       17.9085       975.399       993.307    
   8  0.525951E-01  -2.94513      -33.1270       33.1270       973.408       1006.54    
   9  0.474810     -0.744841      -8.37802       8.37802       962.533       970.911    
  10  0.440755     -0.819266      -9.21516       9.21516       984.896       994.111    
  11  0.225689      -1.48860      -16.7438       16.7438       983.679       1000.42    
  12  0.902704     -0.102360      -1.15135       1.15135       943.917       945.069    
  13  0.663331     -0.410481      -4.61711       4.61711       971.915       976.532    
  14  0.511480     -0.670447      -7.54123       7.54123       987.251       994.792    
  15  0.625297     -0.469528      -5.28128       5.28128       988.084       993.365    
  16  0.812907     -0.207139      -2.32991       2.32991       996.274       998.604    
  17  0.979453     -0.207607E-01 -0.233517      0.233517       983.320       983.553    
  18  0.255329      -1.36520      -15.3559       15.3559       985.710       1001.07    
  19  0.856654     -0.154722      -1.74032       1.74032       980.018       981.758    
  20  0.610394     -0.493650      -5.55261       5.55261       986.238       991.790    
  21  0.703614     -0.351525      -3.95397       3.95397       1000.42       1004.38    
  22  0.623403     -0.472562      -5.31540       5.31540       998.357       1003.67    
  23  0.375727     -0.978893      -11.0106       11.0106       1005.98       1016.99    
  24  0.870528     -0.138656      -1.55961       1.55961       1002.55       1004.11    
  25  0.175838E-01  -4.04078      -45.4509       45.4509       986.168       1031.62    
  26  0.237914      -1.43585      -16.1505       16.1505       996.403       1012.55    
  27  0.464352     -0.767112      -8.62852       8.62852       1015.09       1023.72    
  28  0.776873     -0.252478      -2.83989       2.83989       1004.20       1007.04    
  29  0.380679     -0.965800      -10.8634       10.8634       1019.02       1029.88    
  30  0.391295     -0.938295      -10.5540       10.5540       1024.69       1035.24    
  31  0.369488     -0.995636      -11.1990       11.1990       983.579       994.778    
  32  0.302398      -1.19601      -13.4528       13.4528       988.093       1001.55    
  33  0.809138     -0.211786      -2.38218       2.38218       993.949       996.332    
  34  0.675473     -0.392342      -4.41309       4.41309       1034.59       1039.00    
  35  0.486217     -0.721100      -8.11098       8.11098       1000.12       1008.23    
  36  0.937468     -0.645730E-01 -0.726321      0.726321       1036.72       1037.45    
  37  0.741025     -0.299721      -3.37128       3.37128       1039.96       1043.33    
  38  0.155236      -1.86281      -20.9530       20.9530       1031.63       1052.58    
  39  0.407249     -0.898331      -10.1045       10.1045       1020.60       1030.70    
  40  0.348550E-01  -3.35656      -37.7548       37.7548       1003.49       1041.24    
  41  0.178548      -1.72290      -19.3793       19.3793       978.958       998.337    
  42  0.127429      -2.06020      -23.1732       23.1732       1052.62       1075.79    
  43  0.919888     -0.835037E-01 -0.939255      0.939255       1054.29       1055.23    
  44  0.520080     -0.653772      -7.35367       7.35367       1034.31       1041.67    
  45  0.574092     -0.554965      -6.24228       6.24228       1028.12       1034.36    
  46  0.893427     -0.112690      -1.26755       1.26755       1024.24       1025.51    
  47  0.658991     -0.417045      -4.69095       4.69095       995.346       1000.04    
  48  0.803744     -0.218475      -2.45742       2.45742       1056.08       1058.54    
  49  0.499877     -0.693392      -7.79932       7.79932       1029.51       1037.31    
  50  0.723109     -0.324195      -3.64656       3.64656       1051.72       1055.36    
  51  0.477842     -0.738475      -8.30641       8.30641       1017.12       1025.43    
  52  0.946108     -0.553980E-01 -0.623121      0.623121       1064.72       1065.34    
  53  0.296943      -1.21422      -13.6576       13.6576       1046.80       1060.46    
loop,thermsimp(1:2)       76   17.9669       12.2101    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316       1025.47          0.85          1.14         21.92          0.00          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1025.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       76
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       77
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      315     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -5.58108       5.58108       943.917       949.498    
   2  0.437836     -0.825911      -9.28990       9.28990       946.467       955.756    
   3  0.123560      -2.09103      -23.5201       23.5201       943.606       967.126    
   4  0.943438     -0.582242E-01 -0.654910      0.654910       950.272       950.927    
   5  0.215054      -1.53686      -17.2867       17.2867       934.437       951.724    
   6  0.984763     -0.153546E-01 -0.172709      0.172709       944.199       944.372    
   7  0.154160E-01  -4.17235      -46.9308       46.9308       968.905       1015.84    
   8  0.231957      -1.46120      -16.4357       16.4357       962.533       978.969    
   9  0.476349     -0.741605      -8.34162       8.34162       971.915       980.256    
  10  0.620436     -0.477333      -5.36907       5.36907       980.018       985.387    
  11  0.456145     -0.784945      -8.82911       8.82911       983.320       992.149    
  12  0.507296     -0.678660      -7.63361       7.63361       986.238       993.871    
  13  0.910123     -0.941755E-01  -1.05929       1.05929       975.399       976.458    
  14  0.323556      -1.12838      -12.6921       12.6921       988.084       1000.78    
  15  0.666279     -0.406046      -4.56723       4.56723       984.896       989.463    
  16  0.781920     -0.246002      -2.76705       2.76705       983.579       986.346    
  17  0.921689     -0.815478E-01 -0.917254      0.917254       987.251       988.168    
  18  0.152544      -1.88030      -21.1498       21.1498       993.949       1015.10    
  19  0.265926      -1.32454      -14.8985       14.8985       978.958       993.856    
  20  0.812409     -0.207751      -2.33679       2.33679       996.274       998.611    
  21  0.517560E-01  -2.96121      -33.3079       33.3079       995.346       1028.65    
  22  0.559187     -0.581271      -6.53817       6.53817       983.679       990.218    
  23  0.708792     -0.344194      -3.87151       3.87151       985.710       989.581    
  24  0.287762      -1.24562      -14.0108       14.0108       988.093       1002.10    
  25  0.896953     -0.108752      -1.22325       1.22325       998.357       999.581    
  26  0.305048      -1.18729      -13.3547       13.3547       1002.55       1015.91    
  27  0.752428     -0.284450      -3.19951       3.19951       1000.42       1003.62    
  28  0.248159      -1.39369      -15.6763       15.6763       973.408       989.085    
  29  0.997822     -0.217989E-02 -0.245196E-01  0.245196E-01   1004.20       1004.23    
  30  0.706427     -0.347535      -3.90909       3.90909       1000.12       1004.03    
  31  0.885217     -0.121923      -1.37139       1.37139       996.403       997.774    
  32  0.448301     -0.802290      -9.02421       9.02421       1005.98       1015.01    
  33  0.316275      -1.15114      -12.9481       12.9481       1015.09       1028.04    
  34  0.682241     -0.382372      -4.30094       4.30094       1017.12       1021.42    
  35  0.655896     -0.421752      -4.74390       4.74390       1024.24       1028.99    
  36  0.129575      -2.04350      -22.9854       22.9854       1019.02       1042.00    
  37  0.236133      -1.44336      -16.2350       16.2350       1020.60       1036.83    
  38  0.481338     -0.731186      -8.22442       8.22442       986.168       994.393    
  39  0.825902     -0.191279      -2.15152       2.15152       1028.12       1030.27    
  40  0.818029     -0.200857      -2.25925       2.25925       1024.69       1026.95    
  41  0.135951E-01  -4.29805      -48.3447       48.3447       1029.51       1077.86    
  42  0.535484     -0.624585      -7.02537       7.02537       1036.72       1043.74    
  43  0.451882     -0.794334      -8.93471       8.93471       1034.59       1043.52    
  44  0.591282     -0.525463      -5.91044       5.91044       1003.49       1009.40    
  45  0.220584      -1.51148      -17.0012       17.0012       1034.31       1051.32    
  46  0.217569      -1.52524      -17.1560       17.1560       1039.96       1057.12    
  47  0.541669     -0.613101      -6.89619       6.89619       1031.63       1038.52    
  48  0.927891     -0.748411E-01 -0.841817      0.841817       1054.29       1055.14    
  49  0.888902     -0.117768      -1.32466       1.32466       1051.72       1053.04    
  50  0.391529     -0.937694      -10.5472       10.5472       1056.08       1066.63    
  51  0.611187     -0.492353      -5.53801       5.53801       1046.80       1052.34    
  52  0.475002     -0.744437      -8.37347       8.37347       1064.72       1073.09    
  53  0.504237     -0.684709      -7.70165       7.70165       1025.47       1033.17    
loop,thermsimp(1:2)       77   5.58108       9.28990    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317       1012.80          0.84          1.14         21.85          0.01          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1012.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       77
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       78
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      316     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -26.1245       26.1245       944.199       970.323    
   2  0.700279     -0.356277      -4.00743       4.00743       943.917       947.925    
   3  0.681564     -0.383366      -4.31212       4.31212       950.272       954.584    
   4  0.838213E-01  -2.47907      -27.8847       27.8847       934.437       962.322    
   5  0.708687     -0.344341      -3.87317       3.87317       946.467       950.340    
   6  0.253966      -1.37055      -15.4161       15.4161       943.606       959.022    
   7  0.210796      -1.55686      -17.5117       17.5117       975.399       992.910    
   8  0.967741     -0.327906E-01 -0.368831      0.368831       962.533       962.902    
   9  0.901331     -0.103882      -1.16848       1.16848       971.915       973.083    
  10  0.985067     -0.150452E-01 -0.169229      0.169229       980.018       980.187    
  11  0.153899      -1.87146      -21.0503       21.0503       983.579       1004.63    
  12  0.297572      -1.21210      -13.6337       13.6337       987.251       1000.88    
  13  0.111036      -2.19790      -24.7221       24.7221       973.408       998.131    
  14  0.489011     -0.715370      -8.04652       8.04652       984.896       992.942    
  15  0.970731     -0.297058E-01 -0.334133      0.334133       985.710       986.044    
  16  0.246322      -1.40112      -15.7598       15.7598       983.679       999.439    
  17  0.293332      -1.22645      -13.7952       13.7952       983.320       997.115    
  18  0.545752     -0.605591      -6.81172       6.81172       978.958       985.769    
  19  0.455999     -0.785265      -8.83271       8.83271       986.238       995.071    
  20  0.427211     -0.850477      -9.56621       9.56621       986.168       995.734    
  21  0.185046E-01  -3.98974      -44.8768       44.8768       996.403       1041.28    
  22  0.768936     -0.262748      -2.95540       2.95540       996.274       999.230    
  23  0.870591     -0.138583      -1.55879       1.55879       998.357       999.916    
  24  0.563023     -0.574436      -6.46129       6.46129       988.084       994.545    
  25  0.132150E-01  -4.32640      -48.6637       48.6637       988.093       1036.76    
  26  0.890415     -0.116068      -1.30554       1.30554       1000.42       1001.73    
  27  0.163417      -1.81145      -20.3753       20.3753       1000.12       1020.50    
  28  0.360288      -1.02085      -11.4826       11.4826       1004.20       1015.69    
  29  0.622131     -0.474604      -5.33837       5.33837       1003.49       1008.82    
  30  0.942630     -0.590811E-01 -0.664548      0.664548       1005.98       1006.65    
  31  0.135626      -1.99785      -22.4720       22.4720       993.949       1016.42    
  32  0.369646     -0.995208      -11.1942       11.1942       968.905       980.099    
  33  0.501457     -0.690237      -7.76383       7.76383       1002.55       1010.32    
  34  0.459762     -0.777047      -8.74027       8.74027       1017.12       1025.86    
  35  0.489970     -0.713411      -8.02449       8.02449       1024.69       1032.71    
  36  0.504194     -0.684794      -7.70260       7.70260       1015.09       1022.80    
  37  0.543102E-01  -2.91304      -32.7661       32.7661       995.346       1028.11    
  38  0.873609     -0.135122      -1.51986       1.51986       1024.24       1025.76    
  39  0.425787     -0.853816      -9.60377       9.60377       1028.12       1037.72    
  40  0.792406     -0.232682      -2.61722       2.61722       1025.47       1028.08    
  41  0.691102     -0.369469      -4.15580       4.15580       1020.60       1024.75    
  42  0.752290     -0.284633      -3.20157       3.20157       1031.63       1034.83    
  43  0.279962      -1.27310      -14.3199       14.3199       1019.02       1033.34    
  44  0.315915E-01  -3.45487      -38.8605       38.8605       1034.59       1073.45    
  45  0.266419      -1.32269      -14.8776       14.8776       1036.72       1051.60    
  46  0.949868     -0.514319E-01 -0.578509      0.578509       1034.31       1034.89    
  47  0.520560     -0.652850      -7.34330       7.34330       1046.80       1054.14    
  48  0.805351     -0.216477      -2.43495       2.43495       1051.72       1054.15    
  49  0.281582      -1.26733      -14.2550       14.2550       1054.29       1068.55    
  50  0.365228      -1.00723      -11.3294       11.3294       1039.96       1051.29    
  51  0.961426     -0.393382E-01 -0.442478      0.442478       1056.08       1056.53    
  52  0.176024      -1.73713      -19.5394       19.5394       1064.72       1084.26    
  53  0.722488     -0.325055      -3.65624       3.65624       1012.80       1016.46    
loop,thermsimp(1:2)       78   26.1245       4.00743    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318       1084.23          0.86          1.14         22.14          0.00          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1084.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       78
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       79
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      317     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -18.6673       18.6673       943.917       962.585    
   2  0.812983     -0.207045      -2.32886       2.32886       946.467       948.795    
   3  0.820046E-01  -2.50098      -28.1312       28.1312       950.272       978.403    
   4  0.863006     -0.147333      -1.65721       1.65721       943.606       945.263    
   5  0.647901     -0.434017      -4.88185       4.88185       934.437       939.319    
   6  0.650063E-01  -2.73327      -30.7440       30.7440       962.533       993.277    
   7  0.407685E-02  -5.50243      -61.8917       61.8917       944.199       1006.09    
   8  0.935930     -0.662149E-01 -0.744790      0.744790       971.915       972.659    
   9  0.158531      -1.84180      -20.7167       20.7167       968.905       989.622    
  10  0.846482     -0.166666      -1.87467       1.87467       980.018       981.893    
  11  0.252208      -1.37750      -15.4942       15.4942       978.958       994.452    
  12  0.781651E-02  -4.85152      -54.5702       54.5702       985.710       1040.28    
  13  0.990286     -0.976134E-02 -0.109796      0.109796       975.399       975.508    
  14  0.550116     -0.597625      -6.72213       6.72213       984.896       991.618    
  15  0.483066     -0.727601      -8.18410       8.18410       988.084       996.268    
  16  0.196160      -1.62883      -18.3211       18.3211       986.238       1004.56    
  17  0.469455     -0.756184      -8.50560       8.50560       986.168       994.674    
  18  0.624392     -0.470977      -5.29758       5.29758       983.320       988.617    
  19  0.743593     -0.296262      -3.33237       3.33237       973.408       976.741    
  20  0.348439      -1.05429      -11.8587       11.8587       996.274       1008.13    
  21  0.779083     -0.249637      -2.80793       2.80793       983.679       986.487    
  22  0.989010     -0.110506E-01 -0.124298      0.124298       998.357       998.482    
  23  0.655432E-01  -2.72505      -30.6515       30.6515       987.251       1017.90    
  24  0.470908     -0.753092      -8.47083       8.47083       1000.42       1008.89    
  25  0.685537     -0.377553      -4.24673       4.24673       983.579       987.825    
  26  0.863060E-02  -4.75244      -53.4557       53.4557       1005.98       1059.44    
  27  0.526195     -0.642084      -7.22220       7.22220       1003.49       1010.71    
  28  0.767692     -0.264367      -2.97361       2.97361       1002.55       1005.53    
  29  0.380048     -0.967459      -10.8820       10.8820       1004.20       1015.09    
  30  0.337508E-01  -3.38875      -38.1169       38.1169       993.949       1032.07    
  31  0.683667     -0.380285      -4.27746       4.27746       1012.80       1017.08    
  32  0.245511      -1.40441      -15.7969       15.7969       1000.12       1015.92    
  33  0.294388      -1.22286      -13.7548       13.7548       1015.09       1028.85    
  34  0.159040      -1.83860      -20.6807       20.6807       1020.60       1041.28    
  35  0.613798     -0.488089      -5.49005       5.49005       1024.24       1029.73    
  36  0.863839E-01  -2.44895      -27.5460       27.5460       1017.12       1044.67    
  37  0.118930      -2.12922      -23.9496       23.9496       1025.47       1049.42    
  38  0.961460     -0.393026E-01 -0.442078      0.442078       995.346       995.788    
  39  0.457884     -0.781140      -8.78631       8.78631       1024.69       1033.47    
  40  0.312963      -1.16167      -13.0665       13.0665       1019.02       1032.08    
  41  0.892553     -0.113669      -1.27856       1.27856       1031.63       1032.91    
  42  0.448774     -0.801235      -9.01234       9.01234       1034.31       1043.33    
  43  0.942987E-01  -2.36129      -26.5599       26.5599       988.093       1014.65    
  44  0.848599     -0.164169      -1.84658       1.84658       1028.12       1029.97    
  45  0.665342     -0.407455      -4.58307       4.58307       996.403       1000.99    
  46  0.894010     -0.112039      -1.26022       1.26022       1039.96       1041.22    
  47  0.403928     -0.906518      -10.1966       10.1966       1036.72       1046.92    
  48  0.612812     -0.489696      -5.50813       5.50813       1046.80       1052.31    
  49  0.726279     -0.319821      -3.59737       3.59737       1051.72       1055.31    
  50  0.694767     -0.364179      -4.09631       4.09631       1056.08       1060.18    
  51  0.849471     -0.163141      -1.83502       1.83502       1054.29       1056.13    
  52  0.615908     -0.484657      -5.45145       5.45145       1034.59       1040.04    
  53  0.256250      -1.36160      -15.3154       15.3154       1084.23       1099.54    
loop,thermsimp(1:2)       79   18.6673       2.32886    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319       1064.72          0.85          1.14         21.88          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1064.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       79
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       80
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      318     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -12.2304       12.2304       934.437       946.668    
   2  0.744737     -0.294724      -3.31507       3.31507       943.606       946.921    
   3  0.361564E-01  -3.31990      -37.3424       37.3424       946.467       983.809    
   4  0.312099      -1.16444      -13.0976       13.0976       943.917       957.015    
   5  0.119132      -2.12752      -23.9305       23.9305       971.915       995.845    
   6  0.617735     -0.481696      -5.41814       5.41814       975.399       980.817    
   7  0.117626      -2.14025      -24.0736       24.0736       973.408       997.482    
   8  0.258570      -1.35259      -15.2140       15.2140       950.272       965.486    
   9  0.851854E-01  -2.46293      -27.7031       27.7031       980.018       1007.72    
  10  0.220620      -1.51131      -16.9993       16.9993       983.679       1000.68    
  11  0.648876     -0.432513      -4.86493       4.86493       983.579       988.444    
  12  0.958689     -0.421884E-01 -0.474538      0.474538       983.320       983.794    
  13  0.240652      -1.42440      -16.0218       16.0218       968.905       984.927    
  14  0.975871     -0.244252E-01 -0.274736      0.274736       984.896       985.170    
  15  0.467835     -0.759639      -8.54446       8.54446       962.533       971.077    
  16  0.398205     -0.920788      -10.3571       10.3571       978.958       989.315    
  17  0.757338E-01  -2.58053      -29.0260       29.0260       986.168       1015.19    
  18  0.654643     -0.423666      -4.76542       4.76542       995.346       1000.11    
  19  0.305298      -1.18647      -13.3454       13.3454       988.084       1001.43    
  20  0.435768     -0.830645      -9.34314       9.34314       998.357       1007.70    
  21  0.689410     -0.371920      -4.18338       4.18338       996.403       1000.59    
  22  0.267500      -1.31864      -14.8321       14.8321       986.238       1001.07    
  23  0.590747     -0.526367      -5.92061       5.92061       1002.55       1008.47    
  24  0.108947E-01  -4.51948      -50.8353       50.8353       944.199       995.034    
  25  0.236025      -1.44382      -16.2402       16.2402       996.274       1012.51    
  26  0.590760     -0.526345      -5.92036       5.92036       1000.42       1006.34    
  27  0.782443     -0.245334      -2.75953       2.75953       1003.49       1006.24    
  28  0.702257     -0.353456      -3.97569       3.97569       988.093       992.069    
  29  0.764991     -0.267891      -3.01326       3.01326       1004.20       1007.22    
  30  0.753362     -0.283210      -3.18556       3.18556       1000.12       1003.31    
  31  0.961949E-01  -2.34138      -26.3360       26.3360       1012.80       1039.14    
  32  0.541564     -0.613294      -6.89837       6.89837       987.251       994.150    
  33  0.474786     -0.744891      -8.37858       8.37858       1015.09       1023.47    
  34  0.242842      -1.41534      -15.9199       15.9199       1024.24       1040.16    
  35  0.495414     -0.702361      -7.90020       7.90020       1028.12       1036.02    
  36  0.636645     -0.451543      -5.07899       5.07899       993.949       999.028    
  37  0.758087     -0.276957      -3.11523       3.11523       1019.02       1022.13    
  38  0.209321      -1.56389      -17.5907       17.5907       1031.63       1049.22    
  39  0.484343     -0.724961      -8.15441       8.15441       1024.69       1032.84    
  40  0.499790     -0.693567      -7.80129       7.80129       1034.59       1042.39    
  41  0.316628      -1.15003      -12.9356       12.9356       985.710       998.646    
  42  0.705469     -0.348892      -3.92436       3.92436       1039.96       1043.88    
  43  0.514591     -0.664383      -7.47302       7.47302       1020.60       1028.07    
  44  0.869006     -0.140406      -1.57929       1.57929       1034.31       1035.89    
  45  0.112600      -2.18392      -24.5648       24.5648       1017.12       1041.69    
  46  0.511991     -0.669449      -7.53000       7.53000       1036.72       1044.25    
  47  0.477456     -0.739283      -8.31550       8.31550       1025.47       1033.78    
  48  0.494460     -0.704290      -7.92190       7.92190       1046.80       1054.72    
  49  0.698938     -0.358193      -4.02898       4.02898       1051.72       1055.75    
  50  0.430212     -0.843478      -9.48749       9.48749       1054.29       1063.78    
  51  0.474243E-01  -3.04862      -34.2911       34.2911       1005.98       1040.27    
  52  0.167497      -1.78679      -20.0979       20.0979       1056.08       1076.18    
  53  0.233811      -1.45324      -16.3462       16.3462       1064.72       1081.06    
loop,thermsimp(1:2)       80   12.2304       3.31507    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320       1084.23          0.85          1.14         21.84          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1084.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       80
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       81
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      319     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -12.0054       12.0054       934.437       946.443    
   2  0.822787     -0.195058      -2.19402       2.19402       943.606       945.800    
   3  0.320831E-01  -3.43942      -38.6869       38.6869       943.917       982.604    
   4  0.224034      -1.49596      -16.8266       16.8266       950.272       967.098    
   5  0.200770      -1.60559      -18.0598       18.0598       962.533       980.593    
   6  0.983846     -0.162863E-01 -0.183189      0.183189       975.399       975.582    
   7  0.762274     -0.271449      -3.05328       3.05328       983.320       986.373    
   8  0.872649     -0.136221      -1.53223       1.53223       946.467       947.999    
   9  0.366891      -1.00269      -11.2783       11.2783       968.905       980.183    
  10  0.800852     -0.222079      -2.49796       2.49796       984.896       987.394    
  11  0.755695     -0.280117      -3.15077       3.15077       983.579       986.729    
  12  0.595174     -0.518902      -5.83664       5.83664       978.958       984.794    
  13  0.316509      -1.15040      -12.9398       12.9398       988.093       1001.03    
  14  0.847901     -0.164991      -1.85583       1.85583       987.251       989.107    
  15  0.116195      -2.15248      -24.2113       24.2113       944.199       968.410    
  16  0.121963      -2.10403      -23.6663       23.6663       971.915       995.581    
  17  0.298485      -1.20903      -13.5993       13.5993       973.408       987.008    
  18  0.698751     -0.358461      -4.03199       4.03199       985.710       989.742    
  19  0.248186      -1.39358      -15.6750       15.6750       993.949       1009.62    
  20  0.717251     -0.332329      -3.73806       3.73806       995.346       999.084    
  21  0.591856     -0.524491      -5.89951       5.89951       996.403       1002.30    
  22  0.780177E-01  -2.55082      -28.6918       28.6918       983.679       1012.37    
  23  0.314281      -1.15747      -13.0193       13.0193       986.238       999.257    
  24  0.565423E-01  -2.87277      -32.3131       32.3131       988.084       1020.40    
  25  0.964829     -0.358044E-01 -0.402730      0.402730       1000.12       1000.52    
  26  0.900157     -0.105186      -1.18314       1.18314       1003.49       1004.67    
  27  0.656998     -0.420074      -4.72501       4.72501       1000.42       1005.15    
  28  0.888436E-01  -2.42088      -27.2302       27.2302       1004.20       1031.43    
  29  0.853838     -0.158014      -1.77735       1.77735       998.357       1000.13    
  30  0.704842     -0.349782      -3.93437       3.93437       980.018       983.952    
  31  0.890111     -0.116409      -1.30937       1.30937       1002.55       1003.86    
  32  0.424397     -0.857087      -9.64056       9.64056       996.274       1005.91    
  33  0.959371     -0.414778E-01 -0.466545      0.466545       986.168       986.635    
  34  0.323832      -1.12753      -12.6825       12.6825       1019.02       1031.70    
  35  0.943913     -0.577217E-01 -0.649257      0.649257       1015.09       1015.74    
  36  0.119048      -2.12823      -23.9384       23.9384       1020.60       1044.54    
  37  0.427842E-01  -3.15159      -35.4492       35.4492       1024.69       1060.14    
  38  0.433544     -0.835761      -9.40069       9.40069       1025.47       1034.87    
  39  0.773173     -0.257253      -2.89360       2.89360       1034.31       1037.21    
  40  0.455657     -0.786014      -8.84114       8.84114       1028.12       1036.96    
  41  0.362132      -1.01575      -11.4252       11.4252       1012.80       1024.23    
  42  0.775394     -0.254384      -2.86132       2.86132       1024.24       1027.10    
  43  0.889906     -0.116639      -1.31197       1.31197       1005.98       1007.29    
  44  0.415923     -0.877255      -9.86742       9.86742       1017.12       1026.99    
  45  0.374532E-01  -3.28466      -36.9461       36.9461       1034.59       1071.53    
  46  0.904805     -0.100036      -1.12521       1.12521       1039.96       1041.09    
  47  0.130905      -2.03328      -22.8705       22.8705       1036.72       1059.59    
  48  0.951733     -0.494710E-01 -0.556452      0.556452       1031.63       1032.18    
  49  0.720673     -0.327570      -3.68452       3.68452       1046.80       1050.48    
  50  0.425150     -0.855314      -9.62062       9.62062       1051.72       1061.34    
  51  0.464059     -0.767744      -8.63563       8.63563       1054.29       1062.93    
  52  0.822031     -0.195978      -2.20437       2.20437       1056.08       1058.29    
  53  0.325542      -1.12226      -12.6233       12.6233       1084.23       1096.85    
loop,thermsimp(1:2)       81   12.0054       2.19402    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321       1064.72          0.85          1.15         21.91          0.00          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    1064.7        1.194     -4.029      3.556     -102.6      1.077    
                       1.085      1.112     -99.70      3.891     0.6543    

                       2.010     -2.060      1.540      7000.      7000.    

                      -1.933      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.310     -5.778     -9.955      7.052    

                      -13.90     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1040E-01 0.2955     0.6801E-03 0.1934    

                     -0.2486    -0.1346     0.1820     0.1517     0.1343    



                     -0.5870    -0.5774      0.000     0.8785E-01-0.6943E-01

                     -0.1482E-01 0.1864    -0.7116    -0.1326     0.3131    

                      0.8495E-01 0.6915E-01-0.6197     -1.338      7000.    



                      -1.370     -1.194     -2.142     -1.982    -0.3807    

                     -0.3252      9.238      8.761    -0.1672E+05 -6.000    

                     -0.2907     -2.350      9.360      8.865    -0.1969E+05



                      -6.000     0.6094    -0.3354      8.858      9.102    

                     -0.1944E+05 -6.000    -0.6652    -0.5909      9.053    

                       8.836    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1064.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       81
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       82
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      320     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -6.59344       6.59344       943.606       950.199    
   2  0.926592     -0.762421E-01 -0.857575      0.857575       934.437       935.295    
   3  0.766762     -0.265579      -2.98725       2.98725       946.467       949.454    
   4  0.627980     -0.465247      -5.23313       5.23313       950.272       955.505    
   5  0.647527     -0.434594      -4.88834       4.88834       944.199       949.087    
   6  0.639464     -0.447125      -5.02929       5.02929       975.399       980.428    
   7  0.168437      -1.78119      -20.0350       20.0350       968.905       988.940    
   8  0.725133     -0.321400      -3.61513       3.61513       962.533       966.148    
   9  0.620073     -0.477917      -5.37564       5.37564       943.917       949.293    
  10  0.837394     -0.177461      -1.99609       1.99609       980.018       982.014    
  11  0.763326     -0.270070      -3.03776       3.03776       978.958       981.995    
  12  0.216703      -1.52923      -17.2009       17.2009       983.320       1000.52    
  13  0.846730     -0.166373      -1.87137       1.87137       986.168       988.040    
  14  0.712127     -0.339499      -3.81871       3.81871       983.579       987.397    
  15  0.731222     -0.313039      -3.52108       3.52108       973.408       976.930    
  16  0.131329      -2.03005      -22.8342       22.8342       984.896       1007.73    
  17  0.946517     -0.549662E-01 -0.618264      0.618264       987.251       987.869    
  18  0.303743      -1.19157      -13.4029       13.4029       985.710       999.113    
  19  0.452199     -0.793633      -8.92683       8.92683       971.915       980.842    
  20  0.176302      -1.73556      -19.5216       19.5216       995.346       1014.87    
  21  0.569871     -0.562345      -6.32529       6.32529       986.238       992.563    
  22  0.267873      -1.31724      -14.8164       14.8164       998.357       1013.17    
  23  0.295877      -1.21781      -13.6980       13.6980       1000.12       1013.82    
  24  0.658567     -0.417689      -4.69819       4.69819       988.093       992.791    
  25  0.633120     -0.457096      -5.14144       5.14144       996.403       1001.54    
  26  0.655522     -0.422324      -4.75032       4.75032       1002.55       1007.30    
  27  0.532295     -0.630558      -7.09256       7.09256       1003.49       1010.58    
  28  0.611209     -0.492317      -5.53761       5.53761       1000.42       1005.96    
  29  0.768812E-01  -2.56549      -28.8568       28.8568       996.274       1025.13    
  30  0.845132     -0.168262      -1.89262       1.89262       1005.98       1007.87    
  31  0.133696      -2.01219      -22.6332       22.6332       993.949       1016.58    
  32  0.850522E-01  -2.46449      -27.7207       27.7207       983.679       1011.40    
  33  0.901960     -0.103185      -1.16063       1.16063       1015.09       1016.26    
  34  0.394454E-01  -3.23284      -36.3632       36.3632       988.084       1024.45    
  35  0.152819      -1.87850      -21.1295       21.1295       1012.80       1033.93    
  36  0.951369     -0.498538E-01 -0.560758      0.560758       1017.12       1017.68    
  37  0.909075     -0.953273E-01  -1.07225       1.07225       1024.24       1025.31    
  38  0.552964     -0.592462      -6.66405       6.66405       1004.20       1010.87    
  39  0.904748     -0.100099      -1.12592       1.12592       1019.02       1020.14    
  40  0.434860     -0.832731      -9.36661       9.36661       1031.63       1040.99    
  41  0.807557E-01  -2.51633      -28.3038       28.3038       1025.47       1053.77    
  42  0.245089      -1.40614      -15.8163       15.8163       1028.12       1043.94    
  43  0.566857     -0.567648      -6.38493       6.38493       1034.31       1040.70    
  44  0.154441      -1.86794      -21.0107       21.0107       1039.96       1060.97    
  45  0.961849     -0.388974E-01 -0.437521      0.437521       1020.60       1021.04    
  46  0.267234      -1.31963      -14.8433       14.8433       1046.80       1061.64    
  47  0.170042      -1.77171      -19.9283       19.9283       1056.08       1076.01    
  48  0.796608     -0.227393      -2.55773       2.55773       1036.72       1039.28    
  49  0.474137     -0.746260      -8.39398       8.39398       1024.69       1033.08    
  50  0.164737      -1.80340      -20.2848       20.2848       1051.72       1072.00    
  51  0.728428     -0.316867      -3.56414       3.56414       1054.29       1057.86    
  52  0.259284      -1.34983      -15.1830       15.1830       1034.59       1049.77    
  53  0.932415     -0.699773E-01 -0.787108      0.787108       1064.72       1065.50    
loop,thermsimp(1:2)       82   6.59344      0.857575    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322       1050.59          0.85          1.14         21.88          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1050.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       82
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       83
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      321     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -5.36678       5.36678       934.437       939.804    
   2  0.835522     -0.179699      -2.02126       2.02126       944.199       946.220    
   3  0.626661     -0.467350      -5.25678       5.25678       943.917       949.174    
   4  0.197939      -1.61980      -18.2196       18.2196       946.467       964.686    
   5  0.842637     -0.171219      -1.92588       1.92588       943.606       945.532    
   6  0.873669     -0.135053      -1.51909       1.51909       950.272       951.791    
   7  0.298180E-01  -3.51264      -39.5104       39.5104       962.533       1002.04    
   8  0.548374     -0.600797      -6.75781       6.75781       973.408       980.166    
   9  0.407469E-01  -3.20037      -35.9980       35.9980       975.399       1011.40    
  10  0.210105E-02  -6.16532      -69.3478       69.3478       971.915       1041.26    
  11  0.631577     -0.459536      -5.16889       5.16889       978.958       984.127    
  12  0.944026     -0.576013E-01 -0.647903      0.647903       980.018       980.666    
  13  0.492775     -0.707703      -7.96028       7.96028       983.579       991.539    
  14  0.195107      -1.63421      -18.3817       18.3817       987.251       1005.63    
  15  0.775688     -0.254005      -2.85706       2.85706       986.168       989.025    
  16  0.763907     -0.269310      -3.02921       3.02921       968.905       971.934    
  17  0.797499     -0.226275      -2.54515       2.54515       986.238       988.783    
  18  0.639217     -0.447511      -5.03364       5.03364       988.093       993.127    
  19  0.775225     -0.254602      -2.86378       2.86378       985.710       988.574    
  20  0.680633     -0.384733      -4.32750       4.32750       983.320       987.647    
  21  0.532184     -0.630766      -7.09490       7.09490       996.403       1003.50    
  22  0.843009     -0.170778      -1.92092       1.92092       1000.42       1002.34    
  23  0.943186     -0.584913E-01 -0.657913      0.657913       1002.55       1003.21    
  24  0.601611     -0.508143      -5.71563       5.71563       984.896       990.611    
  25  0.259021      -1.35084      -15.1944       15.1944       1005.98       1021.18    
  26  0.855132     -0.156500      -1.76032       1.76032       1003.49       1005.25    
  27  0.351229      -1.04632      -11.7690       11.7690       1004.20       1015.97    
  28  0.950362     -0.509122E-01 -0.572663      0.572663       983.679       984.252    
  29  0.447301     -0.804524      -9.04934       9.04934       998.357       1007.41    
  30  0.325509      -1.12237      -12.6244       12.6244       1000.12       1012.75    
  31  0.717010     -0.332666      -3.74185       3.74185       995.346       999.087    
  32  0.676718     -0.390500      -4.39237       4.39237       1015.09       1019.49    
  33  0.493623     -0.705983      -7.94094       7.94094       993.949       1001.89    
  34  0.155805E-01  -4.16174      -46.8115       46.8115       1017.12       1063.93    
  35  0.417708     -0.872973      -9.81926       9.81926       1019.02       1028.83    
  36  0.395067     -0.928699      -10.4461       10.4461       1020.60       1031.04    
  37  0.977835     -0.224139E-01 -0.252113      0.252113       988.084       988.336    
  38  0.603414     -0.505151      -5.68197       5.68197       996.274       1001.96    
  39  0.173810      -1.74979      -19.6818       19.6818       1024.24       1043.92    
  40  0.979719     -0.204895E-01 -0.230467      0.230467       1024.69       1024.92    
  41  0.234071      -1.45213      -16.3336       16.3336       1012.80       1029.14    
  42  0.264051      -1.33161      -14.9781       14.9781       1036.72       1051.70    
  43  0.756353     -0.279247      -3.14099       3.14099       1034.31       1037.46    
  44  0.980782     -0.194046E-01 -0.218264      0.218264       1031.63       1031.85    
  45  0.444591E-01  -3.11319      -35.0173       35.0173       1028.12       1063.14    
  46  0.276895      -1.28412      -14.4438       14.4438       1034.59       1049.03    
  47  0.754338     -0.281915      -3.17100       3.17100       1025.47       1028.64    
  48  0.288496      -1.24308      -13.9822       13.9822       1054.29       1068.28    
  49  0.945547     -0.559915E-01 -0.629796      0.629796       1039.96       1040.59    
  50  0.698722     -0.358502      -4.03245       4.03245       1046.80       1050.83    
  51  0.586821     -0.533035      -5.99562       5.99562       1064.72       1070.71    
  52  0.173241      -1.75307      -19.7187       19.7187       1051.72       1071.44    
  53  0.157974      -1.84532      -20.7563       20.7563       1050.59       1071.35    
loop,thermsimp(1:2)       83   5.36678       2.02126    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323       1059.87          0.85          1.14         21.88          0.02          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1059.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       83
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       84
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      322     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -6.24912       6.24912       934.437       940.687    
   2  0.583943E-01  -2.84054      -31.9505       31.9505       943.606       975.556    
   3  0.377108     -0.975224      -10.9694       10.9694       944.199       955.168    
   4  0.117758      -2.13912      -24.0610       24.0610       943.917       967.978    
   5  0.531627     -0.631812      -7.10666       7.10666       950.272       957.378    
   6  0.348101      -1.05526      -11.8696       11.8696       946.467       958.336    
   7  0.713050     -0.338204      -3.80414       3.80414       968.905       972.709    
   8  0.895286     -0.110612      -1.24417       1.24417       973.408       974.653    
   9  0.873863     -0.134831      -1.51659       1.51659       980.018       981.535    
  10  0.225074      -1.49132      -16.7745       16.7745       978.958       995.732    
  11  0.542220     -0.612083      -6.88474       6.88474       983.679       990.564    
  12  0.262707      -1.33672      -15.0355       15.0355       983.320       998.355    
  13  0.864358E-01  -2.44835      -27.5392       27.5392       988.084       1015.62    
  14  0.468331     -0.758581      -8.53256       8.53256       985.710       994.242    
  15  0.896509     -0.109247      -1.22882       1.22882       986.238       987.467    
  16  0.169842E-01  -4.07547      -45.8411       45.8411       986.168       1032.01    
  17  0.980158     -0.200410E-01 -0.225422      0.225422       984.896       985.121    
  18  0.252821      -1.37507      -15.4669       15.4669       983.579       999.046    
  19  0.556823     -0.585507      -6.58582       6.58582       988.093       994.679    
  20  0.520304     -0.653342      -7.34882       7.34882       995.346       1002.69    
  21  0.956705E-01  -2.34685      -26.3975       26.3975       993.949       1020.35    
  22  0.458762     -0.779224      -8.76476       8.76476       996.274       1005.04    
  23  0.684654     -0.378842      -4.26123       4.26123       962.533       966.794    
  24  0.749393     -0.288492      -3.24498       3.24498       1000.42       1003.67    
  25  0.112724      -2.18282      -24.5524       24.5524       1002.55       1027.11    
  26  0.642114     -0.442989      -4.98277       4.98277       996.403       1001.39    
  27  0.881888     -0.125691      -1.41378       1.41378       1003.49       1004.90    
  28  0.933845     -0.684452E-01 -0.769875      0.769875       987.251       988.021    
  29  0.124482      -2.08359      -23.4364       23.4364       998.357       1021.79    
  30  0.189487      -1.66344      -18.7104       18.7104       975.399       994.109    
  31  0.526869     -0.640804      -7.20780       7.20780       1000.12       1007.33    
  32  0.490162     -0.713020      -8.02009       8.02009       1004.20       1012.22    
  33  0.292049      -1.23083      -13.8445       13.8445       1015.09       1028.94    
  34  0.646685     -0.435896      -4.90298       4.90298       1005.98       1010.88    
  35  0.738289     -0.303420      -3.41289       3.41289       1024.69       1028.10    
  36  0.379268     -0.969513      -10.9051       10.9051       1025.47       1036.37    
  37  0.691037     -0.369562      -4.15686       4.15686       1019.02       1023.17    
  38  0.566288     -0.568653      -6.39624       6.39624       1012.80       1019.20    
  39  0.130734      -2.03459      -22.8852       22.8852       1020.60       1043.48    
  40  0.298876      -1.20773      -13.5846       13.5846       1031.63       1045.21    
  41  0.369194     -0.996434      -11.2080       11.2080       1034.31       1045.52    
  42  0.291325      -1.23331      -13.8724       13.8724       1039.96       1053.83    
  43  0.828296     -0.188384      -2.11896       2.11896       971.915       974.034    
  44  0.540492E-01  -2.91786      -32.8203       32.8203       1024.24       1057.06    
  45  0.979889     -0.203162E-01 -0.228518      0.228518       1034.59       1034.82    
  46  0.411533     -0.887866      -9.98677       9.98677       1046.80       1056.78    
  47  0.430635     -0.842495      -9.47644       9.47644       1036.72       1046.20    
  48  0.948338     -0.530447E-01 -0.596650      0.596650       1028.12       1028.72    
  49  0.400713E-02  -5.51968      -62.0857       62.0857       1017.12       1079.21    
  50  0.963092     -0.376065E-01 -0.423000      0.423000       1054.29       1054.72    
  51  0.101802      -2.28472      -25.6987       25.6987       1064.72       1090.42    
  52  0.161305      -1.82446      -20.5216       20.5216       1050.59       1071.11    
  53  0.579295     -0.545944      -6.14081       6.14081       1059.87       1066.01    
loop,thermsimp(1:2)       84   6.24912       31.9505    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324       1089.00          0.85          1.14         21.98          0.00          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    325        974.62          0.84          1.14         21.86          0.01          0.05         23.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    974.62
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       84
neval is:      324
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       85
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      324     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.735528      0.735528       934.437       935.173    
   2  0.765516     -0.267206      -3.00554       3.00554       944.199       947.205    
   3  0.899266     -0.106176      -1.19427       1.19427       950.272       951.466    
   4  0.953341     -0.477822E-01 -0.537457      0.537457       946.467       947.004    
   5  0.642356     -0.442612      -4.97853       4.97853       962.533       967.512    
   6  0.265713      -1.32534      -14.9075       14.9075       943.917       958.825    
   7  0.379937     -0.967749      -10.8853       10.8853       968.905       979.790    
   8  0.449606     -0.799384      -8.99152       8.99152       971.915       980.906    
   9  0.810725     -0.209826      -2.36014       2.36014       973.408       975.769    
  10  0.218977      -1.51879      -17.0834       17.0834       943.606       960.689    
  11  0.456613     -0.783919      -8.81757       8.81757       980.018       988.836    
  12  0.439289E-02  -5.42777      -61.0519       61.0519       984.896       1045.95    
  13  0.710409     -0.341914      -3.84587       3.84587       986.238       990.084    
  14  0.385315     -0.953695      -10.7272       10.7272       987.251       997.978    
  15  0.116701      -2.14814      -24.1625       24.1625       983.679       1007.84    
  16  0.985237     -0.148728E-01 -0.167290      0.167290       975.399       975.566    
  17  0.856588     -0.154798      -1.74117       1.74117       985.710       987.451    
  18  0.155419      -1.86163      -20.9397       20.9397       988.093       1009.03    
  19  0.257525      -1.35664      -15.2596       15.2596       978.958       994.217    
  20  0.548716     -0.600174      -6.75079       6.75079       983.320       990.070    
  21  0.589698     -0.528145      -5.94060       5.94060       983.579       989.519    
  22  0.884364     -0.122887      -1.38223       1.38223       996.403       997.785    
  23  0.871018E-01  -2.44068      -27.4529       27.4529       995.346       1022.80    
  24  0.486795     -0.719912      -8.09762       8.09762       1000.42       1008.52    
  25  0.161417      -1.82376      -20.5138       20.5138       1003.49       1024.00    
  26  0.598774     -0.512871      -5.76880       5.76880       996.274       1002.04    
  27  0.483527     -0.726647      -8.17337       8.17337       1000.12       1008.30    
  28  0.715961     -0.334130      -3.75831       3.75831       1005.98       1009.74    
  29  0.771801     -0.259029      -2.91357       2.91357       1004.20       1007.12    
  30  0.458713     -0.779330      -8.76595       8.76595       988.084       996.850    
  31  0.235181      -1.44740      -16.2805       16.2805       1012.80       1029.08    
  32  0.488220     -0.716988      -8.06473       8.06473       993.949       1002.01    
  33  0.365473      -1.00656      -11.3219       11.3219       998.357       1009.68    
  34  0.191311      -1.65386      -18.6027       18.6027       1019.02       1037.62    
  35  0.484999     -0.723609      -8.13920       8.13920       1002.55       1010.69    
  36  0.799086     -0.224286      -2.52278       2.52278       1024.69       1027.21    
  37  0.811458     -0.208923      -2.34998       2.34998       1028.12       1030.47    
  38  0.829885E-01  -2.48905      -27.9970       27.9970       1015.09       1043.09    
  39  0.731085     -0.313226      -3.52319       3.52319       986.168       989.691    
  40  0.854012     -0.157810      -1.77505       1.77505       1034.59       1036.36    
  41  0.699629     -0.357205      -4.01787       4.01787       1025.47       1029.49    
  42  0.918965     -0.845069E-01 -0.950538      0.950538       1020.60       1021.55    
  43  0.463498     -0.768952      -8.64922       8.64922       1031.63       1040.28    
  44  0.758690E-01  -2.57875      -29.0059       29.0059       1034.31       1063.32    
  45  0.577757     -0.548602      -6.17070       6.17070       1036.72       1042.89    
  46  0.897332     -0.108329      -1.21849       1.21849       1039.96       1041.18    
  47  0.522547     -0.649040      -7.30044       7.30044       1054.29       1061.59    
  48  0.408730E-01  -3.19729      -35.9633       35.9633       1046.80       1082.76    
  49  0.244793      -1.40734      -15.8299       15.8299       1024.24       1040.07    
  50  0.503867     -0.685443      -7.70991       7.70991       1059.87       1067.58    
  51  0.268075      -1.31649      -14.8079       14.8079       1050.59       1065.40    
  52  0.502965     -0.687236      -7.73007       7.73007       1017.12       1024.85    
  53  0.204120      -1.58905      -17.8737       17.8737       974.618       992.492    
loop,thermsimp(1:2)       85  0.735528       3.00554    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326       1032.75          0.85          1.14         21.92          0.00          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1032.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       85
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       86
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      325     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -12.3214       12.3214       934.437       946.759    
   2  0.140144      -1.96508      -22.1034       22.1034       946.467       968.570    
   3  0.520913     -0.652172      -7.33567       7.33567       944.199       951.535    
   4  0.628337     -0.464678      -5.22673       5.22673       950.272       955.498    
   5  0.203324      -1.59296      -17.9177       17.9177       943.917       961.835    
   6  0.481205     -0.731462      -8.22753       8.22753       943.606       951.833    
   7  0.948759     -0.526009E-01 -0.591658      0.591658       962.533       963.125    
   8  0.251825      -1.37902      -15.5113       15.5113       975.399       990.910    
   9  0.363806      -1.01114      -11.3733       11.3733       973.408       984.782    
  10  0.465077     -0.765552      -8.61097       8.61097       968.905       977.516    
  11  0.580920     -0.543143      -6.10930       6.10930       971.915       978.024    
  12  0.957129     -0.438167E-01 -0.492853      0.492853       985.710       986.203    
  13  0.345007      -1.06419      -11.9701       11.9701       980.018       991.988    
  14  0.177852E-01  -4.02939      -45.3228       45.3228       983.579       1028.90    
  15  0.843779     -0.169864      -1.91064       1.91064       986.168       988.079    
  16  0.765452     -0.267288      -3.00647       3.00647       983.320       986.326    
  17  0.453925     -0.789824      -8.88398       8.88398       986.238       995.122    
  18  0.378234     -0.972243      -10.9358       10.9358       974.618       985.554    
  19  0.167312      -1.78790      -20.1104       20.1104       978.958       999.068    
  20  0.240345      -1.42568      -16.0361       16.0361       988.084       1004.12    
  21  0.868226     -0.141303      -1.58939       1.58939       996.403       997.992    
  22  0.907002     -0.976102E-01  -1.09793       1.09793       987.251       988.349    
  23  0.433040     -0.836925      -9.41378       9.41378       993.949       1003.36    
  24  0.291080      -1.23416      -13.8819       13.8819       996.274       1010.16    
  25  0.391091     -0.938815      -10.5598       10.5598       1004.20       1014.76    
  26  0.541803     -0.612853      -6.89341       6.89341       983.679       990.573    
  27  0.494251     -0.704711      -7.92664       7.92664       1000.12       1008.05    
  28  0.617376     -0.482277      -5.42468       5.42468       1000.42       1005.85    
  29  0.919515     -0.839094E-01 -0.943818      0.943818       988.093       989.037    
  30  0.836216     -0.178868      -2.01192       2.01192       998.357       1000.37    
  31  0.436173     -0.829716      -9.33270       9.33270       1005.98       1015.31    
  32  0.175211      -1.74176      -19.5915       19.5915       1002.55       1022.14    
  33  0.304297      -1.18975      -13.3824       13.3824       1020.60       1033.98    
  34  0.996125     -0.388259E-02 -0.436716E-01  0.436716E-01   995.346       995.389    
  35  0.146253      -1.92242      -21.6235       21.6235       1003.49       1025.11    
  36  0.110666      -2.20124      -24.7596       24.7596       1017.12       1041.88    
  37  0.481190E-01  -3.03408      -34.1275       34.1275       1024.69       1058.82    
  38  0.342728      -1.07082      -12.0446       12.0446       1012.80       1024.85    
  39  0.998409E-01  -2.30418      -25.9175       25.9175       1025.47       1051.39    
  40  0.509248     -0.674821      -7.59043       7.59043       1028.12       1035.71    
  41  0.974159     -0.261804E-01 -0.294479      0.294479       1034.59       1034.88    
  42  0.950347     -0.509279E-01 -0.572840      0.572840       1019.02       1019.59    
  43  0.333494      -1.09813      -12.3518       12.3518       1024.24       1036.59    
  44  0.914660     -0.892024E-01  -1.00335       1.00335       1031.63       1032.63    
  45  0.249678      -1.38758      -15.6076       15.6076       1039.96       1055.57    
  46  0.512508     -0.668440      -7.51865       7.51865       1036.72       1044.24    
  47  0.592185     -0.523937      -5.89327       5.89327       1015.09       1020.99    
  48  0.931089     -0.714008E-01 -0.803120      0.803120       984.896       985.699    
  49  0.638700     -0.448321      -5.04274       5.04274       1054.29       1059.34    
  50  0.563786     -0.573081      -6.44605       6.44605       1034.31       1040.76    
  51  0.136824      -1.98906      -22.3731       22.3731       1050.59       1072.96    
  52  0.806361     -0.215224      -2.42085       2.42085       1059.87       1062.29    
  53  0.106433      -2.24024      -25.1983       25.1983       1032.75       1057.95    
loop,thermsimp(1:2)       86   12.3214       22.1034    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327       1061.73          0.85          1.15         21.85          0.00          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1061.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       86
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       87
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      326     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -34.9533       34.9533       934.437       969.391    
   2  0.682805     -0.381545      -4.29164       4.29164       944.199       948.491    
   3  0.699780     -0.356989      -4.01544       4.01544       943.606       947.621    
   4  0.515086     -0.663422      -7.46221       7.46221       950.272       957.734    
   5  0.402461     -0.910157      -10.2375       10.2375       943.917       954.155    
   6  0.652803     -0.426480      -4.79708       4.79708       962.533       967.330    
   7  0.483213     -0.727297      -8.18068       8.18068       946.467       954.647    
   8  0.873684     -0.135037      -1.51890       1.51890       968.905       970.424    
   9  0.142648      -1.94738      -21.9042       21.9042       971.915       993.819    
  10  0.844357     -0.169180      -1.90295       1.90295       973.408       975.311    
  11  0.154187      -1.86959      -21.0292       21.0292       974.618       995.648    
  12  0.437314E-01  -3.12969      -35.2029       35.2029       984.896       1020.10    
  13  0.455393E-02  -5.39176      -60.6469       60.6469       985.710       1046.36    
  14  0.236800      -1.44054      -16.2033       16.2033       983.320       999.523    
  15  0.660181     -0.415241      -4.67066       4.67066       986.168       990.839    
  16  0.652586     -0.426813      -4.80081       4.80081       987.251       992.052    
  17  0.153101      -1.87666      -21.1088       21.1088       988.093       1009.20    
  18  0.753412     -0.283143      -3.18480       3.18480       983.679       986.864    
  19  0.240839      -1.42363      -16.0130       16.0130       975.399       991.412    
  20  0.684622     -0.378888      -4.26176       4.26176       980.018       984.280    
  21  0.243018      -1.41462      -15.9117       15.9117       986.238       1002.15    
  22  0.815539     -0.203906      -2.29355       2.29355       995.346       997.639    
  23  0.589355     -0.528726      -5.94714       5.94714       996.403       1002.35    
  24  0.243009      -1.41466      -15.9122       15.9122       978.958       994.870    
  25  0.821886     -0.196154      -2.20635       2.20635       998.357       1000.56    
  26  0.261401      -1.34170      -15.0915       15.0915       993.949       1009.04    
  27  0.571134     -0.560131      -6.30039       6.30039       988.084       994.385    
  28  0.406429E-01  -3.20293      -36.0268       36.0268       1000.42       1036.45    
  29  0.341463      -1.07451      -12.0862       12.0862       1000.12       1012.21    
  30  0.252643      -1.37578      -15.4748       15.4748       996.274       1011.75    
  31  0.503366     -0.686439      -7.72110       7.72110       1004.20       1011.92    
  32  0.247804      -1.39512      -15.6923       15.6923       1005.98       1021.67    
  33  0.902392     -0.102706      -1.15524       1.15524       1019.02       1020.17    
  34  0.198330E-01  -3.92041      -44.0970       44.0970       1015.09       1059.19    
  35  0.695627     -0.362942      -4.08239       4.08239       1002.55       1006.64    
  36  0.833441     -0.182192      -2.04931       2.04931       1012.80       1014.85    
  37  0.720954     -0.327181      -3.68015       3.68015       1003.49       1007.17    
  38  0.155604      -1.86044      -20.9264       20.9264       983.579       1004.51    
  39  0.496580E-01  -3.00260      -33.7734       33.7734       1031.63       1065.40    
  40  0.804644     -0.217356      -2.44483       2.44483       1020.60       1023.04    
  41  0.329241      -1.11097      -12.4962       12.4962       1034.59       1047.08    
  42  0.889596     -0.116988      -1.31589       1.31589       1028.12       1029.44    
  43  0.857341     -0.153920      -1.73130       1.73130       1024.24       1025.97    
  44  0.238258      -1.43440      -16.1342       16.1342       1034.31       1050.45    
  45  0.998437     -0.156448E-02 -0.175973E-01  0.175973E-01   1017.12       1017.14    
  46  0.280889      -1.26979      -14.2827       14.2827       1036.72       1051.00    
  47  0.518450     -0.656912      -7.38899       7.38899       1025.47       1032.86    
  48  0.348786      -1.05330      -11.8475       11.8475       1039.96       1051.81    
  49  0.250207      -1.38547      -15.5838       15.5838       1032.75       1048.34    
  50  0.442136     -0.816138      -9.17996       9.17996       1024.69       1033.87    
  51  0.881002     -0.126696      -1.42508       1.42508       1054.29       1055.72    
  52  0.903963     -0.100967      -1.13568       1.13568       1059.87       1061.00    
  53  0.227541      -1.48043      -16.6519       16.6519       1061.73       1078.38    
loop,thermsimp(1:2)       87   34.9533       4.29164    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328       1050.59          0.86          1.14         22.07          0.00          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1050.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       87
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       88
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      327     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -8.46700       8.46700       943.606       952.073    
   2  0.531040     -0.632917      -7.11909       7.11909       944.199       951.318    
   3  0.592986E-01  -2.82517      -31.7777       31.7777       943.917       975.695    
   4  0.247694      -1.39556      -15.6974       15.6974       946.467       962.164    
   5  0.131832      -2.02623      -22.7911       22.7911       950.272       973.063    
   6  0.928797E-01  -2.37645      -26.7305       26.7305       962.533       989.263    
   7  0.638590     -0.448492      -5.04467       5.04467       934.437       939.482    
   8  0.220145      -1.51347      -17.0236       17.0236       968.905       985.929    
   9  0.764323     -0.268765      -3.02308       3.02308       973.408       976.432    
  10  0.223429      -1.49866      -16.8570       16.8570       980.018       996.875    
  11  0.705665     -0.348615      -3.92124       3.92124       983.679       987.601    
  12  0.812667     -0.207434      -2.33323       2.33323       986.168       988.501    
  13  0.344167      -1.06663      -11.9975       11.9975       975.399       987.396    
  14  0.691720     -0.368573      -4.14574       4.14574       987.251       991.397    
  15  0.601584     -0.508189      -5.71614       5.71614       971.915       977.631    
  16  0.323598      -1.12825      -12.6907       12.6907       988.084       1000.77    
  17  0.536181     -0.623284      -7.01074       7.01074       978.958       985.968    
  18  0.224445      -1.49412      -16.8060       16.8060       974.618       991.424    
  19  0.967837     -0.326916E-01 -0.367717      0.367717       995.346       995.713    
  20  0.982234     -0.179257E-01 -0.201630      0.201630       983.320       983.521    
  21  0.656459     -0.420894      -4.73425       4.73425       998.357       1003.09    
  22  0.138036      -1.98024      -22.2738       22.2738       986.238       1008.51    
  23  0.698821     -0.358360      -4.03086       4.03086       996.403       1000.43    
  24  0.603237     -0.505446      -5.68529       5.68529       983.579       989.264    
  25  0.253585      -1.37205      -15.4330       15.4330       1002.55       1017.99    
  26  0.404885     -0.904153      -10.1700       10.1700       1003.49       1013.66    
  27  0.802083     -0.220543      -2.48068       2.48068       993.949       996.430    
  28  0.756447     -0.279123      -3.13959       3.13959       988.093       991.233    
  29  0.390929     -0.939231      -10.5645       10.5645       996.274       1006.84    
  30  0.260757      -1.34417      -15.1193       15.1193       1004.20       1019.32    
  31  0.177681      -1.72776      -19.4340       19.4340       1000.12       1019.56    
  32  0.806362     -0.215223      -2.42084       2.42084       1012.80       1015.22    
  33  0.222380      -1.50337      -16.9099       16.9099       1017.12       1034.03    
  34  0.969986     -0.304736E-01 -0.342769      0.342769       984.896       985.238    
  35  0.417166     -0.874272      -9.83386       9.83386       1019.02       1028.85    
  36  0.212672      -1.54800      -17.4120       17.4120       1005.98       1023.39    
  37  0.141187      -1.95767      -22.0200       22.0200       1020.60       1042.62    
  38  0.750343     -0.287224      -3.23072       3.23072       1024.24       1027.47    
  39  0.628172     -0.464941      -5.22969       5.22969       1028.12       1033.35    
  40  0.466629     -0.762221      -8.57351       8.57351       1025.47       1034.04    
  41  0.120425      -2.11672      -23.8090       23.8090       1024.69       1048.50    
  42  0.179567      -1.71721      -19.3153       19.3153       1000.42       1019.74    
  43  0.209268      -1.56414      -17.5935       17.5935       985.710       1003.30    
  44  0.730304E-01  -2.61688      -29.4348       29.4348       1034.59       1064.02    
  45  0.985392     -0.147157E-01 -0.165523      0.165523       1032.75       1032.92    
  46  0.726759E-01  -2.62175      -29.4895       29.4895       1034.31       1063.80    
  47  0.205943      -1.58016      -17.7737       17.7737       1036.72       1054.49    
  48  0.198791      -1.61550      -18.1713       18.1713       1039.96       1058.13    
  49  0.320500      -1.13787      -12.7989       12.7989       1054.29       1067.09    
  50  0.911267     -0.929191E-01  -1.04516       1.04516       1015.09       1016.14    
  51  0.153842      -1.87183      -21.0545       21.0545       1059.87       1080.92    
  52  0.152265      -1.88213      -21.1703       21.1703       1031.63       1052.80    
  53  0.396303     -0.925575      -10.4109       10.4109       1050.59       1061.00    
loop,thermsimp(1:2)       88   8.46700       7.11909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329       1044.38          0.84          1.14         22.12          0.02          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1044.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       88
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       89
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      328     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -11.7966       11.7966       934.437       946.234    
   2  0.650675     -0.429745      -4.83380       4.83380       944.199       949.033    
   3  0.849247     -0.163405      -1.83799       1.83799       943.606       945.444    
   4  0.910703     -0.935381E-01  -1.05212       1.05212       946.467       947.519    
   5  0.188892      -1.66658      -18.7458       18.7458       950.272       969.017    
   6  0.256564      -1.36038      -15.3016       15.3016       943.917       959.219    
   7  0.465488E-01  -3.06725      -34.5007       34.5007       973.408       1007.91    
   8  0.824855     -0.192548      -2.16579       2.16579       971.915       974.080    
   9  0.730565     -0.313937      -3.53118       3.53118       983.320       986.851    
  10  0.888077     -0.118697      -1.33511       1.33511       984.896       986.231    
  11  0.898172     -0.107394      -1.20798       1.20798       968.905       970.113    
  12  0.314974      -1.15527      -12.9945       12.9945       978.958       991.952    
  13  0.247979      -1.39441      -15.6844       15.6844       975.399       991.083    
  14  0.330032E-01  -3.41115      -38.3688       38.3688       983.679       1022.05    
  15  0.570783E-01  -2.86333      -32.2069       32.2069       986.168       1018.38    
  16  0.694187     -0.365014      -4.10569       4.10569       962.533       966.639    
  17  0.314834      -1.15571      -12.9995       12.9995       983.579       996.578    
  18  0.917621     -0.859711E-01 -0.967008      0.967008       988.093       989.060    
  19  0.613858     -0.487991      -5.48895       5.48895       987.251       992.740    
  20  0.744084E-01  -2.59819      -29.2246       29.2246       974.618       1003.84    
  21  0.454198     -0.789221      -8.87721       8.87721       995.346       1004.22    
  22  0.118203E-01  -4.43793      -49.9181       49.9181       993.949       1043.87    
  23  0.746996     -0.291695      -3.28100       3.28100       980.018       983.299    
  24  0.416160     -0.876686      -9.86102       9.86102       996.403       1006.26    
  25  0.339178E-01  -3.38381      -38.0613       38.0613       988.084       1026.15    
  26  0.824080     -0.193487      -2.17635       2.17635       998.357       1000.53    
  27  0.589652     -0.528223      -5.94149       5.94149       985.710       991.651    
  28  0.680293     -0.385231      -4.33310       4.33310       996.274       1000.61    
  29  0.864872E-01  -2.44776      -27.5325       27.5325       986.238       1013.77    
  30  0.672988     -0.396027      -4.45454       4.45454       1003.49       1007.94    
  31  0.797049E-01  -2.52942      -28.4511       28.4511       1012.80       1041.25    
  32  0.831708     -0.184273      -2.07272       2.07272       1015.09       1017.17    
  33  0.280253E-01  -3.57465      -40.2078       40.2078       1002.55       1042.76    
  34  0.131717      -2.02710      -22.8009       22.8009       1004.20       1027.00    
  35  0.343675      -1.06806      -12.0136       12.0136       1000.12       1012.14    
  36  0.280745      -1.27031      -14.2885       14.2885       1000.42       1014.71    
  37  0.322275      -1.13235      -12.7367       12.7367       1005.98       1018.72    
  38  0.769830E-01  -2.56417      -28.8420       28.8420       1024.24       1053.08    
  39  0.851798     -0.160406      -1.80425       1.80425       1019.02       1020.82    
  40  0.864683     -0.145392      -1.63538       1.63538       1032.75       1034.39    
  41  0.157880      -1.84592      -20.7630       20.7630       1028.12       1048.88    
  42  0.371895     -0.989143      -11.1259       11.1259       1017.12       1028.25    
  43  0.861425     -0.149167      -1.67784       1.67784       1025.47       1027.15    
  44  0.778275E-01  -2.55326      -28.7192       28.7192       1020.60       1049.32    
  45  0.450106     -0.798272      -8.97901       8.97901       1024.69       1033.67    
  46  0.188928      -1.66639      -18.7437       18.7437       1031.63       1050.37    
  47  0.225391      -1.48992      -16.7587       16.7587       1036.72       1053.48    
  48  0.814689     -0.204949      -2.30527       2.30527       1039.96       1042.27    
  49  0.556109     -0.586791      -6.60026       6.60026       1050.59       1057.19    
  50  0.860351     -0.150415      -1.69188       1.69188       1034.31       1036.01    
  51  0.124594      -2.08269      -23.4262       23.4262       1034.59       1058.01    
  52  0.924630     -0.783615E-01 -0.881415      0.881415       1054.29       1055.18    
  53  0.463685     -0.768549      -8.64469       8.64469       1044.38       1053.02    
loop,thermsimp(1:2)       89   11.7966       4.83380    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330        974.60          0.85          1.15         21.86          0.00          0.04         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    974.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       89
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       90
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      329     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -22.8094       22.8094       943.606       966.415    
   2  0.314760      -1.15594      -13.0021       13.0021       934.437       947.440    
   3  0.748375     -0.289851      -3.26026       3.26026       946.467       949.727    
   4  0.632472     -0.458119      -5.15295       5.15295       944.199       949.352    
   5  0.677472     -0.389387      -4.37985       4.37985       943.917       948.297    
   6  0.433475     -0.835921      -9.40248       9.40248       962.533       971.936    
   7  0.458976     -0.778758      -8.75951       8.75951       950.272       959.031    
   8  0.411427E-02  -5.49329      -61.7889       61.7889       968.905       1030.69    
   9  0.904989     -0.998322E-01  -1.12292       1.12292       971.915       973.038    
  10  0.480311     -0.733322      -8.24845       8.24845       980.018       988.267    
  11  0.277870      -1.28060      -14.4043       14.4043       984.896       999.300    
  12  0.958372     -0.425196E-01 -0.478263      0.478263       983.320       983.798    
  13  0.321639      -1.13432      -12.7589       12.7589       988.093       1000.85    
  14  0.562333     -0.575660      -6.47506       6.47506       975.399       981.874    
  15  0.665565     -0.407119      -4.57930       4.57930       985.710       990.289    
  16  0.307614      -1.17891      -13.2605       13.2605       978.958       992.218    
  17  0.504790E-01  -2.98620      -33.5889       33.5889       987.251       1020.84    
  18  0.361959      -1.01622      -11.4306       11.4306       983.579       995.009    
  19  0.470787     -0.753350      -8.47373       8.47373       998.357       1006.83    
  20  0.312221      -1.16404      -13.0932       13.0932       996.274       1009.37    
  21  0.156792      -1.85283      -20.8408       20.8408       974.618       995.459    
  22  0.445216     -0.809196      -9.10189       9.10189       995.346       1004.45    
  23  0.999492     -0.508321E-03 -0.571763E-02  0.571763E-02   996.403       996.408    
  24  0.167067      -1.78936      -20.1268       20.1268       973.408       993.535    
  25  0.435083     -0.832219      -9.36085       9.36085       1003.49       1012.85    
  26  0.110403      -2.20362      -24.7864       24.7864       1000.12       1024.91    
  27  0.704194     -0.350701      -3.94471       3.94471       986.238       990.183    
  28  0.767816     -0.264205      -2.97180       2.97180       1000.42       1003.39    
  29  0.231293      -1.46407      -16.4679       16.4679       1015.09       1031.56    
  30  0.965513     -0.350953E-01 -0.394754      0.394754       986.168       986.563    
  31  0.674440     -0.393873      -4.43030       4.43030       1005.98       1010.41    
  32  0.248626      -1.39181      -15.6551       15.6551       1019.02       1034.67    
  33  0.461218     -0.773884      -8.70470       8.70470       983.679       992.384    
  34  0.778910     -0.249859      -2.81043       2.81043       988.084       990.895    
  35  0.665530     -0.407172      -4.57990       4.57990       1004.20       1008.78    
  36  0.383296     -0.958947      -10.7863       10.7863       1025.47       1036.25    
  37  0.492311     -0.708645      -7.97088       7.97088       1017.12       1025.09    
  38  0.631911     -0.459006      -5.16293       5.16293       1024.69       1029.85    
  39  0.150454E-01  -4.19668      -47.2046       47.2046       1032.75       1079.96    
  40  0.958677     -0.422006E-01 -0.474675      0.474675       1034.31       1034.79    
  41  0.411899     -0.886977      -9.97677       9.97677       1012.80       1022.78    
  42  0.466999     -0.761428      -8.56458       8.56458       1039.96       1048.53    
  43  0.622674     -0.473731      -5.32856       5.32856       1002.55       1007.88    
  44  0.497710     -0.697737      -7.84819       7.84819       993.949       1001.80    
  45  0.763352E-01  -2.57262      -28.9370       28.9370       1028.12       1057.06    
  46  0.192360      -1.64839      -18.5411       18.5411       1020.60       1039.14    
  47  0.444368     -0.811101      -9.12331       9.12331       1031.63       1040.75    
  48  0.617268     -0.482452      -5.42665       5.42665       1044.38       1049.80    
  49  0.898554     -0.106968      -1.20318       1.20318       1024.24       1025.45    
  50  0.382850     -0.960111      -10.7994       10.7994       1036.72       1047.52    
  51  0.769319     -0.262250      -2.94980       2.94980       1054.29       1057.24    
  52  0.356805      -1.03057      -11.5919       11.5919       1050.59       1062.18    
  53  0.159449E-01  -4.13862      -46.5514       46.5514       974.601       1021.15    
loop,thermsimp(1:2)       90   22.8094       13.0021    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331       1051.87          0.84          1.15         21.97          0.00          0.05         24.01
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1051.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       90
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       91
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      330     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.933271      0.933271       934.437       935.371    
   2  0.393393     -0.932946      -10.4938       10.4938       943.917       954.411    
   3  0.317218      -1.14817      -12.9146       12.9146       944.199       957.114    
   4  0.324247      -1.12625      -12.6681       12.6681       946.467       959.135    
   5  0.515746E-01  -2.96473      -33.3474       33.3474       950.272       983.619    
   6  0.143224      -1.94335      -21.8589       21.8589       943.606       965.465    
   7  0.512136     -0.669164      -7.52680       7.52680       962.533       970.060    
   8  0.993896     -0.612239E-02 -0.688650E-01  0.688650E-01   971.915       971.984    
   9  0.440900     -0.818937      -9.21145       9.21145       975.399       984.610    
  10  0.861233     -0.149390      -1.68035       1.68035       983.320       985.000    
  11  0.690005     -0.371056      -4.17367       4.17367       986.168       990.342    
  12  0.192792      -1.64614      -18.5159       18.5159       980.018       998.534    
  13  0.975175     -0.251388E-01 -0.282762      0.282762       986.238       986.521    
  14  0.595327E-01  -2.82123      -31.7334       31.7334       985.710       1017.44    
  15  0.142661      -1.94729      -21.9032       21.9032       988.084       1009.99    
  16  0.141610      -1.95468      -21.9863       21.9863       978.958       1000.94    
  17  0.976591     -0.236872E-01 -0.266435      0.266435       983.679       983.946    
  18  0.894748     -0.111213      -1.25094       1.25094       973.408       974.659    
  19  0.747310     -0.291275      -3.27628       3.27628       983.579       986.855    
  20  0.434887     -0.832670      -9.36592       9.36592       974.618       983.984    
  21  0.673581     -0.395146      -4.44463       4.44463       996.403       1000.85    
  22  0.624944     -0.470094      -5.28765       5.28765       984.896       990.183    
  23  0.617967     -0.481321      -5.41393       5.41393       988.093       993.507    
  24  0.659853     -0.415739      -4.67625       4.67625       993.949       998.626    
  25  0.963159E-01  -2.34012      -26.3218       26.3218       1000.42       1026.74    
  26  0.179190      -1.71931      -19.3389       19.3389       995.346       1014.68    
  27  0.251042      -1.38213      -15.5463       15.5463       998.357       1013.90    
  28  0.116711      -2.14806      -24.1615       24.1615       1002.55       1026.71    
  29  0.890376     -0.116112      -1.30603       1.30603       1004.20       1005.51    
  30  0.880065E-02  -4.73293      -53.2363       53.2363       996.274       1049.51    
  31  0.613810     -0.488070      -5.48984       5.48984       1005.98       1011.47    
  32  0.960436E-01  -2.34295      -26.3537       26.3537       1003.49       1029.84    
  33  0.768907E-02  -4.86796      -54.7551       54.7551       987.251       1042.01    
  34  0.316163      -1.15150      -12.9521       12.9521       974.601       987.553    
  35  0.195769      -1.63082      -18.3435       18.3435       1012.80       1031.15    
  36  0.813020     -0.207000      -2.32834       2.32834       1000.12       1002.45    
  37  0.578245     -0.547758      -6.16122       6.16122       1017.12       1023.28    
  38  0.711511     -0.340365      -3.82844       3.82844       1024.24       1028.07    
  39  0.565886     -0.569362      -6.40422       6.40422       1024.69       1031.09    
  40  0.874556     -0.134039      -1.50768       1.50768       968.905       970.413    
  41  0.335685      -1.09158      -12.2782       12.2782       1015.09       1027.37    
  42  0.861776     -0.148759      -1.67326       1.67326       1019.02       1020.69    
  43  0.634500     -0.454918      -5.11695       5.11695       1034.31       1039.43    
  44  0.211879      -1.55174      -17.4541       17.4541       1025.47       1042.92    
  45  0.789454     -0.236414      -2.65920       2.65920       1020.60       1023.26    
  46  0.726316E-01  -2.62235      -29.4964       29.4964       1031.63       1061.12    
  47  0.344022      -1.06705      -12.0022       12.0022       1036.72       1048.72    
  48  0.367544      -1.00091      -11.2583       11.2583       1039.96       1051.22    
  49  0.634223     -0.455355      -5.12186       5.12186       1044.38       1049.50    
  50  0.462643     -0.770799      -8.66999       8.66999       1028.12       1036.79    
  51  0.904061     -0.100859      -1.13446       1.13446       1054.29       1055.43    
  52  0.183754      -1.69416      -19.0560       19.0560       1050.59       1069.65    
  53  0.214369      -1.54005      -17.3226       17.3226       1051.87       1069.19    
loop,thermsimp(1:2)       91  0.933271       10.4938    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332       1048.77          0.85          1.15         21.85          0.01          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1048.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       91
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       92
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      331     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -13.0317       13.0317       934.437       947.469    
   2  0.484866     -0.723883      -8.14227       8.14227       943.917       952.060    
   3  0.743257     -0.296713      -3.33745       3.33745       944.199       947.536    
   4  0.476659     -0.740953      -8.33428       8.33428       946.467       954.801    
   5  0.895662E-01  -2.41278      -27.1391       27.1391       943.606       970.745    
   6  0.100541      -2.29719      -25.8389       25.8389       962.533       988.372    
   7  0.394309     -0.930621      -10.4677       10.4677       968.905       979.373    
   8  0.856201     -0.155250      -1.74626       1.74626       971.915       973.661    
   9  0.903325     -0.101673      -1.14363       1.14363       973.408       974.552    
  10  0.849389     -0.163238      -1.83611       1.83611       950.272       952.108    
  11  0.245876      -1.40293      -15.7802       15.7802       983.679       999.460    
  12  0.535664     -0.624247      -7.02157       7.02157       974.618       981.640    
  13  0.509317     -0.674685      -7.58889       7.58889       975.399       982.987    
  14  0.103141      -2.27166      -25.5518       25.5518       983.320       1008.87    
  15  0.822327     -0.195617      -2.20031       2.20031       986.238       988.438    
  16  0.293454      -1.22603      -13.7905       13.7905       983.579       997.369    
  17  0.610098E-01  -2.79672      -31.4577       31.4577       974.601       1006.06    
  18  0.467864E-01  -3.06216      -34.4434       34.4434       984.896       1019.34    
  19  0.888641     -0.118062      -1.32797       1.32797       986.168       987.496    
  20  0.371769     -0.989482      -11.1298       11.1298       988.093       999.223    
  21  0.770202     -0.261103      -2.93690       2.93690       980.018       982.955    
  22  0.752967E-01  -2.58632      -29.0911       29.0911       993.949       1023.04    
  23  0.787365E-01  -2.54165      -28.5886       28.5886       996.403       1024.99    
  24  0.516026     -0.661597      -7.44169       7.44169       978.958       986.399    
  25  0.133613      -2.01281      -22.6402       22.6402       1000.12       1022.76    
  26  0.705575     -0.348742      -3.92268       3.92268       1004.20       1008.13    
  27  0.747326     -0.291254      -3.27604       3.27604       988.084       991.360    
  28  0.941066E-01  -2.36333      -26.5828       26.5828       1005.98       1032.56    
  29  0.243001      -1.41469      -15.9125       15.9125       998.357       1014.27    
  30  0.186020      -1.68190      -18.9181       18.9181       995.346       1014.26    
  31  0.707073     -0.346621      -3.89882       3.89882       985.710       989.609    
  32  0.820399     -0.197964      -2.22671       2.22671       1019.02       1021.24    
  33  0.169787E-01  -4.07580      -45.8448       45.8448       1020.60       1066.44    
  34  0.196118      -1.62904      -18.3235       18.3235       1017.12       1035.44    
  35  0.910420E-01  -2.39643      -26.9552       26.9552       1002.55       1029.51    
  36  0.101963      -2.28314      -25.6809       25.6809       1000.42       1026.10    
  37  0.816143     -0.203166      -2.28522       2.28522       1015.09       1017.38    
  38  0.921931     -0.812847E-01 -0.914295      0.914295       1024.24       1025.16    
  39  0.867385     -0.142273      -1.60029       1.60029       1003.49       1005.09    
  40  0.534867     -0.625737      -7.03833       7.03833       1024.69       1031.73    
  41  0.354961      -1.03575      -11.6502       11.6502       1012.80       1024.45    
  42  0.707205     -0.346435      -3.89672       3.89672       1028.12       1032.02    
  43  0.341296      -1.07501      -12.0917       12.0917       1034.31       1046.41    
  44  0.615332     -0.485594      -5.46199       5.46199       987.251       992.713    
  45  0.100325      -2.29934      -25.8631       25.8631       1025.47       1051.33    
  46  0.218012      -1.52321      -17.1331       17.1331       1036.72       1053.85    
  47  0.346044      -1.06119      -11.9363       11.9363       1044.38       1056.31    
  48  0.313706      -1.15930      -13.0399       13.0399       996.274       1009.31    
  49  0.884226     -0.123043      -1.38399       1.38399       1039.96       1041.34    
  50  0.562231     -0.575842      -6.47710       6.47710       1054.29       1060.77    
  51  0.208749      -1.56662      -17.6215       17.6215       1031.63       1049.25    
  52  0.553752     -0.591038      -6.64803       6.64803       1051.87       1058.52    
  53  0.389358     -0.943257      -10.6098       10.6098       1048.77       1059.38    
loop,thermsimp(1:2)       92   13.0317       8.14227    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333       1004.30          0.85          1.14         21.94          0.02          0.05         24.00
Just calling func    0   0         24.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1004.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       92
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       93
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      332     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -56.7790       56.7790       934.437       991.216    
   2  0.977343     -0.229176E-01 -0.257779      0.257779       944.199       944.457    
   3  0.515611     -0.662402      -7.45074       7.45074       943.917       951.368    
   4  0.985018     -0.150949E-01 -0.169789      0.169789       950.272       950.441    
   5  0.909744E-01  -2.39718      -26.9636       26.9636       946.467       973.430    
   6  0.163485      -1.81103      -20.3706       20.3706       943.606       963.977    
   7  0.709610     -0.343039      -3.85852       3.85852       971.915       975.773    
   8  0.639309     -0.447368      -5.03202       5.03202       973.408       978.440    
   9  0.500633     -0.691882      -7.78233       7.78233       968.905       976.687    
  10  0.623218     -0.472859      -5.31875       5.31875       974.618       979.937    
  11  0.974620     -0.257075E-01 -0.289159      0.289159       980.018       980.307    
  12  0.940866     -0.609540E-01 -0.685615      0.685615       975.399       976.084    
  13  0.268848      -1.31361      -14.7755       14.7755       978.958       993.733    
  14  0.131404      -2.02948      -22.8277       22.8277       986.168       1009.00    
  15  0.242045      -1.41863      -15.9569       15.9569       962.533       978.490    
  16  0.333489      -1.09815      -12.3520       12.3520       986.238       998.590    
  17  0.540917     -0.614489      -6.91181       6.91181       985.710       992.622    
  18  0.935945     -0.661981E-01 -0.744601      0.744601       988.084       988.829    
  19  0.948265     -0.531218E-01 -0.597517      0.597517       987.251       987.849    
  20  0.306672      -1.18198      -13.2950       13.2950       983.579       996.874    
  21  0.674766E-01  -2.69597      -30.3245       30.3245       988.093       1018.42    
  22  0.304885      -1.18782      -13.3607       13.3607       983.679       997.040    
  23  0.987276     -0.128055E-01 -0.144037      0.144037       1003.49       1003.63    
  24  0.866309     -0.143514      -1.61425       1.61425       974.601       976.215    
  25  0.325072      -1.12371      -12.6395       12.6395       1004.20       1016.84    
  26  0.882651     -0.124826      -1.40405       1.40405       983.320       984.724    
  27  0.608994E-02  -5.10112      -57.3777       57.3777       996.274       1053.65    
  28  0.956776     -0.441859E-01 -0.497005      0.497005       995.346       995.843    
  29  0.680690E-01  -2.68723      -30.2262       30.2262       998.357       1028.58    
  30  0.870194     -0.139039      -1.56392       1.56392       1015.09       1016.66    
  31  0.154954      -1.86463      -20.9734       20.9734       984.896       1005.87    
  32  0.533144     -0.628963      -7.07461       7.07461       1019.02       1026.09    
  33  0.848128     -0.164724      -1.85282       1.85282       1000.12       1001.97    
  34  0.302343E-01  -3.49878      -39.3545       39.3545       993.949       1033.30    
  35  0.670768     -0.399332      -4.49171       4.49171       1012.80       1017.29    
  36  0.575709     -0.552152      -6.21064       6.21064       996.403       1002.61    
  37  0.961243     -0.395278E-01 -0.444612      0.444612       1024.24       1024.69    
  38  0.174287      -1.74705      -19.6510       19.6510       1000.42       1020.07    
  39  0.450902     -0.796506      -8.95915       8.95915       1002.55       1011.51    
  40  0.807155     -0.214240      -2.40978       2.40978       1024.69       1027.10    
  41  0.245094E-01  -3.70870      -41.7157       41.7157       1028.12       1069.84    
  42  0.840819     -0.173379      -1.95017       1.95017       1005.98       1007.93    
  43  0.418157     -0.871899      -9.80717       9.80717       1017.12       1026.93    
  44  0.795491     -0.228796      -2.57351       2.57351       1039.96       1042.53    
  45  0.675445E-01  -2.69497      -30.3132       30.3132       1034.31       1064.63    
  46  0.158617      -1.84126      -20.7107       20.7107       1031.63       1052.34    
  47  0.538475     -0.619015      -6.96271       6.96271       1025.47       1032.43    
  48  0.318292      -1.14479      -12.8766       12.8766       1036.72       1049.60    
  49  0.427160     -0.850596      -9.56756       9.56756       1044.38       1053.94    
  50  0.485422     -0.722737      -8.12938       8.12938       1051.87       1060.00    
  51  0.603579     -0.504879      -5.67891       5.67891       1048.77       1054.45    
  52  0.151674      -1.88602      -21.2141       21.2141       1054.29       1075.51    
  53  0.216599      -1.52971      -17.2063       17.2063       1004.30       1021.51    
loop,thermsimp(1:2)       93   56.7790      0.257779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    334       1033.28          0.86          1.15         21.87          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1033.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       93
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       94
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      333     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -9.87390       9.87390       944.199       954.073    
   2  0.262668E-01  -3.63945      -40.9367       40.9367       950.272       991.208    
   3  0.620248     -0.477636      -5.37248       5.37248       943.917       949.290    
   4  0.249183      -1.38957      -15.6299       15.6299       943.606       959.236    
   5  0.999872     -0.128438E-03 -0.144468E-02  0.144468E-02   946.467       946.468    
   6  0.933252     -0.690802E-01 -0.777018      0.777018       971.915       972.692    
   7  0.857047     -0.154263      -1.73516       1.73516       975.399       977.134    
   8  0.365787      -1.00570      -11.3122       11.3122       974.601       985.913    
   9  0.499682     -0.693784      -7.80373       7.80373       968.905       976.709    
  10  0.761560     -0.272387      -3.06382       3.06382       973.408       976.472    
  11  0.793904E-01  -2.53338      -28.4956       28.4956       962.533       991.029    
  12  0.514449     -0.664659      -7.47612       7.47612       974.618       982.095    
  13  0.678176     -0.388349      -4.36817       4.36817       980.018       984.386    
  14  0.257558      -1.35651      -15.2581       15.2581       983.320       998.578    
  15  0.832067E-01  -2.48643      -27.9675       27.9675       987.251       1015.22    
  16  0.272851      -1.29883      -14.6093       14.6093       988.084       1002.69    
  17  0.255245      -1.36553      -15.3596       15.3596       934.437       949.797    
  18  0.419883     -0.867779      -9.76083       9.76083       985.710       995.471    
  19  0.870346     -0.138865      -1.56196       1.56196       978.958       980.520    
  20  0.814510E-01  -2.50775      -28.2074       28.2074       995.346       1023.55    
  21  0.560000     -0.579819      -6.52184       6.52184       983.579       990.101    
  22  0.860285     -0.150492      -1.69274       1.69274       983.679       985.372    
  23  0.538601     -0.618780      -6.96008       6.96008       986.238       993.198    
  24  0.542321     -0.611898      -6.88266       6.88266       1000.12       1007.00    
  25  0.836575     -0.178440      -2.00710       2.00710       996.403       998.410    
  26  0.705694     -0.348574      -3.92078       3.92078       1003.49       1007.41    
  27  0.301063      -1.20043      -13.5026       13.5026       984.896       998.398    
  28  0.125899      -2.07227      -23.3090       23.3090       1005.98       1029.29    
  29  0.476747     -0.740770      -8.33223       8.33223       986.168       994.500    
  30  0.676103     -0.391410      -4.40260       4.40260       1002.55       1006.96    
  31  0.385349     -0.953606      -10.7262       10.7262       1015.09       1025.82    
  32  0.141470      -1.95567      -21.9975       21.9975       1004.20       1026.20    
  33  0.146971      -1.91752      -21.5684       21.5684       1012.80       1034.37    
  34  0.616396     -0.483866      -5.44255       5.44255       988.093       993.536    
  35  0.962361     -0.383659E-01 -0.431542      0.431542       1000.42       1000.85    
  36  0.618266     -0.480836      -5.40847       5.40847       1004.30       1009.71    
  37  0.369072     -0.996763      -11.2116       11.2116       1024.24       1035.45    
  38  0.312675      -1.16259      -13.0769       13.0769       1019.02       1032.09    
  39  0.367326      -1.00150      -11.2650       11.2650       1017.12       1028.39    
  40  0.184422      -1.69053      -19.0152       19.0152       1024.69       1043.70    
  41  0.113088      -2.17959      -24.5162       24.5162       998.357       1022.87    
  42  0.333487      -1.09815      -12.3521       12.3521       1025.47       1037.82    
  43  0.407562     -0.897562      -10.0958       10.0958       993.949       1004.05    
  44  0.443434     -0.813206      -9.14699       9.14699       1039.96       1049.11    
  45  0.265046      -1.32785      -14.9358       14.9358       1036.72       1051.65    
  46  0.444603     -0.810573      -9.11737       9.11737       1031.63       1040.74    
  47  0.689395E-01  -2.67453      -30.0832       30.0832       996.274       1026.36    
  48  0.862417     -0.148017      -1.66490       1.66490       1044.38       1046.04    
  49  0.541063     -0.614219      -6.90877       6.90877       1048.77       1055.68    
  50  0.885208     -0.121933      -1.37151       1.37151       1051.87       1053.24    
  51  0.808718     -0.212305      -2.38802       2.38802       1034.31       1036.70    
  52  0.238877E-01  -3.73439      -42.0046       42.0046       1028.12       1070.13    
  53  0.428951     -0.846414      -9.52051       9.52051       1033.28       1042.80    
loop,thermsimp(1:2)       94   9.87390       40.9367    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335        995.41          0.85          1.14         21.81          0.07          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    995.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       94
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       95
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      334     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -13.8123       13.8123       946.467       960.279    
   2  0.225242      -1.49058      -16.7661       16.7661       943.917       960.683    
   3  0.946430E-01  -2.35764      -26.5189       26.5189       934.437       960.956    
   4  0.371694     -0.989684      -11.1320       11.1320       944.199       955.331    
   5  0.933291     -0.690381E-01 -0.776545      0.776545       943.606       944.383    
   6  0.926571     -0.762651E-01 -0.857834      0.857834       971.915       972.773    
   7  0.138048      -1.98015      -22.2729       22.2729       973.408       995.681    
   8  0.113008E-01  -4.48288      -50.4238       50.4238       968.905       1019.33    
   9  0.405736     -0.902053      -10.1463       10.1463       975.399       985.545    
  10  0.390885     -0.939341      -10.5658       10.5658       978.958       989.524    
  11  0.873008     -0.135810      -1.52760       1.52760       974.618       976.146    
  12  0.945037     -0.565316E-01 -0.635870      0.635870       980.018       980.654    
  13  0.642194E-01  -2.74545      -30.8810       30.8810       983.679       1014.56    
  14  0.322052E-01  -3.43563      -38.6441       38.6441       974.601       1013.25    
  15  0.521559     -0.650933      -7.32173       7.32173       983.579       990.900    
  16  0.271788      -1.30273      -14.6532       14.6532       962.533       977.186    
  17  0.153503      -1.87403      -21.0793       21.0793       950.272       971.351    
  18  0.219303      -1.51730      -17.0667       17.0667       986.238       1003.30    
  19  0.476616     -0.741044      -8.33531       8.33531       988.093       996.429    
  20  0.510024     -0.673297      -7.57328       7.57328       986.168       993.741    
  21  0.393388     -0.932959      -10.4940       10.4940       985.710       996.204    
  22  0.947927     -0.534776E-01 -0.601520      0.601520       984.896       985.497    
  23  0.472009     -0.750758      -8.44457       8.44457       996.403       1004.85    
  24  0.678717     -0.387551      -4.35919       4.35919       983.320       987.679    
  25  0.617620     -0.481882      -5.42024       5.42024       1000.42       1005.84    
  26  0.138594E-01  -4.27879      -48.1281       48.1281       988.084       1036.21    
  27  0.588445     -0.530273      -5.96454       5.96454       993.949       999.914    
  28  0.950805     -0.504465E-01 -0.567425      0.567425       1002.55       1003.12    
  29  0.444108     -0.811687      -9.12990       9.12990       1000.12       1009.25    
  30  0.299195      -1.20666      -13.5726       13.5726       1003.49       1017.06    
  31  0.808517E-01  -2.51514      -28.2904       28.2904       1004.30       1032.59    
  32  0.493903     -0.705415      -7.93455       7.93455       987.251       995.186    
  33  0.973584     -0.267710E-01 -0.301121      0.301121       998.357       998.658    
  34  0.219889      -1.51463      -17.0367       17.0367       995.346       1012.38    
  35  0.872114     -0.136835      -1.53913       1.53913       1015.09       1016.63    
  36  0.413991     -0.881912      -9.91980       9.91980       1004.20       1014.12    
  37  0.155656      -1.86011      -20.9226       20.9226       996.274       1017.20    
  38  0.744603     -0.294905      -3.31710       3.31710       1017.12       1020.44    
  39  0.627736     -0.465635      -5.23749       5.23749       1005.98       1011.22    
  40  0.137880      -1.98137      -22.2866       22.2866       1019.02       1041.30    
  41  0.270817      -1.30631      -14.6935       14.6935       1012.80       1027.50    
  42  0.271872      -1.30243      -14.6498       14.6498       1024.24       1038.89    
  43  0.988104     -0.119670E-01 -0.134605      0.134605       1034.31       1034.45    
  44  0.837729E-01  -2.47965      -27.8912       27.8912       1025.47       1053.36    
  45  0.731806     -0.312240      -3.51210       3.51210       1031.63       1035.14    
  46  0.520356     -0.653242      -7.34770       7.34770       1033.28       1040.63    
  47  0.158934      -1.83927      -20.6882       20.6882       1024.69       1045.38    
  48  0.724534     -0.322226      -3.62442       3.62442       1044.38       1048.00    
  49  0.895315     -0.110580      -1.24381       1.24381       1039.96       1041.20    
  50  0.850194     -0.162291      -1.82546       1.82546       1036.72       1038.54    
  51  0.428755     -0.846869      -9.52563       9.52563       1051.87       1061.40    
  52  0.523907     -0.646440      -7.27120       7.27120       1048.77       1056.04    
  53  0.358551      -1.02568      -11.5370       11.5370       995.410       1006.95    
loop,thermsimp(1:2)       95   13.8123       16.7661    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336       1030.57          0.84          1.14         21.91          0.00          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1030.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       95
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   27.7545    

hmean,hstd :    994.625       27.7545    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    994.625       27.7545    
h(1),h(best1),h(np1) :    943.606       934.437       1030.57    
htherm(1),htherm(best1),htherm(np1) :    944.383       960.956       1061.40    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        1
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      335     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -18.3596       18.3596       943.606       961.966    
   2  0.313379      -1.16034      -13.0516       13.0516       944.199       957.251    
   3  0.769177     -0.262434      -2.95187       2.95187       946.467       949.418    
   4  0.884560E-01  -2.42525      -27.2794       27.2794       943.917       971.197    
   5  0.890596     -0.115865      -1.30326       1.30326       934.437       935.741    
   6  0.657268     -0.419664      -4.72040       4.72040       950.272       954.992    
   7  0.960898     -0.398874E-01 -0.448656      0.448656       971.915       972.363    
   8  0.613422E-01  -2.79129      -31.3966       31.3966       974.618       1006.02    
   9  0.264483E-01  -3.63256      -40.8593       40.8593       962.533       1003.39    
  10  0.304822      -1.18803      -13.3630       13.3630       980.018       993.381    
  11  0.977907     -0.223409E-01 -0.251291      0.251291       984.896       985.147    
  12  0.746737     -0.292042      -3.28491       3.28491       975.399       978.683    
  13  0.450918E-01  -3.09905      -34.8583       34.8583       983.320       1018.18    
  14  0.625433     -0.469311      -5.27884       5.27884       978.958       984.237    
  15  0.990029     -0.100208E-01 -0.112714      0.112714       983.579       983.691    
  16  0.985060     -0.150527E-01 -0.169314      0.169314       986.168       986.337    
  17  0.691362     -0.369092      -4.15157       4.15157       987.251       991.403    
  18  0.864323E-02  -4.75098      -53.4393       53.4393       973.408       1026.85    
  19  0.908027E-01  -2.39907      -26.9848       26.9848       985.710       1012.69    
  20  0.500093     -0.692962      -7.79447       7.79447       988.093       995.888    
  21  0.806913     -0.214539      -2.41315       2.41315       998.357       1000.77    
  22  0.317749      -1.14649      -12.8958       12.8958       993.949       1006.85    
  23  0.753050     -0.283623      -3.19021       3.19021       1002.55       1005.74    
  24  0.850048     -0.162463      -1.82739       1.82739       986.238       988.065    
  25  0.346718      -1.05924      -11.9144       11.9144       996.403       1008.32    
  26  0.731558     -0.312579      -3.51590       3.51590       1000.42       1003.94    
  27  0.226645      -1.48437      -16.6963       16.6963       995.410       1012.11    
  28  0.887805     -0.119003      -1.33855       1.33855       1000.12       1001.46    
  29  0.277731      -1.28110      -14.4099       14.4099       1005.98       1020.39    
  30  0.914814     -0.890349E-01  -1.00147       1.00147       995.346       996.347    
  31  0.298911      -1.20761      -13.5833       13.5833       974.601       988.184    
  32  0.469757     -0.755540      -8.49836       8.49836       1004.20       1012.70    
  33  0.217087      -1.52746      -17.1809       17.1809       983.679       1000.86    
  34  0.143996      -1.93797      -21.7984       21.7984       1015.09       1036.89    
  35  0.873815     -0.134887      -1.51721       1.51721       1003.49       1005.00    
  36  0.102289      -2.27995      -25.6450       25.6450       996.274       1021.92    
  37  0.583483     -0.538740      -6.05978       6.05978       968.905       974.965    
  38  0.308185      -1.17705      -13.2396       13.2396       1017.12       1030.36    
  39  0.129509      -2.04400      -22.9911       22.9911       1012.80       1035.79    
  40  0.858329     -0.152767      -1.71834       1.71834       1004.30       1006.02    
  41  0.247121      -1.39788      -15.7234       15.7234       1034.31       1050.04    
  42  0.672462     -0.396810      -4.46334       4.46334       1031.63       1036.09    
  43  0.978226     -0.220145E-01 -0.247620      0.247620       988.084       988.332    
  44  0.571205     -0.560006      -6.29899       6.29899       1036.72       1043.02    
  45  0.390724E-01  -3.24234      -36.4700       36.4700       1024.24       1060.71    
  46  0.773307     -0.257080      -2.89165       2.89165       1033.28       1036.17    
  47  0.860034     -0.150783      -1.69602       1.69602       1039.96       1041.66    
  48  0.521048     -0.651913      -7.33275       7.33275       1019.02       1026.35    
  49  0.577715     -0.548675      -6.17153       6.17153       1024.69       1030.86    
  50  0.449025     -0.800676      -9.00605       9.00605       1044.38       1053.38    
  51  0.879701     -0.128173      -1.44170       1.44170       1025.47       1026.91    
  52  0.553161     -0.592107      -6.66005       6.66005       1048.77       1055.43    
  53  0.501250E-01  -2.99324      -33.6681       33.6681       1030.57       1064.24    
loop,thermsimp(1:2)        1   18.3596       13.0516    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337       1051.87          0.85          1.15         21.84          0.00          0.05         23.89
Just calling func    0   0         23.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1051.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        1
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        2
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      336     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -16.3590       16.3590       934.437       950.796    
   2  0.293881      -1.22458      -13.7742       13.7742       946.467       960.241    
   3  0.833435     -0.182199      -2.04939       2.04939       950.272       952.321    
   4  0.931284     -0.711905E-01 -0.800755      0.800755       944.199       945.000    
   5  0.965536     -0.350722E-01 -0.394495      0.394495       943.606       944.000    
   6  0.534034     -0.627296      -7.05586       7.05586       943.917       950.973    
   7  0.975689     -0.246118E-01 -0.276835      0.276835       971.915       972.192    
   8  0.958131     -0.427704E-01 -0.481085      0.481085       968.905       969.386    
   9  0.487835     -0.717779      -8.07362       8.07362       975.399       983.472    
  10  0.941751     -0.600144E-01 -0.675045      0.675045       983.579       984.254    
  11  0.764698     -0.268274      -3.01756       3.01756       978.958       981.975    
  12  0.282403      -1.26442      -14.2223       14.2223       984.896       999.118    
  13  0.694349     -0.364781      -4.10308       4.10308       986.168       990.271    
  14  0.257622      -1.35626      -15.2553       15.2553       986.238       1001.49    
  15  0.401572     -0.912369      -10.2624       10.2624       974.601       984.863    
  16  0.828654     -0.187952      -2.11410       2.11410       988.084       990.198    
  17  0.113844      -2.17292      -24.4412       24.4412       987.251       1011.69    
  18  0.383967     -0.957199      -10.7666       10.7666       980.018       990.785    
  19  0.767294     -0.264886      -2.97945       2.97945       988.093       991.073    
  20  0.230085      -1.46930      -16.5268       16.5268       995.346       1011.87    
  21  0.248551      -1.39211      -15.6585       15.6585       998.357       1014.02    
  22  0.739043     -0.302399      -3.40140       3.40140       983.679       987.081    
  23  0.427702     -0.849328      -9.55329       9.55329       1000.12       1009.68    
  24  0.217549      -1.52533      -17.1570       17.1570       962.533       979.690    
  25  0.126759      -2.06546      -23.2325       23.2325       1000.42       1023.65    
  26  0.278624      -1.27789      -14.3738       14.3738       1003.49       1017.86    
  27  0.736668     -0.305618      -3.43761       3.43761       1002.55       1005.99    
  28  0.183809      -1.69386      -19.0526       19.0526       974.618       993.671    
  29  0.915242     -0.885666E-01 -0.996202      0.996202       1004.30       1005.30    
  30  0.864610     -0.145477      -1.63633       1.63633       993.949       995.586    
  31  0.996457     -0.354911E-02 -0.399206E-01  0.399206E-01   996.403       996.443    
  32  0.937047     -0.650222E-01 -0.731374      0.731374       995.410       996.141    
  33  0.664908     -0.408106      -4.59040       4.59040       985.710       990.300    
  34  0.409422     -0.893009      -10.0446       10.0446       1004.20       1014.25    
  35  0.293825E-01  -3.52736      -39.6759       39.6759       983.320       1023.00    
  36  0.528099     -0.638471      -7.18157       7.18157       1005.98       1013.16    
  37  0.582244E-01  -2.84345      -31.9833       31.9833       996.274       1028.26    
  38  0.394879     -0.929175      -10.4514       10.4514       1019.02       1029.47    
  39  0.619316     -0.479139      -5.38939       5.38939       973.408       978.798    
  40  0.760056     -0.274363      -3.08605       3.08605       1025.47       1028.55    
  41  0.322606      -1.13132      -12.7252       12.7252       1017.12       1029.85    
  42  0.806034     -0.215629      -2.42541       2.42541       1024.69       1027.11    
  43  0.158197      -1.84391      -20.7404       20.7404       1012.80       1033.54    
  44  0.964399     -0.362497E-01 -0.407739      0.407739       1031.63       1032.03    
  45  0.891984     -0.114307      -1.28573       1.28573       1033.28       1034.56    
  46  0.896576E-01  -2.41176      -27.1276       27.1276       1015.09       1042.22    
  47  0.976522     -0.237576E-01 -0.267226      0.267226       1039.96       1040.23    
  48  0.145640      -1.92662      -21.6707       21.6707       1036.72       1058.39    
  49  0.580689E-01  -2.84612      -32.0134       32.0134       1034.31       1066.33    
  50  0.154224      -1.86935      -21.0266       21.0266       1044.38       1065.40    
  51  0.623776     -0.471964      -5.30868       5.30868       1048.77       1054.08    
  52  0.949887     -0.514119E-01 -0.578284      0.578284       1024.24       1024.82    
  53  0.681810     -0.383005      -4.30806       4.30806       1051.87       1056.18    
loop,thermsimp(1:2)        2   16.3590       13.7742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338       1010.18          0.84          1.13         21.84          0.15          0.05         24.02
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1010.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        2
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        3
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      337     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -10.2238       10.2238       943.606       953.830    
   2  0.995767     -0.424237E-02 -0.477185E-01  0.477185E-01   944.199       944.247    
   3  0.232708      -1.45797      -16.3993       16.3993       934.437       950.837    
   4  0.844104     -0.169480      -1.90632       1.90632       943.917       945.824    
   5  0.835080     -0.180228      -2.02721       2.02721       950.272       952.299    
   6  0.492927     -0.707395      -7.95682       7.95682       946.467       954.423    
   7  0.669838     -0.400719      -4.50731       4.50731       968.905       973.412    
   8  0.161727      -1.82184      -20.4922       20.4922       971.915       992.407    
   9  0.712877     -0.338447      -3.80687       3.80687       973.408       977.215    
  10  0.187101      -1.67610      -18.8529       18.8529       962.533       981.386    
  11  0.152475      -1.88075      -21.1548       21.1548       978.958       1000.11    
  12  0.299805      -1.20462      -13.5497       13.5497       975.399       988.948    
  13  0.388928     -0.944360      -10.6222       10.6222       983.579       994.201    
  14  0.396030     -0.926264      -10.4187       10.4187       974.601       985.020    
  15  0.795332     -0.228996      -2.57576       2.57576       983.679       986.255    
  16  0.209301      -1.56398      -17.5918       17.5918       988.084       1005.68    
  17  0.292717      -1.22855      -13.8188       13.8188       986.168       999.987    
  18  0.128603E-01  -4.35361      -48.9696       48.9696       985.710       1034.68    
  19  0.386579E-01  -3.25301      -36.5900       36.5900       980.018       1016.61    
  20  0.284417      -1.25731      -14.1423       14.1423       988.093       1002.24    
  21  0.962037     -0.387027E-01 -0.435330      0.435330       974.618       975.054    
  22  0.340824      -1.07639      -12.1073       12.1073       993.949       1006.06    
  23  0.463892     -0.768103      -8.63967       8.63967       995.410       1004.05    
  24  0.772349     -0.258319      -2.90559       2.90559       996.403       999.308    
  25  0.580884     -0.543204      -6.10999       6.10999       984.896       991.006    
  26  0.519264     -0.655343      -7.37134       7.37134       986.238       993.609    
  27  0.336321      -1.08969      -12.2569       12.2569       1004.30       1016.56    
  28  0.975360     -0.249491E-01 -0.280628      0.280628       1002.55       1002.83    
  29  0.768530     -0.263276      -2.96134       2.96134       1000.12       1003.08    
  30  0.536540     -0.622614      -7.00320       7.00320       987.251       994.254    
  31  0.922732     -0.804161E-01 -0.904525      0.904525       995.346       996.250    
  32  0.603353     -0.505252      -5.68311       5.68311       1005.98       1011.66    
  33  0.927279E-01  -2.37809      -26.7489       26.7489       998.357       1025.11    
  34  0.180890      -1.70987      -19.2327       19.2327       1004.20       1023.44    
  35  0.933825E-01  -2.37105      -26.6697       26.6697       1003.49       1030.15    
  36  0.343444      -1.06873      -12.0211       12.0211       983.320       995.341    
  37  0.102193      -2.28089      -25.6556       25.6556       1000.42       1026.08    
  38  0.397576     -0.922370      -10.3749       10.3749       1024.24       1034.62    
  39  0.455007     -0.787443      -8.85721       8.85721       1024.69       1033.55    
  40  0.559910     -0.579979      -6.52364       6.52364       996.274       1002.80    
  41  0.901058     -0.104186      -1.17189       1.17189       1025.47       1026.64    
  42  0.849435     -0.163184      -1.83550       1.83550       1019.02       1020.85    
  43  0.231812      -1.46183      -16.4427       16.4427       1017.12       1033.56    
  44  0.119620      -2.12344      -23.8846       23.8846       1031.63       1055.51    
  45  0.885994     -0.121045      -1.36152       1.36152       1012.80       1014.16    
  46  0.166933      -1.79016      -20.1359       20.1359       1033.28       1053.41    
  47  0.284605      -1.25665      -14.1349       14.1349       1039.96       1054.10    
  48  0.392630     -0.934887      -10.5157       10.5157       1015.09       1025.61    
  49  0.275341      -1.28974      -14.5071       14.5071       1048.77       1063.28    
  50  0.808723     -0.212299      -2.38795       2.38795       1051.87       1054.26    
  51  0.544552     -0.607792      -6.83648       6.83648       1036.72       1043.56    
  52  0.729547     -0.315331      -3.54686       3.54686       1044.38       1047.92    
  53  0.986801     -0.132865E-01 -0.149447      0.149447       1010.18       1010.33    
loop,thermsimp(1:2)        3   10.2238      0.477185E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339       1043.34          0.86          1.14         22.01          0.00          0.05         24.06
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1043.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        3
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        4
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      338     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -11.9796       11.9796       944.199       956.179    
   2  0.337825      -1.08523      -12.2067       12.2067       943.917       956.124    
   3  0.129257      -2.04595      -23.0130       23.0130       934.437       957.450    
   4  0.218013      -1.52320      -17.1331       17.1331       950.272       967.405    
   5  0.764988     -0.267896      -3.01330       3.01330       943.606       946.619    
   6  0.134235      -2.00816      -22.5879       22.5879       946.467       969.054    
   7  0.921891     -0.813288E-01 -0.914791      0.914791       968.905       969.820    
   8  0.879140E-01  -2.43140      -27.3485       27.3485       974.618       1001.97    
   9  0.853506     -0.158403      -1.78172       1.78172       973.408       975.190    
  10  0.781888     -0.246043      -2.76751       2.76751       962.533       965.301    
  11  0.572060     -0.558512      -6.28218       6.28218       974.601       980.883    
  12  0.370929     -0.991745      -11.1552       11.1552       983.679       994.835    
  13  0.659208     -0.416716      -4.68725       4.68725       975.399       980.086    
  14  0.192080      -1.64984      -18.5575       18.5575       984.896       1003.45    
  15  0.834249     -0.181224      -2.03842       2.03842       971.915       973.953    
  16  0.275735      -1.28831      -14.4910       14.4910       986.238       1000.73    
  17  0.899896     -0.105476      -1.18640       1.18640       983.579       984.765    
  18  0.263842      -1.33241      -14.9870       14.9870       987.251       1002.24    
  19  0.542051     -0.612396      -6.88827       6.88827       983.320       990.208    
  20  0.883103     -0.124314      -1.39829       1.39829       995.346       996.744    
  21  0.603547     -0.504931      -5.67950       5.67950       996.403       1002.08    
  22  0.461006     -0.774344      -8.70987       8.70987       986.168       994.878    
  23  0.640920     -0.444850      -5.00370       5.00370       978.958       983.961    
  24  0.787319     -0.239122      -2.68966       2.68966       988.093       990.783    
  25  0.258775E-01  -3.65438      -41.1047       41.1047       996.274       1037.38    
  26  0.838926     -0.175633      -1.97553       1.97553       1002.55       1004.53    
  27  0.184807      -1.68845      -18.9917       18.9917       1000.12       1019.11    
  28  0.642750     -0.441999      -4.97163       4.97163       995.410       1000.38    
  29  0.962815     -0.378938E-01 -0.426231      0.426231       988.084       988.510    
  30  0.866393     -0.143417      -1.61316       1.61316       993.949       995.563    
  31  0.652626     -0.426751      -4.80012       4.80012       1010.18       1014.98    
  32  0.170956      -1.76635      -19.8680       19.8680       1005.98       1025.85    
  33  0.769008     -0.262654      -2.95435       2.95435       1012.80       1015.76    
  34  0.156770      -1.85298      -20.8424       20.8424       1004.30       1025.14    
  35  0.256549E-01  -3.66302      -41.2019       41.2019       980.018       1021.22    
  36  0.726661     -0.319295      -3.59145       3.59145       1019.02       1022.61    
  37  0.556665     -0.585792      -6.58902       6.58902       1004.20       1010.79    
  38  0.381201     -0.964427      -10.8479       10.8479       998.357       1009.21    
  39  0.312648      -1.16268      -13.0779       13.0779       1015.09       1028.17    
  40  0.523641     -0.646949      -7.27693       7.27693       1000.42       1007.70    
  41  0.525107     -0.644154      -7.24548       7.24548       1025.47       1032.71    
  42  0.577096     -0.549746      -6.18358       6.18358       1003.49       1009.67    
  43  0.218919      -1.51905      -17.0864       17.0864       1024.69       1041.77    
  44  0.406968     -0.899021      -10.1122       10.1122       1017.12       1027.23    
  45  0.269244      -1.31214      -14.7590       14.7590       1024.24       1039.00    
  46  0.150666      -1.89269      -21.2891       21.2891       985.710       1007.00    
  47  0.619490     -0.478859      -5.38624       5.38624       1036.72       1042.11    
  48  0.204317      -1.58808      -17.8629       17.8629       1044.38       1062.24    
  49  0.924766     -0.782150E-01 -0.879767      0.879767       1033.28       1034.16    
  50  0.897527E-01  -2.41070      -27.1157       27.1157       1039.96       1067.08    
  51  0.938635     -0.633286E-01 -0.712324      0.712324       1051.87       1052.58    
  52  0.265009      -1.32799      -14.9373       14.9373       1031.63       1046.56    
  53  0.914538     -0.893366E-01  -1.00486       1.00486       1043.34       1044.34    
loop,thermsimp(1:2)        4   11.9796       12.2067    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340        931.54          0.85          1.14         21.80          0.05          0.06         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    341       1023.18          0.84          1.12         21.79          0.16          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    1023.2       0.6956     -2.822      4.952     -102.6      1.296    
                       1.050      1.218     -99.70      5.724      3.340    

                       2.383     -2.184      1.540      7000.      7000.    

                      -1.524      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -9.419     -14.99     -17.11      6.847    

                      -18.28     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.4760E-02 0.3259     0.1245     0.3070    

                     -0.2486    -0.1230     0.2451     0.2947     0.2539    



                     -0.5656    -0.8350      0.000     0.1449    -0.1024    

                      0.3165E-01 0.2771    -0.7116     0.1321E-01 0.4494    

                      0.1393     0.2086    -0.9682     -1.716      7000.    



                      -2.202     -1.765     -2.142     -1.982    -0.3807    

                     -0.3252      9.541      8.746    -0.1672E+05 -6.000    

                      0.3309     -2.530      9.645      9.048    -0.1969E+05



                      -6.000     0.5861    -0.2899      8.981      9.223    

                     -0.1944E+05 -6.000      2.181    -0.5527      9.117    

                       9.031    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    931.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        4
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        5
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      340     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.690462E-01  0.690462E-01   943.606       943.675    
   2  0.544036     -0.608740      -6.84715       6.84715       943.917       950.764    
   3  0.752151     -0.284818      -3.20365       3.20365       944.199       947.403    
   4  0.128894      -2.04876      -23.0446       23.0446       934.437       957.482    
   5  0.954586     -0.464781E-01 -0.522788      0.522788       962.533       963.056    
   6  0.699109     -0.357949      -4.02623       4.02623       950.272       954.298    
   7  0.158831      -1.83992      -20.6955       20.6955       946.467       967.162    
   8  0.317803      -1.14632      -12.8939       12.8939       968.905       981.799    
   9  0.533633     -0.628047      -7.06431       7.06431       971.915       978.979    
  10  0.232061      -1.46076      -16.4307       16.4307       973.408       989.839    
  11  0.798671     -0.224806      -2.52863       2.52863       975.399       977.927    
  12  0.629719     -0.462482      -5.20202       5.20202       974.601       979.803    
  13  0.285415      -1.25381      -14.1029       14.1029       978.958       993.061    
  14  0.101345      -2.28923      -25.7493       25.7493       983.579       1009.33    
  15  0.523846     -0.646557      -7.27251       7.27251       988.084       995.357    
  16  0.570798     -0.560721      -6.30702       6.30702       983.320       989.627    
  17  0.471006     -0.752884      -8.46848       8.46848       988.093       996.562    
  18  0.439034     -0.823179      -9.25917       9.25917       983.679       992.939    
  19  0.755118     -0.280881      -3.15937       3.15937       986.168       989.328    
  20  0.987033     -0.130515E-01 -0.146804      0.146804       993.949       994.096    
  21  0.800390E-01  -2.52524      -28.4041       28.4041       995.346       1023.75    
  22  0.739282     -0.302075      -3.39776       3.39776       995.410       998.807    
  23  0.367536      -1.00093      -11.2586       11.2586       986.238       997.496    
  24  0.397431     -0.922735      -10.3790       10.3790       974.618       984.997    
  25  0.338773      -1.08242      -12.1752       12.1752       996.403       1008.58    
  26  0.388721     -0.944893      -10.6282       10.6282       987.251       997.879    
  27  0.298998      -1.20732      -13.5800       13.5800       984.896       998.476    
  28  0.668470     -0.402763      -4.53031       4.53031       1002.55       1007.08    
  29  0.604587     -0.503210      -5.66013       5.66013       985.710       991.370    
  30  0.455577     -0.786190      -8.84312       8.84312       1000.42       1009.26    
  31  0.842360     -0.171548      -1.92959       1.92959       998.357       1000.29    
  32  0.452047     -0.793969      -8.93061       8.93061       1003.49       1012.42    
  33  0.994488     -0.552709E-02 -0.621691E-01  0.621691E-01   1004.20       1004.27    
  34  0.309000E-02  -5.77958      -65.0091       65.0091       1010.18       1075.19    
  35  0.171789      -1.76149      -19.8133       19.8133       1012.80       1032.62    
  36  0.567417     -0.566661      -6.37384       6.37384       1000.12       1006.50    
  37  0.885121     -0.122031      -1.37261       1.37261       980.018       981.391    
  38  0.342608      -1.07117      -12.0486       12.0486       1019.02       1031.06    
  39  0.954017     -0.470733E-01 -0.529484      0.529484       1004.30       1004.83    
  40  0.439346     -0.822467      -9.25116       9.25116       1005.98       1015.23    
  41  0.237365E-01  -3.74074      -42.0761       42.0761       1017.12       1059.20    
  42  0.100236      -2.30023      -25.8731       25.8731       1015.09       1040.97    
  43  0.539338     -0.617412      -6.94469       6.94469       1025.47       1032.41    
  44  0.825393     -0.191896      -2.15846       2.15846       1033.28       1035.44    
  45  0.252744      -1.37538      -15.4703       15.4703       996.274       1011.74    
  46  0.676050     -0.391488      -4.40348       4.40348       1024.24       1028.65    
  47  0.621378     -0.475815      -5.35200       5.35200       1024.69       1030.04    
  48  0.375614     -0.979194      -11.0140       11.0140       1036.72       1047.73    
  49  0.638637     -0.448418      -5.04384       5.04384       1043.34       1048.38    
  50  0.540154     -0.615902      -6.92770       6.92770       1031.63       1038.55    
  51  0.295099      -1.22045      -13.7276       13.7276       1051.87       1065.60    
  52  0.195781      -1.63076      -18.3429       18.3429       1044.38       1062.72    
  53  0.430058     -0.843836      -9.49152       9.49152       931.542       941.034    
loop,thermsimp(1:2)        5  0.690462E-01   6.84715    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342       1032.81          0.86          1.16         21.87          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1032.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        5
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        6
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      341     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -12.0529       12.0529       931.542       943.595    
   2  0.738210     -0.303527      -3.41409       3.41409       943.606       947.020    
   3  0.254388      -1.36889      -15.3974       15.3974       944.199       959.596    
   4  0.184184      -1.69182      -19.0297       19.0297       943.917       962.947    
   5  0.467311     -0.760760      -8.55707       8.55707       950.272       958.829    
   6  0.718957     -0.329953      -3.71134       3.71134       934.437       938.149    
   7  0.233172      -1.45598      -16.3769       16.3769       962.533       978.910    
   8  0.855319     -0.156281      -1.75785       1.75785       946.467       948.224    
   9  0.331323      -1.10466      -12.4253       12.4253       975.399       987.824    
  10  0.737635E-01  -2.60689      -29.3225       29.3225       971.915       1001.24    
  11  0.960656     -0.401393E-01 -0.451490      0.451490       974.601       975.052    
  12  0.312287      -1.16383      -13.0909       13.0909       980.018       993.109    
  13  0.252190      -1.37757      -15.4950       15.4950       968.905       984.400    
  14  0.775876     -0.253763      -2.85434       2.85434       974.618       977.473    
  15  0.397248     -0.923194      -10.3841       10.3841       986.168       996.552    
  16  0.587084E-01  -2.83517      -31.8902       31.8902       983.320       1015.21    
  17  0.923214     -0.798941E-01 -0.898653      0.898653       973.408       974.307    
  18  0.147001      -1.91731      -21.5661       21.5661       985.710       1007.28    
  19  0.275551      -1.28898      -14.4986       14.4986       983.679       998.178    
  20  0.157032      -1.85131      -20.8236       20.8236       978.958       999.781    
  21  0.468534     -0.758146      -8.52767       8.52767       993.949       1002.48    
  22  0.101055      -2.29209      -25.7815       25.7815       988.084       1013.87    
  23  0.891765     -0.114553      -1.28849       1.28849       988.093       989.382    
  24  0.756241     -0.279395      -3.14265       3.14265       986.238       989.381    
  25  0.212181E-01  -3.85290      -43.3377       43.3377       987.251       1030.59    
  26  0.807607     -0.213679      -2.40348       2.40348       984.896       987.299    
  27  0.233854      -1.45306      -16.3441       16.3441       995.410       1011.75    
  28  0.622600     -0.473852      -5.32991       5.32991       998.357       1003.69    
  29  0.188561      -1.66833      -18.7655       18.7655       1004.20       1022.97    
  30  0.938432E-01  -2.36613      -26.6144       26.6144       1004.30       1030.91    
  31  0.846333     -0.166843      -1.87666       1.87666       1000.12       1002.00    
  32  0.258796      -1.35172      -15.2042       15.2042       1002.55       1017.76    
  33  0.503854     -0.685469      -7.71019       7.71019       996.403       1004.11    
  34  0.577410     -0.549202      -6.17746       6.17746       1000.42       1006.60    
  35  0.282259E-01  -3.56751      -40.1276       40.1276       983.579       1023.71    
  36  0.618901     -0.479811      -5.39694       5.39694       996.274       1001.67    
  37  0.563982     -0.572733      -6.44214       6.44214       1003.49       1009.93    
  38  0.290650      -1.23563      -13.8985       13.8985       1005.98       1019.88    
  39  0.165662      -1.79781      -20.2218       20.2218       995.346       1015.57    
  40  0.871949E-01  -2.43961      -27.4409       27.4409       1024.24       1051.68    
  41  0.494744     -0.703714      -7.91542       7.91542       1024.69       1032.60    
  42  0.156326      -1.85581      -20.8743       20.8743       1019.02       1039.89    
  43  0.558357     -0.582757      -6.55489       6.55489       1025.47       1032.02    
  44  0.974745     -0.255792E-01 -0.287716      0.287716       1012.80       1013.09    
  45  0.399321     -0.917991      -10.3256       10.3256       1033.28       1043.60    
  46  0.649792     -0.431103      -4.84907       4.84907       1031.63       1036.48    
  47  0.210634      -1.55763      -17.5203       17.5203       1015.09       1032.62    
  48  0.939937     -0.619427E-01 -0.696735      0.696735       1036.72       1037.42    
  49  0.617394     -0.482248      -5.42435       5.42435       1043.34       1048.76    
  50  0.435355     -0.831593      -9.35381       9.35381       1017.12       1026.47    
  51  0.423449     -0.859323      -9.66572       9.66572       1044.38       1054.04    
  52  0.922974     -0.801543E-01 -0.901581      0.901581       1051.87       1052.77    
  53  0.877321     -0.130883      -1.47218       1.47218       1032.81       1034.29    
loop,thermsimp(1:2)        6   12.0529       3.41409    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343       1023.79          0.84          1.14         21.93          0.00          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1023.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        6
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        7
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      342     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -4.54807       4.54807       934.437       938.985    
   2  0.361364E-01  -3.32046      -37.3487       37.3487       931.542       968.891    
   3  0.167171      -1.78874      -20.1198       20.1198       943.606       963.726    
   4  0.268590E-01  -3.61716      -40.6860       40.6860       946.467       987.153    
   5  0.979339     -0.208774E-01 -0.234830      0.234830       950.272       950.506    
   6  0.285956E-01  -3.55450      -39.9812       39.9812       944.199       984.180    
   7  0.614036     -0.487701      -5.48570       5.48570       943.917       949.403    
   8  0.291622      -1.23230      -13.8609       13.8609       973.408       987.269    
   9  0.495778     -0.701626      -7.89193       7.89193       974.601       982.493    
  10  0.289385      -1.24000      -13.9476       13.9476       974.618       988.566    
  11  0.601390     -0.508511      -5.71976       5.71976       962.533       968.253    
  12  0.868837     -0.140599      -1.58147       1.58147       968.905       970.487    
  13  0.289097E-01  -3.54358      -39.8584       39.8584       984.896       1024.75    
  14  0.999895     -0.104574E-03 -0.117626E-02  0.117626E-02   975.399       975.400    
  15  0.547924     -0.601620      -6.76705       6.76705       986.238       993.005    
  16  0.562607     -0.575175      -6.46960       6.46960       988.093       994.563    
  17  0.422387     -0.861832      -9.69394       9.69394       980.018       989.712    
  18  0.934703     -0.675264E-01 -0.759541      0.759541       986.168       986.928    
  19  0.484044     -0.725579      -8.16135       8.16135       983.679       991.841    
  20  0.362136      -1.01574      -11.4251       11.4251       978.958       990.383    
  21  0.826677     -0.190341      -2.14096       2.14096       971.915       974.056    
  22  0.383965     -0.957204      -10.7667       10.7667       996.274       1007.04    
  23  0.403854     -0.906702      -10.1986       10.1986       1000.12       1010.32    
  24  0.375365     -0.979857      -11.0215       11.0215       993.949       1004.97    
  25  0.335540      -1.09201      -12.2830       12.2830       998.357       1010.64    
  26  0.744256     -0.295370      -3.32234       3.32234       996.403       999.725    
  27  0.611040     -0.492593      -5.54072       5.54072       1000.42       1005.96    
  28  0.361728      -1.01686      -11.4377       11.4377       985.710       997.148    
  29  0.381582     -0.963430      -10.8367       10.8367       1003.49       1014.32    
  30  0.738884E-01  -2.60520      -29.3034       29.3034       995.410       1024.71    
  31  0.185722E-01  -3.98609      -44.8358       44.8358       1012.80       1057.64    
  32  0.470279     -0.754429      -8.48587       8.48587       988.084       996.570    
  33  0.499505     -0.694139      -7.80771       7.80771       983.320       991.127    
  34  0.641578     -0.443824      -4.99216       4.99216       995.346       1000.34    
  35  0.462400     -0.771325      -8.67591       8.67591       1002.55       1011.23    
  36  0.953656     -0.474527E-01 -0.533750      0.533750       1005.98       1006.52    
  37  0.305321E-01  -3.48898      -39.2442       39.2442       1004.20       1043.45    
  38  0.281396      -1.26799      -14.2625       14.2625       983.579       997.841    
  39  0.642231     -0.442807      -4.98072       4.98072       1017.12       1022.10    
  40  0.506226     -0.680772      -7.65737       7.65737       987.251       994.909    
  41  0.152451      -1.88091      -21.1566       21.1566       1004.30       1025.46    
  42  0.825356     -0.191941      -2.15896       2.15896       1025.47       1027.63    
  43  0.895901     -0.109926      -1.23645       1.23645       1024.69       1025.92    
  44  0.706880     -0.346894      -3.90189       3.90189       1015.09       1019.00    
  45  0.810453     -0.210162      -2.36392       2.36392       1032.81       1035.18    
  46  0.463153     -0.769698      -8.65761       8.65761       1031.63       1040.28    
  47  0.333587      -1.09785      -12.3487       12.3487       1036.72       1049.07    
  48  0.588678     -0.529875      -5.96007       5.96007       1019.02       1024.98    
  49  0.724542E-01  -2.62480      -29.5239       29.5239       1033.28       1062.80    
  50  0.550549     -0.596839      -6.71328       6.71328       1043.34       1050.05    
  51  0.945764     -0.557622E-01 -0.627217      0.627217       1024.24       1024.87    
  52  0.903703E-01  -2.40384      -27.0385       27.0385       1051.87       1078.91    
  53  0.435583     -0.831070      -9.34793       9.34793       1023.79       1033.13    
loop,thermsimp(1:2)        7   4.54807       37.3487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344       1021.00          0.84          1.14         21.91          0.02          0.04         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1021.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        7
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        8
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      343     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891      -2.05717       2.05717       934.437       936.495    
   2  0.610299     -0.493806      -5.55436       5.55436       943.917       949.472    
   3  0.652915     -0.426308      -4.79514       4.79514       950.272       955.067    
   4  0.273016      -1.29823      -14.6025       14.6025       943.606       958.208    
   5  0.570853     -0.560623      -6.30592       6.30592       962.533       968.839    
   6  0.107477E-01  -4.53306      -50.9882       50.9882       931.542       982.530    
   7  0.651717     -0.428145      -4.81580       4.81580       968.905       973.721    
   8  0.214404      -1.53989      -17.3208       17.3208       971.915       989.236    
   9  0.132680      -2.01982      -22.7190       22.7190       975.399       998.118    
  10  0.370727     -0.992290      -11.1613       11.1613       974.601       985.762    
  11  0.330444      -1.10732      -12.4552       12.4552       944.199       956.654    
  12  0.462713     -0.770647      -8.66829       8.66829       986.168       994.836    
  13  0.514022     -0.665489      -7.48546       7.48546       946.467       953.952    
  14  0.644984     -0.438530      -4.93262       4.93262       973.408       978.341    
  15  0.813975     -0.205826      -2.31515       2.31515       974.618       976.934    
  16  0.434803     -0.832863      -9.36809       9.36809       980.018       989.386    
  17  0.212985      -1.54653      -17.3955       17.3955       978.958       996.353    
  18  0.796179     -0.227931      -2.56378       2.56378       983.320       985.883    
  19  0.259948      -1.34727      -15.1542       15.1542       983.679       998.834    
  20  0.526723     -0.641081      -7.21092       7.21092       986.238       993.449    
  21  0.392691     -0.934731      -10.5139       10.5139       988.093       998.607    
  22  0.949472     -0.518494E-01 -0.583205      0.583205       987.251       987.834    
  23  0.665479E-01  -2.70983      -30.4804       30.4804       988.084       1018.56    
  24  0.927466E-01  -2.37788      -26.7466       26.7466       985.710       1012.46    
  25  0.630503     -0.461237      -5.18802       5.18802       983.579       988.767    
  26  0.714749     -0.335823      -3.77736       3.77736       996.403       1000.18    
  27  0.450999     -0.796290      -8.95672       8.95672       995.346       1004.30    
  28  0.184997      -1.68742      -18.9802       18.9802       993.949       1012.93    
  29  0.989607     -0.104473E-01 -0.117512      0.117512       1000.42       1000.54    
  30  0.530766     -0.633434      -7.12490       7.12490       1005.98       1013.11    
  31  0.495227     -0.702738      -7.90444       7.90444       996.274       1004.18    
  32  0.787696     -0.238642      -2.68426       2.68426       1000.12       1002.81    
  33  0.168123      -1.78306      -20.0560       20.0560       998.357       1018.41    
  34  0.205580      -1.58192      -17.7935       17.7935       1002.55       1020.35    
  35  0.182087      -1.70327      -19.1585       19.1585       1003.49       1022.64    
  36  0.320489      -1.13791      -12.7993       12.7993       1015.09       1027.89    
  37  0.591526     -0.525050      -5.90579       5.90579       1017.12       1023.03    
  38  0.374258     -0.982811      -11.0547       11.0547       995.410       1006.46    
  39  0.578871     -0.546675      -6.14903       6.14903       984.896       991.045    
  40  0.542113     -0.612280      -6.88696       6.88696       1024.24       1031.13    
  41  0.123399      -2.09233      -23.5347       23.5347       1019.02       1042.55    
  42  0.874747     -0.133820      -1.50522       1.50522       1004.30       1005.81    
  43  0.521146     -0.651725      -7.33065       7.33065       1024.69       1032.02    
  44  0.160493      -1.82950      -20.5783       20.5783       1025.47       1046.05    
  45  0.606451     -0.500131      -5.62550       5.62550       1023.79       1029.41    
  46  0.947463     -0.539676E-01 -0.607031      0.607031       1032.81       1033.42    
  47  0.187698      -1.67292      -18.8171       18.8171       1031.63       1050.44    
  48  0.157453      -1.84863      -20.7935       20.7935       1004.20       1025.00    
  49  0.411413     -0.888157      -9.99004       9.99004       1036.72       1046.71    
  50  0.399256     -0.918152      -10.3274       10.3274       1043.34       1053.67    
  51  0.629238     -0.463246      -5.21062       5.21062       1012.80       1018.01    
  52  0.831952     -0.183980      -2.06942       2.06942       1033.28       1035.35    
  53  0.677270     -0.389686      -4.38321       4.38321       1021.00       1025.39    
loop,thermsimp(1:2)        8   2.05717       5.55436    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345       1045.58          0.86          1.14         22.02          0.00          0.05         24.07
Just calling func    0   0         24.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1045.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        8
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:        9
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      344     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -18.4992       18.4992       934.437       952.937    
   2  0.822950     -0.194860      -2.19180       2.19180       943.917       946.109    
   3  0.396787     -0.924357      -10.3972       10.3972       946.467       956.864    
   4  0.141060      -1.95857      -22.0301       22.0301       950.272       972.302    
   5  0.673747     -0.394901      -4.44187       4.44187       944.199       948.641    
   6  0.142835      -1.94606      -21.8894       21.8894       943.606       965.495    
   7  0.707555     -0.345940      -3.89115       3.89115       962.533       966.424    
   8  0.957483     -0.434474E-01 -0.488699      0.488699       968.905       969.394    
   9  0.524586     -0.645145      -7.25663       7.25663       974.618       981.875    
  10  0.692024     -0.368135      -4.14080       4.14080       973.408       977.549    
  11  0.936675E-01  -2.36800      -26.6354       26.6354       931.542       958.177    
  12  0.216270      -1.53123      -17.2233       17.2233       974.601       991.824    
  13  0.329369      -1.11058      -12.4918       12.4918       983.320       995.811    
  14  0.670774     -0.399323      -4.49161       4.49161       987.251       991.743    
  15  0.263445      -1.33391      -15.0039       15.0039       983.579       998.583    
  16  0.150248      -1.89547      -21.3203       21.3203       971.915       993.235    
  17  0.357034      -1.02992      -11.5847       11.5847       980.018       991.603    
  18  0.833286E-01  -2.48496      -27.9510       27.9510       984.896       1012.85    
  19  0.431395     -0.840731      -9.45660       9.45660       986.238       995.694    
  20  0.304550      -1.18892      -13.3731       13.3731       986.168       999.541    
  21  0.930203     -0.723520E-01 -0.813819      0.813819       978.958       979.772    
  22  0.443091     -0.813979      -9.15569       9.15569       975.399       984.554    
  23  0.361548      -1.01736      -11.4433       11.4433       988.093       999.537    
  24  0.603851     -0.504427      -5.67383       5.67383       983.679       989.353    
  25  0.825014     -0.192355      -2.16362       2.16362       996.403       998.566    
  26  0.658742     -0.417424      -4.69521       4.69521       1000.42       1005.12    
  27  0.938632     -0.633319E-01 -0.712361      0.712361       1000.12       1000.83    
  28  0.264383E-01  -3.63294      -40.8635       40.8635       996.274       1037.14    
  29  0.770543     -0.260660      -2.93192       2.93192       995.346       998.277    
  30  0.536385     -0.622903      -7.00645       7.00645       1004.30       1011.31    
  31  0.173997      -1.74872      -19.6697       19.6697       995.410       1015.08    
  32  0.876286     -0.132063      -1.48545       1.48545       985.710       987.195    
  33  0.447573     -0.803915      -9.04249       9.04249       993.949       1002.99    
  34  0.521740E-01  -2.95317      -33.2174       33.2174       1005.98       1039.20    
  35  0.509285     -0.674747      -7.58959       7.58959       1012.80       1020.39    
  36  0.135259      -2.00056      -22.5024       22.5024       998.357       1020.86    
  37  0.238321      -1.43414      -16.1312       16.1312       988.084       1004.22    
  38  0.146995      -1.91735      -21.5665       21.5665       1002.55       1024.12    
  39  0.166047      -1.79549      -20.1957       20.1957       1003.49       1023.68    
  40  0.830113     -0.186194      -2.09432       2.09432       1017.12       1019.22    
  41  0.638960     -0.447914      -5.03816       5.03816       1004.20       1009.24    
  42  0.156696      -1.85345      -20.8477       20.8477       1021.00       1041.85    
  43  0.956507     -0.444668E-01 -0.500166      0.500166       1015.09       1015.60    
  44  0.313979      -1.15843      -13.0301       13.0301       1023.79       1036.82    
  45  0.185265      -1.68597      -18.9639       18.9639       1024.24       1043.21    
  46  0.952300     -0.488757E-01 -0.549757      0.549757       1024.69       1025.24    
  47  0.181060      -1.70892      -19.2221       19.2221       1032.81       1052.03    
  48  0.969330     -0.311499E-01 -0.350376      0.350376       1033.28       1033.63    
  49  0.832772     -0.182996      -2.05835       2.05835       1019.02       1021.07    
  50  0.733500     -0.309927      -3.48608       3.48608       1025.47       1028.95    
  51  0.901211     -0.104016      -1.16997       1.16997       1036.72       1037.89    
  52  0.598700     -0.512995      -5.77020       5.77020       1031.63       1037.40    
  53  0.982368     -0.177897E-01 -0.200100      0.200100       1045.58       1045.78    
loop,thermsimp(1:2)        9   18.4992       2.19180    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346       1034.35          0.86          1.13         22.11          0.10          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1034.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:        9
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       10
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      345     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -7.43958       7.43958       943.917       951.357    
   2  0.677402     -0.389491      -4.38101       4.38101       944.199       948.580    
   3  0.899541     -0.105871      -1.19084       1.19084       934.437       935.628    
   4  0.235706      -1.44517      -16.2554       16.2554       946.467       962.722    
   5  0.194769      -1.63594      -18.4012       18.4012       931.542       949.943    
   6  0.814930     -0.204653      -2.30195       2.30195       943.606       945.908    
   7  0.727423E-01  -2.62083      -29.4793       29.4793       962.533       992.012    
   8  0.126759      -2.06547      -23.2325       23.2325       968.905       992.138    
   9  0.592876     -0.522770      -5.88015       5.88015       950.272       956.152    
  10  0.131380      -2.02966      -22.8298       22.8298       973.408       996.238    
  11  0.394760E-01  -3.23206      -36.3544       36.3544       978.958       1015.31    
  12  0.539964     -0.616252      -6.93164       6.93164       974.618       981.550    
  13  0.127256      -2.06155      -23.1885       23.1885       975.399       998.587    
  14  0.245583      -1.40412      -15.7936       15.7936       985.710       1001.50    
  15  0.236145E-01  -3.74590      -42.1341       42.1341       983.679       1025.81    
  16  0.791943     -0.233266      -2.62379       2.62379       980.018       982.642    
  17  0.223014      -1.50052      -16.8780       16.8780       987.251       1004.13    
  18  0.943370     -0.582970E-01 -0.655728      0.655728       974.601       975.257    
  19  0.844237     -0.169322      -1.90454       1.90454       971.915       973.819    
  20  0.600301     -0.510323      -5.74015       5.74015       986.238       991.978    
  21  0.742625E-01  -2.60015      -29.2466       29.2466       983.320       1012.57    
  22  0.288925E-01  -3.54417      -39.8651       39.8651       995.346       1035.21    
  23  0.325834      -1.12137      -12.6132       12.6132       996.403       1009.02    
  24  0.317147      -1.14839      -12.9171       12.9171       983.579       996.496    
  25  0.655873     -0.421788      -4.74429       4.74429       988.093       992.838    
  26  0.259034      -1.35080      -15.1938       15.1938       986.168       1001.36    
  27  0.639742E-01  -2.74927      -30.9240       30.9240       1000.12       1031.05    
  28  0.110416E-01  -4.50609      -50.6847       50.6847       993.949       1044.63    
  29  0.768965E-01  -2.56529      -28.8546       28.8546       988.084       1016.94    
  30  0.757182     -0.278151      -3.12866       3.12866       1000.42       1003.55    
  31  0.788615     -0.237477      -2.67115       2.67115       1004.20       1006.87    
  32  0.724297     -0.322554      -3.62810       3.62810       1004.30       1007.93    
  33  0.807261     -0.214109      -2.40831       2.40831       984.896       987.304    
  34  0.356497      -1.03143      -11.6016       11.6016       995.410       1007.01    
  35  0.685602     -0.377458      -4.24567       4.24567       1015.09       1019.34    
  36  0.681617     -0.383288      -4.31124       4.31124       1017.12       1021.43    
  37  0.323748      -1.12779      -12.6854       12.6854       1012.80       1025.49    
  38  0.622817     -0.473503      -5.32599       5.32599       998.357       1003.68    
  39  0.534584     -0.626266      -7.04428       7.04428       1019.02       1026.06    
  40  0.130255E-02  -6.64343      -74.7257       74.7257       1003.49       1078.21    
  41  0.357398      -1.02891      -11.5732       11.5732       1002.55       1014.13    
  42  0.290986      -1.23448      -13.8855       13.8855       1024.69       1038.57    
  43  0.182566      -1.70064      -19.1290       19.1290       1025.47       1044.60    
  44  0.695597     -0.362984      -4.08287       4.08287       1033.28       1037.36    
  45  0.612287     -0.490555      -5.51779       5.51779       1023.79       1029.30    
  46  0.845780     -0.167496      -1.88400       1.88400       996.274       998.158    
  47  0.628042     -0.465149      -5.23202       5.23202       1031.63       1036.86    
  48  0.830233     -0.186049      -2.09269       2.09269       1036.72       1038.81    
  49  0.373260     -0.985481      -11.0847       11.0847       1005.98       1017.07    
  50  0.711640     -0.340183      -3.82640       3.82640       1021.00       1024.83    
  51  0.449400     -0.799842      -8.99667       8.99667       1024.24       1033.24    
  52  0.253029      -1.37425      -15.4576       15.4576       1045.58       1061.04    
  53  0.956034     -0.449619E-01 -0.505734      0.505734       1034.35       1034.85    
loop,thermsimp(1:2)       10   7.43958       4.38101    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347       1109.75          0.86          1.14         21.84          0.01          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    348       1004.17          0.84          1.14         21.83          0.06          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1004.17
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       10
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       11
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      347     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811      -3.42853       3.42853       934.437       937.866    
   2  0.372515     -0.987477      -11.1072       11.1072       943.606       954.713    
   3  0.197611E-01  -3.92404      -44.1378       44.1378       944.199       988.337    
   4  0.939239     -0.626858E-01 -0.705094      0.705094       931.542       932.247    
   5  0.212506      -1.54879      -17.4208       17.4208       943.917       961.338    
   6  0.141762      -1.95360      -21.9742       21.9742       950.272       972.246    
   7  0.183632      -1.69482      -19.0635       19.0635       946.467       965.530    
   8  0.479067     -0.735915      -8.27761       8.27761       971.915       980.192    
   9  0.113189      -2.17870      -24.5061       24.5061       974.601       999.107    
  10  0.314091      -1.15807      -13.0261       13.0261       974.618       987.644    
  11  0.457761     -0.781409      -8.78933       8.78933       980.018       988.807    
  12  0.923744     -0.793200E-01 -0.892196      0.892196       984.896       985.788    
  13  0.805387     -0.216433      -2.43445       2.43445       986.238       988.672    
  14  0.979257     -0.209609E-01 -0.235769      0.235769       962.533       962.769    
  15  0.634716E-01  -2.75716      -31.0127       31.0127       968.905       999.918    
  16  0.502866     -0.687432      -7.73228       7.73228       988.093       995.826    
  17  0.844986     -0.168435      -1.89457       1.89457       973.408       975.303    
  18  0.548347     -0.600848      -6.75837       6.75837       983.579       990.337    
  19  0.825472     -0.191800      -2.15738       2.15738       996.274       998.432    
  20  0.806424     -0.215145      -2.41996       2.41996       975.399       977.819    
  21  0.497450E-01  -3.00085      -33.7537       33.7537       986.168       1019.92    
  22  0.407289     -0.898233      -10.1034       10.1034       985.710       995.813    
  23  0.522833     -0.648493      -7.29428       7.29428       1000.42       1007.72    
  24  0.763038     -0.270448      -3.04202       3.04202       998.357       1001.40    
  25  0.706120     -0.347970      -3.91399       3.91399       987.251       991.165    
  26  0.540862     -0.614591      -6.91296       6.91296       1004.20       1011.12    
  27  0.807340E-01  -2.51660      -28.3068       28.3068       995.410       1023.72    
  28  0.310756      -1.16875      -13.1461       13.1461       1004.30       1017.45    
  29  0.689192     -0.372235      -4.18692       4.18692       996.403       1000.59    
  30  0.634973     -0.454174      -5.10857       5.10857       983.320       988.428    
  31  0.598432     -0.513442      -5.77522       5.77522       1002.55       1008.33    
  32  0.393639     -0.932321      -10.4868       10.4868       978.958       989.445    
  33  0.369460     -0.995714      -11.1999       11.1999       988.084       999.284    
  34  0.129274      -2.04582      -23.0115       23.0115       1005.98       1028.99    
  35  0.250376      -1.38479      -15.5762       15.5762       1015.09       1030.67    
  36  0.536641     -0.622425      -7.00108       7.00108       1017.12       1024.12    
  37  0.495942     -0.701296      -7.88822       7.88822       1021.00       1028.89    
  38  0.650684     -0.429731      -4.83365       4.83365       1012.80       1017.64    
  39  0.889212     -0.117420      -1.32075       1.32075       983.679       985.000    
  40  0.314936      -1.15539      -12.9959       12.9959       1019.02       1032.01    
  41  0.943567     -0.580875E-01 -0.653372      0.653372       1023.79       1024.44    
  42  0.672016     -0.397473      -4.47080       4.47080       1000.12       1004.59    
  43  0.133907      -2.01061      -22.6155       22.6155       1024.24       1046.86    
  44  0.259017      -1.35086      -15.1946       15.1946       1034.35       1049.54    
  45  0.112444      -2.18530      -24.5804       24.5804       995.346       1019.93    
  46  0.235994      -1.44395      -16.2416       16.2416       1031.63       1047.87    
  47  0.879651     -0.128231      -1.44234       1.44234       1033.28       1034.72    
  48  0.750555     -0.286942      -3.22754       3.22754       1024.69       1027.92    
  49  0.996491E-01  -2.30610      -25.9392       25.9392       1036.72       1062.66    
  50  0.100853      -2.29409      -25.8041       25.8041       1025.47       1051.27    
  51  0.520543     -0.652882      -7.34366       7.34366       993.949       1001.29    
  52  0.886361E-01  -2.42322      -27.2565       27.2565       1045.58       1072.84    
  53  0.152463      -1.88083      -21.1557       21.1557       1004.17       1025.33    
loop,thermsimp(1:2)       11   3.42853       11.1072    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349       1038.38          0.85          1.14         21.93          0.01          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1038.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       11
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       12
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      348     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995      -2.74447       2.74447       931.542       934.287    
   2  0.973841     -0.265069E-01 -0.298151      0.298151       934.437       934.736    
   3  0.294662      -1.22193      -13.7443       13.7443       943.606       957.350    
   4  0.702628     -0.352928      -3.96976       3.96976       943.917       947.887    
   5  0.763280     -0.270131      -3.03844       3.03844       962.533       965.571    
   6  0.578080E-01  -2.85063      -32.0640       32.0640       946.467       978.531    
   7  0.834037     -0.181478      -2.04128       2.04128       950.272       952.313    
   8  0.976312     -0.239730E-01 -0.269650      0.269650       973.408       973.678    
   9  0.603670     -0.504728      -5.67721       5.67721       975.399       981.076    
  10  0.458546     -0.779695      -8.77005       8.77005       971.915       980.685    
  11  0.201917      -1.59990      -17.9957       17.9957       983.679       1001.68    
  12  0.362727      -1.01411      -11.4067       11.4067       984.896       996.302    
  13  0.466909E-01  -3.06421      -34.4664       34.4664       974.618       1009.08    
  14  0.602192     -0.507180      -5.70479       5.70479       944.199       949.904    
  15  0.332545      -1.10098      -12.3839       12.3839       983.320       995.704    
  16  0.758378     -0.276574      -3.11092       3.11092       986.238       989.349    
  17  0.834950     -0.180384      -2.02897       2.02897       980.018       982.047    
  18  0.910410     -0.938599E-01  -1.05574       1.05574       978.958       980.013    
  19  0.825418E-01  -2.49445      -28.0577       28.0577       983.579       1011.64    
  20  0.639611     -0.446894      -5.02669       5.02669       987.251       992.278    
  21  0.345418      -1.06300      -11.9567       11.9567       985.710       997.667    
  22  0.961674     -0.390802E-01 -0.439577      0.439577       988.093       988.533    
  23  0.274135      -1.29413      -14.5565       14.5565       996.274       1010.83    
  24  0.275236      -1.29013      -14.5114       14.5114       974.601       989.112    
  25  0.373550     -0.984704      -11.0760       11.0760       988.084       999.160    
  26  0.407178     -0.898505      -10.1064       10.1064       968.905       979.012    
  27  0.908773     -0.956602E-01  -1.07599       1.07599       996.403       997.479    
  28  0.578518     -0.547286      -6.15590       6.15590       993.949       1000.11    
  29  0.674288     -0.394098      -4.43284       4.43284       998.357       1002.79    
  30  0.758166     -0.276853      -3.11406       3.11406       1000.12       1003.24    
  31  0.764349E-01  -2.57132      -28.9223       28.9223       1000.42       1029.34    
  32  0.962342     -0.383853E-01 -0.431760      0.431760       1002.55       1002.98    
  33  0.918960     -0.845125E-01 -0.950602      0.950602       1004.20       1005.15    
  34  0.617888     -0.481448      -5.41536       5.41536       1004.30       1009.72    
  35  0.227646      -1.47996      -16.6467       16.6467       1012.80       1029.45    
  36  0.262001      -1.33941      -15.0657       15.0657       986.168       1001.23    
  37  0.589438     -0.528586      -5.94557       5.94557       995.346       1001.29    
  38  0.201352      -1.60270      -18.0273       18.0273       995.410       1013.44    
  39  0.350279      -1.04903      -11.7995       11.7995       1017.12       1028.92    
  40  0.647374     -0.434831      -4.89100       4.89100       1023.79       1028.68    
  41  0.604508     -0.503341      -5.66161       5.66161       1004.17       1009.84    
  42  0.700946     -0.355325      -3.99672       3.99672       1024.69       1028.68    
  43  0.575270     -0.552915      -6.21923       6.21923       1021.00       1027.22    
  44  0.554419     -0.589835      -6.63450       6.63450       1005.98       1012.62    
  45  0.375300     -0.980029      -11.0234       11.0234       1015.09       1026.12    
  46  0.605541     -0.501632      -5.64239       5.64239       1019.02       1024.66    
  47  0.109847      -2.20867      -24.8432       24.8432       1033.28       1058.12    
  48  0.553505     -0.591485      -6.65306       6.65306       1024.24       1030.90    
  49  0.412268     -0.886082      -9.96670       9.96670       1031.63       1041.59    
  50  0.664246     -0.409102      -4.60161       4.60161       1034.35       1038.95    
  51  0.707719     -0.345708      -3.88854       3.88854       1025.47       1029.36    
  52  0.750886     -0.286501      -3.22258       3.22258       1036.72       1039.94    
  53  0.339698      -1.07970      -12.1445       12.1445       1038.38       1050.53    
loop,thermsimp(1:2)       12   2.74447      0.298151    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350       1067.60          0.86          1.14         21.84          0.06          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    351        987.31          0.84          1.14         21.91          0.02          0.05         23.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    987.31
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       12
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       13
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      350     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01 -0.408918      0.408918       931.542       931.951    
   2  0.963371     -0.373169E-01 -0.419743      0.419743       934.437       934.857    
   3  0.851172E-02  -4.76631      -53.6118       53.6118       943.917       997.529    
   4  0.731929E-01  -2.61466      -29.4098       29.4098       944.199       973.609    
   5  0.491869     -0.709543      -7.98099       7.98099       950.272       958.253    
   6  0.625436     -0.469306      -5.27878       5.27878       943.606       948.885    
   7  0.139469      -1.96991      -22.1577       22.1577       962.533       984.691    
   8  0.464987     -0.765746      -8.61316       8.61316       973.408       982.022    
   9  0.192956      -1.64529      -18.5064       18.5064       946.467       964.973    
  10  0.184589E-01  -3.99221      -44.9046       44.9046       968.905       1013.81    
  11  0.327387      -1.11661      -12.5597       12.5597       978.958       991.517    
  12  0.447570     -0.803921      -9.04256       9.04256       971.915       980.957    
  13  0.282132      -1.26538      -14.2331       14.2331       975.399       989.632    
  14  0.991234     -0.880510E-02 -0.990403E-01  0.990403E-01   980.018       980.117    
  15  0.574009     -0.555110      -6.24391       6.24391       988.093       994.337    
  16  0.884017     -0.123279      -1.38665       1.38665       974.601       975.988    
  17  0.332578      -1.10088      -12.3828       12.3828       986.238       998.621    
  18  0.294524      -1.22240      -13.7496       13.7496       987.251       1001.00    
  19  0.865605     -0.144326      -1.62339       1.62339       983.320       984.943    
  20  0.441883E-01  -3.11930      -35.0860       35.0860       984.896       1019.98    
  21  0.652915     -0.426309      -4.79514       4.79514       996.403       1001.20    
  22  0.712636E-01  -2.64137      -29.7103       29.7103       985.710       1015.42    
  23  0.211397      -1.55402      -17.4797       17.4797       988.084       1005.56    
  24  0.836672E-01  -2.48091      -27.9054       27.9054       993.949       1021.85    
  25  0.397953     -0.921422      -10.3642       10.3642       986.168       996.532    
  26  0.545442     -0.606159      -6.81812       6.81812       995.346       1002.16    
  27  0.628874     -0.463825      -5.21713       5.21713       983.679       988.897    
  28  0.243035      -1.41455      -15.9110       15.9110       998.357       1014.27    
  29  0.700237     -0.356336      -4.00809       4.00809       1002.55       1006.56    
  30  0.887974     -0.118813      -1.33642       1.33642       1000.12       1001.46    
  31  0.354481      -1.03710      -11.6654       11.6654       1004.20       1015.87    
  32  0.579479     -0.545626      -6.13723       6.13723       974.618       980.756    
  33  0.873601E-01  -2.43772      -27.4196       27.4196       1004.30       1031.72    
  34  0.414510     -0.880658      -9.90570       9.90570       1004.17       1014.08    
  35  0.263485      -1.33376      -15.0022       15.0022       996.274       1011.28    
  36  0.174560E-01  -4.04807      -45.5329       45.5329       983.579       1029.11    
  37  0.461287     -0.773735      -8.70302       8.70302       1005.98       1014.68    
  38  0.914554     -0.893185E-01  -1.00466       1.00466       995.410       996.414    
  39  0.551497     -0.595119      -6.69394       6.69394       1019.02       1025.71    
  40  0.751145     -0.286157      -3.21871       3.21871       1015.09       1018.31    
  41  0.838814     -0.175766      -1.97702       1.97702       1021.00       1022.98    
  42  0.494321     -0.704571      -7.92506       7.92506       1023.79       1031.71    
  43  0.878137     -0.129953      -1.46171       1.46171       1024.69       1026.15    
  44  0.249667      -1.38763      -15.6081       15.6081       1017.12       1032.73    
  45  0.569995     -0.562128      -6.32285       6.32285       1000.42       1006.74    
  46  0.338221      -1.08406      -12.1935       12.1935       1025.47       1037.66    
  47  0.536421     -0.622836      -7.00570       7.00570       1012.80       1019.81    
  48  0.482027     -0.729755      -8.20833       8.20833       1024.24       1032.45    
  49  0.436505     -0.828955      -9.32413       9.32413       1034.35       1043.67    
  50  0.225116      -1.49114      -16.7724       16.7724       1036.72       1053.49    
  51  0.126546      -2.06715      -23.2515       23.2515       1031.63       1054.88    
  52  0.182898      -1.69882      -19.1085       19.1085       1038.38       1057.49    
  53  0.114159      -2.17017      -24.4102       24.4102       987.310       1011.72    
loop,thermsimp(1:2)       13  0.408918      0.419743    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352       1048.92          0.84          1.15         21.84          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1048.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       13
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       14
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      351     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -7.01196       7.01196       931.542       938.554    
   2  0.902010     -0.103129      -1.16001       1.16001       934.437       935.597    
   3  0.918906     -0.845717E-01 -0.951267      0.951267       943.606       944.557    
   4  0.300977E-01  -3.50330      -39.4054       39.4054       950.272       989.677    
   5  0.180939      -1.70960      -19.2297       19.2297       946.467       965.696    
   6  0.996736     -0.326981E-02 -0.367790E-01  0.367790E-01   944.199       944.236    
   7  0.974749     -0.255749E-01 -0.287668      0.287668       974.601       974.889    
   8  0.259085      -1.35060      -15.1916       15.1916       980.018       995.210    
   9  0.237439      -1.43784      -16.1730       16.1730       974.618       990.791    
  10  0.733816     -0.309497      -3.48124       3.48124       971.915       975.396    
  11  0.458028     -0.780824      -8.78276       8.78276       973.408       982.191    
  12  0.623300     -0.472727      -5.31726       5.31726       962.533       967.850    
  13  0.789074     -0.236895      -2.66461       2.66461       983.320       985.984    
  14  0.718847     -0.330107      -3.71306       3.71306       983.679       987.392    
  15  0.414258     -0.881266      -9.91253       9.91253       975.399       985.311    
  16  0.121880E-01  -4.40730      -49.5736       49.5736       978.958       1028.53    
  17  0.976927     -0.233433E-01 -0.262566      0.262566       988.093       988.356    
  18  0.998133     -0.186873E-02 -0.210196E-01  0.210196E-01   995.410       995.431    
  19  0.582806     -0.539901      -6.07284       6.07284       986.168       992.241    
  20  0.461010     -0.774335      -8.70977       8.70977       943.917       952.627    
  21  0.748404     -0.289812      -3.25982       3.25982       986.238       989.498    
  22  0.627394     -0.466180      -5.24362       5.24362       987.251       992.495    
  23  0.823247     -0.194499      -2.18774       2.18774       996.403       998.590    
  24  0.696302     -0.361971      -4.07148       4.07148       1000.12       1004.19    
  25  0.571207     -0.560004      -6.29896       6.29896       995.346       1001.64    
  26  0.189272      -1.66457      -18.7232       18.7232       988.084       1006.81    
  27  0.534816     -0.625833      -7.03940       7.03940       1002.55       1009.59    
  28  0.846241     -0.166951      -1.87788       1.87788       1000.42       1002.30    
  29  0.157466      -1.84855      -20.7925       20.7925       996.274       1017.07    
  30  0.123756      -2.08945      -23.5022       23.5022       987.310       1010.81    
  31  0.458067     -0.780739      -8.78180       8.78180       968.905       977.687    
  32  0.989772     -0.102804E-01 -0.115634      0.115634       1004.17       1004.29    
  33  0.292614      -1.22890      -13.8227       13.8227       998.357       1012.18    
  34  0.707885     -0.345474      -3.88591       3.88591       1005.98       1009.87    
  35  0.686290     -0.376455      -4.23439       4.23439       985.710       989.944    
  36  0.752747     -0.284026      -3.19474       3.19474       1004.20       1007.40    
  37  0.577950E-01  -2.85085      -32.0666       32.0666       1015.09       1047.16    
  38  0.496568E-02  -5.30521      -59.6733       59.6733       1012.80       1072.48    
  39  0.632817     -0.457575      -5.14683       5.14683       984.896       990.042    
  40  0.306568      -1.18232      -13.2988       13.2988       993.949       1007.25    
  41  0.800757     -0.222198      -2.49929       2.49929       1021.00       1023.50    
  42  0.754206     -0.282090      -3.17296       3.17296       1019.02       1022.19    
  43  0.875958     -0.132437      -1.48966       1.48966       1024.69       1026.18    
  44  0.411581     -0.887750      -9.98547       9.98547       983.579       993.564    
  45  0.784837     -0.242279      -2.72517       2.72517       1023.79       1026.51    
  46  0.615964     -0.484567      -5.45044       5.45044       1004.30       1009.75    
  47  0.427318     -0.850227      -9.56341       9.56341       1024.24       1033.81    
  48  0.373288     -0.985405      -11.0839       11.0839       1017.12       1028.20    
  49  0.118712      -2.13106      -23.9703       23.9703       1025.47       1049.44    
  50  0.465204     -0.765279      -8.60790       8.60790       1034.35       1042.95    
  51  0.361628      -1.01714      -11.4408       11.4408       1036.72       1048.16    
  52  0.625886     -0.468587      -5.27070       5.27070       1031.63       1036.90    
  53  0.164441      -1.80521      -20.3051       20.3051       1048.92       1069.22    
loop,thermsimp(1:2)       14   7.01196       1.16001    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353       1006.86          0.86          1.14         21.91          0.00          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1006.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       14
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       15
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      352     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -17.5497       17.5497       934.437       951.987    
   2  0.682169     -0.382478      -4.30213       4.30213       931.542       935.844    
   3  0.831163     -0.184930      -2.08010       2.08010       944.199       946.279    
   4  0.625179     -0.469718      -5.28341       5.28341       943.606       948.889    
   5  0.907522     -0.970376E-01  -1.09148       1.09148       943.917       945.009    
   6  0.406703     -0.899672      -10.1196       10.1196       946.467       956.586    
   7  0.463060     -0.769899      -8.65987       8.65987       962.533       971.193    
   8  0.206056      -1.57961      -17.7675       17.7675       974.601       992.369    
   9  0.303716      -1.19166      -13.4039       13.4039       971.915       985.319    
  10  0.843889     -0.169734      -1.90918       1.90918       968.905       970.814    
  11  0.273678      -1.29580      -14.5753       14.5753       973.408       987.984    
  12  0.571842     -0.558892      -6.28645       6.28645       975.399       981.685    
  13  0.803131     -0.219238      -2.46600       2.46600       983.320       985.786    
  14  0.330375      -1.10753      -12.4575       12.4575       983.679       996.137    
  15  0.155557      -1.86074      -20.9298       20.9298       988.093       1009.02    
  16  0.878823     -0.129172      -1.45293       1.45293       986.238       987.691    
  17  0.781654     -0.246343      -2.77088       2.77088       950.272       953.043    
  18  0.782655     -0.245064      -2.75649       2.75649       985.710       988.466    
  19  0.682155     -0.382499      -4.30237       4.30237       984.896       989.198    
  20  0.899702     -0.105691      -1.18882       1.18882       974.618       975.807    
  21  0.444808     -0.810113      -9.11219       9.11219       986.168       995.280    
  22  0.495252     -0.702688      -7.90388       7.90388       987.251       995.155    
  23  0.640834     -0.444984      -5.00521       5.00521       983.579       988.584    
  24  0.314465      -1.15688      -13.0127       13.0127       980.018       993.031    
  25  0.368564     -0.998140      -11.2271       11.2271       995.410       1006.64    
  26  0.572254E-02  -5.16334      -58.0776       58.0776       996.403       1054.48    
  27  0.468080E-01  -3.06170      -34.4382       34.4382       995.346       1029.78    
  28  0.598693E-01  -2.81559      -31.6699       31.6699       1000.42       1032.09    
  29  0.658687     -0.417508      -4.69615       4.69615       1000.12       1004.82    
  30  0.449565     -0.799475      -8.99254       8.99254       1004.17       1013.17    
  31  0.799405     -0.223887      -2.51829       2.51829       988.084       990.602    
  32  0.414416     -0.880885      -9.90825       9.90825       993.949       1003.86    
  33  0.395703E-01  -3.22968      -36.3276       36.3276       1004.20       1040.53    
  34  0.704129E-01  -2.65338      -29.8454       29.8454       1002.55       1032.40    
  35  0.336217      -1.09000      -12.2604       12.2604       1004.30       1016.56    
  36  0.169926      -1.77239      -19.9360       19.9360       1005.98       1025.92    
  37  0.846601E-01  -2.46911      -27.7727       27.7727       987.310       1015.08    
  38  0.798628     -0.224860      -2.52924       2.52924       998.357       1000.89    
  39  0.377891     -0.973150      -10.9461       10.9461       996.274       1007.22    
  40  0.183739      -1.69424      -19.0569       19.0569       1019.02       1038.07    
  41  0.930280     -0.722695E-01 -0.812892      0.812892       1021.00       1021.82    
  42  0.280682      -1.27053      -14.2910       14.2910       1024.69       1038.98    
  43  0.475397     -0.743606      -8.36412       8.36412       1023.79       1032.15    
  44  0.705714     -0.348545      -3.92046       3.92046       1017.12       1021.04    
  45  0.307479      -1.17935      -13.2654       13.2654       978.958       992.223    
  46  0.408291     -0.895776      -10.0757       10.0757       1024.24       1034.32    
  47  0.174897      -1.74356      -19.6116       19.6116       1031.63       1051.24    
  48  0.462267     -0.771612      -8.67914       8.67914       1034.35       1043.02    
  49  0.805682E-01  -2.51865      -28.3299       28.3299       1015.09       1043.42    
  50  0.276714      -1.28477      -14.4512       14.4512       1036.72       1051.17    
  51  0.914639     -0.892253E-01  -1.00361       1.00361       1025.47       1026.47    
  52  0.575354     -0.552769      -6.21758       6.21758       1048.92       1055.13    
  53  0.537577     -0.620684      -6.98149       6.98149       1006.86       1013.84    
loop,thermsimp(1:2)       15   17.5497       4.30213    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354       1034.65          0.84          1.14         22.16          0.01          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1034.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       15
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       16
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      353     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -30.6962       30.6962       931.542       962.238    
   2  0.388935     -0.944342      -10.6220       10.6220       943.917       954.539    
   3  0.716732     -0.333053      -3.74620       3.74620       944.199       947.945    
   4  0.375936     -0.978336      -11.0044       11.0044       943.606       954.610    
   5  0.518505E-01  -2.95939      -33.2874       33.2874       934.437       967.725    
   6  0.892279     -0.113976      -1.28201       1.28201       950.272       951.554    
   7  0.145412      -1.92818      -21.6883       21.6883       946.467       968.155    
   8  0.759376E-01  -2.57784      -28.9957       28.9957       968.905       997.901    
   9  0.799111     -0.224255      -2.52243       2.52243       962.533       965.055    
  10  0.566636     -0.568038      -6.38933       6.38933       974.618       981.008    
  11  0.957834     -0.430803E-01 -0.484570      0.484570       975.399       975.883    
  12  0.421133     -0.864808      -9.72741       9.72741       971.915       981.642    
  13  0.965171     -0.354495E-01 -0.398739      0.398739       983.320       983.718    
  14  0.527073     -0.640416      -7.20343       7.20343       986.238       993.441    
  15  0.221584      -1.50695      -16.9503       16.9503       973.408       990.359    
  16  0.675180     -0.392776      -4.41797       4.41797       985.710       990.128    
  17  0.462159     -0.771846      -8.68177       8.68177       983.579       992.260    
  18  0.134826      -2.00377      -22.5385       22.5385       984.896       1007.43    
  19  0.869165     -0.140222      -1.57723       1.57723       988.084       989.661    
  20  0.898965     -0.106511      -1.19804       1.19804       978.958       980.156    
  21  0.174160      -1.74778      -19.6591       19.6591       974.601       994.260    
  22  0.463810     -0.768281      -8.64167       8.64167       980.018       988.660    
  23  0.145870      -1.92504      -21.6529       21.6529       987.251       1008.90    
  24  0.525172     -0.644029      -7.24408       7.24408       986.168       993.412    
  25  0.667609     -0.404052      -4.54480       4.54480       983.679       988.224    
  26  0.964408     -0.362405E-01 -0.407635      0.407635       998.357       998.765    
  27  0.981636     -0.185350E-01 -0.208482      0.208482       993.949       994.158    
  28  0.585742     -0.534875      -6.01631       6.01631       1000.12       1006.14    
  29  0.956106     -0.448864E-01 -0.504885      0.504885       995.410       995.915    
  30  0.153686      -1.87284      -21.0659       21.0659       996.274       1017.34    
  31  0.937356     -0.646920E-01 -0.727660      0.727660       988.093       988.821    
  32  0.821414     -0.196728      -2.21281       2.21281       1004.17       1006.39    
  33  0.901583     -0.103603      -1.16533       1.16533       1006.86       1008.03    
  34  0.145469      -1.92779      -21.6839       21.6839       987.310       1008.99    
  35  0.944310     -0.573011E-01 -0.644526      0.644526       1004.30       1004.94    
  36  0.639748     -0.446680      -5.02429       5.02429       1017.12       1022.15    
  37  0.533071     -0.629101      -7.07616       7.07616       1021.00       1028.08    
  38  0.708805     -0.344175      -3.87130       3.87130       1005.98       1009.85    
  39  0.953023     -0.481167E-01 -0.541219      0.541219       1025.47       1026.01    
  40  0.606832     -0.499502      -5.61843       5.61843       995.346       1000.96    
  41  0.791257     -0.234132      -2.63353       2.63353       1000.42       1003.05    
  42  0.203064      -1.59423      -17.9320       17.9320       1023.79       1041.72    
  43  0.168642      -1.77998      -20.0213       20.0213       1002.55       1022.57    
  44  0.718173     -0.331045      -3.72362       3.72362       1024.24       1027.97    
  45  0.976939E-02  -4.62850      -52.0617       52.0617       1019.02       1071.08    
  46  0.211685      -1.55265      -17.4644       17.4644       1024.69       1042.15    
  47  0.624191     -0.471298      -5.30119       5.30119       1004.20       1009.50    
  48  0.749801     -0.287948      -3.23885       3.23885       1034.35       1037.58    
  49  0.710340     -0.342011      -3.84696       3.84696       1015.09       1018.94    
  50  0.447179     -0.804797      -9.05240       9.05240       1036.72       1045.77    
  51  0.567779     -0.566023      -6.36666       6.36666       1031.63       1037.99    
  52  0.262390      -1.33792      -15.0491       15.0491       996.403       1011.45    
  53  0.907024     -0.975861E-01  -1.09765       1.09765       1034.65       1035.75    
loop,thermsimp(1:2)       16   30.6962       10.6220    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355       1037.18          0.85          1.14         22.00          0.00          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1037.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       16
neval is:      354
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       17
neval is:      354


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      354     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -8.04743       8.04743       944.199       952.246    
   2  0.243137      -1.41413      -15.9062       15.9062       950.272       966.178    
   3  0.530653     -0.633646      -7.12729       7.12729       943.917       951.045    
   4  0.926282     -0.765763E-01 -0.861334      0.861334       943.606       944.467    
   5  0.374288     -0.982729      -11.0538       11.0538       931.542       942.596    
   6  0.675293     -0.392608      -4.41608       4.41608       962.533       966.949    
   7  0.605942     -0.500970      -5.63494       5.63494       934.437       940.072    
   8  0.280229      -1.27215      -14.3092       14.3092       946.467       960.776    
   9  0.297259      -1.21315      -13.6456       13.6456       975.399       989.044    
  10  0.697504E-01  -2.66283      -29.9517       29.9517       978.958       1008.91    
  11  0.824348     -0.193163      -2.17271       2.17271       974.618       976.791    
  12  0.750452     -0.287080      -3.22909       3.22909       971.915       975.144    
  13  0.120595      -2.11532      -23.7932       23.7932       983.320       1007.11    
  14  0.935324     -0.668625E-01 -0.752073      0.752073       983.679       984.431    
  15  0.215551      -1.53456      -17.2608       17.2608       980.018       997.279    
  16  0.708821     -0.344153      -3.87105       3.87105       988.093       991.964    
  17  0.402499     -0.910063      -10.2364       10.2364       988.084       998.321    
  18  0.836443     -0.178597      -2.00887       2.00887       985.710       987.719    
  19  0.969979E-01  -2.33307      -26.2425       26.2425       973.408       999.651    
  20  0.178795      -1.72152      -19.3637       19.3637       983.579       1002.94    
  21  0.140077      -1.96556      -22.1087       22.1087       986.168       1008.28    
  22  0.375507     -0.979479      -11.0172       11.0172       986.238       997.255    
  23  0.831487     -0.184540      -2.07571       2.07571       993.949       996.025    
  24  0.815951     -0.203401      -2.28786       2.28786       974.601       976.889    
  25  0.468603     -0.757998      -8.52601       8.52601       995.410       1003.94    
  26  0.677551     -0.389270      -4.37854       4.37854       968.905       973.284    
  27  0.169538      -1.77468      -19.9617       19.9617       998.357       1018.32    
  28  0.950448     -0.508223E-01 -0.571652      0.571652       995.346       995.917    
  29  0.981726     -0.184427E-01 -0.207445      0.207445       1000.42       1000.63    
  30  0.442406     -0.815527      -9.17310       9.17310       1004.30       1013.47    
  31  0.531953     -0.631200      -7.09978       7.09978       1000.12       1007.22    
  32  0.363692      -1.01145      -11.3768       11.3768       1004.17       1015.55    
  33  0.144511E-01  -4.23698      -47.6578       47.6578       984.896       1032.55    
  34  0.748780     -0.289310      -3.25418       3.25418       1006.86       1010.12    
  35  0.195075      -1.63437      -18.3835       18.3835       987.251       1005.63    
  36  0.440325     -0.820241      -9.22612       9.22612       987.310       996.536    
  37  0.805864     -0.215841      -2.42779       2.42779       1004.20       1006.63    
  38  0.921415     -0.818451E-01 -0.920598      0.920598       1005.98       1006.90    
  39  0.296293      -1.21641      -13.6822       13.6822       996.403       1010.08    
  40  0.645874E-01  -2.73974      -30.8167       30.8167       996.274       1027.09    
  41  0.488279     -0.716868      -8.06337       8.06337       1015.09       1023.16    
  42  0.573105     -0.556686      -6.26164       6.26164       1017.12       1023.38    
  43  0.967891     -0.326356E-01 -0.367087      0.367087       1002.55       1002.92    
  44  0.780434E-01  -2.55049      -28.6881       28.6881       1025.47       1054.16    
  45  0.968859     -0.316363E-01 -0.355847      0.355847       1024.24       1024.60    
  46  0.858835     -0.152178      -1.71171       1.71171       1021.00       1022.71    
  47  0.968806     -0.316911E-01 -0.356464      0.356464       1034.65       1035.01    
  48  0.134500      -2.00619      -22.5657       22.5657       1034.35       1056.91    
  49  0.993707     -0.631323E-02 -0.710116E-01  0.710116E-01   1031.63       1031.70    
  50  0.300401      -1.20264      -13.5273       13.5273       1023.79       1037.31    
  51  0.166933      -1.79016      -20.1359       20.1359       1024.69       1044.82    
  52  0.917937     -0.856264E-01 -0.963131      0.963131       1036.72       1037.68    
  53  0.587259     -0.532289      -5.98722       5.98722       1037.18       1043.17    
loop,thermsimp(1:2)       17   8.04743       15.9062    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    356       1043.31          0.86          1.16         21.91          0.00          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1043.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       17
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       18
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      355     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -8.00963       8.00963       934.437       942.447    
   2  0.486668     -0.720173      -8.10055       8.10055       931.542       939.643    
   3  0.319995E-01  -3.44203      -38.7162       38.7162       943.606       982.322    
   4  0.957863     -0.430503E-01 -0.484232      0.484232       943.917       944.401    
   5  0.713202E-01  -2.64058      -29.7013       29.7013       944.199       973.900    
   6  0.677570     -0.389242      -4.37822       4.37822       946.467       950.845    
   7  0.533853     -0.627634      -7.05966       7.05966       950.272       957.331    
   8  0.963967     -0.366984E-01 -0.412786      0.412786       962.533       962.946    
   9  0.590118     -0.527432      -5.93259       5.93259       968.905       974.838    
  10  0.102350      -2.27936      -25.6383       25.6383       971.915       997.553    
  11  0.313487      -1.16000      -13.0477       13.0477       974.618       987.666    
  12  0.876181     -0.132183      -1.48680       1.48680       974.601       976.088    
  13  0.780541     -0.247768      -2.78691       2.78691       983.679       986.466    
  14  0.222922      -1.50093      -16.8826       16.8826       985.710       1002.59    
  15  0.913991     -0.899351E-01  -1.01160       1.01160       975.399       976.410    
  16  0.493176     -0.706888      -7.95112       7.95112       988.093       996.044    
  17  0.884766     -0.122432      -1.37712       1.37712       995.346       996.723    
  18  0.576549E-01  -2.85328      -32.0939       32.0939       993.949       1026.04    
  19  0.398597     -0.919804      -10.3460       10.3460       987.310       997.656    
  20  0.980633     -0.195573E-01 -0.219982      0.219982       986.238       986.458    
  21  0.304985      -1.18749      -13.3570       13.3570       980.018       993.375    
  22  0.628666     -0.464156      -5.22085       5.22085       988.084       993.305    
  23  0.367895     -0.999957      -11.2476       11.2476       973.408       984.656    
  24  0.442302     -0.815762      -9.17574       9.17574       1000.42       1009.60    
  25  0.656121     -0.421410      -4.74004       4.74004       1002.55       1007.29    
  26  0.229893      -1.47014      -16.5362       16.5362       983.579       1000.11    
  27  0.475469     -0.743453      -8.36240       8.36240       995.410       1003.77    
  28  0.801985     -0.220665      -2.48205       2.48205       987.251       989.733    
  29  0.454630     -0.788272      -8.86653       8.86653       1004.20       1013.07    
  30  0.858022     -0.153126      -1.72237       1.72237       1005.98       1007.70    
  31  0.692704     -0.367153      -4.12976       4.12976       983.320       987.449    
  32  0.466274     -0.762981      -8.58206       8.58206       1000.12       1008.70    
  33  0.682446     -0.382072      -4.29757       4.29757       986.168       990.466    
  34  0.660760     -0.414365      -4.66080       4.66080       978.958       983.619    
  35  0.957519     -0.434092E-01 -0.488270      0.488270       996.403       996.891    
  36  0.108167      -2.22408      -25.0166       25.0166       1006.86       1031.88    
  37  0.846378     -0.166789      -1.87606       1.87606       1004.30       1006.18    
  38  0.621158E-01  -2.77876      -31.2556       31.2556       1004.17       1035.43    
  39  0.988945E-01  -2.31370      -26.0247       26.0247       998.357       1024.38    
  40  0.253472      -1.37250      -15.4380       15.4380       1021.00       1036.44    
  41  0.915015     -0.888152E-01 -0.998998      0.998998       1015.09       1016.09    
  42  0.662342     -0.411973      -4.63389       4.63389       1017.12       1021.75    
  43  0.210223      -1.55959      -17.5423       17.5423       1024.24       1041.78    
  44  0.141043      -1.95869      -22.0315       22.0315       996.274       1018.31    
  45  0.839834     -0.174551      -1.96336       1.96336       1031.63       1033.59    
  46  0.132358      -2.02225      -22.7463       22.7463       984.896       1007.64    
  47  0.129895E-01  -4.34361      -48.8572       48.8572       1034.65       1083.51    
  48  0.795497     -0.228788      -2.57342       2.57342       1023.79       1026.36    
  49  0.547485     -0.602421      -6.77607       6.77607       1036.72       1043.49    
  50  0.137643      -1.98309      -22.3059       22.3059       1037.18       1059.49    
  51  0.603188     -0.505526      -5.68619       5.68619       1024.69       1030.37    
  52  0.394039     -0.931305      -10.4754       10.4754       1025.47       1035.94    
  53  0.777307     -0.251920      -2.83361       2.83361       1043.31       1046.14    
loop,thermsimp(1:2)       18   8.00963       8.10055    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357       1044.17          0.84          1.15         21.84          0.00          0.05         23.88
Just calling func    0   0         23.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1044.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       18
neval is:      356
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       19
neval is:      356


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      356     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -20.9598       20.9598       931.542       952.502    
   2  0.881882     -0.125697      -1.41385       1.41385       934.437       935.851    
   3  0.908319     -0.961592E-01  -1.08160       1.08160       943.917       944.999    
   4  0.732380     -0.311455      -3.50327       3.50327       946.467       949.970    
   5  0.367412      -1.00127      -11.2624       11.2624       950.272       961.534    
   6  0.624330     -0.471077      -5.29870       5.29870       962.533       967.832    
   7  0.833858     -0.181693      -2.04369       2.04369       944.199       946.243    
   8  0.194603E-02  -6.24197      -70.2100       70.2100       968.905       1039.12    
   9  0.995416     -0.459497E-02 -0.516845E-01  0.516845E-01   974.601       974.653    
  10  0.665599     -0.407068      -4.57872       4.57872       975.399       979.977    
  11  0.747574     -0.290922      -3.27231       3.27231       943.606       946.878    
  12  0.539692     -0.616756      -6.93731       6.93731       978.958       985.895    
  13  0.958323     -0.425700E-01 -0.478830      0.478830       973.408       973.887    
  14  0.111027      -2.19798      -24.7231       24.7231       986.238       1010.96    
  15  0.520965     -0.652072      -7.33454       7.33454       983.679       991.014    
  16  0.177207E-01  -4.03302      -45.3637       45.3637       983.320       1028.68    
  17  0.860365     -0.150398      -1.69169       1.69169       974.618       976.310    
  18  0.383700     -0.957895      -10.7745       10.7745       987.251       998.026    
  19  0.524904     -0.644539      -7.24981       7.24981       986.168       993.418    
  20  0.589629     -0.528262      -5.94192       5.94192       988.084       994.026    
  21  0.125125      -2.07844      -23.3784       23.3784       980.018       1003.40    
  22  0.154207      -1.86946      -21.0278       21.0278       988.093       1009.12    
  23  0.752747     -0.284026      -3.19475       3.19475       995.346       998.540    
  24  0.551286     -0.595501      -6.69823       6.69823       996.403       1003.10    
  25  0.733343     -0.310142      -3.48849       3.48849       971.915       975.403    
  26  0.904985     -0.998368E-01  -1.12297       1.12297       987.310       988.433    
  27  0.987632     -0.124455E-01 -0.139988      0.139988       983.579       983.719    
  28  0.228587      -1.47584      -16.6003       16.6003       985.710       1002.31    
  29  0.384883     -0.954815      -10.7398       10.7398       995.410       1006.15    
  30  0.781910     -0.246015      -2.76719       2.76719       1004.30       1007.07    
  31  0.402051E-02  -5.51635      -62.0482       62.0482       1002.55       1064.60    
  32  0.880575     -0.127180      -1.43053       1.43053       984.896       986.326    
  33  0.427180     -0.850550      -9.56704       9.56704       1005.98       1015.55    
  34  0.613064     -0.489286      -5.50352       5.50352       1000.12       1005.63    
  35  0.529053     -0.636668      -7.16128       7.16128       1000.42       1007.58    
  36  0.973505     -0.268519E-01 -0.302032      0.302032       1004.20       1004.51    
  37  0.889868     -0.116682      -1.31245       1.31245       1015.09       1016.41    
  38  0.133989      -2.01000      -22.6086       22.6086       996.274       1018.88    
  39  0.289828      -1.23847      -13.9304       13.9304       1017.12       1031.05    
  40  0.724995     -0.321591      -3.61727       3.61727       998.357       1001.97    
  41  0.547932     -0.601605      -6.76688       6.76688       993.949       1000.72    
  42  0.608240E-01  -2.79977      -31.4920       31.4920       1023.79       1055.28    
  43  0.481259E-01  -3.03393      -34.1259       34.1259       1024.69       1058.81    
  44  0.356843      -1.03046      -11.5907       11.5907       1006.86       1018.45    
  45  0.417411     -0.873685      -9.82726       9.82726       1031.63       1041.45    
  46  0.918903     -0.845742E-01 -0.951296      0.951296       1004.17       1005.12    
  47  0.852285     -0.159834      -1.79782       1.79782       1025.47       1027.27    
  48  0.744864     -0.294553      -3.31316       3.31316       1021.00       1024.32    
  49  0.128521      -2.05166      -23.0772       23.0772       1024.24       1047.32    
  50  0.484639     -0.724351      -8.14754       8.14754       1036.72       1044.87    
  51  0.478847     -0.736375      -8.28279       8.28279       1043.31       1051.59    
  52  0.557656     -0.584013      -6.56901       6.56901       1037.18       1043.75    
  53  0.799673     -0.223552      -2.51452       2.51452       1044.17       1046.68    
loop,thermsimp(1:2)       19   20.9598       1.41385    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    358        994.78          0.85          1.14         21.91          0.01          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    994.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       19
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       20
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      357     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -14.6119       14.6119       934.437       949.049    
   2  0.284829      -1.25587      -14.1261       14.1261       943.917       958.043    
   3  0.422534E-01  -3.16407      -35.5897       35.5897       944.199       979.789    
   4  0.788018E-01  -2.54082      -28.5793       28.5793       943.606       972.185    
   5  0.396626E-01  -3.22735      -36.3014       36.3014       946.467       982.768    
   6  0.412432     -0.885684      -9.96222       9.96222       931.542       941.504    
   7  0.390866     -0.939390      -10.5663       10.5663       950.272       960.838    
   8  0.853334     -0.158604      -1.78398       1.78398       962.533       964.317    
   9  0.506127     -0.680968      -7.65956       7.65956       973.408       981.068    
  10  0.254200      -1.36963      -15.4057       15.4057       974.601       990.007    
  11  0.643116     -0.441430      -4.96524       4.96524       971.915       976.880    
  12  0.897721     -0.107896      -1.21362       1.21362       974.618       975.832    
  13  0.830899     -0.185247      -2.08367       2.08367       975.399       977.482    
  14  0.357312      -1.02915      -11.5759       11.5759       983.579       995.155    
  15  0.525942     -0.642564      -7.22760       7.22760       978.958       986.185    
  16  0.742929     -0.297155      -3.34241       3.34241       984.896       988.238    
  17  0.970959     -0.294711E-01 -0.331493      0.331493       987.310       987.641    
  18  0.235894      -1.44437      -16.2464       16.2464       983.679       999.926    
  19  0.723381E-01  -2.62640      -29.5420       29.5420       986.168       1015.71    
  20  0.190915      -1.65593      -18.6260       18.6260       988.084       1006.71    
  21  0.524670     -0.644986      -7.25485       7.25485       987.251       994.506    
  22  0.536043     -0.623540      -7.01362       7.01362       995.346       1002.36    
  23  0.281730      -1.26681      -14.2491       14.2491       993.949       1008.20    
  24  0.747791     -0.290632      -3.26904       3.26904       998.357       1001.63    
  25  0.255771      -1.36347      -15.3364       15.3364       985.710       1001.05    
  26  0.194866      -1.63544      -18.3956       18.3956       996.403       1014.80    
  27  0.639630     -0.446865      -5.02636       5.02636       980.018       985.044    
  28  0.485808     -0.721941      -8.12044       8.12044       1004.20       1012.32    
  29  0.659147     -0.416809      -4.68830       4.68830       1004.17       1008.86    
  30  0.196308      -1.62807      -18.3126       18.3126       1000.12       1018.43    
  31  0.308964      -1.17453      -13.2112       13.2112       995.410       1008.62    
  32  0.181287      -1.70768      -19.2080       19.2080       1004.30       1023.51    
  33  0.386667     -0.950191      -10.6878       10.6878       1000.42       1011.11    
  34  0.947825     -0.535853E-01 -0.602731      0.602731       988.093       988.696    
  35  0.699942     -0.356758      -4.01284       4.01284       986.238       990.251    
  36  0.208747      -1.56663      -17.6216       17.6216       1005.98       1023.60    
  37  0.717648     -0.331775      -3.73183       3.73183       1015.09       1018.83    
  38  0.734922     -0.307991      -3.46430       3.46430       1006.86       1010.33    
  39  0.862816     -0.147554      -1.65970       1.65970       996.274       997.934    
  40  0.677494     -0.389354      -4.37948       4.37948       1021.00       1025.38    
  41  0.829375     -0.187082      -2.10431       2.10431       1025.47       1027.57    
  42  0.393856     -0.931770      -10.4806       10.4806       983.320       993.800    
  43  0.447370     -0.804370      -9.04760       9.04760       1017.12       1026.17    
  44  0.485389     -0.722806      -8.13016       8.13016       968.905       977.035    
  45  0.522363     -0.649392      -7.30440       7.30440       1031.63       1038.93    
  46  0.740056E-01  -2.60361      -29.2856       29.2856       1037.18       1066.47    
  47  0.396252     -0.925705      -10.4124       10.4124       1036.72       1047.13    
  48  0.429395     -0.845378      -9.50887       9.50887       1044.17       1053.68    
  49  0.865472     -0.144480      -1.62512       1.62512       1024.24       1025.87    
  50  0.103085      -2.27220      -25.5579       25.5579       1043.31       1068.87    
  51  0.257437      -1.35698      -15.2634       15.2634       1023.79       1039.05    
  52  0.136338      -1.99262      -22.4131       22.4131       1024.69       1047.10    
  53  0.153596      -1.87343      -21.0725       21.0725       994.784       1015.86    
loop,thermsimp(1:2)       20   14.6119       14.1261    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359       1054.22          0.85          1.13         21.82          0.10          0.05         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1054.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       20
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       21
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      358     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -31.0277       31.0277       931.542       962.570    
   2  0.713782     -0.337177      -3.79259       3.79259       934.437       938.230    
   3  0.851614     -0.160622      -1.80669       1.80669       943.917       945.724    
   4  0.721769     -0.326050      -3.66743       3.66743       950.272       953.939    
   5  0.954937     -0.461102E-01 -0.518650      0.518650       962.533       963.052    
   6  0.302532E-01  -3.49815      -39.3474       39.3474       943.606       982.953    
   7  0.942920E-01  -2.36136      -26.5607       26.5607       974.618       1001.18    
   8  0.515750E-01  -2.96472      -33.3473       33.3473       971.915       1005.26    
   9  0.612753     -0.489794      -5.50923       5.50923       968.905       974.414    
  10  0.758041     -0.277018      -3.11591       3.11591       975.399       978.514    
  11  0.530485E-01  -2.93655      -33.0305       33.0305       944.199       977.229    
  12  0.941175     -0.606258E-01 -0.681923      0.681923       973.408       974.090    
  13  0.167539      -1.78654      -20.0951       20.0951       946.467       966.562    
  14  0.738662E-01  -2.60550      -29.3068       29.3068       980.018       1009.32    
  15  0.822155     -0.195827      -2.20267       2.20267       978.958       981.160    
  16  0.578765     -0.546859      -6.15110       6.15110       987.310       993.461    
  17  0.912739E-01  -2.39389      -26.9266       26.9266       984.896       1011.82    
  18  0.949215     -0.521197E-01 -0.586245      0.586245       988.093       988.679    
  19  0.485124     -0.723351      -8.13629       8.13629       974.601       982.737    
  20  0.359009      -1.02441      -11.5226       11.5226       986.238       997.760    
  21  0.747559     -0.290942      -3.27254       3.27254       983.320       986.592    
  22  0.482847     -0.728056      -8.18922       8.18922       987.251       995.440    
  23  0.994301     -0.571526E-02 -0.642856E-01  0.642856E-01   983.579       983.643    
  24  0.937801     -0.642177E-01 -0.722324      0.722324       996.274       996.997    
  25  0.699033     -0.358058      -4.02746       4.02746       983.679       987.707    
  26  0.358162      -1.02677      -11.5492       11.5492       985.710       997.259    
  27  0.746418     -0.292470      -3.28971       3.28971       998.357       1001.65    
  28  0.532195     -0.630744      -7.09465       7.09465       995.346       1002.44    
  29  0.727066     -0.318738      -3.58519       3.58519       988.084       991.669    
  30  0.461510     -0.773252      -8.69758       8.69758       993.949       1002.65    
  31  0.285112      -1.25487      -14.1149       14.1149       995.410       1009.52    
  32  0.316830      -1.14939      -12.9284       12.9284       1004.17       1017.10    
  33  0.835731     -0.179448      -2.01844       2.01844       1006.86       1008.88    
  34  0.516269E-02  -5.26630      -59.2356       59.2356       1000.42       1059.66    
  35  0.309002      -1.17441      -13.2098       13.2098       1004.20       1017.41    
  36  0.770766     -0.260370      -2.92866       2.92866       996.403       999.331    
  37  0.878913     -0.129069      -1.45177       1.45177       986.168       987.620    
  38  0.981341E-01  -2.32142      -26.1115       26.1115       994.784       1020.90    
  39  0.634060     -0.455612      -5.12475       5.12475       1000.12       1005.25    
  40  0.359967      -1.02174      -11.4926       11.4926       1015.09       1026.59    
  41  0.480002     -0.733964      -8.25567       8.25567       1004.30       1012.56    
  42  0.706923     -0.346834      -3.90121       3.90121       1005.98       1009.88    
  43  0.497828     -0.697501      -7.84553       7.84553       1021.00       1028.85    
  44  0.885038     -0.122125      -1.37366       1.37366       1024.24       1025.62    
  45  0.504752     -0.683689      -7.69017       7.69017       1017.12       1024.81    
  46  0.719262     -0.329529      -3.70657       3.70657       1025.47       1029.17    
  47  0.516359     -0.660954      -7.43445       7.43445       1031.63       1039.06    
  48  0.584389E-01  -2.83977      -31.9419       31.9419       1023.79       1055.73    
  49  0.768960E-01  -2.56530      -28.8547       28.8547       1024.69       1053.54    
  50  0.253658      -1.37177      -15.4297       15.4297       1036.72       1052.15    
  51  0.451822     -0.794468      -8.93622       8.93622       1044.17       1053.11    
  52  0.816822     -0.202334      -2.27586       2.27586       1037.18       1039.46    
  53  0.774668     -0.255321      -2.87187       2.87187       1054.22       1057.09    
loop,thermsimp(1:2)       21   31.0277       3.79259    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    360        935.69          0.85          1.14         21.80          0.09          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    361        941.42          0.85          1.14         21.89          0.07          0.05         24.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    941.42        6.506     -1.858      4.531     -102.6      1.586    
                       1.004      1.019     -99.70      3.630      1.430    

                       1.496     -2.248      1.540      7000.      7000.    

                      -1.594      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -8.586     -7.196     -11.16      7.112    

                      -13.74     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1620E-01 0.3706    -0.8333E-02 0.2595    

                     -0.2486    -0.1770E-01 0.2493     0.2232     0.2013    



                     -0.4240    -0.7341      0.000     0.1591    -0.1085    

                      0.6204E-01 0.2490    -0.7116    -0.3872E-01 0.3827    

                      0.1003     0.1572    -0.5347     -1.458      7000.    



                      -1.679     -1.272     -2.142     -1.982    -0.3807    

                     -0.3252      9.452      8.678    -0.1672E+05 -6.000    

                     -0.1475     -2.116      9.320      8.867    -0.1969E+05



                      -6.000      1.043    -0.1708      8.908      9.134    

                     -0.1944E+05 -6.000    -0.3818    -0.2832E-01  9.092    

                       8.931    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    935.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       21
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       22
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      360     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -9.36666       9.36666       934.437       943.804    
   2  0.380177E-01  -3.26970      -36.7778       36.7778       943.917       980.695    
   3  0.198795      -1.61548      -18.1710       18.1710       950.272       968.443    
   4  0.880944E-01  -2.42935      -27.3254       27.3254       931.542       958.867    
   5  0.279105      -1.27617      -14.3544       14.3544       962.533       976.887    
   6  0.379482     -0.968948      -10.8988       10.8988       946.467       957.365    
   7  0.510142     -0.673065      -7.57068       7.57068       973.408       980.979    
   8  0.869007     -0.140404      -1.57927       1.57927       968.905       970.484    
   9  0.905256     -0.995378E-01  -1.11961       1.11961       944.199       945.319    
  10  0.587200     -0.532390      -5.98835       5.98835       975.399       981.387    
  11  0.309008      -1.17439      -13.2096       13.2096       978.958       992.167    
  12  0.210718      -1.55723      -17.5159       17.5159       974.601       992.117    
  13  0.362152      -1.01569      -11.4246       11.4246       943.606       955.031    
  14  0.465452     -0.764747      -8.60192       8.60192       983.579       992.181    
  15  0.155270E-01  -4.16518      -46.8502       46.8502       983.320       1030.17    
  16  0.632166     -0.458603      -5.15839       5.15839       986.168       991.327    
  17  0.171028      -1.76593      -19.8633       19.8633       983.679       1003.54    
  18  0.926401     -0.764482E-01 -0.859894      0.859894       988.093       988.953    
  19  0.130449      -2.03678      -22.9098       22.9098       988.084       1010.99    
  20  0.536069     -0.623492      -7.01308       7.01308       987.310       994.323    
  21  0.128128      -2.05472      -23.1117       23.1117       987.251       1010.36    
  22  0.729730     -0.315081      -3.54405       3.54405       996.274       999.818    
  23  0.982387     -0.177702E-01 -0.199880      0.199880       985.710       985.910    
  24  0.707707     -0.345726      -3.88874       3.88874       986.238       990.127    
  25  0.643878     -0.440245      -4.95191       4.95191       996.403       1001.35    
  26  0.136721      -1.98982      -22.3816       22.3816       974.618       997.000    
  27  0.146320      -1.92196      -21.6183       21.6183       998.357       1019.98    
  28  0.214169      -1.54099      -17.3332       17.3332       995.346       1012.68    
  29  0.774008     -0.256172      -2.88144       2.88144       993.949       996.831    
  30  0.487333     -0.718808      -8.08520       8.08520       1000.12       1008.21    
  31  0.594481E-01  -2.82265      -31.7494       31.7494       971.915       1003.66    
  32  0.305368      -1.18624      -13.3429       13.3429       1006.86       1020.21    
  33  0.206200      -1.57891      -17.7597       17.7597       980.018       997.778    
  34  0.185235      -1.68613      -18.9657       18.9657       995.410       1014.38    
  35  0.945154     -0.564077E-01 -0.634478      0.634478       1005.98       1006.62    
  36  0.657328     -0.419572      -4.71937       4.71937       984.896       989.615    
  37  0.932191     -0.702171E-01 -0.789806      0.789806       1004.30       1005.09    
  38  0.258055      -1.35458      -15.2364       15.2364       1004.17       1019.41    
  39  0.525568E-01  -2.94586      -33.1352       33.1352       1004.20       1037.34    
  40  0.692807     -0.367004      -4.12808       4.12808       994.784       998.912    
  41  0.691658     -0.368664      -4.14676       4.14676       1017.12       1021.27    
  42  0.163447      -1.81127      -20.3732       20.3732       1024.24       1044.62    
  43  0.462923     -0.770194      -8.66319       8.66319       1015.09       1023.76    
  44  0.758611     -0.276266      -3.10745       3.10745       1021.00       1024.11    
  45  0.278938      -1.27677      -14.3611       14.3611       1025.47       1039.83    
  46  0.726655     -0.319304      -3.59155       3.59155       1031.63       1035.22    
  47  0.288418      -1.24334      -13.9852       13.9852       1037.18       1051.17    
  48  0.640221     -0.445941      -5.01598       5.01598       1036.72       1041.73    
  49  0.531981     -0.631147      -7.09918       7.09918       1044.17       1051.27    
  50  0.494380     -0.704450      -7.92370       7.92370       1024.69       1032.61    
  51  0.765719     -0.266940      -3.00256       3.00256       1023.79       1026.79    
  52  0.274236      -1.29377      -14.5524       14.5524       1054.22       1068.77    
  53  0.946599     -0.548792E-01 -0.617285      0.617285       935.687       936.304    
loop,thermsimp(1:2)       22   9.36666       36.7778    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    362       1041.65          0.85          1.15         21.85          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1041.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       22
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       23
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      361     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -15.0294       15.0294       935.687       950.716    
   2  0.388449     -0.945595      -10.6361       10.6361       934.437       945.073    
   3  0.827051     -0.189889      -2.13589       2.13589       944.199       946.335    
   4  0.958395     -0.424951E-01 -0.477988      0.477988       943.606       944.084    
   5  0.125400      -2.07625      -23.3538       23.3538       946.467       969.820    
   6  0.524174     -0.645931      -7.26547       7.26547       931.542       938.808    
   7  0.783721     -0.243702      -2.74118       2.74118       950.272       953.013    
   8  0.183361      -1.69630      -19.0801       19.0801       968.905       987.985    
   9  0.122208      -2.10203      -23.6437       23.6437       962.533       986.177    
  10  0.913915     -0.900182E-01  -1.01253       1.01253       943.917       944.930    
  11  0.273776      -1.29545      -14.5712       14.5712       973.408       987.980    
  12  0.779874     -0.248622      -2.79652       2.79652       975.399       978.195    
  13  0.305314      -1.18641      -13.3448       13.3448       985.710       999.055    
  14  0.720732     -0.327488      -3.68361       3.68361       988.093       991.777    
  15  0.222329      -1.50360      -16.9125       16.9125       984.896       1001.81    
  16  0.826299     -0.190798      -2.14611       2.14611       986.238       988.384    
  17  0.581574     -0.542017      -6.09663       6.09663       986.168       992.265    
  18  0.616258     -0.484089      -5.44507       5.44507       974.601       980.046    
  19  0.604230     -0.503801      -5.66678       5.66678       978.958       984.625    
  20  0.333333      -1.09861      -12.3573       12.3573       983.579       995.936    
  21  0.289888E-01  -3.54085      -39.8276       39.8276       987.310       1027.14    
  22  0.396892     -0.924091      -10.3942       10.3942       993.949       1004.34    
  23  0.910378     -0.938957E-01  -1.05614       1.05614       974.618       975.675    
  24  0.998355     -0.164683E-02 -0.185236E-01  0.185236E-01   980.018       980.037    
  25  0.735990     -0.306539      -3.44797       3.44797       994.784       998.232    
  26  0.779044     -0.249688      -2.80851       2.80851       996.274       999.083    
  27  0.498268     -0.696618      -7.83560       7.83560       996.403       1004.24    
  28  0.693129     -0.366539      -4.12285       4.12285       983.679       987.802    
  29  0.691370     -0.369080      -4.15144       4.15144       971.915       976.066    
  30  0.519398     -0.655086      -7.36844       7.36844       1004.30       1011.67    
  31  0.365801      -1.00567      -11.3118       11.3118       1005.98       1017.29    
  32  0.352392      -1.04301      -11.7318       11.7318       1000.12       1011.85    
  33  0.176642      -1.73363      -19.5000       19.5000       987.251       1006.75    
  34  0.982977     -0.171697E-01 -0.193125      0.193125       988.084       988.277    
  35  0.466781     -0.761894      -8.56983       8.56983       995.346       1003.92    
  36  0.481130     -0.731617      -8.22928       8.22928       995.410       1003.64    
  37  0.238852      -1.43191      -16.1062       16.1062       1004.17       1020.28    
  38  0.453247     -0.791318      -8.90079       8.90079       998.357       1007.26    
  39  0.579188     -0.546129      -6.14289       6.14289       1006.86       1013.01    
  40  0.802776E-01  -2.52226      -28.3706       28.3706       1017.12       1045.49    
  41  0.819632     -0.198900      -2.23724       2.23724       1015.09       1017.33    
  42  0.917023     -0.866231E-01 -0.974342      0.974342       1021.00       1021.98    
  43  0.328296      -1.11384      -12.5285       12.5285       1023.79       1036.31    
  44  0.751681     -0.285443      -3.21068       3.21068       983.320       986.530    
  45  0.760454     -0.273840      -3.08017       3.08017       1024.69       1027.77    
  46  0.655053     -0.423039      -4.75837       4.75837       1031.63       1036.39    
  47  0.438192     -0.825097      -9.28074       9.28074       1004.20       1013.48    
  48  0.615984E-01  -2.78712      -31.3497       31.3497       1025.47       1056.82    
  49  0.373345     -0.985252      -11.0822       11.0822       1036.72       1047.80    
  50  0.173578      -1.75113      -19.6968       19.6968       1024.24       1043.94    
  51  0.787098     -0.239402      -2.69281       2.69281       1037.18       1039.88    
  52  0.476899     -0.740450      -8.32863       8.32863       1044.17       1052.50    
  53  0.267079      -1.32021      -14.8498       14.8498       1041.65       1056.50    
loop,thermsimp(1:2)       23   15.0294       10.6361    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363       1058.63          0.85          1.14         22.08          0.00          0.04         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1058.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       23
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       24
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      362     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -6.47279       6.47279       931.542       938.015    
   2  0.429755     -0.844539      -9.49943       9.49943       943.606       953.105    
   3  0.598807     -0.512815      -5.76818       5.76818       943.917       949.685    
   4  0.757798     -0.277339      -3.11952       3.11952       934.437       937.557    
   5  0.954130E-01  -2.34954      -26.4278       26.4278       944.199       970.627    
   6  0.968708E-01  -2.33438      -26.2572       26.2572       935.687       961.944    
   7  0.196924      -1.62494      -18.2774       18.2774       950.272       968.549    
   8  0.616654     -0.483447      -5.43784       5.43784       946.467       951.904    
   9  0.181969      -1.70392      -19.1658       19.1658       974.618       993.784    
  10  0.383918     -0.957326      -10.7681       10.7681       971.915       982.683    
  11  0.377012     -0.975478      -10.9722       10.9722       975.399       986.371    
  12  0.899192     -0.106259      -1.19520       1.19520       980.018       981.213    
  13  0.409833     -0.892005      -10.0333       10.0333       974.601       984.634    
  14  0.728621     -0.316601      -3.56115       3.56115       978.958       982.519    
  15  0.568233     -0.565224      -6.35768       6.35768       962.533       968.891    
  16  0.647091     -0.435269      -4.89593       4.89593       983.320       988.216    
  17  0.118896      -2.12951      -23.9528       23.9528       983.679       1007.63    
  18  0.910801     -0.934313E-01  -1.05092       1.05092       973.408       974.459    
  19  0.484176     -0.725308      -8.15830       8.15830       968.905       977.063    
  20  0.327343      -1.11675      -12.5612       12.5612       988.084       1000.65    
  21  0.674995     -0.393050      -4.42105       4.42105       986.238       990.659    
  22  0.234857      -1.44878      -16.2960       16.2960       988.093       1004.39    
  23  0.800837     -0.222098      -2.49817       2.49817       986.168       988.666    
  24  0.619975     -0.478077      -5.37744       5.37744       983.579       988.956    
  25  0.578519     -0.547284      -6.15588       6.15588       994.784       1000.94    
  26  0.837214     -0.177675      -1.99850       1.99850       985.710       987.708    
  27  0.935915     -0.662302E-01 -0.744961      0.744961       996.274       997.019    
  28  0.779751     -0.248781      -2.79830       2.79830       984.896       987.694    
  29  0.801557     -0.221199      -2.48806       2.48806       995.410       997.898    
  30  0.827533E-01  -2.49189      -28.0289       28.0289       995.346       1023.37    
  31  0.640581     -0.445379      -5.00965       5.00965       996.403       1001.41    
  32  0.226382      -1.48553      -16.7093       16.7093       993.949       1010.66    
  33  0.198814E-01  -3.91797      -44.0696       44.0696       987.251       1031.32    
  34  0.147003      -1.91730      -21.5659       21.5659       998.357       1019.92    
  35  0.568592     -0.564592      -6.35057       6.35057       1004.30       1010.65    
  36  0.650717     -0.429680      -4.83306       4.83306       1000.12       1004.96    
  37  0.259092      -1.35057      -15.1913       15.1913       1006.86       1022.05    
  38  0.935898     -0.662490E-01 -0.745172      0.745172       1004.20       1004.95    
  39  0.702433     -0.353205      -3.97287       3.97287       1005.98       1009.95    
  40  0.622661     -0.473753      -5.32880       5.32880       1015.09       1020.42    
  41  0.546960     -0.603380      -6.78686       6.78686       1004.17       1010.96    
  42  0.883578     -0.123775      -1.39223       1.39223       1021.00       1022.40    
  43  0.728206E-02  -4.92234      -55.3668       55.3668       987.310       1042.68    
  44  0.112001      -2.18925      -24.6248       24.6248       1024.69       1049.31    
  45  0.689494     -0.371797      -4.18200       4.18200       1023.79       1027.97    
  46  0.872629     -0.136244      -1.53248       1.53248       1031.63       1033.16    
  47  0.688489     -0.373256      -4.19840       4.19840       1037.18       1041.38    
  48  0.947843     -0.535662E-01 -0.602516      0.602516       1024.24       1024.84    
  49  0.294529      -1.22238      -13.7494       13.7494       1017.12       1030.87    
  50  0.717675E-01  -2.63432      -29.6310       29.6310       1036.72       1066.35    
  51  0.738094     -0.303684      -3.41586       3.41586       1044.17       1047.59    
  52  0.237514      -1.43753      -16.1694       16.1694       1041.65       1057.82    
  53  0.932770     -0.695962E-01 -0.782822      0.782822       1058.63       1059.42    
loop,thermsimp(1:2)       24   6.47279       9.49943    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364        934.07          0.84          1.14         22.12          0.01          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    365        961.56          0.85          1.15         22.09          0.00          0.05         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    934.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       24
neval is:      364
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       25
neval is:      364


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      364     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553      -3.14443       3.14443       934.437       937.582    
   2  0.693006     -0.366716      -4.12485       4.12485       931.542       935.667    
   3  0.647780     -0.434203      -4.88395       4.88395       943.917       948.801    
   4  0.895769     -0.110072      -1.23810       1.23810       946.467       947.705    
   5  0.775956     -0.253659      -2.85317       2.85317       943.606       946.459    
   6  0.891264     -0.115114      -1.29481       1.29481       935.687       936.982    
   7  0.553736     -0.591068      -6.64836       6.64836       950.272       956.920    
   8  0.646797     -0.435723      -4.90104       4.90104       962.533       967.434    
   9  0.646048     -0.436881      -4.91407       4.91407       944.199       949.113    
  10  0.160937      -1.82675      -20.5473       20.5473       973.408       993.956    
  11  0.840732     -0.173482      -1.95133       1.95133       968.905       970.856    
  12  0.377447     -0.974325      -10.9593       10.9593       980.018       990.977    
  13  0.214649      -1.53875      -17.3080       17.3080       978.958       996.266    
  14  0.424093     -0.857804      -9.64863       9.64863       971.915       981.563    
  15  0.693510     -0.365990      -4.11668       4.11668       974.601       978.718    
  16  0.252894      -1.37478      -15.4637       15.4637       975.399       990.862    
  17  0.765441     -0.267303      -3.00664       3.00664       984.896       987.902    
  18  0.481029     -0.731828      -8.23164       8.23164       985.710       993.942    
  19  0.211808      -1.55207      -17.4578       17.4578       983.320       1000.78    
  20  0.616599E-01  -2.78612      -31.3385       31.3385       986.168       1017.51    
  21  0.110259      -2.20492      -24.8011       24.8011       983.579       1008.38    
  22  0.475319     -0.743769      -8.36596       8.36596       986.238       994.604    
  23  0.500411E-01  -2.99491      -33.6869       33.6869       974.618       1008.31    
  24  0.126445      -2.06795      -23.2604       23.2604       996.274       1019.53    
  25  0.693760     -0.365629      -4.11262       4.11262       995.410       999.522    
  26  0.876607E-01  -2.43428      -27.3810       27.3810       988.084       1015.47    
  27  0.564718     -0.571429      -6.42747       6.42747       994.784       1001.21    
  28  0.572706     -0.557383      -6.26948       6.26948       996.403       1002.67    
  29  0.739618     -0.301621      -3.39266       3.39266       988.093       991.486    
  30  0.428028     -0.848566      -9.54472       9.54472       1004.20       1013.75    
  31  0.864224     -0.145923      -1.64135       1.64135       1000.12       1001.76    
  32  0.326884      -1.11815      -12.5770       12.5770       983.679       996.256    
  33  0.626295     -0.467933      -5.26334       5.26334       1005.98       1011.24    
  34  0.576680     -0.550467      -6.19169       6.19169       1004.30       1010.49    
  35  0.988375     -0.116929E-01 -0.131523      0.131523       993.949       994.081    
  36  0.834431     -0.181006      -2.03596       2.03596       1004.17       1006.21    
  37  0.944839     -0.567403E-01 -0.638218      0.638218       998.357       998.996    
  38  0.182182      -1.70275      -19.1526       19.1526       1015.09       1034.25    
  39  0.882984     -0.124449      -1.39981       1.39981       1006.86       1008.26    
  40  0.756839     -0.278604      -3.13376       3.13376       1021.00       1024.14    
  41  0.530350     -0.634218      -7.13373       7.13373       995.346       1002.48    
  42  0.257866      -1.35531      -15.2446       15.2446       1024.24       1039.49    
  43  0.575794     -0.552006      -6.20900       6.20900       1023.79       1030.00    
  44  0.907029     -0.975811E-01  -1.09760       1.09760       1017.12       1018.22    
  45  0.385513     -0.953180      -10.7214       10.7214       987.251       997.973    
  46  0.352081      -1.04389      -11.7418       11.7418       1031.63       1043.37    
  47  0.587153     -0.532470      -5.98925       5.98925       1037.18       1043.17    
  48  0.748916     -0.289129      -3.25214       3.25214       987.310       990.562    
  49  0.152024      -1.88371      -21.1881       21.1881       1044.17       1065.36    
  50  0.501193     -0.690765      -7.76977       7.76977       1024.69       1032.46    
  51  0.743551     -0.296318      -3.33300       3.33300       1041.65       1044.98    
  52  0.336569      -1.08895      -12.2486       12.2486       1058.63       1070.88    
  53  0.523746     -0.646748      -7.27466       7.27466       934.070       941.344    
loop,thermsimp(1:2)       25   3.14443       4.12485    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    366       1018.31          0.86          1.15         22.02          0.00          0.05         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1018.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       25
neval is:      365
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       26
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      365
neval,tstepnext:      365     365

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -10.0318       10.0318       931.542       941.574    
   2  0.389332     -0.943323      -10.6106       10.6106       935.687       946.298    
   3  0.765657     -0.267021      -3.00347       3.00347       934.437       937.441    
   4  0.505025     -0.683148      -7.68409       7.68409       934.070       941.754    
   5  0.681598     -0.383316      -4.31156       4.31156       943.606       947.918    
   6  0.895525     -0.110345      -1.24117       1.24117       946.467       947.708    
   7  0.540074     -0.616050      -6.92937       6.92937       943.917       950.847    
   8  0.125370      -2.07648      -23.3564       23.3564       944.199       967.555    
   9  0.306095      -1.18386      -13.3161       13.3161       950.272       963.588    
  10  0.898677     -0.106831      -1.20165       1.20165       962.533       963.735    
  11  0.355276      -1.03486      -11.6402       11.6402       968.905       980.545    
  12  0.855641     -0.155905      -1.75363       1.75363       974.601       976.355    
  13  0.894333E-01  -2.41426      -27.1558       27.1558       971.915       999.070    
  14  0.291038      -1.23430      -13.8835       13.8835       984.896       998.779    
  15  0.848476E-01  -2.46690      -27.7478       27.7478       987.310       1015.06    
  16  0.655469     -0.422404      -4.75123       4.75123       975.399       980.150    
  17  0.181028      -1.70910      -19.2241       19.2241       980.018       999.242    
  18  0.801189     -0.221659      -2.49323       2.49323       988.093       990.586    
  19  0.659702     -0.415967      -4.67882       4.67882       985.710       990.389    
  20  0.500397     -0.692354      -7.78764       7.78764       973.408       981.196    
  21  0.901964     -0.103181      -1.16059       1.16059       993.949       995.110    
  22  0.331186      -1.10508      -12.4300       12.4300       986.238       998.668    
  23  0.572805E-01  -2.85979      -32.1671       32.1671       983.679       1015.85    
  24  0.511624     -0.670164      -7.53805       7.53805       978.958       986.496    
  25  0.953295     -0.478312E-01 -0.538008      0.538008       987.251       987.789    
  26  0.454382     -0.788818      -8.87267       8.87267       998.357       1007.23    
  27  0.697217E-01  -2.66324      -29.9563       29.9563       995.410       1025.37    
  28  0.269239      -1.31216      -14.7592       14.7592       983.320       998.079    
  29  0.855725     -0.155806      -1.75252       1.75252       994.784       996.536    
  30  0.408332E-02  -5.50085      -61.8738       61.8738       1000.12       1062.00    
  31  0.926366     -0.764862E-01 -0.860322      0.860322       995.346       996.206    
  32  0.356547      -1.03129      -11.6000       11.6000       996.403       1008.00    
  33  0.550351     -0.597200      -6.71734       6.71734       1004.17       1010.89    
  34  0.475063     -0.744308      -8.37202       8.37202       1006.86       1015.23    
  35  0.420107     -0.867246      -9.75483       9.75483       974.618       984.373    
  36  0.521034     -0.651939      -7.33305       7.33305       983.579       990.912    
  37  0.979034     -0.211889E-01 -0.238334      0.238334       1004.30       1004.54    
  38  0.599858     -0.511062      -5.74846       5.74846       1005.98       1011.73    
  39  0.800850     -0.222082      -2.49799       2.49799       1004.20       1006.70    
  40  0.823189     -0.194570      -2.18853       2.18853       988.084       990.273    
  41  0.709226E-01  -2.64617      -29.7642       29.7642       986.168       1015.93    
  42  0.555654     -0.587609      -6.60946       6.60946       1017.12       1023.73    
  43  0.920379     -0.829696E-01 -0.933247      0.933247       996.274       997.208    
  44  0.904537     -0.100332      -1.12854       1.12854       1021.00       1022.13    
  45  0.990568     -0.947695E-02 -0.106597      0.106597       1023.79       1023.89    
  46  0.647203     -0.435096      -4.89398       4.89398       1024.69       1029.58    
  47  0.634714     -0.454580      -5.11314       5.11314       1015.09       1020.21    
  48  0.771196     -0.259812      -2.92238       2.92238       1024.24       1027.16    
  49  0.857464     -0.153776      -1.72969       1.72969       1037.18       1038.91    
  50  0.816462     -0.202774      -2.28082       2.28082       1031.63       1033.91    
  51  0.233603      -1.45413      -16.3562       16.3562       1041.65       1058.01    
  52  0.554523     -0.589647      -6.63239       6.63239       1044.17       1050.80    
  53  0.217770      -1.52432      -17.1456       17.1456       1018.31       1035.45    
loop,thermsimp(1:2)       26   10.0318       10.6106    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    367        964.01          0.86          1.14         21.88          0.02          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    964.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.2481               365
loop is:       26
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    11.2481               365
loop is:       27
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    5.62403               417

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      366     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -4.14171       4.14171       934.437       938.579    
   2  0.431280     -0.840999      -4.72980       4.72980       931.542       936.272    
   3  0.231120      -1.46482      -8.23819       8.23819       934.070       942.308    
   4  0.306155      -1.18366      -6.65696       6.65696       935.687       942.344    
   5  0.514107     -0.665324      -3.74180       3.74180       946.467       950.208    
   6  0.784944E-01  -2.54473      -14.3116       14.3116       943.606       957.918    
   7  0.767893     -0.264105      -1.48533       1.48533       943.917       945.403    
   8  0.240450E-02  -6.03041      -33.9152       33.9152       950.272       984.187    
   9  0.185505      -1.68467      -9.47464       9.47464       962.533       972.008    
  10  0.405909     -0.901627      -5.07078       5.07078       944.199       949.270    
  11  0.681143     -0.383983      -2.15953       2.15953       974.601       976.761    
  12  0.529175     -0.636436      -3.57934       3.57934       975.399       978.978    
  13  0.873060     -0.135751     -0.763470      0.763470       968.905       969.669    
  14  0.457661     -0.781625      -4.39589       4.39589       973.408       977.804    
  15  0.564230     -0.572293      -3.21859       3.21859       974.618       977.837    
  16  0.949800     -0.515039E-01 -0.289660      0.289660       978.958       979.247    
  17  0.581003E-01  -2.84558      -16.0037       16.0037       987.251       1003.25    
  18  0.180069      -1.71442      -9.64193       9.64193       988.084       997.726    
  19  0.222412      -1.50322      -8.45417       8.45417       985.710       994.164    
  20  0.821703     -0.196377      -1.10443       1.10443       988.093       989.198    
  21  0.948363     -0.530176E-01 -0.298173      0.298173       983.579       983.877    
  22  0.796186     -0.227922      -1.28184       1.28184       993.949       995.231    
  23  0.881546     -0.126078     -0.709065      0.709065       995.346       996.055    
  24  0.702001     -0.353821      -1.98990       1.98990       994.784       996.773    
  25  0.878483     -0.129559     -0.728645      0.728645       996.274       997.003    
  26  0.158251      -1.84358      -10.3683       10.3683       983.320       993.688    
  27  0.759310E-02  -4.88052      -27.4482       27.4482       986.238       1013.69    
  28  0.549090     -0.599492      -3.37156       3.37156       984.896       988.267    
  29  0.294083      -1.22389      -6.88321       6.88321       971.915       978.798    
  30  0.358851      -1.02485      -5.76377       5.76377       980.018       985.782    
  31  0.591031E-01  -2.82847      -15.9074       15.9074       1004.30       1020.21    
  32  0.413139     -0.883972      -4.97149       4.97149       1004.20       1009.17    
  33  0.564800     -0.571284      -3.21292       3.21292       998.357       1001.57    
  34  0.472034     -0.750704      -4.22198       4.22198       996.403       1000.62    
  35  0.270343      -1.30806      -7.35658       7.35658       1004.17       1011.53    
  36  0.704266     -0.350600      -1.97178       1.97178       1005.98       1007.95    
  37  0.317895E-01  -3.44862      -19.3951       19.3951       987.310       1006.70    
  38  0.489641     -0.714083      -4.01603       4.01603       1006.86       1010.88    
  39  0.558309     -0.582843      -3.27793       3.27793       983.679       986.957    
  40  0.239099      -1.43088      -8.04729       8.04729       986.168       994.215    
  41  0.387399     -0.948301      -5.33327       5.33327       1015.09       1020.43    
  42  0.434686     -0.833131      -4.68555       4.68555       1021.00       1025.69    
  43  0.713921     -0.336983      -1.89521       1.89521       1017.12       1019.02    
  44  0.655374     -0.422550      -2.37643       2.37643       1023.79       1026.16    
  45  0.739749     -0.301444      -1.69533       1.69533       995.410       997.105    
  46  0.758411     -0.276530      -1.55521       1.55521       1024.24       1025.80    
  47  0.750796     -0.286621      -1.61196       1.61196       1024.69       1026.30    
  48  0.557150E-01  -2.88751      -16.2394       16.2394       1031.63       1047.87    
  49  0.438885     -0.823518      -4.63149       4.63149       1018.31       1022.94    
  50  0.384409     -0.956048      -5.37684       5.37684       1037.18       1042.56    
  51  0.163955E-01  -4.11075      -23.1190       23.1190       1044.17       1067.29    
  52  0.493958     -0.705305      -3.96666       3.96666       1041.65       1045.62    
  53  0.654549     -0.423809      -2.38352       2.38352       964.011       966.395    
loop,thermsimp(1:2)       27   4.14171       4.72980    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368       1028.33          0.85          1.14         21.93          0.01          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1028.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       27
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       28
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      367     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -5.40365       5.40365       931.542       936.946    
   2  0.718155     -0.331070      -1.86195       1.86195       934.437       936.299    
   3  0.581515     -0.542118      -3.04889       3.04889       934.070       937.119    
   4  0.230175E-01  -3.77150      -21.2110       21.2110       935.687       956.898    
   5  0.506601     -0.680031      -3.82451       3.82451       943.917       947.742    
   6  0.209297      -1.56400      -8.79600       8.79600       944.199       952.995    
   7  0.757725     -0.277434      -1.56030       1.56030       946.467       948.027    
   8  0.230972      -1.46546      -8.24178       8.24178       943.606       951.848    
   9  0.495080     -0.703037      -3.95390       3.95390       964.011       967.965    
  10  0.947190     -0.542553E-01 -0.305133      0.305133       968.905       969.210    
  11  0.977432     -0.228269E-01 -0.128379      0.128379       962.533       962.661    
  12  0.320616      -1.13751      -6.39739       6.39739       974.601       980.998    
  13  0.252125      -1.37783      -7.74895       7.74895       973.408       981.157    
  14  0.871535     -0.137499     -0.773300      0.773300       974.618       975.392    
  15  0.856468E-02  -4.76011      -26.7710       26.7710       971.915       998.686    
  16  0.352534      -1.04261      -5.86366       5.86366       975.399       981.262    
  17  0.750419     -0.287124      -1.61480       1.61480       978.958       980.573    
  18  0.215691      -1.53391      -8.62675       8.62675       983.579       992.205    
  19  0.833929     -0.181606      -1.02136       1.02136       950.272       951.293    
  20  0.714656E-01  -2.63854      -14.8392       14.8392       980.018       994.857    
  21  0.758349     -0.276612      -1.55568       1.55568       983.679       985.235    
  22  0.571963     -0.558680      -3.14203       3.14203       984.896       988.038    
  23  0.472398     -0.749934      -4.21765       4.21765       988.093       992.311    
  24  0.606854     -0.499467      -2.80902       2.80902       983.320       986.129    
  25  0.247109      -1.39793      -7.86198       7.86198       985.710       993.572    
  26  0.581778     -0.541666      -3.04635       3.04635       986.168       989.214    
  27  0.455447     -0.786476      -4.42317       4.42317       993.949       998.373    
  28  0.606617     -0.499857      -2.81121       2.81121       995.346       998.157    
  29  0.620033     -0.477983      -2.68819       2.68819       994.784       997.472    
  30  0.367527      -1.00096      -5.62943       5.62943       996.274       1001.90    
  31  0.611260     -0.492233      -2.76833       2.76833       995.410       998.178    
  32  0.310332      -1.17011      -6.58074       6.58074       988.084       994.665    
  33  0.611387     -0.492025      -2.76717       2.76717       996.403       999.170    
  34  0.584386     -0.537193      -3.02119       3.02119       998.357       1001.38    
  35  0.950350     -0.509246E-01 -0.286401      0.286401       987.251       987.538    
  36  0.228570      -1.47591      -8.30058       8.30058       987.310       995.610    
  37  0.879867     -0.127985     -0.719789      0.719789       1005.98       1006.70    
  38  0.390808E-01  -3.24212      -18.2338       18.2338       1004.20       1022.44    
  39  0.104244      -2.26102      -12.7160       12.7160       1006.86       1019.58    
  40  0.922634     -0.805225E-01 -0.452861      0.452861       1004.17       1004.63    
  41  0.559015     -0.581578      -3.27081       3.27081       986.238       989.509    
  42  0.809074     -0.211865      -1.19154       1.19154       1017.12       1018.31    
  43  0.840951     -0.173222     -0.974205      0.974205       1004.30       1005.27    
  44  0.384796     -0.955043      -5.37119       5.37119       1015.09       1020.47    
  45  0.471744     -0.751318      -4.22543       4.22543       1018.31       1022.53    
  46  0.750950     -0.286417      -1.61082       1.61082       1021.00       1022.61    
  47  0.197617      -1.62143      -9.11895       9.11895       1024.24       1033.36    
  48  0.405005     -0.903855      -5.08331       5.08331       1023.79       1028.87    
  49  0.526481     -0.641540      -3.60804       3.60804       1024.69       1028.30    
  50  0.808042     -0.213142      -1.19872       1.19872       1037.18       1038.38    
  51  0.315225      -1.15447      -6.49277       6.49277       1041.65       1048.14    
  52  0.233772      -1.45341      -8.17401       8.17401       1031.63       1039.80    
  53  0.455864E-01  -3.08815      -17.3678       17.3678       1028.33       1045.70    
loop,thermsimp(1:2)       28   5.40365       1.86195    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369       1039.65          0.85          1.13         21.82          0.09          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1039.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       28
neval is:      368
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       29
neval is:      368


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      368     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223      -3.14509       3.14509       934.437       937.582    
   2  0.243540      -1.41247      -7.94379       7.94379       931.542       939.486    
   3  0.374772     -0.981437      -5.51963       5.51963       934.070       939.589    
   4  0.700054     -0.356598      -2.00552       2.00552       943.917       945.923    
   5  0.301581      -1.19872      -6.74161       6.74161       946.467       953.208    
   6  0.531818     -0.631454      -3.55131       3.55131       950.272       953.823    
   7  0.185013      -1.68733      -9.48961       9.48961       943.606       953.096    
   8  0.107050      -2.23446      -12.5667       12.5667       944.199       956.766    
   9  0.979566     -0.206453E-01 -0.116110      0.116110       935.687       935.803    
  10  0.706074     -0.348035      -1.95736       1.95736       962.533       964.490    
  11  0.112110      -2.18827      -12.3069       12.3069       964.011       976.318    
  12  0.212442      -1.54908      -8.71210       8.71210       968.905       977.617    
  13  0.625740     -0.468820      -2.63666       2.63666       974.618       977.255    
  14  0.265918      -1.32457      -7.44940       7.44940       978.958       986.407    
  15  0.369004     -0.996947      -5.60686       5.60686       974.601       980.208    
  16  0.531799     -0.631491      -3.55152       3.55152       973.408       976.960    
  17  0.227318      -1.48140      -8.33146       8.33146       975.399       983.730    
  18  0.512871     -0.667732      -3.75534       3.75534       983.679       987.435    
  19  0.394785     -0.929415      -5.22706       5.22706       983.320       988.547    
  20  0.720084     -0.328388      -1.84686       1.84686       987.251       989.098    
  21  0.185505      -1.68467      -9.47465       9.47465       984.896       994.370    
  22  0.658242     -0.418183      -2.35188       2.35188       986.168       988.520    
  23  0.888593     -0.118116     -0.664288      0.664288       986.238       986.902    
  24  0.773453     -0.256890      -1.44476       1.44476       983.579       985.023    
  25  0.594480E-01  -2.82265      -15.8747       15.8747       988.093       1003.97    
  26  0.112908      -2.18118      -12.2670       12.2670       985.710       997.977    
  27  0.940300     -0.615559E-01 -0.346192      0.346192       988.084       988.430    
  28  0.990261     -0.978663E-02 -0.550403E-01  0.550403E-01   980.018       980.073    
  29  0.686451     -0.376220      -2.11587       2.11587       987.310       989.426    
  30  0.558815     -0.581936      -3.27283       3.27283       994.784       998.056    
  31  0.574196     -0.554784      -3.12012       3.12012       995.346       998.466    
  32  0.678960     -0.387193      -2.17758       2.17758       995.410       997.587    
  33  0.306232      -1.18341      -6.65555       6.65555       993.949       1000.60    
  34  0.969485     -0.309907E-01 -0.174292      0.174292       971.915       972.089    
  35  0.520627     -0.652722      -3.67093       3.67093       996.403       1000.07    
  36  0.870581     -0.138594     -0.779458      0.779458       998.357       999.137    
  37  0.127650      -2.05846      -11.5768       11.5768       996.274       1007.85    
  38  0.276190      -1.28667      -7.23624       7.23624       1004.17       1011.41    
  39  0.842544     -0.171330     -0.963563      0.963563       1004.30       1005.26    
  40  0.336933      -1.08787      -6.11822       6.11822       1005.98       1012.10    
  41  0.685284     -0.377921      -2.12544       2.12544       1017.12       1019.25    
  42  0.555142     -0.588531      -3.30991       3.30991       1006.86       1010.17    
  43  0.857048     -0.154261     -0.867569      0.867569       1015.09       1015.96    
  44  0.612111E-01  -2.79343      -15.7103       15.7103       1004.20       1019.91    
  45  0.672500     -0.396753      -2.23135       2.23135       1018.31       1020.54    
  46  0.820423E-01  -2.50052      -14.0630       14.0630       1021.00       1035.07    
  47  0.546679     -0.603893      -3.39631       3.39631       1024.69       1028.08    
  48  0.624723     -0.470446      -2.64580       2.64580       1023.79       1026.43    
  49  0.906365     -0.983128E-01 -0.552914      0.552914       1024.24       1024.79    
  50  0.807763     -0.213487      -1.20065       1.20065       1037.18       1038.38    
  51  0.347580      -1.05676      -5.94326       5.94326       1031.63       1037.57    
  52  0.233390      -1.45504      -8.18321       8.18321       1028.33       1036.52    
  53  0.265609      -1.32573      -7.45594       7.45594       1039.65       1047.10    
loop,thermsimp(1:2)       29   3.14509       7.94379    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    370       1041.65          0.86          1.16         21.86          0.00          0.05         23.93
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1041.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       29
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       30
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      369     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -8.55402       8.55402       935.687       944.241    
   2  0.142120      -1.95108      -10.9729       10.9729       934.437       945.410    
   3  0.240947      -1.42318      -8.00399       8.00399       931.542       939.546    
   4  0.622235     -0.474438      -2.66825       2.66825       934.070       936.738    
   5  0.167679      -1.78570      -10.0428       10.0428       943.917       953.960    
   6  0.712985E-01  -2.64088      -14.8524       14.8524       943.606       958.458    
   7  0.861645E-02  -4.75408      -26.7371       26.7371       946.467       973.204    
   8  0.820106     -0.198321      -1.11537       1.11537       950.272       951.387    
   9  0.882469     -0.125032     -0.703182      0.703182       944.199       944.902    
  10  0.530124     -0.634644      -3.56926       3.56926       962.533       966.102    
  11  0.920027E-01  -2.38594      -13.4186       13.4186       971.915       985.333    
  12  0.669458     -0.401287      -2.25685       2.25685       964.011       966.268    
  13  0.348419      -1.05435      -5.92969       5.92969       973.408       979.338    
  14  0.979616     -0.205944E-01 -0.115824      0.115824       974.618       974.734    
  15  0.661083     -0.413875      -2.32765       2.32765       968.905       971.233    
  16  0.535120     -0.625265      -3.51651       3.51651       980.018       983.535    
  17  0.929679E-01  -2.37550      -13.3599       13.3599       974.601       987.961    
  18  0.580221     -0.544346      -3.06142       3.06142       975.399       978.460    
  19  0.652449     -0.427023      -2.40159       2.40159       983.579       985.980    
  20  0.252328      -1.37703      -7.74444       7.74444       978.958       986.702    
  21  0.364859      -1.00824      -5.67040       5.67040       986.238       991.908    
  22  0.205873      -1.58049      -8.88874       8.88874       983.679       992.568    
  23  0.404183E-01  -3.20847      -18.0445       18.0445       988.084       1006.13    
  24  0.922242     -0.809474E-01 -0.455250      0.455250       986.168       986.623    
  25  0.164359      -1.80570      -10.1553       10.1553       983.320       993.475    
  26  0.606051     -0.500791      -2.81646       2.81646       987.251       990.068    
  27  0.461849E-01  -3.07510      -17.2945       17.2945       987.310       1004.60    
  28  0.761223     -0.272829      -1.53440       1.53440       984.896       986.430    
  29  0.170682      -1.76796      -9.94303       9.94303       995.410       1005.35    
  30  0.501713     -0.689726      -3.87904       3.87904       985.710       989.589    
  31  0.892390E-01  -2.41644      -13.5901       13.5901       994.784       1008.37    
  32  0.281632E-01  -3.56974      -20.0763       20.0763       995.346       1015.42    
  33  0.664381     -0.408899      -2.29966       2.29966       998.357       1000.66    
  34  0.124936      -2.07995      -11.6977       11.6977       996.403       1008.10    
  35  0.623262     -0.472788      -2.65898       2.65898       993.949       996.608    
  36  0.876206     -0.132154     -0.743239      0.743239       988.093       988.836    
  37  0.744183     -0.295469      -1.66173       1.66173       1004.30       1005.96    
  38  0.251914      -1.37867      -7.75366       7.75366       996.274       1004.03    
  39  0.391818     -0.936959      -5.26949       5.26949       1006.86       1012.13    
  40  0.131094      -2.03184      -11.4271       11.4271       1004.17       1015.60    
  41  0.887574     -0.119263     -0.670738      0.670738       1005.98       1006.65    
  42  0.682509     -0.381980      -2.14826       2.14826       1015.09       1017.24    
  43  0.184805      -1.68846      -9.49592       9.49592       1017.12       1026.62    
  44  0.258729      -1.35197      -7.60354       7.60354       1004.20       1011.81    
  45  0.275506      -1.28915      -7.25020       7.25020       1018.31       1025.56    
  46  0.718710     -0.330297      -1.85760       1.85760       1024.24       1026.10    
  47  0.445066     -0.809533      -4.55284       4.55284       1023.79       1028.34    
  48  0.772965     -0.257522      -1.44831       1.44831       1024.69       1026.14    
  49  0.992595     -0.743255E-02 -0.418009E-01  0.418009E-01   1021.00       1021.04    
  50  0.847655E-01  -2.46787      -13.8794       13.8794       1028.33       1042.21    
  51  0.805100E-01  -2.51937      -14.1690       14.1690       1031.63       1045.80    
  52  0.218783      -1.51968      -8.54671       8.54671       1037.18       1045.73    
  53  0.177967      -1.72616      -9.70796       9.70796       1041.65       1051.36    
loop,thermsimp(1:2)       30   8.55402       10.9729    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371       1039.65          0.84          1.13         21.96          0.10          0.05         24.07
Just calling func    0   0         24.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1039.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       30
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       31
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      370     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -9.64959       9.64959       934.070       943.719    
   2  0.422562     -0.861418      -4.84464       4.84464       931.542       936.387    
   3  0.186245      -1.68069      -9.45227       9.45227       935.687       945.139    
   4  0.567236     -0.566979      -3.18871       3.18871       944.199       947.388    
   5  0.464464E-01  -3.06946      -17.2627       17.2627       934.437       951.700    
   6  0.349374      -1.05161      -5.91431       5.91431       950.272       956.186    
   7  0.336208      -1.09002      -6.13033       6.13033       943.917       950.048    
   8  0.631615     -0.459475      -2.58410       2.58410       943.606       946.190    
   9  0.225630E-01  -3.79144      -21.3232       21.3232       962.533       983.856    
  10  0.221391      -1.50782      -8.48005       8.48005       964.011       972.491    
  11  0.635199     -0.453817      -2.55228       2.55228       968.905       971.457    
  12  0.957727     -0.431923E-01 -0.242915      0.242915       946.467       946.709    
  13  0.284413      -1.25733      -7.07125       7.07125       974.618       981.690    
  14  0.814352     -0.205363      -1.15497       1.15497       975.399       976.554    
  15  0.699052     -0.358030      -2.01357       2.01357       973.408       975.422    
  16  0.145269      -1.92917      -10.8497       10.8497       980.018       990.868    
  17  0.397569     -0.922386      -5.18753       5.18753       971.915       977.102    
  18  0.610583     -0.493342      -2.77457       2.77457       983.579       986.353    
  19  0.737372     -0.304663      -1.71343       1.71343       984.896       986.609    
  20  0.230083      -1.46931      -8.26346       8.26346       986.168       994.432    
  21  0.721698     -0.326149      -1.83427       1.83427       978.958       980.792    
  22  0.469765     -0.755524      -4.24909       4.24909       974.601       978.850    
  23  0.148742      -1.90554      -10.7168       10.7168       988.093       998.810    
  24  0.631872     -0.459069      -2.58182       2.58182       985.710       988.292    
  25  0.456921     -0.783245      -4.40499       4.40499       987.251       991.656    
  26  0.631874E-01  -2.76165      -15.5316       15.5316       986.238       1001.77    
  27  0.470948     -0.753008      -4.23494       4.23494       983.679       987.914    
  28  0.313695      -1.15933      -6.52013       6.52013       983.320       989.840    
  29  0.856516     -0.154883     -0.871065      0.871065       993.949       994.820    
  30  0.487159     -0.719166      -4.04461       4.04461       998.357       1002.40    
  31  0.383726     -0.957827      -5.38685       5.38685       996.274       1001.66    
  32  0.242248      -1.41779      -7.97372       7.97372       987.310       995.284    
  33  0.760305     -0.274035      -1.54118       1.54118       995.410       996.951    
  34  0.524314     -0.645664      -3.63124       3.63124       1004.30       1007.93    
  35  0.759572     -0.275001      -1.54661       1.54661       988.084       989.631    
  36  0.784019     -0.243322      -1.36845       1.36845       1005.98       1007.35    
  37  0.430930     -0.841810      -4.73436       4.73436       996.403       1001.14    
  38  0.670659     -0.399494      -2.24677       2.24677       994.784       997.030    
  39  0.458005     -0.780876      -4.39167       4.39167       1004.20       1008.59    
  40  0.413739     -0.882521      -4.96333       4.96333       1006.86       1011.83    
  41  0.388661     -0.945048      -5.31498       5.31498       995.346       1000.66    
  42  0.753750     -0.282694      -1.58988       1.58988       1004.17       1005.76    
  43  0.505767     -0.681679      -3.83378       3.83378       1015.09       1018.93    
  44  0.759664     -0.274878      -1.54592       1.54592       1021.00       1022.55    
  45  0.468968     -0.757221      -4.25863       4.25863       1018.31       1022.57    
  46  0.740796     -0.300031      -1.68738       1.68738       1024.24       1025.93    
  47  0.737223     -0.304865      -1.71457       1.71457       1024.69       1026.40    
  48  0.584325     -0.537298      -3.02178       3.02178       1017.12       1020.14    
  49  0.850800     -0.161578     -0.908720      0.908720       1023.79       1024.69    
  50  0.181706      -1.70536      -9.59102       9.59102       1028.33       1037.92    
  51  0.801855E-01  -2.52341      -14.1917       14.1917       1037.18       1051.37    
  52  0.989218     -0.108406E-01 -0.609681E-01  0.609681E-01   1031.63       1031.69    
  53  0.214049      -1.54155      -8.66971       8.66971       1039.65       1048.32    
loop,thermsimp(1:2)       31   9.64959       4.84464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372       1021.23          0.86          1.15         21.86          0.01          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1021.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       31
neval is:      371
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       32
neval is:      371


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      371     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -16.0624       16.0624       931.542       947.604    
   2  0.695439     -0.363212      -2.04272       2.04272       934.070       936.113    
   3  0.338668      -1.08273      -6.08933       6.08933       935.687       941.776    
   4  0.494821     -0.703559      -3.95684       3.95684       943.606       947.563    
   5  0.433638E-02  -5.44072      -30.5987       30.5987       946.467       977.065    
   6  0.270974      -1.30573      -7.34348       7.34348       944.199       951.542    
   7  0.926362E-01  -2.37907      -13.3800       13.3800       943.917       957.297    
   8  0.437858     -0.825861      -4.64467       4.64467       934.437       939.082    
   9  0.297746      -1.21151      -6.81359       6.81359       950.272       957.085    
  10  0.948309     -0.530750E-01 -0.298496      0.298496       968.905       969.204    
  11  0.845139     -0.168254     -0.946267      0.946267       964.011       964.958    
  12  0.930128     -0.724325E-01 -0.407363      0.407363       973.408       973.816    
  13  0.921850     -0.813732E-01 -0.457645      0.457645       975.399       975.856    
  14  0.447950     -0.803074      -4.51651       4.51651       971.915       976.431    
  15  0.712740     -0.338638      -1.90451       1.90451       974.601       976.505    
  16  0.574809     -0.553717      -3.11412       3.11412       978.958       982.072    
  17  0.136104      -1.99433      -11.2162       11.2162       974.618       985.835    
  18  0.340340      -1.07781      -6.06163       6.06163       962.533       968.595    
  19  0.149160      -1.90274      -10.7011       10.7011       983.579       994.280    
  20  0.433234E-01  -3.13906      -17.6542       17.6542       984.896       1002.55    
  21  0.909134     -0.952630E-01 -0.535762      0.535762       983.679       984.215    
  22  0.619739     -0.478456      -2.69085       2.69085       985.710       988.401    
  23  0.726693     -0.319251      -1.79548       1.79548       988.084       989.880    
  24  0.962860     -0.378471E-01 -0.212853      0.212853       983.320       983.532    
  25  0.615108     -0.485958      -2.73304       2.73304       980.018       982.751    
  26  0.500401     -0.692346      -3.89377       3.89377       987.251       991.145    
  27  0.402080     -0.911104      -5.12408       5.12408       986.168       991.292    
  28  0.749737     -0.288033      -1.61990       1.61990       993.949       995.569    
  29  0.926553     -0.762839E-01 -0.429023      0.429023       987.310       987.739    
  30  0.519037     -0.655779      -3.68812       3.68812       995.410       999.098    
  31  0.498178E-01  -2.99938      -16.8686       16.8686       994.784       1011.65    
  32  0.473692     -0.747197      -4.20226       4.20226       988.093       992.296    
  33  0.574927E-02  -5.15868      -29.0126       29.0126       995.346       1024.36    
  34  0.349575      -1.05104      -5.91106       5.91106       996.403       1002.31    
  35  0.661333     -0.413498      -2.32552       2.32552       996.274       998.600    
  36  0.314247E-01  -3.46016      -19.4600       19.4600       986.238       1005.70    
  37  0.318841      -1.14306      -6.42862       6.42862       998.357       1004.79    
  38  0.111349E-01  -4.49767      -25.2951       25.2951       1004.17       1029.47    
  39  0.845234E-02  -4.77331      -26.8453       26.8453       1005.98       1032.83    
  40  0.704975E-01  -2.65218      -14.9159       14.9159       1004.30       1019.22    
  41  0.126423      -2.06812      -11.6312       11.6312       1004.20       1015.83    
  42  0.120140      -2.11910      -11.9179       11.9179       1006.86       1018.78    
  43  0.664865     -0.408172      -2.29557       2.29557       1015.09       1017.39    
  44  0.829336     -0.187130      -1.05242       1.05242       1017.12       1018.17    
  45  0.656735     -0.420475      -2.36477       2.36477       1021.00       1023.37    
  46  0.955374     -0.456526E-01 -0.256752      0.256752       1018.31       1018.56    
  47  0.220157      -1.51341      -8.51148       8.51148       1023.79       1032.30    
  48  0.151230      -1.88895      -10.6235       10.6235       1024.24       1034.87    
  49  0.127393      -2.06048      -11.5882       11.5882       1024.69       1036.28    
  50  0.206727      -1.57636      -8.86548       8.86548       1031.63       1040.49    
  51  0.637521     -0.450168      -2.53176       2.53176       1028.33       1030.87    
  52  0.432940     -0.837156      -4.70819       4.70819       1039.65       1044.36    
  53  0.429465     -0.845215      -4.75351       4.75351       1021.23       1025.98    
loop,thermsimp(1:2)       32   16.0624       2.04272    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    373       1031.45          0.83          1.16         22.01          0.00          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1031.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       32
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       33
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      372     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739      -1.20770       1.20770       934.070       935.277    
   2  0.549594     -0.598576      -3.36641       3.36641       934.437       937.804    
   3  0.631143     -0.460223      -2.58831       2.58831       935.687       938.275    
   4  0.268455      -1.31507      -7.39601       7.39601       943.606       951.002    
   5  0.513519     -0.666468      -3.74824       3.74824       931.542       935.290    
   6  0.886725     -0.120220     -0.676121      0.676121       944.199       944.875    
   7  0.568618     -0.564546      -3.17502       3.17502       950.272       953.447    
   8  0.443178     -0.813783      -4.57674       4.57674       943.917       948.494    
   9  0.898491     -0.107039     -0.601989      0.601989       964.011       964.613    
  10  0.235118      -1.44767      -8.14172       8.14172       962.533       970.675    
  11  0.509444     -0.674434      -3.79304       3.79304       968.905       972.698    
  12  0.223921      -1.49646      -8.41614       8.41614       973.408       981.825    
  13  0.188995      -1.66603      -9.36982       9.36982       975.399       984.768    
  14  0.969568     -0.309049E-01 -0.173810      0.173810       971.915       972.089    
  15  0.287265      -1.24735      -7.01514       7.01514       974.601       981.616    
  16  0.559573E-01  -2.88317      -16.2150       16.2150       946.467       962.682    
  17  0.668393     -0.402878      -2.26580       2.26580       978.958       981.224    
  18  0.488393     -0.716635      -4.03038       4.03038       980.018       984.048    
  19  0.605591     -0.501551      -2.82074       2.82074       983.320       986.140    
  20  0.490783     -0.711753      -4.00292       4.00292       983.679       987.682    
  21  0.313180      -1.16098      -6.52936       6.52936       974.618       981.148    
  22  0.200234      -1.60827      -9.04495       9.04495       987.310       996.355    
  23  0.575811     -0.551975      -3.10433       3.10433       985.710       988.814    
  24  0.856965     -0.154358     -0.868112      0.868112       988.084       988.952    
  25  0.310774      -1.16869      -6.57274       6.57274       987.251       993.824    
  26  0.836513     -0.178513      -1.00396       1.00396       986.168       987.172    
  27  0.286335      -1.25059      -7.03338       7.03338       988.093       995.127    
  28  0.240507      -1.42500      -8.01427       8.01427       983.579       991.593    
  29  0.103511E-01  -4.57066      -25.7055       25.7055       993.949       1019.65    
  30  0.516897     -0.659912      -3.71136       3.71136       996.274       999.986    
  31  0.237615      -1.43710      -8.08231       8.08231       995.410       1003.49    
  32  0.602330     -0.506950      -2.85110       2.85110       996.403       999.254    
  33  0.677792     -0.388915      -2.18727       2.18727       984.896       987.083    
  34  0.965031     -0.355954E-01 -0.200189      0.200189       998.357       998.558    
  35  0.851769     -0.160440     -0.902321      0.902321       986.238       987.140    
  36  0.998637     -0.136415E-02 -0.767201E-02  0.767201E-02   994.784       994.791    
  37  0.690071E-01  -2.67355      -15.0361       15.0361       1004.20       1019.24    
  38  0.865316E-02  -4.74983      -26.7132       26.7132       1015.09       1041.81    
  39  0.657551     -0.419234      -2.35778       2.35778       1017.12       1019.48    
  40  0.249918      -1.38662      -7.79840       7.79840       1018.31       1026.11    
  41  0.762839     -0.270708      -1.52247       1.52247       1006.86       1008.39    
  42  0.875176     -0.133331     -0.749856      0.749856       1004.30       1005.05    
  43  0.805569     -0.216207      -1.21595       1.21595       1021.00       1022.22    
  44  0.308797      -1.17507      -6.60863       6.60863       995.346       1001.95    
  45  0.255763      -1.36350      -7.66838       7.66838       1021.23       1028.90    
  46  0.218508      -1.52093      -8.55377       8.55377       1004.17       1012.73    
  47  0.518593     -0.656637      -3.69294       3.69294       1028.33       1032.03    
  48  0.856838     -0.154506     -0.868947      0.868947       1023.79       1024.66    
  49  0.300810      -1.20128      -6.75602       6.75602       1005.98       1012.74    
  50  0.310312      -1.17018      -6.58112       6.58112       1024.24       1030.82    
  51  0.503825     -0.685526      -3.85542       3.85542       1024.69       1028.54    
  52  0.940514     -0.613291E-01 -0.344917      0.344917       1031.63       1031.97    
  53  0.778953     -0.249804      -1.40491       1.40491       1031.45       1032.86    
loop,thermsimp(1:2)       33   1.20770       3.36641    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374        991.62          0.85          1.14         22.19          0.01          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    991.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       33
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       34
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      373     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -5.50284       5.50284       934.070       939.573    
   2  0.356800      -1.03058      -5.79602       5.79602       931.542       937.338    
   3  0.686180     -0.376616      -2.11810       2.11810       934.437       936.555    
   4  0.443986     -0.811963      -4.56650       4.56650       935.687       940.253    
   5  0.837544     -0.177281     -0.997035      0.997035       944.199       945.196    
   6  0.902394     -0.102704     -0.577610      0.577610       943.917       944.495    
   7  0.509658E-01  -2.97660      -16.7405       16.7405       943.606       960.346    
   8  0.662569     -0.411631      -2.31503       2.31503       950.272       952.587    
   9  0.226311      -1.48585      -8.35645       8.35645       946.467       954.823    
  10  0.336196      -1.09006      -6.13054       6.13054       964.011       970.142    
  11  0.122038      -2.10342      -11.8297       11.8297       962.533       974.363    
  12  0.323275      -1.12925      -6.35094       6.35094       971.915       978.266    
  13  0.326513      -1.11929      -6.29490       6.29490       968.905       975.200    
  14  0.904434     -0.100446     -0.564910      0.564910       974.618       975.183    
  15  0.856476     -0.154928     -0.871322      0.871322       978.958       979.829    
  16  0.873700     -0.135019     -0.759349      0.759349       974.601       975.360    
  17  0.989627     -0.104267E-01 -0.586402E-01  0.586402E-01   973.408       973.467    
  18  0.546745     -0.603772      -3.39563       3.39563       980.018       983.414    
  19  0.731718     -0.312360      -1.75672       1.75672       975.399       977.155    
  20  0.859154     -0.151807     -0.853766      0.853766       983.320       984.173    
  21  0.419381     -0.868976      -4.88714       4.88714       984.896       989.783    
  22  0.587067     -0.532617      -2.99545       2.99545       986.238       989.233    
  23  0.460289E-01  -3.07849      -17.3135       17.3135       986.168       1003.48    
  24  0.522902     -0.648362      -3.64641       3.64641       983.679       987.326    
  25  0.398671     -0.919618      -5.17196       5.17196       985.710       990.882    
  26  0.881302     -0.126355     -0.710623      0.710623       988.084       988.795    
  27  0.226039      -1.48705      -8.36319       8.36319       983.579       991.942    
  28  0.124144      -2.08631      -11.7335       11.7335       987.251       998.985    
  29  0.542680     -0.611235      -3.43761       3.43761       994.784       998.221    
  30  0.167496      -1.78679      -10.0490       10.0490       988.093       998.142    
  31  0.619825     -0.478318      -2.69008       2.69008       987.310       990.000    
  32  0.169564      -1.77452      -9.97998       9.97998       998.357       1008.34    
  33  0.781291     -0.246807      -1.38805       1.38805       996.403       997.791    
  34  0.486264     -0.721004      -4.05495       4.05495       996.274       1000.33    
  35  0.895366     -0.110522     -0.621580      0.621580       995.346       995.967    
  36  0.321503      -1.13475      -6.38186       6.38186       995.410       1001.79    
  37  0.607862E-01  -2.80039      -15.7495       15.7495       1004.30       1020.05    
  38  0.365124      -1.00752      -5.66631       5.66631       1006.86       1012.53    
  39  0.110107      -2.20630      -12.4083       12.4083       1004.17       1016.58    
  40  0.905082     -0.997294E-01 -0.560881      0.560881       1005.98       1006.54    
  41  0.960140     -0.406759E-01 -0.228763      0.228763       1004.20       1004.43    
  42  0.320200      -1.13881      -6.40469       6.40469       1017.12       1023.53    
  43  0.396920     -0.924021      -5.19672       5.19672       993.949       999.146    
  44  0.674668     -0.393534      -2.21325       2.21325       1021.00       1023.22    
  45  0.894300     -0.111715     -0.628286      0.628286       1023.79       1024.41    
  46  0.875669     -0.132767     -0.746688      0.746688       1018.31       1019.05    
  47  0.881286     -0.126374     -0.710729      0.710729       1024.69       1025.40    
  48  0.779885     -0.248609      -1.39819       1.39819       1021.23       1022.63    
  49  0.691264     -0.369233      -2.07658       2.07658       1024.24       1026.32    
  50  0.406618     -0.899882      -5.06097       5.06097       1031.63       1036.69    
  51  0.225318      -1.49024      -8.38116       8.38116       1028.33       1036.71    
  52  0.172220      -1.75898      -9.89258       9.89258       1031.45       1041.34    
  53  0.479523     -0.734964      -4.13346       4.13346       991.624       995.757    
loop,thermsimp(1:2)       34   5.50284       5.79602    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375       1046.95          0.86          1.13         21.82          0.09          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    376        968.29          0.86          1.14         21.92          0.01          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    968.29
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       34
neval is:      375
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       35
neval is:      375


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      375     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -4.14651       4.14651       934.437       938.584    
   2  0.380700     -0.965745      -5.43138       5.43138       931.542       936.973    
   3  0.821138     -0.197064      -1.10829       1.10829       934.070       935.178    
   4  0.728654     -0.316557      -1.78033       1.78033       935.687       937.467    
   5  0.670900     -0.399135      -2.24475       2.24475       943.917       946.162    
   6  0.175262      -1.74147      -9.79409       9.79409       944.199       953.993    
   7  0.709150     -0.343688      -1.93291       1.93291       950.272       952.205    
   8  0.247481      -1.39642      -7.85351       7.85351       946.467       954.320    
   9  0.231597      -1.46276      -8.22660       8.22660       943.606       951.833    
  10  0.764757     -0.268198      -1.50835       1.50835       964.011       965.520    
  11  0.798540     -0.224970      -1.26524       1.26524       973.408       974.674    
  12  0.903782     -0.101167     -0.568968      0.568968       962.533       963.102    
  13  0.136634      -1.99045      -11.1944       11.1944       974.618       985.813    
  14  0.141955      -1.95225      -10.9795       10.9795       968.905       979.885    
  15  0.658650     -0.417563      -2.34839       2.34839       974.601       976.949    
  16  0.265370      -1.32663      -7.46100       7.46100       975.399       982.860    
  17  0.439277E-01  -3.12521      -17.5763       17.5763       971.915       989.491    
  18  0.451732     -0.794667      -4.46923       4.46923       978.958       983.427    
  19  0.475868     -0.742615      -4.17649       4.17649       980.018       984.195    
  20  0.336185      -1.09009      -6.13072       6.13072       983.320       989.450    
  21  0.519277     -0.655317      -3.68552       3.68552       983.679       987.365    
  22  0.455030     -0.787393      -4.42832       4.42832       988.084       992.512    
  23  0.272148E-01  -3.60399      -20.2690       20.2690       986.238       1006.51    
  24  0.125510      -2.07537      -11.6719       11.6719       984.896       996.567    
  25  0.687868     -0.374159      -2.10428       2.10428       987.310       989.414    
  26  0.271894      -1.30234      -7.32442       7.32442       985.710       993.034    
  27  0.641335     -0.444204      -2.49822       2.49822       983.579       986.077    
  28  0.858838E-01  -2.45476      -13.8056       13.8056       991.624       1005.43    
  29  0.579605     -0.545408      -3.06739       3.06739       995.346       998.413    
  30  0.249942      -1.38653      -7.79788       7.79788       996.403       1004.20    
  31  0.938016     -0.639885E-01 -0.359873      0.359873       988.093       988.453    
  32  0.453695     -0.790330      -4.44484       4.44484       994.784       999.228    
  33  0.319751      -1.14021      -6.41259       6.41259       987.251       993.664    
  34  0.346149      -1.06089      -5.96646       5.96646       993.949       999.916    
  35  0.870951     -0.138169     -0.777069      0.777069       996.274       997.051    
  36  0.187313      -1.67497      -9.42010       9.42010       995.410       1004.83    
  37  0.984950     -0.151645E-01 -0.852859E-01  0.852859E-01   986.168       986.253    
  38  0.524062     -0.646145      -3.63394       3.63394       1004.20       1007.84    
  39  0.432392     -0.838423      -4.71532       4.71532       1005.98       1010.70    
  40  0.687254     -0.375052      -2.10930       2.10930       998.357       1000.47    
  41  0.869131     -0.140262     -0.788836      0.788836       1006.86       1007.65    
  42  0.350749      -1.04769      -5.89221       5.89221       1004.17       1010.07    
  43  0.663152E-01  -2.71334      -15.2599       15.2599       1018.31       1033.57    
  44  0.306857      -1.18137      -6.64407       6.64407       1004.30       1010.94    
  45  0.925728     -0.771751E-01 -0.434035      0.434035       1021.23       1021.66    
  46  0.649899     -0.430939      -2.42361       2.42361       1021.00       1023.43    
  47  0.492368     -0.708529      -3.98479       3.98479       1017.12       1021.11    
  48  0.104223      -2.26122      -12.7172       12.7172       1023.79       1036.50    
  49  0.345103      -1.06391      -5.98348       5.98348       1024.69       1030.67    
  50  0.425380     -0.854773      -4.80727       4.80727       1024.24       1029.05    
  51  0.922590     -0.805699E-01 -0.453128      0.453128       1031.63       1032.08    
  52  0.209663      -1.56226      -8.78618       8.78618       1028.33       1037.12    
  53  0.402772     -0.909384      -5.11440       5.11440       968.287       973.401    
loop,thermsimp(1:2)       35   4.14651       5.43138    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    377       1050.17          0.82          1.15         21.88          0.00          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    378        981.71          0.84          1.14         21.89          0.00          0.05         23.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    981.71
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       35
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       36
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      377     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01 -0.325867      0.325867       934.070       934.396    
   2  0.628336     -0.464680      -2.61338       2.61338       931.542       934.155    
   3  0.261321      -1.34200      -7.54747       7.54747       935.687       943.234    
   4  0.256100      -1.36219      -7.66098       7.66098       934.437       942.098    
   5  0.318070      -1.14548      -6.44224       6.44224       943.917       950.360    
   6  0.895943     -0.109878     -0.617960      0.617960       943.606       944.224    
   7  0.856491     -0.154912     -0.871229      0.871229       950.272       951.143    
   8  0.269953      -1.30951      -7.36471       7.36471       944.199       951.564    
   9  0.663616     -0.410051      -2.30614       2.30614       946.467       948.773    
  10  0.249338E-01  -3.69153      -20.7613       20.7613       962.533       983.294    
  11  0.362852      -1.01376      -5.70141       5.70141       964.011       969.713    
  12  0.868529E-02  -4.74612      -26.6923       26.6923       968.287       994.979    
  13  0.705785     -0.348444      -1.95966       1.95966       973.408       975.368    
  14  0.527358     -0.639875      -3.59868       3.59868       974.601       978.200    
  15  0.831399     -0.184645      -1.03845       1.03845       968.905       969.944    
  16  0.594963     -0.519255      -2.92031       2.92031       975.399       978.319    
  17  0.501981     -0.689193      -3.87604       3.87604       978.958       982.834    
  18  0.594311     -0.520353      -2.92648       2.92648       980.018       982.945    
  19  0.618124     -0.481066      -2.70553       2.70553       974.618       977.324    
  20  0.959578E-01  -2.34385      -13.1819       13.1819       983.579       996.761    
  21  0.776845     -0.252514      -1.42015       1.42015       986.168       987.588    
  22  0.458742     -0.779266      -4.38262       4.38262       983.679       988.062    
  23  0.645084     -0.438374      -2.46543       2.46543       988.093       990.559    
  24  0.545194     -0.606614      -3.41161       3.41161       987.310       990.721    
  25  0.618072     -0.481151      -2.70601       2.70601       983.320       986.026    
  26  0.390168     -0.941179      -5.29322       5.29322       971.915       977.208    
  27  0.122318      -2.10113      -11.8168       11.8168       988.084       999.901    
  28  0.823049     -0.194740      -1.09522       1.09522       985.710       986.805    
  29  0.817844E-01  -2.50367      -14.0807       14.0807       987.251       1001.33    
  30  0.189400      -1.66389      -9.35778       9.35778       984.896       994.253    
  31  0.257378      -1.35721      -7.63299       7.63299       996.274       1003.91    
  32  0.854384     -0.157375     -0.885082      0.885082       995.346       996.231    
  33  0.128350      -2.05300      -11.5461       11.5461       994.784       1006.33    
  34  0.410790     -0.889673      -5.00355       5.00355       993.949       998.953    
  35  0.645584     -0.437599      -2.46107       2.46107       998.357       1000.82    
  36  0.309517      -1.17274      -6.59554       6.59554       996.403       1003.00    
  37  0.568550     -0.564667      -3.17570       3.17570       995.410       998.585    
  38  0.702184     -0.353560      -1.98843       1.98843       991.624       993.612    
  39  0.939991     -0.618850E-01 -0.348043      0.348043       986.238       986.586    
  40  0.944105     -0.575180E-01 -0.323483      0.323483       1006.86       1007.19    
  41  0.202943      -1.59483      -8.96939       8.96939       1004.20       1013.17    
  42  0.948631E-02  -4.65791      -26.1962       26.1962       1004.17       1030.37    
  43  0.568674     -0.564449      -3.17448       3.17448       1005.98       1009.16    
  44  0.216733      -1.52909      -8.59964       8.59964       1004.30       1012.90    
  45  0.385755     -0.952553      -5.35718       5.35718       1017.12       1022.48    
  46  0.894850E-01  -2.41368      -13.5746       13.5746       1021.23       1034.80    
  47  0.136648      -1.99035      -11.1938       11.1938       1021.00       1032.20    
  48  0.473765     -0.747044      -4.20140       4.20140       1024.24       1028.44    
  49  0.208114E-01  -3.87225      -21.7777       21.7777       1024.69       1046.47    
  50  0.158159      -1.84415      -10.3716       10.3716       1031.63       1042.00    
  51  0.112432      -2.18541      -12.2908       12.2908       1018.31       1030.60    
  52  0.135630      -1.99782      -11.2358       11.2358       1023.79       1035.02    
  53  0.976001E-01  -2.32688      -13.0864       13.0864       981.710       994.797    
loop,thermsimp(1:2)       36  0.325867       2.61338    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    379        925.15          0.86          1.14         22.01          0.00          0.06         24.07
Just calling func    0   0         24.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    380       1024.87          0.83          1.14         21.86          0.00          0.05         23.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    925.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       36
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       37
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      379     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.577652     -0.548784      -3.08638       3.08638       931.542       934.628    
   2  0.954687     -0.463716E-01 -0.260795      0.260795       934.070       934.331    
   3  0.530232     -0.634441      -3.56812       3.56812       934.437       938.005    
   4  0.762581     -0.271046      -1.52437       1.52437       935.687       937.211    
   5  0.261488      -1.34137      -7.54389       7.54389       943.606       951.150    
   6  0.639820     -0.446569      -2.51152       2.51152       946.467       948.978    
   7  0.527286     -0.640012      -3.59944       3.59944       943.917       947.517    
   8  0.819676     -0.198846      -1.11831       1.11831       950.272       951.390    
   9  0.564974     -0.570976      -3.21119       3.21119       944.199       947.410    
  10  0.313261      -1.16072      -6.52792       6.52792       964.011       970.539    
  11  0.741013     -0.299737      -1.68573       1.68573       968.905       970.591    
  12  0.286155      -1.25122      -7.03690       7.03690       973.408       980.445    
  13  0.145515      -1.92747      -10.8402       10.8402       971.915       982.755    
  14  0.417445     -0.873602      -4.91316       4.91316       974.618       979.532    
  15  0.110117      -2.20621      -12.4078       12.4078       974.601       987.009    
  16  0.798228     -0.225361      -1.26744       1.26744       975.399       976.666    
  17  0.981317     -0.188596E-01 -0.106067      0.106067       978.958       979.064    
  18  0.947313     -0.541256E-01 -0.304404      0.304404       980.018       980.322    
  19  0.979175     -0.210453E-01 -0.118359      0.118359       962.533       962.651    
  20  0.507968     -0.677337      -3.80936       3.80936       983.320       987.129    
  21  0.313327      -1.16051      -6.52672       6.52672       986.238       992.765    
  22  0.174912      -1.74347      -9.80535       9.80535       985.710       995.515    
  23  0.278222      -1.27933      -7.19501       7.19501       986.168       993.363    
  24  0.551320     -0.595439      -3.34877       3.34877       983.679       987.028    
  25  0.509281     -0.674756      -3.79485       3.79485       988.093       991.888    
  26  0.202795E-01  -3.89814      -21.9233       21.9233       987.310       1009.23    
  27  0.394215     -0.930860      -5.23518       5.23518       991.624       996.859    
  28  0.463302     -0.769377      -4.32700       4.32700       984.896       989.223    
  29  0.132020      -2.02480      -11.3876       11.3876       981.710       993.098    
  30  0.330810      -1.10621      -6.22137       6.22137       968.287       974.508    
  31  0.415110     -0.879212      -4.94471       4.94471       995.346       1000.29    
  32  0.381803     -0.962850      -5.41509       5.41509       983.579       988.994    
  33  0.209798E-01  -3.86420      -21.7324       21.7324       995.410       1017.14    
  34  0.906539     -0.981217E-01 -0.551839      0.551839       993.949       994.501    
  35  0.507460     -0.678337      -3.81499       3.81499       988.084       991.899    
  36  0.694619     -0.364392      -2.04935       2.04935       998.357       1000.41    
  37  0.704259     -0.350610      -1.97184       1.97184       987.251       989.223    
  38  0.953152     -0.479806E-01 -0.269844      0.269844       996.403       996.673    
  39  0.393408     -0.932907      -5.24670       5.24670       996.274       1001.52    
  40  0.361825      -1.01659      -5.71736       5.71736       994.784       1000.50    
  41  0.420592     -0.866091      -4.87092       4.87092       1006.86       1011.73    
  42  0.474514     -0.745463      -4.19251       4.19251       1005.98       1010.17    
  43  0.769306     -0.262267      -1.47500       1.47500       1004.30       1005.77    
  44  0.881065     -0.126624     -0.712134      0.712134       1004.20       1004.92    
  45  0.298206      -1.20997      -6.80491       6.80491       1017.12       1023.93    
  46  0.364982E-01  -3.31049      -18.6183       18.6183       1024.24       1042.86    
  47  0.835758     -0.179417      -1.00904       1.00904       1004.17       1005.18    
  48  0.936392     -0.657215E-01 -0.369620      0.369620       1018.31       1018.68    
  49  0.213316      -1.54498      -8.68901       8.68901       1021.00       1029.69    
  50  0.942026     -0.597221E-01 -0.335879      0.335879       1021.23       1021.56    
  51  0.130068      -2.03970      -11.4713       11.4713       1023.79       1035.26    
  52  0.115047      -2.16241      -12.1615       12.1615       1031.63       1043.79    
  53  0.320926      -1.13654      -6.39196       6.39196       925.150       931.542    
loop,thermsimp(1:2)       37   3.08638      0.260795    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381       1945.60          0.86          1.14         21.91          0.00          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    382        935.20          0.83          1.14         21.89          0.00          0.04         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    1945.6        1.028     -2.498      4.388     -102.6      1.484    
                      0.8745      1.200     -99.70      5.202      2.672    

                       2.131     -2.162      1.540      7000.      7000.    

                      -1.748      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -8.261      3.885     -13.38      6.846    

                      -17.29     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.3505E-01 0.3076     0.5023E-01 0.2764    

                     -0.2486    -0.1116     0.2124     0.1931     0.1923    



                     -0.6344    -0.7296      0.000     0.1313    -0.8330E-01

                      0.5976E-01 0.2291    -0.7116    -0.8230E-01 0.3810    

                      0.1433     0.1580    -0.8909     -1.543      7000.    



                      -1.702     -1.517     -2.142     -1.982    -0.3807    

                     -0.3252      9.417      8.742    -0.1672E+05 -6.000    

                      0.4054E-01 -2.337      9.468      8.955    -0.1969E+05



                      -6.000     0.6241    -0.2561      8.899      9.199    

                     -0.1944E+05 -6.000    -0.6818    -0.5117      9.057    

                       8.934    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    935.20
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       37
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       38
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      381     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708199     -0.345030      -1.94046       1.94046       925.150       927.090    
   2  0.656861     -0.420283      -2.36368       2.36368       934.070       936.433    
   3  0.531016     -0.632963      -3.55980       3.55980       931.542       935.102    
   4  0.259645      -1.34844      -7.58368       7.58368       935.687       943.271    
   5  0.509285E-01  -2.97733      -16.7446       16.7446       934.437       951.182    
   6  0.222403      -1.50327      -8.45441       8.45441       944.199       952.653    
   7  0.883122E-01  -2.42688      -13.6488       13.6488       943.917       957.566    
   8  0.689941     -0.371150      -2.08736       2.08736       946.467       948.554    
   9  0.811351     -0.209054      -1.17573       1.17573       943.606       944.782    
  10  0.252526      -1.37624      -7.74003       7.74003       950.272       958.012    
  11  0.229840      -1.47037      -8.26942       8.26942       962.533       970.802    
  12  0.108257      -2.22324      -12.5036       12.5036       964.011       976.515    
  13  0.933379E-02  -4.67411      -26.2874       26.2874       968.905       995.192    
  14  0.685050E-01  -2.68085      -15.0772       15.0772       968.287       983.364    
  15  0.875782     -0.132638     -0.745962      0.745962       975.399       976.145    
  16  0.592250     -0.523826      -2.94601       2.94601       978.958       981.904    
  17  0.259190E-01  -3.65278      -20.5433       20.5433       974.618       995.162    
  18  0.411624     -0.887646      -4.99215       4.99215       980.018       985.010    
  19  0.215731      -1.53372      -8.62571       8.62571       973.408       982.034    
  20  0.104157      -2.26185      -12.7207       12.7207       971.915       984.635    
  21  0.796475     -0.227560      -1.27980       1.27980       974.601       975.881    
  22  0.316732      -1.14970      -6.46595       6.46595       983.679       990.145    
  23  0.868566     -0.140911     -0.792489      0.792489       983.320       984.112    
  24  0.932817     -0.695461E-01 -0.391129      0.391129       983.579       983.970    
  25  0.704796E-01  -2.65243      -14.9174       14.9174       984.896       999.813    
  26  0.584289     -0.537360      -3.02213       3.02213       987.251       990.273    
  27  0.345306      -1.06332      -5.98016       5.98016       988.093       994.073    
  28  0.367589E-01  -3.30338      -18.5783       18.5783       988.084       1006.66    
  29  0.470285     -0.754417      -4.24286       4.24286       986.238       990.481    
  30  0.303718      -1.19165      -6.70190       6.70190       981.710       988.412    
  31  0.298675      -1.20840      -6.79607       6.79607       986.168       992.964    
  32  0.506100     -0.681022      -3.83009       3.83009       993.949       997.779    
  33  0.240488      -1.42508      -8.01472       8.01472       985.710       993.725    
  34  0.673726     -0.394932      -2.22111       2.22111       996.403       998.624    
  35  0.303531      -1.19227      -6.70536       6.70536       991.624       998.329    
  36  0.450278     -0.797890      -4.48736       4.48736       995.346       999.833    
  37  0.850970     -0.161378     -0.907595      0.907595       998.357       999.265    
  38  0.370442     -0.993060      -5.58500       5.58500       994.784       1000.37    
  39  0.328520      -1.11316      -6.26043       6.26043       996.274       1002.53    
  40  0.194991      -1.63480      -9.19417       9.19417       1004.20       1013.40    
  41  0.547740     -0.601955      -3.38541       3.38541       1004.17       1007.56    
  42  0.574734     -0.553847      -3.11486       3.11486       1004.30       1007.41    
  43  0.900615     -0.104678     -0.588712      0.588712       987.310       987.899    
  44  0.316870      -1.14926      -6.46349       6.46349       1005.98       1012.44    
  45  0.961546     -0.392133E-01 -0.220537      0.220537       1006.86       1007.08    
  46  0.714054     -0.336796      -1.89415       1.89415       995.410       997.304    
  47  0.325407E-01  -3.42526      -19.2638       19.2638       1018.31       1037.57    
  48  0.264027      -1.33170      -7.48954       7.48954       1021.23       1028.72    
  49  0.139486      -1.96979      -11.0782       11.0782       1017.12       1028.20    
  50  0.568563     -0.564643      -3.17557       3.17557       1021.00       1024.18    
  51  0.691470     -0.368936      -2.07491       2.07491       1023.79       1025.86    
  52  0.214963      -1.53729      -8.64577       8.64577       1024.24       1032.89    
  53  0.515636     -0.662353      -3.72510       3.72510       935.201       938.926    
loop,thermsimp(1:2)       38   1.94046       2.36368    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383       1072.61          0.86          1.14         21.92          0.01          0.05         23.98
Just calling func    0   0         23.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    384        968.57          0.85          1.14         21.86          0.00          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    968.57
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       38
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       39
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      383     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.796195     -0.227912      -1.28178       1.28178       925.150       926.432    
   2  0.306803      -1.18155      -6.64507       6.64507       931.542       938.187    
   3  0.857946     -0.153214     -0.861681      0.861681       934.070       934.931    
   4  0.363815      -1.01111      -5.68651       5.68651       935.201       940.887    
   5  0.755322E-01  -2.58320      -14.5280       14.5280       935.687       950.215    
   6  0.345998E-01  -3.36391      -18.9187       18.9187       943.606       962.525    
   7  0.280587      -1.27087      -7.14742       7.14742       946.467       953.614    
   8  0.907418     -0.971519E-01 -0.546385      0.546385       934.437       934.984    
   9  0.696180     -0.362147      -2.03673       2.03673       944.199       946.236    
  10  0.640049     -0.446211      -2.50951       2.50951       943.917       946.427    
  11  0.620842     -0.476679      -2.68086       2.68086       950.272       952.952    
  12  0.850691     -0.161706     -0.909441      0.909441       962.533       963.442    
  13  0.308317      -1.17663      -6.61738       6.61738       974.601       981.218    
  14  0.198496      -1.61698      -9.09397       9.09397       975.399       984.493    
  15  0.119809      -2.12186      -11.9334       11.9334       964.011       975.945    
  16  0.905871     -0.988582E-01 -0.555981      0.555981       978.958       979.514    
  17  0.386344     -0.951028      -5.34861       5.34861       973.408       978.757    
  18  0.112809      -2.18206      -12.2719       12.2719       968.287       980.559    
  19  0.682866     -0.381457      -2.14533       2.14533       983.579       985.724    
  20  0.819362     -0.199230      -1.12047       1.12047       983.320       984.440    
  21  0.412742     -0.884933      -4.97689       4.97689       971.915       976.892    
  22  0.211811E-01  -3.85464      -21.6786       21.6786       980.018       1001.70    
  23  0.422800     -0.860857      -4.84149       4.84149       987.310       992.151    
  24  0.826028     -0.191126      -1.07490       1.07490       981.710       982.785    
  25  0.457858     -0.781197      -4.39348       4.39348       983.679       988.073    
  26  0.551067     -0.595900      -3.35136       3.35136       987.251       990.603    
  27  0.160440      -1.82984      -10.2910       10.2910       986.238       996.529    
  28  0.240310      -1.42582      -8.01887       8.01887       986.168       994.187    
  29  0.614859     -0.486362      -2.73531       2.73531       985.710       988.445    
  30  0.489204     -0.714976      -4.02105       4.02105       988.093       992.114    
  31  0.151691      -1.88591      -10.6064       10.6064       974.618       985.225    
  32  0.221776      -1.50609      -8.47028       8.47028       968.905       977.375    
  33  0.333050      -1.09946      -6.18341       6.18341       995.410       1001.59    
  34  0.905001     -0.998190E-01 -0.561385      0.561385       993.949       994.511    
  35  0.598599     -0.513164      -2.88605       2.88605       991.624       994.510    
  36  0.603742     -0.504608      -2.83793       2.83793       996.403       999.241    
  37  0.989214     -0.108448E-01 -0.609914E-01  0.609914E-01   998.357       998.418    
  38  0.175887      -1.73792      -9.77409       9.77409       984.896       994.670    
  39  0.708621     -0.344434      -1.93711       1.93711       995.346       997.283    
  40  0.940581     -0.612570E-01 -0.344511      0.344511       994.784       995.128    
  41  0.870068     -0.139184     -0.782772      0.782772       996.274       997.057    
  42  0.260264      -1.34606      -7.57028       7.57028       988.084       995.654    
  43  0.216654      -1.52946      -8.60170       8.60170       1006.86       1015.46    
  44  0.553762     -0.591020      -3.32391       3.32391       1004.30       1007.62    
  45  0.891465     -0.114889     -0.646140      0.646140       1004.17       1004.82    
  46  0.320048      -1.13928      -6.40737       6.40737       1005.98       1012.39    
  47  0.163518      -1.81083      -10.1842       10.1842       1004.20       1014.39    
  48  0.652431     -0.427050      -2.40174       2.40174       1021.00       1023.40    
  49  0.317737      -1.14653      -6.44813       6.44813       1023.79       1030.23    
  50  0.321191      -1.13572      -6.38731       6.38731       1017.12       1023.51    
  51  0.750162     -0.287466      -1.61672       1.61672       1021.23       1022.84    
  52  0.172611      -1.75672      -9.87983       9.87983       1024.24       1034.12    
  53  0.413556     -0.882963      -4.96581       4.96581       968.571       973.537    
loop,thermsimp(1:2)       39   1.28178       6.64507    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    385        998.30          0.85          1.14         22.07          0.00          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    998.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       39
neval is:      384
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       40
neval is:      384


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      384     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783363     -0.244159      -1.37316       1.37316       925.150       926.523    
   2  0.179321      -1.71858      -9.66534       9.66534       934.070       943.735    
   3  0.331080      -1.10539      -6.21677       6.21677       934.437       940.654    
   4  0.130870      -2.03355      -11.4368       11.4368       931.542       942.979    
   5  0.604904     -0.502686      -2.82712       2.82712       935.201       938.028    
   6  0.140568      -1.96207      -11.0347       11.0347       944.199       955.234    
   7  0.127414      -2.06031      -11.5873       11.5873       943.917       955.505    
   8  0.389565     -0.942725      -5.30191       5.30191       935.687       940.989    
   9  0.835608     -0.179595      -1.01005       1.01005       950.272       951.282    
  10  0.934873     -0.673445E-01 -0.378748      0.378748       946.467       946.845    
  11  0.639074     -0.447735      -2.51808       2.51808       943.606       946.124    
  12  0.349757      -1.05052      -5.90813       5.90813       962.533       968.441    
  13  0.175521      -1.74000      -9.78579       9.78579       968.571       978.357    
  14  0.761611     -0.272320      -1.53153       1.53153       964.011       965.543    
  15  0.162952      -1.81430      -10.2037       10.2037       971.915       982.118    
  16  0.542858     -0.610907      -3.43576       3.43576       968.905       972.341    
  17  0.715099     -0.335334      -1.88593       1.88593       973.408       975.294    
  18  0.996052     -0.395608E-02 -0.222491E-01  0.222491E-01   978.958       978.980    
  19  0.668265     -0.403070      -2.26688       2.26688       968.287       970.554    
  20  0.294619      -1.22207      -6.87298       6.87298       974.601       981.474    
  21  0.721551     -0.326352      -1.83541       1.83541       981.710       983.546    
  22  0.216610      -1.52966      -8.60285       8.60285       983.320       991.922    
  23  0.649086     -0.432191      -2.43065       2.43065       975.399       977.829    
  24  0.692922E-01  -2.66942      -15.0129       15.0129       974.618       989.631    
  25  0.271271      -1.30464      -7.33731       7.33731       983.579       990.916    
  26  0.407239     -0.898355      -5.05238       5.05238       983.679       988.732    
  27  0.435034     -0.832331      -4.68105       4.68105       985.710       990.391    
  28  0.638725     -0.448281      -2.52115       2.52115       987.251       989.772    
  29  0.932325     -0.700735E-01 -0.394096      0.394096       988.093       988.487    
  30  0.958672     -0.422065E-01 -0.237371      0.237371       987.310       987.547    
  31  0.336870      -1.08806      -6.11927       6.11927       986.168       992.287    
  32  0.453036     -0.791783      -4.45301       4.45301       991.624       996.077    
  33  0.422569     -0.861402      -4.84455       4.84455       993.949       998.794    
  34  0.596674     -0.516385      -2.90416       2.90416       984.896       987.800    
  35  0.586088     -0.534286      -3.00484       3.00484       994.784       997.788    
  36  0.174805      -1.74409      -9.80879       9.80879       988.084       997.893    
  37  0.854432     -0.157318     -0.884763      0.884763       986.238       987.123    
  38  0.754323     -0.281935      -1.58561       1.58561       996.274       997.860    
  39  0.956897     -0.440598E-01 -0.247794      0.247794       995.346       995.593    
  40  0.334431      -1.09533      -6.16014       6.16014       998.357       1004.52    
  41  0.750609     -0.286871      -1.61337       1.61337       996.403       998.016    
  42  0.778602     -0.250255      -1.40744       1.40744       995.410       996.817    
  43  0.330765      -1.10635      -6.22213       6.22213       980.018       986.240    
  44  0.601104     -0.508987      -2.86256       2.86256       1004.17       1007.04    
  45  0.578570     -0.547197      -3.07745       3.07745       1004.30       1007.38    
  46  0.381025     -0.964891      -5.42658       5.42658       1005.98       1011.41    
  47  0.764260     -0.268847      -1.51200       1.51200       1004.20       1005.72    
  48  0.194556      -1.63704      -9.20675       9.20675       1006.86       1016.07    
  49  0.785702E-01  -2.54376      -14.3062       14.3062       1021.23       1035.53    
  50  0.253837E-01  -3.67365      -20.6607       20.6607       1021.00       1041.66    
  51  0.149049      -1.90348      -10.7052       10.7052       1017.12       1027.83    
  52  0.591675     -0.524797      -2.95148       2.95148       1023.79       1026.74    
  53  0.471206     -0.752459      -4.23185       4.23185       998.300       1002.53    
loop,thermsimp(1:2)       40   1.37316       9.66534    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    386       1008.71          0.86          1.15         22.10          0.00          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1008.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       40
neval is:      385
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       41
neval is:      385


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      385     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762547     -0.271091      -1.52463       1.52463       925.150       926.675    
   2  0.700395     -0.356110      -2.00278       2.00278       935.201       937.203    
   3  0.110610      -2.20174      -12.3827       12.3827       934.437       946.820    
   4  0.542261     -0.612007      -3.44195       3.44195       935.687       939.129    
   5  0.993402     -0.662023E-02 -0.372324E-01  0.372324E-01   931.542       931.579    
   6  0.370923     -0.991761      -5.57769       5.57769       934.070       939.647    
   7  0.311008      -1.16794      -6.56852       6.56852       943.606       950.174    
   8  0.120775      -2.11383      -11.8882       11.8882       946.467       958.355    
   9  0.496739     -0.699690      -3.93508       3.93508       950.272       954.207    
  10  0.823539     -0.194144      -1.09187       1.09187       944.199       945.291    
  11  0.401420     -0.912746      -5.13331       5.13331       943.917       949.051    
  12  0.467810E-01  -3.06228      -17.2223       17.2223       964.011       981.234    
  13  0.104633      -2.25729      -12.6951       12.6951       962.533       975.228    
  14  0.233534      -1.45443      -8.17975       8.17975       968.287       976.466    
  15  0.959269     -0.415834E-01 -0.233866      0.233866       968.905       969.139    
  16  0.359845      -1.02208      -5.74821       5.74821       973.408       979.157    
  17  0.141753E-01  -4.25626      -23.9373       23.9373       975.399       999.336    
  18  0.566935     -0.567510      -3.19169       3.19169       968.571       971.763    
  19  0.901077     -0.104164     -0.585823      0.585823       978.958       979.544    
  20  0.465285     -0.765104      -4.30297       4.30297       974.601       978.904    
  21  0.315152      -1.15470      -6.49407       6.49407       971.915       978.409    
  22  0.954826     -0.462256E-01 -0.259974      0.259974       981.710       981.970    
  23  0.110663      -2.20127      -12.3800       12.3800       980.018       992.398    
  24  0.851067     -0.161264     -0.906953      0.906953       986.238       987.145    
  25  0.768372     -0.263481      -1.48182       1.48182       987.310       988.792    
  26  0.243081      -1.41436      -7.95440       7.95440       984.896       992.850    
  27  0.434279     -0.834069      -4.69083       4.69083       988.093       992.784    
  28  0.855138     -0.156492     -0.880117      0.880117       983.679       984.559    
  29  0.238302      -1.43422      -8.06608       8.06608       974.618       982.685    
  30  0.445547     -0.808452      -4.54676       4.54676       987.251       991.798    
  31  0.290285      -1.23689      -6.95631       6.95631       985.710       992.666    
  32  0.479492     -0.735029      -4.13383       4.13383       983.579       987.713    
  33  0.359712      -1.02245      -5.75029       5.75029       983.320       989.070    
  34  0.429040     -0.846204      -4.75908       4.75908       986.168       990.927    
  35  0.570900     -0.560541      -3.15250       3.15250       995.346       998.498    
  36  0.151312      -1.88841      -10.6205       10.6205       991.624       1002.24    
  37  0.671837     -0.397739      -2.23690       2.23690       995.410       997.647    
  38  0.699384     -0.357556      -2.01091       2.01091       994.784       996.794    
  39  0.337756      -1.08543      -6.10449       6.10449       996.274       1002.38    
  40  0.508282     -0.676718      -3.80588       3.80588       988.084       991.890    
  41  0.153085      -1.87676      -10.5550       10.5550       996.403       1006.96    
  42  0.859571     -0.151322     -0.851040      0.851040       993.949       994.800    
  43  0.240559      -1.42479      -8.01307       8.01307       998.300       1006.31    
  44  0.956907     -0.440496E-01 -0.247736      0.247736       998.357       998.605    
  45  0.695010     -0.363829      -2.04619       2.04619       1004.20       1006.25    
  46  0.258459      -1.35302      -7.60942       7.60942       1004.17       1011.78    
  47  0.851968     -0.160207     -0.901008      0.901008       1004.30       1005.20    
  48  0.755235     -0.280726      -1.57881       1.57881       1005.98       1007.56    
  49  0.618135     -0.481049      -2.70543       2.70543       1006.86       1009.57    
  50  0.366071      -1.00493      -5.65174       5.65174       1023.79       1029.44    
  51  0.768800     -0.262924      -1.47869       1.47869       1017.12       1018.60    
  52  0.704229     -0.350652      -1.97208       1.97208       1021.23       1023.20    
  53  0.900469     -0.104839     -0.589619      0.589619       1008.71       1009.30    
loop,thermsimp(1:2)       41   1.52463       2.00278    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    387       1002.15          0.86          1.14         21.87          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1002.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       41
neval is:      386
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       42
neval is:      386


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      386     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633054     -0.457200      -2.57131       2.57131       925.150       927.721    
   2  0.416661     -0.875483      -4.92374       4.92374       931.542       936.466    
   3  0.671058E-01  -2.70149      -15.1932       15.1932       935.201       950.394    
   4  0.701446     -0.354612      -1.99435       1.99435       935.687       937.681    
   5  0.176715      -1.73321      -9.74765       9.74765       934.070       943.817    
   6  0.223035      -1.50042      -8.43843       8.43843       944.199       952.637    
   7  0.907694E-01  -2.39943      -13.4945       13.4945       934.437       947.932    
   8  0.113202      -2.17858      -12.2524       12.2524       943.917       956.170    
   9  0.443192     -0.813753      -4.57657       4.57657       943.606       948.183    
  10  0.999048     -0.952172E-03 -0.535505E-02  0.535505E-02   950.272       950.277    
  11  0.606200     -0.500546      -2.81509       2.81509       946.467       949.282    
  12  0.120370      -2.11718      -11.9071       11.9071       968.905       980.812    
  13  0.448885     -0.800988      -4.50478       4.50478       968.571       973.076    
  14  0.531880     -0.631338      -3.55067       3.55067       962.533       966.084    
  15  0.804789     -0.217176      -1.22140       1.22140       968.287       969.508    
  16  0.427230     -0.850433      -4.78286       4.78286       971.915       976.698    
  17  0.222958      -1.50077      -8.44038       8.44038       974.601       983.041    
  18  0.850765     -0.161619     -0.908950      0.908950       973.408       974.317    
  19  0.926988     -0.758150E-01 -0.426386      0.426386       978.958       979.384    
  20  0.729073     -0.315981      -1.77709       1.77709       964.011       965.788    
  21  0.411512     -0.887916      -4.99367       4.99367       981.710       986.704    
  22  0.692157     -0.367942      -2.06932       2.06932       974.618       976.688    
  23  0.917319     -0.862998E-01 -0.485353      0.485353       983.679       984.165    
  24  0.376398     -0.977107      -5.49528       5.49528       986.238       991.733    
  25  0.276694      -1.28484      -7.22600       7.22600       983.579       990.805    
  26  0.296319      -1.21632      -6.84062       6.84062       987.310       994.150    
  27  0.395623     -0.927294      -5.21513       5.21513       983.320       988.535    
  28  0.397122     -0.923511      -5.19385       5.19385       986.168       991.362    
  29  0.414944     -0.879612      -4.94697       4.94697       987.251       992.198    
  30  0.249325      -1.38900      -7.81176       7.81176       988.084       995.896    
  31  0.668798     -0.402273      -2.26240       2.26240       980.018       982.280    
  32  0.765717     -0.266942      -1.50129       1.50129       985.710       987.211    
  33  0.420183     -0.867066      -4.87641       4.87641       988.093       992.970    
  34  0.851189     -0.161121     -0.906149      0.906149       984.896       985.802    
  35  0.733154     -0.310400      -1.74570       1.74570       993.949       995.695    
  36  0.721185E-01  -2.62944      -14.7881       14.7881       994.784       1009.57    
  37  0.356766      -1.03068      -5.79655       5.79655       995.410       1001.21    
  38  0.654280     -0.424220      -2.38583       2.38583       995.346       997.731    
  39  0.662515     -0.411712      -2.31548       2.31548       998.357       1000.67    
  40  0.164156      -1.80694      -10.1623       10.1623       975.399       985.561    
  41  0.116179      -2.15263      -12.1064       12.1064       991.624       1003.73    
  42  0.134772      -2.00417      -11.2715       11.2715       996.274       1007.55    
  43  0.298842      -1.20784      -6.79292       6.79292       1004.30       1011.09    
  44  0.583690     -0.538385      -3.02789       3.02789       1004.20       1007.23    
  45  0.894896     -0.111047     -0.624534      0.624534       998.300       998.925    
  46  0.148951      -1.90414      -10.7089       10.7089       996.403       1007.11    
  47  0.315615      -1.15323      -6.48581       6.48581       1005.98       1012.47    
  48  0.810942     -0.209558      -1.17856       1.17856       1008.71       1009.89    
  49  0.697490     -0.360268      -2.02616       2.02616       1006.86       1008.89    
  50  0.440376     -0.820127      -4.61242       4.61242       1004.17       1008.79    
  51  0.987477     -0.126020E-01 -0.708738E-01  0.708738E-01   1017.12       1017.19    
  52  0.788027     -0.238223      -1.33977       1.33977       1021.23       1022.57    
  53  0.304959      -1.18758      -6.67898       6.67898       1002.15       1008.83    
loop,thermsimp(1:2)       42   2.57131       4.92374    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    388       1002.69          0.86          1.14         21.88          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1002.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       42
neval is:      387
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       43
neval is:      387


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      387     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.165518      -1.79868      -10.1158       10.1158       925.150       935.266    
   2  0.737067     -0.305077      -1.71576       1.71576       931.542       933.258    
   3  0.332012      -1.10258      -6.20097       6.20097       935.687       941.888    
   4  0.756847     -0.278594      -1.56682       1.56682       934.070       935.637    
   5  0.168413      -1.78134      -10.0183       10.0183       934.437       944.456    
   6  0.422244     -0.862172      -4.84888       4.84888       943.606       948.455    
   7  0.865590     -0.144344     -0.811796      0.811796       946.467       947.278    
   8  0.820021     -0.198425      -1.11595       1.11595       950.272       951.388    
   9  0.681904     -0.382867      -2.15326       2.15326       935.201       937.354    
  10  0.476378E-02  -5.34671      -30.0701       30.0701       944.199       974.269    
  11  0.891588     -0.114751     -0.645361      0.645361       943.917       944.563    
  12  0.583910     -0.538008      -3.02577       3.02577       964.011       967.037    
  13  0.224086      -1.49572      -8.41199       8.41199       962.533       970.945    
  14  0.550831     -0.596327      -3.35376       3.35376       968.287       971.641    
  15  0.109755      -2.20951      -12.4263       12.4263       968.571       980.997    
  16  0.173189      -1.75337      -9.86103       9.86103       973.408       983.269    
  17  0.822854     -0.194976      -1.09655       1.09655       974.618       975.715    
  18  0.792562     -0.232484      -1.30750       1.30750       971.915       973.222    
  19  0.383253     -0.959060      -5.39378       5.39378       978.958       984.352    
  20  0.422533     -0.861488      -4.84503       4.84503       968.905       973.750    
  21  0.811047     -0.209429      -1.17783       1.17783       980.018       981.196    
  22  0.860783     -0.149912     -0.843112      0.843112       974.601       975.444    
  23  0.751011     -0.286335      -1.61036       1.61036       983.679       985.290    
  24  0.358967      -1.02452      -5.76195       5.76195       975.399       981.161    
  25  0.877019     -0.131227     -0.738024      0.738024       984.896       985.634    
  26  0.441658     -0.817220      -4.59607       4.59607       981.710       986.306    
  27  0.259650      -1.34842      -7.58357       7.58357       985.710       993.293    
  28  0.106035      -2.24398      -12.6202       12.6202       983.320       995.940    
  29  0.608421     -0.496887      -2.79451       2.79451       983.579       986.373    
  30  0.143099      -1.94422      -10.9344       10.9344       986.168       997.102    
  31  0.242177      -1.41809      -7.97536       7.97536       986.238       994.213    
  32  0.517081     -0.659556      -3.70936       3.70936       987.251       990.961    
  33  0.492461     -0.708339      -3.98372       3.98372       988.093       992.077    
  34  0.839297     -0.175190     -0.985276      0.985276       987.310       988.295    
  35  0.824305     -0.193215      -1.08665       1.08665       993.949       995.036    
  36  0.742325     -0.297968      -1.67578       1.67578       988.084       989.760    
  37  0.158654      -1.84103      -10.3540       10.3540       995.346       1005.70    
  38  0.702604     -0.352962      -1.98507       1.98507       998.300       1000.29    
  39  0.324396      -1.12579      -6.33147       6.33147       998.357       1004.69    
  40  0.628286     -0.464760      -2.61382       2.61382       995.410       998.024    
  41  0.896889     -0.108823     -0.612023      0.612023       991.624       992.236    
  42  0.325633      -1.12199      -6.31008       6.31008       996.403       1002.71    
  43  0.833588     -0.182016      -1.02366       1.02366       1004.20       1005.23    
  44  0.292459      -1.22943      -6.91436       6.91436       996.274       1003.19    
  45  0.625236     -0.469626      -2.64119       2.64119       1004.17       1006.81    
  46  0.613119     -0.489197      -2.75126       2.75126       1002.15       1004.91    
  47  0.521950     -0.650183      -3.65665       3.65665       1006.86       1010.52    
  48  0.999935     -0.646019E-04 -0.363323E-03  0.363323E-03   994.784       994.784    
  49  0.971287E-01  -2.33172      -13.1137       13.1137       1008.71       1021.82    
  50  0.982535     -0.176198E-01 -0.990940E-01  0.990940E-01   1004.30       1004.40    
  51  0.930778     -0.717347E-01 -0.403438      0.403438       1005.98       1006.38    
  52  0.566446     -0.568373      -3.19655       3.19655       1017.12       1020.32    
  53  0.671812     -0.397777      -2.23711       2.23711       1002.69       1004.92    
loop,thermsimp(1:2)       43   10.1158       1.71576    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    389       1007.28          0.84          1.14         21.87          0.01          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1007.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       43
neval is:      388
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       44
neval is:      388


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      388     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960290E-01  -2.34311      -13.1777       13.1777       931.542       944.720    
   2  0.509377     -0.674566      -3.79378       3.79378       925.150       928.944    
   3  0.960906     -0.398785E-01 -0.224278      0.224278       934.070       934.294    
   4  0.145058      -1.93062      -10.8579       10.8579       935.201       946.059    
   5  0.584668     -0.536711      -3.01848       3.01848       935.687       938.705    
   6  0.137819      -1.98182      -11.1458       11.1458       934.437       945.583    
   7  0.829899     -0.186451      -1.04861       1.04861       943.917       944.966    
   8  0.249142      -1.38973      -7.81589       7.81589       946.467       954.282    
   9  0.471049     -0.752793      -4.23373       4.23373       943.606       947.840    
  10  0.744784E-01  -2.59725      -14.6070       14.6070       950.272       964.879    
  11  0.233158      -1.45604      -8.18882       8.18882       964.011       972.200    
  12  0.714243E-01  -2.63912      -14.8425       14.8425       962.533       977.375    
  13  0.749743     -0.288025      -1.61986       1.61986       968.287       969.907    
  14  0.873534     -0.135209     -0.760417      0.760417       971.915       972.675    
  15  0.265951      -1.32444      -7.44870       7.44870       968.905       976.354    
  16  0.328438      -1.11341      -6.26183       6.26183       944.199       950.461    
  17  0.988010     -0.120622E-01 -0.678381E-01  0.678381E-01   974.601       974.669    
  18  0.737788     -0.304099      -1.71026       1.71026       974.618       976.329    
  19  0.171086E-01  -4.06818      -22.8795       22.8795       968.571       991.450    
  20  0.452693     -0.792540      -4.45727       4.45727       975.399       979.856    
  21  0.922976     -0.801523E-01 -0.450779      0.450779       980.018       980.469    
  22  0.323108      -1.12977      -6.35386       6.35386       973.408       979.762    
  23  0.740032     -0.301062      -1.69318       1.69318       978.958       980.651    
  24  0.606229     -0.500498      -2.81482       2.81482       983.679       986.494    
  25  0.813501     -0.206408      -1.16084       1.16084       984.896       986.056    
  26  0.457664     -0.781621      -4.39586       4.39586       981.710       986.106    
  27  0.848286     -0.164537     -0.925363      0.925363       983.579       984.504    
  28  0.430827E-01  -3.14463      -17.6855       17.6855       987.310       1005.00    
  29  0.215038      -1.53694      -8.64380       8.64380       988.084       996.728    
  30  0.955068     -0.459730E-01 -0.258554      0.258554       987.251       987.510    
  31  0.100248      -2.30011      -12.9359       12.9359       988.093       1001.03    
  32  0.272794      -1.29904      -7.30583       7.30583       991.624       998.930    
  33  0.796201E-01  -2.53049      -14.2315       14.2315       985.710       999.941    
  34  0.143803      -1.93931      -10.9067       10.9067       986.238       997.145    
  35  0.151473      -1.88734      -10.6145       10.6145       994.784       1005.40    
  36  0.212508      -1.54878      -8.71037       8.71037       993.949       1002.66    
  37  0.570089     -0.561962      -3.16049       3.16049       983.320       986.480    
  38  0.811663     -0.208669      -1.17356       1.17356       986.168       987.342    
  39  0.652193E-01  -2.73000      -15.3536       15.3536       995.410       1010.76    
  40  0.753919     -0.282470      -1.58862       1.58862       998.300       999.889    
  41  0.915721     -0.880434E-01 -0.495159      0.495159       996.403       996.898    
  42  0.689805     -0.371347      -2.08847       2.08847       996.274       998.363    
  43  0.296032      -1.21729      -6.84606       6.84606       1004.30       1011.15    
  44  0.685645     -0.377395      -2.12248       2.12248       998.357       1000.48    
  45  0.931075     -0.714153E-01 -0.401642      0.401642       1002.15       1002.56    
  46  0.273544      -1.29629      -7.29039       7.29039       1002.69       1009.98    
  47  0.269804E-01  -3.61265      -20.3176       20.3176       1004.20       1024.52    
  48  0.684598     -0.378923      -2.13107       2.13107       995.346       997.477    
  49  0.724056     -0.322886      -1.81592       1.81592       1005.98       1007.80    
  50  0.655515     -0.422333      -2.37522       2.37522       1004.17       1006.55    
  51  0.338921E-01  -3.38457      -19.0349       19.0349       1006.86       1025.90    
  52  0.503484     -0.686204      -3.85923       3.85923       1017.12       1020.98    
  53  0.283419      -1.26083      -7.09095       7.09095       1007.28       1014.37    
loop,thermsimp(1:2)       44   13.1777       3.79378    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    390       1014.62          0.85          1.14         21.86          0.00          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1014.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       44
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       45
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      389     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960257     -0.405547E-01 -0.228081      0.228081       925.150       925.378    
   2  0.700631     -0.355774      -2.00089       2.00089       934.070       936.071    
   3  0.900697     -0.104586     -0.588197      0.588197       935.687       936.275    
   4  0.217613      -1.52504      -8.57687       8.57687       931.542       940.119    
   5  0.247850      -1.39493      -7.84514       7.84514       943.917       951.762    
   6  0.910358     -0.939170E-01 -0.528192      0.528192       934.437       934.966    
   7  0.983752     -0.163817E-01 -0.921314E-01  0.921314E-01   935.201       935.293    
   8  0.161223      -1.82497      -10.2637       10.2637       943.606       953.870    
   9  0.527720     -0.639190      -3.59482       3.59482       944.199       947.794    
  10  0.733734     -0.309609      -1.74125       1.74125       946.467       948.208    
  11  0.406982     -0.898986      -5.05592       5.05592       950.272       955.328    
  12  0.731735     -0.312337      -1.75660       1.75660       968.287       970.043    
  13  0.840576E-01  -2.47625      -13.9265       13.9265       964.011       977.938    
  14  0.505764     -0.681685      -3.83381       3.83381       971.915       975.749    
  15  0.130210      -2.03861      -11.4652       11.4652       974.601       986.066    
  16  0.565496     -0.570053      -3.20599       3.20599       974.618       977.824    
  17  0.944307     -0.573044E-01 -0.322282      0.322282       968.905       969.227    
  18  0.131761      -2.02676      -11.3986       11.3986       962.533       973.932    
  19  0.133275      -2.01534      -11.3343       11.3343       973.408       984.743    
  20  0.890936     -0.115482     -0.649475      0.649475       975.399       976.048    
  21  0.650633     -0.429809      -2.41726       2.41726       980.018       982.435    
  22  0.132428      -2.02172      -11.3702       11.3702       978.958       990.328    
  23  0.731494     -0.312666      -1.75844       1.75844       983.579       985.337    
  24  0.171092      -1.76556      -9.92954       9.92954       984.896       994.825    
  25  0.257579      -1.35643      -7.62859       7.62859       981.710       989.339    
  26  0.324882      -1.12429      -6.32306       6.32306       983.320       989.643    
  27  0.526591     -0.641331      -3.60687       3.60687       983.679       987.286    
  28  0.282402E-01  -3.56701      -20.0610       20.0610       986.168       1006.23    
  29  0.983943     -0.161877E-01 -0.910400E-01  0.910400E-01   987.251       987.342    
  30  0.629559     -0.462735      -2.60244       2.60244       968.571       971.173    
  31  0.202469      -1.59717      -8.98254       8.98254       988.084       997.067    
  32  0.737565     -0.304401      -1.71196       1.71196       996.403       998.115    
  33  0.388307     -0.945960      -5.32011       5.32011       986.238       991.558    
  34  0.585207E-01  -2.83837      -15.9631       15.9631       995.346       1011.31    
  35  0.900578     -0.104719     -0.588943      0.588943       996.274       996.863    
  36  0.420335     -0.866702      -4.87436       4.87436       991.624       996.498    
  37  0.730143     -0.314515      -1.76884       1.76884       998.300       1000.07    
  38  0.448331     -0.802224      -4.51173       4.51173       985.710       990.222    
  39  0.344846      -1.06466      -5.98767       5.98767       998.357       1004.35    
  40  0.854608     -0.157113     -0.883607      0.883607       988.093       988.977    
  41  0.537300     -0.621198      -3.49364       3.49364       1002.15       1005.65    
  42  0.164937      -1.80219      -10.1356       10.1356       993.949       1004.08    
  43  0.595120E-01  -2.82158      -15.8686       15.8686       987.310       1003.18    
  44  0.398267E-01  -3.22322      -18.1275       18.1275       994.784       1012.91    
  45  0.183210      -1.69712      -9.54465       9.54465       1004.17       1013.72    
  46  0.184498      -1.69011      -9.50526       9.50526       1005.98       1015.49    
  47  0.306635      -1.18210      -6.64815       6.64815       1002.69       1009.33    
  48  0.868924     -0.140500     -0.790177      0.790177       995.410       996.200    
  49  0.841633     -0.172412     -0.969648      0.969648       1004.30       1005.27    
  50  0.988826     -0.112370E-01 -0.631971E-01  0.631971E-01   1007.28       1007.34    
  51  0.244835      -1.40717      -7.91397       7.91397       1017.12       1025.04    
  52  0.338105      -1.08440      -6.09869       6.09869       1004.20       1010.30    
  53  0.609151     -0.495689      -2.78777       2.78777       1014.62       1017.41    
loop,thermsimp(1:2)       45  0.228081       2.00089    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    391        954.87          0.84          1.14         21.97          0.00          0.05         24.01
Just calling func    0   0         24.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    954.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       45
neval is:      390
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       46
neval is:      390


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      390     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668594     -0.402578      -2.26411       2.26411       925.150       927.414    
   2  0.484900     -0.723813      -4.07075       4.07075       934.437       938.508    
   3  0.814670     -0.204972      -1.15277       1.15277       935.201       936.353    
   4  0.111039      -2.19788      -12.3609       12.3609       934.070       946.431    
   5  0.717773     -0.331602      -1.86494       1.86494       935.687       937.552    
   6  0.751748     -0.285354      -1.60484       1.60484       931.542       933.147    
   7  0.983096E-01  -2.31963      -13.0457       13.0457       944.199       957.245    
   8  0.150083      -1.89656      -10.6663       10.6663       946.467       957.133    
   9  0.733895     -0.309390      -1.74002       1.74002       943.917       945.657    
  10  0.982051     -0.181120E-01 -0.101863      0.101863       943.606       943.708    
  11  0.449336E-01  -3.10257      -17.4489       17.4489       950.272       967.721    
  12  0.929425     -0.731895E-01 -0.411620      0.411620       968.905       969.317    
  13  0.692017E-01  -2.67073      -15.0203       15.0203       968.287       983.307    
  14  0.644652     -0.439045      -2.46920       2.46920       968.571       971.040    
  15  0.661075     -0.413889      -2.32772       2.32772       962.533       964.861    
  16  0.410338     -0.890775      -5.00974       5.00974       971.915       976.924    
  17  0.967767     -0.327642E-01 -0.184267      0.184267       975.399       975.583    
  18  0.496474     -0.700224      -3.93808       3.93808       974.618       978.557    
  19  0.748701     -0.289415      -1.62768       1.62768       964.011       965.639    
  20  0.428668     -0.847073      -4.76396       4.76396       980.018       984.782    
  21  0.922992     -0.801352E-01 -0.450683      0.450683       973.408       973.859    
  22  0.844924     -0.168508     -0.947696      0.947696       983.579       984.526    
  23  0.680136     -0.385463      -2.16786       2.16786       974.601       976.769    
  24  0.136189      -1.99371      -11.2127       11.2127       983.679       994.892    
  25  0.660667     -0.414506      -2.33119       2.33119       987.251       989.582    
  26  0.473941     -0.746672      -4.19931       4.19931       988.093       992.293    
  27  0.792449     -0.232627      -1.30830       1.30830       981.710       983.019    
  28  0.960023     -0.407984E-01 -0.229451      0.229451       983.320       983.549    
  29  0.951587     -0.496238E-01 -0.279086      0.279086       985.710       985.989    
  30  0.197021      -1.62444      -9.13591       9.13591       978.958       988.094    
  31  0.664966     -0.408020      -2.29471       2.29471       986.238       988.533    
  32  0.832360     -0.183491      -1.03196       1.03196       984.896       985.927    
  33  0.589221     -0.528954      -2.97485       2.97485       995.410       998.385    
  34  0.163930      -1.80831      -10.1700       10.1700       991.624       1001.79    
  35  0.967185E-01  -2.33595      -13.1375       13.1375       996.274       1009.41    
  36  0.386895     -0.949603      -5.34060       5.34060       988.084       993.425    
  37  0.709158     -0.343678      -1.93285       1.93285       996.403       998.336    
  38  0.801784     -0.220916      -1.24244       1.24244       998.300       999.543    
  39  0.631968     -0.458917      -2.58096       2.58096       987.310       989.891    
  40  0.866237     -0.143597     -0.807592      0.807592       993.949       994.757    
  41  0.377203     -0.974972      -5.48327       5.48327       998.357       1003.84    
  42  0.261898      -1.33980      -7.53509       7.53509       1004.30       1011.83    
  43  0.306694      -1.18191      -6.64707       6.64707       1002.15       1008.80    
  44  0.603055     -0.505747      -2.84433       2.84433       986.168       989.012    
  45  0.146094      -1.92351      -10.8179       10.8179       1007.28       1018.10    
  46  0.887903     -0.118893     -0.668660      0.668660       1002.69       1003.35    
  47  0.375387     -0.979798      -5.51041       5.51041       1004.20       1009.71    
  48  0.788597     -0.237500      -1.33570       1.33570       995.346       996.681    
  49  0.335228      -1.09295      -6.14676       6.14676       994.784       1000.93    
  50  0.609447     -0.495204      -2.78504       2.78504       1004.17       1006.96    
  51  0.735916     -0.306639      -1.72455       1.72455       1005.98       1007.71    
  52  0.936649     -0.654462E-01 -0.368072      0.368072       1014.62       1014.99    
  53  0.594667     -0.519755      -2.92312       2.92312       954.866       957.790    
loop,thermsimp(1:2)       46   2.26411       4.07075    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    392       1010.36          0.87          1.15         21.85          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1010.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       46
neval is:      391
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       47
neval is:      391


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      391     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408943     -0.894179      -5.02889       5.02889       925.150       930.179    
   2  0.431368     -0.840794      -4.72865       4.72865       931.542       936.271    
   3  0.292375      -1.22972      -6.91597       6.91597       935.201       942.117    
   4  0.336431      -1.08936      -6.12660       6.12660       935.687       941.814    
   5  0.370622     -0.992574      -5.58226       5.58226       934.437       940.020    
   6  0.398679     -0.919597      -5.17184       5.17184       943.606       948.778    
   7  0.672261     -0.397108      -2.23335       2.23335       943.917       946.151    
   8  0.451252     -0.795728      -4.47520       4.47520       934.070       938.545    
   9  0.527060     -0.640440      -3.60186       3.60186       946.467       950.068    
  10  0.131951      -2.02533      -11.3905       11.3905       944.199       955.589    
  11  0.903524     -0.101452     -0.570570      0.570570       954.866       955.437    
  12  0.881507E-01  -2.42871      -13.6591       13.6591       962.533       976.192    
  13  0.464884     -0.765968      -4.30783       4.30783       964.011       968.319    
  14  0.985345     -0.147637E-01 -0.830313E-01  0.830313E-01   950.272       950.355    
  15  0.587696     -0.531546      -2.98943       2.98943       968.905       971.895    
  16  0.581244     -0.542585      -3.05151       3.05151       968.571       971.622    
  17  0.137299      -1.98559      -11.1670       11.1670       973.408       984.575    
  18  0.330005      -1.10865      -6.23506       6.23506       975.399       981.634    
  19  0.911104     -0.930980E-01 -0.523586      0.523586       974.601       975.125    
  20  0.487848     -0.717751      -4.03665       4.03665       971.915       975.951    
  21  0.518423     -0.656964      -3.69479       3.69479       974.618       978.313    
  22  0.645499     -0.437732      -2.46182       2.46182       981.710       984.172    
  23  0.914509     -0.893680E-01 -0.502608      0.502608       968.287       968.789    
  24  0.763582E-01  -2.57232      -14.4668       14.4668       983.320       997.786    
  25  0.708063     -0.345222      -1.94154       1.94154       983.579       985.520    
  26  0.719838     -0.328729      -1.84878       1.84878       980.018       981.867    
  27  0.113625E-01  -4.47744      -25.1813       25.1813       984.896       1010.08    
  28  0.272258      -1.30101      -7.31690       7.31690       985.710       993.027    
  29  0.211076      -1.55554      -8.74838       8.74838       978.958       987.706    
  30  0.931648     -0.708004E-01 -0.398183      0.398183       986.238       986.636    
  31  0.572966     -0.556929      -3.13219       3.13219       986.168       989.300    
  32  0.116283      -2.15173      -12.1014       12.1014       987.251       999.353    
  33  0.247808      -1.39510      -7.84608       7.84608       987.310       995.156    
  34  0.294404      -1.22280      -6.87708       6.87708       988.093       994.970    
  35  0.252764E-01  -3.67788      -20.6845       20.6845       988.084       1008.77    
  36  0.408562     -0.895111      -5.03413       5.03413       993.949       998.983    
  37  0.753478     -0.283056      -1.59191       1.59191       983.679       985.271    
  38  0.680565     -0.384832      -2.16431       2.16431       995.346       997.510    
  39  0.973188     -0.271778E-01 -0.152849      0.152849       996.403       996.556    
  40  0.986871     -0.132158E-01 -0.743262E-01  0.743262E-01   995.410       995.484    
  41  0.363246      -1.01267      -5.69531       5.69531       998.300       1004.00    
  42  0.138088      -1.97986      -11.1348       11.1348       994.784       1005.92    
  43  0.929547E-01  -2.37564      -13.3607       13.3607       991.624       1004.98    
  44  0.781724     -0.246253      -1.38494       1.38494       1002.69       1004.07    
  45  0.732428     -0.311390      -1.75127       1.75127       998.357       1000.11    
  46  0.294929      -1.22102      -6.86707       6.86707       1004.17       1011.04    
  47  0.406491     -0.900193      -5.06271       5.06271       1005.98       1011.04    
  48  0.721836E-01  -2.62854      -14.7830       14.7830       1002.15       1016.94    
  49  0.982586     -0.175676E-01 -0.988007E-01  0.988007E-01   996.274       996.373    
  50  0.211502E-01  -3.85611      -21.6869       21.6869       1004.20       1025.89    
  51  0.790632     -0.234923      -1.32121       1.32121       1004.30       1005.62    
  52  0.120538      -2.11579      -11.8993       11.8993       1014.62       1026.52    
  53  0.586949     -0.532817      -2.99658       2.99658       1010.36       1013.36    
loop,thermsimp(1:2)       47   5.02889       4.72865    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    393        998.73          0.84          1.14         21.91          0.01          0.05         23.95
Just calling func    0   0         23.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    998.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       47
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       48
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      392     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813255     -0.206711      -1.16255       1.16255       925.150       926.312    
   2  0.101223E-01  -4.59302      -25.8313       25.8313       931.542       957.373    
   3  0.618937E-01  -2.78234      -15.6479       15.6479       934.070       949.718    
   4  0.206078      -1.57950      -8.88316       8.88316       934.437       943.321    
   5  0.867609     -0.142014     -0.798690      0.798690       935.687       936.486    
   6  0.578282     -0.547694      -3.08025       3.08025       935.201       938.281    
   7  0.531864     -0.631367      -3.55083       3.55083       943.917       947.468    
   8  0.304055      -1.19055      -6.69567       6.69567       943.606       950.302    
   9  0.540739     -0.614819      -3.45776       3.45776       946.467       949.924    
  10  0.476481     -0.741327      -4.16924       4.16924       950.272       954.441    
  11  0.610971     -0.492705      -2.77099       2.77099       954.866       957.637    
  12  0.735015     -0.307865      -1.73144       1.73144       944.199       945.930    
  13  0.961674     -0.390799E-01 -0.219786      0.219786       964.011       964.231    
  14  0.902502     -0.102585     -0.576939      0.576939       968.287       968.864    
  15  0.759072     -0.275659      -1.55031       1.55031       968.571       970.121    
  16  0.380028E-01  -3.27009      -18.3911       18.3911       968.905       987.296    
  17  0.413373     -0.883405      -4.96830       4.96830       974.601       979.569    
  18  0.260354      -1.34571      -7.56834       7.56834       971.915       979.483    
  19  0.170660      -1.76808      -9.94374       9.94374       962.533       972.477    
  20  0.563245     -0.574040      -3.22842       3.22842       974.618       977.847    
  21  0.861075     -0.149573     -0.841204      0.841204       975.399       976.240    
  22  0.797631     -0.226109      -1.27164       1.27164       980.018       981.290    
  23  0.370521E-01  -3.29543      -18.5336       18.5336       981.710       1000.24    
  24  0.703530     -0.351645      -1.97766       1.97766       973.408       975.386    
  25  0.791216E-01  -2.53677      -14.2669       14.2669       983.679       997.946    
  26  0.136780      -1.98938      -11.1883       11.1883       983.579       994.767    
  27  0.409465     -0.892903      -5.02171       5.02171       986.238       991.260    
  28  0.476542     -0.741200      -4.16853       4.16853       978.958       983.126    
  29  0.169904      -1.77252      -9.96873       9.96873       986.168       996.137    
  30  0.483026     -0.727684      -4.09252       4.09252       985.710       989.802    
  31  0.740952     -0.299820      -1.68619       1.68619       988.093       989.779    
  32  0.367240      -1.00174      -5.63381       5.63381       987.310       992.944    
  33  0.704436     -0.350358      -1.97043       1.97043       995.410       997.380    
  34  0.703774     -0.351299      -1.97571       1.97571       996.274       998.250    
  35  0.547709     -0.602012      -3.38573       3.38573       996.403       999.788    
  36  0.236071      -1.44362      -8.11898       8.11898       995.346       1003.46    
  37  0.512555     -0.668347      -3.75880       3.75880       983.320       987.078    
  38  0.894555     -0.111428     -0.626676      0.626676       993.949       994.576    
  39  0.100347      -2.29912      -12.9303       12.9303       987.251       1000.18    
  40  0.689153     -0.372292      -2.09378       2.09378       998.357       1000.45    
  41  0.188659      -1.66781      -9.37983       9.37983       998.300       1007.68    
  42  0.623666     -0.472140      -2.65533       2.65533       1002.69       1005.34    
  43  0.610480     -0.493510      -2.77552       2.77552       991.624       994.399    
  44  0.724857     -0.321780      -1.80970       1.80970       1004.30       1006.11    
  45  0.320963      -1.13643      -6.39132       6.39132       994.784       1001.17    
  46  0.287938      -1.24501      -7.00197       7.00197       988.084       995.086    
  47  0.935911     -0.662348E-01 -0.372507      0.372507       984.896       985.268    
  48  0.600810     -0.509476      -2.86531       2.86531       1004.17       1007.04    
  49  0.200068      -1.60910      -9.04961       9.04961       1005.98       1015.03    
  50  0.240600E-01  -3.72720      -20.9619       20.9619       1010.36       1031.32    
  51  0.953574     -0.475383E-01 -0.267357      0.267357       1002.15       1002.42    
  52  0.605754     -0.501281      -2.81922       2.81922       1004.20       1007.02    
  53  0.107166      -2.23338      -12.5606       12.5606       998.728       1011.29    
loop,thermsimp(1:2)       48   1.16255       25.8313    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    394       1010.78          0.86          1.14         21.84          0.04          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1010.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       48
neval is:      393
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       49
neval is:      393


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      393     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.900563     -0.104735     -0.589032      0.589032       925.150       925.739    
   2  0.337202      -1.08707      -6.11373       6.11373       935.687       941.801    
   3  0.201324      -1.60284      -9.01441       9.01441       935.201       944.215    
   4  0.305897      -1.18451      -6.66171       6.66171       934.437       941.099    
   5  0.333562      -1.09793      -6.17478       6.17478       944.199       950.374    
   6  0.708340     -0.344831      -1.93934       1.93934       943.917       945.857    
   7  0.929963     -0.726100E-01 -0.408361      0.408361       934.070       934.478    
   8  0.954883     -0.461669E-01 -0.259644      0.259644       946.467       946.726    
   9  0.709141     -0.343701      -1.93298       1.93298       943.606       945.539    
  10  0.904936     -0.998906E-01 -0.561788      0.561788       950.272       950.833    
  11  0.764543     -0.268477      -1.50992       1.50992       931.542       933.052    
  12  0.297182      -1.21341      -6.82425       6.82425       954.866       961.691    
  13  0.472241     -0.750266      -4.21952       4.21952       964.011       968.231    
  14  0.601817     -0.507801      -2.85589       2.85589       968.287       971.143    
  15  0.274906      -1.29132      -7.26245       7.26245       968.571       975.833    
  16  0.979328     -0.208884E-01 -0.117477      0.117477       962.533       962.651    
  17  0.634279     -0.455267      -2.56044       2.56044       973.408       975.969    
  18  0.238460E-01  -3.73614      -21.0122       21.0122       975.399       996.411    
  19  0.302486      -1.19572      -6.72476       6.72476       974.618       981.343    
  20  0.454285     -0.789030      -4.43753       4.43753       971.915       976.352    
  21  0.850435     -0.162007     -0.911132      0.911132       974.601       975.512    
  22  0.562689     -0.575029      -3.23398       3.23398       980.018       983.252    
  23  0.351622      -1.04520      -5.87822       5.87822       978.958       984.836    
  24  0.978081     -0.221628E-01 -0.124644      0.124644       984.896       985.020    
  25  0.284594      -1.25669      -7.06768       7.06768       983.320       990.387    
  26  0.883683E-01  -2.42624      -13.6453       13.6453       968.905       982.550    
  27  0.217395      -1.52604      -8.58248       8.58248       988.093       996.676    
  28  0.405933     -0.901568      -5.07044       5.07044       985.710       990.780    
  29  0.951690     -0.495156E-01 -0.278477      0.278477       986.238       986.516    
  30  0.570178     -0.561806      -3.15961       3.15961       987.310       990.469    
  31  0.326664      -1.11882      -6.29229       6.29229       991.624       997.916    
  32  0.383874E-01  -3.26003      -18.3345       18.3345       993.949       1012.28    
  33  0.630130     -0.461829      -2.59734       2.59734       983.579       986.176    
  34  0.902033     -0.103105     -0.579863      0.579863       988.084       988.664    
  35  0.192240      -1.64901      -9.27408       9.27408       986.168       995.442    
  36  0.836744     -0.178237      -1.00241       1.00241       995.410       996.412    
  37  0.481446     -0.730962      -4.11095       4.11095       983.679       987.790    
  38  0.801468     -0.221310      -1.24465       1.24465       996.274       997.519    
  39  0.929206     -0.734244E-01 -0.412941      0.412941       996.403       996.816    
  40  0.366038      -1.00502      -5.65226       5.65226       987.251       992.903    
  41  0.896697     -0.109037     -0.613229      0.613229       981.710       982.324    
  42  0.175481      -1.74022      -9.78707       9.78707       998.357       1008.14    
  43  0.444632E-01  -3.11309      -17.5081       17.5081       994.784       1012.29    
  44  0.469791     -0.755467      -4.24877       4.24877       1002.15       1006.40    
  45  0.475427     -0.743541      -4.18170       4.18170       995.346       999.527    
  46  0.568468     -0.564810      -3.17651       3.17651       1002.69       1005.86    
  47  0.684504     -0.379060      -2.13185       2.13185       1004.30       1006.43    
  48  0.207720      -1.57157      -8.83854       8.83854       1004.20       1013.04    
  49  0.332731      -1.10042      -6.18879       6.18879       1004.17       1010.36    
  50  0.109337E-01  -4.51591      -25.3976       25.3976       998.300       1023.70    
  51  0.387975     -0.946815      -5.32492       5.32492       998.728       1004.05    
  52  0.583841     -0.538126      -3.02644       3.02644       1005.98       1009.01    
  53  0.952086     -0.491003E-01 -0.276142      0.276142       1010.78       1011.06    
loop,thermsimp(1:2)       49  0.589032       6.11373    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    395       1025.66          0.85          1.15         21.81          0.04          0.05         23.90
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    396        968.73          0.84          1.14         21.95          0.00          0.05         23.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    968.73
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       49
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       50
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      395     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.326509      -1.11930      -6.29497       6.29497       925.150       931.445    
   2  0.656045     -0.421526      -2.37068       2.37068       931.542       933.913    
   3  0.702016     -0.353799      -1.98978       1.98978       934.070       936.060    
   4  0.659850     -0.415743      -2.33815       2.33815       934.437       936.776    
   5  0.587501     -0.531877      -2.99129       2.99129       935.687       938.678    
   6  0.118734      -2.13087      -11.9841       11.9841       935.201       947.185    
   7  0.484942     -0.723727      -4.07026       4.07026       943.606       947.676    
   8  0.809010     -0.211944      -1.19198       1.19198       943.917       945.109    
   9  0.107401      -2.23119      -12.5483       12.5483       946.467       959.015    
  10  0.912046     -0.920651E-01 -0.517777      0.517777       944.199       944.717    
  11  0.752441     -0.284433      -1.59966       1.59966       950.272       951.871    
  12  0.389912     -0.941833      -5.29690       5.29690       954.866       960.163    
  13  0.805927     -0.215762      -1.21345       1.21345       962.533       963.746    
  14  0.537328     -0.621147      -3.49335       3.49335       964.011       967.505    
  15  0.276300      -1.28627      -7.23401       7.23401       968.287       975.521    
  16  0.618485     -0.480483      -2.70225       2.70225       974.601       977.303    
  17  0.130066      -2.03972      -11.4714       11.4714       968.571       980.042    
  18  0.885305     -0.121824     -0.685140      0.685140       973.408       974.094    
  19  0.513359     -0.666781      -3.74999       3.74999       971.915       975.665    
  20  0.235519      -1.44596      -8.13214       8.13214       974.618       982.751    
  21  0.693842     -0.365511      -2.05565       2.05565       981.710       983.766    
  22  0.445925     -0.807605      -4.54199       4.54199       968.905       973.447    
  23  0.946501     -0.549828E-01 -0.309225      0.309225       980.018       980.327    
  24  0.108015      -2.22549      -12.5162       12.5162       978.958       991.474    
  25  0.988375     -0.116930E-01 -0.657620E-01  0.657620E-01   984.896       984.961    
  26  0.931439     -0.710246E-01 -0.399444      0.399444       983.579       983.978    
  27  0.915176     -0.886393E-01 -0.498510      0.498510       986.238       986.736    
  28  0.670330     -0.399985      -2.24953       2.24953       983.679       985.929    
  29  0.172595      -1.75681      -9.88035       9.88035       988.084       997.965    
  30  0.496295     -0.700585      -3.94011       3.94011       983.320       987.260    
  31  0.627359     -0.466236      -2.62213       2.62213       987.310       989.932    
  32  0.914384     -0.895052E-01 -0.503380      0.503380       985.710       986.213    
  33  0.197109      -1.62400      -9.13343       9.13343       987.251       996.385    
  34  0.830736     -0.185444      -1.04294       1.04294       986.168       987.211    
  35  0.554634     -0.589446      -3.31506       3.31506       975.399       978.714    
  36  0.386467E-01  -3.25329      -18.2966       18.2966       995.410       1013.71    
  37  0.259980      -1.34715      -7.57643       7.57643       988.093       995.670    
  38  0.876870     -0.131396     -0.738976      0.738976       996.403       997.142    
  39  0.651025     -0.429207      -2.41388       2.41388       996.274       998.688    
  40  0.171053      -1.76578      -9.93081       9.93081       991.624       1001.55    
  41  0.708910     -0.344027      -1.93482       1.93482       995.346       997.280    
  42  0.501487     -0.690177      -3.88158       3.88158       998.728       1002.61    
  43  0.766040     -0.266521      -1.49892       1.49892       1002.69       1004.18    
  44  0.189113      -1.66541      -9.36632       9.36632       1002.15       1011.52    
  45  0.250338      -1.38494      -7.78897       7.78897       1004.30       1012.09    
  46  0.830098     -0.186211      -1.04726       1.04726       998.357       999.405    
  47  0.337228      -1.08700      -6.11330       6.11330       1005.98       1012.09    
  48  0.290155      -1.23734      -6.95884       6.95884       1004.17       1011.13    
  49  0.382897     -0.959988      -5.39900       5.39900       1010.78       1016.18    
  50  0.484934     -0.723743      -4.07035       4.07035       993.949       998.020    
  51  0.867083     -0.142620     -0.802102      0.802102       994.784       995.586    
  52  0.151990E-02  -6.48911      -36.4949       36.4949       1004.20       1040.70    
  53  0.964961     -0.356680E-01 -0.200598      0.200598       968.726       968.927    
loop,thermsimp(1:2)       50   6.29497       2.37068    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    397       1173.35          0.85          1.14         21.85          0.00          0.05         23.90
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    398        994.06          0.84          1.15         22.16          0.00          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    994.06
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       50
neval is:      397
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       51
neval is:      397


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      397     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.886088     -0.120938     -0.680162      0.680162       925.150       925.830    
   2  0.953882E-01  -2.34980      -13.2154       13.2154       931.542       944.757    
   3  0.875198     -0.133305     -0.749712      0.749712       934.070       934.820    
   4  0.401319     -0.913000      -5.13474       5.13474       934.437       939.572    
   5  0.288302      -1.24375      -6.99486       6.99486       935.687       942.682    
   6  0.596159E-01  -2.81983      -15.8588       15.8588       944.199       960.058    
   7  0.411979     -0.886782      -4.98729       4.98729       943.917       948.905    
   8  0.157950      -1.84548      -10.3790       10.3790       935.201       945.580    
   9  0.736512     -0.305830      -1.72000       1.72000       943.606       945.326    
  10  0.531935     -0.631235      -3.55008       3.55008       950.272       953.822    
  11  0.557201     -0.584829      -3.28910       3.28910       946.467       949.756    
  12  0.590342     -0.527053      -2.96416       2.96416       954.866       957.831    
  13  0.893645     -0.112447     -0.632403      0.632403       962.533       963.165    
  14  0.899172     -0.106281     -0.597729      0.597729       964.011       964.609    
  15  0.321510      -1.13473      -6.38173       6.38173       968.726       975.108    
  16  0.242259E-01  -3.72033      -20.9233       20.9233       968.905       989.828    
  17  0.646886     -0.435586      -2.44975       2.44975       973.408       975.858    
  18  0.998267     -0.173471E-02 -0.975605E-02  0.975605E-02   968.287       968.296    
  19  0.972297     -0.280942E-01 -0.158003      0.158003       971.915       972.073    
  20  0.309809      -1.17180      -6.59023       6.59023       974.601       981.191    
  21  0.816235     -0.203053      -1.14197       1.14197       975.399       976.541    
  22  0.984764     -0.153535E-01 -0.863487E-01  0.863487E-01   968.571       968.657    
  23  0.881026     -0.126668     -0.712384      0.712384       980.018       980.730    
  24  0.661336E-01  -2.71608      -15.2753       15.2753       974.618       989.894    
  25  0.410325     -0.890806      -5.00992       5.00992       981.710       986.720    
  26  0.104142E-03  -9.16976      -51.5710       51.5710       983.579       1035.15    
  27  0.713949     -0.336943      -1.89498       1.89498       984.896       986.791    
  28  0.388242     -0.946126      -5.32104       5.32104       983.679       989.000    
  29  0.684780     -0.378657      -2.12958       2.12958       985.710       987.840    
  30  0.349297      -1.05183      -5.91554       5.91554       986.238       992.153    
  31  0.567533     -0.566456      -3.18576       3.18576       986.168       989.354    
  32  0.157115      -1.85078      -10.4088       10.4088       983.320       993.728    
  33  0.780641     -0.247640      -1.39274       1.39274       987.310       988.703    
  34  0.485397     -0.722789      -4.06499       4.06499       978.958       983.023    
  35  0.682517     -0.381968      -2.14820       2.14820       994.784       996.932    
  36  0.536829     -0.622075      -3.49857       3.49857       988.093       991.592    
  37  0.464187     -0.767467      -4.31626       4.31626       987.251       991.567    
  38  0.519819     -0.654274      -3.67966       3.67966       996.403       1000.08    
  39  0.974252     -0.260857E-01 -0.146707      0.146707       995.346       995.492    
  40  0.386009     -0.951894      -5.35348       5.35348       988.084       993.438    
  41  0.217232      -1.52679      -8.58671       8.58671       993.949       1002.54    
  42  0.173910      -1.74922      -9.83765       9.83765       996.274       1006.11    
  43  0.860958     -0.149709     -0.841970      0.841970       998.357       999.199    
  44  0.893333     -0.112796     -0.634367      0.634367       991.624       992.258    
  45  0.957904     -0.430073E-01 -0.241875      0.241875       998.728       998.970    
  46  0.671164E-01  -2.70133      -15.1923       15.1923       1002.69       1017.88    
  47  0.133176      -2.01608      -11.3385       11.3385       1004.17       1015.51    
  48  0.574942     -0.553487      -3.11282       3.11282       1002.15       1005.27    
  49  0.302503      -1.19566      -6.72445       6.72445       1004.30       1011.02    
  50  0.325458      -1.12252      -6.31309       6.31309       1005.98       1012.29    
  51  0.344075      -1.06690      -6.00025       6.00025       995.410       1001.41    
  52  0.432303     -0.838628      -4.71647       4.71647       1010.78       1015.50    
  53  0.855511     -0.156056     -0.877663      0.877663       994.056       994.934    
loop,thermsimp(1:2)       51  0.680162       13.2154    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    399        959.71          0.84          1.14         22.02          0.00          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    959.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       51
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       52
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      398     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.827214E-01  -2.49228      -14.0166       14.0166       925.150       939.167    
   2  0.625679E-01  -2.77150      -15.5870       15.5870       934.070       949.657    
   3  0.254112      -1.36998      -7.70481       7.70481       934.437       942.142    
   4  0.582152     -0.541023      -3.04273       3.04273       935.687       938.730    
   5  0.596882     -0.516035      -2.90220       2.90220       931.542       934.444    
   6  0.149943      -1.89750      -10.6716       10.6716       943.606       954.278    
   7  0.496252     -0.700672      -3.94060       3.94060       935.201       939.141    
   8  0.129782      -2.04190      -11.4837       11.4837       943.917       955.401    
   9  0.740869     -0.299931      -1.68682       1.68682       946.467       948.153    
  10  0.124297      -2.08508      -11.7266       11.7266       950.272       961.998    
  11  0.524903     -0.644542      -3.62493       3.62493       954.866       958.491    
  12  0.852180     -0.159958     -0.899607      0.899607       944.199       945.099    
  13  0.823232     -0.194517      -1.09397       1.09397       962.533       963.627    
  14  0.256230      -1.36168      -7.65813       7.65813       964.011       971.669    
  15  0.258393      -1.35327      -7.61085       7.61085       968.287       975.898    
  16  0.324549      -1.12532      -6.32883       6.32883       968.571       974.900    
  17  0.504546     -0.684097      -3.84738       3.84738       971.915       975.762    
  18  0.774284     -0.255817      -1.43872       1.43872       968.726       970.165    
  19  0.452119E-01  -3.09639      -17.4142       17.4142       973.408       990.823    
  20  0.325288      -1.12305      -6.31604       6.31604       975.399       981.715    
  21  0.156855      -1.85244      -10.4182       10.4182       980.018       990.436    
  22  0.440906     -0.818924      -4.60565       4.60565       974.601       979.207    
  23  0.313753E-02  -5.76432      -32.4187       32.4187       978.958       1011.38    
  24  0.252529      -1.37623      -7.73995       7.73995       981.710       989.450    
  25  0.799267     -0.224060      -1.26012       1.26012       984.896       986.156    
  26  0.961010     -0.397708E-01 -0.223672      0.223672       985.710       985.934    
  27  0.843711     -0.169946     -0.955779      0.955779       987.310       988.266    
  28  0.120002      -2.12025      -11.9243       11.9243       983.679       995.604    
  29  0.489889     -0.713576      -4.01317       4.01317       986.168       990.181    
  30  0.317246      -1.14808      -6.45682       6.45682       968.905       975.362    
  31  0.761766     -0.272116      -1.53039       1.53039       974.618       976.149    
  32  0.468167     -0.758930      -4.26825       4.26825       987.251       991.519    
  33  0.634908     -0.454275      -2.55485       2.55485       988.093       990.648    
  34  0.410644     -0.890029      -5.00555       5.00555       986.238       991.243    
  35  0.330962      -1.10575      -6.21878       6.21878       991.624       997.843    
  36  0.275422      -1.28945      -7.25191       7.25191       988.084       995.336    
  37  0.186052      -1.68173      -9.45810       9.45810       983.320       992.778    
  38  0.361178      -1.01838      -5.72743       5.72743       994.056       999.783    
  39  0.850100     -0.162402     -0.913352      0.913352       995.346       996.259    
  40  0.649062     -0.432226      -2.43085       2.43085       994.784       997.214    
  41  0.322988      -1.13014      -6.35594       6.35594       998.728       1005.08    
  42  0.284964      -1.25539      -7.06037       7.06037       998.357       1005.42    
  43  0.685335     -0.377848      -2.12503       2.12503       996.403       998.528    
  44  0.262422      -1.33780      -7.52384       7.52384       995.410       1002.93    
  45  0.767375     -0.264780      -1.48913       1.48913       993.949       995.438    
  46  0.109385      -2.21288      -12.4453       12.4453       1002.15       1014.60    
  47  0.306599      -1.18221      -6.64880       6.64880       996.274       1002.92    
  48  0.406201     -0.900907      -5.06673       5.06673       1004.30       1009.37    
  49  0.423601     -0.858964      -4.83084       4.83084       1005.98       1010.81    
  50  0.525023     -0.644313      -3.62364       3.62364       1010.78       1014.41    
  51  0.947103E-01  -2.35693      -13.2555       13.2555       1004.17       1017.43    
  52  0.408122     -0.896189      -5.04020       5.04020       1002.69       1007.73    
  53  0.463749     -0.768411      -4.32157       4.32157       959.713       964.034    
loop,thermsimp(1:2)       52   14.0166       15.5870    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    400        940.77          0.86          1.14         21.83          0.03          0.05         23.91
Just calling func    0   0         23.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    940.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       52
neval is:      399
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       53
neval is:      399


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      399     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265283      -1.32696      -7.46285       7.46285       931.542       939.005    
   2  0.615112     -0.485951      -2.73300       2.73300       935.687       938.420    
   3  0.424286E-01  -3.15993      -17.7716       17.7716       935.201       952.972    
   4  0.726479     -0.319546      -1.79713       1.79713       925.150       926.947    
   5  0.402368     -0.910388      -5.12005       5.12005       934.437       939.557    
   6  0.958941E-01  -2.34451      -13.1856       13.1856       944.199       957.385    
   7  0.137400      -1.98486      -11.1629       11.1629       946.467       957.629    
   8  0.887138     -0.119755     -0.673507      0.673507       934.070       934.743    
   9  0.655001     -0.423119      -2.37963       2.37963       943.606       945.986    
  10  0.304836      -1.18798      -6.68123       6.68123       943.917       950.599    
  11  0.346250      -1.06059      -5.96481       5.96481       954.866       960.831    
  12  0.608663E-01  -2.79908      -15.7421       15.7421       950.272       966.014    
  13  0.307248      -1.18010      -6.63691       6.63691       962.533       969.170    
  14  0.695201     -0.363555      -2.04464       2.04464       959.713       961.757    
  15  0.628698     -0.464104      -2.61013       2.61013       968.726       971.336    
  16  0.609308     -0.495432      -2.78632       2.78632       964.011       966.798    
  17  0.335400      -1.09243      -6.14387       6.14387       968.571       974.715    
  18  0.910258     -0.940273E-01 -0.528813      0.528813       968.905       969.434    
  19  0.439254E-01  -3.12526      -17.5766       17.5766       971.915       989.491    
  20  0.978338     -0.219001E-01 -0.123167      0.123167       968.287       968.410    
  21  0.282939      -1.26252      -7.10048       7.10048       974.618       981.719    
  22  0.763165     -0.270281      -1.52007       1.52007       974.601       976.121    
  23  0.206330      -1.57828      -8.87629       8.87629       975.399       984.275    
  24  0.228687      -1.47540      -8.29771       8.29771       985.710       994.008    
  25  0.634584E-01  -2.75737      -15.5075       15.5075       984.896       1000.40    
  26  0.665745E-01  -2.70943      -15.2379       15.2379       987.310       1002.55    
  27  0.761759     -0.272125      -1.53044       1.53044       981.710       983.241    
  28  0.636615     -0.451590      -2.53976       2.53976       986.168       988.708    
  29  0.804468     -0.217574      -1.22364       1.22364       980.018       981.242    
  30  0.508586     -0.676120      -3.80252       3.80252       988.093       991.896    
  31  0.232797      -1.45759      -8.19753       8.19753       973.408       981.606    
  32  0.932655     -0.697196E-01 -0.392105      0.392105       986.238       986.630    
  33  0.970411     -0.300359E-01 -0.168923      0.168923       987.251       987.420    
  34  0.151993      -1.88392      -10.5952       10.5952       983.320       993.915    
  35  0.571421     -0.559629      -3.14737       3.14737       988.084       991.232    
  36  0.673371     -0.395458      -2.22407       2.22407       993.949       996.173    
  37  0.828783     -0.187797      -1.05618       1.05618       983.679       984.736    
  38  0.285628      -1.25307      -7.04728       7.04728       995.346       1002.39    
  39  0.127849      -2.05691      -11.5681       11.5681       994.784       1006.35    
  40  0.101247      -2.29019      -12.8801       12.8801       991.624       1004.50    
  41  0.593355     -0.521962      -2.93553       2.93553       996.403       999.338    
  42  0.362303      -1.01527      -5.70994       5.70994       994.056       999.766    
  43  0.754411     -0.281818      -1.58495       1.58495       996.274       997.859    
  44  0.917727     -0.858556E-01 -0.482854      0.482854       995.410       995.893    
  45  0.281495      -1.26764      -7.12926       7.12926       998.728       1005.86    
  46  0.757766     -0.277381      -1.56000       1.56000       998.357       999.917    
  47  0.721843E-01  -2.62853      -14.7829       14.7829       1002.69       1017.47    
  48  0.995421     -0.458990E-02 -0.258138E-01  0.258138E-01   1004.30       1004.33    
  49  0.101230      -2.29036      -12.8811       12.8811       1005.98       1018.86    
  50  0.477194     -0.739832      -4.16084       4.16084       978.958       983.119    
  51  0.414653E-01  -3.18290      -17.9007       17.9007       1010.78       1028.68    
  52  0.927379     -0.753934E-01 -0.424015      0.424015       1002.15       1002.58    
  53  0.642274     -0.442741      -2.48999       2.48999       940.773       943.263    
loop,thermsimp(1:2)       53   7.46285       2.73300    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    401       1006.43          0.86          1.15         21.89          0.00          0.05         23.95
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    1006.4        1.402     -2.225      3.477     -102.6      1.175    
                      0.7979      1.428     -99.70      4.314      1.357    

                       2.304     -1.834      1.540      7000.      7000.    

                      -2.084      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.866     -6.091     -10.21      6.717    

                      -14.46     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1543E-01 0.2614    -0.2627E-01 0.2368    

                     -0.2486    -0.1526     0.1845     0.1166     0.1418    



                     -0.3814    -0.5678      0.000     0.9148E-01-0.7292E-01

                      0.1092E-01 0.1917    -0.7116    -0.1175     0.3231    

                      0.9272E-01 0.7124E-01-0.7098     -1.267      7000.    



                      -1.494     -1.371     -2.142     -1.982    -0.3807    

                     -0.3252      9.286      8.733    -0.1672E+05 -6.000    

                     -0.2178     -2.371      9.385      8.902    -0.1969E+05



                      -6.000     0.5781    -0.4007      9.247      9.122    

                     -0.1944E+05 -6.000    -0.6806    -0.6522      9.057    

                       8.851    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1006.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       53
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       54
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      400     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.551084     -0.595868      -3.35118       3.35118       925.150       928.501    
   2  0.390343     -0.940730      -5.29069       5.29069       934.070       939.360    
   3  0.506127     -0.680968      -3.82979       3.82979       935.687       939.517    
   4  0.964820     -0.358141E-01 -0.201420      0.201420       931.542       931.743    
   5  0.647775     -0.434212      -2.44202       2.44202       934.437       936.879    
   6  0.251459      -1.38048      -7.76384       7.76384       940.773       948.537    
   7  0.908837     -0.955893E-01 -0.537597      0.537597       943.606       944.144    
   8  0.800726     -0.222236      -1.24986       1.24986       943.917       945.167    
   9  0.480867E-01  -3.03475      -17.0675       17.0675       935.201       952.268    
  10  0.859127     -0.151839     -0.853945      0.853945       944.199       945.053    
  11  0.618632     -0.480244      -2.70091       2.70091       946.467       949.167    
  12  0.262118      -1.33896      -7.53035       7.53035       954.866       962.397    
  13  0.373394     -0.985121      -5.54035       5.54035       959.713       965.253    
  14  0.698954     -0.358170      -2.01436       2.01436       950.272       952.286    
  15  0.698639     -0.358621      -2.01690       2.01690       964.011       966.028    
  16  0.683233     -0.380919      -2.14230       2.14230       968.287       970.429    
  17  0.475083     -0.744266      -4.18577       4.18577       962.533       966.719    
  18  0.957666E-01  -2.34584      -13.1931       13.1931       968.905       982.098    
  19  0.767182     -0.265031      -1.49054       1.49054       968.726       970.217    
  20  0.418812     -0.870332      -4.89478       4.89478       968.571       973.466    
  21  0.940661     -0.611725E-01 -0.344036      0.344036       974.601       974.945    
  22  0.827990     -0.188754      -1.06156       1.06156       980.018       981.080    
  23  0.463008     -0.770011      -4.33056       4.33056       973.408       977.739    
  24  0.723352     -0.323860      -1.82140       1.82140       974.618       976.440    
  25  0.330269      -1.10785      -6.23058       6.23058       978.958       985.188    
  26  0.640927E-02  -5.05001      -28.4014       28.4014       981.710       1010.11    
  27  0.849682     -0.162893     -0.916116      0.916116       975.399       976.315    
  28  0.457568     -0.781830      -4.39703       4.39703       983.679       988.076    
  29  0.720244     -0.328166      -1.84561       1.84561       986.238       988.083    
  30  0.953392     -0.477287E-01 -0.268428      0.268428       987.251       987.520    
  31  0.322501      -1.13165      -6.36443       6.36443       986.168       992.533    
  32  0.335509      -1.09211      -6.14205       6.14205       971.915       978.057    
  33  0.140389      -1.96334      -11.0419       11.0419       988.084       999.126    
  34  0.429265     -0.845681      -4.75613       4.75613       988.093       992.849    
  35  0.775769E-01  -2.55649      -14.3778       14.3778       983.320       997.697    
  36  0.414811     -0.879933      -4.94877       4.94877       985.710       990.659    
  37  0.183764      -1.69410      -9.52767       9.52767       995.410       1004.94    
  38  0.357541      -1.02851      -5.78435       5.78435       993.949       999.734    
  39  0.401419E-02  -5.51792      -31.0329       31.0329       996.274       1027.31    
  40  0.399411     -0.917764      -5.16153       5.16153       996.403       1001.56    
  41  0.795187     -0.229178      -1.28890       1.28890       994.056       995.345    
  42  0.673332     -0.395517      -2.22440       2.22440       998.357       1000.58    
  43  0.898211     -0.107350     -0.603741      0.603741       984.896       985.499    
  44  0.769733     -0.261711      -1.47187       1.47187       995.346       996.817    
  45  0.791938     -0.233272      -1.31193       1.31193       987.310       988.622    
  46  0.537104     -0.621563      -3.49569       3.49569       1002.15       1005.65    
  47  0.313282      -1.16065      -6.52754       6.52754       1004.30       1010.83    
  48  0.516025     -0.661601      -3.72086       3.72086       991.624       995.345    
  49  0.119673      -2.12299      -11.9398       11.9398       998.728       1010.67    
  50  0.221920      -1.50544      -8.46664       8.46664       994.784       1003.25    
  51  0.639805     -0.446592      -2.51165       2.51165       1002.69       1005.20    
  52  0.947460     -0.539710E-01 -0.303535      0.303535       1005.98       1006.29    
  53  0.786966     -0.239570      -1.34735       1.34735       1006.43       1007.77    
loop,thermsimp(1:2)       54   3.35118       5.29069    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    402       1011.92          0.84          1.14         21.89          0.00          0.05         23.91
Just calling func    0   0         23.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    403        958.59          0.86          1.14         21.90          0.00          0.05         23.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    958.59
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       54
neval is:      402
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       55
neval is:      402


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      402     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.146220      -1.92264      -10.8130       10.8130       925.150       935.963    
   2  0.620947     -0.476510      -2.67991       2.67991       931.542       934.222    
   3  0.177272      -1.73007      -9.72996       9.72996       934.437       944.167    
   4  0.884738     -0.122464     -0.688739      0.688739       934.070       934.759    
   5  0.304829      -1.18800      -6.68137       6.68137       935.687       942.368    
   6  0.555834     -0.587286      -3.30291       3.30291       943.606       946.909    
   7  0.396848     -0.924202      -5.19774       5.19774       944.199       949.397    
   8  0.570840     -0.560646      -3.15309       3.15309       943.917       947.070    
   9  0.726203     -0.319926      -1.79927       1.79927       940.773       942.572    
  10  0.917349E-01  -2.38885      -13.4350       13.4350       946.467       959.901    
  11  0.456603     -0.783941      -4.40891       4.40891       935.201       939.610    
  12  0.602259     -0.507068      -2.85177       2.85177       950.272       953.123    
  13  0.496888E-01  -3.00198      -16.8832       16.8832       954.866       971.750    
  14  0.583997     -0.537860      -3.02494       3.02494       959.713       962.738    
  15  0.200789E-01  -3.90809      -21.9792       21.9792       964.011       985.991    
  16  0.422855     -0.860726      -4.84075       4.84075       962.533       967.374    
  17  0.535645     -0.624284      -3.51099       3.51099       968.726       972.237    
  18  0.413266     -0.883663      -4.96975       4.96975       968.287       973.256    
  19  0.342457      -1.07161      -6.02676       6.02676       968.571       974.598    
  20  0.638345     -0.448876      -2.52449       2.52449       974.601       977.125    
  21  0.655695     -0.422060      -2.37368       2.37368       975.399       977.772    
  22  0.629392     -0.463001      -2.60393       2.60393       974.618       977.222    
  23  0.977606     -0.226486E-01 -0.127376      0.127376       973.408       973.536    
  24  0.752980E-01  -2.58630      -14.5454       14.5454       971.915       986.460    
  25  0.874423     -0.134191     -0.754696      0.754696       980.018       980.773    
  26  0.587202     -0.532387      -2.99416       2.99416       968.905       971.899    
  27  0.880682     -0.127059     -0.714583      0.714583       978.958       979.672    
  28  0.878591E-01  -2.43202      -13.6778       13.6778       984.896       998.573    
  29  0.695678     -0.362869      -2.04079       2.04079       987.251       989.292    
  30  0.124758      -2.08138      -11.7057       11.7057       983.679       995.385    
  31  0.605547     -0.501622      -2.82114       2.82114       986.238       989.059    
  32  0.650291     -0.430335      -2.42022       2.42022       987.310       989.730    
  33  0.639591     -0.446926      -2.51352       2.51352       985.710       988.223    
  34  0.872983     -0.135839     -0.763961      0.763961       986.168       986.932    
  35  0.291503E-01  -3.53529      -19.8826       19.8826       988.093       1007.98    
  36  0.290539      -1.23602      -6.95139       6.95139       991.624       998.575    
  37  0.759349     -0.275294      -1.54826       1.54826       994.056       995.604    
  38  0.599537     -0.511597      -2.87724       2.87724       995.346       998.223    
  39  0.948707     -0.526557E-01 -0.296137      0.296137       983.320       983.616    
  40  0.180828      -1.71021      -9.61828       9.61828       988.084       997.702    
  41  0.385708     -0.952674      -5.35787       5.35787       993.949       999.307    
  42  0.299380      -1.20604      -6.78282       6.78282       998.357       1005.14    
  43  0.853891     -0.157952     -0.888326      0.888326       996.403       997.291    
  44  0.502000E-01  -2.99174      -16.8256       16.8256       994.784       1011.61    
  45  0.510049     -0.673249      -3.78637       3.78637       995.410       999.196    
  46  0.500368     -0.692411      -3.89414       3.89414       1002.69       1006.58    
  47  0.947833     -0.535774E-01 -0.301321      0.301321       1002.15       1002.46    
  48  0.147734      -1.91235      -10.7551       10.7551       1005.98       1016.74    
  49  0.448609     -0.801603      -4.50824       4.50824       1006.43       1010.93    
  50  0.589816E-01  -2.83053      -15.9190       15.9190       981.710       997.629    
  51  0.914696     -0.891630E-01 -0.501455      0.501455       998.728       999.229    
  52  0.187672E-01  -3.97564      -22.3591       22.3591       1004.30       1026.66    
  53  0.842801     -0.171024     -0.961846      0.961846       958.586       959.547    
loop,thermsimp(1:2)       55   10.8130       2.67991    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    404        985.61          0.83          1.14         21.91          0.00          0.05         23.94
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    985.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       55
neval is:      403
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       56
neval is:      403


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      403     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.500984     -0.691182      -3.88723       3.88723       931.542       935.429    
   2  0.324862      -1.12436      -6.32341       6.32341       934.070       940.393    
   3  0.195419      -1.63261      -9.18185       9.18185       925.150       934.332    
   4  0.203731      -1.59096      -8.94758       8.94758       935.201       944.148    
   5  0.177968      -1.72615      -9.70794       9.70794       935.687       945.395    
   6  0.835197     -0.180088      -1.01282       1.01282       940.773       941.786    
   7  0.302476      -1.19575      -6.72495       6.72495       934.437       941.162    
   8  0.352903E-01  -3.34415      -18.8076       18.8076       943.606       962.414    
   9  0.308671      -1.17548      -6.61094       6.61094       943.917       950.528    
  10  0.409306E-01  -3.19588      -17.9737       17.9737       944.199       962.173    
  11  0.615747     -0.484919      -2.72720       2.72720       950.272       952.999    
  12  0.766359     -0.266105      -1.49658       1.49658       958.586       960.082    
  13  0.625912     -0.468545      -2.63511       2.63511       946.467       949.102    
  14  0.435348     -0.831610      -4.67700       4.67700       959.713       964.390    
  15  0.341014      -1.07583      -6.05051       6.05051       962.533       968.584    
  16  0.434268E-01  -3.13668      -17.6408       17.6408       954.866       972.507    
  17  0.604743     -0.502951      -2.82861       2.82861       968.905       971.734    
  18  0.536278     -0.623102      -3.50435       3.50435       968.726       972.231    
  19  0.207674      -1.57179      -8.83977       8.83977       968.287       977.127    
  20  0.985598E-01  -2.31709      -13.0314       13.0314       973.408       986.440    
  21  0.814506     -0.205174      -1.15390       1.15390       968.571       969.725    
  22  0.447321     -0.804478      -4.52441       4.52441       974.601       979.125    
  23  0.741331     -0.299308      -1.68331       1.68331       974.618       976.302    
  24  0.601378     -0.508531      -2.85999       2.85999       975.399       978.259    
  25  0.421939E-01  -3.16548      -17.8028       17.8028       978.958       996.760    
  26  0.837477     -0.177362     -0.997487      0.997487       980.018       981.016    
  27  0.297606      -1.21198      -6.81624       6.81624       983.320       990.136    
  28  0.383069     -0.959540      -5.39648       5.39648       964.011       969.408    
  29  0.291041      -1.23429      -6.94170       6.94170       971.915       978.856    
  30  0.788773     -0.237276      -1.33445       1.33445       986.168       987.503    
  31  0.471794     -0.751213      -4.22485       4.22485       985.710       989.935    
  32  0.313755      -1.15914      -6.51905       6.51905       986.238       992.757    
  33  0.878815     -0.129181     -0.726515      0.726515       987.251       987.978    
  34  0.442284     -0.815802      -4.58810       4.58810       987.310       991.898    
  35  0.577998     -0.548185      -3.08301       3.08301       983.679       986.762    
  36  0.167851      -1.78468      -10.0371       10.0371       994.056       1004.09    
  37  0.317031      -1.14875      -6.46063       6.46063       996.403       1002.86    
  38  0.645763     -0.437323      -2.45952       2.45952       981.710       984.170    
  39  0.682139     -0.382522      -2.15131       2.15131       988.084       990.235    
  40  0.116437      -2.15041      -12.0940       12.0940       995.346       1007.44    
  41  0.510594     -0.672180      -3.78036       3.78036       984.896       988.676    
  42  0.807696E-02  -4.81874      -27.1007       27.1007       991.624       1018.72    
  43  0.367650      -1.00062      -5.62754       5.62754       995.410       1001.04    
  44  0.446943     -0.805324      -4.52917       4.52917       998.728       1003.26    
  45  0.181490      -1.70655      -9.59771       9.59771       993.949       1003.55    
  46  0.912521     -0.915438E-01 -0.514845      0.514845       1002.15       1002.67    
  47  0.692870     -0.366912      -2.06353       2.06353       998.357       1000.42    
  48  0.317456      -1.14742      -6.45311       6.45311       1002.69       1009.14    
  49  0.776642     -0.252776      -1.42162       1.42162       988.093       989.515    
  50  0.248677      -1.39160      -7.82640       7.82640       1006.43       1014.25    
  51  0.931207     -0.712734E-01 -0.400844      0.400844       994.784       995.184    
  52  0.127901      -2.05650      -11.5658       11.5658       1005.98       1017.55    
  53  0.780843     -0.247381      -1.39128       1.39128       985.610       987.002    
loop,thermsimp(1:2)       56   3.88723       6.32341    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    405        999.51          0.85          1.15         21.98          0.00          0.05         24.02
Just calling func    0   0         24.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    999.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       56
neval is:      404
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       57
neval is:      404


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      404     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842839     -0.170980     -0.961595      0.961595       925.150       926.112    
   2  0.986423     -0.136696E-01 -0.768783E-01  0.768783E-01   931.542       931.619    
   3  0.633540     -0.456433      -2.56699       2.56699       934.070       936.637    
   4  0.518217E-01  -2.95995      -16.6468       16.6468       934.437       951.084    
   5  0.187161      -1.67579      -9.42467       9.42467       940.773       950.198    
   6  0.148298      -1.90853      -10.7337       10.7337       935.201       945.934    
   7  0.438795     -0.823722      -4.63264       4.63264       935.687       940.320    
   8  0.763297     -0.270109      -1.51910       1.51910       946.467       947.986    
   9  0.338275      -1.08390      -6.09586       6.09586       943.917       950.013    
  10  0.918815     -0.846702E-01 -0.476188      0.476188       950.272       950.748    
  11  0.349782      -1.05045      -5.90774       5.90774       958.586       964.493    
  12  0.131188      -2.03112      -11.4231       11.4231       944.199       955.622    
  13  0.961440     -0.393229E-01 -0.221153      0.221153       943.606       943.827    
  14  0.489949     -0.713455      -4.01249       4.01249       959.713       963.725    
  15  0.149956      -1.89742      -10.6711       10.6711       962.533       973.204    
  16  0.684004     -0.379791      -2.13596       2.13596       964.011       966.147    
  17  0.314778      -1.15589      -6.50075       6.50075       968.571       975.072    
  18  0.615260     -0.485711      -2.73165       2.73165       968.905       971.637    
  19  0.432805     -0.837468      -4.70995       4.70995       968.726       973.436    
  20  0.362224      -1.01549      -5.71116       5.71116       954.866       960.578    
  21  0.622697     -0.473696      -2.66408       2.66408       974.618       977.283    
  22  0.486392     -0.720740      -4.05347       4.05347       968.287       972.340    
  23  0.465513     -0.764615      -4.30022       4.30022       975.399       979.699    
  24  0.738251     -0.303471      -1.70673       1.70673       971.915       973.621    
  25  0.384600     -0.955551      -5.37405       5.37405       974.601       979.975    
  26  0.293922      -1.22444      -6.88629       6.88629       980.018       986.904    
  27  0.371803     -0.989390      -5.56436       5.56436       981.710       987.275    
  28  0.237589      -1.43721      -8.08294       8.08294       973.408       981.491    
  29  0.286147      -1.25125      -7.03706       7.03706       983.679       990.716    
  30  0.500459     -0.692230      -3.89312       3.89312       985.610       989.504    
  31  0.134865      -2.00348      -11.2676       11.2676       986.168       997.436    
  32  0.660213     -0.415193      -2.33506       2.33506       987.251       989.586    
  33  0.481817E-01  -3.03278      -17.0564       17.0564       984.896       1001.95    
  34  0.683728     -0.380195      -2.13823       2.13823       988.093       990.231    
  35  0.634601     -0.454758      -2.55757       2.55757       985.710       988.268    
  36  0.195153      -1.63397      -9.18950       9.18950       983.320       992.509    
  37  0.176401      -1.73499      -9.75766       9.75766       988.084       997.842    
  38  0.770296     -0.260980      -1.46776       1.46776       987.310       988.778    
  39  0.223005      -1.50056      -8.43919       8.43919       986.238       994.677    
  40  0.530844E-01  -2.93587      -16.5114       16.5114       994.784       1011.29    
  41  0.778354     -0.250574      -1.40923       1.40923       978.958       980.367    
  42  0.118362E-02  -6.73917      -37.9013       37.9013       998.357       1036.26    
  43  0.658087     -0.418418      -2.35319       2.35319       995.410       997.763    
  44  0.832154E-01  -2.48632      -13.9832       13.9832       1002.15       1016.14    
  45  0.569178     -0.563562      -3.16949       3.16949       996.403       999.572    
  46  0.511101     -0.671188      -3.77478       3.77478       998.728       1002.50    
  47  0.585157     -0.535875      -3.01378       3.01378       993.949       996.963    
  48  0.821991     -0.196026      -1.10246       1.10246       994.056       995.158    
  49  0.433318     -0.836284      -4.70328       4.70328       995.346       1000.05    
  50  0.286210      -1.25103      -7.03583       7.03583       1002.69       1009.72    
  51  0.455679     -0.785966      -4.42029       4.42029       1006.43       1010.85    
  52  0.729010     -0.316067      -1.77757       1.77757       1005.98       1007.76    
  53  0.608401     -0.496921      -2.79470       2.79470       999.513       1002.31    
loop,thermsimp(1:2)       57  0.961595      0.768783E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    406        995.00          0.84          1.14         22.05          0.01          0.05         24.09
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    995.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       57
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       58
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      405     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.524788     -0.644761      -3.62616       3.62616       925.150       928.776    
   2  0.210443      -1.55854      -8.76529       8.76529       931.542       940.307    
   3  0.930464     -0.720719E-01 -0.405335      0.405335       934.070       934.475    
   4  0.858664     -0.152378     -0.856979      0.856979       935.687       936.544    
   5  0.285726      -1.25272      -7.04534       7.04534       943.606       950.651    
   6  0.144917      -1.93160      -10.8634       10.8634       935.201       946.064    
   7  0.999977     -0.230243E-04 -0.129489E-03  0.129489E-03   946.467       946.467    
   8  0.985482     -0.146243E-01 -0.822474E-01  0.822474E-01   943.917       944.000    
   9  0.204255      -1.58839      -8.93314       8.93314       940.773       949.706    
  10  0.932647     -0.697284E-01 -0.392154      0.392154       950.272       950.664    
  11  0.916829     -0.868346E-01 -0.488360      0.488360       934.437       934.926    
  12  0.468002     -0.759282      -4.27022       4.27022       944.199       948.469    
  13  0.314730      -1.15604      -6.50160       6.50160       954.866       961.368    
  14  0.641708     -0.443621      -2.49494       2.49494       959.713       962.208    
  15  0.829165     -0.187336      -1.05358       1.05358       958.586       959.639    
  16  0.163052E-01  -4.11627      -23.1500       23.1500       964.011       987.161    
  17  0.795714     -0.228516      -1.28518       1.28518       968.905       970.190    
  18  0.933380     -0.689433E-01 -0.387739      0.387739       968.287       968.674    
  19  0.839430E-01  -2.47762      -13.9342       13.9342       962.533       976.467    
  20  0.684979     -0.378367      -2.12795       2.12795       968.726       970.854    
  21  0.473112     -0.748422      -4.20915       4.20915       971.915       976.124    
  22  0.513710     -0.666097      -3.74615       3.74615       968.571       972.317    
  23  0.360837      -1.01933      -5.73274       5.73274       974.618       980.351    
  24  0.427332E-01  -3.15278      -17.7313       17.7313       975.399       993.130    
  25  0.772426     -0.258219      -1.45223       1.45223       974.601       976.053    
  26  0.514081     -0.665375      -3.74209       3.74209       978.958       982.700    
  27  0.794349     -0.230233      -1.29484       1.29484       973.408       974.703    
  28  0.306573      -1.18230      -6.64928       6.64928       980.018       986.667    
  29  0.542954     -0.610731      -3.43477       3.43477       981.710       985.145    
  30  0.309169      -1.17387      -6.60187       6.60187       985.710       992.312    
  31  0.870005     -0.139256     -0.783181      0.783181       987.310       988.093    
  32  0.559982     -0.579850      -3.26109       3.26109       985.610       988.872    
  33  0.779248     -0.249426      -1.40278       1.40278       987.251       988.654    
  34  0.852492     -0.159591     -0.897545      0.897545       988.093       988.991    
  35  0.513103E-01  -2.96986      -16.7026       16.7026       983.679       1000.38    
  36  0.843623     -0.170050     -0.956364      0.956364       983.320       984.276    
  37  0.514962E-01  -2.96625      -16.6823       16.6823       986.238       1002.92    
  38  0.509762     -0.673812      -3.78954       3.78954       994.056       997.845    
  39  0.511862E-01  -2.97229      -16.7162       16.7162       993.949       1010.67    
  40  0.118788      -2.13041      -11.9815       11.9815       986.168       998.150    
  41  0.156747      -1.85312      -10.4220       10.4220       995.410       1005.83    
  42  0.715854     -0.334278      -1.87999       1.87999       988.084       989.964    
  43  0.472923     -0.748824      -4.21141       4.21141       996.403       1000.61    
  44  0.105826      -2.24596      -12.6313       12.6313       995.346       1007.98    
  45  0.214159      -1.54104      -8.66685       8.66685       984.896       993.562    
  46  0.212749      -1.54764      -8.70399       8.70399       999.513       1008.22    
  47  0.173051      -1.75417      -9.86550       9.86550       998.728       1008.59    
  48  0.301411      -1.19928      -6.74479       6.74479       1005.98       1012.73    
  49  0.438447E-01  -3.12710      -17.5869       17.5869       1002.69       1020.27    
  50  0.480396     -0.733144      -4.12322       4.12322       1006.43       1010.55    
  51  0.537259     -0.621276      -3.49407       3.49407       994.784       998.278    
  52  0.252945      -1.37458      -7.73069       7.73069       1002.15       1009.89    
  53  0.273135      -1.29779      -7.29881       7.29881       995.005       1002.30    
loop,thermsimp(1:2)       58   3.62616       8.76529    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    407        995.43          0.86          1.15         22.15          0.02          0.04         24.22
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    995.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       58
neval is:      406
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       59
neval is:      406


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      406     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810144     -0.210543      -1.18410       1.18410       925.150       926.334    
   2  0.897699     -0.107920     -0.606946      0.606946       934.070       934.677    
   3  0.719626     -0.329023      -1.85044       1.85044       934.437       936.288    
   4  0.415410     -0.878490      -4.94065       4.94065       935.687       940.628    
   5  0.991404     -0.863283E-02 -0.485513E-01  0.485513E-01   931.542       931.591    
   6  0.700708     -0.355664      -2.00026       2.00026       943.917       945.918    
   7  0.358389      -1.02614      -5.77102       5.77102       935.201       940.972    
   8  0.726731     -0.319199      -1.79519       1.79519       946.467       948.262    
   9  0.386831     -0.949769      -5.34153       5.34153       944.199       949.541    
  10  0.294784      -1.22151      -6.86983       6.86983       940.773       947.643    
  11  0.315848      -1.15249      -6.48166       6.48166       943.606       950.088    
  12  0.284632E-01  -3.55914      -20.0167       20.0167       950.272       970.288    
  13  0.316608      -1.15009      -6.46815       6.46815       958.586       965.054    
  14  0.309580      -1.17254      -6.59439       6.59439       954.866       961.461    
  15  0.758095     -0.276946      -1.55755       1.55755       959.713       961.270    
  16  0.132565      -2.02068      -11.3644       11.3644       968.287       979.651    
  17  0.963676     -0.369997E-01 -0.208088      0.208088       968.905       969.113    
  18  0.428996     -0.846309      -4.75967       4.75967       968.726       973.486    
  19  0.975676     -0.246243E-01 -0.138488      0.138488       968.571       968.709    
  20  0.475146     -0.744134      -4.18503       4.18503       973.408       977.593    
  21  0.507593     -0.678075      -3.81351       3.81351       974.601       978.415    
  22  0.275170      -1.29037      -7.25706       7.25706       971.915       979.172    
  23  0.475456     -0.743481      -4.18136       4.18136       962.533       966.714    
  24  0.302172      -1.19676      -6.73060       6.73060       974.618       981.349    
  25  0.243313      -1.41341      -7.94905       7.94905       978.958       986.907    
  26  0.356568      -1.03123      -5.79967       5.79967       983.320       989.119    
  27  0.630291     -0.461573      -2.59590       2.59590       981.710       984.306    
  28  0.642369     -0.442593      -2.48916       2.48916       980.018       982.507    
  29  0.593424     -0.521846      -2.93488       2.93488       964.011       966.946    
  30  0.813415     -0.206514      -1.16144       1.16144       987.310       988.471    
  31  0.623760     -0.471989      -2.65448       2.65448       987.251       989.906    
  32  0.314127      -1.15796      -6.51239       6.51239       985.610       992.123    
  33  0.333295      -1.09873      -6.17928       6.17928       988.093       994.273    
  34  0.974282     -0.260545E-01 -0.146531      0.146531       988.084       988.231    
  35  0.217685      -1.52471      -8.57500       8.57500       985.710       994.285    
  36  0.327903      -1.11504      -6.27101       6.27101       975.399       981.670    
  37  0.336622      -1.08880      -6.12342       6.12342       984.896       991.019    
  38  0.569408     -0.563159      -3.16722       3.16722       994.056       997.223    
  39  0.577250E-01  -2.85206      -16.0401       16.0401       986.168       1002.21    
  40  0.237530      -1.43746      -8.08433       8.08433       994.784       1002.87    
  41  0.622163     -0.474553      -2.66890       2.66890       983.679       986.348    
  42  0.476244     -0.741825      -4.17205       4.17205       996.403       1000.57    
  43  0.914828     -0.890196E-01 -0.500649      0.500649       995.005       995.506    
  44  0.555890     -0.587184      -3.30234       3.30234       986.238       989.540    
  45  0.874902     -0.133644     -0.751617      0.751617       995.410       996.161    
  46  0.637871     -0.449619      -2.52867       2.52867       995.346       997.874    
  47  0.574852     -0.553643      -3.11371       3.11371       999.513       1002.63    
  48  0.753498     -0.283029      -1.59177       1.59177       998.728       1000.32    
  49  0.678645     -0.387657      -2.18020       2.18020       1002.15       1004.33    
  50  0.361720      -1.01688      -5.71898       5.71898       1006.43       1012.14    
  51  0.123381      -2.09248      -11.7682       11.7682       993.949       1005.72    
  52  0.350198      -1.04926      -5.90105       5.90105       1005.98       1011.88    
  53  0.392572     -0.935035      -5.25866       5.25866       995.428       1000.69    
loop,thermsimp(1:2)       59   1.18410      0.606946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    408       1017.09          0.86          1.14         21.94          0.01          0.05         23.99
Just calling func    0   0         23.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    409        961.07          0.85          1.14         21.86          0.00          0.05         23.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    961.07
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       59
neval is:      408
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       60
neval is:      408


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      408     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421109     -0.864863      -4.86402       4.86402       925.150       930.014    
   2  0.422022     -0.862697      -4.85184       4.85184       931.542       936.394    
   3  0.295550      -1.21892      -6.85522       6.85522       934.070       940.925    
   4  0.624681     -0.470513      -2.64618       2.64618       934.437       937.084    
   5  0.768652     -0.263117      -1.47978       1.47978       935.687       937.167    
   6  0.888855     -0.117822     -0.662632      0.662632       935.201       935.863    
   7  0.509140     -0.675031      -3.79640       3.79640       943.917       947.714    
   8  0.493628     -0.705973      -3.97041       3.97041       940.773       944.744    
   9  0.781578     -0.246440      -1.38599       1.38599       946.467       947.853    
  10  0.617265     -0.482456      -2.71335       2.71335       944.199       946.912    
  11  0.335801      -1.09124      -6.13714       6.13714       943.606       949.743    
  12  0.570262     -0.561660      -3.15879       3.15879       959.713       962.872    
  13  0.159269      -1.83716      -10.3322       10.3322       954.866       965.199    
  14  0.339767      -1.07950      -6.07112       6.07112       958.586       964.657    
  15  0.493989     -0.705242      -3.96630       3.96630       962.533       966.499    
  16  0.839254     -0.175242     -0.985565      0.985565       964.011       964.997    
  17  0.421889E-01  -3.16560      -17.8034       17.8034       968.571       986.374    
  18  0.278070      -1.27988      -7.19811       7.19811       968.905       976.103    
  19  0.942016E-01  -2.36232      -13.2858       13.2858       950.272       963.557    
  20  0.627802E-01  -2.76812      -15.5680       15.5680       968.726       984.294    
  21  0.228221      -1.47744      -8.30918       8.30918       973.408       981.718    
  22  0.929298     -0.733263E-01 -0.412389      0.412389       974.601       975.013    
  23  0.505346     -0.682512      -3.83847       3.83847       971.915       975.753    
  24  0.181316      -1.70751      -9.60311       9.60311       968.287       977.890    
  25  0.430977     -0.841701      -4.73375       4.73375       974.618       979.352    
  26  0.161604      -1.82261      -10.2504       10.2504       975.399       985.649    
  27  0.428774     -0.846826      -4.76258       4.76258       980.018       984.781    
  28  0.178213      -1.72477      -9.70018       9.70018       981.710       991.411    
  29  0.440884E-01  -3.12156      -17.5557       17.5557       983.679       1001.24    
  30  0.224754      -1.49275      -8.39527       8.39527       978.958       987.353    
  31  0.174128      -1.74796      -9.83060       9.83060       988.084       997.915    
  32  0.798091     -0.225532      -1.26840       1.26840       987.310       988.578    
  33  0.303667E-01  -3.49441      -19.6527       19.6527       983.320       1002.97    
  34  0.256290      -1.36145      -7.65681       7.65681       986.238       993.895    
  35  0.367468      -1.00112      -5.63033       5.63033       987.251       992.882    
  36  0.455395     -0.786590      -4.42381       4.42381       984.896       989.319    
  37  0.618612     -0.480277      -2.70109       2.70109       985.610       988.312    
  38  0.348147      -1.05513      -5.93409       5.93409       988.093       994.027    
  39  0.930736     -0.717801E-01 -0.403693      0.403693       985.710       986.114    
  40  0.822258     -0.195701      -1.10063       1.10063       995.005       996.106    
  41  0.444031     -0.811860      -4.56592       4.56592       995.410       999.976    
  42  0.599515     -0.511634      -2.87745       2.87745       994.056       996.933    
  43  0.866231     -0.143603     -0.807630      0.807630       995.346       996.153    
  44  0.143678      -1.94018      -10.9116       10.9116       998.728       1009.64    
  45  0.280081      -1.27267      -7.15756       7.15756       996.403       1003.56    
  46  0.834705E-01  -2.48326      -13.9659       13.9659       995.428       1009.39    
  47  0.514478     -0.664603      -3.73775       3.73775       986.168       989.906    
  48  0.358853      -1.02484      -5.76375       5.76375       999.513       1005.28    
  49  0.432015     -0.839295      -4.72022       4.72022       994.784       999.504    
  50  0.959030     -0.418333E-01 -0.235272      0.235272       1002.15       1002.39    
  51  0.236715      -1.44090      -8.10366       8.10366       993.949       1002.05    
  52  0.741102     -0.299618      -1.68506       1.68506       1005.98       1007.67    
  53  0.971037     -0.293910E-01 -0.165296      0.165296       961.067       961.232    
loop,thermsimp(1:2)       60   4.86402       4.85184    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    410       1000.72          0.85          1.14         21.88          0.00          0.05         23.92
Just calling func    0   0         23.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1000.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       60
neval is:      409
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       61
neval is:      409


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      409     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297049      -1.21386      -6.82678       6.82678       925.150       931.977    
   2  0.575341     -0.552793      -3.10892       3.10892       935.201       938.310    
   3  0.202897      -1.59506      -8.97065       8.97065       931.542       940.513    
   4  0.154497      -1.86758      -10.5033       10.5033       934.437       944.941    
   5  0.990348     -0.969851E-02 -0.545447E-01  0.545447E-01   935.687       935.741    
   6  0.189774      -1.66192      -9.34669       9.34669       934.070       943.416    
   7  0.744626     -0.294873      -1.65838       1.65838       940.773       942.432    
   8  0.927855     -0.748799E-01 -0.421127      0.421127       944.199       944.620    
   9  0.730698     -0.313755      -1.76457       1.76457       943.917       945.682    
  10  0.375841     -0.978590      -5.50362       5.50362       946.467       951.970    
  11  0.792754     -0.232243      -1.30614       1.30614       943.606       944.912    
  12  0.232963      -1.45687      -8.19350       8.19350       961.067       969.261    
  13  0.816440     -0.202802      -1.14056       1.14056       959.713       960.853    
  14  0.626790     -0.467144      -2.62723       2.62723       950.272       952.899    
  15  0.943587     -0.580664E-01 -0.326567      0.326567       958.586       958.912    
  16  0.790178     -0.235497      -1.32444       1.32444       964.011       965.336    
  17  0.318791      -1.14322      -6.42950       6.42950       954.866       961.296    
  18  0.982573     -0.175804E-01 -0.988726E-01  0.988726E-01   962.533       962.632    
  19  0.959024     -0.418390E-01 -0.235304      0.235304       974.601       974.836    
  20  0.309588      -1.17251      -6.59425       6.59425       971.915       978.509    
  21  0.255297      -1.36533      -7.67865       7.67865       968.905       976.584    
  22  0.287931      -1.24504      -7.00212       7.00212       968.287       975.289    
  23  0.948191     -0.531995E-01 -0.299196      0.299196       974.618       974.918    
  24  0.231941      -1.46127      -8.21824       8.21824       973.408       981.627    
  25  0.730836E-01  -2.61615      -14.7133       14.7133       968.726       983.440    
  26  0.130964      -2.03283      -11.4327       11.4327       980.018       991.451    
  27  0.199641      -1.61124      -9.06164       9.06164       975.399       984.460    
  28  0.375837     -0.978600      -5.50368       5.50368       985.710       991.214    
  29  0.584992     -0.536158      -3.01537       3.01537       968.571       971.586    
  30  0.505862     -0.681491      -3.83272       3.83272       978.958       982.790    
  31  0.431310     -0.840928      -4.72941       4.72941       985.610       990.340    
  32  0.273049E-01  -3.60069      -20.2504       20.2504       987.310       1007.56    
  33  0.865419E-01  -2.44713      -13.7627       13.7627       984.896       998.658    
  34  0.174989      -1.74303      -9.80285       9.80285       986.168       995.971    
  35  0.547517     -0.602362      -3.38770       3.38770       981.710       985.098    
  36  0.562902E-02  -5.17982      -29.1315       29.1315       987.251       1016.38    
  37  0.386997     -0.949338      -5.33911       5.33911       986.238       991.577    
  38  0.750107     -0.287539      -1.61713       1.61713       988.093       989.710    
  39  0.218818      -1.51951      -8.54579       8.54579       995.005       1003.55    
  40  0.821700     -0.196380      -1.10444       1.10444       995.346       996.450    
  41  0.223897      -1.49657      -8.41675       8.41675       994.056       1002.47    
  42  0.744973     -0.294407      -1.65575       1.65575       988.084       989.740    
  43  0.279239      -1.27569      -7.17450       7.17450       994.784       1001.96    
  44  0.210659      -1.55751      -8.75951       8.75951       995.410       1004.17    
  45  0.998203     -0.179835E-02 -0.101140E-01  0.101140E-01   983.679       983.689    
  46  0.355772      -1.03347      -5.81225       5.81225       993.949       999.762    
  47  0.437893     -0.825781      -4.64422       4.64422       1002.15       1006.80    
  48  0.897806E-01  -2.41039      -13.5561       13.5561       983.320       996.876    
  49  0.970127     -0.303283E-01 -0.170567      0.170567       996.403       996.573    
  50  0.463485     -0.768981      -4.32477       4.32477       999.513       1003.84    
  51  0.605373     -0.501911      -2.82276       2.82276       1005.98       1008.80    
  52  0.622934     -0.473314      -2.66193       2.66193       995.428       998.090    
  53  0.937920     -0.640902E-01 -0.360445      0.360445       1000.72       1001.08    
loop,thermsimp(1:2)       61   6.82678       3.10892    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    411       1021.02          0.84          1.14         21.90          0.00          0.05         23.93
Just calling func    0   0         23.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    412        964.80          0.84          1.14         21.83          0.02          0.05         23.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    964.80
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       61
neval is:      411
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       62
neval is:      411


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      411     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.176971      -1.73177      -9.73953       9.73953       925.150       934.889    
   2  0.163120      -1.81327      -10.1979       10.1979       935.687       945.885    
   3  0.828064     -0.188664      -1.06105       1.06105       935.201       936.262    
   4  0.491219     -0.710866      -3.99793       3.99793       931.542       935.540    
   5  0.473397     -0.747822      -4.20577       4.20577       940.773       944.979    
   6  0.737394     -0.304633      -1.71326       1.71326       934.070       935.783    
   7  0.206273      -1.57855      -8.87783       8.87783       944.199       953.077    
   8  0.354259      -1.03773      -5.83621       5.83621       943.606       949.442    
   9  0.233194      -1.45588      -8.18794       8.18794       934.437       942.625    
  10  0.118120E-01  -4.43864      -24.9631       24.9631       943.917       968.880    
  11  0.918073     -0.854782E-01 -0.480732      0.480732       946.467       946.947    
  12  0.845317     -0.168044     -0.945085      0.945085       950.272       951.217    
  13  0.706964     -0.346775      -1.95027       1.95027       958.586       960.536    
  14  0.779001     -0.249743      -1.40456       1.40456       959.713       961.117    
  15  0.455959     -0.785352      -4.41684       4.41684       954.866       959.283    
  16  0.849694     -0.162880     -0.916039      0.916039       962.533       963.449    
  17  0.516839     -0.660024      -3.71199       3.71199       964.011       967.723    
  18  0.892086     -0.114192     -0.642220      0.642220       961.067       961.709    
  19  0.297598      -1.21201      -6.81639       6.81639       968.571       975.387    
  20  0.719255E-01  -2.63213      -14.8032       14.8032       974.601       989.404    
  21  0.722825     -0.324588      -1.82549       1.82549       974.618       976.444    
  22  0.550765     -0.596446      -3.35443       3.35443       968.287       971.641    
  23  0.988777     -0.112866E-01 -0.634764E-01  0.634764E-01   968.905       968.969    
  24  0.706438     -0.347520      -1.95446       1.95446       971.915       973.869    
  25  0.630672     -0.460969      -2.59251       2.59251       973.408       976.001    
  26  0.377261     -0.974818      -5.48241       5.48241       978.958       984.440    
  27  0.149262E-01  -4.20464      -23.6470       23.6470       968.726       992.373    
  28  0.185115      -1.68678      -9.48649       9.48649       983.679       993.166    
  29  0.836458     -0.178579      -1.00433       1.00433       975.399       976.403    
  30  0.778304     -0.250638      -1.40960       1.40960       981.710       983.120    
  31  0.495633     -0.701920      -3.94762       3.94762       988.093       992.041    
  32  0.795767E-01  -2.53103      -14.2346       14.2346       988.084       1002.32    
  33  0.361545      -1.01737      -5.72172       5.72172       985.610       991.332    
  34  0.451858     -0.794387      -4.46766       4.46766       985.710       990.178    
  35  0.923485     -0.796009E-01 -0.447678      0.447678       980.018       980.466    
  36  0.189492      -1.66341      -9.35506       9.35506       986.238       995.593    
  37  0.357280      -1.02924      -5.78845       5.78845       986.168       991.957    
  38  0.113039      -2.18002      -12.2605       12.2605       995.346       1007.61    
  39  0.418587     -0.870870      -4.89780       4.89780       996.403       1001.30    
  40  0.732527E-01  -2.61384      -14.7003       14.7003       983.320       998.020    
  41  0.768904     -0.262790      -1.47794       1.47794       995.428       996.906    
  42  0.323623      -1.12817      -6.34489       6.34489       984.896       991.240    
  43  0.837193     -0.177701     -0.999396      0.999396       993.949       994.949    
  44  0.656230     -0.421244      -2.36909       2.36909       1000.72       1003.09    
  45  0.778603     -0.250253      -1.40743       1.40743       994.784       996.191    
  46  0.736391     -0.305994      -1.72092       1.72092       994.056       995.777    
  47  0.625820E-01  -2.77128      -15.5857       15.5857       995.005       1010.59    
  48  0.480814     -0.732276      -4.11834       4.11834       999.513       1003.63    
  49  0.356284      -1.03203      -5.80415       5.80415       995.410       1001.21    
  50  0.888471     -0.118254     -0.665062      0.665062       1002.15       1002.82    
  51  0.670294     -0.400038      -2.24983       2.24983       987.310       989.560    
  52  0.651699     -0.428172      -2.40805       2.40805       1005.98       1008.39    
  53  0.620073E-01  -2.78050      -15.6376       15.6376       964.798       980.436    
loop,thermsimp(1:2)       62   9.73953       10.1979    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    413       1000.33          0.86          1.14         21.88          0.00          0.05         23.93
Just calling func    0   0         23.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1000.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       62
neval is:      412
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       63
neval is:      412


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      412     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.278876      -1.27699      -7.18181       7.18181       925.150       932.332    
   2  0.603344     -0.505268      -2.84164       2.84164       931.542       934.384    
   3  0.363780      -1.01121      -5.68705       5.68705       934.070       939.757    
   4  0.298736      -1.20820      -6.79493       6.79493       935.201       941.996    
   5  0.992861     -0.716435E-02 -0.402925E-01  0.402925E-01   934.437       934.478    
   6  0.166164      -1.79478      -10.0939       10.0939       940.773       950.867    
   7  0.416382     -0.876153      -4.92751       4.92751       935.687       940.614    
   8  0.770949     -0.260133      -1.46300       1.46300       946.467       947.930    
   9  0.782423     -0.245359      -1.37991       1.37991       943.606       944.986    
  10  0.115501      -2.15847      -12.1393       12.1393       950.272       962.411    
  11  0.348954      -1.05281      -5.92106       5.92106       944.199       950.120    
  12  0.441818     -0.816857      -4.59403       4.59403       954.866       959.461    
  13  0.888072     -0.118703     -0.667589      0.667589       958.586       959.253    
  14  0.808059     -0.213120      -1.19859       1.19859       959.713       960.911    
  15  0.432540E-01  -3.14067      -17.6632       17.6632       961.067       978.730    
  16  0.369483     -0.995652      -5.59958       5.59958       962.533       968.133    
  17  0.262535      -1.33737      -7.52142       7.52142       964.011       971.533    
  18  0.873783     -0.134923     -0.758811      0.758811       943.917       944.676    
  19  0.636654     -0.451528      -2.53941       2.53941       968.905       971.444    
  20  0.534780     -0.625901      -3.52008       3.52008       968.287       971.807    
  21  0.557733     -0.583875      -3.28373       3.28373       971.915       975.198    
  22  0.929598     -0.730032E-01 -0.410572      0.410572       968.571       968.981    
  23  0.350245      -1.04912      -5.90029       5.90029       973.408       979.309    
  24  0.391945     -0.936633      -5.26765       5.26765       975.399       980.666    
  25  0.123996      -2.08751      -11.7402       11.7402       974.618       986.359    
  26  0.609578E-01  -2.79757      -15.7336       15.7336       964.798       980.532    
  27  0.165807      -1.79693      -10.1060       10.1060       980.018       990.124    
  28  0.766484     -0.265941      -1.49566       1.49566       981.710       983.206    
  29  0.629881     -0.462224      -2.59956       2.59956       978.958       981.557    
  30  0.273641      -1.29594      -7.28839       7.28839       974.601       981.889    
  31  0.344034E-01  -3.36960      -18.9507       18.9507       987.310       1006.26    
  32  0.747187     -0.291440      -1.63906       1.63906       985.710       987.349    
  33  0.511998     -0.669435      -3.76492       3.76492       984.896       988.660    
  34  0.544406     -0.608061      -3.41975       3.41975       985.610       989.030    
  35  0.272552      -1.29993      -7.31083       7.31083       986.168       993.479    
  36  0.605186     -0.502220      -2.82450       2.82450       988.093       990.918    
  37  0.923323     -0.797758E-01 -0.448662      0.448662       968.726       969.175    
  38  0.373879     -0.983822      -5.53305       5.53305       983.679       989.212    
  39  0.325119      -1.12356      -6.31896       6.31896       993.949       1000.27    
  40  0.746995E-01  -2.59428      -14.5903       14.5903       986.238       1000.83    
  41  0.465030     -0.765653      -4.30606       4.30606       994.056       998.362    
  42  0.150040      -1.89685      -10.6680       10.6680       994.784       1005.45    
  43  0.127827E-01  -4.35967      -24.5189       24.5189       995.428       1019.95    
  44  0.667575     -0.404103      -2.27269       2.27269       983.320       985.592    
  45  0.725579     -0.320785      -1.80410       1.80410       995.410       997.214    
  46  0.555976     -0.587030      -3.30147       3.30147       996.403       999.704    
  47  0.834777     -0.180590      -1.01564       1.01564       988.084       989.100    
  48  0.582668     -0.540138      -3.03775       3.03775       1002.15       1005.19    
  49  0.265288      -1.32694      -7.46275       7.46275       1000.72       1008.18    
  50  0.935593     -0.665747E-01 -0.374418      0.374418       999.513       999.887    
  51  0.789592     -0.236239      -1.32862       1.32862       995.346       996.674    
  52  0.337907      -1.08498      -6.10198       6.10198       1005.98       1012.08    
  53  0.359971      -1.02173      -5.74625       5.74625       1000.33       1006.08    
loop,thermsimp(1:2)       63   7.18181       2.84164    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    414        985.99          0.85          1.14         22.01          0.00          0.05         24.05
Just calling func    0   0         24.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    985.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       63
neval is:      413
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       64
neval is:      413


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      413     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379008E-01  -3.27278      -18.4062       18.4062       925.150       943.556    
   2  0.772352     -0.258315      -1.45277       1.45277       931.542       932.995    
   3  0.802807     -0.219640      -1.23526       1.23526       934.437       935.673    
   4  0.514956     -0.663673      -3.73252       3.73252       934.070       937.802    
   5  0.554302     -0.590045      -3.31843       3.31843       935.687       939.005    
   6  0.503754     -0.685667      -3.85621       3.85621       935.201       939.057    
   7  0.400624     -0.914733      -5.14448       5.14448       943.917       949.062    
   8  0.912762     -0.912806E-01 -0.513365      0.513365       943.606       944.119    
   9  0.197841E-01  -3.92288      -22.0624       22.0624       946.467       968.529    
  10  0.657402E-02  -5.02463      -28.2587       28.2587       944.199       972.458    
  11  0.802861     -0.219574      -1.23489       1.23489       940.773       942.008    
  12  0.494750     -0.703703      -3.95765       3.95765       958.586       962.543    
  13  0.533728     -0.627869      -3.53115       3.53115       954.866       958.398    
  14  0.202886      -1.59511      -8.97096       8.97096       959.713       968.684    
  15  0.459498     -0.777620      -4.37336       4.37336       950.272       954.645    
  16  0.476385     -0.741530      -4.17038       4.17038       962.533       966.703    
  17  0.604782     -0.502887      -2.82825       2.82825       968.571       971.399    
  18  0.652452     -0.427018      -2.40156       2.40156       968.726       971.128    
  19  0.611862     -0.491249      -2.76280       2.76280       968.905       971.668    
  20  0.974982     -0.253365E-01 -0.142494      0.142494       964.011       964.154    
  21  0.950238E-01  -2.35363      -13.2369       13.2369       968.287       981.524    
  22  0.322848      -1.13057      -6.35838       6.35838       971.915       978.273    
  23  0.581382     -0.542348      -3.05018       3.05018       961.067       964.117    
  24  0.267652      -1.31807      -7.41286       7.41286       973.408       980.821    
  25  0.232641E-01  -3.76084      -21.1511       21.1511       964.798       985.949    
  26  0.515113E-01  -2.96595      -16.6806       16.6806       975.399       992.079    
  27  0.300440      -1.20251      -6.76294       6.76294       978.958       985.721    
  28  0.760936     -0.273206      -1.53652       1.53652       974.601       976.138    
  29  0.447102     -0.804968      -4.52716       4.52716       981.710       986.238    
  30  0.550831     -0.596328      -3.35377       3.35377       983.320       986.673    
  31  0.314273      -1.15749      -6.50978       6.50978       974.618       981.128    
  32  0.967020     -0.335365E-01 -0.188610      0.188610       985.710       985.899    
  33  0.505250     -0.682701      -3.83953       3.83953       984.896       988.735    
  34  0.416175     -0.876649      -4.93030       4.93030       985.610       990.541    
  35  0.450270     -0.797909      -4.48746       4.48746       988.084       992.572    
  36  0.521734     -0.650597      -3.65898       3.65898       983.679       987.338    
  37  0.135069      -2.00197      -11.2591       11.2591       980.018       991.277    
  38  0.186856      -1.67742      -9.43385       9.43385       988.093       997.527    
  39  0.965761     -0.348385E-01 -0.195933      0.195933       986.168       986.364    
  40  0.419580     -0.868501      -4.88448       4.88448       995.346       1000.23    
  41  0.558190     -0.583056      -3.27912       3.27912       995.410       998.689    
  42  0.862407     -0.148028     -0.832511      0.832511       994.056       994.888    
  43  0.507376E-01  -2.98109      -16.7657       16.7657       996.403       1013.17    
  44  0.568000     -0.565633      -3.18114       3.18114       999.513       1002.69    
  45  0.750571     -0.286921      -1.61365       1.61365       993.949       995.563    
  46  0.873151     -0.135646     -0.762879      0.762879       986.238       987.001    
  47  0.204078      -1.58925      -8.93801       8.93801       1002.15       1011.09    
  48  0.610815     -0.492961      -2.77243       2.77243       994.784       997.556    
  49  0.666006E-01  -2.70904      -15.2357       15.2357       1000.33       1015.57    
  50  0.785181E-02  -4.84701      -27.2597       27.2597       987.310       1014.57    
  51  0.922541     -0.806234E-01 -0.453429      0.453429       1000.72       1001.17    
  52  0.576084     -0.551502      -3.10166       3.10166       1005.98       1009.08    
  53  0.589402     -0.528646      -2.97312       2.97312       985.988       988.961    
loop,thermsimp(1:2)       64   18.4062       1.45277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    415        996.78          0.85          1.14         21.87          0.06          0.05         23.97
Just calling func    0   0         23.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    996.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       64
neval is:      414
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       65
neval is:      414


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      414     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483176     -0.727373      -4.09077       4.09077       931.542       935.633    
   2  0.880011     -0.127821     -0.718869      0.718869       934.437       935.156    
   3  0.163672      -1.80989      -10.1789       10.1789       934.070       944.249    
   4  0.548194     -0.601126      -3.38075       3.38075       935.687       939.068    
   5  0.774171     -0.255963      -1.43954       1.43954       935.201       936.640    
   6  0.815808     -0.203577      -1.14492       1.14492       940.773       941.918    
   7  0.901270     -0.103951     -0.584621      0.584621       925.150       925.735    
   8  0.604998     -0.502529      -2.82624       2.82624       943.606       946.432    
   9  0.583320     -0.539020      -3.03146       3.03146       943.917       946.949    
  10  0.776155     -0.253403      -1.42515       1.42515       950.272       951.697    
  11  0.414399     -0.880925      -4.95435       4.95435       954.866       959.821    
  12  0.321893      -1.13354      -6.37505       6.37505       958.586       964.961    
  13  0.882206     -0.125330     -0.704858      0.704858       961.067       961.772    
  14  0.176926      -1.73202      -9.74094       9.74094       964.011       973.752    
  15  0.143482      -1.94155      -10.9193       10.9193       962.533       973.452    
  16  0.669321     -0.401491      -2.25800       2.25800       946.467       948.725    
  17  0.862244     -0.148216     -0.833574      0.833574       959.713       960.546    
  18  0.897950     -0.107641     -0.605373      0.605373       968.726       969.332    
  19  0.788148     -0.238070      -1.33891       1.33891       968.571       969.910    
  20  0.801563     -0.221191      -1.24399       1.24399       968.905       970.149    
  21  0.284401      -1.25737      -7.07148       7.07148       944.199       951.270    
  22  0.782583     -0.245155      -1.37876       1.37876       974.601       975.980    
  23  0.813976     -0.205825      -1.15757       1.15757       971.915       973.072    
  24  0.528421     -0.637861      -3.58735       3.58735       973.408       976.996    
  25  0.871065     -0.138038     -0.776332      0.776332       974.618       975.395    
  26  0.139992      -1.96617      -11.0578       11.0578       968.287       979.345    
  27  0.549296     -0.599118      -3.36946       3.36946       978.958       982.327    
  28  0.990967     -0.907357E-02 -0.510300E-01  0.510300E-01   985.710       985.761    
  29  0.735762     -0.306848      -1.72573       1.72573       964.798       966.524    
  30  0.647880     -0.434050      -2.44111       2.44111       981.710       984.151    
  31  0.324740      -1.12473      -6.32551       6.32551       986.168       992.494    
  32  0.995457E-01  -2.30714      -12.9754       12.9754       983.320       996.295    
  33  0.953388     -0.477336E-01 -0.268455      0.268455       986.238       986.506    
  34  0.573564     -0.555886      -3.12632       3.12632       983.679       986.806    
  35  0.988045     -0.120272E-01 -0.676415E-01  0.676415E-01   984.896       984.963    
  36  0.499857     -0.693433      -3.89989       3.89989       985.988       989.887    
  37  0.687815E-01  -2.67682      -15.0545       15.0545       985.610       1000.66    
  38  0.430407     -0.843024      -4.74119       4.74119       980.018       984.759    
  39  0.204975      -1.58487      -8.91335       8.91335       975.399       984.312    
  40  0.318612      -1.14378      -6.43266       6.43266       988.084       994.517    
  41  0.339792      -1.07942      -6.07070       6.07070       994.056       1000.13    
  42  0.609830     -0.494575      -2.78150       2.78150       993.949       996.731    
  43  0.518092     -0.657603      -3.69838       3.69838       988.093       991.792    
  44  0.595099     -0.519028      -2.91903       2.91903       994.784       997.703    
  45  0.658024     -0.418513      -2.35373       2.35373       995.410       997.763    
  46  0.324672      -1.12494      -6.32670       6.32670       995.346       1001.67    
  47  0.503769     -0.685637      -3.85605       3.85605       1000.72       1004.58    
  48  0.690978     -0.369647      -2.07891       2.07891       999.513       1001.59    
  49  0.961279     -0.394903E-01 -0.222095      0.222095       1005.98       1006.20    
  50  0.610537     -0.493416      -2.77499       2.77499       1002.15       1004.93    
  51  0.458399     -0.780016      -4.38683       4.38683       996.403       1000.79    
  52  0.779071     -0.249653      -1.40405       1.40405       987.310       988.714    
  53  0.684652     -0.378844      -2.13063       2.13063       996.775       998.906    
loop,thermsimp(1:2)       65   4.09077      0.718869    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    416       1007.92          0.86          1.14         21.87          0.05          0.05         23.96
Just calling func    0   0         23.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1007.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.62403               417
loop is:       65
neval is:      415
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    359.938      0.500000    
T0,tstep,tfreq (these do not change):             52
current SAtemp,tstepnext are:    5.62403               417
loop is:       66
neval is:      415


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      417
neval,tstepnext:      415     417

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.606374E-01  -2.80284      -15.7633       15.7633       925.150       940.913    
   2  0.695687     -0.362855      -2.04071       2.04071       934.437       936.478    
   3  0.695570E-01  -2.66561      -14.9915       14.9915       931.542       946.534    
   4  0.320604      -1.13755      -6.39760       6.39760       935.201       941.598    
